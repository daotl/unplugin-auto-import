"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault2(obj) { return obj && obj.__esModule ? obj : { default: obj }; }






var _chunkKL7XZQQ2cjs = require('./chunk-KL7XZQQ2.cjs');


var _chunkVL6W44BBcjs = require('./chunk-VL6W44BB.cjs');
require('./chunk-KYJK6LVW.cjs');




var _chunkI7OK7DX6cjs = require('./chunk-I7OK7DX6.cjs');

// node_modules/.pnpm/consola@2.15.3/node_modules/consola/dist/consola.js
var require_consola = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/consola@2.15.3/node_modules/consola/dist/consola.js"(exports, module) {
    "use strict";
    function u(u2) {
      return u2 && "object" == typeof u2 && "default" in u2 ? u2.default : u2;
    }
    var D = u(_chunkI7OK7DX6cjs.__require.call(void 0, "util"));
    var e = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
    var t = _chunkI7OK7DX6cjs.__require.call(void 0, "fs");
    var r2 = u(_chunkI7OK7DX6cjs.__require.call(void 0, "os"));
    var n = u(_chunkI7OK7DX6cjs.__require.call(void 0, "tty"));
    function s(u2, D2) {
      return u2(D2 = { exports: {} }, D2.exports), D2.exports;
    }
    var o;
    var i = (o = Object.freeze({ __proto__: null, default: [{ name: "AppVeyor", constant: "APPVEYOR", env: "APPVEYOR", pr: "APPVEYOR_PULL_REQUEST_NUMBER" }, { name: "Bamboo", constant: "BAMBOO", env: "bamboo_planKey" }, { name: "Bitbucket Pipelines", constant: "BITBUCKET", env: "BITBUCKET_COMMIT" }, { name: "Bitrise", constant: "BITRISE", env: "BITRISE_IO", pr: "BITRISE_PULL_REQUEST" }, { name: "Buddy", constant: "BUDDY", env: "BUDDY_WORKSPACE_ID", pr: "BUDDY_EXECUTION_PULL_REQUEST_ID" }, { name: "Buildkite", constant: "BUILDKITE", env: "BUILDKITE", pr: { env: "BUILDKITE_PULL_REQUEST", ne: "false" } }, { name: "CircleCI", constant: "CIRCLE", env: "CIRCLECI", pr: "CIRCLE_PULL_REQUEST" }, { name: "Cirrus CI", constant: "CIRRUS", env: "CIRRUS_CI", pr: "CIRRUS_PR" }, { name: "AWS CodeBuild", constant: "CODEBUILD", env: "CODEBUILD_BUILD_ARN" }, { name: "Codeship", constant: "CODESHIP", env: { CI_NAME: "codeship" } }, { name: "Drone", constant: "DRONE", env: "DRONE", pr: { DRONE_BUILD_EVENT: "pull_request" } }, { name: "dsari", constant: "DSARI", env: "DSARI" }, { name: "GitLab CI", constant: "GITLAB", env: "GITLAB_CI" }, { name: "GoCD", constant: "GOCD", env: "GO_PIPELINE_LABEL" }, { name: "Hudson", constant: "HUDSON", env: "HUDSON_URL" }, { name: "Jenkins", constant: "JENKINS", env: ["JENKINS_URL", "BUILD_ID"], pr: { any: ["ghprbPullId", "CHANGE_ID"] } }, { name: "Magnum CI", constant: "MAGNUM", env: "MAGNUM" }, { name: "Sail CI", constant: "SAIL", env: "SAILCI", pr: "SAIL_PULL_REQUEST_NUMBER" }, { name: "Semaphore", constant: "SEMAPHORE", env: "SEMAPHORE", pr: "PULL_REQUEST_NUMBER" }, { name: "Shippable", constant: "SHIPPABLE", env: "SHIPPABLE", pr: { IS_PULL_REQUEST: "true" } }, { name: "Solano CI", constant: "SOLANO", env: "TDDIUM", pr: "TDDIUM_PR_ID" }, { name: "Strider CD", constant: "STRIDER", env: "STRIDER" }, { name: "TaskCluster", constant: "TASKCLUSTER", env: ["TASK_ID", "RUN_ID"] }, { name: "Solano CI", constant: "TDDIUM", env: "TDDIUM", pr: "TDDIUM_PR_ID", deprecated: true }, { name: "TeamCity", constant: "TEAMCITY", env: "TEAMCITY_VERSION" }, { name: "Team Foundation Server", constant: "TFS", env: "TF_BUILD" }, { name: "Travis CI", constant: "TRAVIS", env: "TRAVIS", pr: { env: "TRAVIS_PULL_REQUEST", ne: "false" } }] })) && o.default || o;
    var a = s(function(u2, D2) {
      var e2 = process.env;
      function t2(u3) {
        return "string" == typeof u3 ? !!e2[u3] : Object.keys(u3).every(function(D3) {
          return e2[D3] === u3[D3];
        });
      }
      Object.defineProperty(D2, "_vendors", { value: i.map(function(u3) {
        return u3.constant;
      }) }), D2.name = null, D2.isPR = null, i.forEach(function(u3) {
        var r3 = (Array.isArray(u3.env) ? u3.env : [u3.env]).every(function(u4) {
          return t2(u4);
        });
        if (D2[u3.constant] = r3, r3)
          switch (D2.name = u3.name, typeof u3.pr) {
            case "string":
              D2.isPR = !!e2[u3.pr];
              break;
            case "object":
              "env" in u3.pr ? D2.isPR = u3.pr.env in e2 && e2[u3.pr.env] !== u3.pr.ne : "any" in u3.pr ? D2.isPR = u3.pr.any.some(function(u4) {
                return !!e2[u4];
              }) : D2.isPR = t2(u3.pr);
              break;
            default:
              D2.isPR = null;
          }
      }), D2.isCI = !!(e2.CI || e2.CONTINUOUS_INTEGRATION || e2.BUILD_NUMBER || e2.RUN_ID || D2.name);
    });
    var l = (a.name, a.isPR, a.isCI, false);
    var c = false;
    var h = false;
    var F = "development";
    var C = "undefined" != typeof window;
    var f = "";
    var E = false;
    function g(u2) {
      return !(!u2 || "false" === u2);
    }
    "undefined" != typeof process && (process.platform && (f = String(process.platform)), process.stdout && (h = g(process.stdout.isTTY)), l = Boolean(a.isCI), process.env && (process.env.NODE_ENV && (F = process.env.NODE_ENV), c = g(process.env.DEBUG), E = g(process.env.MINIMAL)));
    var d = { browser: C, test: "test" === F, dev: "development" === F || "dev" === F, production: "production" === F, debug: c, ci: l, tty: h, minimal: void 0, minimalCLI: void 0, windows: /^win/i.test(f), darwin: /^darwin/i.test(f), linux: /^linux/i.test(f) };
    d.minimal = E || d.ci || d.test || !d.tty, d.minimalCLI = d.minimal;
    var p = Object.freeze(d);
    var m = {};
    m[m.Fatal = 0] = "Fatal", m[m.Error = 0] = "Error", m[m.Warn = 1] = "Warn", m[m.Log = 2] = "Log", m[m.Info = 3] = "Info", m[m.Success = 3] = "Success", m[m.Debug = 4] = "Debug", m[m.Trace = 5] = "Trace", m[m.Silent = -1 / 0] = "Silent", m[m.Verbose = 1 / 0] = "Verbose";
    var b = { silent: { level: -1 }, fatal: { level: m.Fatal }, error: { level: m.Error }, warn: { level: m.Warn }, log: { level: m.Log }, info: { level: m.Info }, success: { level: m.Success }, debug: { level: m.Debug }, trace: { level: m.Trace }, verbose: { level: m.Trace }, ready: { level: m.Info }, start: { level: m.Info } };
    function y(u2) {
      return D2 = u2, "[object Object]" === Object.prototype.toString.call(D2) && (!(!u2.message && !u2.args) && !u2.stack);
      var D2;
    }
    var B = false;
    var v = [];
    var _ = class {
      constructor(u2 = {}) {
        this._reporters = u2.reporters || [], this._types = u2.types || b, this.level = void 0 !== u2.level ? u2.level : 3, this._defaults = u2.defaults || {}, this._async = void 0 !== u2.async ? u2.async : void 0, this._stdout = u2.stdout, this._stderr = u2.stderr, this._mockFn = u2.mockFn, this._throttle = u2.throttle || 1e3, this._throttleMin = u2.throttleMin || 5;
        for (const u3 in this._types) {
          const D2 = { type: u3, ...this._types[u3], ...this._defaults };
          this[u3] = this._wrapLogFn(D2), this[u3].raw = this._wrapLogFn(D2, true);
        }
        this._mockFn && this.mockTypes(), this._lastLogSerialized = void 0, this._lastLog = void 0, this._lastLogTime = void 0, this._lastLogCount = 0, this._throttleTimeout = void 0;
      }
      get stdout() {
        return this._stdout || console._stdout;
      }
      get stderr() {
        return this._stderr || console._stderr;
      }
      create(u2) {
        return new _(Object.assign({ reporters: this._reporters, level: this.level, types: this._types, defaults: this._defaults, stdout: this._stdout, stderr: this._stderr, mockFn: this._mockFn }, u2));
      }
      withDefaults(u2) {
        return this.create({ defaults: Object.assign({}, this._defaults, u2) });
      }
      withTag(u2) {
        return this.withDefaults({ tag: this._defaults.tag ? this._defaults.tag + ":" + u2 : u2 });
      }
      addReporter(u2) {
        return this._reporters.push(u2), this;
      }
      removeReporter(u2) {
        if (u2) {
          const D2 = this._reporters.indexOf(u2);
          if (D2 >= 0)
            return this._reporters.splice(D2, 1);
        } else
          this._reporters.splice(0);
        return this;
      }
      setReporters(u2) {
        return this._reporters = Array.isArray(u2) ? u2 : [u2], this;
      }
      wrapAll() {
        this.wrapConsole(), this.wrapStd();
      }
      restoreAll() {
        this.restoreConsole(), this.restoreStd();
      }
      wrapConsole() {
        for (const u2 in this._types)
          console["__" + u2] || (console["__" + u2] = console[u2]), console[u2] = this[u2].raw;
      }
      restoreConsole() {
        for (const u2 in this._types)
          console["__" + u2] && (console[u2] = console["__" + u2], delete console["__" + u2]);
      }
      wrapStd() {
        this._wrapStream(this.stdout, "log"), this._wrapStream(this.stderr, "log");
      }
      _wrapStream(u2, D2) {
        u2 && (u2.__write || (u2.__write = u2.write), u2.write = (u3) => {
          this[D2].raw(String(u3).trim());
        });
      }
      restoreStd() {
        this._restoreStream(this.stdout), this._restoreStream(this.stderr);
      }
      _restoreStream(u2) {
        u2 && u2.__write && (u2.write = u2.__write, delete u2.__write);
      }
      pauseLogs() {
        B = true;
      }
      resumeLogs() {
        B = false;
        const u2 = v.splice(0);
        for (const D2 of u2)
          D2[0]._logFn(D2[1], D2[2]);
      }
      mockTypes(u2) {
        if (this._mockFn = u2 || this._mockFn, "function" == typeof this._mockFn)
          for (const u3 in this._types)
            this[u3] = this._mockFn(u3, this._types[u3]) || this[u3], this[u3].raw = this[u3];
      }
      _wrapLogFn(u2, D2) {
        return (...e2) => {
          if (!B)
            return this._logFn(u2, e2, D2);
          v.push([this, u2, e2, D2]);
        };
      }
      _logFn(u2, D2, e2) {
        if (u2.level > this.level)
          return !!this._async && Promise.resolve(false);
        const t2 = Object.assign({ date: new Date(), args: [] }, u2);
        !e2 && 1 === D2.length && y(D2[0]) ? Object.assign(t2, D2[0]) : t2.args = Array.from(D2), t2.message && (t2.args.unshift(t2.message), delete t2.message), t2.additional && (Array.isArray(t2.additional) || (t2.additional = t2.additional.split("\n")), t2.args.push("\n" + t2.additional.join("\n")), delete t2.additional), t2.type = "string" == typeof t2.type ? t2.type.toLowerCase() : "", t2.tag = "string" == typeof t2.tag ? t2.tag.toLowerCase() : "";
        const r3 = (u3 = false) => {
          const D3 = this._lastLogCount - this._throttleMin;
          if (this._lastLog && D3 > 0) {
            const u4 = [...this._lastLog.args];
            D3 > 1 && u4.push(`(repeated ${D3} times)`), this._log({ ...this._lastLog, args: u4 }), this._lastLogCount = 1;
          }
          if (u3) {
            if (this._lastLog = t2, this._async)
              return this._logAsync(t2);
            this._log(t2);
          }
        };
        clearTimeout(this._throttleTimeout);
        const n2 = this._lastLogTime ? t2.date - this._lastLogTime : 0;
        if (this._lastLogTime = t2.date, n2 < this._throttle)
          try {
            const u3 = JSON.stringify([t2.type, t2.tag, t2.args]), D3 = this._lastLogSerialized === u3;
            if (this._lastLogSerialized = u3, D3 && (this._lastLogCount++, this._lastLogCount > this._throttleMin))
              return void (this._throttleTimeout = setTimeout(r3, this._throttle));
          } catch (u3) {
          }
        r3(true);
      }
      _log(u2) {
        for (const D2 of this._reporters)
          D2.log(u2, { async: false, stdout: this.stdout, stderr: this.stderr });
      }
      _logAsync(u2) {
        return Promise.all(this._reporters.map((D2) => D2.log(u2, { async: true, stdout: this.stdout, stderr: this.stderr })));
      }
    };
    function A(u2) {
      const D2 = process.cwd() + e.sep;
      return u2.split("\n").splice(1).map((u3) => u3.trim().replace("file://", "").replace(D2, ""));
    }
    _.prototype.add = _.prototype.addReporter, _.prototype.remove = _.prototype.removeReporter, _.prototype.clear = _.prototype.removeReporter, _.prototype.withScope = _.prototype.withTag, _.prototype.mock = _.prototype.mockTypes, _.prototype.pause = _.prototype.pauseLogs, _.prototype.resume = _.prototype.resumeLogs;
    var w = s(function(u2, D2) {
      u2.exports = function() {
        var u3 = "millisecond", D3 = "second", e2 = "minute", t2 = "hour", r3 = "day", n2 = "week", s2 = "month", o2 = "quarter", i2 = "year", a2 = /^(\d{4})-?(\d{1,2})-?(\d{0,2})[^0-9]*(\d{1,2})?:?(\d{1,2})?:?(\d{1,2})?.?(\d{1,3})?$/, l2 = /\[([^\]]+)]|Y{2,4}|M{1,4}|D{1,2}|d{1,4}|H{1,2}|h{1,2}|a|A|m{1,2}|s{1,2}|Z{1,2}|SSS/g, c2 = function(u4, D4, e3) {
          var t3 = String(u4);
          return !t3 || t3.length >= D4 ? u4 : "" + Array(D4 + 1 - t3.length).join(e3) + u4;
        }, h2 = { s: c2, z: function(u4) {
          var D4 = -u4.utcOffset(), e3 = Math.abs(D4), t3 = Math.floor(e3 / 60), r4 = e3 % 60;
          return (D4 <= 0 ? "+" : "-") + c2(t3, 2, "0") + ":" + c2(r4, 2, "0");
        }, m: function(u4, D4) {
          var e3 = 12 * (D4.year() - u4.year()) + (D4.month() - u4.month()), t3 = u4.clone().add(e3, s2), r4 = D4 - t3 < 0, n3 = u4.clone().add(e3 + (r4 ? -1 : 1), s2);
          return Number(-(e3 + (D4 - t3) / (r4 ? t3 - n3 : n3 - t3)) || 0);
        }, a: function(u4) {
          return u4 < 0 ? Math.ceil(u4) || 0 : Math.floor(u4);
        }, p: function(a3) {
          return { M: s2, y: i2, w: n2, d: r3, D: "date", h: t2, m: e2, s: D3, ms: u3, Q: o2 }[a3] || String(a3 || "").toLowerCase().replace(/s$/, "");
        }, u: function(u4) {
          return void 0 === u4;
        } }, F2 = { name: "en", weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_") }, C2 = "en", f2 = {};
        f2[C2] = F2;
        var E2 = function(u4) {
          return u4 instanceof m2;
        }, g2 = function(u4, D4, e3) {
          var t3;
          if (!u4)
            return C2;
          if ("string" == typeof u4)
            f2[u4] && (t3 = u4), D4 && (f2[u4] = D4, t3 = u4);
          else {
            var r4 = u4.name;
            f2[r4] = u4, t3 = r4;
          }
          return !e3 && t3 && (C2 = t3), t3 || !e3 && C2;
        }, d2 = function(u4, D4) {
          if (E2(u4))
            return u4.clone();
          var e3 = "object" == typeof D4 ? D4 : {};
          return e3.date = u4, e3.args = arguments, new m2(e3);
        }, p2 = h2;
        p2.l = g2, p2.i = E2, p2.w = function(u4, D4) {
          return d2(u4, { locale: D4.$L, utc: D4.$u, $offset: D4.$offset });
        };
        var m2 = function() {
          function c3(u4) {
            this.$L = this.$L || g2(u4.locale, null, true), this.parse(u4);
          }
          var h3 = c3.prototype;
          return h3.parse = function(u4) {
            this.$d = function(u5) {
              var D4 = u5.date, e3 = u5.utc;
              if (null === D4)
                return new Date(NaN);
              if (p2.u(D4))
                return new Date();
              if (D4 instanceof Date)
                return new Date(D4);
              if ("string" == typeof D4 && !/Z$/i.test(D4)) {
                var t3 = D4.match(a2);
                if (t3)
                  return e3 ? new Date(Date.UTC(t3[1], t3[2] - 1, t3[3] || 1, t3[4] || 0, t3[5] || 0, t3[6] || 0, t3[7] || 0)) : new Date(t3[1], t3[2] - 1, t3[3] || 1, t3[4] || 0, t3[5] || 0, t3[6] || 0, t3[7] || 0);
              }
              return new Date(D4);
            }(u4), this.init();
          }, h3.init = function() {
            var u4 = this.$d;
            this.$y = u4.getFullYear(), this.$M = u4.getMonth(), this.$D = u4.getDate(), this.$W = u4.getDay(), this.$H = u4.getHours(), this.$m = u4.getMinutes(), this.$s = u4.getSeconds(), this.$ms = u4.getMilliseconds();
          }, h3.$utils = function() {
            return p2;
          }, h3.isValid = function() {
            return !("Invalid Date" === this.$d.toString());
          }, h3.isSame = function(u4, D4) {
            var e3 = d2(u4);
            return this.startOf(D4) <= e3 && e3 <= this.endOf(D4);
          }, h3.isAfter = function(u4, D4) {
            return d2(u4) < this.startOf(D4);
          }, h3.isBefore = function(u4, D4) {
            return this.endOf(D4) < d2(u4);
          }, h3.$g = function(u4, D4, e3) {
            return p2.u(u4) ? this[D4] : this.set(e3, u4);
          }, h3.year = function(u4) {
            return this.$g(u4, "$y", i2);
          }, h3.month = function(u4) {
            return this.$g(u4, "$M", s2);
          }, h3.day = function(u4) {
            return this.$g(u4, "$W", r3);
          }, h3.date = function(u4) {
            return this.$g(u4, "$D", "date");
          }, h3.hour = function(u4) {
            return this.$g(u4, "$H", t2);
          }, h3.minute = function(u4) {
            return this.$g(u4, "$m", e2);
          }, h3.second = function(u4) {
            return this.$g(u4, "$s", D3);
          }, h3.millisecond = function(D4) {
            return this.$g(D4, "$ms", u3);
          }, h3.unix = function() {
            return Math.floor(this.valueOf() / 1e3);
          }, h3.valueOf = function() {
            return this.$d.getTime();
          }, h3.startOf = function(u4, o3) {
            var a3 = this, l3 = !!p2.u(o3) || o3, c4 = p2.p(u4), h4 = function(u5, D4) {
              var e3 = p2.w(a3.$u ? Date.UTC(a3.$y, D4, u5) : new Date(a3.$y, D4, u5), a3);
              return l3 ? e3 : e3.endOf(r3);
            }, F3 = function(u5, D4) {
              return p2.w(a3.toDate()[u5].apply(a3.toDate("s"), (l3 ? [0, 0, 0, 0] : [23, 59, 59, 999]).slice(D4)), a3);
            }, C3 = this.$W, f3 = this.$M, E3 = this.$D, g3 = "set" + (this.$u ? "UTC" : "");
            switch (c4) {
              case i2:
                return l3 ? h4(1, 0) : h4(31, 11);
              case s2:
                return l3 ? h4(1, f3) : h4(0, f3 + 1);
              case n2:
                var d3 = this.$locale().weekStart || 0, m3 = (C3 < d3 ? C3 + 7 : C3) - d3;
                return h4(l3 ? E3 - m3 : E3 + (6 - m3), f3);
              case r3:
              case "date":
                return F3(g3 + "Hours", 0);
              case t2:
                return F3(g3 + "Minutes", 1);
              case e2:
                return F3(g3 + "Seconds", 2);
              case D3:
                return F3(g3 + "Milliseconds", 3);
              default:
                return this.clone();
            }
          }, h3.endOf = function(u4) {
            return this.startOf(u4, false);
          }, h3.$set = function(n3, o3) {
            var a3, l3 = p2.p(n3), c4 = "set" + (this.$u ? "UTC" : ""), h4 = (a3 = {}, a3.day = c4 + "Date", a3.date = c4 + "Date", a3[s2] = c4 + "Month", a3[i2] = c4 + "FullYear", a3[t2] = c4 + "Hours", a3[e2] = c4 + "Minutes", a3[D3] = c4 + "Seconds", a3[u3] = c4 + "Milliseconds", a3)[l3], F3 = l3 === r3 ? this.$D + (o3 - this.$W) : o3;
            if (l3 === s2 || l3 === i2) {
              var C3 = this.clone().set("date", 1);
              C3.$d[h4](F3), C3.init(), this.$d = C3.set("date", Math.min(this.$D, C3.daysInMonth())).toDate();
            } else
              h4 && this.$d[h4](F3);
            return this.init(), this;
          }, h3.set = function(u4, D4) {
            return this.clone().$set(u4, D4);
          }, h3.get = function(u4) {
            return this[p2.p(u4)]();
          }, h3.add = function(u4, o3) {
            var a3, l3 = this;
            u4 = Number(u4);
            var c4 = p2.p(o3), h4 = function(D4) {
              var e3 = d2(l3);
              return p2.w(e3.date(e3.date() + Math.round(D4 * u4)), l3);
            };
            if (c4 === s2)
              return this.set(s2, this.$M + u4);
            if (c4 === i2)
              return this.set(i2, this.$y + u4);
            if (c4 === r3)
              return h4(1);
            if (c4 === n2)
              return h4(7);
            var F3 = (a3 = {}, a3[e2] = 6e4, a3[t2] = 36e5, a3[D3] = 1e3, a3)[c4] || 1, C3 = this.$d.getTime() + u4 * F3;
            return p2.w(C3, this);
          }, h3.subtract = function(u4, D4) {
            return this.add(-1 * u4, D4);
          }, h3.format = function(u4) {
            var D4 = this;
            if (!this.isValid())
              return "Invalid Date";
            var e3 = u4 || "YYYY-MM-DDTHH:mm:ssZ", t3 = p2.z(this), r4 = this.$locale(), n3 = this.$H, s3 = this.$m, o3 = this.$M, i3 = r4.weekdays, a3 = r4.months, c4 = function(u5, t4, r5, n4) {
              return u5 && (u5[t4] || u5(D4, e3)) || r5[t4].substr(0, n4);
            }, h4 = function(u5) {
              return p2.s(n3 % 12 || 12, u5, "0");
            }, F3 = r4.meridiem || function(u5, D5, e4) {
              var t4 = u5 < 12 ? "AM" : "PM";
              return e4 ? t4.toLowerCase() : t4;
            }, C3 = { YY: String(this.$y).slice(-2), YYYY: this.$y, M: o3 + 1, MM: p2.s(o3 + 1, 2, "0"), MMM: c4(r4.monthsShort, o3, a3, 3), MMMM: c4(a3, o3), D: this.$D, DD: p2.s(this.$D, 2, "0"), d: String(this.$W), dd: c4(r4.weekdaysMin, this.$W, i3, 2), ddd: c4(r4.weekdaysShort, this.$W, i3, 3), dddd: i3[this.$W], H: String(n3), HH: p2.s(n3, 2, "0"), h: h4(1), hh: h4(2), a: F3(n3, s3, true), A: F3(n3, s3, false), m: String(s3), mm: p2.s(s3, 2, "0"), s: String(this.$s), ss: p2.s(this.$s, 2, "0"), SSS: p2.s(this.$ms, 3, "0"), Z: t3 };
            return e3.replace(l2, function(u5, D5) {
              return D5 || C3[u5] || t3.replace(":", "");
            });
          }, h3.utcOffset = function() {
            return 15 * -Math.round(this.$d.getTimezoneOffset() / 15);
          }, h3.diff = function(u4, r4, a3) {
            var l3, c4 = p2.p(r4), h4 = d2(u4), F3 = 6e4 * (h4.utcOffset() - this.utcOffset()), C3 = this - h4, f3 = p2.m(this, h4);
            return f3 = (l3 = {}, l3[i2] = f3 / 12, l3[s2] = f3, l3[o2] = f3 / 3, l3[n2] = (C3 - F3) / 6048e5, l3.day = (C3 - F3) / 864e5, l3[t2] = C3 / 36e5, l3[e2] = C3 / 6e4, l3[D3] = C3 / 1e3, l3)[c4] || C3, a3 ? f3 : p2.a(f3);
          }, h3.daysInMonth = function() {
            return this.endOf(s2).$D;
          }, h3.$locale = function() {
            return f2[this.$L];
          }, h3.locale = function(u4, D4) {
            if (!u4)
              return this.$L;
            var e3 = this.clone(), t3 = g2(u4, D4, true);
            return t3 && (e3.$L = t3), e3;
          }, h3.clone = function() {
            return p2.w(this.$d, this);
          }, h3.toDate = function() {
            return new Date(this.valueOf());
          }, h3.toJSON = function() {
            return this.isValid() ? this.toISOString() : null;
          }, h3.toISOString = function() {
            return this.$d.toISOString();
          }, h3.toString = function() {
            return this.$d.toUTCString();
          }, c3;
        }();
        return d2.prototype = m2.prototype, d2.extend = function(u4, D4) {
          return u4(D4, m2, d2), d2;
        }, d2.locale = g2, d2.isDayjs = E2, d2.unix = function(u4) {
          return d2(1e3 * u4);
        }, d2.en = f2[C2], d2.Ls = f2, d2;
      }();
    });
    var O = { dateFormat: "HH:mm:ss", formatOptions: { date: true, colors: false, compact: true } };
    var M = (u2) => u2 ? `[${u2}]` : "";
    var S = class {
      constructor(u2) {
        this.options = Object.assign({}, O, u2);
      }
      formatStack(u2) {
        return "  " + A(u2).join("\n  ");
      }
      formatArgs(u2) {
        const e2 = u2.map((u3) => u3 && "string" == typeof u3.stack ? u3.message + "\n" + this.formatStack(u3.stack) : u3);
        return "function" == typeof D.formatWithOptions ? D.formatWithOptions(this.options.formatOptions, ...e2) : D.format(...e2);
      }
      formatDate(u2) {
        return this.options.formatOptions.date ? function(u3, D2) {
          return w(D2).format(u3);
        }(this.options.dateFormat, u2) : "";
      }
      filterAndJoin(u2) {
        return u2.filter((u3) => u3).join(" ");
      }
      formatLogObj(u2) {
        const D2 = this.formatArgs(u2.args);
        return this.filterAndJoin([M(u2.type), M(u2.tag), D2]);
      }
      log(u2, { async: D2, stdout: e2, stderr: r3 } = {}) {
        return function(u3, D3, e3 = "default") {
          const r4 = D3.__write || D3.write;
          switch (e3) {
            case "async":
              return new Promise((e4) => {
                true === r4.call(D3, u3) ? e4() : D3.once("drain", () => {
                  e4();
                });
              });
            case "sync":
              return t.writeSync(D3.fd, u3);
            default:
              return r4.call(D3, u3);
          }
        }(this.formatLogObj(u2, { width: e2.columns || 0 }) + "\n", u2.level < 2 ? r3 : e2, D2 ? "async" : "default");
      }
    };
    var I = (u2) => "string" == typeof u2 ? u2.replace((({ onlyFirst: u3 = false } = {}) => {
      const D2 = ["[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)", "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"].join("|");
      return new RegExp(D2, u3 ? void 0 : "g");
    })(), "") : u2;
    var k = (u2) => !Number.isNaN(u2) && (u2 >= 4352 && (u2 <= 4447 || 9001 === u2 || 9002 === u2 || 11904 <= u2 && u2 <= 12871 && 12351 !== u2 || 12880 <= u2 && u2 <= 19903 || 19968 <= u2 && u2 <= 42182 || 43360 <= u2 && u2 <= 43388 || 44032 <= u2 && u2 <= 55203 || 63744 <= u2 && u2 <= 64255 || 65040 <= u2 && u2 <= 65049 || 65072 <= u2 && u2 <= 65131 || 65281 <= u2 && u2 <= 65376 || 65504 <= u2 && u2 <= 65510 || 110592 <= u2 && u2 <= 110593 || 127488 <= u2 && u2 <= 127569 || 131072 <= u2 && u2 <= 262141));
    var R = k;
    var T = k;
    R.default = T;
    var L = (u2) => {
      if ("string" != typeof (u2 = u2.replace(/\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g, "  ")) || 0 === u2.length)
        return 0;
      u2 = I(u2);
      let D2 = 0;
      for (let e2 = 0; e2 < u2.length; e2++) {
        const t2 = u2.codePointAt(e2);
        t2 <= 31 || t2 >= 127 && t2 <= 159 || (t2 >= 768 && t2 <= 879 || (t2 > 65535 && e2++, D2 += R(t2) ? 2 : 1));
      }
      return D2;
    };
    var $ = L;
    var x = L;
    $.default = x;
    var U = /[|\\{}()[\]^$+*?.]/g;
    var j = function(u2) {
      if ("string" != typeof u2)
        throw new TypeError("Expected a string");
      return u2.replace(U, "\\$&");
    };
    var { platform: P } = process;
    var N = { tick: "\u2714", cross: "\u2716", star: "\u2605", square: "\u2587", squareSmall: "\u25FB", squareSmallFilled: "\u25FC", play: "\u25B6", circle: "\u25EF", circleFilled: "\u25C9", circleDotted: "\u25CC", circleDouble: "\u25CE", circleCircle: "\u24DE", circleCross: "\u24E7", circlePipe: "\u24BE", circleQuestionMark: "?\u20DD", bullet: "\u25CF", dot: "\u2024", line: "\u2500", ellipsis: "\u2026", pointer: "\u276F", pointerSmall: "\u203A", info: "\u2139", warning: "\u26A0", hamburger: "\u2630", smiley: "\u32E1", mustache: "\u0DF4", heart: "\u2665", nodejs: "\u2B22", arrowUp: "\u2191", arrowDown: "\u2193", arrowLeft: "\u2190", arrowRight: "\u2192", radioOn: "\u25C9", radioOff: "\u25EF", checkboxOn: "\u2612", checkboxOff: "\u2610", checkboxCircleOn: "\u24E7", checkboxCircleOff: "\u24BE", questionMarkPrefix: "?\u20DD", oneHalf: "\xBD", oneThird: "\u2153", oneQuarter: "\xBC", oneFifth: "\u2155", oneSixth: "\u2159", oneSeventh: "\u2150", oneEighth: "\u215B", oneNinth: "\u2151", oneTenth: "\u2152", twoThirds: "\u2154", twoFifths: "\u2156", threeQuarters: "\xBE", threeFifths: "\u2157", threeEighths: "\u215C", fourFifths: "\u2158", fiveSixths: "\u215A", fiveEighths: "\u215D", sevenEighths: "\u215E" };
    var q = { tick: "\u221A", cross: "\xD7", star: "*", square: "\u2588", squareSmall: "[ ]", squareSmallFilled: "[\u2588]", play: "\u25BA", circle: "( )", circleFilled: "(*)", circleDotted: "( )", circleDouble: "( )", circleCircle: "(\u25CB)", circleCross: "(\xD7)", circlePipe: "(\u2502)", circleQuestionMark: "(?)", bullet: "*", dot: ".", line: "\u2500", ellipsis: "...", pointer: ">", pointerSmall: "\xBB", info: "i", warning: "\u203C", hamburger: "\u2261", smiley: "\u263A", mustache: "\u250C\u2500\u2510", heart: N.heart, nodejs: "\u2666", arrowUp: N.arrowUp, arrowDown: N.arrowDown, arrowLeft: N.arrowLeft, arrowRight: N.arrowRight, radioOn: "(*)", radioOff: "( )", checkboxOn: "[\xD7]", checkboxOff: "[ ]", checkboxCircleOn: "(\xD7)", checkboxCircleOff: "( )", questionMarkPrefix: "\uFF1F", oneHalf: "1/2", oneThird: "1/3", oneQuarter: "1/4", oneFifth: "1/5", oneSixth: "1/6", oneSeventh: "1/7", oneEighth: "1/8", oneNinth: "1/9", oneTenth: "1/10", twoThirds: "2/3", twoFifths: "2/5", threeQuarters: "3/4", threeFifths: "3/5", threeEighths: "3/8", fourFifths: "4/5", fiveSixths: "5/6", fiveEighths: "5/8", sevenEighths: "7/8" };
    "linux" === P && (N.questionMarkPrefix = "?");
    var Y = "win32" === P ? q : N;
    var H = Object.assign((u2) => {
      if (Y === N)
        return u2;
      for (const [D2, e2] of Object.entries(N))
        e2 !== Y[D2] && (u2 = u2.replace(new RegExp(j(e2), "g"), Y[D2]));
      return u2;
    }, Y);
    var V = N;
    var W = q;
    H.main = V, H.windows = W;
    var G = { aliceblue: [240, 248, 255], antiquewhite: [250, 235, 215], aqua: [0, 255, 255], aquamarine: [127, 255, 212], azure: [240, 255, 255], beige: [245, 245, 220], bisque: [255, 228, 196], black: [0, 0, 0], blanchedalmond: [255, 235, 205], blue: [0, 0, 255], blueviolet: [138, 43, 226], brown: [165, 42, 42], burlywood: [222, 184, 135], cadetblue: [95, 158, 160], chartreuse: [127, 255, 0], chocolate: [210, 105, 30], coral: [255, 127, 80], cornflowerblue: [100, 149, 237], cornsilk: [255, 248, 220], crimson: [220, 20, 60], cyan: [0, 255, 255], darkblue: [0, 0, 139], darkcyan: [0, 139, 139], darkgoldenrod: [184, 134, 11], darkgray: [169, 169, 169], darkgreen: [0, 100, 0], darkgrey: [169, 169, 169], darkkhaki: [189, 183, 107], darkmagenta: [139, 0, 139], darkolivegreen: [85, 107, 47], darkorange: [255, 140, 0], darkorchid: [153, 50, 204], darkred: [139, 0, 0], darksalmon: [233, 150, 122], darkseagreen: [143, 188, 143], darkslateblue: [72, 61, 139], darkslategray: [47, 79, 79], darkslategrey: [47, 79, 79], darkturquoise: [0, 206, 209], darkviolet: [148, 0, 211], deeppink: [255, 20, 147], deepskyblue: [0, 191, 255], dimgray: [105, 105, 105], dimgrey: [105, 105, 105], dodgerblue: [30, 144, 255], firebrick: [178, 34, 34], floralwhite: [255, 250, 240], forestgreen: [34, 139, 34], fuchsia: [255, 0, 255], gainsboro: [220, 220, 220], ghostwhite: [248, 248, 255], gold: [255, 215, 0], goldenrod: [218, 165, 32], gray: [128, 128, 128], green: [0, 128, 0], greenyellow: [173, 255, 47], grey: [128, 128, 128], honeydew: [240, 255, 240], hotpink: [255, 105, 180], indianred: [205, 92, 92], indigo: [75, 0, 130], ivory: [255, 255, 240], khaki: [240, 230, 140], lavender: [230, 230, 250], lavenderblush: [255, 240, 245], lawngreen: [124, 252, 0], lemonchiffon: [255, 250, 205], lightblue: [173, 216, 230], lightcoral: [240, 128, 128], lightcyan: [224, 255, 255], lightgoldenrodyellow: [250, 250, 210], lightgray: [211, 211, 211], lightgreen: [144, 238, 144], lightgrey: [211, 211, 211], lightpink: [255, 182, 193], lightsalmon: [255, 160, 122], lightseagreen: [32, 178, 170], lightskyblue: [135, 206, 250], lightslategray: [119, 136, 153], lightslategrey: [119, 136, 153], lightsteelblue: [176, 196, 222], lightyellow: [255, 255, 224], lime: [0, 255, 0], limegreen: [50, 205, 50], linen: [250, 240, 230], magenta: [255, 0, 255], maroon: [128, 0, 0], mediumaquamarine: [102, 205, 170], mediumblue: [0, 0, 205], mediumorchid: [186, 85, 211], mediumpurple: [147, 112, 219], mediumseagreen: [60, 179, 113], mediumslateblue: [123, 104, 238], mediumspringgreen: [0, 250, 154], mediumturquoise: [72, 209, 204], mediumvioletred: [199, 21, 133], midnightblue: [25, 25, 112], mintcream: [245, 255, 250], mistyrose: [255, 228, 225], moccasin: [255, 228, 181], navajowhite: [255, 222, 173], navy: [0, 0, 128], oldlace: [253, 245, 230], olive: [128, 128, 0], olivedrab: [107, 142, 35], orange: [255, 165, 0], orangered: [255, 69, 0], orchid: [218, 112, 214], palegoldenrod: [238, 232, 170], palegreen: [152, 251, 152], paleturquoise: [175, 238, 238], palevioletred: [219, 112, 147], papayawhip: [255, 239, 213], peachpuff: [255, 218, 185], peru: [205, 133, 63], pink: [255, 192, 203], plum: [221, 160, 221], powderblue: [176, 224, 230], purple: [128, 0, 128], rebeccapurple: [102, 51, 153], red: [255, 0, 0], rosybrown: [188, 143, 143], royalblue: [65, 105, 225], saddlebrown: [139, 69, 19], salmon: [250, 128, 114], sandybrown: [244, 164, 96], seagreen: [46, 139, 87], seashell: [255, 245, 238], sienna: [160, 82, 45], silver: [192, 192, 192], skyblue: [135, 206, 235], slateblue: [106, 90, 205], slategray: [112, 128, 144], slategrey: [112, 128, 144], snow: [255, 250, 250], springgreen: [0, 255, 127], steelblue: [70, 130, 180], tan: [210, 180, 140], teal: [0, 128, 128], thistle: [216, 191, 216], tomato: [255, 99, 71], turquoise: [64, 224, 208], violet: [238, 130, 238], wheat: [245, 222, 179], white: [255, 255, 255], whitesmoke: [245, 245, 245], yellow: [255, 255, 0], yellowgreen: [154, 205, 50] };
    var z = {};
    for (const u2 of Object.keys(G))
      z[G[u2]] = u2;
    var Q = { rgb: { channels: 3, labels: "rgb" }, hsl: { channels: 3, labels: "hsl" }, hsv: { channels: 3, labels: "hsv" }, hwb: { channels: 3, labels: "hwb" }, cmyk: { channels: 4, labels: "cmyk" }, xyz: { channels: 3, labels: "xyz" }, lab: { channels: 3, labels: "lab" }, lch: { channels: 3, labels: "lch" }, hex: { channels: 1, labels: ["hex"] }, keyword: { channels: 1, labels: ["keyword"] }, ansi16: { channels: 1, labels: ["ansi16"] }, ansi256: { channels: 1, labels: ["ansi256"] }, hcg: { channels: 3, labels: ["h", "c", "g"] }, apple: { channels: 3, labels: ["r16", "g16", "b16"] }, gray: { channels: 1, labels: ["gray"] } };
    var J = Q;
    for (const u2 of Object.keys(Q)) {
      if (!("channels" in Q[u2]))
        throw new Error("missing channels property: " + u2);
      if (!("labels" in Q[u2]))
        throw new Error("missing channel labels property: " + u2);
      if (Q[u2].labels.length !== Q[u2].channels)
        throw new Error("channel and label counts mismatch: " + u2);
      const { channels: D2, labels: e2 } = Q[u2];
      delete Q[u2].channels, delete Q[u2].labels, Object.defineProperty(Q[u2], "channels", { value: D2 }), Object.defineProperty(Q[u2], "labels", { value: e2 });
    }
    function K(u2) {
      const D2 = function() {
        const u3 = {}, D3 = Object.keys(J);
        for (let e3 = D3.length, t2 = 0; t2 < e3; t2++)
          u3[D3[t2]] = { distance: -1, parent: null };
        return u3;
      }(), e2 = [u2];
      for (D2[u2].distance = 0; e2.length; ) {
        const u3 = e2.pop(), t2 = Object.keys(J[u3]);
        for (let r3 = t2.length, n2 = 0; n2 < r3; n2++) {
          const r4 = t2[n2], s2 = D2[r4];
          -1 === s2.distance && (s2.distance = D2[u3].distance + 1, s2.parent = u3, e2.unshift(r4));
        }
      }
      return D2;
    }
    function Z(u2, D2) {
      return function(e2) {
        return D2(u2(e2));
      };
    }
    function X(u2, D2) {
      const e2 = [D2[u2].parent, u2];
      let t2 = J[D2[u2].parent][u2], r3 = D2[u2].parent;
      for (; D2[r3].parent; )
        e2.unshift(D2[r3].parent), t2 = Z(J[D2[r3].parent][r3], t2), r3 = D2[r3].parent;
      return t2.conversion = e2, t2;
    }
    Q.rgb.hsl = function(u2) {
      const D2 = u2[0] / 255, e2 = u2[1] / 255, t2 = u2[2] / 255, r3 = Math.min(D2, e2, t2), n2 = Math.max(D2, e2, t2), s2 = n2 - r3;
      let o2, i2;
      n2 === r3 ? o2 = 0 : D2 === n2 ? o2 = (e2 - t2) / s2 : e2 === n2 ? o2 = 2 + (t2 - D2) / s2 : t2 === n2 && (o2 = 4 + (D2 - e2) / s2), o2 = Math.min(60 * o2, 360), o2 < 0 && (o2 += 360);
      const a2 = (r3 + n2) / 2;
      return i2 = n2 === r3 ? 0 : a2 <= 0.5 ? s2 / (n2 + r3) : s2 / (2 - n2 - r3), [o2, 100 * i2, 100 * a2];
    }, Q.rgb.hsv = function(u2) {
      let D2, e2, t2, r3, n2;
      const s2 = u2[0] / 255, o2 = u2[1] / 255, i2 = u2[2] / 255, a2 = Math.max(s2, o2, i2), l2 = a2 - Math.min(s2, o2, i2), c2 = function(u3) {
        return (a2 - u3) / 6 / l2 + 0.5;
      };
      return 0 === l2 ? (r3 = 0, n2 = 0) : (n2 = l2 / a2, D2 = c2(s2), e2 = c2(o2), t2 = c2(i2), s2 === a2 ? r3 = t2 - e2 : o2 === a2 ? r3 = 1 / 3 + D2 - t2 : i2 === a2 && (r3 = 2 / 3 + e2 - D2), r3 < 0 ? r3 += 1 : r3 > 1 && (r3 -= 1)), [360 * r3, 100 * n2, 100 * a2];
    }, Q.rgb.hwb = function(u2) {
      const D2 = u2[0], e2 = u2[1];
      let t2 = u2[2];
      const r3 = Q.rgb.hsl(u2)[0], n2 = 1 / 255 * Math.min(D2, Math.min(e2, t2));
      return t2 = 1 - 1 / 255 * Math.max(D2, Math.max(e2, t2)), [r3, 100 * n2, 100 * t2];
    }, Q.rgb.cmyk = function(u2) {
      const D2 = u2[0] / 255, e2 = u2[1] / 255, t2 = u2[2] / 255, r3 = Math.min(1 - D2, 1 - e2, 1 - t2);
      return [100 * ((1 - D2 - r3) / (1 - r3) || 0), 100 * ((1 - e2 - r3) / (1 - r3) || 0), 100 * ((1 - t2 - r3) / (1 - r3) || 0), 100 * r3];
    }, Q.rgb.keyword = function(u2) {
      const D2 = z[u2];
      if (D2)
        return D2;
      let e2, t2 = 1 / 0;
      for (const D3 of Object.keys(G)) {
        const s2 = (n2 = G[D3], ((r3 = u2)[0] - n2[0]) ** 2 + (r3[1] - n2[1]) ** 2 + (r3[2] - n2[2]) ** 2);
        s2 < t2 && (t2 = s2, e2 = D3);
      }
      var r3, n2;
      return e2;
    }, Q.keyword.rgb = function(u2) {
      return G[u2];
    }, Q.rgb.xyz = function(u2) {
      let D2 = u2[0] / 255, e2 = u2[1] / 255, t2 = u2[2] / 255;
      D2 = D2 > 0.04045 ? ((D2 + 0.055) / 1.055) ** 2.4 : D2 / 12.92, e2 = e2 > 0.04045 ? ((e2 + 0.055) / 1.055) ** 2.4 : e2 / 12.92, t2 = t2 > 0.04045 ? ((t2 + 0.055) / 1.055) ** 2.4 : t2 / 12.92;
      return [100 * (0.4124 * D2 + 0.3576 * e2 + 0.1805 * t2), 100 * (0.2126 * D2 + 0.7152 * e2 + 0.0722 * t2), 100 * (0.0193 * D2 + 0.1192 * e2 + 0.9505 * t2)];
    }, Q.rgb.lab = function(u2) {
      const D2 = Q.rgb.xyz(u2);
      let e2 = D2[0], t2 = D2[1], r3 = D2[2];
      e2 /= 95.047, t2 /= 100, r3 /= 108.883, e2 = e2 > 8856e-6 ? e2 ** (1 / 3) : 7.787 * e2 + 16 / 116, t2 = t2 > 8856e-6 ? t2 ** (1 / 3) : 7.787 * t2 + 16 / 116, r3 = r3 > 8856e-6 ? r3 ** (1 / 3) : 7.787 * r3 + 16 / 116;
      return [116 * t2 - 16, 500 * (e2 - t2), 200 * (t2 - r3)];
    }, Q.hsl.rgb = function(u2) {
      const D2 = u2[0] / 360, e2 = u2[1] / 100, t2 = u2[2] / 100;
      let r3, n2, s2;
      if (0 === e2)
        return s2 = 255 * t2, [s2, s2, s2];
      r3 = t2 < 0.5 ? t2 * (1 + e2) : t2 + e2 - t2 * e2;
      const o2 = 2 * t2 - r3, i2 = [0, 0, 0];
      for (let u3 = 0; u3 < 3; u3++)
        n2 = D2 + 1 / 3 * -(u3 - 1), n2 < 0 && n2++, n2 > 1 && n2--, s2 = 6 * n2 < 1 ? o2 + 6 * (r3 - o2) * n2 : 2 * n2 < 1 ? r3 : 3 * n2 < 2 ? o2 + (r3 - o2) * (2 / 3 - n2) * 6 : o2, i2[u3] = 255 * s2;
      return i2;
    }, Q.hsl.hsv = function(u2) {
      const D2 = u2[0];
      let e2 = u2[1] / 100, t2 = u2[2] / 100, r3 = e2;
      const n2 = Math.max(t2, 0.01);
      t2 *= 2, e2 *= t2 <= 1 ? t2 : 2 - t2, r3 *= n2 <= 1 ? n2 : 2 - n2;
      return [D2, 100 * (0 === t2 ? 2 * r3 / (n2 + r3) : 2 * e2 / (t2 + e2)), 100 * ((t2 + e2) / 2)];
    }, Q.hsv.rgb = function(u2) {
      const D2 = u2[0] / 60, e2 = u2[1] / 100;
      let t2 = u2[2] / 100;
      const r3 = Math.floor(D2) % 6, n2 = D2 - Math.floor(D2), s2 = 255 * t2 * (1 - e2), o2 = 255 * t2 * (1 - e2 * n2), i2 = 255 * t2 * (1 - e2 * (1 - n2));
      switch (t2 *= 255, r3) {
        case 0:
          return [t2, i2, s2];
        case 1:
          return [o2, t2, s2];
        case 2:
          return [s2, t2, i2];
        case 3:
          return [s2, o2, t2];
        case 4:
          return [i2, s2, t2];
        case 5:
          return [t2, s2, o2];
      }
    }, Q.hsv.hsl = function(u2) {
      const D2 = u2[0], e2 = u2[1] / 100, t2 = u2[2] / 100, r3 = Math.max(t2, 0.01);
      let n2, s2;
      s2 = (2 - e2) * t2;
      const o2 = (2 - e2) * r3;
      return n2 = e2 * r3, n2 /= o2 <= 1 ? o2 : 2 - o2, n2 = n2 || 0, s2 /= 2, [D2, 100 * n2, 100 * s2];
    }, Q.hwb.rgb = function(u2) {
      const D2 = u2[0] / 360;
      let e2 = u2[1] / 100, t2 = u2[2] / 100;
      const r3 = e2 + t2;
      let n2;
      r3 > 1 && (e2 /= r3, t2 /= r3);
      const s2 = Math.floor(6 * D2), o2 = 1 - t2;
      n2 = 6 * D2 - s2, 0 != (1 & s2) && (n2 = 1 - n2);
      const i2 = e2 + n2 * (o2 - e2);
      let a2, l2, c2;
      switch (s2) {
        default:
        case 6:
        case 0:
          a2 = o2, l2 = i2, c2 = e2;
          break;
        case 1:
          a2 = i2, l2 = o2, c2 = e2;
          break;
        case 2:
          a2 = e2, l2 = o2, c2 = i2;
          break;
        case 3:
          a2 = e2, l2 = i2, c2 = o2;
          break;
        case 4:
          a2 = i2, l2 = e2, c2 = o2;
          break;
        case 5:
          a2 = o2, l2 = e2, c2 = i2;
      }
      return [255 * a2, 255 * l2, 255 * c2];
    }, Q.cmyk.rgb = function(u2) {
      const D2 = u2[0] / 100, e2 = u2[1] / 100, t2 = u2[2] / 100, r3 = u2[3] / 100;
      return [255 * (1 - Math.min(1, D2 * (1 - r3) + r3)), 255 * (1 - Math.min(1, e2 * (1 - r3) + r3)), 255 * (1 - Math.min(1, t2 * (1 - r3) + r3))];
    }, Q.xyz.rgb = function(u2) {
      const D2 = u2[0] / 100, e2 = u2[1] / 100, t2 = u2[2] / 100;
      let r3, n2, s2;
      return r3 = 3.2406 * D2 + -1.5372 * e2 + -0.4986 * t2, n2 = -0.9689 * D2 + 1.8758 * e2 + 0.0415 * t2, s2 = 0.0557 * D2 + -0.204 * e2 + 1.057 * t2, r3 = r3 > 31308e-7 ? 1.055 * r3 ** (1 / 2.4) - 0.055 : 12.92 * r3, n2 = n2 > 31308e-7 ? 1.055 * n2 ** (1 / 2.4) - 0.055 : 12.92 * n2, s2 = s2 > 31308e-7 ? 1.055 * s2 ** (1 / 2.4) - 0.055 : 12.92 * s2, r3 = Math.min(Math.max(0, r3), 1), n2 = Math.min(Math.max(0, n2), 1), s2 = Math.min(Math.max(0, s2), 1), [255 * r3, 255 * n2, 255 * s2];
    }, Q.xyz.lab = function(u2) {
      let D2 = u2[0], e2 = u2[1], t2 = u2[2];
      D2 /= 95.047, e2 /= 100, t2 /= 108.883, D2 = D2 > 8856e-6 ? D2 ** (1 / 3) : 7.787 * D2 + 16 / 116, e2 = e2 > 8856e-6 ? e2 ** (1 / 3) : 7.787 * e2 + 16 / 116, t2 = t2 > 8856e-6 ? t2 ** (1 / 3) : 7.787 * t2 + 16 / 116;
      return [116 * e2 - 16, 500 * (D2 - e2), 200 * (e2 - t2)];
    }, Q.lab.xyz = function(u2) {
      let D2, e2, t2;
      e2 = (u2[0] + 16) / 116, D2 = u2[1] / 500 + e2, t2 = e2 - u2[2] / 200;
      const r3 = e2 ** 3, n2 = D2 ** 3, s2 = t2 ** 3;
      return e2 = r3 > 8856e-6 ? r3 : (e2 - 16 / 116) / 7.787, D2 = n2 > 8856e-6 ? n2 : (D2 - 16 / 116) / 7.787, t2 = s2 > 8856e-6 ? s2 : (t2 - 16 / 116) / 7.787, D2 *= 95.047, e2 *= 100, t2 *= 108.883, [D2, e2, t2];
    }, Q.lab.lch = function(u2) {
      const D2 = u2[0], e2 = u2[1], t2 = u2[2];
      let r3;
      r3 = 360 * Math.atan2(t2, e2) / 2 / Math.PI, r3 < 0 && (r3 += 360);
      return [D2, Math.sqrt(e2 * e2 + t2 * t2), r3];
    }, Q.lch.lab = function(u2) {
      const D2 = u2[0], e2 = u2[1], t2 = u2[2] / 360 * 2 * Math.PI;
      return [D2, e2 * Math.cos(t2), e2 * Math.sin(t2)];
    }, Q.rgb.ansi16 = function(u2, D2 = null) {
      const [e2, t2, r3] = u2;
      let n2 = null === D2 ? Q.rgb.hsv(u2)[2] : D2;
      if (n2 = Math.round(n2 / 50), 0 === n2)
        return 30;
      let s2 = 30 + (Math.round(r3 / 255) << 2 | Math.round(t2 / 255) << 1 | Math.round(e2 / 255));
      return 2 === n2 && (s2 += 60), s2;
    }, Q.hsv.ansi16 = function(u2) {
      return Q.rgb.ansi16(Q.hsv.rgb(u2), u2[2]);
    }, Q.rgb.ansi256 = function(u2) {
      const D2 = u2[0], e2 = u2[1], t2 = u2[2];
      if (D2 === e2 && e2 === t2)
        return D2 < 8 ? 16 : D2 > 248 ? 231 : Math.round((D2 - 8) / 247 * 24) + 232;
      return 16 + 36 * Math.round(D2 / 255 * 5) + 6 * Math.round(e2 / 255 * 5) + Math.round(t2 / 255 * 5);
    }, Q.ansi16.rgb = function(u2) {
      let D2 = u2 % 10;
      if (0 === D2 || 7 === D2)
        return u2 > 50 && (D2 += 3.5), D2 = D2 / 10.5 * 255, [D2, D2, D2];
      const e2 = 0.5 * (1 + ~~(u2 > 50));
      return [(1 & D2) * e2 * 255, (D2 >> 1 & 1) * e2 * 255, (D2 >> 2 & 1) * e2 * 255];
    }, Q.ansi256.rgb = function(u2) {
      if (u2 >= 232) {
        const D3 = 10 * (u2 - 232) + 8;
        return [D3, D3, D3];
      }
      let D2;
      u2 -= 16;
      return [Math.floor(u2 / 36) / 5 * 255, Math.floor((D2 = u2 % 36) / 6) / 5 * 255, D2 % 6 / 5 * 255];
    }, Q.rgb.hex = function(u2) {
      const D2 = (((255 & Math.round(u2[0])) << 16) + ((255 & Math.round(u2[1])) << 8) + (255 & Math.round(u2[2]))).toString(16).toUpperCase();
      return "000000".substring(D2.length) + D2;
    }, Q.hex.rgb = function(u2) {
      const D2 = u2.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
      if (!D2)
        return [0, 0, 0];
      let e2 = D2[0];
      3 === D2[0].length && (e2 = e2.split("").map((u3) => u3 + u3).join(""));
      const t2 = parseInt(e2, 16);
      return [t2 >> 16 & 255, t2 >> 8 & 255, 255 & t2];
    }, Q.rgb.hcg = function(u2) {
      const D2 = u2[0] / 255, e2 = u2[1] / 255, t2 = u2[2] / 255, r3 = Math.max(Math.max(D2, e2), t2), n2 = Math.min(Math.min(D2, e2), t2), s2 = r3 - n2;
      let o2, i2;
      return o2 = s2 < 1 ? n2 / (1 - s2) : 0, i2 = s2 <= 0 ? 0 : r3 === D2 ? (e2 - t2) / s2 % 6 : r3 === e2 ? 2 + (t2 - D2) / s2 : 4 + (D2 - e2) / s2, i2 /= 6, i2 %= 1, [360 * i2, 100 * s2, 100 * o2];
    }, Q.hsl.hcg = function(u2) {
      const D2 = u2[1] / 100, e2 = u2[2] / 100, t2 = e2 < 0.5 ? 2 * D2 * e2 : 2 * D2 * (1 - e2);
      let r3 = 0;
      return t2 < 1 && (r3 = (e2 - 0.5 * t2) / (1 - t2)), [u2[0], 100 * t2, 100 * r3];
    }, Q.hsv.hcg = function(u2) {
      const D2 = u2[1] / 100, e2 = u2[2] / 100, t2 = D2 * e2;
      let r3 = 0;
      return t2 < 1 && (r3 = (e2 - t2) / (1 - t2)), [u2[0], 100 * t2, 100 * r3];
    }, Q.hcg.rgb = function(u2) {
      const D2 = u2[0] / 360, e2 = u2[1] / 100, t2 = u2[2] / 100;
      if (0 === e2)
        return [255 * t2, 255 * t2, 255 * t2];
      const r3 = [0, 0, 0], n2 = D2 % 1 * 6, s2 = n2 % 1, o2 = 1 - s2;
      let i2 = 0;
      switch (Math.floor(n2)) {
        case 0:
          r3[0] = 1, r3[1] = s2, r3[2] = 0;
          break;
        case 1:
          r3[0] = o2, r3[1] = 1, r3[2] = 0;
          break;
        case 2:
          r3[0] = 0, r3[1] = 1, r3[2] = s2;
          break;
        case 3:
          r3[0] = 0, r3[1] = o2, r3[2] = 1;
          break;
        case 4:
          r3[0] = s2, r3[1] = 0, r3[2] = 1;
          break;
        default:
          r3[0] = 1, r3[1] = 0, r3[2] = o2;
      }
      return i2 = (1 - e2) * t2, [255 * (e2 * r3[0] + i2), 255 * (e2 * r3[1] + i2), 255 * (e2 * r3[2] + i2)];
    }, Q.hcg.hsv = function(u2) {
      const D2 = u2[1] / 100, e2 = D2 + u2[2] / 100 * (1 - D2);
      let t2 = 0;
      return e2 > 0 && (t2 = D2 / e2), [u2[0], 100 * t2, 100 * e2];
    }, Q.hcg.hsl = function(u2) {
      const D2 = u2[1] / 100, e2 = u2[2] / 100 * (1 - D2) + 0.5 * D2;
      let t2 = 0;
      return e2 > 0 && e2 < 0.5 ? t2 = D2 / (2 * e2) : e2 >= 0.5 && e2 < 1 && (t2 = D2 / (2 * (1 - e2))), [u2[0], 100 * t2, 100 * e2];
    }, Q.hcg.hwb = function(u2) {
      const D2 = u2[1] / 100, e2 = D2 + u2[2] / 100 * (1 - D2);
      return [u2[0], 100 * (e2 - D2), 100 * (1 - e2)];
    }, Q.hwb.hcg = function(u2) {
      const D2 = u2[1] / 100, e2 = 1 - u2[2] / 100, t2 = e2 - D2;
      let r3 = 0;
      return t2 < 1 && (r3 = (e2 - t2) / (1 - t2)), [u2[0], 100 * t2, 100 * r3];
    }, Q.apple.rgb = function(u2) {
      return [u2[0] / 65535 * 255, u2[1] / 65535 * 255, u2[2] / 65535 * 255];
    }, Q.rgb.apple = function(u2) {
      return [u2[0] / 255 * 65535, u2[1] / 255 * 65535, u2[2] / 255 * 65535];
    }, Q.gray.rgb = function(u2) {
      return [u2[0] / 100 * 255, u2[0] / 100 * 255, u2[0] / 100 * 255];
    }, Q.gray.hsl = function(u2) {
      return [0, 0, u2[0]];
    }, Q.gray.hsv = Q.gray.hsl, Q.gray.hwb = function(u2) {
      return [0, 100, u2[0]];
    }, Q.gray.cmyk = function(u2) {
      return [0, 0, 0, u2[0]];
    }, Q.gray.lab = function(u2) {
      return [u2[0], 0, 0];
    }, Q.gray.hex = function(u2) {
      const D2 = 255 & Math.round(u2[0] / 100 * 255), e2 = ((D2 << 16) + (D2 << 8) + D2).toString(16).toUpperCase();
      return "000000".substring(e2.length) + e2;
    }, Q.rgb.gray = function(u2) {
      return [(u2[0] + u2[1] + u2[2]) / 3 / 255 * 100];
    };
    var uu = {};
    Object.keys(J).forEach((u2) => {
      uu[u2] = {}, Object.defineProperty(uu[u2], "channels", { value: J[u2].channels }), Object.defineProperty(uu[u2], "labels", { value: J[u2].labels });
      const D2 = function(u3) {
        const D3 = K(u3), e2 = {}, t2 = Object.keys(D3);
        for (let u4 = t2.length, r3 = 0; r3 < u4; r3++) {
          const u5 = t2[r3];
          null !== D3[u5].parent && (e2[u5] = X(u5, D3));
        }
        return e2;
      }(u2);
      Object.keys(D2).forEach((e2) => {
        const t2 = D2[e2];
        uu[u2][e2] = function(u3) {
          const D3 = function(...D4) {
            const e3 = D4[0];
            if (null == e3)
              return e3;
            e3.length > 1 && (D4 = e3);
            const t3 = u3(D4);
            if ("object" == typeof t3)
              for (let u4 = t3.length, D5 = 0; D5 < u4; D5++)
                t3[D5] = Math.round(t3[D5]);
            return t3;
          };
          return "conversion" in u3 && (D3.conversion = u3.conversion), D3;
        }(t2), uu[u2][e2].raw = function(u3) {
          const D3 = function(...D4) {
            const e3 = D4[0];
            return null == e3 ? e3 : (e3.length > 1 && (D4 = e3), u3(D4));
          };
          return "conversion" in u3 && (D3.conversion = u3.conversion), D3;
        }(t2);
      });
    });
    var Du = uu;
    var eu = s(function(u2) {
      const D2 = (u3, D3) => (...e3) => `\x1B[${u3(...e3) + D3}m`, e2 = (u3, D3) => (...e3) => {
        const t3 = u3(...e3);
        return `\x1B[${38 + D3};5;${t3}m`;
      }, t2 = (u3, D3) => (...e3) => {
        const t3 = u3(...e3);
        return `\x1B[${38 + D3};2;${t3[0]};${t3[1]};${t3[2]}m`;
      }, r3 = (u3) => u3, n2 = (u3, D3, e3) => [u3, D3, e3], s2 = (u3, D3, e3) => {
        Object.defineProperty(u3, D3, { get: () => {
          const t3 = e3();
          return Object.defineProperty(u3, D3, { value: t3, enumerable: true, configurable: true }), t3;
        }, enumerable: true, configurable: true });
      };
      let o2;
      const i2 = (u3, D3, e3, t3) => {
        void 0 === o2 && (o2 = Du);
        const r4 = t3 ? 10 : 0, n3 = {};
        for (const [t4, s3] of Object.entries(o2)) {
          const o3 = "ansi16" === t4 ? "ansi" : t4;
          t4 === D3 ? n3[o3] = u3(e3, r4) : "object" == typeof s3 && (n3[o3] = u3(s3[D3], r4));
        }
        return n3;
      };
      Object.defineProperty(u2, "exports", { enumerable: true, get: function() {
        const u3 = /* @__PURE__ */ new Map(), o3 = { modifier: { reset: [0, 0], bold: [1, 22], dim: [2, 22], italic: [3, 23], underline: [4, 24], inverse: [7, 27], hidden: [8, 28], strikethrough: [9, 29] }, color: { black: [30, 39], red: [31, 39], green: [32, 39], yellow: [33, 39], blue: [34, 39], magenta: [35, 39], cyan: [36, 39], white: [37, 39], blackBright: [90, 39], redBright: [91, 39], greenBright: [92, 39], yellowBright: [93, 39], blueBright: [94, 39], magentaBright: [95, 39], cyanBright: [96, 39], whiteBright: [97, 39] }, bgColor: { bgBlack: [40, 49], bgRed: [41, 49], bgGreen: [42, 49], bgYellow: [43, 49], bgBlue: [44, 49], bgMagenta: [45, 49], bgCyan: [46, 49], bgWhite: [47, 49], bgBlackBright: [100, 49], bgRedBright: [101, 49], bgGreenBright: [102, 49], bgYellowBright: [103, 49], bgBlueBright: [104, 49], bgMagentaBright: [105, 49], bgCyanBright: [106, 49], bgWhiteBright: [107, 49] } };
        o3.color.gray = o3.color.blackBright, o3.bgColor.bgGray = o3.bgColor.bgBlackBright, o3.color.grey = o3.color.blackBright, o3.bgColor.bgGrey = o3.bgColor.bgBlackBright;
        for (const [D3, e3] of Object.entries(o3)) {
          for (const [D4, t3] of Object.entries(e3))
            o3[D4] = { open: `\x1B[${t3[0]}m`, close: `\x1B[${t3[1]}m` }, e3[D4] = o3[D4], u3.set(t3[0], t3[1]);
          Object.defineProperty(o3, D3, { value: e3, enumerable: false });
        }
        return Object.defineProperty(o3, "codes", { value: u3, enumerable: false }), o3.color.close = "\x1B[39m", o3.bgColor.close = "\x1B[49m", s2(o3.color, "ansi", () => i2(D2, "ansi16", r3, false)), s2(o3.color, "ansi256", () => i2(e2, "ansi256", r3, false)), s2(o3.color, "ansi16m", () => i2(t2, "rgb", n2, false)), s2(o3.bgColor, "ansi", () => i2(D2, "ansi16", r3, true)), s2(o3.bgColor, "ansi256", () => i2(e2, "ansi256", r3, true)), s2(o3.bgColor, "ansi16m", () => i2(t2, "rgb", n2, true)), o3;
      } });
    });
    var tu = (u2, D2 = process.argv) => {
      const e2 = u2.startsWith("-") ? "" : 1 === u2.length ? "-" : "--", t2 = D2.indexOf(e2 + u2), r3 = D2.indexOf("--");
      return -1 !== t2 && (-1 === r3 || t2 < r3);
    };
    var { env: ru } = process;
    var nu;
    function su(u2) {
      return 0 !== u2 && { level: u2, hasBasic: true, has256: u2 >= 2, has16m: u2 >= 3 };
    }
    function ou(u2, D2) {
      if (0 === nu)
        return 0;
      if (tu("color=16m") || tu("color=full") || tu("color=truecolor"))
        return 3;
      if (tu("color=256"))
        return 2;
      if (u2 && !D2 && void 0 === nu)
        return 0;
      const e2 = nu || 0;
      if ("dumb" === ru.TERM)
        return e2;
      if ("win32" === process.platform) {
        const u3 = r2.release().split(".");
        return Number(u3[0]) >= 10 && Number(u3[2]) >= 10586 ? Number(u3[2]) >= 14931 ? 3 : 2 : 1;
      }
      if ("CI" in ru)
        return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((u3) => u3 in ru) || "codeship" === ru.CI_NAME ? 1 : e2;
      if ("TEAMCITY_VERSION" in ru)
        return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(ru.TEAMCITY_VERSION) ? 1 : 0;
      if ("GITHUB_ACTIONS" in ru)
        return 1;
      if ("truecolor" === ru.COLORTERM)
        return 3;
      if ("TERM_PROGRAM" in ru) {
        const u3 = parseInt((ru.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
        switch (ru.TERM_PROGRAM) {
          case "iTerm.app":
            return u3 >= 3 ? 3 : 2;
          case "Apple_Terminal":
            return 2;
        }
      }
      return /-256(color)?$/i.test(ru.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(ru.TERM) || "COLORTERM" in ru ? 1 : e2;
    }
    tu("no-color") || tu("no-colors") || tu("color=false") || tu("color=never") ? nu = 0 : (tu("color") || tu("colors") || tu("color=true") || tu("color=always")) && (nu = 1), "FORCE_COLOR" in ru && (nu = "true" === ru.FORCE_COLOR ? 1 : "false" === ru.FORCE_COLOR ? 0 : 0 === ru.FORCE_COLOR.length ? 1 : Math.min(parseInt(ru.FORCE_COLOR, 10), 3));
    var iu = { supportsColor: function(u2) {
      return su(ou(u2, u2 && u2.isTTY));
    }, stdout: su(ou(true, n.isatty(1))), stderr: su(ou(true, n.isatty(2))) };
    var au = { stringReplaceAll: (u2, D2, e2) => {
      let t2 = u2.indexOf(D2);
      if (-1 === t2)
        return u2;
      const r3 = D2.length;
      let n2 = 0, s2 = "";
      do {
        s2 += u2.substr(n2, t2 - n2) + D2 + e2, n2 = t2 + r3, t2 = u2.indexOf(D2, n2);
      } while (-1 !== t2);
      return s2 += u2.substr(n2), s2;
    }, stringEncaseCRLFWithFirstIndex: (u2, D2, e2, t2) => {
      let r3 = 0, n2 = "";
      do {
        const s2 = "\r" === u2[t2 - 1];
        n2 += u2.substr(r3, (s2 ? t2 - 1 : t2) - r3) + D2 + (s2 ? "\r\n" : "\n") + e2, r3 = t2 + 1, t2 = u2.indexOf("\n", r3);
      } while (-1 !== t2);
      return n2 += u2.substr(r3), n2;
    } };
    var lu = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
    var cu = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
    var hu = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
    var Fu = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
    var Cu = /* @__PURE__ */ new Map([["n", "\n"], ["r", "\r"], ["t", "	"], ["b", "\b"], ["f", "\f"], ["v", "\v"], ["0", "\0"], ["\\", "\\"], ["e", "\x1B"], ["a", "\x07"]]);
    function fu(u2) {
      const D2 = "u" === u2[0], e2 = "{" === u2[1];
      return D2 && !e2 && 5 === u2.length || "x" === u2[0] && 3 === u2.length ? String.fromCharCode(parseInt(u2.slice(1), 16)) : D2 && e2 ? String.fromCodePoint(parseInt(u2.slice(2, -1), 16)) : Cu.get(u2) || u2;
    }
    function Eu(u2, D2) {
      const e2 = [], t2 = D2.trim().split(/\s*,\s*/g);
      let r3;
      for (const D3 of t2) {
        const t3 = Number(D3);
        if (Number.isNaN(t3)) {
          if (!(r3 = D3.match(hu)))
            throw new Error(`Invalid Chalk template style argument: ${D3} (in style '${u2}')`);
          e2.push(r3[2].replace(Fu, (u3, D4, e3) => D4 ? fu(D4) : e3));
        } else
          e2.push(t3);
      }
      return e2;
    }
    function gu(u2) {
      cu.lastIndex = 0;
      const D2 = [];
      let e2;
      for (; null !== (e2 = cu.exec(u2)); ) {
        const u3 = e2[1];
        if (e2[2]) {
          const t2 = Eu(u3, e2[2]);
          D2.push([u3].concat(t2));
        } else
          D2.push([u3]);
      }
      return D2;
    }
    function du(u2, D2) {
      const e2 = {};
      for (const u3 of D2)
        for (const D3 of u3.styles)
          e2[D3[0]] = u3.inverse ? null : D3.slice(1);
      let t2 = u2;
      for (const [u3, D3] of Object.entries(e2))
        if (Array.isArray(D3)) {
          if (!(u3 in t2))
            throw new Error("Unknown Chalk style: " + u3);
          t2 = D3.length > 0 ? t2[u3](...D3) : t2[u3];
        }
      return t2;
    }
    var pu = (u2, D2) => {
      const e2 = [], t2 = [];
      let r3 = [];
      if (D2.replace(lu, (D3, n2, s2, o2, i2, a2) => {
        if (n2)
          r3.push(fu(n2));
        else if (o2) {
          const D4 = r3.join("");
          r3 = [], t2.push(0 === e2.length ? D4 : du(u2, e2)(D4)), e2.push({ inverse: s2, styles: gu(o2) });
        } else if (i2) {
          if (0 === e2.length)
            throw new Error("Found extraneous } in Chalk template literal");
          t2.push(du(u2, e2)(r3.join(""))), r3 = [], e2.pop();
        } else
          r3.push(a2);
      }), t2.push(r3.join("")), e2.length > 0) {
        const u3 = `Chalk template literal is missing ${e2.length} closing bracket${1 === e2.length ? "" : "s"} (\`}\`)`;
        throw new Error(u3);
      }
      return t2.join("");
    };
    var { stdout: mu, stderr: bu } = iu;
    var { stringReplaceAll: yu, stringEncaseCRLFWithFirstIndex: Bu } = au;
    var vu = ["ansi", "ansi", "ansi256", "ansi16m"];
    var _u = /* @__PURE__ */ Object.create(null);
    var Au = class {
      constructor(u2) {
        return wu(u2);
      }
    };
    var wu = (u2) => {
      const D2 = {};
      return ((u3, D3 = {}) => {
        if (D3.level && !(Number.isInteger(D3.level) && D3.level >= 0 && D3.level <= 3))
          throw new Error("The `level` option should be an integer from 0 to 3");
        const e2 = mu ? mu.level : 0;
        u3.level = void 0 === D3.level ? e2 : D3.level;
      })(D2, u2), D2.template = (...u3) => Lu(D2.template, ...u3), Object.setPrototypeOf(D2, Ou.prototype), Object.setPrototypeOf(D2.template, D2), D2.template.constructor = () => {
        throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
      }, D2.template.Instance = Au, D2.template;
    };
    function Ou(u2) {
      return wu(u2);
    }
    for (const [u2, D2] of Object.entries(eu))
      _u[u2] = { get() {
        const e2 = ku(this, Iu(D2.open, D2.close, this._styler), this._isEmpty);
        return Object.defineProperty(this, u2, { value: e2 }), e2;
      } };
    _u.visible = { get() {
      const u2 = ku(this, this._styler, true);
      return Object.defineProperty(this, "visible", { value: u2 }), u2;
    } };
    var Mu = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
    for (const u2 of Mu)
      _u[u2] = { get() {
        const { level: D2 } = this;
        return function(...e2) {
          const t2 = Iu(eu.color[vu[D2]][u2](...e2), eu.color.close, this._styler);
          return ku(this, t2, this._isEmpty);
        };
      } };
    for (const u2 of Mu) {
      _u["bg" + u2[0].toUpperCase() + u2.slice(1)] = { get() {
        const { level: D2 } = this;
        return function(...e2) {
          const t2 = Iu(eu.bgColor[vu[D2]][u2](...e2), eu.bgColor.close, this._styler);
          return ku(this, t2, this._isEmpty);
        };
      } };
    }
    var Su = Object.defineProperties(() => {
    }, { ..._u, level: { enumerable: true, get() {
      return this._generator.level;
    }, set(u2) {
      this._generator.level = u2;
    } } });
    var Iu = (u2, D2, e2) => {
      let t2, r3;
      return void 0 === e2 ? (t2 = u2, r3 = D2) : (t2 = e2.openAll + u2, r3 = D2 + e2.closeAll), { open: u2, close: D2, openAll: t2, closeAll: r3, parent: e2 };
    };
    var ku = (u2, D2, e2) => {
      const t2 = (...u3) => Ru(t2, 1 === u3.length ? "" + u3[0] : u3.join(" "));
      return Object.setPrototypeOf(t2, Su), t2._generator = u2, t2._styler = D2, t2._isEmpty = e2, t2;
    };
    var Ru = (u2, D2) => {
      if (u2.level <= 0 || !D2)
        return u2._isEmpty ? "" : D2;
      let e2 = u2._styler;
      if (void 0 === e2)
        return D2;
      const { openAll: t2, closeAll: r3 } = e2;
      if (-1 !== D2.indexOf("\x1B"))
        for (; void 0 !== e2; )
          D2 = yu(D2, e2.close, e2.open), e2 = e2.parent;
      const n2 = D2.indexOf("\n");
      return -1 !== n2 && (D2 = Bu(D2, r3, t2, n2)), t2 + D2 + r3;
    };
    var Tu;
    var Lu = (u2, ...D2) => {
      const [e2] = D2;
      if (!Array.isArray(e2))
        return D2.join(" ");
      const t2 = D2.slice(1), r3 = [e2.raw[0]];
      for (let u3 = 1; u3 < e2.length; u3++)
        r3.push(String(t2[u3 - 1]).replace(/[{}\\]/g, "\\$&"), String(e2.raw[u3]));
      return void 0 === Tu && (Tu = pu), Tu(u2, r3.join(""));
    };
    Object.defineProperties(Ou.prototype, _u);
    var $u = Ou();
    $u.supportsColor = mu, $u.stderr = Ou({ level: bu ? bu.level : 0 }), $u.stderr.supportsColor = bu;
    var xu = $u;
    var Uu = {};
    function ju(u2) {
      let D2 = Uu[u2];
      return D2 || (D2 = "#" === u2[0] ? xu.hex(u2) : xu[u2] || xu.keyword(u2), Uu[u2] = D2, D2);
    }
    var Pu = {};
    var Nu = { info: "cyan" };
    var qu = { 0: "red", 1: "yellow", 2: "white", 3: "green" };
    var Yu = { secondaryColor: "grey", formatOptions: { date: true, colors: true, compact: false } };
    var Hu = { info: H("\u2139"), success: H("\u2714"), debug: H("\u203A"), trace: H("\u203A"), log: "" };
    var Vu = class extends S {
      constructor(u2) {
        super(Object.assign({}, Yu, u2));
      }
      formatStack(u2) {
        const D2 = ju("grey"), e2 = ju("cyan");
        return "\n" + A(u2).map((u3) => "  " + u3.replace(/^at +/, (u4) => D2(u4)).replace(/\((.+)\)/, (u4, D3) => `(${e2(D3)})`)).join("\n");
      }
      formatType(u2, D2) {
        const e2 = Nu[u2.type] || qu[u2.level] || this.options.secondaryColor;
        if (D2)
          return function(u3) {
            let D3 = Pu[u3];
            return D3 || (D3 = "#" === u3[0] ? xu.bgHex(u3) : xu["bg" + u3[0].toUpperCase() + u3.slice(1)] || xu.bgKeyword(u3), Pu[u3] = D3, D3);
          }(e2).black(` ${u2.type.toUpperCase()} `);
        const t2 = "string" == typeof Hu[u2.type] ? Hu[u2.type] : u2.icon || u2.type;
        return t2 ? ju(e2)(t2) : "";
      }
      formatLogObj(u2, { width: D2 }) {
        const [e2, ...t2] = this.formatArgs(u2.args).split("\n"), r3 = void 0 !== u2.badge ? Boolean(u2.badge) : u2.level < 2, n2 = ju(this.options.secondaryColor), s2 = this.formatDate(u2.date), o2 = s2 && n2(s2), i2 = this.formatType(u2, r3), a2 = u2.tag ? n2(u2.tag) : "", l2 = e2.replace(/`([^`]+)`/g, (u3, D3) => xu.cyan(D3));
        let c2;
        const h2 = this.filterAndJoin([i2, l2]), F2 = this.filterAndJoin([a2, o2]), C2 = D2 - $(h2) - $(F2) - 2;
        return c2 = C2 > 0 && D2 >= 80 ? h2 + " ".repeat(C2) + F2 : h2, c2 += t2.length ? "\n" + t2.join("\n") : "", r3 ? "\n" + c2 + "\n" : c2;
      }
    };
    var Wu = class {
      constructor({ stream: u2 } = {}) {
        this.stream = u2 || process.stdout;
      }
      log(u2) {
        this.stream.write(JSON.stringify(u2) + "\n");
      }
    };
    var Gu = "undefined" != typeof __non_webpack_require__ ? __non_webpack_require__ : _chunkI7OK7DX6cjs.__require;
    var zu = class {
      constructor(u2) {
        if (u2 && u2.log)
          this.logger = u2;
        else {
          const D2 = Gu("winston");
          this.logger = D2.createLogger(Object.assign({ level: "info", format: D2.format.simple(), transports: [new D2.transports.Console()] }, u2));
        }
      }
      log(u2) {
        const D2 = [].concat(u2.args), e2 = D2.shift();
        this.logger.log({ level: Qu[u2.level] || "info", label: u2.tag, message: e2, args: D2, timestamp: u2.date.getTime() / 1e3 });
      }
    };
    var Qu = { 0: "error", 1: "warn", 2: "info", 3: "verbose", 4: "debug", 5: "silly" };
    global.consola || (global.consola = function() {
      let u2 = p.debug ? 4 : 3;
      process.env.CONSOLA_LEVEL && (u2 = parseInt(process.env.CONSOLA_LEVEL) || u2);
      const D2 = new _({ level: u2, reporters: [p.ci || p.test ? new S() : new Vu()] });
      return D2.Consola = _, D2.BasicReporter = S, D2.FancyReporter = Vu, D2.JSONReporter = Wu, D2.WinstonReporter = zu, D2.LogLevel = m, D2;
    }());
    var Ju = global.consola;
    module.exports = Ju;
  }
});

// node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js
var require_lru_cache = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js"(exports, module) {
    "use strict";
    var Yallist = _chunkKL7XZQQ2cjs.require_yallist.call(void 0, );
    var MAX = Symbol("max");
    var LENGTH = Symbol("length");
    var LENGTH_CALCULATOR = Symbol("lengthCalculator");
    var ALLOW_STALE = Symbol("allowStale");
    var MAX_AGE = Symbol("maxAge");
    var DISPOSE = Symbol("dispose");
    var NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet");
    var LRU_LIST = Symbol("lruList");
    var CACHE = Symbol("cache");
    var UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet");
    var naiveLength = () => 1;
    var LRUCache = class {
      constructor(options) {
        if (typeof options === "number")
          options = { max: options };
        if (!options)
          options = {};
        if (options.max && (typeof options.max !== "number" || options.max < 0))
          throw new TypeError("max must be a non-negative number");
        const max = this[MAX] = options.max || Infinity;
        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = typeof lc !== "function" ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
      }
      set max(mL) {
        if (typeof mL !== "number" || mL < 0)
          throw new TypeError("max must be a non-negative number");
        this[MAX] = mL || Infinity;
        trim(this);
      }
      get max() {
        return this[MAX];
      }
      set allowStale(allowStale) {
        this[ALLOW_STALE] = !!allowStale;
      }
      get allowStale() {
        return this[ALLOW_STALE];
      }
      set maxAge(mA) {
        if (typeof mA !== "number")
          throw new TypeError("maxAge must be a non-negative number");
        this[MAX_AGE] = mA;
        trim(this);
      }
      get maxAge() {
        return this[MAX_AGE];
      }
      set lengthCalculator(lC) {
        if (typeof lC !== "function")
          lC = naiveLength;
        if (lC !== this[LENGTH_CALCULATOR]) {
          this[LENGTH_CALCULATOR] = lC;
          this[LENGTH] = 0;
          this[LRU_LIST].forEach((hit) => {
            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
            this[LENGTH] += hit.length;
          });
        }
        trim(this);
      }
      get lengthCalculator() {
        return this[LENGTH_CALCULATOR];
      }
      get length() {
        return this[LENGTH];
      }
      get itemCount() {
        return this[LRU_LIST].length;
      }
      rforEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].tail; walker !== null; ) {
          const prev = walker.prev;
          forEachStep(this, fn, walker, thisp);
          walker = prev;
        }
      }
      forEach(fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].head; walker !== null; ) {
          const next = walker.next;
          forEachStep(this, fn, walker, thisp);
          walker = next;
        }
      }
      keys() {
        return this[LRU_LIST].toArray().map((k) => k.key);
      }
      values() {
        return this[LRU_LIST].toArray().map((k) => k.value);
      }
      reset() {
        if (this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length) {
          this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value));
        }
        this[CACHE] = /* @__PURE__ */ new Map();
        this[LRU_LIST] = new Yallist();
        this[LENGTH] = 0;
      }
      dump() {
        return this[LRU_LIST].map((hit) => isStale(this, hit) ? false : {
          k: hit.key,
          v: hit.value,
          e: hit.now + (hit.maxAge || 0)
        }).toArray().filter((h) => h);
      }
      dumpLru() {
        return this[LRU_LIST];
      }
      set(key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];
        if (maxAge && typeof maxAge !== "number")
          throw new TypeError("maxAge must be a number");
        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);
        if (this[CACHE].has(key)) {
          if (len > this[MAX]) {
            del(this, this[CACHE].get(key));
            return false;
          }
          const node = this[CACHE].get(key);
          const item = node.value;
          if (this[DISPOSE]) {
            if (!this[NO_DISPOSE_ON_SET])
              this[DISPOSE](key, item.value);
          }
          item.now = now;
          item.maxAge = maxAge;
          item.value = value;
          this[LENGTH] += len - item.length;
          item.length = len;
          this.get(key);
          trim(this);
          return true;
        }
        const hit = new Entry(key, value, len, now, maxAge);
        if (hit.length > this[MAX]) {
          if (this[DISPOSE])
            this[DISPOSE](key, value);
          return false;
        }
        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim(this);
        return true;
      }
      has(key) {
        if (!this[CACHE].has(key))
          return false;
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit);
      }
      get(key) {
        return get(this, key, true);
      }
      peek(key) {
        return get(this, key, false);
      }
      pop() {
        const node = this[LRU_LIST].tail;
        if (!node)
          return null;
        del(this, node);
        return node.value;
      }
      del(key) {
        del(this, this[CACHE].get(key));
      }
      load(arr) {
        this.reset();
        const now = Date.now();
        for (let l = arr.length - 1; l >= 0; l--) {
          const hit = arr[l];
          const expiresAt = hit.e || 0;
          if (expiresAt === 0)
            this.set(hit.k, hit.v);
          else {
            const maxAge = expiresAt - now;
            if (maxAge > 0) {
              this.set(hit.k, hit.v, maxAge);
            }
          }
        }
      }
      prune() {
        this[CACHE].forEach((value, key) => get(this, key, false));
      }
    };
    var get = (self2, key, doUse) => {
      const node = self2[CACHE].get(key);
      if (node) {
        const hit = node.value;
        if (isStale(self2, hit)) {
          del(self2, node);
          if (!self2[ALLOW_STALE])
            return void 0;
        } else {
          if (doUse) {
            if (self2[UPDATE_AGE_ON_GET])
              node.value.now = Date.now();
            self2[LRU_LIST].unshiftNode(node);
          }
        }
        return hit.value;
      }
    };
    var isStale = (self2, hit) => {
      if (!hit || !hit.maxAge && !self2[MAX_AGE])
        return false;
      const diff = Date.now() - hit.now;
      return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
    };
    var trim = (self2) => {
      if (self2[LENGTH] > self2[MAX]) {
        for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && walker !== null; ) {
          const prev = walker.prev;
          del(self2, walker);
          walker = prev;
        }
      }
    };
    var del = (self2, node) => {
      if (node) {
        const hit = node.value;
        if (self2[DISPOSE])
          self2[DISPOSE](hit.key, hit.value);
        self2[LENGTH] -= hit.length;
        self2[CACHE].delete(hit.key);
        self2[LRU_LIST].removeNode(node);
      }
    };
    var Entry = class {
      constructor(key, value, length, now, maxAge) {
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      }
    };
    var forEachStep = (self2, fn, node, thisp) => {
      let hit = node.value;
      if (isStale(self2, hit)) {
        del(self2, node);
        if (!self2[ALLOW_STALE])
          hit = void 0;
      }
      if (hit)
        fn.call(thisp, hit.value, hit.key, self2);
    };
    module.exports = LRUCache;
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/parse-options.js
var require_parse_options = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/parse-options.js"(exports, module) {
    var opts = ["includePrerelease", "loose", "rtl"];
    var parseOptions = (options) => !options ? {} : typeof options !== "object" ? { loose: true } : opts.filter((k) => options[k]).reduce((o, k) => {
      o[k] = true;
      return o;
    }, {});
    module.exports = parseOptions;
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/constants.js
var require_constants = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/constants.js"(exports, module) {
    var SEMVER_SPEC_VERSION = "2.0.0";
    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
    var MAX_SAFE_COMPONENT_LENGTH = 16;
    module.exports = {
      SEMVER_SPEC_VERSION,
      MAX_LENGTH,
      MAX_SAFE_INTEGER,
      MAX_SAFE_COMPONENT_LENGTH
    };
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/debug.js
var require_debug = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/debug.js"(exports, module) {
    var debug = typeof process === "object" && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
    };
    module.exports = debug;
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js
var require_re = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/re.js"(exports, module) {
    var { MAX_SAFE_COMPONENT_LENGTH } = require_constants();
    var debug = require_debug();
    exports = module.exports = {};
    var re = exports.re = [];
    var src = exports.src = [];
    var t = exports.t = {};
    var R = 0;
    var createToken = (name, value, isGlobal) => {
      const index2 = R++;
      debug(name, index2, value);
      t[name] = index2;
      src[index2] = value;
      re[index2] = new RegExp(value, isGlobal ? "g" : void 0);
    };
    createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*");
    createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+");
    createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*");
    createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`);
    createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`);
    createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`);
    createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);
    createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);
    createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+");
    createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);
    createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`);
    createToken("FULL", `^${src[t.FULLPLAIN]}$`);
    createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`);
    createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`);
    createToken("GTLT", "((?:<|>)?=?)");
    createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);
    createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`);
    createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COERCE", `${"(^|[^\\d])(\\d{1,"}${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`);
    createToken("COERCERTL", src[t.COERCE], true);
    createToken("LONETILDE", "(?:~>?)");
    createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = "$1~";
    createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("LONECARET", "(?:\\^)");
    createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = "$1^";
    createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);
    createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);
    createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = "$1$2$3";
    createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`);
    createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`);
    createToken("STAR", "(<|>)?=?\\s*\\*");
    createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$");
    createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/identifiers.js
var require_identifiers = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/internal/identifiers.js"(exports, module) {
    var numeric = /^[0-9]+$/;
    var compareIdentifiers = (a, b) => {
      const anum = numeric.test(a);
      const bnum = numeric.test(b);
      if (anum && bnum) {
        a = +a;
        b = +b;
      }
      return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
    };
    var rcompareIdentifiers = (a, b) => compareIdentifiers(b, a);
    module.exports = {
      compareIdentifiers,
      rcompareIdentifiers
    };
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js
var require_semver = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/semver.js"(exports, module) {
    var debug = require_debug();
    var { MAX_LENGTH, MAX_SAFE_INTEGER } = require_constants();
    var { re, t } = require_re();
    var parseOptions = require_parse_options();
    var { compareIdentifiers } = require_identifiers();
    var SemVer = class {
      constructor(version2, options) {
        options = parseOptions(options);
        if (version2 instanceof SemVer) {
          if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease) {
            return version2;
          } else {
            version2 = version2.version;
          }
        } else if (typeof version2 !== "string") {
          throw new TypeError(`Invalid Version: ${version2}`);
        }
        if (version2.length > MAX_LENGTH) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH} characters`
          );
        }
        debug("SemVer", version2, options);
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        const m = version2.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
        if (!m) {
          throw new TypeError(`Invalid Version: ${version2}`);
        }
        this.raw = version2;
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];
        if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
          throw new TypeError("Invalid major version");
        }
        if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
          throw new TypeError("Invalid minor version");
        }
        if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
          throw new TypeError("Invalid patch version");
        }
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split(".").map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER) {
                return num;
              }
            }
            return id;
          });
        }
        this.build = m[5] ? m[5].split(".") : [];
        this.format();
      }
      format() {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join(".")}`;
        }
        return this.version;
      }
      toString() {
        return this.version;
      }
      compare(other) {
        debug("SemVer.compare", this.version, this.options, other);
        if (!(other instanceof SemVer)) {
          if (typeof other === "string" && other === this.version) {
            return 0;
          }
          other = new SemVer(other, this.options);
        }
        if (other.version === this.version) {
          return 0;
        }
        return this.compareMain(other) || this.comparePre(other);
      }
      compareMain(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
      }
      comparePre(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        if (this.prerelease.length && !other.prerelease.length) {
          return -1;
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1;
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0;
        }
        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      compareBuild(other) {
        if (!(other instanceof SemVer)) {
          other = new SemVer(other, this.options);
        }
        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug("prerelease compare", i, a, b);
          if (a === void 0 && b === void 0) {
            return 0;
          } else if (b === void 0) {
            return 1;
          } else if (a === void 0) {
            return -1;
          } else if (a === b) {
            continue;
          } else {
            return compareIdentifiers(a, b);
          }
        } while (++i);
      }
      inc(release, identifier) {
        switch (release) {
          case "premajor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc("pre", identifier);
            break;
          case "preminor":
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc("pre", identifier);
            break;
          case "prepatch":
            this.prerelease.length = 0;
            this.inc("patch", identifier);
            this.inc("pre", identifier);
            break;
          case "prerelease":
            if (this.prerelease.length === 0) {
              this.inc("patch", identifier);
            }
            this.inc("pre", identifier);
            break;
          case "major":
            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break;
          case "minor":
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break;
          case "patch":
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break;
          case "pre":
            if (this.prerelease.length === 0) {
              this.prerelease = [0];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === "number") {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                this.prerelease.push(0);
              }
            }
            if (identifier) {
              if (compareIdentifiers(this.prerelease[0], identifier) === 0) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = [identifier, 0];
                }
              } else {
                this.prerelease = [identifier, 0];
              }
            }
            break;
          default:
            throw new Error(`invalid increment argument: ${release}`);
        }
        this.format();
        this.raw = this.version;
        return this;
      }
    };
    module.exports = SemVer;
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js
var require_compare = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/compare.js"(exports, module) {
    var SemVer = require_semver();
    var compare = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
    module.exports = compare;
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/eq.js
var require_eq = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/eq.js"(exports, module) {
    var compare = require_compare();
    var eq = (a, b, loose) => compare(a, b, loose) === 0;
    module.exports = eq;
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/neq.js
var require_neq = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/neq.js"(exports, module) {
    var compare = require_compare();
    var neq = (a, b, loose) => compare(a, b, loose) !== 0;
    module.exports = neq;
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gt.js
var require_gt = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gt.js"(exports, module) {
    var compare = require_compare();
    var gt = (a, b, loose) => compare(a, b, loose) > 0;
    module.exports = gt;
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gte.js
var require_gte = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/gte.js"(exports, module) {
    var compare = require_compare();
    var gte = (a, b, loose) => compare(a, b, loose) >= 0;
    module.exports = gte;
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lt.js
var require_lt = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lt.js"(exports, module) {
    var compare = require_compare();
    var lt = (a, b, loose) => compare(a, b, loose) < 0;
    module.exports = lt;
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lte.js
var require_lte = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/lte.js"(exports, module) {
    var compare = require_compare();
    var lte = (a, b, loose) => compare(a, b, loose) <= 0;
    module.exports = lte;
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/cmp.js
var require_cmp = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/cmp.js"(exports, module) {
    var eq = require_eq();
    var neq = require_neq();
    var gt = require_gt();
    var gte = require_gte();
    var lt = require_lt();
    var lte = require_lte();
    var cmp = (a, op, b, loose) => {
      switch (op) {
        case "===":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a === b;
        case "!==":
          if (typeof a === "object") {
            a = a.version;
          }
          if (typeof b === "object") {
            b = b.version;
          }
          return a !== b;
        case "":
        case "=":
        case "==":
          return eq(a, b, loose);
        case "!=":
          return neq(a, b, loose);
        case ">":
          return gt(a, b, loose);
        case ">=":
          return gte(a, b, loose);
        case "<":
          return lt(a, b, loose);
        case "<=":
          return lte(a, b, loose);
        default:
          throw new TypeError(`Invalid operator: ${op}`);
      }
    };
    module.exports = cmp;
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/comparator.js
var require_comparator = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/comparator.js"(exports, module) {
    var ANY = Symbol("SemVer ANY");
    var Comparator = class {
      static get ANY() {
        return ANY;
      }
      constructor(comp, options) {
        options = parseOptions(options);
        if (comp instanceof Comparator) {
          if (comp.loose === !!options.loose) {
            return comp;
          } else {
            comp = comp.value;
          }
        }
        debug("comparator", comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);
        if (this.semver === ANY) {
          this.value = "";
        } else {
          this.value = this.operator + this.semver.version;
        }
        debug("comp", this);
      }
      parse(comp) {
        const r2 = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r2);
        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`);
        }
        this.operator = m[1] !== void 0 ? m[1] : "";
        if (this.operator === "=") {
          this.operator = "";
        }
        if (!m[2]) {
          this.semver = ANY;
        } else {
          this.semver = new SemVer(m[2], this.options.loose);
        }
      }
      toString() {
        return this.value;
      }
      test(version2) {
        debug("Comparator.test", version2, this.options.loose);
        if (this.semver === ANY || version2 === ANY) {
          return true;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        return cmp(version2, this.operator, this.semver, this.options);
      }
      intersects(comp, options) {
        if (!(comp instanceof Comparator)) {
          throw new TypeError("a Comparator is required");
        }
        if (!options || typeof options !== "object") {
          options = {
            loose: !!options,
            includePrerelease: false
          };
        }
        if (this.operator === "") {
          if (this.value === "") {
            return true;
          }
          return new Range(comp.value, options).test(this.value);
        } else if (comp.operator === "") {
          if (comp.value === "") {
            return true;
          }
          return new Range(this.value, options).test(comp.semver);
        }
        const sameDirectionIncreasing = (this.operator === ">=" || this.operator === ">") && (comp.operator === ">=" || comp.operator === ">");
        const sameDirectionDecreasing = (this.operator === "<=" || this.operator === "<") && (comp.operator === "<=" || comp.operator === "<");
        const sameSemVer = this.semver.version === comp.semver.version;
        const differentDirectionsInclusive = (this.operator === ">=" || this.operator === "<=") && (comp.operator === ">=" || comp.operator === "<=");
        const oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (this.operator === ">=" || this.operator === ">") && (comp.operator === "<=" || comp.operator === "<");
        const oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && (this.operator === "<=" || this.operator === "<") && (comp.operator === ">=" || comp.operator === ">");
        return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
      }
    };
    module.exports = Comparator;
    var parseOptions = require_parse_options();
    var { re, t } = require_re();
    var cmp = require_cmp();
    var debug = require_debug();
    var SemVer = require_semver();
    var Range = require_range();
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js
var require_range = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/classes/range.js"(exports, module) {
    var Range = class {
      constructor(range, options) {
        options = parseOptions(options);
        if (range instanceof Range) {
          if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {
            return range;
          } else {
            return new Range(range.raw, options);
          }
        }
        if (range instanceof Comparator) {
          this.raw = range.value;
          this.set = [[range]];
          this.format();
          return this;
        }
        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;
        this.raw = range;
        this.set = range.split("||").map((r2) => this.parseRange(r2.trim())).filter((c) => c.length);
        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${range}`);
        }
        if (this.set.length > 1) {
          const first = this.set[0];
          this.set = this.set.filter((c) => !isNullSet(c[0]));
          if (this.set.length === 0) {
            this.set = [first];
          } else if (this.set.length > 1) {
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break;
              }
            }
          }
        }
        this.format();
      }
      format() {
        this.range = this.set.map((comps) => {
          return comps.join(" ").trim();
        }).join("||").trim();
        return this.range;
      }
      toString() {
        return this.range;
      }
      parseRange(range) {
        range = range.trim();
        const memoOpts = Object.keys(this.options).join(",");
        const memoKey = `parseRange:${memoOpts}:${range}`;
        const cached = cache.get(memoKey);
        if (cached) {
          return cached;
        }
        const loose = this.options.loose;
        const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug("hyphen replace", range);
        range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace);
        debug("comparator trim", range);
        range = range.replace(re[t.TILDETRIM], tildeTrimReplace);
        range = range.replace(re[t.CARETTRIM], caretTrimReplace);
        range = range.split(/\s+/).join(" ");
        let rangeList = range.split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
        if (loose) {
          rangeList = rangeList.filter((comp) => {
            debug("loose invalid filter", comp, this.options);
            return !!comp.match(re[t.COMPARATORLOOSE]);
          });
        }
        debug("range list", rangeList);
        const rangeMap = /* @__PURE__ */ new Map();
        const comparators = rangeList.map((comp) => new Comparator(comp, this.options));
        for (const comp of comparators) {
          if (isNullSet(comp)) {
            return [comp];
          }
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has("")) {
          rangeMap.delete("");
        }
        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result;
      }
      intersects(range, options) {
        if (!(range instanceof Range)) {
          throw new TypeError("a Range is required");
        }
        return this.set.some((thisComparators) => {
          return isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => {
            return isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options);
              });
            });
          });
        });
      }
      test(version2) {
        if (!version2) {
          return false;
        }
        if (typeof version2 === "string") {
          try {
            version2 = new SemVer(version2, this.options);
          } catch (er) {
            return false;
          }
        }
        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version2, this.options)) {
            return true;
          }
        }
        return false;
      }
    };
    module.exports = Range;
    var LRU = require_lru_cache();
    var cache = new LRU({ max: 1e3 });
    var parseOptions = require_parse_options();
    var Comparator = require_comparator();
    var debug = require_debug();
    var SemVer = require_semver();
    var {
      re,
      t,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = require_re();
    var isNullSet = (c) => c.value === "<0.0.0-0";
    var isAny = (c) => c.value === "";
    var isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();
      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options);
        });
        testComparator = remainingComparators.pop();
      }
      return result;
    };
    var parseComparator = (comp, options) => {
      debug("comp", comp, options);
      comp = replaceCarets(comp, options);
      debug("caret", comp);
      comp = replaceTildes(comp, options);
      debug("tildes", comp);
      comp = replaceXRanges(comp, options);
      debug("xrange", comp);
      comp = replaceStars(comp, options);
      debug("stars", comp);
      return comp;
    };
    var isX = (id) => !id || id.toLowerCase() === "x" || id === "*";
    var replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((c) => {
      return replaceTilde(c, options);
    }).join(" ");
    var replaceTilde = (comp, options) => {
      const r2 = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
      return comp.replace(r2, (_, M, m, p, pr) => {
        debug("tilde", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug("replaceTilde pr", pr);
          ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
        } else {
          ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`;
        }
        debug("tilde return", ret);
        return ret;
      });
    };
    var replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((c) => {
      return replaceCaret(c, options);
    }).join(" ");
    var replaceCaret = (comp, options) => {
      debug("caret", comp, options);
      const r2 = options.loose ? re[t.CARETLOOSE] : re[t.CARET];
      const z = options.includePrerelease ? "-0" : "";
      return comp.replace(r2, (_, M, m, p, pr) => {
        debug("caret", comp, _, M, m, p, pr);
        let ret;
        if (isX(M)) {
          ret = "";
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === "0") {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug("replaceCaret pr", pr);
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`;
          }
        } else {
          debug("no pr");
          if (M === "0") {
            if (m === "0") {
              ret = `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p} <${+M + 1}.0.0-0`;
          }
        }
        debug("caret return", ret);
        return ret;
      });
    };
    var replaceXRanges = (comp, options) => {
      debug("replaceXRanges", comp, options);
      return comp.split(/\s+/).map((c) => {
        return replaceXRange(c, options);
      }).join(" ");
    };
    var replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r2 = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
      return comp.replace(r2, (ret, gtlt, M, m, p, pr) => {
        debug("xRange", comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;
        if (gtlt === "=" && anyX) {
          gtlt = "";
        }
        pr = options.includePrerelease ? "-0" : "";
        if (xM) {
          if (gtlt === ">" || gtlt === "<") {
            ret = "<0.0.0-0";
          } else {
            ret = "*";
          }
        } else if (gtlt && anyX) {
          if (xm) {
            m = 0;
          }
          p = 0;
          if (gtlt === ">") {
            gtlt = ">=";
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === "<=") {
            gtlt = "<";
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }
          if (gtlt === "<") {
            pr = "-0";
          }
          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`;
        }
        debug("xRange return", ret);
        return ret;
      });
    };
    var replaceStars = (comp, options) => {
      debug("replaceStars", comp, options);
      return comp.trim().replace(re[t.STAR], "");
    };
    var replaceGTE0 = (comp, options) => {
      debug("replaceGTE0", comp, options);
      return comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "");
    };
    var hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => {
      if (isX(fM)) {
        from = "";
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? "-0" : ""}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? "-0" : ""}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? "-0" : ""}`;
      }
      if (isX(tM)) {
        to = "";
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }
      return `${from} ${to}`.trim();
    };
    var testSet = (set, version2, options) => {
      for (let i = 0; i < set.length; i++) {
        if (!set[i].test(version2)) {
          return false;
        }
      }
      if (version2.prerelease.length && !options.includePrerelease) {
        for (let i = 0; i < set.length; i++) {
          debug(set[i].semver);
          if (set[i].semver === Comparator.ANY) {
            continue;
          }
          if (set[i].semver.prerelease.length > 0) {
            const allowed = set[i].semver;
            if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch) {
              return true;
            }
          }
        }
        return false;
      }
      return true;
    };
  }
});

// node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/satisfies.js
var require_satisfies = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/semver@7.3.8/node_modules/semver/functions/satisfies.js"(exports, module) {
    var Range = require_range();
    var satisfies2 = (version2, range, options) => {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false;
      }
      return range.test(version2);
    };
    module.exports = satisfies2;
  }
});

// node_modules/.pnpm/lodash._reinterpolate@3.0.0/node_modules/lodash._reinterpolate/index.js
var require_lodash = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/lodash._reinterpolate@3.0.0/node_modules/lodash._reinterpolate/index.js"(exports, module) {
    var reInterpolate = /<%=([\s\S]+?)%>/g;
    module.exports = reInterpolate;
  }
});

// node_modules/.pnpm/lodash.templatesettings@4.2.0/node_modules/lodash.templatesettings/index.js
var require_lodash2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/lodash.templatesettings@4.2.0/node_modules/lodash.templatesettings/index.js"(exports, module) {
    var reInterpolate = require_lodash();
    var INFINITY = 1 / 0;
    var nullTag = "[object Null]";
    var symbolTag = "[object Symbol]";
    var undefinedTag = "[object Undefined]";
    var reUnescapedHtml = /[&<>"']/g;
    var reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    var reEscape = /<%-([\s\S]+?)%>/g;
    var reEvaluate = /<%([\s\S]+?)%>/g;
    var htmlEscapes = {
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;"
    };
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    function arrayMap(array, iteratee) {
      var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index2 < length) {
        result[index2] = iteratee(array[index2], index2, array);
      }
      return result;
    }
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? void 0 : object[key];
      };
    }
    var escapeHtmlChar = basePropertyOf(htmlEscapes);
    var objectProto = Object.prototype;
    var hasOwnProperty2 = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var Symbol2 = root.Symbol;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    var templateSettings = {
      "escape": reEscape,
      "evaluate": reEvaluate,
      "interpolate": reInterpolate,
      "variable": "",
      "imports": {
        "_": { "escape": escape }
      }
    };
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray2(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    var isArray2 = Array.isArray;
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    function toString2(value) {
      return value == null ? "" : baseToString(value);
    }
    function escape(string) {
      string = toString2(string);
      return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
    }
    module.exports = templateSettings;
  }
});

// node_modules/.pnpm/lodash.template@4.5.0/node_modules/lodash.template/index.js
var require_lodash3 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/lodash.template@4.5.0/node_modules/lodash.template/index.js"(exports, module) {
    var reInterpolate = require_lodash();
    var templateSettings = require_lodash2();
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var INFINITY = 1 / 0;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var domExcTag = "[object DOMException]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reEmptyStringLeading = /\b__p \+= '';/g;
    var reEmptyStringMiddle = /\b(__p \+=) '' \+/g;
    var reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var reNoMatch = /($^)/;
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var stringEscapes = {
      "\\": "\\",
      "'": "'",
      "\n": "n",
      "\r": "r",
      "\u2028": "u2028",
      "\u2029": "u2029"
    };
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types2 = freeModule && freeModule.require && freeModule.require("util").types;
        if (types2) {
          return types2;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    function arrayMap(array, iteratee) {
      var index2 = -1, length = array == null ? 0 : array.length, result = Array(length);
      while (++index2 < length) {
        result[index2] = iteratee(array[index2], index2, array);
      }
      return result;
    }
    function baseTimes(n, iteratee) {
      var index2 = -1, result = Array(n);
      while (++index2 < n) {
        result[index2] = iteratee(index2);
      }
      return result;
    }
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }
    function escapeStringChar(chr) {
      return "\\" + stringEscapes[chr];
    }
    function getValue2(object, key) {
      return object == null ? void 0 : object[key];
    }
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty2 = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var objectCtorString = funcToString.call(Object);
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty2).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e) {
      }
    }();
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var nativeMax = Math.max;
    var nativeNow = Date.now;
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray2(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty2.call(value, key)) && !(skipIndexes && (key == "length" || isBuff && (key == "offset" || key == "parent") || isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty2.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    function baseIsNative(value) {
      if (!isObject2(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty2.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    function baseKeysIn(object) {
      if (!isObject2(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty2.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + "");
    }
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant(string),
        "writable": true
      });
    };
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray2(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index2 = -1, length = props.length;
      while (++index2 < length) {
        var key = props[index2];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index2 < length) {
          var source = sources[index2];
          if (source) {
            assigner(object, source, index2, customizer);
          }
        }
        return object;
      });
    }
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === void 0 || eq(objValue, objectProto[key]) && !hasOwnProperty2.call(object, key)) {
        return srcValue;
      }
      return objValue;
    }
    function getNative(object, key) {
      var value = getValue2(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    function getRawTag(value) {
      var isOwn = hasOwnProperty2.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    function isIterateeCall(value, index2, object) {
      if (!isObject2(object)) {
        return false;
      }
      var type = typeof index2;
      if (type == "number" ? isArrayLike(object) && isIndex(index2, object.length) : type == "string" && index2 in object) {
        return eq(object[index2], value);
      }
      return false;
    }
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    function overRest(func, start, transform) {
      start = nativeMax(start === void 0 ? func.length - 1 : start, 0);
      return function() {
        var args = arguments, index2 = -1, length = nativeMax(args.length - start, 0), array = Array(length);
        while (++index2 < length) {
          array[index2] = args[start + index2];
        }
        index2 = -1;
        var otherArgs = Array(start + 1);
        while (++index2 < start) {
          otherArgs[index2] = args[index2];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }
    var setToString = shortOut(baseSetToString);
    function shortOut(func) {
      var count = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty2.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray2 = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    var isBuffer = nativeIsBuffer || stubFalse;
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
    }
    function isFunction(value) {
      if (!isObject2(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    function isObject2(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty2.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function toString2(value) {
      return value == null ? "" : baseToString(value);
    }
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    function template(string, options, guard) {
      var settings = templateSettings.imports._.templateSettings || templateSettings;
      if (guard && isIterateeCall(string, options, guard)) {
        options = void 0;
      }
      string = toString2(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);
      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
      var isEscaping, isEvaluating, index2 = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
        "g"
      );
      var sourceURL = hasOwnProperty2.call(options, "sourceURL") ? "//# sourceURL=" + (options.sourceURL + "").replace(/[\r\n]/g, " ") + "\n" : "";
      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset2) {
        interpolateValue || (interpolateValue = esTemplateValue);
        source += string.slice(index2, offset2).replace(reUnescapedString, escapeStringChar);
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index2 = offset2 + match.length;
        return match;
      });
      source += "';\n";
      var variable = hasOwnProperty2.call(options, "variable") && options.variable;
      if (!variable) {
        source = "with (obj) {\n" + source + "\n}\n";
      }
      source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
      source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
      var result = attempt(function() {
        return Function(importsKeys, sourceURL + "return " + source).apply(void 0, importsValues);
      });
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, void 0, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });
    function constant(value) {
      return function() {
        return value;
      };
    }
    function identity(value) {
      return value;
    }
    function stubFalse() {
      return false;
    }
    module.exports = template;
  }
});

// node_modules/.pnpm/jiti@1.16.0/node_modules/jiti/dist/jiti.js
var require_jiti = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/jiti@1.16.0/node_modules/jiti/dist/jiti.js"(exports, module) {
    (() => {
      var __webpack_modules__ = { "./node_modules/.pnpm/create-require@1.1.1/node_modules/create-require/create-require.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const nativeModule = __webpack_require__2("module"), path3 = __webpack_require__2("path"), fs4 = __webpack_require__2("fs");
        module2.exports = function(filename) {
          return filename || (filename = process.cwd()), function(path4) {
            try {
              return fs4.lstatSync(path4).isDirectory();
            } catch (e) {
              return false;
            }
          }(filename) && (filename = path3.join(filename, "index.js")), nativeModule.createRequire ? nativeModule.createRequire(filename) : nativeModule.createRequireFromPath ? nativeModule.createRequireFromPath(filename) : function(filename2) {
            const mod = new nativeModule.Module(filename2, null);
            return mod.filename = filename2, mod.paths = nativeModule.Module._nodeModulePaths(path3.dirname(filename2)), mod._compile("module.exports = require;", filename2), mod.exports;
          }(filename);
        };
      }, "./node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        const Yallist = __webpack_require__2("./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js"), MAX = Symbol("max"), LENGTH = Symbol("length"), LENGTH_CALCULATOR = Symbol("lengthCalculator"), ALLOW_STALE = Symbol("allowStale"), MAX_AGE = Symbol("maxAge"), DISPOSE = Symbol("dispose"), NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet"), LRU_LIST = Symbol("lruList"), CACHE = Symbol("cache"), UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet"), naiveLength = () => 1;
        const get = (self2, key, doUse) => {
          const node = self2[CACHE].get(key);
          if (node) {
            const hit = node.value;
            if (isStale(self2, hit)) {
              if (del(self2, node), !self2[ALLOW_STALE])
                return;
            } else
              doUse && (self2[UPDATE_AGE_ON_GET] && (node.value.now = Date.now()), self2[LRU_LIST].unshiftNode(node));
            return hit.value;
          }
        }, isStale = (self2, hit) => {
          if (!hit || !hit.maxAge && !self2[MAX_AGE])
            return false;
          const diff = Date.now() - hit.now;
          return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
        }, trim = (self2) => {
          if (self2[LENGTH] > self2[MAX])
            for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && null !== walker; ) {
              const prev = walker.prev;
              del(self2, walker), walker = prev;
            }
        }, del = (self2, node) => {
          if (node) {
            const hit = node.value;
            self2[DISPOSE] && self2[DISPOSE](hit.key, hit.value), self2[LENGTH] -= hit.length, self2[CACHE].delete(hit.key), self2[LRU_LIST].removeNode(node);
          }
        };
        class Entry {
          constructor(key, value, length, now, maxAge) {
            this.key = key, this.value = value, this.length = length, this.now = now, this.maxAge = maxAge || 0;
          }
        }
        const forEachStep = (self2, fn, node, thisp) => {
          let hit = node.value;
          isStale(self2, hit) && (del(self2, node), self2[ALLOW_STALE] || (hit = void 0)), hit && fn.call(thisp, hit.value, hit.key, self2);
        };
        module2.exports = class {
          constructor(options) {
            if ("number" == typeof options && (options = { max: options }), options || (options = {}), options.max && ("number" != typeof options.max || options.max < 0))
              throw new TypeError("max must be a non-negative number");
            this[MAX] = options.max || 1 / 0;
            const lc = options.length || naiveLength;
            if (this[LENGTH_CALCULATOR] = "function" != typeof lc ? naiveLength : lc, this[ALLOW_STALE] = options.stale || false, options.maxAge && "number" != typeof options.maxAge)
              throw new TypeError("maxAge must be a number");
            this[MAX_AGE] = options.maxAge || 0, this[DISPOSE] = options.dispose, this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false, this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false, this.reset();
          }
          set max(mL) {
            if ("number" != typeof mL || mL < 0)
              throw new TypeError("max must be a non-negative number");
            this[MAX] = mL || 1 / 0, trim(this);
          }
          get max() {
            return this[MAX];
          }
          set allowStale(allowStale) {
            this[ALLOW_STALE] = !!allowStale;
          }
          get allowStale() {
            return this[ALLOW_STALE];
          }
          set maxAge(mA) {
            if ("number" != typeof mA)
              throw new TypeError("maxAge must be a non-negative number");
            this[MAX_AGE] = mA, trim(this);
          }
          get maxAge() {
            return this[MAX_AGE];
          }
          set lengthCalculator(lC) {
            "function" != typeof lC && (lC = naiveLength), lC !== this[LENGTH_CALCULATOR] && (this[LENGTH_CALCULATOR] = lC, this[LENGTH] = 0, this[LRU_LIST].forEach((hit) => {
              hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key), this[LENGTH] += hit.length;
            })), trim(this);
          }
          get lengthCalculator() {
            return this[LENGTH_CALCULATOR];
          }
          get length() {
            return this[LENGTH];
          }
          get itemCount() {
            return this[LRU_LIST].length;
          }
          rforEach(fn, thisp) {
            thisp = thisp || this;
            for (let walker = this[LRU_LIST].tail; null !== walker; ) {
              const prev = walker.prev;
              forEachStep(this, fn, walker, thisp), walker = prev;
            }
          }
          forEach(fn, thisp) {
            thisp = thisp || this;
            for (let walker = this[LRU_LIST].head; null !== walker; ) {
              const next = walker.next;
              forEachStep(this, fn, walker, thisp), walker = next;
            }
          }
          keys() {
            return this[LRU_LIST].toArray().map((k) => k.key);
          }
          values() {
            return this[LRU_LIST].toArray().map((k) => k.value);
          }
          reset() {
            this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length && this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value)), this[CACHE] = /* @__PURE__ */ new Map(), this[LRU_LIST] = new Yallist(), this[LENGTH] = 0;
          }
          dump() {
            return this[LRU_LIST].map((hit) => !isStale(this, hit) && { k: hit.key, v: hit.value, e: hit.now + (hit.maxAge || 0) }).toArray().filter((h) => h);
          }
          dumpLru() {
            return this[LRU_LIST];
          }
          set(key, value, maxAge) {
            if ((maxAge = maxAge || this[MAX_AGE]) && "number" != typeof maxAge)
              throw new TypeError("maxAge must be a number");
            const now = maxAge ? Date.now() : 0, len = this[LENGTH_CALCULATOR](value, key);
            if (this[CACHE].has(key)) {
              if (len > this[MAX])
                return del(this, this[CACHE].get(key)), false;
              const item = this[CACHE].get(key).value;
              return this[DISPOSE] && (this[NO_DISPOSE_ON_SET] || this[DISPOSE](key, item.value)), item.now = now, item.maxAge = maxAge, item.value = value, this[LENGTH] += len - item.length, item.length = len, this.get(key), trim(this), true;
            }
            const hit = new Entry(key, value, len, now, maxAge);
            return hit.length > this[MAX] ? (this[DISPOSE] && this[DISPOSE](key, value), false) : (this[LENGTH] += hit.length, this[LRU_LIST].unshift(hit), this[CACHE].set(key, this[LRU_LIST].head), trim(this), true);
          }
          has(key) {
            if (!this[CACHE].has(key))
              return false;
            const hit = this[CACHE].get(key).value;
            return !isStale(this, hit);
          }
          get(key) {
            return get(this, key, true);
          }
          peek(key) {
            return get(this, key, false);
          }
          pop() {
            const node = this[LRU_LIST].tail;
            return node ? (del(this, node), node.value) : null;
          }
          del(key) {
            del(this, this[CACHE].get(key));
          }
          load(arr) {
            this.reset();
            const now = Date.now();
            for (let l = arr.length - 1; l >= 0; l--) {
              const hit = arr[l], expiresAt = hit.e || 0;
              if (0 === expiresAt)
                this.set(hit.k, hit.v);
              else {
                const maxAge = expiresAt - now;
                maxAge > 0 && this.set(hit.k, hit.v, maxAge);
              }
            }
          }
          prune() {
            this[CACHE].forEach((value, key) => get(this, key, false));
          }
        };
      }, "./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const optsArg = __webpack_require__2("./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/opts-arg.js"), pathArg = __webpack_require__2("./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/path-arg.js"), { mkdirpNative, mkdirpNativeSync } = __webpack_require__2("./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/mkdirp-native.js"), { mkdirpManual, mkdirpManualSync } = __webpack_require__2("./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/mkdirp-manual.js"), { useNative, useNativeSync } = __webpack_require__2("./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/use-native.js"), mkdirp = (path3, opts) => (path3 = pathArg(path3), opts = optsArg(opts), useNative(opts) ? mkdirpNative(path3, opts) : mkdirpManual(path3, opts));
        mkdirp.sync = (path3, opts) => (path3 = pathArg(path3), opts = optsArg(opts), useNativeSync(opts) ? mkdirpNativeSync(path3, opts) : mkdirpManualSync(path3, opts)), mkdirp.native = (path3, opts) => mkdirpNative(pathArg(path3), optsArg(opts)), mkdirp.manual = (path3, opts) => mkdirpManual(pathArg(path3), optsArg(opts)), mkdirp.nativeSync = (path3, opts) => mkdirpNativeSync(pathArg(path3), optsArg(opts)), mkdirp.manualSync = (path3, opts) => mkdirpManualSync(pathArg(path3), optsArg(opts)), module2.exports = mkdirp;
      }, "./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/find-made.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const { dirname: dirname4 } = __webpack_require__2("path"), findMade = (opts, parent, path3) => path3 === parent ? Promise.resolve() : opts.statAsync(parent).then((st) => st.isDirectory() ? path3 : void 0, (er) => "ENOENT" === er.code ? findMade(opts, dirname4(parent), parent) : void 0), findMadeSync = (opts, parent, path3) => {
          if (path3 !== parent)
            try {
              return opts.statSync(parent).isDirectory() ? path3 : void 0;
            } catch (er) {
              return "ENOENT" === er.code ? findMadeSync(opts, dirname4(parent), parent) : void 0;
            }
        };
        module2.exports = { findMade, findMadeSync };
      }, "./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/mkdirp-manual.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const { dirname: dirname4 } = __webpack_require__2("path"), mkdirpManual = (path3, opts, made) => {
          opts.recursive = false;
          const parent = dirname4(path3);
          return parent === path3 ? opts.mkdirAsync(path3, opts).catch((er) => {
            if ("EISDIR" !== er.code)
              throw er;
          }) : opts.mkdirAsync(path3, opts).then(() => made || path3, (er) => {
            if ("ENOENT" === er.code)
              return mkdirpManual(parent, opts).then((made2) => mkdirpManual(path3, opts, made2));
            if ("EEXIST" !== er.code && "EROFS" !== er.code)
              throw er;
            return opts.statAsync(path3).then((st) => {
              if (st.isDirectory())
                return made;
              throw er;
            }, () => {
              throw er;
            });
          });
        }, mkdirpManualSync = (path3, opts, made) => {
          const parent = dirname4(path3);
          if (opts.recursive = false, parent === path3)
            try {
              return opts.mkdirSync(path3, opts);
            } catch (er) {
              if ("EISDIR" !== er.code)
                throw er;
              return;
            }
          try {
            return opts.mkdirSync(path3, opts), made || path3;
          } catch (er) {
            if ("ENOENT" === er.code)
              return mkdirpManualSync(path3, opts, mkdirpManualSync(parent, opts, made));
            if ("EEXIST" !== er.code && "EROFS" !== er.code)
              throw er;
            try {
              if (!opts.statSync(path3).isDirectory())
                throw er;
            } catch (_) {
              throw er;
            }
          }
        };
        module2.exports = { mkdirpManual, mkdirpManualSync };
      }, "./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/mkdirp-native.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const { dirname: dirname4 } = __webpack_require__2("path"), { findMade, findMadeSync } = __webpack_require__2("./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/find-made.js"), { mkdirpManual, mkdirpManualSync } = __webpack_require__2("./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/mkdirp-manual.js");
        module2.exports = { mkdirpNative: (path3, opts) => {
          opts.recursive = true;
          return dirname4(path3) === path3 ? opts.mkdirAsync(path3, opts) : findMade(opts, path3).then((made) => opts.mkdirAsync(path3, opts).then(() => made).catch((er) => {
            if ("ENOENT" === er.code)
              return mkdirpManual(path3, opts);
            throw er;
          }));
        }, mkdirpNativeSync: (path3, opts) => {
          opts.recursive = true;
          if (dirname4(path3) === path3)
            return opts.mkdirSync(path3, opts);
          const made = findMadeSync(opts, path3);
          try {
            return opts.mkdirSync(path3, opts), made;
          } catch (er) {
            if ("ENOENT" === er.code)
              return mkdirpManualSync(path3, opts);
            throw er;
          }
        } };
      }, "./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/opts-arg.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const { promisify } = __webpack_require__2("util"), fs4 = __webpack_require__2("fs");
        module2.exports = (opts) => {
          if (opts)
            if ("object" == typeof opts)
              opts = { mode: 511, fs: fs4, ...opts };
            else if ("number" == typeof opts)
              opts = { mode: opts, fs: fs4 };
            else {
              if ("string" != typeof opts)
                throw new TypeError("invalid options argument");
              opts = { mode: parseInt(opts, 8), fs: fs4 };
            }
          else
            opts = { mode: 511, fs: fs4 };
          return opts.mkdir = opts.mkdir || opts.fs.mkdir || fs4.mkdir, opts.mkdirAsync = promisify(opts.mkdir), opts.stat = opts.stat || opts.fs.stat || fs4.stat, opts.statAsync = promisify(opts.stat), opts.statSync = opts.statSync || opts.fs.statSync || fs4.statSync, opts.mkdirSync = opts.mkdirSync || opts.fs.mkdirSync || fs4.mkdirSync, opts;
        };
      }, "./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/path-arg.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const platform2 = process.env.__TESTING_MKDIRP_PLATFORM__ || process.platform, { resolve: resolve2, parse: parse4 } = __webpack_require__2("path");
        module2.exports = (path3) => {
          if (/\0/.test(path3))
            throw Object.assign(new TypeError("path must be a string without null bytes"), { path: path3, code: "ERR_INVALID_ARG_VALUE" });
          if (path3 = resolve2(path3), "win32" === platform2) {
            const badWinChars = /[*|"<>?:]/, { root } = parse4(path3);
            if (badWinChars.test(path3.substr(root.length)))
              throw Object.assign(new Error("Illegal characters in path."), { path: path3, code: "EINVAL" });
          }
          return path3;
        };
      }, "./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/lib/use-native.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const fs4 = __webpack_require__2("fs"), versArr = (process.env.__TESTING_MKDIRP_NODE_VERSION__ || process.version).replace(/^v/, "").split("."), hasNative = +versArr[0] > 10 || 10 == +versArr[0] && +versArr[1] >= 12, useNative = hasNative ? (opts) => opts.mkdir === fs4.mkdir : () => false, useNativeSync = hasNative ? (opts) => opts.mkdirSync === fs4.mkdirSync : () => false;
        module2.exports = { useNative, useNativeSync };
      }, "./node_modules/.pnpm/mlly@0.5.14/node_modules/mlly/dist lazy recursive": (module2) => {
        function webpackEmptyAsyncContext(req) {
          return Promise.resolve().then(() => {
            var e = new Error("Cannot find module '" + req + "'");
            throw e.code = "MODULE_NOT_FOUND", e;
          });
        }
        webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/mlly@0.5.14/node_modules/mlly/dist lazy recursive", module2.exports = webpackEmptyAsyncContext;
      }, "./node_modules/.pnpm/object-hash@3.0.0/node_modules/object-hash/index.js": (module2, exports2, __webpack_require__2) => {
        "use strict";
        var crypto = __webpack_require__2("crypto");
        function objectHash(object, options) {
          return function(object2, options2) {
            var hashingStream;
            hashingStream = "passthrough" !== options2.algorithm ? crypto.createHash(options2.algorithm) : new PassThrough();
            void 0 === hashingStream.write && (hashingStream.write = hashingStream.update, hashingStream.end = hashingStream.update);
            typeHasher(options2, hashingStream).dispatch(object2), hashingStream.update || hashingStream.end("");
            if (hashingStream.digest)
              return hashingStream.digest("buffer" === options2.encoding ? void 0 : options2.encoding);
            var buf = hashingStream.read();
            if ("buffer" === options2.encoding)
              return buf;
            return buf.toString(options2.encoding);
          }(object, options = applyDefaults2(object, options));
        }
        (exports2 = module2.exports = objectHash).sha1 = function(object) {
          return objectHash(object);
        }, exports2.keys = function(object) {
          return objectHash(object, { excludeValues: true, algorithm: "sha1", encoding: "hex" });
        }, exports2.MD5 = function(object) {
          return objectHash(object, { algorithm: "md5", encoding: "hex" });
        }, exports2.keysMD5 = function(object) {
          return objectHash(object, { algorithm: "md5", encoding: "hex", excludeValues: true });
        };
        var hashes = crypto.getHashes ? crypto.getHashes().slice() : ["sha1", "md5"];
        hashes.push("passthrough");
        var encodings = ["buffer", "hex", "binary", "base64"];
        function applyDefaults2(object, sourceOptions) {
          sourceOptions = sourceOptions || {};
          var options = {};
          if (options.algorithm = sourceOptions.algorithm || "sha1", options.encoding = sourceOptions.encoding || "hex", options.excludeValues = !!sourceOptions.excludeValues, options.algorithm = options.algorithm.toLowerCase(), options.encoding = options.encoding.toLowerCase(), options.ignoreUnknown = true === sourceOptions.ignoreUnknown, options.respectType = false !== sourceOptions.respectType, options.respectFunctionNames = false !== sourceOptions.respectFunctionNames, options.respectFunctionProperties = false !== sourceOptions.respectFunctionProperties, options.unorderedArrays = true === sourceOptions.unorderedArrays, options.unorderedSets = false !== sourceOptions.unorderedSets, options.unorderedObjects = false !== sourceOptions.unorderedObjects, options.replacer = sourceOptions.replacer || void 0, options.excludeKeys = sourceOptions.excludeKeys || void 0, void 0 === object)
            throw new Error("Object argument required.");
          for (var i = 0; i < hashes.length; ++i)
            hashes[i].toLowerCase() === options.algorithm.toLowerCase() && (options.algorithm = hashes[i]);
          if (-1 === hashes.indexOf(options.algorithm))
            throw new Error('Algorithm "' + options.algorithm + '"  not supported. supported values: ' + hashes.join(", "));
          if (-1 === encodings.indexOf(options.encoding) && "passthrough" !== options.algorithm)
            throw new Error('Encoding "' + options.encoding + '"  not supported. supported values: ' + encodings.join(", "));
          return options;
        }
        function isNativeFunction(f) {
          if ("function" != typeof f)
            return false;
          return null != /^function\s+\w*\s*\(\s*\)\s*{\s+\[native code\]\s+}$/i.exec(Function.prototype.toString.call(f));
        }
        function typeHasher(options, writeTo, context) {
          context = context || [];
          var write = function(str) {
            return writeTo.update ? writeTo.update(str, "utf8") : writeTo.write(str, "utf8");
          };
          return { dispatch: function(value) {
            options.replacer && (value = options.replacer(value));
            var type = typeof value;
            return null === value && (type = "null"), this["_" + type](value);
          }, _object: function(object) {
            var objString = Object.prototype.toString.call(object), objType = /\[object (.*)\]/i.exec(objString);
            objType = (objType = objType ? objType[1] : "unknown:[" + objString + "]").toLowerCase();
            var objectNumber;
            if ((objectNumber = context.indexOf(object)) >= 0)
              return this.dispatch("[CIRCULAR:" + objectNumber + "]");
            if (context.push(object), "undefined" != typeof Buffer && Buffer.isBuffer && Buffer.isBuffer(object))
              return write("buffer:"), write(object);
            if ("object" === objType || "function" === objType || "asyncfunction" === objType) {
              var keys = Object.keys(object);
              options.unorderedObjects && (keys = keys.sort()), false === options.respectType || isNativeFunction(object) || keys.splice(0, 0, "prototype", "__proto__", "constructor"), options.excludeKeys && (keys = keys.filter(function(key) {
                return !options.excludeKeys(key);
              })), write("object:" + keys.length + ":");
              var self2 = this;
              return keys.forEach(function(key) {
                self2.dispatch(key), write(":"), options.excludeValues || self2.dispatch(object[key]), write(",");
              });
            }
            if (!this["_" + objType]) {
              if (options.ignoreUnknown)
                return write("[" + objType + "]");
              throw new Error('Unknown object type "' + objType + '"');
            }
            this["_" + objType](object);
          }, _array: function(arr, unordered) {
            unordered = void 0 !== unordered ? unordered : false !== options.unorderedArrays;
            var self2 = this;
            if (write("array:" + arr.length + ":"), !unordered || arr.length <= 1)
              return arr.forEach(function(entry) {
                return self2.dispatch(entry);
              });
            var contextAdditions = [], entries = arr.map(function(entry) {
              var strm = new PassThrough(), localContext = context.slice();
              return typeHasher(options, strm, localContext).dispatch(entry), contextAdditions = contextAdditions.concat(localContext.slice(context.length)), strm.read().toString();
            });
            return context = context.concat(contextAdditions), entries.sort(), this._array(entries, false);
          }, _date: function(date) {
            return write("date:" + date.toJSON());
          }, _symbol: function(sym) {
            return write("symbol:" + sym.toString());
          }, _error: function(err) {
            return write("error:" + err.toString());
          }, _boolean: function(bool) {
            return write("bool:" + bool.toString());
          }, _string: function(string) {
            write("string:" + string.length + ":"), write(string.toString());
          }, _function: function(fn) {
            write("fn:"), isNativeFunction(fn) ? this.dispatch("[native]") : this.dispatch(fn.toString()), false !== options.respectFunctionNames && this.dispatch("function-name:" + String(fn.name)), options.respectFunctionProperties && this._object(fn);
          }, _number: function(number) {
            return write("number:" + number.toString());
          }, _xml: function(xml) {
            return write("xml:" + xml.toString());
          }, _null: function() {
            return write("Null");
          }, _undefined: function() {
            return write("Undefined");
          }, _regexp: function(regex) {
            return write("regex:" + regex.toString());
          }, _uint8array: function(arr) {
            return write("uint8array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _uint8clampedarray: function(arr) {
            return write("uint8clampedarray:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _int8array: function(arr) {
            return write("int8array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _uint16array: function(arr) {
            return write("uint16array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _int16array: function(arr) {
            return write("int16array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _uint32array: function(arr) {
            return write("uint32array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _int32array: function(arr) {
            return write("int32array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _float32array: function(arr) {
            return write("float32array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _float64array: function(arr) {
            return write("float64array:"), this.dispatch(Array.prototype.slice.call(arr));
          }, _arraybuffer: function(arr) {
            return write("arraybuffer:"), this.dispatch(new Uint8Array(arr));
          }, _url: function(url) {
            return write("url:" + url.toString());
          }, _map: function(map) {
            write("map:");
            var arr = Array.from(map);
            return this._array(arr, false !== options.unorderedSets);
          }, _set: function(set) {
            write("set:");
            var arr = Array.from(set);
            return this._array(arr, false !== options.unorderedSets);
          }, _file: function(file) {
            return write("file:"), this.dispatch([file.name, file.size, file.type, file.lastModfied]);
          }, _blob: function() {
            if (options.ignoreUnknown)
              return write("[blob]");
            throw Error('Hashing Blob objects is currently not supported\n(see https://github.com/puleos/object-hash/issues/26)\nUse "options.replacer" or "options.ignoreUnknown"\n');
          }, _domwindow: function() {
            return write("domwindow");
          }, _bigint: function(number) {
            return write("bigint:" + number.toString());
          }, _process: function() {
            return write("process");
          }, _timer: function() {
            return write("timer");
          }, _pipe: function() {
            return write("pipe");
          }, _tcp: function() {
            return write("tcp");
          }, _udp: function() {
            return write("udp");
          }, _tty: function() {
            return write("tty");
          }, _statwatcher: function() {
            return write("statwatcher");
          }, _securecontext: function() {
            return write("securecontext");
          }, _connection: function() {
            return write("connection");
          }, _zlib: function() {
            return write("zlib");
          }, _context: function() {
            return write("context");
          }, _nodescript: function() {
            return write("nodescript");
          }, _httpparser: function() {
            return write("httpparser");
          }, _dataview: function() {
            return write("dataview");
          }, _signal: function() {
            return write("signal");
          }, _fsevent: function() {
            return write("fsevent");
          }, _tlswrap: function() {
            return write("tlswrap");
          } };
        }
        function PassThrough() {
          return { buf: "", write: function(b) {
            this.buf += b;
          }, end: function(b) {
            this.buf += b;
          }, read: function() {
            return this.buf;
          } };
        }
        exports2.writeToStream = function(object, options, stream) {
          return void 0 === stream && (stream = options, options = {}), typeHasher(options = applyDefaults2(object, options), stream).dispatch(object);
        };
      }, "./node_modules/.pnpm/pirates@4.0.5/node_modules/pirates/lib/index.js": (module2, exports2, __webpack_require__2) => {
        "use strict";
        module2 = __webpack_require__2.nmd(module2), Object.defineProperty(exports2, "__esModule", { value: true }), exports2.addHook = function(hook, opts = {}) {
          let reverted = false;
          const loaders = [], oldLoaders = [];
          let exts;
          const originalJSLoader = Module._extensions[".js"], matcher = opts.matcher || null, ignoreNodeModules = false !== opts.ignoreNodeModules;
          exts = opts.extensions || opts.exts || opts.extension || opts.ext || [".js"], Array.isArray(exts) || (exts = [exts]);
          return exts.forEach((ext) => {
            if ("string" != typeof ext)
              throw new TypeError(`Invalid Extension: ${ext}`);
            const oldLoader = Module._extensions[ext] || originalJSLoader;
            oldLoaders[ext] = Module._extensions[ext], loaders[ext] = Module._extensions[ext] = function(mod, filename) {
              let compile;
              reverted || function(filename2, exts2, matcher2, ignoreNodeModules2) {
                if ("string" != typeof filename2)
                  return false;
                if (-1 === exts2.indexOf(_path.default.extname(filename2)))
                  return false;
                const resolvedFilename = _path.default.resolve(filename2);
                if (ignoreNodeModules2 && nodeModulesRegex.test(resolvedFilename))
                  return false;
                if (matcher2 && "function" == typeof matcher2)
                  return !!matcher2(resolvedFilename);
                return true;
              }(filename, exts, matcher, ignoreNodeModules) && (compile = mod._compile, mod._compile = function(code) {
                mod._compile = compile;
                const newCode = hook(code, filename);
                if ("string" != typeof newCode)
                  throw new Error("[Pirates] A hook returned a non-string, or nothing at all! This is a violation of intergalactic law!\n--------------------\nIf you have no idea what this means or what Pirates is, let me explain: Pirates is a module that makes is easy to implement require hooks. One of the require hooks you're using uses it. One of these require hooks didn't return anything from it's handler, so we don't know what to do. You might want to debug this.");
                return mod._compile(newCode, filename);
              }), oldLoader(mod, filename);
            };
          }), function() {
            reverted || (reverted = true, exts.forEach((ext) => {
              Module._extensions[ext] === loaders[ext] && (oldLoaders[ext] ? Module._extensions[ext] = oldLoaders[ext] : delete Module._extensions[ext]);
            }));
          };
        };
        var _module = _interopRequireDefault(__webpack_require__2("module")), _path = _interopRequireDefault(__webpack_require__2("path"));
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        const nodeModulesRegex = /^(?:.*[\\/])?node_modules(?:[\\/].*)?$/, Module = module2.constructor.length > 1 ? module2.constructor : _module.default;
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/comparator.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const ANY = Symbol("SemVer ANY");
        class Comparator {
          static get ANY() {
            return ANY;
          }
          constructor(comp, options) {
            if (options = parseOptions(options), comp instanceof Comparator) {
              if (comp.loose === !!options.loose)
                return comp;
              comp = comp.value;
            }
            debug("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug("comp", this);
          }
          parse(comp) {
            const r2 = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR], m = comp.match(r2);
            if (!m)
              throw new TypeError(`Invalid comparator: ${comp}`);
            this.operator = void 0 !== m[1] ? m[1] : "", "=" === this.operator && (this.operator = ""), m[2] ? this.semver = new SemVer(m[2], this.options.loose) : this.semver = ANY;
          }
          toString() {
            return this.value;
          }
          test(version2) {
            if (debug("Comparator.test", version2, this.options.loose), this.semver === ANY || version2 === ANY)
              return true;
            if ("string" == typeof version2)
              try {
                version2 = new SemVer(version2, this.options);
              } catch (er) {
                return false;
              }
            return cmp(version2, this.operator, this.semver, this.options);
          }
          intersects(comp, options) {
            if (!(comp instanceof Comparator))
              throw new TypeError("a Comparator is required");
            if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), "" === this.operator)
              return "" === this.value || new Range(comp.value, options).test(this.value);
            if ("" === comp.operator)
              return "" === comp.value || new Range(this.value, options).test(comp.semver);
            const sameDirectionIncreasing = !(">=" !== this.operator && ">" !== this.operator || ">=" !== comp.operator && ">" !== comp.operator), sameDirectionDecreasing = !("<=" !== this.operator && "<" !== this.operator || "<=" !== comp.operator && "<" !== comp.operator), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = !(">=" !== this.operator && "<=" !== this.operator || ">=" !== comp.operator && "<=" !== comp.operator), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (">=" === this.operator || ">" === this.operator) && ("<=" === comp.operator || "<" === comp.operator), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ("<=" === this.operator || "<" === this.operator) && (">=" === comp.operator || ">" === comp.operator);
            return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
          }
        }
        module2.exports = Comparator;
        const parseOptions = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/parse-options.js"), { re, t } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/re.js"), cmp = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/cmp.js"), debug = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/debug.js"), SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/range.js");
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/range.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        class Range {
          constructor(range, options) {
            if (options = parseOptions(options), range instanceof Range)
              return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
            if (range instanceof Comparator)
              return this.raw = range.value, this.set = [[range]], this.format(), this;
            if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range, this.set = range.split("||").map((r2) => this.parseRange(r2.trim())).filter((c) => c.length), !this.set.length)
              throw new TypeError(`Invalid SemVer Range: ${range}`);
            if (this.set.length > 1) {
              const first = this.set[0];
              if (this.set = this.set.filter((c) => !isNullSet(c[0])), 0 === this.set.length)
                this.set = [first];
              else if (this.set.length > 1) {
                for (const c of this.set)
                  if (1 === c.length && isAny(c[0])) {
                    this.set = [c];
                    break;
                  }
              }
            }
            this.format();
          }
          format() {
            return this.range = this.set.map((comps) => comps.join(" ").trim()).join("||").trim(), this.range;
          }
          toString() {
            return this.range;
          }
          parseRange(range) {
            range = range.trim();
            const memoKey = `parseRange:${Object.keys(this.options).join(",")}:${range}`, cached = cache.get(memoKey);
            if (cached)
              return cached;
            const loose = this.options.loose, hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
            range = range.replace(hr, hyphenReplace(this.options.includePrerelease)), debug("hyphen replace", range), range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace), debug("comparator trim", range);
            let rangeList = (range = (range = (range = range.replace(re[t.TILDETRIM], tildeTrimReplace)).replace(re[t.CARETTRIM], caretTrimReplace)).split(/\s+/).join(" ")).split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
            loose && (rangeList = rangeList.filter((comp) => (debug("loose invalid filter", comp, this.options), !!comp.match(re[t.COMPARATORLOOSE])))), debug("range list", rangeList);
            const rangeMap = /* @__PURE__ */ new Map(), comparators = rangeList.map((comp) => new Comparator(comp, this.options));
            for (const comp of comparators) {
              if (isNullSet(comp))
                return [comp];
              rangeMap.set(comp.value, comp);
            }
            rangeMap.size > 1 && rangeMap.has("") && rangeMap.delete("");
            const result = [...rangeMap.values()];
            return cache.set(memoKey, result), result;
          }
          intersects(range, options) {
            if (!(range instanceof Range))
              throw new TypeError("a Range is required");
            return this.set.some((thisComparators) => isSatisfiable(thisComparators, options) && range.set.some((rangeComparators) => isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => rangeComparators.every((rangeComparator) => thisComparator.intersects(rangeComparator, options)))));
          }
          test(version2) {
            if (!version2)
              return false;
            if ("string" == typeof version2)
              try {
                version2 = new SemVer(version2, this.options);
              } catch (er) {
                return false;
              }
            for (let i = 0; i < this.set.length; i++)
              if (testSet(this.set[i], version2, this.options))
                return true;
            return false;
          }
        }
        module2.exports = Range;
        const cache = new (__webpack_require__2("./node_modules/.pnpm/lru-cache@6.0.0/node_modules/lru-cache/index.js"))({ max: 1e3 }), parseOptions = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/parse-options.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/comparator.js"), debug = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/debug.js"), SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js"), { re, t, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/re.js"), isNullSet = (c) => "<0.0.0-0" === c.value, isAny = (c) => "" === c.value, isSatisfiable = (comparators, options) => {
          let result = true;
          const remainingComparators = comparators.slice();
          let testComparator = remainingComparators.pop();
          for (; result && remainingComparators.length; )
            result = remainingComparators.every((otherComparator) => testComparator.intersects(otherComparator, options)), testComparator = remainingComparators.pop();
          return result;
        }, parseComparator = (comp, options) => (debug("comp", comp, options), comp = replaceCarets(comp, options), debug("caret", comp), comp = replaceTildes(comp, options), debug("tildes", comp), comp = replaceXRanges(comp, options), debug("xrange", comp), comp = replaceStars(comp, options), debug("stars", comp), comp), isX = (id) => !id || "x" === id.toLowerCase() || "*" === id, replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" "), replaceTilde = (comp, options) => {
          const r2 = options.loose ? re[t.TILDELOOSE] : re[t.TILDE];
          return comp.replace(r2, (_, M, m, p, pr) => {
            let ret;
            return debug("tilde", comp, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0 <${+M + 1}.0.0-0` : isX(p) ? ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0` : pr ? (debug("replaceTilde pr", pr), ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`) : ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`, debug("tilde return", ret), ret;
          });
        }, replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" "), replaceCaret = (comp, options) => {
          debug("caret", comp, options);
          const r2 = options.loose ? re[t.CARETLOOSE] : re[t.CARET], z = options.includePrerelease ? "-0" : "";
          return comp.replace(r2, (_, M, m, p, pr) => {
            let ret;
            return debug("caret", comp, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0` : isX(p) ? ret = "0" === M ? `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.0${z} <${+M + 1}.0.0-0` : pr ? (debug("replaceCaret pr", pr), ret = "0" === M ? "0" === m ? `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0` : `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`) : (debug("no pr"), ret = "0" === M ? "0" === m ? `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0` : `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.${p} <${+M + 1}.0.0-0`), debug("caret return", ret), ret;
          });
        }, replaceXRanges = (comp, options) => (debug("replaceXRanges", comp, options), comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ")), replaceXRange = (comp, options) => {
          comp = comp.trim();
          const r2 = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
          return comp.replace(r2, (ret, gtlt, M, m, p, pr) => {
            debug("xRange", comp, ret, gtlt, M, m, p, pr);
            const xM = isX(M), xm = xM || isX(m), xp = xm || isX(p), anyX = xp;
            return "=" === gtlt && anyX && (gtlt = ""), pr = options.includePrerelease ? "-0" : "", xM ? ret = ">" === gtlt || "<" === gtlt ? "<0.0.0-0" : "*" : gtlt && anyX ? (xm && (m = 0), p = 0, ">" === gtlt ? (gtlt = ">=", xm ? (M = +M + 1, m = 0, p = 0) : (m = +m + 1, p = 0)) : "<=" === gtlt && (gtlt = "<", xm ? M = +M + 1 : m = +m + 1), "<" === gtlt && (pr = "-0"), ret = `${gtlt + M}.${m}.${p}${pr}`) : xm ? ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0` : xp && (ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`), debug("xRange return", ret), ret;
          });
        }, replaceStars = (comp, options) => (debug("replaceStars", comp, options), comp.trim().replace(re[t.STAR], "")), replaceGTE0 = (comp, options) => (debug("replaceGTE0", comp, options), comp.trim().replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], "")), hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => `${from = isX(fM) ? "" : isX(fm) ? `>=${fM}.0.0${incPr ? "-0" : ""}` : isX(fp) ? `>=${fM}.${fm}.0${incPr ? "-0" : ""}` : fpr ? `>=${from}` : `>=${from}${incPr ? "-0" : ""}`} ${to = isX(tM) ? "" : isX(tm) ? `<${+tM + 1}.0.0-0` : isX(tp) ? `<${tM}.${+tm + 1}.0-0` : tpr ? `<=${tM}.${tm}.${tp}-${tpr}` : incPr ? `<${tM}.${tm}.${+tp + 1}-0` : `<=${to}`}`.trim(), testSet = (set, version2, options) => {
          for (let i = 0; i < set.length; i++)
            if (!set[i].test(version2))
              return false;
          if (version2.prerelease.length && !options.includePrerelease) {
            for (let i = 0; i < set.length; i++)
              if (debug(set[i].semver), set[i].semver !== Comparator.ANY && set[i].semver.prerelease.length > 0) {
                const allowed = set[i].semver;
                if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch)
                  return true;
              }
            return false;
          }
          return true;
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const debug = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/debug.js"), { MAX_LENGTH, MAX_SAFE_INTEGER } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/constants.js"), { re, t } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/re.js"), parseOptions = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/parse-options.js"), { compareIdentifiers } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/identifiers.js");
        class SemVer {
          constructor(version2, options) {
            if (options = parseOptions(options), version2 instanceof SemVer) {
              if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease)
                return version2;
              version2 = version2.version;
            } else if ("string" != typeof version2)
              throw new TypeError(`Invalid Version: ${version2}`);
            if (version2.length > MAX_LENGTH)
              throw new TypeError(`version is longer than ${MAX_LENGTH} characters`);
            debug("SemVer", version2, options), this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease;
            const m = version2.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
            if (!m)
              throw new TypeError(`Invalid Version: ${version2}`);
            if (this.raw = version2, this.major = +m[1], this.minor = +m[2], this.patch = +m[3], this.major > MAX_SAFE_INTEGER || this.major < 0)
              throw new TypeError("Invalid major version");
            if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
              throw new TypeError("Invalid minor version");
            if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
              throw new TypeError("Invalid patch version");
            m[4] ? this.prerelease = m[4].split(".").map((id) => {
              if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER)
                  return num;
              }
              return id;
            }) : this.prerelease = [], this.build = m[5] ? m[5].split(".") : [], this.format();
          }
          format() {
            return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
          }
          toString() {
            return this.version;
          }
          compare(other) {
            if (debug("SemVer.compare", this.version, this.options, other), !(other instanceof SemVer)) {
              if ("string" == typeof other && other === this.version)
                return 0;
              other = new SemVer(other, this.options);
            }
            return other.version === this.version ? 0 : this.compareMain(other) || this.comparePre(other);
          }
          compareMain(other) {
            return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
          }
          comparePre(other) {
            if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length)
              return -1;
            if (!this.prerelease.length && other.prerelease.length)
              return 1;
            if (!this.prerelease.length && !other.prerelease.length)
              return 0;
            let i = 0;
            do {
              const a = this.prerelease[i], b = other.prerelease[i];
              if (debug("prerelease compare", i, a, b), void 0 === a && void 0 === b)
                return 0;
              if (void 0 === b)
                return 1;
              if (void 0 === a)
                return -1;
              if (a !== b)
                return compareIdentifiers(a, b);
            } while (++i);
          }
          compareBuild(other) {
            other instanceof SemVer || (other = new SemVer(other, this.options));
            let i = 0;
            do {
              const a = this.build[i], b = other.build[i];
              if (debug("prerelease compare", i, a, b), void 0 === a && void 0 === b)
                return 0;
              if (void 0 === b)
                return 1;
              if (void 0 === a)
                return -1;
              if (a !== b)
                return compareIdentifiers(a, b);
            } while (++i);
          }
          inc(release, identifier) {
            switch (release) {
              case "premajor":
                this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
                break;
              case "preminor":
                this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
                break;
              case "prepatch":
                this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
                break;
              case "prerelease":
                0 === this.prerelease.length && this.inc("patch", identifier), this.inc("pre", identifier);
                break;
              case "major":
                0 === this.minor && 0 === this.patch && 0 !== this.prerelease.length || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
                break;
              case "minor":
                0 === this.patch && 0 !== this.prerelease.length || this.minor++, this.patch = 0, this.prerelease = [];
                break;
              case "patch":
                0 === this.prerelease.length && this.patch++, this.prerelease = [];
                break;
              case "pre":
                if (0 === this.prerelease.length)
                  this.prerelease = [0];
                else {
                  let i = this.prerelease.length;
                  for (; --i >= 0; )
                    "number" == typeof this.prerelease[i] && (this.prerelease[i]++, i = -2);
                  -1 === i && this.prerelease.push(0);
                }
                identifier && (0 === compareIdentifiers(this.prerelease[0], identifier) ? isNaN(this.prerelease[1]) && (this.prerelease = [identifier, 0]) : this.prerelease = [identifier, 0]);
                break;
              default:
                throw new Error(`invalid increment argument: ${release}`);
            }
            return this.format(), this.raw = this.version, this;
          }
        }
        module2.exports = SemVer;
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/clean.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const parse4 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/parse.js");
        module2.exports = (version2, options) => {
          const s = parse4(version2.trim().replace(/^[=v]+/, ""), options);
          return s ? s.version : null;
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/cmp.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const eq = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/eq.js"), neq = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/neq.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/gt.js"), gte = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/gte.js"), lt = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/lt.js"), lte = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/lte.js");
        module2.exports = (a, op, b, loose) => {
          switch (op) {
            case "===":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a === b;
            case "!==":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a !== b;
            case "":
            case "=":
            case "==":
              return eq(a, b, loose);
            case "!=":
              return neq(a, b, loose);
            case ">":
              return gt(a, b, loose);
            case ">=":
              return gte(a, b, loose);
            case "<":
              return lt(a, b, loose);
            case "<=":
              return lte(a, b, loose);
            default:
              throw new TypeError(`Invalid operator: ${op}`);
          }
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/coerce.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js"), parse4 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/parse.js"), { re, t } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/re.js");
        module2.exports = (version2, options) => {
          if (version2 instanceof SemVer)
            return version2;
          if ("number" == typeof version2 && (version2 = String(version2)), "string" != typeof version2)
            return null;
          let match = null;
          if ((options = options || {}).rtl) {
            let next;
            for (; (next = re[t.COERCERTL].exec(version2)) && (!match || match.index + match[0].length !== version2.length); )
              match && next.index + next[0].length === match.index + match[0].length || (match = next), re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
            re[t.COERCERTL].lastIndex = -1;
          } else
            match = version2.match(re[t.COERCE]);
          return null === match ? null : parse4(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare-build.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js");
        module2.exports = (a, b, loose) => {
          const versionA = new SemVer(a, loose), versionB = new SemVer(b, loose);
          return versionA.compare(versionB) || versionA.compareBuild(versionB);
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare-loose.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare.js");
        module2.exports = (a, b) => compare(a, b, true);
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js");
        module2.exports = (a, b, loose) => new SemVer(a, loose).compare(new SemVer(b, loose));
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/diff.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const parse4 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/parse.js"), eq = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/eq.js");
        module2.exports = (version1, version2) => {
          if (eq(version1, version2))
            return null;
          {
            const v1 = parse4(version1), v2 = parse4(version2), hasPre = v1.prerelease.length || v2.prerelease.length, prefix = hasPre ? "pre" : "", defaultResult = hasPre ? "prerelease" : "";
            for (const key in v1)
              if (("major" === key || "minor" === key || "patch" === key) && v1[key] !== v2[key])
                return prefix + key;
            return defaultResult;
          }
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/eq.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare.js");
        module2.exports = (a, b, loose) => 0 === compare(a, b, loose);
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/gt.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare.js");
        module2.exports = (a, b, loose) => compare(a, b, loose) > 0;
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/gte.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare.js");
        module2.exports = (a, b, loose) => compare(a, b, loose) >= 0;
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/inc.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js");
        module2.exports = (version2, release, options, identifier) => {
          "string" == typeof options && (identifier = options, options = void 0);
          try {
            return new SemVer(version2 instanceof SemVer ? version2.version : version2, options).inc(release, identifier).version;
          } catch (er) {
            return null;
          }
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/lt.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare.js");
        module2.exports = (a, b, loose) => compare(a, b, loose) < 0;
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/lte.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare.js");
        module2.exports = (a, b, loose) => compare(a, b, loose) <= 0;
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/major.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js");
        module2.exports = (a, loose) => new SemVer(a, loose).major;
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/minor.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js");
        module2.exports = (a, loose) => new SemVer(a, loose).minor;
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/neq.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare.js");
        module2.exports = (a, b, loose) => 0 !== compare(a, b, loose);
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/parse.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const { MAX_LENGTH } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/constants.js"), { re, t } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/re.js"), SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js"), parseOptions = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/parse-options.js");
        module2.exports = (version2, options) => {
          if (options = parseOptions(options), version2 instanceof SemVer)
            return version2;
          if ("string" != typeof version2)
            return null;
          if (version2.length > MAX_LENGTH)
            return null;
          if (!(options.loose ? re[t.LOOSE] : re[t.FULL]).test(version2))
            return null;
          try {
            return new SemVer(version2, options);
          } catch (er) {
            return null;
          }
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/patch.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js");
        module2.exports = (a, loose) => new SemVer(a, loose).patch;
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/prerelease.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const parse4 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/parse.js");
        module2.exports = (version2, options) => {
          const parsed = parse4(version2, options);
          return parsed && parsed.prerelease.length ? parsed.prerelease : null;
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/rcompare.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare.js");
        module2.exports = (a, b, loose) => compare(b, a, loose);
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/rsort.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compareBuild = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare-build.js");
        module2.exports = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/satisfies.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/range.js");
        module2.exports = (version2, range, options) => {
          try {
            range = new Range(range, options);
          } catch (er) {
            return false;
          }
          return range.test(version2);
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/sort.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const compareBuild = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare-build.js");
        module2.exports = (list, loose) => list.sort((a, b) => compareBuild(a, b, loose));
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/valid.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const parse4 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/parse.js");
        module2.exports = (version2, options) => {
          const v = parse4(version2, options);
          return v ? v.version : null;
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const internalRe = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/re.js");
        module2.exports = { re: internalRe.re, src: internalRe.src, tokens: internalRe.t, SEMVER_SPEC_VERSION: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/constants.js").SEMVER_SPEC_VERSION, SemVer: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js"), compareIdentifiers: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/identifiers.js").compareIdentifiers, rcompareIdentifiers: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/identifiers.js").rcompareIdentifiers, parse: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/parse.js"), valid: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/valid.js"), clean: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/clean.js"), inc: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/inc.js"), diff: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/diff.js"), major: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/major.js"), minor: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/minor.js"), patch: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/patch.js"), prerelease: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/prerelease.js"), compare: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare.js"), rcompare: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/rcompare.js"), compareLoose: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare-loose.js"), compareBuild: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare-build.js"), sort: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/sort.js"), rsort: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/rsort.js"), gt: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/gt.js"), lt: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/lt.js"), eq: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/eq.js"), neq: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/neq.js"), gte: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/gte.js"), lte: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/lte.js"), cmp: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/cmp.js"), coerce: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/coerce.js"), Comparator: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/comparator.js"), Range: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/range.js"), satisfies: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/satisfies.js"), toComparators: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/to-comparators.js"), maxSatisfying: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/max-satisfying.js"), minSatisfying: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/min-satisfying.js"), minVersion: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/min-version.js"), validRange: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/valid.js"), outside: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/outside.js"), gtr: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/gtr.js"), ltr: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/ltr.js"), intersects: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/intersects.js"), simplifyRange: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/simplify.js"), subset: __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/subset.js") };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/constants.js": (module2) => {
        const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;
        module2.exports = { SEMVER_SPEC_VERSION: "2.0.0", MAX_LENGTH: 256, MAX_SAFE_INTEGER, MAX_SAFE_COMPONENT_LENGTH: 16 };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/debug.js": (module2) => {
        const debug = "object" == typeof process && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
        };
        module2.exports = debug;
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/identifiers.js": (module2) => {
        const numeric = /^[0-9]+$/, compareIdentifiers = (a, b) => {
          const anum = numeric.test(a), bnum = numeric.test(b);
          return anum && bnum && (a = +a, b = +b), a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
        };
        module2.exports = { compareIdentifiers, rcompareIdentifiers: (a, b) => compareIdentifiers(b, a) };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/parse-options.js": (module2) => {
        const opts = ["includePrerelease", "loose", "rtl"];
        module2.exports = (options) => options ? "object" != typeof options ? { loose: true } : opts.filter((k) => options[k]).reduce((o, k) => (o[k] = true, o), {}) : {};
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/re.js": (module2, exports2, __webpack_require__2) => {
        const { MAX_SAFE_COMPONENT_LENGTH } = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/constants.js"), debug = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/internal/debug.js"), re = (exports2 = module2.exports = {}).re = [], src = exports2.src = [], t = exports2.t = {};
        let R = 0;
        const createToken = (name, value, isGlobal) => {
          const index2 = R++;
          debug(name, index2, value), t[name] = index2, src[index2] = value, re[index2] = new RegExp(value, isGlobal ? "g" : void 0);
        };
        createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*"), createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+"), createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*"), createToken("MAINVERSION", `(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})\\.(${src[t.NUMERICIDENTIFIER]})`), createToken("MAINVERSIONLOOSE", `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})\\.(${src[t.NUMERICIDENTIFIERLOOSE]})`), createToken("PRERELEASEIDENTIFIER", `(?:${src[t.NUMERICIDENTIFIER]}|${src[t.NONNUMERICIDENTIFIER]})`), createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t.NUMERICIDENTIFIERLOOSE]}|${src[t.NONNUMERICIDENTIFIER]})`), createToken("PRERELEASE", `(?:-(${src[t.PRERELEASEIDENTIFIER]}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`), createToken("PRERELEASELOOSE", `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`), createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+"), createToken("BUILD", `(?:\\+(${src[t.BUILDIDENTIFIER]}(?:\\.${src[t.BUILDIDENTIFIER]})*))`), createToken("FULLPLAIN", `v?${src[t.MAINVERSION]}${src[t.PRERELEASE]}?${src[t.BUILD]}?`), createToken("FULL", `^${src[t.FULLPLAIN]}$`), createToken("LOOSEPLAIN", `[v=\\s]*${src[t.MAINVERSIONLOOSE]}${src[t.PRERELEASELOOSE]}?${src[t.BUILD]}?`), createToken("LOOSE", `^${src[t.LOOSEPLAIN]}$`), createToken("GTLT", "((?:<|>)?=?)"), createToken("XRANGEIDENTIFIERLOOSE", `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`), createToken("XRANGEIDENTIFIER", `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`), createToken("XRANGEPLAIN", `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:\\.(${src[t.XRANGEIDENTIFIER]})(?:${src[t.PRERELEASE]})?${src[t.BUILD]}?)?)?`), createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})(?:${src[t.PRERELEASELOOSE]})?${src[t.BUILD]}?)?)?`), createToken("XRANGE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`), createToken("XRANGELOOSE", `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`), createToken("COERCE", `(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`), createToken("COERCERTL", src[t.COERCE], true), createToken("LONETILDE", "(?:~>?)"), createToken("TILDETRIM", `(\\s*)${src[t.LONETILDE]}\\s+`, true), exports2.tildeTrimReplace = "$1~", createToken("TILDE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`), createToken("TILDELOOSE", `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`), createToken("LONECARET", "(?:\\^)"), createToken("CARETTRIM", `(\\s*)${src[t.LONECARET]}\\s+`, true), exports2.caretTrimReplace = "$1^", createToken("CARET", `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`), createToken("CARETLOOSE", `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`), createToken("COMPARATORLOOSE", `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`), createToken("COMPARATOR", `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`), createToken("COMPARATORTRIM", `(\\s*)${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true), exports2.comparatorTrimReplace = "$1$2$3", createToken("HYPHENRANGE", `^\\s*(${src[t.XRANGEPLAIN]})\\s+-\\s+(${src[t.XRANGEPLAIN]})\\s*$`), createToken("HYPHENRANGELOOSE", `^\\s*(${src[t.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t.XRANGEPLAINLOOSE]})\\s*$`), createToken("STAR", "(<|>)?=?\\s*\\*"), createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$"), createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/gtr.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const outside = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/outside.js");
        module2.exports = (version2, range, options) => outside(version2, range, ">", options);
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/intersects.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/range.js");
        module2.exports = (r1, r2, options) => (r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2));
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/ltr.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const outside = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/outside.js");
        module2.exports = (version2, range, options) => outside(version2, range, "<", options);
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/max-satisfying.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/range.js");
        module2.exports = (versions, range, options) => {
          let max = null, maxSV = null, rangeObj = null;
          try {
            rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach((v) => {
            rangeObj.test(v) && (max && -1 !== maxSV.compare(v) || (max = v, maxSV = new SemVer(max, options)));
          }), max;
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/min-satisfying.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/range.js");
        module2.exports = (versions, range, options) => {
          let min = null, minSV = null, rangeObj = null;
          try {
            rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach((v) => {
            rangeObj.test(v) && (min && 1 !== minSV.compare(v) || (min = v, minSV = new SemVer(min, options)));
          }), min;
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/min-version.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js"), Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/range.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/gt.js");
        module2.exports = (range, loose) => {
          range = new Range(range, loose);
          let minver = new SemVer("0.0.0");
          if (range.test(minver))
            return minver;
          if (minver = new SemVer("0.0.0-0"), range.test(minver))
            return minver;
          minver = null;
          for (let i = 0; i < range.set.length; ++i) {
            const comparators = range.set[i];
            let setMin = null;
            comparators.forEach((comparator) => {
              const compver = new SemVer(comparator.semver.version);
              switch (comparator.operator) {
                case ">":
                  0 === compver.prerelease.length ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
                case "":
                case ">=":
                  setMin && !gt(compver, setMin) || (setMin = compver);
                  break;
                case "<":
                case "<=":
                  break;
                default:
                  throw new Error(`Unexpected operation: ${comparator.operator}`);
              }
            }), !setMin || minver && !gt(minver, setMin) || (minver = setMin);
          }
          return minver && range.test(minver) ? minver : null;
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/outside.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const SemVer = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/semver.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/comparator.js"), { ANY } = Comparator, Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/range.js"), satisfies2 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/satisfies.js"), gt = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/gt.js"), lt = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/lt.js"), lte = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/lte.js"), gte = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/gte.js");
        module2.exports = (version2, range, hilo, options) => {
          let gtfn, ltefn, ltfn, comp, ecomp;
          switch (version2 = new SemVer(version2, options), range = new Range(range, options), hilo) {
            case ">":
              gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
              break;
            case "<":
              gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
              break;
            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }
          if (satisfies2(version2, range, options))
            return false;
          for (let i = 0; i < range.set.length; ++i) {
            const comparators = range.set[i];
            let high = null, low = null;
            if (comparators.forEach((comparator) => {
              comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
            }), high.operator === comp || high.operator === ecomp)
              return false;
            if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver))
              return false;
            if (low.operator === ecomp && ltfn(version2, low.semver))
              return false;
          }
          return true;
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/simplify.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const satisfies2 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/satisfies.js"), compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare.js");
        module2.exports = (versions, range, options) => {
          const set = [];
          let first = null, prev = null;
          const v = versions.sort((a, b) => compare(a, b, options));
          for (const version2 of v) {
            satisfies2(version2, range, options) ? (prev = version2, first || (first = version2)) : (prev && set.push([first, prev]), prev = null, first = null);
          }
          first && set.push([first, null]);
          const ranges = [];
          for (const [min, max] of set)
            min === max ? ranges.push(min) : max || min !== v[0] ? max ? min === v[0] ? ranges.push(`<=${max}`) : ranges.push(`${min} - ${max}`) : ranges.push(`>=${min}`) : ranges.push("*");
          const simplified = ranges.join(" || "), original = "string" == typeof range.raw ? range.raw : String(range);
          return simplified.length < original.length ? simplified : range;
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/subset.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/range.js"), Comparator = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/comparator.js"), { ANY } = Comparator, satisfies2 = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/satisfies.js"), compare = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/functions/compare.js"), simpleSubset = (sub, dom, options) => {
          if (sub === dom)
            return true;
          if (1 === sub.length && sub[0].semver === ANY) {
            if (1 === dom.length && dom[0].semver === ANY)
              return true;
            sub = options.includePrerelease ? [new Comparator(">=0.0.0-0")] : [new Comparator(">=0.0.0")];
          }
          if (1 === dom.length && dom[0].semver === ANY) {
            if (options.includePrerelease)
              return true;
            dom = [new Comparator(">=0.0.0")];
          }
          const eqSet = /* @__PURE__ */ new Set();
          let gt, lt, gtltComp, higher, lower, hasDomLT, hasDomGT;
          for (const c of sub)
            ">" === c.operator || ">=" === c.operator ? gt = higherGT(gt, c, options) : "<" === c.operator || "<=" === c.operator ? lt = lowerLT(lt, c, options) : eqSet.add(c.semver);
          if (eqSet.size > 1)
            return null;
          if (gt && lt) {
            if (gtltComp = compare(gt.semver, lt.semver, options), gtltComp > 0)
              return null;
            if (0 === gtltComp && (">=" !== gt.operator || "<=" !== lt.operator))
              return null;
          }
          for (const eq of eqSet) {
            if (gt && !satisfies2(eq, String(gt), options))
              return null;
            if (lt && !satisfies2(eq, String(lt), options))
              return null;
            for (const c of dom)
              if (!satisfies2(eq, String(c), options))
                return false;
            return true;
          }
          let needDomLTPre = !(!lt || options.includePrerelease || !lt.semver.prerelease.length) && lt.semver, needDomGTPre = !(!gt || options.includePrerelease || !gt.semver.prerelease.length) && gt.semver;
          needDomLTPre && 1 === needDomLTPre.prerelease.length && "<" === lt.operator && 0 === needDomLTPre.prerelease[0] && (needDomLTPre = false);
          for (const c of dom) {
            if (hasDomGT = hasDomGT || ">" === c.operator || ">=" === c.operator, hasDomLT = hasDomLT || "<" === c.operator || "<=" === c.operator, gt) {
              if (needDomGTPre && c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch && (needDomGTPre = false), ">" === c.operator || ">=" === c.operator) {
                if (higher = higherGT(gt, c, options), higher === c && higher !== gt)
                  return false;
              } else if (">=" === gt.operator && !satisfies2(gt.semver, String(c), options))
                return false;
            }
            if (lt) {
              if (needDomLTPre && c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch && (needDomLTPre = false), "<" === c.operator || "<=" === c.operator) {
                if (lower = lowerLT(lt, c, options), lower === c && lower !== lt)
                  return false;
              } else if ("<=" === lt.operator && !satisfies2(lt.semver, String(c), options))
                return false;
            }
            if (!c.operator && (lt || gt) && 0 !== gtltComp)
              return false;
          }
          return !(gt && hasDomLT && !lt && 0 !== gtltComp) && (!(lt && hasDomGT && !gt && 0 !== gtltComp) && (!needDomGTPre && !needDomLTPre));
        }, higherGT = (a, b, options) => {
          if (!a)
            return b;
          const comp = compare(a.semver, b.semver, options);
          return comp > 0 ? a : comp < 0 || ">" === b.operator && ">=" === a.operator ? b : a;
        }, lowerLT = (a, b, options) => {
          if (!a)
            return b;
          const comp = compare(a.semver, b.semver, options);
          return comp < 0 ? a : comp > 0 || "<" === b.operator && "<=" === a.operator ? b : a;
        };
        module2.exports = (sub, dom, options = {}) => {
          if (sub === dom)
            return true;
          sub = new Range(sub, options), dom = new Range(dom, options);
          let sawNonNull = false;
          OUTER:
            for (const simpleSub of sub.set) {
              for (const simpleDom of dom.set) {
                const isSub = simpleSubset(simpleSub, simpleDom, options);
                if (sawNonNull = sawNonNull || null !== isSub, isSub)
                  continue OUTER;
              }
              if (sawNonNull)
                return false;
            }
          return true;
        };
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/to-comparators.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/range.js");
        module2.exports = (range, options) => new Range(range, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
      }, "./node_modules/.pnpm/semver@7.3.7/node_modules/semver/ranges/valid.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        const Range = __webpack_require__2("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/classes/range.js");
        module2.exports = (range, options) => {
          try {
            return new Range(range, options).range || "*";
          } catch (er) {
            return null;
          }
        };
      }, "./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js": (module2) => {
        "use strict";
        module2.exports = function(Yallist) {
          Yallist.prototype[Symbol.iterator] = function* () {
            for (let walker = this.head; walker; walker = walker.next)
              yield walker.value;
          };
        };
      }, "./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/yallist.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        function Yallist(list) {
          var self2 = this;
          if (self2 instanceof Yallist || (self2 = new Yallist()), self2.tail = null, self2.head = null, self2.length = 0, list && "function" == typeof list.forEach)
            list.forEach(function(item) {
              self2.push(item);
            });
          else if (arguments.length > 0)
            for (var i = 0, l = arguments.length; i < l; i++)
              self2.push(arguments[i]);
          return self2;
        }
        function insert(self2, node, value) {
          var inserted = node === self2.head ? new Node3(value, null, node, self2) : new Node3(value, node, node.next, self2);
          return null === inserted.next && (self2.tail = inserted), null === inserted.prev && (self2.head = inserted), self2.length++, inserted;
        }
        function push(self2, item) {
          self2.tail = new Node3(item, self2.tail, null, self2), self2.head || (self2.head = self2.tail), self2.length++;
        }
        function unshift(self2, item) {
          self2.head = new Node3(item, null, self2.head, self2), self2.tail || (self2.tail = self2.head), self2.length++;
        }
        function Node3(value, prev, next, list) {
          if (!(this instanceof Node3))
            return new Node3(value, prev, next, list);
          this.list = list, this.value = value, prev ? (prev.next = this, this.prev = prev) : this.prev = null, next ? (next.prev = this, this.next = next) : this.next = null;
        }
        module2.exports = Yallist, Yallist.Node = Node3, Yallist.create = Yallist, Yallist.prototype.removeNode = function(node) {
          if (node.list !== this)
            throw new Error("removing node which does not belong to this list");
          var next = node.next, prev = node.prev;
          return next && (next.prev = prev), prev && (prev.next = next), node === this.head && (this.head = next), node === this.tail && (this.tail = prev), node.list.length--, node.next = null, node.prev = null, node.list = null, next;
        }, Yallist.prototype.unshiftNode = function(node) {
          if (node !== this.head) {
            node.list && node.list.removeNode(node);
            var head = this.head;
            node.list = this, node.next = head, head && (head.prev = node), this.head = node, this.tail || (this.tail = node), this.length++;
          }
        }, Yallist.prototype.pushNode = function(node) {
          if (node !== this.tail) {
            node.list && node.list.removeNode(node);
            var tail = this.tail;
            node.list = this, node.prev = tail, tail && (tail.next = node), this.tail = node, this.head || (this.head = node), this.length++;
          }
        }, Yallist.prototype.push = function() {
          for (var i = 0, l = arguments.length; i < l; i++)
            push(this, arguments[i]);
          return this.length;
        }, Yallist.prototype.unshift = function() {
          for (var i = 0, l = arguments.length; i < l; i++)
            unshift(this, arguments[i]);
          return this.length;
        }, Yallist.prototype.pop = function() {
          if (this.tail) {
            var res = this.tail.value;
            return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, res;
          }
        }, Yallist.prototype.shift = function() {
          if (this.head) {
            var res = this.head.value;
            return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, res;
          }
        }, Yallist.prototype.forEach = function(fn, thisp) {
          thisp = thisp || this;
          for (var walker = this.head, i = 0; null !== walker; i++)
            fn.call(thisp, walker.value, i, this), walker = walker.next;
        }, Yallist.prototype.forEachReverse = function(fn, thisp) {
          thisp = thisp || this;
          for (var walker = this.tail, i = this.length - 1; null !== walker; i--)
            fn.call(thisp, walker.value, i, this), walker = walker.prev;
        }, Yallist.prototype.get = function(n) {
          for (var i = 0, walker = this.head; null !== walker && i < n; i++)
            walker = walker.next;
          if (i === n && null !== walker)
            return walker.value;
        }, Yallist.prototype.getReverse = function(n) {
          for (var i = 0, walker = this.tail; null !== walker && i < n; i++)
            walker = walker.prev;
          if (i === n && null !== walker)
            return walker.value;
        }, Yallist.prototype.map = function(fn, thisp) {
          thisp = thisp || this;
          for (var res = new Yallist(), walker = this.head; null !== walker; )
            res.push(fn.call(thisp, walker.value, this)), walker = walker.next;
          return res;
        }, Yallist.prototype.mapReverse = function(fn, thisp) {
          thisp = thisp || this;
          for (var res = new Yallist(), walker = this.tail; null !== walker; )
            res.push(fn.call(thisp, walker.value, this)), walker = walker.prev;
          return res;
        }, Yallist.prototype.reduce = function(fn, initial) {
          var acc, walker = this.head;
          if (arguments.length > 1)
            acc = initial;
          else {
            if (!this.head)
              throw new TypeError("Reduce of empty list with no initial value");
            walker = this.head.next, acc = this.head.value;
          }
          for (var i = 0; null !== walker; i++)
            acc = fn(acc, walker.value, i), walker = walker.next;
          return acc;
        }, Yallist.prototype.reduceReverse = function(fn, initial) {
          var acc, walker = this.tail;
          if (arguments.length > 1)
            acc = initial;
          else {
            if (!this.tail)
              throw new TypeError("Reduce of empty list with no initial value");
            walker = this.tail.prev, acc = this.tail.value;
          }
          for (var i = this.length - 1; null !== walker; i--)
            acc = fn(acc, walker.value, i), walker = walker.prev;
          return acc;
        }, Yallist.prototype.toArray = function() {
          for (var arr = new Array(this.length), i = 0, walker = this.head; null !== walker; i++)
            arr[i] = walker.value, walker = walker.next;
          return arr;
        }, Yallist.prototype.toArrayReverse = function() {
          for (var arr = new Array(this.length), i = 0, walker = this.tail; null !== walker; i++)
            arr[i] = walker.value, walker = walker.prev;
          return arr;
        }, Yallist.prototype.slice = function(from, to) {
          (to = to || this.length) < 0 && (to += this.length), (from = from || 0) < 0 && (from += this.length);
          var ret = new Yallist();
          if (to < from || to < 0)
            return ret;
          from < 0 && (from = 0), to > this.length && (to = this.length);
          for (var i = 0, walker = this.head; null !== walker && i < from; i++)
            walker = walker.next;
          for (; null !== walker && i < to; i++, walker = walker.next)
            ret.push(walker.value);
          return ret;
        }, Yallist.prototype.sliceReverse = function(from, to) {
          (to = to || this.length) < 0 && (to += this.length), (from = from || 0) < 0 && (from += this.length);
          var ret = new Yallist();
          if (to < from || to < 0)
            return ret;
          from < 0 && (from = 0), to > this.length && (to = this.length);
          for (var i = this.length, walker = this.tail; null !== walker && i > to; i--)
            walker = walker.prev;
          for (; null !== walker && i > from; i--, walker = walker.prev)
            ret.push(walker.value);
          return ret;
        }, Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
          start > this.length && (start = this.length - 1), start < 0 && (start = this.length + start);
          for (var i = 0, walker = this.head; null !== walker && i < start; i++)
            walker = walker.next;
          var ret = [];
          for (i = 0; walker && i < deleteCount; i++)
            ret.push(walker.value), walker = this.removeNode(walker);
          null === walker && (walker = this.tail), walker !== this.head && walker !== this.tail && (walker = walker.prev);
          for (i = 0; i < nodes.length; i++)
            walker = insert(this, walker, nodes[i]);
          return ret;
        }, Yallist.prototype.reverse = function() {
          for (var head = this.head, tail = this.tail, walker = head; null !== walker; walker = walker.prev) {
            var p = walker.prev;
            walker.prev = walker.next, walker.next = p;
          }
          return this.head = tail, this.tail = head, this;
        };
        try {
          __webpack_require__2("./node_modules/.pnpm/yallist@4.0.0/node_modules/yallist/iterator.js")(Yallist);
        } catch (er) {
        }
      }, crypto: (module2) => {
        "use strict";
        module2.exports = _chunkI7OK7DX6cjs.__require.call(void 0, "crypto");
      }, fs: (module2) => {
        "use strict";
        module2.exports = _chunkI7OK7DX6cjs.__require.call(void 0, "fs");
      }, module: (module2) => {
        "use strict";
        module2.exports = _chunkI7OK7DX6cjs.__require.call(void 0, "module");
      }, path: (module2) => {
        "use strict";
        module2.exports = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
      }, util: (module2) => {
        "use strict";
        module2.exports = _chunkI7OK7DX6cjs.__require.call(void 0, "util");
      } }, __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (void 0 !== cachedModule)
          return cachedModule.exports;
        var module2 = __webpack_module_cache__[moduleId] = { id: moduleId, loaded: false, exports: {} };
        return __webpack_modules__[moduleId](module2, module2.exports, __webpack_require__), module2.loaded = true, module2.exports;
      }
      __webpack_require__.n = (module2) => {
        var getter = module2 && module2.__esModule ? () => module2.default : () => module2;
        return __webpack_require__.d(getter, { a: getter }), getter;
      }, __webpack_require__.d = (exports2, definition) => {
        for (var key in definition)
          __webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key) && Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
      }, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop), __webpack_require__.nmd = (module2) => (module2.paths = [], module2.children || (module2.children = []), module2);
      var __webpack_exports__ = {};
      (() => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, { default: () => createJITI });
        var external_fs_ = __webpack_require__("fs"), external_module_ = __webpack_require__("module");
        const external_perf_hooks_namespaceObject = _chunkI7OK7DX6cjs.__require.call(void 0, "perf_hooks"), external_os_namespaceObject = _chunkI7OK7DX6cjs.__require.call(void 0, "os"), external_vm_namespaceObject = _chunkI7OK7DX6cjs.__require.call(void 0, "vm");
        var external_vm_default = __webpack_require__.n(external_vm_namespaceObject);
        const external_url_namespaceObject = _chunkI7OK7DX6cjs.__require.call(void 0, "url");
        function normalizeWindowsPath(input = "") {
          return input && input.includes("\\") ? input.replace(/\\/g, "/") : input;
        }
        const _UNC_REGEX = /^[\\/]{2}/, _IS_ABSOLUTE_RE = /^[\\/](?![\\/])|^[\\/]{2}(?!\.)|^[a-zA-Z]:[\\/]/, _DRIVE_LETTER_RE = /^[a-zA-Z]:$/, join2 = function(...args) {
          if (0 === args.length)
            return ".";
          let joined;
          for (let i2 = 0; i2 < args.length; ++i2) {
            const arg = args[i2];
            arg && arg.length > 0 && (void 0 === joined ? joined = arg : joined += `/${arg}`);
          }
          return void 0 === joined ? "." : function(path3) {
            if (0 === path3.length)
              return ".";
            const isUNCPath = (path3 = normalizeWindowsPath(path3)).match(_UNC_REGEX), isPathAbsolute = isAbsolute2(path3), trailingSeparator = "/" === path3[path3.length - 1];
            return 0 === (path3 = normalizeString(path3, !isPathAbsolute)).length ? isPathAbsolute ? "/" : trailingSeparator ? "./" : "." : (trailingSeparator && (path3 += "/"), _DRIVE_LETTER_RE.test(path3) && (path3 += "/"), isUNCPath ? isPathAbsolute ? `//${path3}` : `//./${path3}` : isPathAbsolute && !isAbsolute2(path3) ? `/${path3}` : path3);
          }(joined.replace(/\/\/+/g, "/"));
        };
        function normalizeString(path3, allowAboveRoot) {
          let res = "", lastSegmentLength = 0, lastSlash = -1, dots = 0, char = null;
          for (let i2 = 0; i2 <= path3.length; ++i2) {
            if (i2 < path3.length)
              char = path3[i2];
            else {
              if ("/" === char)
                break;
              char = "/";
            }
            if ("/" === char) {
              if (lastSlash === i2 - 1 || 1 === dots)
                ;
              else if (2 === dots) {
                if (res.length < 2 || 2 !== lastSegmentLength || "." !== res[res.length - 1] || "." !== res[res.length - 2]) {
                  if (res.length > 2) {
                    const lastSlashIndex = res.lastIndexOf("/");
                    -1 === lastSlashIndex ? (res = "", lastSegmentLength = 0) : (res = res.slice(0, lastSlashIndex), lastSegmentLength = res.length - 1 - res.lastIndexOf("/")), lastSlash = i2, dots = 0;
                    continue;
                  }
                  if (0 !== res.length) {
                    res = "", lastSegmentLength = 0, lastSlash = i2, dots = 0;
                    continue;
                  }
                }
                allowAboveRoot && (res += res.length > 0 ? "/.." : "..", lastSegmentLength = 2);
              } else
                res.length > 0 ? res += `/${path3.slice(lastSlash + 1, i2)}` : res = path3.slice(lastSlash + 1, i2), lastSegmentLength = i2 - lastSlash - 1;
              lastSlash = i2, dots = 0;
            } else
              "." === char && -1 !== dots ? ++dots : dots = -1;
          }
          return res;
        }
        const isAbsolute2 = function(p) {
          return _IS_ABSOLUTE_RE.test(p);
        }, _EXTNAME_RE = /.(\.[^/.]+)$/, pathe_f81973bb_extname = function(p) {
          const match = _EXTNAME_RE.exec(normalizeWindowsPath(p));
          return match && match[1] || "";
        }, pathe_f81973bb_dirname = function(p) {
          const segments = normalizeWindowsPath(p).replace(/\/$/, "").split("/").slice(0, -1);
          return 1 === segments.length && _DRIVE_LETTER_RE.test(segments[0]) && (segments[0] += "/"), segments.join("/") || (isAbsolute2(p) ? "/" : ".");
        }, basename2 = function(p, ext) {
          const lastSegment = normalizeWindowsPath(p).split("/").pop();
          return ext && lastSegment.endsWith(ext) ? lastSegment.slice(0, -ext.length) : lastSegment;
        };
        var mkdirp = __webpack_require__("./node_modules/.pnpm/mkdirp@1.0.4/node_modules/mkdirp/index.js");
        const suspectProtoRx = /"(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])"\s*:/, suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/, JsonSigRx = /^["{[]|^-?[0-9][0-9.]{0,14}$/;
        function jsonParseTransform(key, value) {
          if ("__proto__" !== key && "constructor" !== key)
            return value;
        }
        function destr(val) {
          if ("string" != typeof val)
            return val;
          const _lval = val.toLowerCase();
          if ("true" === _lval)
            return true;
          if ("false" === _lval)
            return false;
          if ("null" === _lval)
            return null;
          if ("nan" === _lval)
            return NaN;
          if ("infinity" === _lval)
            return 1 / 0;
          if ("undefined" !== _lval) {
            if (!JsonSigRx.test(val))
              return val;
            try {
              return suspectProtoRx.test(val) || suspectConstructorRx.test(val) ? JSON.parse(val, jsonParseTransform) : JSON.parse(val);
            } catch (_e) {
              return val;
            }
          }
        }
        function escapeStringRegexp(string) {
          if ("string" != typeof string)
            throw new TypeError("Expected a string");
          return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
        }
        var create_require = __webpack_require__("./node_modules/.pnpm/create-require@1.1.1/node_modules/create-require/create-require.js"), create_require_default = __webpack_require__.n(create_require), semver = __webpack_require__("./node_modules/.pnpm/semver@7.3.7/node_modules/semver/index.js");
        const pathSeparators = ["/", "\\", void 0], normalizedAliasSymbol = Symbol.for("pathe:normalizedAlias");
        function normalizeAliases(_aliases) {
          if (_aliases[normalizedAliasSymbol])
            return _aliases;
          const aliases = Object.fromEntries(Object.entries(_aliases).sort(([a], [b]) => function(a2, b2) {
            return b2.split("/").length - a2.split("/").length;
          }(a, b)));
          for (const key in aliases)
            for (const alias in aliases)
              alias === key || key.startsWith(alias) || aliases[key].startsWith(alias) && pathSeparators.includes(aliases[key][alias.length]) && (aliases[key] = aliases[alias] + aliases[key].slice(alias.length));
          return Object.defineProperty(aliases, normalizedAliasSymbol, { value: true, enumerable: false }), aliases;
        }
        var lib = __webpack_require__("./node_modules/.pnpm/pirates@4.0.5/node_modules/pirates/lib/index.js"), object_hash = __webpack_require__("./node_modules/.pnpm/object-hash@3.0.0/node_modules/object-hash/index.js"), object_hash_default = __webpack_require__.n(object_hash), astralIdentifierCodes2 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239], astralIdentifierStartCodes2 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938], nonASCIIidentifierStartChars2 = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", reservedWords2 = { 3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile", 5: "class enum extends super const export import", 6: "enum", strict: "implements interface let package private protected public static yield", strictBind: "eval arguments" }, ecma5AndLessKeywords2 = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this", keywords$12 = { 5: ecma5AndLessKeywords2, "5module": ecma5AndLessKeywords2 + " export import", 6: ecma5AndLessKeywords2 + " const class extends export import super" }, keywordRelationalOperator2 = /^in(stanceof)?$/, nonASCIIidentifierStart2 = new RegExp("[" + nonASCIIidentifierStartChars2 + "]"), nonASCIIidentifier2 = new RegExp("[" + nonASCIIidentifierStartChars2 + "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F]");
        function isInAstralSet2(code, set) {
          for (var pos = 65536, i2 = 0; i2 < set.length; i2 += 2) {
            if ((pos += set[i2]) > code)
              return false;
            if ((pos += set[i2 + 1]) >= code)
              return true;
          }
        }
        function isIdentifierStart2(code, astral) {
          return code < 65 ? 36 === code : code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart2.test(String.fromCharCode(code)) : false !== astral && isInAstralSet2(code, astralIdentifierStartCodes2)));
        }
        function isIdentifierChar2(code, astral) {
          return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code < 91 || (code < 97 ? 95 === code : code < 123 || (code <= 65535 ? code >= 170 && nonASCIIidentifier2.test(String.fromCharCode(code)) : false !== astral && (isInAstralSet2(code, astralIdentifierStartCodes2) || isInAstralSet2(code, astralIdentifierCodes2)))));
        }
        var TokenType3 = function(label, conf) {
          void 0 === conf && (conf = {}), this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = conf.binop || null, this.updateContext = null;
        };
        function binop2(name, prec) {
          return new TokenType3(name, { beforeExpr: true, binop: prec });
        }
        var beforeExpr2 = { beforeExpr: true }, startsExpr2 = { startsExpr: true }, keywords2 = {};
        function kw2(name, options) {
          return void 0 === options && (options = {}), options.keyword = name, keywords2[name] = new TokenType3(name, options);
        }
        var types$12 = { num: new TokenType3("num", startsExpr2), regexp: new TokenType3("regexp", startsExpr2), string: new TokenType3("string", startsExpr2), name: new TokenType3("name", startsExpr2), privateId: new TokenType3("privateId", startsExpr2), eof: new TokenType3("eof"), bracketL: new TokenType3("[", { beforeExpr: true, startsExpr: true }), bracketR: new TokenType3("]"), braceL: new TokenType3("{", { beforeExpr: true, startsExpr: true }), braceR: new TokenType3("}"), parenL: new TokenType3("(", { beforeExpr: true, startsExpr: true }), parenR: new TokenType3(")"), comma: new TokenType3(",", beforeExpr2), semi: new TokenType3(";", beforeExpr2), colon: new TokenType3(":", beforeExpr2), dot: new TokenType3("."), question: new TokenType3("?", beforeExpr2), questionDot: new TokenType3("?."), arrow: new TokenType3("=>", beforeExpr2), template: new TokenType3("template"), invalidTemplate: new TokenType3("invalidTemplate"), ellipsis: new TokenType3("...", beforeExpr2), backQuote: new TokenType3("`", startsExpr2), dollarBraceL: new TokenType3("${", { beforeExpr: true, startsExpr: true }), eq: new TokenType3("=", { beforeExpr: true, isAssign: true }), assign: new TokenType3("_=", { beforeExpr: true, isAssign: true }), incDec: new TokenType3("++/--", { prefix: true, postfix: true, startsExpr: true }), prefix: new TokenType3("!/~", { beforeExpr: true, prefix: true, startsExpr: true }), logicalOR: binop2("||", 1), logicalAND: binop2("&&", 2), bitwiseOR: binop2("|", 3), bitwiseXOR: binop2("^", 4), bitwiseAND: binop2("&", 5), equality: binop2("==/!=/===/!==", 6), relational: binop2("</>/<=/>=", 7), bitShift: binop2("<</>>/>>>", 8), plusMin: new TokenType3("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: binop2("%", 10), star: binop2("*", 10), slash: binop2("/", 10), starstar: new TokenType3("**", { beforeExpr: true }), coalesce: binop2("??", 1), _break: kw2("break"), _case: kw2("case", beforeExpr2), _catch: kw2("catch"), _continue: kw2("continue"), _debugger: kw2("debugger"), _default: kw2("default", beforeExpr2), _do: kw2("do", { isLoop: true, beforeExpr: true }), _else: kw2("else", beforeExpr2), _finally: kw2("finally"), _for: kw2("for", { isLoop: true }), _function: kw2("function", startsExpr2), _if: kw2("if"), _return: kw2("return", beforeExpr2), _switch: kw2("switch"), _throw: kw2("throw", beforeExpr2), _try: kw2("try"), _var: kw2("var"), _const: kw2("const"), _while: kw2("while", { isLoop: true }), _with: kw2("with"), _new: kw2("new", { beforeExpr: true, startsExpr: true }), _this: kw2("this", startsExpr2), _super: kw2("super", startsExpr2), _class: kw2("class", startsExpr2), _extends: kw2("extends", beforeExpr2), _export: kw2("export"), _import: kw2("import", startsExpr2), _null: kw2("null", startsExpr2), _true: kw2("true", startsExpr2), _false: kw2("false", startsExpr2), _in: kw2("in", { beforeExpr: true, binop: 7 }), _instanceof: kw2("instanceof", { beforeExpr: true, binop: 7 }), _typeof: kw2("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: kw2("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: kw2("delete", { beforeExpr: true, prefix: true, startsExpr: true }) }, lineBreak2 = /\r\n?|\n|\u2028|\u2029/, lineBreakG2 = new RegExp(lineBreak2.source, "g");
        function isNewLine2(code) {
          return 10 === code || 13 === code || 8232 === code || 8233 === code;
        }
        function nextLineBreak2(code, from, end) {
          void 0 === end && (end = code.length);
          for (var i2 = from; i2 < end; i2++) {
            var next = code.charCodeAt(i2);
            if (isNewLine2(next))
              return i2 < end - 1 && 13 === next && 10 === code.charCodeAt(i2 + 1) ? i2 + 2 : i2 + 1;
          }
          return -1;
        }
        var nonASCIIwhitespace2 = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/, skipWhiteSpace2 = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, ref2 = Object.prototype, acorn_hasOwnProperty = ref2.hasOwnProperty, acorn_toString = ref2.toString, hasOwn2 = Object.hasOwn || function(obj, propName) {
          return acorn_hasOwnProperty.call(obj, propName);
        }, isArray2 = Array.isArray || function(obj) {
          return "[object Array]" === acorn_toString.call(obj);
        };
        function wordsRegexp2(words) {
          return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
        }
        function codePointToString2(code) {
          return code <= 65535 ? String.fromCharCode(code) : (code -= 65536, String.fromCharCode(55296 + (code >> 10), 56320 + (1023 & code)));
        }
        var loneSurrogate2 = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/, Position3 = function(line, col) {
          this.line = line, this.column = col;
        };
        Position3.prototype.offset = function(n) {
          return new Position3(this.line, this.column + n);
        };
        var SourceLocation3 = function(p, start, end) {
          this.start = start, this.end = end, null !== p.sourceFile && (this.source = p.sourceFile);
        };
        function getLineInfo2(input, offset2) {
          for (var line = 1, cur = 0; ; ) {
            var nextBreak = nextLineBreak2(input, cur, offset2);
            if (nextBreak < 0)
              return new Position3(line, offset2 - cur);
            ++line, cur = nextBreak;
          }
        }
        var defaultOptions2 = { ecmaVersion: null, sourceType: "script", onInsertedSemicolon: null, onTrailingComma: null, allowReserved: null, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowAwaitOutsideFunction: null, allowSuperOutsideMethod: null, allowHashBang: false, locations: false, onToken: null, onComment: null, ranges: false, program: null, sourceFile: null, directSourceFile: null, preserveParens: false }, warnedAboutEcmaVersion2 = false;
        function getOptions2(opts) {
          var options = {};
          for (var opt in defaultOptions2)
            options[opt] = opts && hasOwn2(opts, opt) ? opts[opt] : defaultOptions2[opt];
          if ("latest" === options.ecmaVersion ? options.ecmaVersion = 1e8 : null == options.ecmaVersion ? (!warnedAboutEcmaVersion2 && "object" == typeof console && console.warn && (warnedAboutEcmaVersion2 = true, console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.")), options.ecmaVersion = 11) : options.ecmaVersion >= 2015 && (options.ecmaVersion -= 2009), null == options.allowReserved && (options.allowReserved = options.ecmaVersion < 5), null == opts.allowHashBang && (options.allowHashBang = options.ecmaVersion >= 14), isArray2(options.onToken)) {
            var tokens = options.onToken;
            options.onToken = function(token) {
              return tokens.push(token);
            };
          }
          return isArray2(options.onComment) && (options.onComment = function(options2, array) {
            return function(block, text, start, end, startLoc, endLoc) {
              var comment = { type: block ? "Block" : "Line", value: text, start, end };
              options2.locations && (comment.loc = new SourceLocation3(this, startLoc, endLoc)), options2.ranges && (comment.range = [start, end]), array.push(comment);
            };
          }(options, options.onComment)), options;
        }
        function functionFlags2(async, generator) {
          return 2 | (async ? 4 : 0) | (generator ? 8 : 0);
        }
        var Parser3 = function(options, input, startPos) {
          this.options = options = getOptions2(options), this.sourceFile = options.sourceFile, this.keywords = wordsRegexp2(keywords$12[options.ecmaVersion >= 6 ? 6 : "module" === options.sourceType ? "5module" : 5]);
          var reserved = "";
          true !== options.allowReserved && (reserved = reservedWords2[options.ecmaVersion >= 6 ? 6 : 5 === options.ecmaVersion ? 5 : 3], "module" === options.sourceType && (reserved += " await")), this.reservedWords = wordsRegexp2(reserved);
          var reservedStrict = (reserved ? reserved + " " : "") + reservedWords2.strict;
          this.reservedWordsStrict = wordsRegexp2(reservedStrict), this.reservedWordsStrictBind = wordsRegexp2(reservedStrict + " " + reservedWords2.strictBind), this.input = String(input), this.containsEsc = false, startPos ? (this.pos = startPos, this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1, this.curLine = this.input.slice(0, this.lineStart).split(lineBreak2).length) : (this.pos = this.lineStart = 0, this.curLine = 1), this.type = types$12.eof, this.value = null, this.start = this.end = this.pos, this.startLoc = this.endLoc = this.curPosition(), this.lastTokEndLoc = this.lastTokStartLoc = null, this.lastTokStart = this.lastTokEnd = this.pos, this.context = this.initialContext(), this.exprAllowed = true, this.inModule = "module" === options.sourceType, this.strict = this.inModule || this.strictDirective(this.pos), this.potentialArrowAt = -1, this.potentialArrowInForAwait = false, this.yieldPos = this.awaitPos = this.awaitIdentPos = 0, this.labels = [], this.undefinedExports = /* @__PURE__ */ Object.create(null), 0 === this.pos && options.allowHashBang && "#!" === this.input.slice(0, 2) && this.skipLineComment(2), this.scopeStack = [], this.enterScope(1), this.regexpState = null, this.privateNameStack = [];
        }, prototypeAccessors2 = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
        Parser3.prototype.parse = function() {
          var node = this.options.program || this.startNode();
          return this.nextToken(), this.parseTopLevel(node);
        }, prototypeAccessors2.inFunction.get = function() {
          return (2 & this.currentVarScope().flags) > 0;
        }, prototypeAccessors2.inGenerator.get = function() {
          return (8 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
        }, prototypeAccessors2.inAsync.get = function() {
          return (4 & this.currentVarScope().flags) > 0 && !this.currentVarScope().inClassFieldInit;
        }, prototypeAccessors2.canAwait.get = function() {
          for (var i2 = this.scopeStack.length - 1; i2 >= 0; i2--) {
            var scope = this.scopeStack[i2];
            if (scope.inClassFieldInit || 256 & scope.flags)
              return false;
            if (2 & scope.flags)
              return (4 & scope.flags) > 0;
          }
          return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
        }, prototypeAccessors2.allowSuper.get = function() {
          var ref3 = this.currentThisScope(), flags = ref3.flags, inClassFieldInit = ref3.inClassFieldInit;
          return (64 & flags) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
        }, prototypeAccessors2.allowDirectSuper.get = function() {
          return (128 & this.currentThisScope().flags) > 0;
        }, prototypeAccessors2.treatFunctionsAsVar.get = function() {
          return this.treatFunctionsAsVarInScope(this.currentScope());
        }, prototypeAccessors2.allowNewDotTarget.get = function() {
          var ref3 = this.currentThisScope(), flags = ref3.flags, inClassFieldInit = ref3.inClassFieldInit;
          return (258 & flags) > 0 || inClassFieldInit;
        }, prototypeAccessors2.inClassStaticBlock.get = function() {
          return (256 & this.currentVarScope().flags) > 0;
        }, Parser3.extend = function() {
          for (var plugins = [], len = arguments.length; len--; )
            plugins[len] = arguments[len];
          for (var cls = this, i2 = 0; i2 < plugins.length; i2++)
            cls = plugins[i2](cls);
          return cls;
        }, Parser3.parse = function(input, options) {
          return new this(options, input).parse();
        }, Parser3.parseExpressionAt = function(input, pos, options) {
          var parser = new this(options, input, pos);
          return parser.nextToken(), parser.parseExpression();
        }, Parser3.tokenizer = function(input, options) {
          return new this(options, input);
        }, Object.defineProperties(Parser3.prototype, prototypeAccessors2);
        var pp$92 = Parser3.prototype, literal2 = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
        pp$92.strictDirective = function(start) {
          if (this.options.ecmaVersion < 5)
            return false;
          for (; ; ) {
            skipWhiteSpace2.lastIndex = start, start += skipWhiteSpace2.exec(this.input)[0].length;
            var match = literal2.exec(this.input.slice(start));
            if (!match)
              return false;
            if ("use strict" === (match[1] || match[2])) {
              skipWhiteSpace2.lastIndex = start + match[0].length;
              var spaceAfter = skipWhiteSpace2.exec(this.input), end = spaceAfter.index + spaceAfter[0].length, next = this.input.charAt(end);
              return ";" === next || "}" === next || lineBreak2.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || "!" === next && "=" === this.input.charAt(end + 1));
            }
            start += match[0].length, skipWhiteSpace2.lastIndex = start, start += skipWhiteSpace2.exec(this.input)[0].length, ";" === this.input[start] && start++;
          }
        }, pp$92.eat = function(type) {
          return this.type === type && (this.next(), true);
        }, pp$92.isContextual = function(name) {
          return this.type === types$12.name && this.value === name && !this.containsEsc;
        }, pp$92.eatContextual = function(name) {
          return !!this.isContextual(name) && (this.next(), true);
        }, pp$92.expectContextual = function(name) {
          this.eatContextual(name) || this.unexpected();
        }, pp$92.canInsertSemicolon = function() {
          return this.type === types$12.eof || this.type === types$12.braceR || lineBreak2.test(this.input.slice(this.lastTokEnd, this.start));
        }, pp$92.insertSemicolon = function() {
          if (this.canInsertSemicolon())
            return this.options.onInsertedSemicolon && this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc), true;
        }, pp$92.semicolon = function() {
          this.eat(types$12.semi) || this.insertSemicolon() || this.unexpected();
        }, pp$92.afterTrailingComma = function(tokType, notNext) {
          if (this.type === tokType)
            return this.options.onTrailingComma && this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc), notNext || this.next(), true;
        }, pp$92.expect = function(type) {
          this.eat(type) || this.unexpected();
        }, pp$92.unexpected = function(pos) {
          this.raise(null != pos ? pos : this.start, "Unexpected token");
        };
        var DestructuringErrors3 = function() {
          this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
        };
        pp$92.checkPatternErrors = function(refDestructuringErrors, isAssign) {
          if (refDestructuringErrors) {
            refDestructuringErrors.trailingComma > -1 && this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
            var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
            parens > -1 && this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
          }
        }, pp$92.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
          if (!refDestructuringErrors)
            return false;
          var shorthandAssign = refDestructuringErrors.shorthandAssign, doubleProto = refDestructuringErrors.doubleProto;
          if (!andThrow)
            return shorthandAssign >= 0 || doubleProto >= 0;
          shorthandAssign >= 0 && this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns"), doubleProto >= 0 && this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
        }, pp$92.checkYieldAwaitInDefaultParams = function() {
          this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos) && this.raise(this.yieldPos, "Yield expression cannot be a default value"), this.awaitPos && this.raise(this.awaitPos, "Await expression cannot be a default value");
        }, pp$92.isSimpleAssignTarget = function(expr) {
          return "ParenthesizedExpression" === expr.type ? this.isSimpleAssignTarget(expr.expression) : "Identifier" === expr.type || "MemberExpression" === expr.type;
        };
        var pp$82 = Parser3.prototype;
        pp$82.parseTopLevel = function(node) {
          var exports2 = /* @__PURE__ */ Object.create(null);
          for (node.body || (node.body = []); this.type !== types$12.eof; ) {
            var stmt = this.parseStatement(null, true, exports2);
            node.body.push(stmt);
          }
          if (this.inModule)
            for (var i2 = 0, list2 = Object.keys(this.undefinedExports); i2 < list2.length; i2 += 1) {
              var name = list2[i2];
              this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
            }
          return this.adaptDirectivePrologue(node.body), this.next(), node.sourceType = this.options.sourceType, this.finishNode(node, "Program");
        };
        var loopLabel2 = { kind: "loop" }, switchLabel2 = { kind: "switch" };
        pp$82.isLet = function(context) {
          if (this.options.ecmaVersion < 6 || !this.isContextual("let"))
            return false;
          skipWhiteSpace2.lastIndex = this.pos;
          var skip = skipWhiteSpace2.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
          if (91 === nextCh || 92 === nextCh || nextCh > 55295 && nextCh < 56320)
            return true;
          if (context)
            return false;
          if (123 === nextCh)
            return true;
          if (isIdentifierStart2(nextCh, true)) {
            for (var pos = next + 1; isIdentifierChar2(nextCh = this.input.charCodeAt(pos), true); )
              ++pos;
            if (92 === nextCh || nextCh > 55295 && nextCh < 56320)
              return true;
            var ident = this.input.slice(next, pos);
            if (!keywordRelationalOperator2.test(ident))
              return true;
          }
          return false;
        }, pp$82.isAsyncFunction = function() {
          if (this.options.ecmaVersion < 8 || !this.isContextual("async"))
            return false;
          skipWhiteSpace2.lastIndex = this.pos;
          var after, skip = skipWhiteSpace2.exec(this.input), next = this.pos + skip[0].length;
          return !(lineBreak2.test(this.input.slice(this.pos, next)) || "function" !== this.input.slice(next, next + 8) || next + 8 !== this.input.length && (isIdentifierChar2(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
        }, pp$82.parseStatement = function(context, topLevel, exports2) {
          var kind, starttype = this.type, node = this.startNode();
          switch (this.isLet(context) && (starttype = types$12._var, kind = "let"), starttype) {
            case types$12._break:
            case types$12._continue:
              return this.parseBreakContinueStatement(node, starttype.keyword);
            case types$12._debugger:
              return this.parseDebuggerStatement(node);
            case types$12._do:
              return this.parseDoStatement(node);
            case types$12._for:
              return this.parseForStatement(node);
            case types$12._function:
              return context && (this.strict || "if" !== context && "label" !== context) && this.options.ecmaVersion >= 6 && this.unexpected(), this.parseFunctionStatement(node, false, !context);
            case types$12._class:
              return context && this.unexpected(), this.parseClass(node, true);
            case types$12._if:
              return this.parseIfStatement(node);
            case types$12._return:
              return this.parseReturnStatement(node);
            case types$12._switch:
              return this.parseSwitchStatement(node);
            case types$12._throw:
              return this.parseThrowStatement(node);
            case types$12._try:
              return this.parseTryStatement(node);
            case types$12._const:
            case types$12._var:
              return kind = kind || this.value, context && "var" !== kind && this.unexpected(), this.parseVarStatement(node, kind);
            case types$12._while:
              return this.parseWhileStatement(node);
            case types$12._with:
              return this.parseWithStatement(node);
            case types$12.braceL:
              return this.parseBlock(true, node);
            case types$12.semi:
              return this.parseEmptyStatement(node);
            case types$12._export:
            case types$12._import:
              if (this.options.ecmaVersion > 10 && starttype === types$12._import) {
                skipWhiteSpace2.lastIndex = this.pos;
                var skip = skipWhiteSpace2.exec(this.input), next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
                if (40 === nextCh || 46 === nextCh)
                  return this.parseExpressionStatement(node, this.parseExpression());
              }
              return this.options.allowImportExportEverywhere || (topLevel || this.raise(this.start, "'import' and 'export' may only appear at the top level"), this.inModule || this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'")), starttype === types$12._import ? this.parseImport(node) : this.parseExport(node, exports2);
            default:
              if (this.isAsyncFunction())
                return context && this.unexpected(), this.next(), this.parseFunctionStatement(node, true, !context);
              var maybeName = this.value, expr = this.parseExpression();
              return starttype === types$12.name && "Identifier" === expr.type && this.eat(types$12.colon) ? this.parseLabeledStatement(node, maybeName, expr, context) : this.parseExpressionStatement(node, expr);
          }
        }, pp$82.parseBreakContinueStatement = function(node, keyword) {
          var isBreak = "break" === keyword;
          this.next(), this.eat(types$12.semi) || this.insertSemicolon() ? node.label = null : this.type !== types$12.name ? this.unexpected() : (node.label = this.parseIdent(), this.semicolon());
          for (var i2 = 0; i2 < this.labels.length; ++i2) {
            var lab = this.labels[i2];
            if (null == node.label || lab.name === node.label.name) {
              if (null != lab.kind && (isBreak || "loop" === lab.kind))
                break;
              if (node.label && isBreak)
                break;
            }
          }
          return i2 === this.labels.length && this.raise(node.start, "Unsyntactic " + keyword), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
        }, pp$82.parseDebuggerStatement = function(node) {
          return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
        }, pp$82.parseDoStatement = function(node) {
          return this.next(), this.labels.push(loopLabel2), node.body = this.parseStatement("do"), this.labels.pop(), this.expect(types$12._while), node.test = this.parseParenExpression(), this.options.ecmaVersion >= 6 ? this.eat(types$12.semi) : this.semicolon(), this.finishNode(node, "DoWhileStatement");
        }, pp$82.parseForStatement = function(node) {
          this.next();
          var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
          if (this.labels.push(loopLabel2), this.enterScope(0), this.expect(types$12.parenL), this.type === types$12.semi)
            return awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, null);
          var isLet = this.isLet();
          if (this.type === types$12._var || this.type === types$12._const || isLet) {
            var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
            return this.next(), this.parseVar(init$1, true, kind), this.finishNode(init$1, "VariableDeclaration"), (this.type === types$12._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && 1 === init$1.declarations.length ? (this.options.ecmaVersion >= 9 && (this.type === types$12._in ? awaitAt > -1 && this.unexpected(awaitAt) : node.await = awaitAt > -1), this.parseForIn(node, init$1)) : (awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init$1));
          }
          var startsWithLet = this.isContextual("let"), isForOf = false, refDestructuringErrors = new DestructuringErrors3(), init = this.parseExpression(!(awaitAt > -1) || "await", refDestructuringErrors);
          return this.type === types$12._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of")) ? (this.options.ecmaVersion >= 9 && (this.type === types$12._in ? awaitAt > -1 && this.unexpected(awaitAt) : node.await = awaitAt > -1), startsWithLet && isForOf && this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'."), this.toAssignable(init, false, refDestructuringErrors), this.checkLValPattern(init), this.parseForIn(node, init)) : (this.checkExpressionErrors(refDestructuringErrors, true), awaitAt > -1 && this.unexpected(awaitAt), this.parseFor(node, init));
        }, pp$82.parseFunctionStatement = function(node, isAsync, declarationPosition) {
          return this.next(), this.parseFunction(node, FUNC_STATEMENT2 | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT2), false, isAsync);
        }, pp$82.parseIfStatement = function(node) {
          return this.next(), node.test = this.parseParenExpression(), node.consequent = this.parseStatement("if"), node.alternate = this.eat(types$12._else) ? this.parseStatement("if") : null, this.finishNode(node, "IfStatement");
        }, pp$82.parseReturnStatement = function(node) {
          return this.inFunction || this.options.allowReturnOutsideFunction || this.raise(this.start, "'return' outside of function"), this.next(), this.eat(types$12.semi) || this.insertSemicolon() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
        }, pp$82.parseSwitchStatement = function(node) {
          var cur;
          this.next(), node.discriminant = this.parseParenExpression(), node.cases = [], this.expect(types$12.braceL), this.labels.push(switchLabel2), this.enterScope(0);
          for (var sawDefault = false; this.type !== types$12.braceR; )
            if (this.type === types$12._case || this.type === types$12._default) {
              var isCase = this.type === types$12._case;
              cur && this.finishNode(cur, "SwitchCase"), node.cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raiseRecoverable(this.lastTokStart, "Multiple default clauses"), sawDefault = true, cur.test = null), this.expect(types$12.colon);
            } else
              cur || this.unexpected(), cur.consequent.push(this.parseStatement(null));
          return this.exitScope(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.labels.pop(), this.finishNode(node, "SwitchStatement");
        }, pp$82.parseThrowStatement = function(node) {
          return this.next(), lineBreak2.test(this.input.slice(this.lastTokEnd, this.start)) && this.raise(this.lastTokEnd, "Illegal newline after throw"), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
        };
        var empty$12 = [];
        pp$82.parseTryStatement = function(node) {
          if (this.next(), node.block = this.parseBlock(), node.handler = null, this.type === types$12._catch) {
            var clause = this.startNode();
            if (this.next(), this.eat(types$12.parenL)) {
              clause.param = this.parseBindingAtom();
              var simple = "Identifier" === clause.param.type;
              this.enterScope(simple ? 32 : 0), this.checkLValPattern(clause.param, simple ? 4 : 2), this.expect(types$12.parenR);
            } else
              this.options.ecmaVersion < 10 && this.unexpected(), clause.param = null, this.enterScope(0);
            clause.body = this.parseBlock(false), this.exitScope(), node.handler = this.finishNode(clause, "CatchClause");
          }
          return node.finalizer = this.eat(types$12._finally) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(node.start, "Missing catch or finally clause"), this.finishNode(node, "TryStatement");
        }, pp$82.parseVarStatement = function(node, kind) {
          return this.next(), this.parseVar(node, false, kind), this.semicolon(), this.finishNode(node, "VariableDeclaration");
        }, pp$82.parseWhileStatement = function(node) {
          return this.next(), node.test = this.parseParenExpression(), this.labels.push(loopLabel2), node.body = this.parseStatement("while"), this.labels.pop(), this.finishNode(node, "WhileStatement");
        }, pp$82.parseWithStatement = function(node) {
          return this.strict && this.raise(this.start, "'with' in strict mode"), this.next(), node.object = this.parseParenExpression(), node.body = this.parseStatement("with"), this.finishNode(node, "WithStatement");
        }, pp$82.parseEmptyStatement = function(node) {
          return this.next(), this.finishNode(node, "EmptyStatement");
        }, pp$82.parseLabeledStatement = function(node, maybeName, expr, context) {
          for (var i$1 = 0, list2 = this.labels; i$1 < list2.length; i$1 += 1) {
            list2[i$1].name === maybeName && this.raise(expr.start, "Label '" + maybeName + "' is already declared");
          }
          for (var kind = this.type.isLoop ? "loop" : this.type === types$12._switch ? "switch" : null, i2 = this.labels.length - 1; i2 >= 0; i2--) {
            var label$1 = this.labels[i2];
            if (label$1.statementStart !== node.start)
              break;
            label$1.statementStart = this.start, label$1.kind = kind;
          }
          return this.labels.push({ name: maybeName, kind, statementStart: this.start }), node.body = this.parseStatement(context ? -1 === context.indexOf("label") ? context + "label" : context : "label"), this.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
        }, pp$82.parseExpressionStatement = function(node, expr) {
          return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
        }, pp$82.parseBlock = function(createNewLexicalScope, node, exitStrict) {
          for (void 0 === createNewLexicalScope && (createNewLexicalScope = true), void 0 === node && (node = this.startNode()), node.body = [], this.expect(types$12.braceL), createNewLexicalScope && this.enterScope(0); this.type !== types$12.braceR; ) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }
          return exitStrict && (this.strict = false), this.next(), createNewLexicalScope && this.exitScope(), this.finishNode(node, "BlockStatement");
        }, pp$82.parseFor = function(node, init) {
          return node.init = init, this.expect(types$12.semi), node.test = this.type === types$12.semi ? null : this.parseExpression(), this.expect(types$12.semi), node.update = this.type === types$12.parenR ? null : this.parseExpression(), this.expect(types$12.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, "ForStatement");
        }, pp$82.parseForIn = function(node, init) {
          var isForIn = this.type === types$12._in;
          return this.next(), "VariableDeclaration" === init.type && null != init.declarations[0].init && (!isForIn || this.options.ecmaVersion < 8 || this.strict || "var" !== init.kind || "Identifier" !== init.declarations[0].id.type) && this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign(), this.expect(types$12.parenR), node.body = this.parseStatement("for"), this.exitScope(), this.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
        }, pp$82.parseVar = function(node, isFor, kind) {
          for (node.declarations = [], node.kind = kind; ; ) {
            var decl = this.startNode();
            if (this.parseVarId(decl, kind), this.eat(types$12.eq) ? decl.init = this.parseMaybeAssign(isFor) : "const" !== kind || this.type === types$12._in || this.options.ecmaVersion >= 6 && this.isContextual("of") ? "Identifier" === decl.id.type || isFor && (this.type === types$12._in || this.isContextual("of")) ? decl.init = null : this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value") : this.unexpected(), node.declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(types$12.comma))
              break;
          }
          return node;
        }, pp$82.parseVarId = function(decl, kind) {
          decl.id = this.parseBindingAtom(), this.checkLValPattern(decl.id, "var" === kind ? 1 : 2, false);
        };
        var FUNC_STATEMENT2 = 1, FUNC_HANGING_STATEMENT2 = 2;
        function isPrivateNameConflicted2(privateNameMap, element) {
          var name = element.key.name, curr = privateNameMap[name], next = "true";
          return "MethodDefinition" !== element.type || "get" !== element.kind && "set" !== element.kind || (next = (element.static ? "s" : "i") + element.kind), "iget" === curr && "iset" === next || "iset" === curr && "iget" === next || "sget" === curr && "sset" === next || "sset" === curr && "sget" === next ? (privateNameMap[name] = "true", false) : !!curr || (privateNameMap[name] = next, false);
        }
        function checkKeyName2(node, name) {
          var computed = node.computed, key = node.key;
          return !computed && ("Identifier" === key.type && key.name === name || "Literal" === key.type && key.value === name);
        }
        pp$82.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
          this.initFunction(node), (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) && (this.type === types$12.star && statement & FUNC_HANGING_STATEMENT2 && this.unexpected(), node.generator = this.eat(types$12.star)), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), statement & FUNC_STATEMENT2 && (node.id = 4 & statement && this.type !== types$12.name ? null : this.parseIdent(), !node.id || statement & FUNC_HANGING_STATEMENT2 || this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? 1 : 2 : 3));
          var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(functionFlags2(node.async, node.generator)), statement & FUNC_STATEMENT2 || (node.id = this.type === types$12.name ? this.parseIdent() : null), this.parseFunctionParams(node), this.parseFunctionBody(node, allowExpressionBody, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, statement & FUNC_STATEMENT2 ? "FunctionDeclaration" : "FunctionExpression");
        }, pp$82.parseFunctionParams = function(node) {
          this.expect(types$12.parenL), node.params = this.parseBindingList(types$12.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams();
        }, pp$82.parseClass = function(node, isStatement) {
          this.next();
          var oldStrict = this.strict;
          this.strict = true, this.parseClassId(node, isStatement), this.parseClassSuper(node);
          var privateNameMap = this.enterClassBody(), classBody = this.startNode(), hadConstructor = false;
          for (classBody.body = [], this.expect(types$12.braceL); this.type !== types$12.braceR; ) {
            var element = this.parseClassElement(null !== node.superClass);
            element && (classBody.body.push(element), "MethodDefinition" === element.type && "constructor" === element.kind ? (hadConstructor && this.raise(element.start, "Duplicate constructor in the same class"), hadConstructor = true) : element.key && "PrivateIdentifier" === element.key.type && isPrivateNameConflicted2(privateNameMap, element) && this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared"));
          }
          return this.strict = oldStrict, this.next(), node.body = this.finishNode(classBody, "ClassBody"), this.exitClassBody(), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
        }, pp$82.parseClassElement = function(constructorAllowsSuper) {
          if (this.eat(types$12.semi))
            return null;
          var ecmaVersion = this.options.ecmaVersion, node = this.startNode(), keyName = "", isGenerator = false, isAsync = false, kind = "method", isStatic = false;
          if (this.eatContextual("static")) {
            if (ecmaVersion >= 13 && this.eat(types$12.braceL))
              return this.parseClassStaticBlock(node), node;
            this.isClassElementNameStart() || this.type === types$12.star ? isStatic = true : keyName = "static";
          }
          if (node.static = isStatic, !keyName && ecmaVersion >= 8 && this.eatContextual("async") && (!this.isClassElementNameStart() && this.type !== types$12.star || this.canInsertSemicolon() ? keyName = "async" : isAsync = true), !keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$12.star) && (isGenerator = true), !keyName && !isAsync && !isGenerator) {
            var lastValue = this.value;
            (this.eatContextual("get") || this.eatContextual("set")) && (this.isClassElementNameStart() ? kind = lastValue : keyName = lastValue);
          }
          if (keyName ? (node.computed = false, node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc), node.key.name = keyName, this.finishNode(node.key, "Identifier")) : this.parseClassElementName(node), ecmaVersion < 13 || this.type === types$12.parenL || "method" !== kind || isGenerator || isAsync) {
            var isConstructor = !node.static && checkKeyName2(node, "constructor"), allowsDirectSuper = isConstructor && constructorAllowsSuper;
            isConstructor && "method" !== kind && this.raise(node.key.start, "Constructor can't have get/set modifier"), node.kind = isConstructor ? "constructor" : kind, this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
          } else
            this.parseClassField(node);
          return node;
        }, pp$82.isClassElementNameStart = function() {
          return this.type === types$12.name || this.type === types$12.privateId || this.type === types$12.num || this.type === types$12.string || this.type === types$12.bracketL || this.type.keyword;
        }, pp$82.parseClassElementName = function(element) {
          this.type === types$12.privateId ? ("constructor" === this.value && this.raise(this.start, "Classes can't have an element named '#constructor'"), element.computed = false, element.key = this.parsePrivateIdent()) : this.parsePropertyName(element);
        }, pp$82.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
          var key = method.key;
          "constructor" === method.kind ? (isGenerator && this.raise(key.start, "Constructor can't be a generator"), isAsync && this.raise(key.start, "Constructor can't be an async method")) : method.static && checkKeyName2(method, "prototype") && this.raise(key.start, "Classes may not have a static property named prototype");
          var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
          return "get" === method.kind && 0 !== value.params.length && this.raiseRecoverable(value.start, "getter should have no params"), "set" === method.kind && 1 !== value.params.length && this.raiseRecoverable(value.start, "setter should have exactly one param"), "set" === method.kind && "RestElement" === value.params[0].type && this.raiseRecoverable(value.params[0].start, "Setter cannot use rest params"), this.finishNode(method, "MethodDefinition");
        }, pp$82.parseClassField = function(field) {
          if (checkKeyName2(field, "constructor") ? this.raise(field.key.start, "Classes can't have a field named 'constructor'") : field.static && checkKeyName2(field, "prototype") && this.raise(field.key.start, "Classes can't have a static field named 'prototype'"), this.eat(types$12.eq)) {
            var scope = this.currentThisScope(), inClassFieldInit = scope.inClassFieldInit;
            scope.inClassFieldInit = true, field.value = this.parseMaybeAssign(), scope.inClassFieldInit = inClassFieldInit;
          } else
            field.value = null;
          return this.semicolon(), this.finishNode(field, "PropertyDefinition");
        }, pp$82.parseClassStaticBlock = function(node) {
          node.body = [];
          var oldLabels = this.labels;
          for (this.labels = [], this.enterScope(320); this.type !== types$12.braceR; ) {
            var stmt = this.parseStatement(null);
            node.body.push(stmt);
          }
          return this.next(), this.exitScope(), this.labels = oldLabels, this.finishNode(node, "StaticBlock");
        }, pp$82.parseClassId = function(node, isStatement) {
          this.type === types$12.name ? (node.id = this.parseIdent(), isStatement && this.checkLValSimple(node.id, 2, false)) : (true === isStatement && this.unexpected(), node.id = null);
        }, pp$82.parseClassSuper = function(node) {
          node.superClass = this.eat(types$12._extends) ? this.parseExprSubscripts(false) : null;
        }, pp$82.enterClassBody = function() {
          var element = { declared: /* @__PURE__ */ Object.create(null), used: [] };
          return this.privateNameStack.push(element), element.declared;
        }, pp$82.exitClassBody = function() {
          for (var ref3 = this.privateNameStack.pop(), declared = ref3.declared, used = ref3.used, len = this.privateNameStack.length, parent = 0 === len ? null : this.privateNameStack[len - 1], i2 = 0; i2 < used.length; ++i2) {
            var id = used[i2];
            hasOwn2(declared, id.name) || (parent ? parent.used.push(id) : this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class"));
          }
        }, pp$82.parseExport = function(node, exports2) {
          if (this.next(), this.eat(types$12.star))
            return this.options.ecmaVersion >= 11 && (this.eatContextual("as") ? (node.exported = this.parseModuleExportName(), this.checkExport(exports2, node.exported, this.lastTokStart)) : node.exported = null), this.expectContextual("from"), this.type !== types$12.string && this.unexpected(), node.source = this.parseExprAtom(), this.semicolon(), this.finishNode(node, "ExportAllDeclaration");
          if (this.eat(types$12._default)) {
            var isAsync;
            if (this.checkExport(exports2, "default", this.lastTokStart), this.type === types$12._function || (isAsync = this.isAsyncFunction())) {
              var fNode = this.startNode();
              this.next(), isAsync && this.next(), node.declaration = this.parseFunction(fNode, 4 | FUNC_STATEMENT2, false, isAsync);
            } else if (this.type === types$12._class) {
              var cNode = this.startNode();
              node.declaration = this.parseClass(cNode, "nullableID");
            } else
              node.declaration = this.parseMaybeAssign(), this.semicolon();
            return this.finishNode(node, "ExportDefaultDeclaration");
          }
          if (this.shouldParseExportStatement())
            node.declaration = this.parseStatement(null), "VariableDeclaration" === node.declaration.type ? this.checkVariableExport(exports2, node.declaration.declarations) : this.checkExport(exports2, node.declaration.id, node.declaration.id.start), node.specifiers = [], node.source = null;
          else {
            if (node.declaration = null, node.specifiers = this.parseExportSpecifiers(exports2), this.eatContextual("from"))
              this.type !== types$12.string && this.unexpected(), node.source = this.parseExprAtom();
            else {
              for (var i2 = 0, list2 = node.specifiers; i2 < list2.length; i2 += 1) {
                var spec = list2[i2];
                this.checkUnreserved(spec.local), this.checkLocalExport(spec.local), "Literal" === spec.local.type && this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
              }
              node.source = null;
            }
            this.semicolon();
          }
          return this.finishNode(node, "ExportNamedDeclaration");
        }, pp$82.checkExport = function(exports2, name, pos) {
          exports2 && ("string" != typeof name && (name = "Identifier" === name.type ? name.name : name.value), hasOwn2(exports2, name) && this.raiseRecoverable(pos, "Duplicate export '" + name + "'"), exports2[name] = true);
        }, pp$82.checkPatternExport = function(exports2, pat) {
          var type = pat.type;
          if ("Identifier" === type)
            this.checkExport(exports2, pat, pat.start);
          else if ("ObjectPattern" === type)
            for (var i2 = 0, list2 = pat.properties; i2 < list2.length; i2 += 1) {
              var prop = list2[i2];
              this.checkPatternExport(exports2, prop);
            }
          else if ("ArrayPattern" === type)
            for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
              var elt = list$1[i$1];
              elt && this.checkPatternExport(exports2, elt);
            }
          else
            "Property" === type ? this.checkPatternExport(exports2, pat.value) : "AssignmentPattern" === type ? this.checkPatternExport(exports2, pat.left) : "RestElement" === type ? this.checkPatternExport(exports2, pat.argument) : "ParenthesizedExpression" === type && this.checkPatternExport(exports2, pat.expression);
        }, pp$82.checkVariableExport = function(exports2, decls) {
          if (exports2)
            for (var i2 = 0, list2 = decls; i2 < list2.length; i2 += 1) {
              var decl = list2[i2];
              this.checkPatternExport(exports2, decl.id);
            }
        }, pp$82.shouldParseExportStatement = function() {
          return "var" === this.type.keyword || "const" === this.type.keyword || "class" === this.type.keyword || "function" === this.type.keyword || this.isLet() || this.isAsyncFunction();
        }, pp$82.parseExportSpecifiers = function(exports2) {
          var nodes = [], first = true;
          for (this.expect(types$12.braceL); !this.eat(types$12.braceR); ) {
            if (first)
              first = false;
            else if (this.expect(types$12.comma), this.afterTrailingComma(types$12.braceR))
              break;
            var node = this.startNode();
            node.local = this.parseModuleExportName(), node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local, this.checkExport(exports2, node.exported, node.exported.start), nodes.push(this.finishNode(node, "ExportSpecifier"));
          }
          return nodes;
        }, pp$82.parseImport = function(node) {
          return this.next(), this.type === types$12.string ? (node.specifiers = empty$12, node.source = this.parseExprAtom()) : (node.specifiers = this.parseImportSpecifiers(), this.expectContextual("from"), node.source = this.type === types$12.string ? this.parseExprAtom() : this.unexpected()), this.semicolon(), this.finishNode(node, "ImportDeclaration");
        }, pp$82.parseImportSpecifiers = function() {
          var nodes = [], first = true;
          if (this.type === types$12.name) {
            var node = this.startNode();
            if (node.local = this.parseIdent(), this.checkLValSimple(node.local, 2), nodes.push(this.finishNode(node, "ImportDefaultSpecifier")), !this.eat(types$12.comma))
              return nodes;
          }
          if (this.type === types$12.star) {
            var node$1 = this.startNode();
            return this.next(), this.expectContextual("as"), node$1.local = this.parseIdent(), this.checkLValSimple(node$1.local, 2), nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier")), nodes;
          }
          for (this.expect(types$12.braceL); !this.eat(types$12.braceR); ) {
            if (first)
              first = false;
            else if (this.expect(types$12.comma), this.afterTrailingComma(types$12.braceR))
              break;
            var node$2 = this.startNode();
            node$2.imported = this.parseModuleExportName(), this.eatContextual("as") ? node$2.local = this.parseIdent() : (this.checkUnreserved(node$2.imported), node$2.local = node$2.imported), this.checkLValSimple(node$2.local, 2), nodes.push(this.finishNode(node$2, "ImportSpecifier"));
          }
          return nodes;
        }, pp$82.parseModuleExportName = function() {
          if (this.options.ecmaVersion >= 13 && this.type === types$12.string) {
            var stringLiteral = this.parseLiteral(this.value);
            return loneSurrogate2.test(stringLiteral.value) && this.raise(stringLiteral.start, "An export name cannot include a lone surrogate."), stringLiteral;
          }
          return this.parseIdent(true);
        }, pp$82.adaptDirectivePrologue = function(statements) {
          for (var i2 = 0; i2 < statements.length && this.isDirectiveCandidate(statements[i2]); ++i2)
            statements[i2].directive = statements[i2].expression.raw.slice(1, -1);
        }, pp$82.isDirectiveCandidate = function(statement) {
          return this.options.ecmaVersion >= 5 && "ExpressionStatement" === statement.type && "Literal" === statement.expression.type && "string" == typeof statement.expression.value && ('"' === this.input[statement.start] || "'" === this.input[statement.start]);
        };
        var pp$72 = Parser3.prototype;
        pp$72.toAssignable = function(node, isBinding, refDestructuringErrors) {
          if (this.options.ecmaVersion >= 6 && node)
            switch (node.type) {
              case "Identifier":
                this.inAsync && "await" === node.name && this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
                break;
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                break;
              case "ObjectExpression":
                node.type = "ObjectPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
                for (var i2 = 0, list2 = node.properties; i2 < list2.length; i2 += 1) {
                  var prop = list2[i2];
                  this.toAssignable(prop, isBinding), "RestElement" !== prop.type || "ArrayPattern" !== prop.argument.type && "ObjectPattern" !== prop.argument.type || this.raise(prop.argument.start, "Unexpected token");
                }
                break;
              case "Property":
                "init" !== node.kind && this.raise(node.key.start, "Object pattern can't contain getter or setter"), this.toAssignable(node.value, isBinding);
                break;
              case "ArrayExpression":
                node.type = "ArrayPattern", refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true), this.toAssignableList(node.elements, isBinding);
                break;
              case "SpreadElement":
                node.type = "RestElement", this.toAssignable(node.argument, isBinding), "AssignmentPattern" === node.argument.type && this.raise(node.argument.start, "Rest elements cannot have a default value");
                break;
              case "AssignmentExpression":
                "=" !== node.operator && this.raise(node.left.end, "Only '=' operator can be used for specifying default value."), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isBinding);
                break;
              case "ParenthesizedExpression":
                this.toAssignable(node.expression, isBinding, refDestructuringErrors);
                break;
              case "ChainExpression":
                this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
                break;
              case "MemberExpression":
                if (!isBinding)
                  break;
              default:
                this.raise(node.start, "Assigning to rvalue");
            }
          else
            refDestructuringErrors && this.checkPatternErrors(refDestructuringErrors, true);
          return node;
        }, pp$72.toAssignableList = function(exprList, isBinding) {
          for (var end = exprList.length, i2 = 0; i2 < end; i2++) {
            var elt = exprList[i2];
            elt && this.toAssignable(elt, isBinding);
          }
          if (end) {
            var last = exprList[end - 1];
            6 === this.options.ecmaVersion && isBinding && last && "RestElement" === last.type && "Identifier" !== last.argument.type && this.unexpected(last.argument.start);
          }
          return exprList;
        }, pp$72.parseSpread = function(refDestructuringErrors) {
          var node = this.startNode();
          return this.next(), node.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.finishNode(node, "SpreadElement");
        }, pp$72.parseRestBinding = function() {
          var node = this.startNode();
          return this.next(), 6 === this.options.ecmaVersion && this.type !== types$12.name && this.unexpected(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
        }, pp$72.parseBindingAtom = function() {
          if (this.options.ecmaVersion >= 6)
            switch (this.type) {
              case types$12.bracketL:
                var node = this.startNode();
                return this.next(), node.elements = this.parseBindingList(types$12.bracketR, true, true), this.finishNode(node, "ArrayPattern");
              case types$12.braceL:
                return this.parseObj(true);
            }
          return this.parseIdent();
        }, pp$72.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
          for (var elts = [], first = true; !this.eat(close); )
            if (first ? first = false : this.expect(types$12.comma), allowEmpty && this.type === types$12.comma)
              elts.push(null);
            else {
              if (allowTrailingComma && this.afterTrailingComma(close))
                break;
              if (this.type === types$12.ellipsis) {
                var rest = this.parseRestBinding();
                this.parseBindingListItem(rest), elts.push(rest), this.type === types$12.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.expect(close);
                break;
              }
              var elem = this.parseMaybeDefault(this.start, this.startLoc);
              this.parseBindingListItem(elem), elts.push(elem);
            }
          return elts;
        }, pp$72.parseBindingListItem = function(param) {
          return param;
        }, pp$72.parseMaybeDefault = function(startPos, startLoc, left) {
          if (left = left || this.parseBindingAtom(), this.options.ecmaVersion < 6 || !this.eat(types$12.eq))
            return left;
          var node = this.startNodeAt(startPos, startLoc);
          return node.left = left, node.right = this.parseMaybeAssign(), this.finishNode(node, "AssignmentPattern");
        }, pp$72.checkLValSimple = function(expr, bindingType, checkClashes) {
          void 0 === bindingType && (bindingType = 0);
          var isBind = 0 !== bindingType;
          switch (expr.type) {
            case "Identifier":
              this.strict && this.reservedWordsStrictBind.test(expr.name) && this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode"), isBind && (2 === bindingType && "let" === expr.name && this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name"), checkClashes && (hasOwn2(checkClashes, expr.name) && this.raiseRecoverable(expr.start, "Argument name clash"), checkClashes[expr.name] = true), 5 !== bindingType && this.declareName(expr.name, bindingType, expr.start));
              break;
            case "ChainExpression":
              this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              isBind && this.raiseRecoverable(expr.start, "Binding member expression");
              break;
            case "ParenthesizedExpression":
              return isBind && this.raiseRecoverable(expr.start, "Binding parenthesized expression"), this.checkLValSimple(expr.expression, bindingType, checkClashes);
            default:
              this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
          }
        }, pp$72.checkLValPattern = function(expr, bindingType, checkClashes) {
          switch (void 0 === bindingType && (bindingType = 0), expr.type) {
            case "ObjectPattern":
              for (var i2 = 0, list2 = expr.properties; i2 < list2.length; i2 += 1) {
                var prop = list2[i2];
                this.checkLValInnerPattern(prop, bindingType, checkClashes);
              }
              break;
            case "ArrayPattern":
              for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
                var elem = list$1[i$1];
                elem && this.checkLValInnerPattern(elem, bindingType, checkClashes);
              }
              break;
            default:
              this.checkLValSimple(expr, bindingType, checkClashes);
          }
        }, pp$72.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
          switch (void 0 === bindingType && (bindingType = 0), expr.type) {
            case "Property":
              this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
              break;
            case "AssignmentPattern":
              this.checkLValPattern(expr.left, bindingType, checkClashes);
              break;
            case "RestElement":
              this.checkLValPattern(expr.argument, bindingType, checkClashes);
              break;
            default:
              this.checkLValPattern(expr, bindingType, checkClashes);
          }
        };
        var TokContext3 = function(token, isExpr, preserveSpace, override, generator) {
          this.token = token, this.isExpr = !!isExpr, this.preserveSpace = !!preserveSpace, this.override = override, this.generator = !!generator;
        }, types2 = { b_stat: new TokContext3("{", false), b_expr: new TokContext3("{", true), b_tmpl: new TokContext3("${", false), p_stat: new TokContext3("(", false), p_expr: new TokContext3("(", true), q_tmpl: new TokContext3("`", true, true, function(p) {
          return p.tryReadTemplateToken();
        }), f_stat: new TokContext3("function", false), f_expr: new TokContext3("function", true), f_expr_gen: new TokContext3("function", true, false, null, true), f_gen: new TokContext3("function", false, false, null, true) }, pp$62 = Parser3.prototype;
        pp$62.initialContext = function() {
          return [types2.b_stat];
        }, pp$62.curContext = function() {
          return this.context[this.context.length - 1];
        }, pp$62.braceIsBlock = function(prevType) {
          var parent = this.curContext();
          return parent === types2.f_expr || parent === types2.f_stat || (prevType !== types$12.colon || parent !== types2.b_stat && parent !== types2.b_expr ? prevType === types$12._return || prevType === types$12.name && this.exprAllowed ? lineBreak2.test(this.input.slice(this.lastTokEnd, this.start)) : prevType === types$12._else || prevType === types$12.semi || prevType === types$12.eof || prevType === types$12.parenR || prevType === types$12.arrow || (prevType === types$12.braceL ? parent === types2.b_stat : prevType !== types$12._var && prevType !== types$12._const && prevType !== types$12.name && !this.exprAllowed) : !parent.isExpr);
        }, pp$62.inGeneratorContext = function() {
          for (var i2 = this.context.length - 1; i2 >= 1; i2--) {
            var context = this.context[i2];
            if ("function" === context.token)
              return context.generator;
          }
          return false;
        }, pp$62.updateContext = function(prevType) {
          var update, type = this.type;
          type.keyword && prevType === types$12.dot ? this.exprAllowed = false : (update = type.updateContext) ? update.call(this, prevType) : this.exprAllowed = type.beforeExpr;
        }, pp$62.overrideContext = function(tokenCtx) {
          this.curContext() !== tokenCtx && (this.context[this.context.length - 1] = tokenCtx);
        }, types$12.parenR.updateContext = types$12.braceR.updateContext = function() {
          if (1 !== this.context.length) {
            var out = this.context.pop();
            out === types2.b_stat && "function" === this.curContext().token && (out = this.context.pop()), this.exprAllowed = !out.isExpr;
          } else
            this.exprAllowed = true;
        }, types$12.braceL.updateContext = function(prevType) {
          this.context.push(this.braceIsBlock(prevType) ? types2.b_stat : types2.b_expr), this.exprAllowed = true;
        }, types$12.dollarBraceL.updateContext = function() {
          this.context.push(types2.b_tmpl), this.exprAllowed = true;
        }, types$12.parenL.updateContext = function(prevType) {
          var statementParens = prevType === types$12._if || prevType === types$12._for || prevType === types$12._with || prevType === types$12._while;
          this.context.push(statementParens ? types2.p_stat : types2.p_expr), this.exprAllowed = true;
        }, types$12.incDec.updateContext = function() {
        }, types$12._function.updateContext = types$12._class.updateContext = function(prevType) {
          !prevType.beforeExpr || prevType === types$12._else || prevType === types$12.semi && this.curContext() !== types2.p_stat || prevType === types$12._return && lineBreak2.test(this.input.slice(this.lastTokEnd, this.start)) || (prevType === types$12.colon || prevType === types$12.braceL) && this.curContext() === types2.b_stat ? this.context.push(types2.f_stat) : this.context.push(types2.f_expr), this.exprAllowed = false;
        }, types$12.backQuote.updateContext = function() {
          this.curContext() === types2.q_tmpl ? this.context.pop() : this.context.push(types2.q_tmpl), this.exprAllowed = false;
        }, types$12.star.updateContext = function(prevType) {
          if (prevType === types$12._function) {
            var index2 = this.context.length - 1;
            this.context[index2] === types2.f_expr ? this.context[index2] = types2.f_expr_gen : this.context[index2] = types2.f_gen;
          }
          this.exprAllowed = true;
        }, types$12.name.updateContext = function(prevType) {
          var allowed = false;
          this.options.ecmaVersion >= 6 && prevType !== types$12.dot && ("of" === this.value && !this.exprAllowed || "yield" === this.value && this.inGeneratorContext()) && (allowed = true), this.exprAllowed = allowed;
        };
        var pp$52 = Parser3.prototype;
        function isPrivateFieldAccess2(node) {
          return "MemberExpression" === node.type && "PrivateIdentifier" === node.property.type || "ChainExpression" === node.type && isPrivateFieldAccess2(node.expression);
        }
        pp$52.checkPropClash = function(prop, propHash, refDestructuringErrors) {
          if (!(this.options.ecmaVersion >= 9 && "SpreadElement" === prop.type || this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand))) {
            var name, key = prop.key;
            switch (key.type) {
              case "Identifier":
                name = key.name;
                break;
              case "Literal":
                name = String(key.value);
                break;
              default:
                return;
            }
            var kind = prop.kind;
            if (this.options.ecmaVersion >= 6)
              "__proto__" === name && "init" === kind && (propHash.proto && (refDestructuringErrors ? refDestructuringErrors.doubleProto < 0 && (refDestructuringErrors.doubleProto = key.start) : this.raiseRecoverable(key.start, "Redefinition of __proto__ property")), propHash.proto = true);
            else {
              var other = propHash[name = "$" + name];
              if (other)
                ("init" === kind ? this.strict && other.init || other.get || other.set : other.init || other[kind]) && this.raiseRecoverable(key.start, "Redefinition of property");
              else
                other = propHash[name] = { init: false, get: false, set: false };
              other[kind] = true;
            }
          }
        }, pp$52.parseExpression = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
          if (this.type === types$12.comma) {
            var node = this.startNodeAt(startPos, startLoc);
            for (node.expressions = [expr]; this.eat(types$12.comma); )
              node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
            return this.finishNode(node, "SequenceExpression");
          }
          return expr;
        }, pp$52.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
          if (this.isContextual("yield")) {
            if (this.inGenerator)
              return this.parseYield(forInit);
            this.exprAllowed = false;
          }
          var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
          refDestructuringErrors ? (oldParenAssign = refDestructuringErrors.parenthesizedAssign, oldTrailingComma = refDestructuringErrors.trailingComma, oldDoubleProto = refDestructuringErrors.doubleProto, refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1) : (refDestructuringErrors = new DestructuringErrors3(), ownDestructuringErrors = true);
          var startPos = this.start, startLoc = this.startLoc;
          this.type !== types$12.parenL && this.type !== types$12.name || (this.potentialArrowAt = this.start, this.potentialArrowInForAwait = "await" === forInit);
          var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
          if (afterLeftParse && (left = afterLeftParse.call(this, left, startPos, startLoc)), this.type.isAssign) {
            var node = this.startNodeAt(startPos, startLoc);
            return node.operator = this.value, this.type === types$12.eq && (left = this.toAssignable(left, false, refDestructuringErrors)), ownDestructuringErrors || (refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1), refDestructuringErrors.shorthandAssign >= left.start && (refDestructuringErrors.shorthandAssign = -1), this.type === types$12.eq ? this.checkLValPattern(left) : this.checkLValSimple(left), node.left = left, this.next(), node.right = this.parseMaybeAssign(forInit), oldDoubleProto > -1 && (refDestructuringErrors.doubleProto = oldDoubleProto), this.finishNode(node, "AssignmentExpression");
          }
          return ownDestructuringErrors && this.checkExpressionErrors(refDestructuringErrors, true), oldParenAssign > -1 && (refDestructuringErrors.parenthesizedAssign = oldParenAssign), oldTrailingComma > -1 && (refDestructuringErrors.trailingComma = oldTrailingComma), left;
        }, pp$52.parseMaybeConditional = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprOps(forInit, refDestructuringErrors);
          if (this.checkExpressionErrors(refDestructuringErrors))
            return expr;
          if (this.eat(types$12.question)) {
            var node = this.startNodeAt(startPos, startLoc);
            return node.test = expr, node.consequent = this.parseMaybeAssign(), this.expect(types$12.colon), node.alternate = this.parseMaybeAssign(forInit), this.finishNode(node, "ConditionalExpression");
          }
          return expr;
        }, pp$52.parseExprOps = function(forInit, refDestructuringErrors) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
          return this.checkExpressionErrors(refDestructuringErrors) || expr.start === startPos && "ArrowFunctionExpression" === expr.type ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
        }, pp$52.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
          var prec = this.type.binop;
          if (null != prec && (!forInit || this.type !== types$12._in) && prec > minPrec) {
            var logical = this.type === types$12.logicalOR || this.type === types$12.logicalAND, coalesce = this.type === types$12.coalesce;
            coalesce && (prec = types$12.logicalAND.binop);
            var op = this.value;
            this.next();
            var startPos = this.start, startLoc = this.startLoc, right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit), node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
            return (logical && this.type === types$12.coalesce || coalesce && (this.type === types$12.logicalOR || this.type === types$12.logicalAND)) && this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses"), this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);
          }
          return left;
        }, pp$52.buildBinary = function(startPos, startLoc, left, right, op, logical) {
          "PrivateIdentifier" === right.type && this.raise(right.start, "Private identifier can only be left side of binary expression");
          var node = this.startNodeAt(startPos, startLoc);
          return node.left = left, node.operator = op, node.right = right, this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
        }, pp$52.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
          var expr, startPos = this.start, startLoc = this.startLoc;
          if (this.isContextual("await") && this.canAwait)
            expr = this.parseAwait(forInit), sawUnary = true;
          else if (this.type.prefix) {
            var node = this.startNode(), update = this.type === types$12.incDec;
            node.operator = this.value, node.prefix = true, this.next(), node.argument = this.parseMaybeUnary(null, true, update, forInit), this.checkExpressionErrors(refDestructuringErrors, true), update ? this.checkLValSimple(node.argument) : this.strict && "delete" === node.operator && "Identifier" === node.argument.type ? this.raiseRecoverable(node.start, "Deleting local variable in strict mode") : "delete" === node.operator && isPrivateFieldAccess2(node.argument) ? this.raiseRecoverable(node.start, "Private fields can not be deleted") : sawUnary = true, expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
          } else if (sawUnary || this.type !== types$12.privateId) {
            if (expr = this.parseExprSubscripts(refDestructuringErrors, forInit), this.checkExpressionErrors(refDestructuringErrors))
              return expr;
            for (; this.type.postfix && !this.canInsertSemicolon(); ) {
              var node$1 = this.startNodeAt(startPos, startLoc);
              node$1.operator = this.value, node$1.prefix = false, node$1.argument = expr, this.checkLValSimple(expr), this.next(), expr = this.finishNode(node$1, "UpdateExpression");
            }
          } else
            (forInit || 0 === this.privateNameStack.length) && this.unexpected(), expr = this.parsePrivateIdent(), this.type !== types$12._in && this.unexpected();
          return incDec || !this.eat(types$12.starstar) ? expr : sawUnary ? void this.unexpected(this.lastTokStart) : this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
        }, pp$52.parseExprSubscripts = function(refDestructuringErrors, forInit) {
          var startPos = this.start, startLoc = this.startLoc, expr = this.parseExprAtom(refDestructuringErrors, forInit);
          if ("ArrowFunctionExpression" === expr.type && ")" !== this.input.slice(this.lastTokStart, this.lastTokEnd))
            return expr;
          var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
          return refDestructuringErrors && "MemberExpression" === result.type && (refDestructuringErrors.parenthesizedAssign >= result.start && (refDestructuringErrors.parenthesizedAssign = -1), refDestructuringErrors.parenthesizedBind >= result.start && (refDestructuringErrors.parenthesizedBind = -1), refDestructuringErrors.trailingComma >= result.start && (refDestructuringErrors.trailingComma = -1)), result;
        }, pp$52.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
          for (var maybeAsyncArrow = this.options.ecmaVersion >= 8 && "Identifier" === base.type && "async" === base.name && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && this.potentialArrowAt === base.start, optionalChained = false; ; ) {
            var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
            if (element.optional && (optionalChained = true), element === base || "ArrowFunctionExpression" === element.type) {
              if (optionalChained) {
                var chainNode = this.startNodeAt(startPos, startLoc);
                chainNode.expression = element, element = this.finishNode(chainNode, "ChainExpression");
              }
              return element;
            }
            base = element;
          }
        }, pp$52.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
          var optionalSupported = this.options.ecmaVersion >= 11, optional = optionalSupported && this.eat(types$12.questionDot);
          noCalls && optional && this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
          var computed = this.eat(types$12.bracketL);
          if (computed || optional && this.type !== types$12.parenL && this.type !== types$12.backQuote || this.eat(types$12.dot)) {
            var node = this.startNodeAt(startPos, startLoc);
            node.object = base, computed ? (node.property = this.parseExpression(), this.expect(types$12.bracketR)) : this.type === types$12.privateId && "Super" !== base.type ? node.property = this.parsePrivateIdent() : node.property = this.parseIdent("never" !== this.options.allowReserved), node.computed = !!computed, optionalSupported && (node.optional = optional), base = this.finishNode(node, "MemberExpression");
          } else if (!noCalls && this.eat(types$12.parenL)) {
            var refDestructuringErrors = new DestructuringErrors3(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
            this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0;
            var exprList = this.parseExprList(types$12.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
            if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types$12.arrow))
              return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.awaitIdentPos > 0 && this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function"), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
            this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.callee = base, node$1.arguments = exprList, optionalSupported && (node$1.optional = optional), base = this.finishNode(node$1, "CallExpression");
          } else if (this.type === types$12.backQuote) {
            (optional || optionalChained) && this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
            var node$2 = this.startNodeAt(startPos, startLoc);
            node$2.tag = base, node$2.quasi = this.parseTemplate({ isTagged: true }), base = this.finishNode(node$2, "TaggedTemplateExpression");
          }
          return base;
        }, pp$52.parseExprAtom = function(refDestructuringErrors, forInit) {
          this.type === types$12.slash && this.readRegexp();
          var node, canBeArrow = this.potentialArrowAt === this.start;
          switch (this.type) {
            case types$12._super:
              return this.allowSuper || this.raise(this.start, "'super' keyword outside a method"), node = this.startNode(), this.next(), this.type !== types$12.parenL || this.allowDirectSuper || this.raise(node.start, "super() call outside constructor of a subclass"), this.type !== types$12.dot && this.type !== types$12.bracketL && this.type !== types$12.parenL && this.unexpected(), this.finishNode(node, "Super");
            case types$12._this:
              return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
            case types$12.name:
              var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc, id = this.parseIdent(false);
              if (this.options.ecmaVersion >= 8 && !containsEsc && "async" === id.name && !this.canInsertSemicolon() && this.eat(types$12._function))
                return this.overrideContext(types2.f_expr), this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
              if (canBeArrow && !this.canInsertSemicolon()) {
                if (this.eat(types$12.arrow))
                  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit);
                if (this.options.ecmaVersion >= 8 && "async" === id.name && this.type === types$12.name && !containsEsc && (!this.potentialArrowInForAwait || "of" !== this.value || this.containsEsc))
                  return id = this.parseIdent(false), !this.canInsertSemicolon() && this.eat(types$12.arrow) || this.unexpected(), this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit);
              }
              return id;
            case types$12.regexp:
              var value = this.value;
              return (node = this.parseLiteral(value.value)).regex = { pattern: value.pattern, flags: value.flags }, node;
            case types$12.num:
            case types$12.string:
              return this.parseLiteral(this.value);
            case types$12._null:
            case types$12._true:
            case types$12._false:
              return (node = this.startNode()).value = this.type === types$12._null ? null : this.type === types$12._true, node.raw = this.type.keyword, this.next(), this.finishNode(node, "Literal");
            case types$12.parenL:
              var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
              return refDestructuringErrors && (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr) && (refDestructuringErrors.parenthesizedAssign = start), refDestructuringErrors.parenthesizedBind < 0 && (refDestructuringErrors.parenthesizedBind = start)), expr;
            case types$12.bracketL:
              return node = this.startNode(), this.next(), node.elements = this.parseExprList(types$12.bracketR, true, true, refDestructuringErrors), this.finishNode(node, "ArrayExpression");
            case types$12.braceL:
              return this.overrideContext(types2.b_expr), this.parseObj(false, refDestructuringErrors);
            case types$12._function:
              return node = this.startNode(), this.next(), this.parseFunction(node, 0);
            case types$12._class:
              return this.parseClass(this.startNode(), false);
            case types$12._new:
              return this.parseNew();
            case types$12.backQuote:
              return this.parseTemplate();
            case types$12._import:
              return this.options.ecmaVersion >= 11 ? this.parseExprImport() : this.unexpected();
            default:
              this.unexpected();
          }
        }, pp$52.parseExprImport = function() {
          var node = this.startNode();
          this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword import");
          var meta = this.parseIdent(true);
          switch (this.type) {
            case types$12.parenL:
              return this.parseDynamicImport(node);
            case types$12.dot:
              return node.meta = meta, this.parseImportMeta(node);
            default:
              this.unexpected();
          }
        }, pp$52.parseDynamicImport = function(node) {
          if (this.next(), node.source = this.parseMaybeAssign(), !this.eat(types$12.parenR)) {
            var errorPos = this.start;
            this.eat(types$12.comma) && this.eat(types$12.parenR) ? this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()") : this.unexpected(errorPos);
          }
          return this.finishNode(node, "ImportExpression");
        }, pp$52.parseImportMeta = function(node) {
          this.next();
          var containsEsc = this.containsEsc;
          return node.property = this.parseIdent(true), "meta" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'"), containsEsc && this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters"), "module" === this.options.sourceType || this.options.allowImportExportEverywhere || this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module"), this.finishNode(node, "MetaProperty");
        }, pp$52.parseLiteral = function(value) {
          var node = this.startNode();
          return node.value = value, node.raw = this.input.slice(this.start, this.end), 110 === node.raw.charCodeAt(node.raw.length - 1) && (node.bigint = node.raw.slice(0, -1).replace(/_/g, "")), this.next(), this.finishNode(node, "Literal");
        }, pp$52.parseParenExpression = function() {
          this.expect(types$12.parenL);
          var val = this.parseExpression();
          return this.expect(types$12.parenR), val;
        }, pp$52.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
          var val, startPos = this.start, startLoc = this.startLoc, allowTrailingComma = this.options.ecmaVersion >= 8;
          if (this.options.ecmaVersion >= 6) {
            this.next();
            var spreadStart, innerStartPos = this.start, innerStartLoc = this.startLoc, exprList = [], first = true, lastIsComma = false, refDestructuringErrors = new DestructuringErrors3(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos;
            for (this.yieldPos = 0, this.awaitPos = 0; this.type !== types$12.parenR; ) {
              if (first ? first = false : this.expect(types$12.comma), allowTrailingComma && this.afterTrailingComma(types$12.parenR, true)) {
                lastIsComma = true;
                break;
              }
              if (this.type === types$12.ellipsis) {
                spreadStart = this.start, exprList.push(this.parseParenItem(this.parseRestBinding())), this.type === types$12.comma && this.raise(this.start, "Comma is not permitted after the rest element");
                break;
              }
              exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
            }
            var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
            if (this.expect(types$12.parenR), canBeArrow && !this.canInsertSemicolon() && this.eat(types$12.arrow))
              return this.checkPatternErrors(refDestructuringErrors, false), this.checkYieldAwaitInDefaultParams(), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.parseParenArrowList(startPos, startLoc, exprList, forInit);
            exprList.length && !lastIsComma || this.unexpected(this.lastTokStart), spreadStart && this.unexpected(spreadStart), this.checkExpressionErrors(refDestructuringErrors, true), this.yieldPos = oldYieldPos || this.yieldPos, this.awaitPos = oldAwaitPos || this.awaitPos, exprList.length > 1 ? ((val = this.startNodeAt(innerStartPos, innerStartLoc)).expressions = exprList, this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc)) : val = exprList[0];
          } else
            val = this.parseParenExpression();
          if (this.options.preserveParens) {
            var par = this.startNodeAt(startPos, startLoc);
            return par.expression = val, this.finishNode(par, "ParenthesizedExpression");
          }
          return val;
        }, pp$52.parseParenItem = function(item) {
          return item;
        }, pp$52.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
        };
        var empty2 = [];
        pp$52.parseNew = function() {
          this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword new");
          var node = this.startNode(), meta = this.parseIdent(true);
          if (this.options.ecmaVersion >= 6 && this.eat(types$12.dot)) {
            node.meta = meta;
            var containsEsc = this.containsEsc;
            return node.property = this.parseIdent(true), "target" !== node.property.name && this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'"), containsEsc && this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters"), this.allowNewDotTarget || this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block"), this.finishNode(node, "MetaProperty");
          }
          var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types$12._import;
          return node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true, false), isImport && "ImportExpression" === node.callee.type && this.raise(startPos, "Cannot use new with import()"), this.eat(types$12.parenL) ? node.arguments = this.parseExprList(types$12.parenR, this.options.ecmaVersion >= 8, false) : node.arguments = empty2, this.finishNode(node, "NewExpression");
        }, pp$52.parseTemplateElement = function(ref3) {
          var isTagged = ref3.isTagged, elem = this.startNode();
          return this.type === types$12.invalidTemplate ? (isTagged || this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal"), elem.value = { raw: this.value, cooked: null }) : elem.value = { raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"), cooked: this.value }, this.next(), elem.tail = this.type === types$12.backQuote, this.finishNode(elem, "TemplateElement");
        }, pp$52.parseTemplate = function(ref3) {
          void 0 === ref3 && (ref3 = {});
          var isTagged = ref3.isTagged;
          void 0 === isTagged && (isTagged = false);
          var node = this.startNode();
          this.next(), node.expressions = [];
          var curElt = this.parseTemplateElement({ isTagged });
          for (node.quasis = [curElt]; !curElt.tail; )
            this.type === types$12.eof && this.raise(this.pos, "Unterminated template literal"), this.expect(types$12.dollarBraceL), node.expressions.push(this.parseExpression()), this.expect(types$12.braceR), node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
          return this.next(), this.finishNode(node, "TemplateLiteral");
        }, pp$52.isAsyncProp = function(prop) {
          return !prop.computed && "Identifier" === prop.key.type && "async" === prop.key.name && (this.type === types$12.name || this.type === types$12.num || this.type === types$12.string || this.type === types$12.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$12.star) && !lineBreak2.test(this.input.slice(this.lastTokEnd, this.start));
        }, pp$52.parseObj = function(isPattern, refDestructuringErrors) {
          var node = this.startNode(), first = true, propHash = {};
          for (node.properties = [], this.next(); !this.eat(types$12.braceR); ) {
            if (first)
              first = false;
            else if (this.expect(types$12.comma), this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$12.braceR))
              break;
            var prop = this.parseProperty(isPattern, refDestructuringErrors);
            isPattern || this.checkPropClash(prop, propHash, refDestructuringErrors), node.properties.push(prop);
          }
          return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
        }, pp$52.parseProperty = function(isPattern, refDestructuringErrors) {
          var isGenerator, isAsync, startPos, startLoc, prop = this.startNode();
          if (this.options.ecmaVersion >= 9 && this.eat(types$12.ellipsis))
            return isPattern ? (prop.argument = this.parseIdent(false), this.type === types$12.comma && this.raise(this.start, "Comma is not permitted after the rest element"), this.finishNode(prop, "RestElement")) : (prop.argument = this.parseMaybeAssign(false, refDestructuringErrors), this.type === types$12.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start), this.finishNode(prop, "SpreadElement"));
          this.options.ecmaVersion >= 6 && (prop.method = false, prop.shorthand = false, (isPattern || refDestructuringErrors) && (startPos = this.start, startLoc = this.startLoc), isPattern || (isGenerator = this.eat(types$12.star)));
          var containsEsc = this.containsEsc;
          return this.parsePropertyName(prop), !isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop) ? (isAsync = true, isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$12.star), this.parsePropertyName(prop, refDestructuringErrors)) : isAsync = false, this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc), this.finishNode(prop, "Property");
        }, pp$52.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
          if ((isGenerator || isAsync) && this.type === types$12.colon && this.unexpected(), this.eat(types$12.colon))
            prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors), prop.kind = "init";
          else if (this.options.ecmaVersion >= 6 && this.type === types$12.parenL)
            isPattern && this.unexpected(), prop.kind = "init", prop.method = true, prop.value = this.parseMethod(isGenerator, isAsync);
          else if (isPattern || containsEsc || !(this.options.ecmaVersion >= 5) || prop.computed || "Identifier" !== prop.key.type || "get" !== prop.key.name && "set" !== prop.key.name || this.type === types$12.comma || this.type === types$12.braceR || this.type === types$12.eq)
            this.options.ecmaVersion >= 6 && !prop.computed && "Identifier" === prop.key.type ? ((isGenerator || isAsync) && this.unexpected(), this.checkUnreserved(prop.key), "await" !== prop.key.name || this.awaitIdentPos || (this.awaitIdentPos = startPos), prop.kind = "init", isPattern ? prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key)) : this.type === types$12.eq && refDestructuringErrors ? (refDestructuringErrors.shorthandAssign < 0 && (refDestructuringErrors.shorthandAssign = this.start), prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key))) : prop.value = this.copyNode(prop.key), prop.shorthand = true) : this.unexpected();
          else {
            (isGenerator || isAsync) && this.unexpected(), prop.kind = prop.key.name, this.parsePropertyName(prop), prop.value = this.parseMethod(false);
            var paramCount = "get" === prop.kind ? 0 : 1;
            if (prop.value.params.length !== paramCount) {
              var start = prop.value.start;
              "get" === prop.kind ? this.raiseRecoverable(start, "getter should have no params") : this.raiseRecoverable(start, "setter should have exactly one param");
            } else
              "set" === prop.kind && "RestElement" === prop.value.params[0].type && this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
          }
        }, pp$52.parsePropertyName = function(prop) {
          if (this.options.ecmaVersion >= 6) {
            if (this.eat(types$12.bracketL))
              return prop.computed = true, prop.key = this.parseMaybeAssign(), this.expect(types$12.bracketR), prop.key;
            prop.computed = false;
          }
          return prop.key = this.type === types$12.num || this.type === types$12.string ? this.parseExprAtom() : this.parseIdent("never" !== this.options.allowReserved);
        }, pp$52.initFunction = function(node) {
          node.id = null, this.options.ecmaVersion >= 6 && (node.generator = node.expression = false), this.options.ecmaVersion >= 8 && (node.async = false);
        }, pp$52.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
          var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.initFunction(node), this.options.ecmaVersion >= 6 && (node.generator = isGenerator), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, this.enterScope(64 | functionFlags2(isAsync, node.generator) | (allowDirectSuper ? 128 : 0)), this.expect(types$12.parenL), node.params = this.parseBindingList(types$12.parenR, false, this.options.ecmaVersion >= 8), this.checkYieldAwaitInDefaultParams(), this.parseFunctionBody(node, false, true, false), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "FunctionExpression");
        }, pp$52.parseArrowExpression = function(node, params, isAsync, forInit) {
          var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          return this.enterScope(16 | functionFlags2(isAsync, false)), this.initFunction(node), this.options.ecmaVersion >= 8 && (node.async = !!isAsync), this.yieldPos = 0, this.awaitPos = 0, this.awaitIdentPos = 0, node.params = this.toAssignableList(params, true), this.parseFunctionBody(node, true, false, forInit), this.yieldPos = oldYieldPos, this.awaitPos = oldAwaitPos, this.awaitIdentPos = oldAwaitIdentPos, this.finishNode(node, "ArrowFunctionExpression");
        }, pp$52.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
          var isExpression = isArrowFunction && this.type !== types$12.braceL, oldStrict = this.strict, useStrict = false;
          if (isExpression)
            node.body = this.parseMaybeAssign(forInit), node.expression = true, this.checkParams(node, false);
          else {
            var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
            oldStrict && !nonSimple || (useStrict = this.strictDirective(this.end)) && nonSimple && this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
            var oldLabels = this.labels;
            this.labels = [], useStrict && (this.strict = true), this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params)), this.strict && node.id && this.checkLValSimple(node.id, 5), node.body = this.parseBlock(false, void 0, useStrict && !oldStrict), node.expression = false, this.adaptDirectivePrologue(node.body.body), this.labels = oldLabels;
          }
          this.exitScope();
        }, pp$52.isSimpleParamList = function(params) {
          for (var i2 = 0, list2 = params; i2 < list2.length; i2 += 1) {
            if ("Identifier" !== list2[i2].type)
              return false;
          }
          return true;
        }, pp$52.checkParams = function(node, allowDuplicates) {
          for (var nameHash = /* @__PURE__ */ Object.create(null), i2 = 0, list2 = node.params; i2 < list2.length; i2 += 1) {
            var param = list2[i2];
            this.checkLValInnerPattern(param, 1, allowDuplicates ? null : nameHash);
          }
        }, pp$52.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
          for (var elts = [], first = true; !this.eat(close); ) {
            if (first)
              first = false;
            else if (this.expect(types$12.comma), allowTrailingComma && this.afterTrailingComma(close))
              break;
            var elt = void 0;
            allowEmpty && this.type === types$12.comma ? elt = null : this.type === types$12.ellipsis ? (elt = this.parseSpread(refDestructuringErrors), refDestructuringErrors && this.type === types$12.comma && refDestructuringErrors.trailingComma < 0 && (refDestructuringErrors.trailingComma = this.start)) : elt = this.parseMaybeAssign(false, refDestructuringErrors), elts.push(elt);
          }
          return elts;
        }, pp$52.checkUnreserved = function(ref3) {
          var start = ref3.start, end = ref3.end, name = ref3.name;
          (this.inGenerator && "yield" === name && this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator"), this.inAsync && "await" === name && this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function"), this.currentThisScope().inClassFieldInit && "arguments" === name && this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer"), !this.inClassStaticBlock || "arguments" !== name && "await" !== name || this.raise(start, "Cannot use " + name + " in class static initialization block"), this.keywords.test(name) && this.raise(start, "Unexpected keyword '" + name + "'"), this.options.ecmaVersion < 6 && -1 !== this.input.slice(start, end).indexOf("\\")) || (this.strict ? this.reservedWordsStrict : this.reservedWords).test(name) && (this.inAsync || "await" !== name || this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function"), this.raiseRecoverable(start, "The keyword '" + name + "' is reserved"));
        }, pp$52.parseIdent = function(liberal, isBinding) {
          var node = this.startNode();
          return this.type === types$12.name ? node.name = this.value : this.type.keyword ? (node.name = this.type.keyword, "class" !== node.name && "function" !== node.name || this.lastTokEnd === this.lastTokStart + 1 && 46 === this.input.charCodeAt(this.lastTokStart) || this.context.pop()) : this.unexpected(), this.next(!!liberal), this.finishNode(node, "Identifier"), liberal || (this.checkUnreserved(node), "await" !== node.name || this.awaitIdentPos || (this.awaitIdentPos = node.start)), node;
        }, pp$52.parsePrivateIdent = function() {
          var node = this.startNode();
          return this.type === types$12.privateId ? node.name = this.value : this.unexpected(), this.next(), this.finishNode(node, "PrivateIdentifier"), 0 === this.privateNameStack.length ? this.raise(node.start, "Private field '#" + node.name + "' must be declared in an enclosing class") : this.privateNameStack[this.privateNameStack.length - 1].used.push(node), node;
        }, pp$52.parseYield = function(forInit) {
          this.yieldPos || (this.yieldPos = this.start);
          var node = this.startNode();
          return this.next(), this.type === types$12.semi || this.canInsertSemicolon() || this.type !== types$12.star && !this.type.startsExpr ? (node.delegate = false, node.argument = null) : (node.delegate = this.eat(types$12.star), node.argument = this.parseMaybeAssign(forInit)), this.finishNode(node, "YieldExpression");
        }, pp$52.parseAwait = function(forInit) {
          this.awaitPos || (this.awaitPos = this.start);
          var node = this.startNode();
          return this.next(), node.argument = this.parseMaybeUnary(null, true, false, forInit), this.finishNode(node, "AwaitExpression");
        };
        var pp$42 = Parser3.prototype;
        pp$42.raise = function(pos, message) {
          var loc = getLineInfo2(this.input, pos);
          message += " (" + loc.line + ":" + loc.column + ")";
          var err = new SyntaxError(message);
          throw err.pos = pos, err.loc = loc, err.raisedAt = this.pos, err;
        }, pp$42.raiseRecoverable = pp$42.raise, pp$42.curPosition = function() {
          if (this.options.locations)
            return new Position3(this.curLine, this.pos - this.lineStart);
        };
        var pp$32 = Parser3.prototype, Scope3 = function(flags) {
          this.flags = flags, this.var = [], this.lexical = [], this.functions = [], this.inClassFieldInit = false;
        };
        pp$32.enterScope = function(flags) {
          this.scopeStack.push(new Scope3(flags));
        }, pp$32.exitScope = function() {
          this.scopeStack.pop();
        }, pp$32.treatFunctionsAsVarInScope = function(scope) {
          return 2 & scope.flags || !this.inModule && 1 & scope.flags;
        }, pp$32.declareName = function(name, bindingType, pos) {
          var redeclared = false;
          if (2 === bindingType) {
            var scope = this.currentScope();
            redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1, scope.lexical.push(name), this.inModule && 1 & scope.flags && delete this.undefinedExports[name];
          } else if (4 === bindingType) {
            this.currentScope().lexical.push(name);
          } else if (3 === bindingType) {
            var scope$2 = this.currentScope();
            redeclared = this.treatFunctionsAsVar ? scope$2.lexical.indexOf(name) > -1 : scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1, scope$2.functions.push(name);
          } else
            for (var i2 = this.scopeStack.length - 1; i2 >= 0; --i2) {
              var scope$3 = this.scopeStack[i2];
              if (scope$3.lexical.indexOf(name) > -1 && !(32 & scope$3.flags && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
                redeclared = true;
                break;
              }
              if (scope$3.var.push(name), this.inModule && 1 & scope$3.flags && delete this.undefinedExports[name], 259 & scope$3.flags)
                break;
            }
          redeclared && this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
        }, pp$32.checkLocalExport = function(id) {
          -1 === this.scopeStack[0].lexical.indexOf(id.name) && -1 === this.scopeStack[0].var.indexOf(id.name) && (this.undefinedExports[id.name] = id);
        }, pp$32.currentScope = function() {
          return this.scopeStack[this.scopeStack.length - 1];
        }, pp$32.currentVarScope = function() {
          for (var i2 = this.scopeStack.length - 1; ; i2--) {
            var scope = this.scopeStack[i2];
            if (259 & scope.flags)
              return scope;
          }
        }, pp$32.currentThisScope = function() {
          for (var i2 = this.scopeStack.length - 1; ; i2--) {
            var scope = this.scopeStack[i2];
            if (259 & scope.flags && !(16 & scope.flags))
              return scope;
          }
        };
        var Node3 = function(parser, pos, loc) {
          this.type = "", this.start = pos, this.end = 0, parser.options.locations && (this.loc = new SourceLocation3(parser, loc)), parser.options.directSourceFile && (this.sourceFile = parser.options.directSourceFile), parser.options.ranges && (this.range = [pos, 0]);
        }, pp$22 = Parser3.prototype;
        function finishNodeAt2(node, type, pos, loc) {
          return node.type = type, node.end = pos, this.options.locations && (node.loc.end = loc), this.options.ranges && (node.range[1] = pos), node;
        }
        pp$22.startNode = function() {
          return new Node3(this, this.start, this.startLoc);
        }, pp$22.startNodeAt = function(pos, loc) {
          return new Node3(this, pos, loc);
        }, pp$22.finishNode = function(node, type) {
          return finishNodeAt2.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
        }, pp$22.finishNodeAt = function(node, type, pos, loc) {
          return finishNodeAt2.call(this, node, type, pos, loc);
        }, pp$22.copyNode = function(node) {
          var newNode = new Node3(this, node.start, this.startLoc);
          for (var prop in node)
            newNode[prop] = node[prop];
          return newNode;
        };
        var ecma9BinaryProperties2 = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS", ecma10BinaryProperties2 = ecma9BinaryProperties2 + " Extended_Pictographic", ecma12BinaryProperties2 = ecma10BinaryProperties2 + " EBase EComp EMod EPres ExtPict", unicodeBinaryProperties2 = { 9: ecma9BinaryProperties2, 10: ecma10BinaryProperties2, 11: ecma10BinaryProperties2, 12: ecma12BinaryProperties2, 13: "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS Extended_Pictographic EBase EComp EMod EPres ExtPict" }, unicodeGeneralCategoryValues2 = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu", ecma9ScriptValues2 = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb", ecma10ScriptValues2 = ecma9ScriptValues2 + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd", ecma11ScriptValues2 = ecma10ScriptValues2 + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho", ecma12ScriptValues2 = ecma11ScriptValues2 + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi", unicodeScriptValues2 = { 9: ecma9ScriptValues2, 10: ecma10ScriptValues2, 11: ecma11ScriptValues2, 12: ecma12ScriptValues2, 13: "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith" }, data2 = {};
        function buildUnicodeData2(ecmaVersion) {
          var d = data2[ecmaVersion] = { binary: wordsRegexp2(unicodeBinaryProperties2[ecmaVersion] + " " + unicodeGeneralCategoryValues2), nonBinary: { General_Category: wordsRegexp2(unicodeGeneralCategoryValues2), Script: wordsRegexp2(unicodeScriptValues2[ecmaVersion]) } };
          d.nonBinary.Script_Extensions = d.nonBinary.Script, d.nonBinary.gc = d.nonBinary.General_Category, d.nonBinary.sc = d.nonBinary.Script, d.nonBinary.scx = d.nonBinary.Script_Extensions;
        }
        for (var i = 0, list = [9, 10, 11, 12, 13]; i < list.length; i += 1) {
          buildUnicodeData2(list[i]);
        }
        var pp$12 = Parser3.prototype, RegExpValidationState3 = function(parser) {
          this.parser = parser, this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : ""), this.unicodeProperties = data2[parser.options.ecmaVersion >= 13 ? 13 : parser.options.ecmaVersion], this.source = "", this.flags = "", this.start = 0, this.switchU = false, this.switchN = false, this.pos = 0, this.lastIntValue = 0, this.lastStringValue = "", this.lastAssertionIsQuantifiable = false, this.numCapturingParens = 0, this.maxBackReference = 0, this.groupNames = [], this.backReferenceNames = [];
        };
        function isSyntaxCharacter2(ch) {
          return 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
        }
        function isControlLetter2(ch) {
          return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
        }
        function isUnicodePropertyNameCharacter2(ch) {
          return isControlLetter2(ch) || 95 === ch;
        }
        function isUnicodePropertyValueCharacter2(ch) {
          return isUnicodePropertyNameCharacter2(ch) || isDecimalDigit2(ch);
        }
        function isDecimalDigit2(ch) {
          return ch >= 48 && ch <= 57;
        }
        function isHexDigit2(ch) {
          return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
        }
        function hexToInt2(ch) {
          return ch >= 65 && ch <= 70 ? ch - 65 + 10 : ch >= 97 && ch <= 102 ? ch - 97 + 10 : ch - 48;
        }
        function isOctalDigit2(ch) {
          return ch >= 48 && ch <= 55;
        }
        RegExpValidationState3.prototype.reset = function(start, pattern, flags) {
          var unicode = -1 !== flags.indexOf("u");
          this.start = 0 | start, this.source = pattern + "", this.flags = flags, this.switchU = unicode && this.parser.options.ecmaVersion >= 6, this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
        }, RegExpValidationState3.prototype.raise = function(message) {
          this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
        }, RegExpValidationState3.prototype.at = function(i2, forceU) {
          void 0 === forceU && (forceU = false);
          var s = this.source, l = s.length;
          if (i2 >= l)
            return -1;
          var c = s.charCodeAt(i2);
          if (!forceU && !this.switchU || c <= 55295 || c >= 57344 || i2 + 1 >= l)
            return c;
          var next = s.charCodeAt(i2 + 1);
          return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
        }, RegExpValidationState3.prototype.nextIndex = function(i2, forceU) {
          void 0 === forceU && (forceU = false);
          var s = this.source, l = s.length;
          if (i2 >= l)
            return l;
          var next, c = s.charCodeAt(i2);
          return !forceU && !this.switchU || c <= 55295 || c >= 57344 || i2 + 1 >= l || (next = s.charCodeAt(i2 + 1)) < 56320 || next > 57343 ? i2 + 1 : i2 + 2;
        }, RegExpValidationState3.prototype.current = function(forceU) {
          return void 0 === forceU && (forceU = false), this.at(this.pos, forceU);
        }, RegExpValidationState3.prototype.lookahead = function(forceU) {
          return void 0 === forceU && (forceU = false), this.at(this.nextIndex(this.pos, forceU), forceU);
        }, RegExpValidationState3.prototype.advance = function(forceU) {
          void 0 === forceU && (forceU = false), this.pos = this.nextIndex(this.pos, forceU);
        }, RegExpValidationState3.prototype.eat = function(ch, forceU) {
          return void 0 === forceU && (forceU = false), this.current(forceU) === ch && (this.advance(forceU), true);
        }, pp$12.validateRegExpFlags = function(state) {
          for (var validFlags = state.validFlags, flags = state.flags, i2 = 0; i2 < flags.length; i2++) {
            var flag = flags.charAt(i2);
            -1 === validFlags.indexOf(flag) && this.raise(state.start, "Invalid regular expression flag"), flags.indexOf(flag, i2 + 1) > -1 && this.raise(state.start, "Duplicate regular expression flag");
          }
        }, pp$12.validateRegExpPattern = function(state) {
          this.regexp_pattern(state), !state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0 && (state.switchN = true, this.regexp_pattern(state));
        }, pp$12.regexp_pattern = function(state) {
          state.pos = 0, state.lastIntValue = 0, state.lastStringValue = "", state.lastAssertionIsQuantifiable = false, state.numCapturingParens = 0, state.maxBackReference = 0, state.groupNames.length = 0, state.backReferenceNames.length = 0, this.regexp_disjunction(state), state.pos !== state.source.length && (state.eat(41) && state.raise("Unmatched ')'"), (state.eat(93) || state.eat(125)) && state.raise("Lone quantifier brackets")), state.maxBackReference > state.numCapturingParens && state.raise("Invalid escape");
          for (var i2 = 0, list2 = state.backReferenceNames; i2 < list2.length; i2 += 1) {
            var name = list2[i2];
            -1 === state.groupNames.indexOf(name) && state.raise("Invalid named capture referenced");
          }
        }, pp$12.regexp_disjunction = function(state) {
          for (this.regexp_alternative(state); state.eat(124); )
            this.regexp_alternative(state);
          this.regexp_eatQuantifier(state, true) && state.raise("Nothing to repeat"), state.eat(123) && state.raise("Lone quantifier brackets");
        }, pp$12.regexp_alternative = function(state) {
          for (; state.pos < state.source.length && this.regexp_eatTerm(state); )
            ;
        }, pp$12.regexp_eatTerm = function(state) {
          return this.regexp_eatAssertion(state) ? (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state) && state.switchU && state.raise("Invalid quantifier"), true) : !!(state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) && (this.regexp_eatQuantifier(state), true);
        }, pp$12.regexp_eatAssertion = function(state) {
          var start = state.pos;
          if (state.lastAssertionIsQuantifiable = false, state.eat(94) || state.eat(36))
            return true;
          if (state.eat(92)) {
            if (state.eat(66) || state.eat(98))
              return true;
            state.pos = start;
          }
          if (state.eat(40) && state.eat(63)) {
            var lookbehind = false;
            if (this.options.ecmaVersion >= 9 && (lookbehind = state.eat(60)), state.eat(61) || state.eat(33))
              return this.regexp_disjunction(state), state.eat(41) || state.raise("Unterminated group"), state.lastAssertionIsQuantifiable = !lookbehind, true;
          }
          return state.pos = start, false;
        }, pp$12.regexp_eatQuantifier = function(state, noError) {
          return void 0 === noError && (noError = false), !!this.regexp_eatQuantifierPrefix(state, noError) && (state.eat(63), true);
        }, pp$12.regexp_eatQuantifierPrefix = function(state, noError) {
          return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
        }, pp$12.regexp_eatBracedQuantifier = function(state, noError) {
          var start = state.pos;
          if (state.eat(123)) {
            var min = 0, max = -1;
            if (this.regexp_eatDecimalDigits(state) && (min = state.lastIntValue, state.eat(44) && this.regexp_eatDecimalDigits(state) && (max = state.lastIntValue), state.eat(125)))
              return -1 !== max && max < min && !noError && state.raise("numbers out of order in {} quantifier"), true;
            state.switchU && !noError && state.raise("Incomplete quantifier"), state.pos = start;
          }
          return false;
        }, pp$12.regexp_eatAtom = function(state) {
          return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
        }, pp$12.regexp_eatReverseSolidusAtomEscape = function(state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatAtomEscape(state))
              return true;
            state.pos = start;
          }
          return false;
        }, pp$12.regexp_eatUncapturingGroup = function(state) {
          var start = state.pos;
          if (state.eat(40)) {
            if (state.eat(63) && state.eat(58)) {
              if (this.regexp_disjunction(state), state.eat(41))
                return true;
              state.raise("Unterminated group");
            }
            state.pos = start;
          }
          return false;
        }, pp$12.regexp_eatCapturingGroup = function(state) {
          if (state.eat(40)) {
            if (this.options.ecmaVersion >= 9 ? this.regexp_groupSpecifier(state) : 63 === state.current() && state.raise("Invalid group"), this.regexp_disjunction(state), state.eat(41))
              return state.numCapturingParens += 1, true;
            state.raise("Unterminated group");
          }
          return false;
        }, pp$12.regexp_eatExtendedAtom = function(state) {
          return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
        }, pp$12.regexp_eatInvalidBracedQuantifier = function(state) {
          return this.regexp_eatBracedQuantifier(state, true) && state.raise("Nothing to repeat"), false;
        }, pp$12.regexp_eatSyntaxCharacter = function(state) {
          var ch = state.current();
          return !!isSyntaxCharacter2(ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$12.regexp_eatPatternCharacters = function(state) {
          for (var start = state.pos, ch = 0; -1 !== (ch = state.current()) && !isSyntaxCharacter2(ch); )
            state.advance();
          return state.pos !== start;
        }, pp$12.regexp_eatExtendedPatternCharacter = function(state) {
          var ch = state.current();
          return !(-1 === ch || 36 === ch || ch >= 40 && ch <= 43 || 46 === ch || 63 === ch || 91 === ch || 94 === ch || 124 === ch) && (state.advance(), true);
        }, pp$12.regexp_groupSpecifier = function(state) {
          if (state.eat(63)) {
            if (this.regexp_eatGroupName(state))
              return -1 !== state.groupNames.indexOf(state.lastStringValue) && state.raise("Duplicate capture group name"), void state.groupNames.push(state.lastStringValue);
            state.raise("Invalid group");
          }
        }, pp$12.regexp_eatGroupName = function(state) {
          if (state.lastStringValue = "", state.eat(60)) {
            if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62))
              return true;
            state.raise("Invalid capture group name");
          }
          return false;
        }, pp$12.regexp_eatRegExpIdentifierName = function(state) {
          if (state.lastStringValue = "", this.regexp_eatRegExpIdentifierStart(state)) {
            for (state.lastStringValue += codePointToString2(state.lastIntValue); this.regexp_eatRegExpIdentifierPart(state); )
              state.lastStringValue += codePointToString2(state.lastIntValue);
            return true;
          }
          return false;
        }, pp$12.regexp_eatRegExpIdentifierStart = function(state) {
          var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
          return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
            return isIdentifierStart2(ch2, true) || 36 === ch2 || 95 === ch2;
          }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
        }, pp$12.regexp_eatRegExpIdentifierPart = function(state) {
          var start = state.pos, forceU = this.options.ecmaVersion >= 11, ch = state.current(forceU);
          return state.advance(forceU), 92 === ch && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU) && (ch = state.lastIntValue), function(ch2) {
            return isIdentifierChar2(ch2, true) || 36 === ch2 || 95 === ch2 || 8204 === ch2 || 8205 === ch2;
          }(ch) ? (state.lastIntValue = ch, true) : (state.pos = start, false);
        }, pp$12.regexp_eatAtomEscape = function(state) {
          return !!(this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) || (state.switchU && (99 === state.current() && state.raise("Invalid unicode escape"), state.raise("Invalid escape")), false);
        }, pp$12.regexp_eatBackReference = function(state) {
          var start = state.pos;
          if (this.regexp_eatDecimalEscape(state)) {
            var n = state.lastIntValue;
            if (state.switchU)
              return n > state.maxBackReference && (state.maxBackReference = n), true;
            if (n <= state.numCapturingParens)
              return true;
            state.pos = start;
          }
          return false;
        }, pp$12.regexp_eatKGroupName = function(state) {
          if (state.eat(107)) {
            if (this.regexp_eatGroupName(state))
              return state.backReferenceNames.push(state.lastStringValue), true;
            state.raise("Invalid named reference");
          }
          return false;
        }, pp$12.regexp_eatCharacterEscape = function(state) {
          return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
        }, pp$12.regexp_eatCControlLetter = function(state) {
          var start = state.pos;
          if (state.eat(99)) {
            if (this.regexp_eatControlLetter(state))
              return true;
            state.pos = start;
          }
          return false;
        }, pp$12.regexp_eatZero = function(state) {
          return 48 === state.current() && !isDecimalDigit2(state.lookahead()) && (state.lastIntValue = 0, state.advance(), true);
        }, pp$12.regexp_eatControlEscape = function(state) {
          var ch = state.current();
          return 116 === ch ? (state.lastIntValue = 9, state.advance(), true) : 110 === ch ? (state.lastIntValue = 10, state.advance(), true) : 118 === ch ? (state.lastIntValue = 11, state.advance(), true) : 102 === ch ? (state.lastIntValue = 12, state.advance(), true) : 114 === ch && (state.lastIntValue = 13, state.advance(), true);
        }, pp$12.regexp_eatControlLetter = function(state) {
          var ch = state.current();
          return !!isControlLetter2(ch) && (state.lastIntValue = ch % 32, state.advance(), true);
        }, pp$12.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
          void 0 === forceU && (forceU = false);
          var ch, start = state.pos, switchU = forceU || state.switchU;
          if (state.eat(117)) {
            if (this.regexp_eatFixedHexDigits(state, 4)) {
              var lead = state.lastIntValue;
              if (switchU && lead >= 55296 && lead <= 56319) {
                var leadSurrogateEnd = state.pos;
                if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
                  var trail = state.lastIntValue;
                  if (trail >= 56320 && trail <= 57343)
                    return state.lastIntValue = 1024 * (lead - 55296) + (trail - 56320) + 65536, true;
                }
                state.pos = leadSurrogateEnd, state.lastIntValue = lead;
              }
              return true;
            }
            if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && ((ch = state.lastIntValue) >= 0 && ch <= 1114111))
              return true;
            switchU && state.raise("Invalid unicode escape"), state.pos = start;
          }
          return false;
        }, pp$12.regexp_eatIdentityEscape = function(state) {
          if (state.switchU)
            return !!this.regexp_eatSyntaxCharacter(state) || !!state.eat(47) && (state.lastIntValue = 47, true);
          var ch = state.current();
          return !(99 === ch || state.switchN && 107 === ch) && (state.lastIntValue = ch, state.advance(), true);
        }, pp$12.regexp_eatDecimalEscape = function(state) {
          state.lastIntValue = 0;
          var ch = state.current();
          if (ch >= 49 && ch <= 57) {
            do {
              state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
            } while ((ch = state.current()) >= 48 && ch <= 57);
            return true;
          }
          return false;
        }, pp$12.regexp_eatCharacterClassEscape = function(state) {
          var ch = state.current();
          if (function(ch2) {
            return 100 === ch2 || 68 === ch2 || 115 === ch2 || 83 === ch2 || 119 === ch2 || 87 === ch2;
          }(ch))
            return state.lastIntValue = -1, state.advance(), true;
          if (state.switchU && this.options.ecmaVersion >= 9 && (80 === ch || 112 === ch)) {
            if (state.lastIntValue = -1, state.advance(), state.eat(123) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(125))
              return true;
            state.raise("Invalid property name");
          }
          return false;
        }, pp$12.regexp_eatUnicodePropertyValueExpression = function(state) {
          var start = state.pos;
          if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
            var name = state.lastStringValue;
            if (this.regexp_eatUnicodePropertyValue(state)) {
              var value = state.lastStringValue;
              return this.regexp_validateUnicodePropertyNameAndValue(state, name, value), true;
            }
          }
          if (state.pos = start, this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
            var nameOrValue = state.lastStringValue;
            return this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue), true;
          }
          return false;
        }, pp$12.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
          hasOwn2(state.unicodeProperties.nonBinary, name) || state.raise("Invalid property name"), state.unicodeProperties.nonBinary[name].test(value) || state.raise("Invalid property value");
        }, pp$12.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
          state.unicodeProperties.binary.test(nameOrValue) || state.raise("Invalid property name");
        }, pp$12.regexp_eatUnicodePropertyName = function(state) {
          var ch = 0;
          for (state.lastStringValue = ""; isUnicodePropertyNameCharacter2(ch = state.current()); )
            state.lastStringValue += codePointToString2(ch), state.advance();
          return "" !== state.lastStringValue;
        }, pp$12.regexp_eatUnicodePropertyValue = function(state) {
          var ch = 0;
          for (state.lastStringValue = ""; isUnicodePropertyValueCharacter2(ch = state.current()); )
            state.lastStringValue += codePointToString2(ch), state.advance();
          return "" !== state.lastStringValue;
        }, pp$12.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
          return this.regexp_eatUnicodePropertyValue(state);
        }, pp$12.regexp_eatCharacterClass = function(state) {
          if (state.eat(91)) {
            if (state.eat(94), this.regexp_classRanges(state), state.eat(93))
              return true;
            state.raise("Unterminated character class");
          }
          return false;
        }, pp$12.regexp_classRanges = function(state) {
          for (; this.regexp_eatClassAtom(state); ) {
            var left = state.lastIntValue;
            if (state.eat(45) && this.regexp_eatClassAtom(state)) {
              var right = state.lastIntValue;
              !state.switchU || -1 !== left && -1 !== right || state.raise("Invalid character class"), -1 !== left && -1 !== right && left > right && state.raise("Range out of order in character class");
            }
          }
        }, pp$12.regexp_eatClassAtom = function(state) {
          var start = state.pos;
          if (state.eat(92)) {
            if (this.regexp_eatClassEscape(state))
              return true;
            if (state.switchU) {
              var ch$1 = state.current();
              (99 === ch$1 || isOctalDigit2(ch$1)) && state.raise("Invalid class escape"), state.raise("Invalid escape");
            }
            state.pos = start;
          }
          var ch = state.current();
          return 93 !== ch && (state.lastIntValue = ch, state.advance(), true);
        }, pp$12.regexp_eatClassEscape = function(state) {
          var start = state.pos;
          if (state.eat(98))
            return state.lastIntValue = 8, true;
          if (state.switchU && state.eat(45))
            return state.lastIntValue = 45, true;
          if (!state.switchU && state.eat(99)) {
            if (this.regexp_eatClassControlLetter(state))
              return true;
            state.pos = start;
          }
          return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
        }, pp$12.regexp_eatClassControlLetter = function(state) {
          var ch = state.current();
          return !(!isDecimalDigit2(ch) && 95 !== ch) && (state.lastIntValue = ch % 32, state.advance(), true);
        }, pp$12.regexp_eatHexEscapeSequence = function(state) {
          var start = state.pos;
          if (state.eat(120)) {
            if (this.regexp_eatFixedHexDigits(state, 2))
              return true;
            state.switchU && state.raise("Invalid escape"), state.pos = start;
          }
          return false;
        }, pp$12.regexp_eatDecimalDigits = function(state) {
          var start = state.pos, ch = 0;
          for (state.lastIntValue = 0; isDecimalDigit2(ch = state.current()); )
            state.lastIntValue = 10 * state.lastIntValue + (ch - 48), state.advance();
          return state.pos !== start;
        }, pp$12.regexp_eatHexDigits = function(state) {
          var start = state.pos, ch = 0;
          for (state.lastIntValue = 0; isHexDigit2(ch = state.current()); )
            state.lastIntValue = 16 * state.lastIntValue + hexToInt2(ch), state.advance();
          return state.pos !== start;
        }, pp$12.regexp_eatLegacyOctalEscapeSequence = function(state) {
          if (this.regexp_eatOctalDigit(state)) {
            var n1 = state.lastIntValue;
            if (this.regexp_eatOctalDigit(state)) {
              var n2 = state.lastIntValue;
              n1 <= 3 && this.regexp_eatOctalDigit(state) ? state.lastIntValue = 64 * n1 + 8 * n2 + state.lastIntValue : state.lastIntValue = 8 * n1 + n2;
            } else
              state.lastIntValue = n1;
            return true;
          }
          return false;
        }, pp$12.regexp_eatOctalDigit = function(state) {
          var ch = state.current();
          return isOctalDigit2(ch) ? (state.lastIntValue = ch - 48, state.advance(), true) : (state.lastIntValue = 0, false);
        }, pp$12.regexp_eatFixedHexDigits = function(state, length) {
          var start = state.pos;
          state.lastIntValue = 0;
          for (var i2 = 0; i2 < length; ++i2) {
            var ch = state.current();
            if (!isHexDigit2(ch))
              return state.pos = start, false;
            state.lastIntValue = 16 * state.lastIntValue + hexToInt2(ch), state.advance();
          }
          return true;
        };
        var Token3 = function(p) {
          this.type = p.type, this.value = p.value, this.start = p.start, this.end = p.end, p.options.locations && (this.loc = new SourceLocation3(p, p.startLoc, p.endLoc)), p.options.ranges && (this.range = [p.start, p.end]);
        }, pp2 = Parser3.prototype;
        function stringToBigInt2(str) {
          return "function" != typeof BigInt ? null : BigInt(str.replace(/_/g, ""));
        }
        pp2.next = function(ignoreEscapeSequenceInKeyword) {
          !ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc && this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword), this.options.onToken && this.options.onToken(new Token3(this)), this.lastTokEnd = this.end, this.lastTokStart = this.start, this.lastTokEndLoc = this.endLoc, this.lastTokStartLoc = this.startLoc, this.nextToken();
        }, pp2.getToken = function() {
          return this.next(), new Token3(this);
        }, "undefined" != typeof Symbol && (pp2[Symbol.iterator] = function() {
          var this$1$1 = this;
          return { next: function() {
            var token = this$1$1.getToken();
            return { done: token.type === types$12.eof, value: token };
          } };
        }), pp2.nextToken = function() {
          var curContext = this.curContext();
          return curContext && curContext.preserveSpace || this.skipSpace(), this.start = this.pos, this.options.locations && (this.startLoc = this.curPosition()), this.pos >= this.input.length ? this.finishToken(types$12.eof) : curContext.override ? curContext.override(this) : void this.readToken(this.fullCharCodeAtPos());
        }, pp2.readToken = function(code) {
          return isIdentifierStart2(code, this.options.ecmaVersion >= 6) || 92 === code ? this.readWord() : this.getTokenFromCode(code);
        }, pp2.fullCharCodeAtPos = function() {
          var code = this.input.charCodeAt(this.pos);
          if (code <= 55295 || code >= 56320)
            return code;
          var next = this.input.charCodeAt(this.pos + 1);
          return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;
        }, pp2.skipBlockComment = function() {
          var startLoc = this.options.onComment && this.curPosition(), start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
          if (-1 === end && this.raise(this.pos - 2, "Unterminated comment"), this.pos = end + 2, this.options.locations)
            for (var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak2(this.input, pos, this.pos)) > -1; )
              ++this.curLine, pos = this.lineStart = nextBreak;
          this.options.onComment && this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
        }, pp2.skipLineComment = function(startSkip) {
          for (var start = this.pos, startLoc = this.options.onComment && this.curPosition(), ch = this.input.charCodeAt(this.pos += startSkip); this.pos < this.input.length && !isNewLine2(ch); )
            ch = this.input.charCodeAt(++this.pos);
          this.options.onComment && this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
        }, pp2.skipSpace = function() {
          loop:
            for (; this.pos < this.input.length; ) {
              var ch = this.input.charCodeAt(this.pos);
              switch (ch) {
                case 32:
                case 160:
                  ++this.pos;
                  break;
                case 13:
                  10 === this.input.charCodeAt(this.pos + 1) && ++this.pos;
                case 10:
                case 8232:
                case 8233:
                  ++this.pos, this.options.locations && (++this.curLine, this.lineStart = this.pos);
                  break;
                case 47:
                  switch (this.input.charCodeAt(this.pos + 1)) {
                    case 42:
                      this.skipBlockComment();
                      break;
                    case 47:
                      this.skipLineComment(2);
                      break;
                    default:
                      break loop;
                  }
                  break;
                default:
                  if (!(ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace2.test(String.fromCharCode(ch))))
                    break loop;
                  ++this.pos;
              }
            }
        }, pp2.finishToken = function(type, val) {
          this.end = this.pos, this.options.locations && (this.endLoc = this.curPosition());
          var prevType = this.type;
          this.type = type, this.value = val, this.updateContext(prevType);
        }, pp2.readToken_dot = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next >= 48 && next <= 57)
            return this.readNumber(true);
          var next2 = this.input.charCodeAt(this.pos + 2);
          return this.options.ecmaVersion >= 6 && 46 === next && 46 === next2 ? (this.pos += 3, this.finishToken(types$12.ellipsis)) : (++this.pos, this.finishToken(types$12.dot));
        }, pp2.readToken_slash = function() {
          var next = this.input.charCodeAt(this.pos + 1);
          return this.exprAllowed ? (++this.pos, this.readRegexp()) : 61 === next ? this.finishOp(types$12.assign, 2) : this.finishOp(types$12.slash, 1);
        }, pp2.readToken_mult_modulo_exp = function(code) {
          var next = this.input.charCodeAt(this.pos + 1), size = 1, tokentype = 42 === code ? types$12.star : types$12.modulo;
          return this.options.ecmaVersion >= 7 && 42 === code && 42 === next && (++size, tokentype = types$12.starstar, next = this.input.charCodeAt(this.pos + 2)), 61 === next ? this.finishOp(types$12.assign, size + 1) : this.finishOp(tokentype, size);
        }, pp2.readToken_pipe_amp = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === code) {
            if (this.options.ecmaVersion >= 12) {
              if (61 === this.input.charCodeAt(this.pos + 2))
                return this.finishOp(types$12.assign, 3);
            }
            return this.finishOp(124 === code ? types$12.logicalOR : types$12.logicalAND, 2);
          }
          return 61 === next ? this.finishOp(types$12.assign, 2) : this.finishOp(124 === code ? types$12.bitwiseOR : types$12.bitwiseAND, 1);
        }, pp2.readToken_caret = function() {
          return 61 === this.input.charCodeAt(this.pos + 1) ? this.finishOp(types$12.assign, 2) : this.finishOp(types$12.bitwiseXOR, 1);
        }, pp2.readToken_plus_min = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          return next === code ? 45 !== next || this.inModule || 62 !== this.input.charCodeAt(this.pos + 2) || 0 !== this.lastTokEnd && !lineBreak2.test(this.input.slice(this.lastTokEnd, this.pos)) ? this.finishOp(types$12.incDec, 2) : (this.skipLineComment(3), this.skipSpace(), this.nextToken()) : 61 === next ? this.finishOp(types$12.assign, 2) : this.finishOp(types$12.plusMin, 1);
        }, pp2.readToken_lt_gt = function(code) {
          var next = this.input.charCodeAt(this.pos + 1), size = 1;
          return next === code ? (size = 62 === code && 62 === this.input.charCodeAt(this.pos + 2) ? 3 : 2, 61 === this.input.charCodeAt(this.pos + size) ? this.finishOp(types$12.assign, size + 1) : this.finishOp(types$12.bitShift, size)) : 33 !== next || 60 !== code || this.inModule || 45 !== this.input.charCodeAt(this.pos + 2) || 45 !== this.input.charCodeAt(this.pos + 3) ? (61 === next && (size = 2), this.finishOp(types$12.relational, size)) : (this.skipLineComment(4), this.skipSpace(), this.nextToken());
        }, pp2.readToken_eq_excl = function(code) {
          var next = this.input.charCodeAt(this.pos + 1);
          return 61 === next ? this.finishOp(types$12.equality, 61 === this.input.charCodeAt(this.pos + 2) ? 3 : 2) : 61 === code && 62 === next && this.options.ecmaVersion >= 6 ? (this.pos += 2, this.finishToken(types$12.arrow)) : this.finishOp(61 === code ? types$12.eq : types$12.prefix, 1);
        }, pp2.readToken_question = function() {
          var ecmaVersion = this.options.ecmaVersion;
          if (ecmaVersion >= 11) {
            var next = this.input.charCodeAt(this.pos + 1);
            if (46 === next) {
              var next2 = this.input.charCodeAt(this.pos + 2);
              if (next2 < 48 || next2 > 57)
                return this.finishOp(types$12.questionDot, 2);
            }
            if (63 === next) {
              if (ecmaVersion >= 12) {
                if (61 === this.input.charCodeAt(this.pos + 2))
                  return this.finishOp(types$12.assign, 3);
              }
              return this.finishOp(types$12.coalesce, 2);
            }
          }
          return this.finishOp(types$12.question, 1);
        }, pp2.readToken_numberSign = function() {
          var code = 35;
          if (this.options.ecmaVersion >= 13 && (++this.pos, isIdentifierStart2(code = this.fullCharCodeAtPos(), true) || 92 === code))
            return this.finishToken(types$12.privateId, this.readWord1());
          this.raise(this.pos, "Unexpected character '" + codePointToString2(code) + "'");
        }, pp2.getTokenFromCode = function(code) {
          switch (code) {
            case 46:
              return this.readToken_dot();
            case 40:
              return ++this.pos, this.finishToken(types$12.parenL);
            case 41:
              return ++this.pos, this.finishToken(types$12.parenR);
            case 59:
              return ++this.pos, this.finishToken(types$12.semi);
            case 44:
              return ++this.pos, this.finishToken(types$12.comma);
            case 91:
              return ++this.pos, this.finishToken(types$12.bracketL);
            case 93:
              return ++this.pos, this.finishToken(types$12.bracketR);
            case 123:
              return ++this.pos, this.finishToken(types$12.braceL);
            case 125:
              return ++this.pos, this.finishToken(types$12.braceR);
            case 58:
              return ++this.pos, this.finishToken(types$12.colon);
            case 96:
              if (this.options.ecmaVersion < 6)
                break;
              return ++this.pos, this.finishToken(types$12.backQuote);
            case 48:
              var next = this.input.charCodeAt(this.pos + 1);
              if (120 === next || 88 === next)
                return this.readRadixNumber(16);
              if (this.options.ecmaVersion >= 6) {
                if (111 === next || 79 === next)
                  return this.readRadixNumber(8);
                if (98 === next || 66 === next)
                  return this.readRadixNumber(2);
              }
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              return this.readNumber(false);
            case 34:
            case 39:
              return this.readString(code);
            case 47:
              return this.readToken_slash();
            case 37:
            case 42:
              return this.readToken_mult_modulo_exp(code);
            case 124:
            case 38:
              return this.readToken_pipe_amp(code);
            case 94:
              return this.readToken_caret();
            case 43:
            case 45:
              return this.readToken_plus_min(code);
            case 60:
            case 62:
              return this.readToken_lt_gt(code);
            case 61:
            case 33:
              return this.readToken_eq_excl(code);
            case 63:
              return this.readToken_question();
            case 126:
              return this.finishOp(types$12.prefix, 1);
            case 35:
              return this.readToken_numberSign();
          }
          this.raise(this.pos, "Unexpected character '" + codePointToString2(code) + "'");
        }, pp2.finishOp = function(type, size) {
          var str = this.input.slice(this.pos, this.pos + size);
          return this.pos += size, this.finishToken(type, str);
        }, pp2.readRegexp = function() {
          for (var escaped, inClass, start = this.pos; ; ) {
            this.pos >= this.input.length && this.raise(start, "Unterminated regular expression");
            var ch = this.input.charAt(this.pos);
            if (lineBreak2.test(ch) && this.raise(start, "Unterminated regular expression"), escaped)
              escaped = false;
            else {
              if ("[" === ch)
                inClass = true;
              else if ("]" === ch && inClass)
                inClass = false;
              else if ("/" === ch && !inClass)
                break;
              escaped = "\\" === ch;
            }
            ++this.pos;
          }
          var pattern = this.input.slice(start, this.pos);
          ++this.pos;
          var flagsStart = this.pos, flags = this.readWord1();
          this.containsEsc && this.unexpected(flagsStart);
          var state = this.regexpState || (this.regexpState = new RegExpValidationState3(this));
          state.reset(start, pattern, flags), this.validateRegExpFlags(state), this.validateRegExpPattern(state);
          var value = null;
          try {
            value = new RegExp(pattern, flags);
          } catch (e) {
          }
          return this.finishToken(types$12.regexp, { pattern, flags, value });
        }, pp2.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
          for (var allowSeparators = this.options.ecmaVersion >= 12 && void 0 === len, isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && 48 === this.input.charCodeAt(this.pos), start = this.pos, total = 0, lastCode = 0, i2 = 0, e = null == len ? 1 / 0 : len; i2 < e; ++i2, ++this.pos) {
            var code = this.input.charCodeAt(this.pos), val = void 0;
            if (allowSeparators && 95 === code)
              isLegacyOctalNumericLiteral && this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals"), 95 === lastCode && this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore"), 0 === i2 && this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits"), lastCode = code;
            else {
              if ((val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : code >= 48 && code <= 57 ? code - 48 : 1 / 0) >= radix)
                break;
              lastCode = code, total = total * radix + val;
            }
          }
          return allowSeparators && 95 === lastCode && this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits"), this.pos === start || null != len && this.pos - start !== len ? null : total;
        }, pp2.readRadixNumber = function(radix) {
          var start = this.pos;
          this.pos += 2;
          var val = this.readInt(radix);
          return null == val && this.raise(this.start + 2, "Expected number in radix " + radix), this.options.ecmaVersion >= 11 && 110 === this.input.charCodeAt(this.pos) ? (val = stringToBigInt2(this.input.slice(start, this.pos)), ++this.pos) : isIdentifierStart2(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$12.num, val);
        }, pp2.readNumber = function(startsWithDot) {
          var start = this.pos;
          startsWithDot || null !== this.readInt(10, void 0, true) || this.raise(start, "Invalid number");
          var octal = this.pos - start >= 2 && 48 === this.input.charCodeAt(start);
          octal && this.strict && this.raise(start, "Invalid number");
          var next = this.input.charCodeAt(this.pos);
          if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && 110 === next) {
            var val$1 = stringToBigInt2(this.input.slice(start, this.pos));
            return ++this.pos, isIdentifierStart2(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number"), this.finishToken(types$12.num, val$1);
          }
          octal && /[89]/.test(this.input.slice(start, this.pos)) && (octal = false), 46 !== next || octal || (++this.pos, this.readInt(10), next = this.input.charCodeAt(this.pos)), 69 !== next && 101 !== next || octal || (43 !== (next = this.input.charCodeAt(++this.pos)) && 45 !== next || ++this.pos, null === this.readInt(10) && this.raise(start, "Invalid number")), isIdentifierStart2(this.fullCharCodeAtPos()) && this.raise(this.pos, "Identifier directly after number");
          var str, val = (str = this.input.slice(start, this.pos), octal ? parseInt(str, 8) : parseFloat(str.replace(/_/g, "")));
          return this.finishToken(types$12.num, val);
        }, pp2.readCodePoint = function() {
          var code;
          if (123 === this.input.charCodeAt(this.pos)) {
            this.options.ecmaVersion < 6 && this.unexpected();
            var codePos = ++this.pos;
            code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos), ++this.pos, code > 1114111 && this.invalidStringToken(codePos, "Code point out of bounds");
          } else
            code = this.readHexChar(4);
          return code;
        }, pp2.readString = function(quote) {
          for (var out = "", chunkStart = ++this.pos; ; ) {
            this.pos >= this.input.length && this.raise(this.start, "Unterminated string constant");
            var ch = this.input.charCodeAt(this.pos);
            if (ch === quote)
              break;
            92 === ch ? (out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(false), chunkStart = this.pos) : 8232 === ch || 8233 === ch ? (this.options.ecmaVersion < 10 && this.raise(this.start, "Unterminated string constant"), ++this.pos, this.options.locations && (this.curLine++, this.lineStart = this.pos)) : (isNewLine2(ch) && this.raise(this.start, "Unterminated string constant"), ++this.pos);
          }
          return out += this.input.slice(chunkStart, this.pos++), this.finishToken(types$12.string, out);
        };
        var INVALID_TEMPLATE_ESCAPE_ERROR2 = {};
        pp2.tryReadTemplateToken = function() {
          this.inTemplateElement = true;
          try {
            this.readTmplToken();
          } catch (err) {
            if (err !== INVALID_TEMPLATE_ESCAPE_ERROR2)
              throw err;
            this.readInvalidTemplateToken();
          }
          this.inTemplateElement = false;
        }, pp2.invalidStringToken = function(position, message) {
          if (this.inTemplateElement && this.options.ecmaVersion >= 9)
            throw INVALID_TEMPLATE_ESCAPE_ERROR2;
          this.raise(position, message);
        }, pp2.readTmplToken = function() {
          for (var out = "", chunkStart = this.pos; ; ) {
            this.pos >= this.input.length && this.raise(this.start, "Unterminated template");
            var ch = this.input.charCodeAt(this.pos);
            if (96 === ch || 36 === ch && 123 === this.input.charCodeAt(this.pos + 1))
              return this.pos !== this.start || this.type !== types$12.template && this.type !== types$12.invalidTemplate ? (out += this.input.slice(chunkStart, this.pos), this.finishToken(types$12.template, out)) : 36 === ch ? (this.pos += 2, this.finishToken(types$12.dollarBraceL)) : (++this.pos, this.finishToken(types$12.backQuote));
            if (92 === ch)
              out += this.input.slice(chunkStart, this.pos), out += this.readEscapedChar(true), chunkStart = this.pos;
            else if (isNewLine2(ch)) {
              switch (out += this.input.slice(chunkStart, this.pos), ++this.pos, ch) {
                case 13:
                  10 === this.input.charCodeAt(this.pos) && ++this.pos;
                case 10:
                  out += "\n";
                  break;
                default:
                  out += String.fromCharCode(ch);
              }
              this.options.locations && (++this.curLine, this.lineStart = this.pos), chunkStart = this.pos;
            } else
              ++this.pos;
          }
        }, pp2.readInvalidTemplateToken = function() {
          for (; this.pos < this.input.length; this.pos++)
            switch (this.input[this.pos]) {
              case "\\":
                ++this.pos;
                break;
              case "$":
                if ("{" !== this.input[this.pos + 1])
                  break;
              case "`":
                return this.finishToken(types$12.invalidTemplate, this.input.slice(this.start, this.pos));
            }
          this.raise(this.start, "Unterminated template");
        }, pp2.readEscapedChar = function(inTemplate) {
          var ch = this.input.charCodeAt(++this.pos);
          switch (++this.pos, ch) {
            case 110:
              return "\n";
            case 114:
              return "\r";
            case 120:
              return String.fromCharCode(this.readHexChar(2));
            case 117:
              return codePointToString2(this.readCodePoint());
            case 116:
              return "	";
            case 98:
              return "\b";
            case 118:
              return "\v";
            case 102:
              return "\f";
            case 13:
              10 === this.input.charCodeAt(this.pos) && ++this.pos;
            case 10:
              return this.options.locations && (this.lineStart = this.pos, ++this.curLine), "";
            case 56:
            case 57:
              if (this.strict && this.invalidStringToken(this.pos - 1, "Invalid escape sequence"), inTemplate) {
                var codePos = this.pos - 1;
                return this.invalidStringToken(codePos, "Invalid escape sequence in template string"), null;
              }
            default:
              if (ch >= 48 && ch <= 55) {
                var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
                return octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), this.pos += octalStr.length - 1, ch = this.input.charCodeAt(this.pos), "0" === octalStr && 56 !== ch && 57 !== ch || !this.strict && !inTemplate || this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"), String.fromCharCode(octal);
              }
              return isNewLine2(ch) ? "" : String.fromCharCode(ch);
          }
        }, pp2.readHexChar = function(len) {
          var codePos = this.pos, n = this.readInt(16, len);
          return null === n && this.invalidStringToken(codePos, "Bad character escape sequence"), n;
        }, pp2.readWord1 = function() {
          this.containsEsc = false;
          for (var word = "", first = true, chunkStart = this.pos, astral = this.options.ecmaVersion >= 6; this.pos < this.input.length; ) {
            var ch = this.fullCharCodeAtPos();
            if (isIdentifierChar2(ch, astral))
              this.pos += ch <= 65535 ? 1 : 2;
            else {
              if (92 !== ch)
                break;
              this.containsEsc = true, word += this.input.slice(chunkStart, this.pos);
              var escStart = this.pos;
              117 !== this.input.charCodeAt(++this.pos) && this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX"), ++this.pos;
              var esc = this.readCodePoint();
              (first ? isIdentifierStart2 : isIdentifierChar2)(esc, astral) || this.invalidStringToken(escStart, "Invalid Unicode escape"), word += codePointToString2(esc), chunkStart = this.pos;
            }
            first = false;
          }
          return word + this.input.slice(chunkStart, this.pos);
        }, pp2.readWord = function() {
          var word = this.readWord1(), type = types$12.name;
          return this.keywords.test(word) && (type = keywords2[word]), this.finishToken(type, word);
        };
        Parser3.acorn = { Parser: Parser3, version: "8.8.0", defaultOptions: defaultOptions2, Position: Position3, SourceLocation: SourceLocation3, getLineInfo: getLineInfo2, Node: Node3, TokenType: TokenType3, tokTypes: types$12, keywordTypes: keywords2, TokContext: TokContext3, tokContexts: types2, isIdentifierChar: isIdentifierChar2, isIdentifierStart: isIdentifierStart2, Token: Token3, isNewLine: isNewLine2, lineBreak: lineBreak2, lineBreakG: lineBreakG2, nonASCIIwhitespace: nonASCIIwhitespace2 };
        Math.floor, String.fromCharCode;
        const TRAILING_SLASH_RE2 = /\/$|\/\?/;
        function hasTrailingSlash2(input = "", queryParams = false) {
          return queryParams ? TRAILING_SLASH_RE2.test(input) : input.endsWith("/");
        }
        function withTrailingSlash2(input = "", queryParams = false) {
          if (!queryParams)
            return input.endsWith("/") ? input : input + "/";
          if (hasTrailingSlash2(input, true))
            return input || "/";
          const [s0, ...s] = input.split("?");
          return s0 + "/" + (s.length ? `?${s.join("?")}` : "");
        }
        function hasLeadingSlash2(input = "") {
          return input.startsWith("/");
        }
        function withoutLeadingSlash2(input = "") {
          return (hasLeadingSlash2(input) ? input.substr(1) : input) || "/";
        }
        function isNonEmptyURL2(url) {
          return url && "/" !== url;
        }
        function joinURL2(base, ...input) {
          let url = base || "";
          for (const i2 of input.filter(isNonEmptyURL2))
            url = url ? withTrailingSlash2(url) + withoutLeadingSlash2(i2) : i2;
          return url;
        }
        var external_path_ = __webpack_require__("path");
        const external_assert_namespaceObject = _chunkI7OK7DX6cjs.__require.call(void 0, "assert");
        var external_util_ = __webpack_require__("util");
        const BUILTIN_MODULES2 = new Set(external_module_.builtinModules);
        function normalizeSlash2(str) {
          return str.replace(/\\/g, "/");
        }
        const reader2 = { read: function(jsonPath) {
          return find2(external_path_.dirname(jsonPath));
        } };
        function find2(dir) {
          try {
            return { string: external_fs_.readFileSync(external_path_.toNamespacedPath(external_path_.join(dir, "package.json")), "utf8") };
          } catch (error) {
            if ("ENOENT" === error.code) {
              const parent = external_path_.dirname(dir);
              return dir !== parent ? find2(parent) : { string: void 0 };
            }
            throw error;
          }
        }
        const isWindows3 = "win32" === process.platform, own$12 = {}.hasOwnProperty, codes2 = {}, messages2 = /* @__PURE__ */ new Map();
        let userStackTraceLimit2;
        function createError2(sym, value, def) {
          return messages2.set(sym, value), function(Base, key) {
            return NodeError;
            function NodeError(...args) {
              const limit = Error.stackTraceLimit;
              isErrorStackTraceLimitWritable2() && (Error.stackTraceLimit = 0);
              const error = new Base();
              isErrorStackTraceLimitWritable2() && (Error.stackTraceLimit = limit);
              const message = function(key2, args2, self2) {
                const message2 = messages2.get(key2);
                if ("function" == typeof message2)
                  return external_assert_namespaceObject(message2.length <= args2.length, `Code: ${key2}; The provided arguments length (${args2.length}) does not match the required ones (${message2.length}).`), Reflect.apply(message2, self2, args2);
                const expectedLength = (message2.match(/%[dfijoOs]/g) || []).length;
                if (external_assert_namespaceObject(expectedLength === args2.length, `Code: ${key2}; The provided arguments length (${args2.length}) does not match the required ones (${expectedLength}).`), 0 === args2.length)
                  return message2;
                return args2.unshift(message2), Reflect.apply(external_util_.format, null, args2);
              }(key, args, error);
              return Object.defineProperty(error, "message", { value: message, enumerable: false, writable: true, configurable: true }), Object.defineProperty(error, "toString", { value() {
                return `${this.name} [${key}]: ${this.message}`;
              }, enumerable: false, writable: true, configurable: true }), addCodeToName2(error, Base.name, key), error.code = key, error;
            }
          }(def, sym);
        }
        codes2.ERR_INVALID_MODULE_SPECIFIER = createError2("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base) => `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes2.ERR_INVALID_PACKAGE_CONFIG = createError2("ERR_INVALID_PACKAGE_CONFIG", (path3, base, message) => `Invalid package config ${path3}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes2.ERR_INVALID_PACKAGE_TARGET = createError2("ERR_INVALID_PACKAGE_TARGET", (pkgPath, key, target, isImport = false, base) => {
          const relError = "string" == typeof target && !isImport && target.length > 0 && !target.startsWith("./");
          return "." === key ? (external_assert_namespaceObject(false === isImport), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ""}${relError ? '; targets must start with "./"' : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ""}${relError ? '; targets must start with "./"' : ""}`;
        }, Error), codes2.ERR_MODULE_NOT_FOUND = createError2("ERR_MODULE_NOT_FOUND", (path3, base, type = "package") => `Cannot find ${type} '${path3}' imported from ${base}`, Error), codes2.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError2("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes2.ERR_PACKAGE_PATH_NOT_EXPORTED = createError2("ERR_PACKAGE_PATH_NOT_EXPORTED", (pkgPath, subpath, base) => "." === subpath ? `No "exports" main defined in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes2.ERR_UNSUPPORTED_DIR_IMPORT = createError2("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes2.ERR_UNKNOWN_FILE_EXTENSION = createError2("ERR_UNKNOWN_FILE_EXTENSION", 'Unknown file extension "%s" for %s', TypeError), codes2.ERR_INVALID_ARG_VALUE = createError2("ERR_INVALID_ARG_VALUE", (name, value, reason = "is invalid") => {
          let inspected = (0, external_util_.inspect)(value);
          inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
          return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
        }, TypeError), codes2.ERR_UNSUPPORTED_ESM_URL_SCHEME = createError2("ERR_UNSUPPORTED_ESM_URL_SCHEME", (url) => {
          let message = "Only file and data URLs are supported by the default ESM loader";
          return isWindows3 && 2 === url.protocol.length && (message += ". On Windows, absolute paths must be valid file:// URLs"), message += `. Received protocol '${url.protocol}'`, message;
        }, Error);
        const addCodeToName2 = hideStackFrames2(function(error, name, code) {
          (error = captureLargerStackTrace2(error)).name = `${name} [${code}]`, error.stack, "SystemError" === name ? Object.defineProperty(error, "name", { value: name, enumerable: false, writable: true, configurable: true }) : delete error.name;
        });
        function isErrorStackTraceLimitWritable2() {
          const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
          return void 0 === desc ? Object.isExtensible(Error) : own$12.call(desc, "writable") ? desc.writable : void 0 !== desc.set;
        }
        function hideStackFrames2(fn) {
          const hidden = "__node_internal_" + fn.name;
          return Object.defineProperty(fn, "name", { value: hidden }), fn;
        }
        const captureLargerStackTrace2 = hideStackFrames2(function(error) {
          const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable2();
          return stackTraceLimitIsWritable && (userStackTraceLimit2 = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit2), error;
        });
        const { ERR_UNKNOWN_FILE_EXTENSION: ERR_UNKNOWN_FILE_EXTENSION2 } = codes2, extensionFormatMap2 = { __proto__: null, ".cjs": "commonjs", ".js": "module", ".mjs": "module" };
        function defaultGetFormat2(url) {
          if (url.startsWith("node:"))
            return { format: "builtin" };
          const parsed = new external_url_namespaceObject.URL(url);
          if ("data:" === parsed.protocol) {
            const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [null, null];
            return { format: "text/javascript" === mime ? "module" : null };
          }
          if ("file:" === parsed.protocol) {
            const ext = external_path_.extname(parsed.pathname);
            let format2;
            if (format2 = ".js" === ext ? "module" === function(url2) {
              return getPackageScopeConfig2(url2).type;
            }(parsed.href) ? "module" : "commonjs" : extensionFormatMap2[ext], !format2)
              throw new ERR_UNKNOWN_FILE_EXTENSION2(ext, (0, external_url_namespaceObject.fileURLToPath)(url));
            return { format: format2 || null };
          }
          return { format: null };
        }
        const { ERR_INVALID_MODULE_SPECIFIER: ERR_INVALID_MODULE_SPECIFIER2, ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG2, ERR_INVALID_PACKAGE_TARGET: ERR_INVALID_PACKAGE_TARGET2, ERR_MODULE_NOT_FOUND: ERR_MODULE_NOT_FOUND2, ERR_PACKAGE_IMPORT_NOT_DEFINED: ERR_PACKAGE_IMPORT_NOT_DEFINED2, ERR_PACKAGE_PATH_NOT_EXPORTED: ERR_PACKAGE_PATH_NOT_EXPORTED2, ERR_UNSUPPORTED_DIR_IMPORT: ERR_UNSUPPORTED_DIR_IMPORT2, ERR_UNSUPPORTED_ESM_URL_SCHEME: ERR_UNSUPPORTED_ESM_URL_SCHEME2, ERR_INVALID_ARG_VALUE: ERR_INVALID_ARG_VALUE2 } = codes2, own2 = {}.hasOwnProperty;
        Object.freeze(["node", "import"]);
        const invalidSegmentRegEx2 = /(^|\\|\/)(\.\.?|node_modules)(\\|\/|$)/, patternRegEx2 = /\*/g, encodedSepRegEx2 = /%2f|%2c/i, emittedPackageWarnings2 = /* @__PURE__ */ new Set(), packageJsonCache2 = /* @__PURE__ */ new Map();
        function emitFolderMapDeprecation2(match, pjsonUrl, isExports, base) {
          const pjsonPath = (0, external_url_namespaceObject.fileURLToPath)(pjsonUrl);
          emittedPackageWarnings2.has(pjsonPath + "|" + match) || (emittedPackageWarnings2.add(pjsonPath + "|" + match), process.emitWarning(`Use of deprecated folder mapping "${match}" in the ${isExports ? '"exports"' : '"imports"'} field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, external_url_namespaceObject.fileURLToPath)(base)}` : ""}.
Update this package.json to use a subpath pattern like "${match}*".`, "DeprecationWarning", "DEP0148"));
        }
        function emitLegacyIndexDeprecation2(url, packageJsonUrl, base, main) {
          const { format: format2 } = defaultGetFormat2(url.href);
          if ("module" !== format2)
            return;
          const path22 = (0, external_url_namespaceObject.fileURLToPath)(url.href), pkgPath = (0, external_url_namespaceObject.fileURLToPath)(new URL(".", packageJsonUrl)), basePath = (0, external_url_namespaceObject.fileURLToPath)(base);
          main ? process.emitWarning(`Package ${pkgPath} has a "main" field set to ${JSON.stringify(main)}, excluding the full filename and extension to the resolved file at "${path22.slice(pkgPath.length)}", imported from ${basePath}.
 Automatic extension resolution of the "main" field isdeprecated for ES modules.`, "DeprecationWarning", "DEP0151") : process.emitWarning(`No "main" or "exports" field defined in the package.json for ${pkgPath} resolving the main entry point "${path22.slice(pkgPath.length)}", imported from ${basePath}.
Default "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
        }
        function tryStatSync2(path22) {
          try {
            return (0, external_fs_.statSync)(path22);
          } catch (e) {
            return new external_fs_.Stats();
          }
        }
        function getPackageConfig2(path22, specifier, base) {
          const existing = packageJsonCache2.get(path22);
          if (void 0 !== existing)
            return existing;
          const source = reader2.read(path22).string;
          if (void 0 === source) {
            const packageConfig2 = { pjsonPath: path22, exists: false, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
            return packageJsonCache2.set(path22, packageConfig2), packageConfig2;
          }
          let packageJson;
          try {
            packageJson = JSON.parse(source);
          } catch (error) {
            throw new ERR_INVALID_PACKAGE_CONFIG2(path22, (base ? `"${specifier}" from ` : "") + (0, external_url_namespaceObject.fileURLToPath)(base || specifier), error.message);
          }
          const { exports: exports2, imports, main, name, type } = packageJson, packageConfig = { pjsonPath: path22, exists: true, main: "string" == typeof main ? main : void 0, name: "string" == typeof name ? name : void 0, type: "module" === type || "commonjs" === type ? type : "none", exports: exports2, imports: imports && "object" == typeof imports ? imports : void 0 };
          return packageJsonCache2.set(path22, packageConfig), packageConfig;
        }
        function getPackageScopeConfig2(resolved) {
          let packageJsonUrl = new URL("./package.json", resolved);
          for (; ; ) {
            if (packageJsonUrl.pathname.endsWith("node_modules/package.json"))
              break;
            const packageConfig2 = getPackageConfig2((0, external_url_namespaceObject.fileURLToPath)(packageJsonUrl), resolved);
            if (packageConfig2.exists)
              return packageConfig2;
            const lastPackageJsonUrl = packageJsonUrl;
            if (packageJsonUrl = new URL("../package.json", packageJsonUrl), packageJsonUrl.pathname === lastPackageJsonUrl.pathname)
              break;
          }
          const packageJsonPath = (0, external_url_namespaceObject.fileURLToPath)(packageJsonUrl), packageConfig = { pjsonPath: packageJsonPath, exists: false, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
          return packageJsonCache2.set(packageJsonPath, packageConfig), packageConfig;
        }
        function fileExists2(url) {
          return tryStatSync2((0, external_url_namespaceObject.fileURLToPath)(url)).isFile();
        }
        function legacyMainResolve2(packageJsonUrl, packageConfig, base) {
          let guess;
          if (void 0 !== packageConfig.main) {
            if (guess = new URL(`./${packageConfig.main}`, packageJsonUrl), fileExists2(guess))
              return guess;
            const tries2 = [`./${packageConfig.main}.js`, `./${packageConfig.main}.json`, `./${packageConfig.main}.node`, `./${packageConfig.main}/index.js`, `./${packageConfig.main}/index.json`, `./${packageConfig.main}/index.node`];
            let i22 = -1;
            for (; ++i22 < tries2.length && (guess = new URL(tries2[i22], packageJsonUrl), !fileExists2(guess)); )
              guess = void 0;
            if (guess)
              return emitLegacyIndexDeprecation2(guess, packageJsonUrl, base, packageConfig.main), guess;
          }
          const tries = ["./index.js", "./index.json", "./index.node"];
          let i2 = -1;
          for (; ++i2 < tries.length && (guess = new URL(tries[i2], packageJsonUrl), !fileExists2(guess)); )
            guess = void 0;
          if (guess)
            return emitLegacyIndexDeprecation2(guess, packageJsonUrl, base, packageConfig.main), guess;
          throw new ERR_MODULE_NOT_FOUND2((0, external_url_namespaceObject.fileURLToPath)(new URL(".", packageJsonUrl)), (0, external_url_namespaceObject.fileURLToPath)(base));
        }
        function throwExportsNotFound2(subpath, packageJsonUrl, base) {
          throw new ERR_PACKAGE_PATH_NOT_EXPORTED2((0, external_url_namespaceObject.fileURLToPath)(new URL(".", packageJsonUrl)), subpath, base && (0, external_url_namespaceObject.fileURLToPath)(base));
        }
        function throwInvalidPackageTarget2(subpath, target, packageJsonUrl, internal2, base) {
          throw target = "object" == typeof target && null !== target ? JSON.stringify(target, null, "") : `${target}`, new ERR_INVALID_PACKAGE_TARGET2((0, external_url_namespaceObject.fileURLToPath)(new URL(".", packageJsonUrl)), subpath, target, internal2, base && (0, external_url_namespaceObject.fileURLToPath)(base));
        }
        function resolvePackageTargetString2(target, subpath, match, packageJsonUrl, base, pattern, internal2, conditions) {
          if ("" === subpath || pattern || "/" === target[target.length - 1] || throwInvalidPackageTarget2(match, target, packageJsonUrl, internal2, base), !target.startsWith("./")) {
            if (internal2 && !target.startsWith("../") && !target.startsWith("/")) {
              let isURL = false;
              try {
                new URL(target), isURL = true;
              } catch (e) {
              }
              if (!isURL) {
                return packageResolve2(pattern ? target.replace(patternRegEx2, subpath) : target + subpath, packageJsonUrl, conditions);
              }
            }
            throwInvalidPackageTarget2(match, target, packageJsonUrl, internal2, base);
          }
          invalidSegmentRegEx2.test(target.slice(2)) && throwInvalidPackageTarget2(match, target, packageJsonUrl, internal2, base);
          const resolved = new URL(target, packageJsonUrl), resolvedPath = resolved.pathname, packagePath = new URL(".", packageJsonUrl).pathname;
          return resolvedPath.startsWith(packagePath) || throwInvalidPackageTarget2(match, target, packageJsonUrl, internal2, base), "" === subpath ? resolved : (invalidSegmentRegEx2.test(subpath) && function(subpath2, packageJsonUrl2, internal3, base2) {
            const reason = `request is not a valid subpath for the "${internal3 ? "imports" : "exports"}" resolution of ${(0, external_url_namespaceObject.fileURLToPath)(packageJsonUrl2)}`;
            throw new ERR_INVALID_MODULE_SPECIFIER2(subpath2, reason, base2 && (0, external_url_namespaceObject.fileURLToPath)(base2));
          }(match + subpath, packageJsonUrl, internal2, base), pattern ? new URL(resolved.href.replace(patternRegEx2, subpath)) : new URL(subpath, resolved));
        }
        function isArrayIndex2(key) {
          const keyNumber = Number(key);
          return `${keyNumber}` === key && (keyNumber >= 0 && keyNumber < 4294967295);
        }
        function resolvePackageTarget2(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal2, conditions) {
          if ("string" == typeof target)
            return resolvePackageTargetString2(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal2, conditions);
          if (Array.isArray(target)) {
            const targetList = target;
            if (0 === targetList.length)
              return null;
            let lastException, i2 = -1;
            for (; ++i2 < targetList.length; ) {
              const targetItem = targetList[i2];
              let resolved;
              try {
                resolved = resolvePackageTarget2(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal2, conditions);
              } catch (error) {
                if (lastException = error, "ERR_INVALID_PACKAGE_TARGET" === error.code)
                  continue;
                throw error;
              }
              if (void 0 !== resolved) {
                if (null !== resolved)
                  return resolved;
                lastException = null;
              }
            }
            if (null == lastException)
              return lastException;
            throw lastException;
          }
          if ("object" != typeof target || null === target) {
            if (null === target)
              return null;
            throwInvalidPackageTarget2(packageSubpath, target, packageJsonUrl, internal2, base);
          } else {
            const keys = Object.getOwnPropertyNames(target);
            let i2 = -1;
            for (; ++i2 < keys.length; ) {
              if (isArrayIndex2(keys[i2]))
                throw new ERR_INVALID_PACKAGE_CONFIG2((0, external_url_namespaceObject.fileURLToPath)(packageJsonUrl), base, '"exports" cannot contain numeric property keys.');
            }
            for (i2 = -1; ++i2 < keys.length; ) {
              const key = keys[i2];
              if ("default" === key || conditions && conditions.has(key)) {
                const resolved = resolvePackageTarget2(packageJsonUrl, target[key], subpath, packageSubpath, base, pattern, internal2, conditions);
                if (void 0 === resolved)
                  continue;
                return resolved;
              }
            }
          }
        }
        function packageExportsResolve2(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
          let exports2 = packageConfig.exports;
          if (function(exports3, packageJsonUrl2, base2) {
            if ("string" == typeof exports3 || Array.isArray(exports3))
              return true;
            if ("object" != typeof exports3 || null === exports3)
              return false;
            const keys2 = Object.getOwnPropertyNames(exports3);
            let isConditionalSugar = false, i3 = 0, j = -1;
            for (; ++j < keys2.length; ) {
              const key = keys2[j], curIsConditionalSugar = "" === key || "." !== key[0];
              if (0 == i3++)
                isConditionalSugar = curIsConditionalSugar;
              else if (isConditionalSugar !== curIsConditionalSugar)
                throw new ERR_INVALID_PACKAGE_CONFIG2((0, external_url_namespaceObject.fileURLToPath)(packageJsonUrl2), base2, `"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`);
            }
            return isConditionalSugar;
          }(exports2, packageJsonUrl, base) && (exports2 = { ".": exports2 }), own2.call(exports2, packageSubpath)) {
            const resolved = resolvePackageTarget2(packageJsonUrl, exports2[packageSubpath], "", packageSubpath, base, false, false, conditions);
            return null == resolved && throwExportsNotFound2(packageSubpath, packageJsonUrl, base), { resolved, exact: true };
          }
          let bestMatch = "";
          const keys = Object.getOwnPropertyNames(exports2);
          let i2 = -1;
          for (; ++i2 < keys.length; ) {
            const key = keys[i2];
            ("*" === key[key.length - 1] && packageSubpath.startsWith(key.slice(0, -1)) && packageSubpath.length >= key.length && key.length > bestMatch.length || "/" === key[key.length - 1] && packageSubpath.startsWith(key) && key.length > bestMatch.length) && (bestMatch = key);
          }
          if (bestMatch) {
            const target = exports2[bestMatch], pattern = "*" === bestMatch[bestMatch.length - 1], resolved = resolvePackageTarget2(packageJsonUrl, target, packageSubpath.slice(bestMatch.length - (pattern ? 1 : 0)), bestMatch, base, pattern, false, conditions);
            return null == resolved && throwExportsNotFound2(packageSubpath, packageJsonUrl, base), pattern || emitFolderMapDeprecation2(bestMatch, packageJsonUrl, true, base), { resolved, exact: pattern };
          }
          throwExportsNotFound2(packageSubpath, packageJsonUrl, base);
        }
        function packageImportsResolve2(name, base, conditions) {
          if ("#" === name || name.startsWith("#/")) {
            throw new ERR_INVALID_MODULE_SPECIFIER2(name, "is not a valid internal imports specifier name", (0, external_url_namespaceObject.fileURLToPath)(base));
          }
          let packageJsonUrl;
          const packageConfig = getPackageScopeConfig2(base);
          if (packageConfig.exists) {
            packageJsonUrl = (0, external_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);
            const imports = packageConfig.imports;
            if (imports)
              if (own2.call(imports, name)) {
                const resolved = resolvePackageTarget2(packageJsonUrl, imports[name], "", name, base, false, true, conditions);
                if (null !== resolved)
                  return { resolved, exact: true };
              } else {
                let bestMatch = "";
                const keys = Object.getOwnPropertyNames(imports);
                let i2 = -1;
                for (; ++i2 < keys.length; ) {
                  const key = keys[i2];
                  ("*" === key[key.length - 1] && name.startsWith(key.slice(0, -1)) && name.length >= key.length && key.length > bestMatch.length || "/" === key[key.length - 1] && name.startsWith(key) && key.length > bestMatch.length) && (bestMatch = key);
                }
                if (bestMatch) {
                  const target = imports[bestMatch], pattern = "*" === bestMatch[bestMatch.length - 1], resolved = resolvePackageTarget2(packageJsonUrl, target, name.slice(bestMatch.length - (pattern ? 1 : 0)), bestMatch, base, pattern, true, conditions);
                  if (null !== resolved)
                    return pattern || emitFolderMapDeprecation2(bestMatch, packageJsonUrl, false, base), { resolved, exact: pattern };
                }
              }
          }
          !function(specifier, packageJsonUrl2, base2) {
            throw new ERR_PACKAGE_IMPORT_NOT_DEFINED2(specifier, packageJsonUrl2 && (0, external_url_namespaceObject.fileURLToPath)(new URL(".", packageJsonUrl2)), (0, external_url_namespaceObject.fileURLToPath)(base2));
          }(name, packageJsonUrl, base);
        }
        function packageResolve2(specifier, base, conditions) {
          const { packageName, packageSubpath, isScoped } = function(specifier2, base2) {
            let separatorIndex = specifier2.indexOf("/"), validPackageName = true, isScoped2 = false;
            "@" === specifier2[0] && (isScoped2 = true, -1 === separatorIndex || 0 === specifier2.length ? validPackageName = false : separatorIndex = specifier2.indexOf("/", separatorIndex + 1));
            const packageName2 = -1 === separatorIndex ? specifier2 : specifier2.slice(0, separatorIndex);
            let i2 = -1;
            for (; ++i2 < packageName2.length; )
              if ("%" === packageName2[i2] || "\\" === packageName2[i2]) {
                validPackageName = false;
                break;
              }
            if (!validPackageName)
              throw new ERR_INVALID_MODULE_SPECIFIER2(specifier2, "is not a valid package name", (0, external_url_namespaceObject.fileURLToPath)(base2));
            return { packageName: packageName2, packageSubpath: "." + (-1 === separatorIndex ? "" : specifier2.slice(separatorIndex)), isScoped: isScoped2 };
          }(specifier, base), packageConfig = getPackageScopeConfig2(base);
          if (packageConfig.exists) {
            const packageJsonUrl2 = (0, external_url_namespaceObject.pathToFileURL)(packageConfig.pjsonPath);
            if (packageConfig.name === packageName && void 0 !== packageConfig.exports && null !== packageConfig.exports)
              return packageExportsResolve2(packageJsonUrl2, packageSubpath, packageConfig, base, conditions).resolved;
          }
          let lastPath, packageJsonUrl = new URL("./node_modules/" + packageName + "/package.json", base), packageJsonPath = (0, external_url_namespaceObject.fileURLToPath)(packageJsonUrl);
          do {
            if (!tryStatSync2(packageJsonPath.slice(0, -13)).isDirectory()) {
              lastPath = packageJsonPath, packageJsonUrl = new URL((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl), packageJsonPath = (0, external_url_namespaceObject.fileURLToPath)(packageJsonUrl);
              continue;
            }
            const packageConfig2 = getPackageConfig2(packageJsonPath, specifier, base);
            return void 0 !== packageConfig2.exports && null !== packageConfig2.exports ? packageExportsResolve2(packageJsonUrl, packageSubpath, packageConfig2, base, conditions).resolved : "." === packageSubpath ? legacyMainResolve2(packageJsonUrl, packageConfig2, base) : new URL(packageSubpath, packageJsonUrl);
          } while (packageJsonPath.length !== lastPath.length);
          throw new ERR_MODULE_NOT_FOUND2(packageName, (0, external_url_namespaceObject.fileURLToPath)(base));
        }
        function moduleResolve2(specifier, base, conditions) {
          let resolved;
          if (function(specifier2) {
            return "" !== specifier2 && ("/" === specifier2[0] || function(specifier3) {
              if ("." === specifier3[0]) {
                if (1 === specifier3.length || "/" === specifier3[1])
                  return true;
                if ("." === specifier3[1] && (2 === specifier3.length || "/" === specifier3[2]))
                  return true;
              }
              return false;
            }(specifier2));
          }(specifier))
            resolved = new URL(specifier, base);
          else if ("#" === specifier[0])
            ({ resolved } = packageImportsResolve2(specifier, base, conditions));
          else
            try {
              resolved = new URL(specifier);
            } catch (e) {
              resolved = packageResolve2(specifier, base, conditions);
            }
          return function(resolved2, base2) {
            if (encodedSepRegEx2.test(resolved2.pathname))
              throw new ERR_INVALID_MODULE_SPECIFIER2(resolved2.pathname, 'must not include encoded "/" or "\\" characters', (0, external_url_namespaceObject.fileURLToPath)(base2));
            const path22 = (0, external_url_namespaceObject.fileURLToPath)(resolved2), stats = tryStatSync2(path22.endsWith("/") ? path22.slice(-1) : path22);
            if (stats.isDirectory()) {
              const error = new ERR_UNSUPPORTED_DIR_IMPORT2(path22, (0, external_url_namespaceObject.fileURLToPath)(base2));
              throw error.url = String(resolved2), error;
            }
            if (!stats.isFile())
              throw new ERR_MODULE_NOT_FOUND2(path22 || resolved2.pathname, base2 && (0, external_url_namespaceObject.fileURLToPath)(base2), "module");
            return resolved2;
          }(resolved, base);
        }
        function fileURLToPath4(id) {
          return "string" != typeof id || id.startsWith("file://") ? normalizeSlash2((0, external_url_namespaceObject.fileURLToPath)(id)) : normalizeSlash2(id);
        }
        const DEFAULT_CONDITIONS_SET2 = /* @__PURE__ */ new Set(["node", "import"]), DEFAULT_URL2 = (0, external_url_namespaceObject.pathToFileURL)(process.cwd()), DEFAULT_EXTENSIONS2 = [".mjs", ".cjs", ".js", ".json"], NOT_FOUND_ERRORS2 = /* @__PURE__ */ new Set(["ERR_MODULE_NOT_FOUND", "ERR_UNSUPPORTED_DIR_IMPORT", "MODULE_NOT_FOUND", "ERR_PACKAGE_PATH_NOT_EXPORTED"]);
        function _tryModuleResolve2(id, url, conditions) {
          try {
            return moduleResolve2(id, url, conditions);
          } catch (err) {
            if (!NOT_FOUND_ERRORS2.has(err.code))
              throw err;
            return null;
          }
        }
        function _resolve2(id, opts = {}) {
          if (/(node|data|http|https):/.test(id))
            return id;
          if (BUILTIN_MODULES2.has(id))
            return "node:" + id;
          if (isAbsolute2(id) && (0, external_fs_.existsSync)(id)) {
            const realPath2 = (0, external_fs_.realpathSync)(fileURLToPath4(id));
            return (0, external_url_namespaceObject.pathToFileURL)(realPath2).toString();
          }
          const conditionsSet = opts.conditions ? new Set(opts.conditions) : DEFAULT_CONDITIONS_SET2, _urls = (Array.isArray(opts.url) ? opts.url : [opts.url]).filter(Boolean).map((u) => new URL(function(id2) {
            return "string" != typeof id2 && (id2 = id2.toString()), /(node|data|http|https|file):/.test(id2) ? id2 : BUILTIN_MODULES2.has(id2) ? "node:" + id2 : "file://" + encodeURI(normalizeSlash2(id2));
          }(u.toString())));
          _urls.length || _urls.push(DEFAULT_URL2);
          const urls = [..._urls];
          for (const url of _urls)
            "file:" === url.protocol && (urls.push(new URL("./", url)), urls.push(new URL(joinURL2(url.pathname, "_index.js"), url)), urls.push(new URL("./node_modules", url)));
          let resolved;
          for (const url of urls) {
            if (resolved = _tryModuleResolve2(id, url, conditionsSet), resolved)
              break;
            for (const prefix of ["", "/index"]) {
              for (const ext of opts.extensions || DEFAULT_EXTENSIONS2)
                if (resolved = _tryModuleResolve2(id + prefix + ext, url, conditionsSet), resolved)
                  break;
              if (resolved)
                break;
            }
          }
          if (!resolved) {
            const err = new Error(`Cannot find module ${id} imported from ${urls.join(", ")}`);
            throw err.code = "ERR_MODULE_NOT_FOUND", err;
          }
          const realPath = (0, external_fs_.realpathSync)(fileURLToPath4(resolved));
          return (0, external_url_namespaceObject.pathToFileURL)(realPath).toString();
        }
        function resolveSync2(id, opts) {
          return _resolve2(id, opts);
        }
        function resolvePathSync2(id, opts) {
          return fileURLToPath4(resolveSync2(id, opts));
        }
        const ESM_RE = /([\s;]|^)(import[\w,{}\s*]*from|import\s*['"*{]|export\b\s*(?:[*{]|default|class|type|function|const|var|let|async function)|import\.meta\b)/m;
        function hasESMSyntax(code) {
          return ESM_RE.test(code);
        }
        var external_crypto_ = __webpack_require__("crypto");
        function md5(content, len = 8) {
          return (0, external_crypto_.createHash)("md5").update(content).digest("hex").slice(0, len);
        }
        const _EnvDebug = destr(process.env.JITI_DEBUG), _EnvCache = destr(process.env.JITI_CACHE), _EnvESMResolve = destr(process.env.JITI_ESM_RESOLVE), _EnvRequireCache = destr(process.env.JITI_REQUIRE_CACHE), _EnvSourceMaps = destr(process.env.JITI_SOURCE_MAPS), _EnvAlias = destr(process.env.JITI_ALIAS), _EnvTransform = destr(process.env.JITI_TRANSFORM_MODULES), _EnvNative = destr(process.env.JITI_NATIVE_MODULES), jiti_isWindows = "win32" === (0, external_os_namespaceObject.platform)(), defaults = { debug: _EnvDebug, cache: void 0 === _EnvCache || !!_EnvCache, requireCache: void 0 === _EnvRequireCache || !!_EnvRequireCache, sourceMaps: void 0 !== _EnvSourceMaps && !!_EnvSourceMaps, interopDefault: false, esmResolve: _EnvESMResolve || false, cacheVersion: "7", legacy: (0, semver.lt)(process.version || "0.0.0", "14.0.0"), extensions: [".js", ".mjs", ".cjs", ".ts"], alias: _EnvAlias, nativeModules: _EnvNative || [], transformModules: _EnvTransform || [] };
        function createJITI(_filename, opts = {}, parentModule) {
          (opts = Object.assign(Object.assign({}, defaults), opts)).legacy && (opts.cacheVersion += "-legacy"), opts.transformOptions && (opts.cacheVersion += "-" + object_hash_default()(opts.transformOptions));
          const alias = opts.alias && Object.keys(opts.alias).length ? normalizeAliases(opts.alias || {}) : null, nativeModules = ["typescript", "jiti"].concat(opts.nativeModules || []), transformModules = [].concat(opts.transformModules || []), isNativeRe = new RegExp(`node_modules/(${nativeModules.map((m) => escapeStringRegexp(m)).join("|")})/`), isTransformRe = new RegExp(`node_modules/(${transformModules.map((m) => escapeStringRegexp(m)).join("|")})/`);
          function debug(...args) {
            opts.debug && console.log("[jiti]", ...args);
          }
          if (_filename || (_filename = process.cwd()), function(filename) {
            try {
              return (0, external_fs_.lstatSync)(filename).isDirectory();
            } catch (e) {
              return false;
            }
          }(_filename) && (_filename = join2(_filename, "index.js")), true === opts.cache && (opts.cache = join2((0, external_os_namespaceObject.tmpdir)(), "node-jiti")), opts.cache)
            try {
              if ((0, mkdirp.sync)(opts.cache), !function(filename) {
                try {
                  return (0, external_fs_.accessSync)(filename, external_fs_.constants.W_OK), true;
                } catch (e) {
                  return false;
                }
              }(opts.cache))
                throw new Error("directory is not writable");
            } catch (err) {
              debug("Error creating cache directory at ", opts.cache, err), opts.cache = false;
            }
          const nativeRequire = create_require_default()(jiti_isWindows ? _filename.replace(/\//g, "\\") : _filename), tryResolve = (id, options) => {
            try {
              return nativeRequire.resolve(id, options);
            } catch (e) {
            }
          }, _url = (0, external_url_namespaceObject.pathToFileURL)(_filename), _additionalExts = [...opts.extensions].filter((ext) => ".js" !== ext), _resolve3 = (id, options) => {
            let resolved, err;
            if (alias && (id = function(path3, aliases) {
              const _path = normalizeWindowsPath(path3);
              aliases = normalizeAliases(aliases);
              for (const alias2 in aliases)
                if (_path.startsWith(alias2))
                  return join2(aliases[alias2], _path.slice(alias2.length));
              return _path;
            }(id, alias)), opts.esmResolve) {
              try {
                resolved = resolvePathSync2(id, { url: _url, conditions: ["node", "require", "import"] });
              } catch (_err) {
                err = _err;
              }
              if (resolved)
                return resolved;
            }
            if (opts.extensions.includes(pathe_f81973bb_extname(id)))
              return nativeRequire.resolve(id, options);
            try {
              return nativeRequire.resolve(id, options);
            } catch (_err) {
              err = _err;
            }
            for (const ext of _additionalExts)
              if (resolved = tryResolve(id + ext, options) || tryResolve(id + "/index" + ext, options), resolved)
                return resolved;
            throw err;
          };
          function transform(topts) {
            let code = function(filename, source, get) {
              if (!opts.cache || !filename)
                return get();
              const sourceHash = ` /* v${opts.cacheVersion}-${md5(source, 16)} */`, filebase = basename2(pathe_f81973bb_dirname(filename)) + "-" + basename2(filename), cacheFile = join2(opts.cache, filebase + "." + md5(filename) + ".js");
              if ((0, external_fs_.existsSync)(cacheFile)) {
                const cacheSource = (0, external_fs_.readFileSync)(cacheFile, "utf-8");
                if (cacheSource.endsWith(sourceHash))
                  return debug("[cache hit]", filename, "~>", cacheFile), cacheSource;
              }
              debug("[cache miss]", filename);
              const result = get();
              return result.includes("__JITI_ERROR__") || (0, external_fs_.writeFileSync)(cacheFile, result + sourceHash, "utf-8"), result;
            }(topts.filename, topts.source, () => {
              var _a;
              const res = opts.transform(Object.assign(Object.assign(Object.assign({ legacy: opts.legacy }, opts.transformOptions), { babel: Object.assign(Object.assign({}, opts.sourceMaps ? { sourceFileName: topts.filename, sourceMaps: "inline" } : {}), null === (_a = opts.transformOptions) || void 0 === _a ? void 0 : _a.babel) }), topts));
              return res.error && opts.debug && debug(res.error), res.code;
            });
            return code.startsWith("#!") && (code = "// " + code), code;
          }
          function _interopDefault(mod) {
            return opts.interopDefault ? function(sourceModule) {
              if (null === (val = sourceModule) || "object" != typeof val || !("default" in sourceModule))
                return sourceModule;
              var val;
              const newModule = sourceModule.default;
              for (const key in sourceModule)
                if ("default" === key)
                  try {
                    key in newModule || Object.defineProperty(newModule, key, { enumerable: false, configurable: false, get: () => newModule });
                  } catch (_err) {
                  }
                else
                  try {
                    key in newModule || Object.defineProperty(newModule, key, { enumerable: true, configurable: true, get: () => sourceModule[key] });
                  } catch (_err) {
                  }
              return newModule;
            }(mod) : mod;
          }
          function jiti2(id) {
            var _a, _b;
            if (id.startsWith("node:") ? id = id.substr(5) : id.startsWith("file:") && (id = (0, external_url_namespaceObject.fileURLToPath)(id)), external_module_.builtinModules.includes(id) || ".pnp.js" === id)
              return nativeRequire(id);
            const filename = _resolve3(id), ext = pathe_f81973bb_extname(filename);
            if (ext && !opts.extensions.includes(ext))
              return debug("[unknown]", filename), nativeRequire(id);
            if (isNativeRe.test(filename))
              return debug("[native]", filename), nativeRequire(id);
            if (opts.requireCache && nativeRequire.cache[filename])
              return _interopDefault(null === (_a = nativeRequire.cache[filename]) || void 0 === _a ? void 0 : _a.exports);
            let source = (0, external_fs_.readFileSync)(filename, "utf-8");
            const isTypescript = ".ts" === ext, isNativeModule = ".mjs" === ext || ".js" === ext && "module" === (null === (_b = function(path3) {
              for (; path3 && "." !== path3 && "/" !== path3; ) {
                path3 = join2(path3, "..");
                try {
                  const pkg = (0, external_fs_.readFileSync)(join2(path3, "package.json"), "utf-8");
                  try {
                    return JSON.parse(pkg);
                  } catch (_a2) {
                  }
                  break;
                } catch (_b2) {
                }
              }
            }(filename)) || void 0 === _b ? void 0 : _b.type), needsTranspile = !(".cjs" === ext) && (isTypescript || isNativeModule || isTransformRe.test(filename) || hasESMSyntax(source) || opts.legacy && source.match(/\?\.|\?\?/));
            const start = external_perf_hooks_namespaceObject.performance.now();
            if (needsTranspile) {
              source = transform({ filename, source, ts: isTypescript });
              debug("[transpile]" + (isNativeModule ? " [esm]" : ""), filename, `(${Math.round(1e3 * (external_perf_hooks_namespaceObject.performance.now() - start)) / 1e3}ms)`);
            } else
              try {
                return debug("[native]", filename), _interopDefault(nativeRequire(id));
              } catch (err) {
                debug("Native require error:", err), debug("[fallback]", filename), source = transform({ filename, source, ts: isTypescript });
              }
            const mod = new external_module_.Module(filename);
            let compiled;
            mod.filename = filename, parentModule && (mod.parent = parentModule, Array.isArray(parentModule.children) && !parentModule.children.includes(mod) && parentModule.children.push(mod)), mod.require = createJITI(filename, opts, mod), mod.path = pathe_f81973bb_dirname(filename), mod.paths = external_module_.Module._nodeModulePaths(mod.path), opts.requireCache && (nativeRequire.cache[filename] = mod);
            try {
              compiled = external_vm_default().runInThisContext(external_module_.Module.wrap(source), { filename, lineOffset: 0, displayErrors: false });
            } catch (err) {
              opts.requireCache && delete nativeRequire.cache[filename], opts.onError(err);
            }
            try {
              compiled(mod.exports, mod.require, mod, mod.filename, pathe_f81973bb_dirname(mod.filename));
            } catch (err) {
              opts.requireCache && delete nativeRequire.cache[filename], opts.onError(err);
            }
            if (mod.exports && mod.exports.__JITI_ERROR__) {
              const { filename: filename2, line, column, code, message } = mod.exports.__JITI_ERROR__, err = new Error(`${code}: ${message} 
 ${`${filename2}:${line}:${column}`}`);
              Error.captureStackTrace(err, jiti2), opts.onError(err);
            }
            mod.loaded = true;
            return _interopDefault(mod.exports);
          }
          return _resolve3.paths = nativeRequire.resolve.paths, jiti2.resolve = _resolve3, jiti2.cache = opts.requireCache ? nativeRequire.cache : {}, jiti2.extensions = nativeRequire.extensions, jiti2.main = nativeRequire.main, jiti2.transform = transform, jiti2.register = function() {
            return (0, lib.addHook)((source, filename) => jiti2.transform({ source, filename, ts: !!filename.match(/\.[cm]?ts$/) }), { exts: opts.extensions });
          }, jiti2;
        }
      })(), module.exports = __webpack_exports__.default;
    })();
  }
});

// node_modules/.pnpm/jiti@1.16.0/node_modules/jiti/dist/babel.js
var require_babel = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/jiti@1.16.0/node_modules/jiti/dist/babel.js"(exports, module) {
    (() => {
      var __webpack_modules__ = { "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files lazy recursive": (module2) => {
        function webpackEmptyAsyncContext(req) {
          return Promise.resolve().then(() => {
            var e = new Error("Cannot find module '" + req + "'");
            throw e.code = "MODULE_NOT_FOUND", e;
          });
        }
        webpackEmptyAsyncContext.keys = () => [], webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext, webpackEmptyAsyncContext.id = "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files lazy recursive", module2.exports = webpackEmptyAsyncContext;
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files sync recursive": (module2) => {
        function webpackEmptyContext(req) {
          var e = new Error("Cannot find module '" + req + "'");
          throw e.code = "MODULE_NOT_FOUND", e;
        }
        webpackEmptyContext.keys = () => [], webpackEmptyContext.resolve = webpackEmptyContext, webpackEmptyContext.id = "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files sync recursive", module2.exports = webpackEmptyContext;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.19.1/node_modules/@babel/plugin-syntax-class-properties/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.18.9/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-class-properties", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("classProperties", "classPrivateProperties", "classPrivateMethods");
        } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-export-namespace-from@7.8.3_@babel+core@7.19.1/node_modules/@babel/plugin-syntax-export-namespace-from/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.19.0/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-export-namespace-from", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("exportNamespaceFrom");
        } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-nullish-coalescing-operator@7.8.3_@babel+core@7.19.1/node_modules/@babel/plugin-syntax-nullish-coalescing-operator/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.19.0/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-nullish-coalescing-operator", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("nullishCoalescingOperator");
        } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-optional-chaining@7.8.3_@babel+core@7.19.1/node_modules/@babel/plugin-syntax-optional-chaining/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.19.0/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api) => (api.assertVersion(7), { name: "syntax-optional-chaining", manipulateOptions(opts, parserOpts) {
          parserOpts.plugins.push("optionalChaining");
        } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.2/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js": function(__unused_webpack_module, exports2, __webpack_require__2) {
        !function(exports3, setArray, sourcemapCodec, traceMapping) {
          "use strict";
          const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, NO_NAME = -1;
          let addSegmentInternal;
          exports3.addSegment = void 0, exports3.addMapping = void 0, exports3.maybeAddSegment = void 0, exports3.maybeAddMapping = void 0, exports3.setSourceContent = void 0, exports3.toDecodedMap = void 0, exports3.toEncodedMap = void 0, exports3.fromMap = void 0, exports3.allMappings = void 0;
          class GenMapping {
            constructor({ file, sourceRoot } = {}) {
              this._names = new setArray.SetArray(), this._sources = new setArray.SetArray(), this._sourcesContent = [], this._mappings = [], this.file = file, this.sourceRoot = sourceRoot;
            }
          }
          function getLine(mappings, index2) {
            for (let i = mappings.length; i <= index2; i++)
              mappings[i] = [];
            return mappings[index2];
          }
          function getColumnIndex(line, genColumn) {
            let index2 = line.length;
            for (let i = index2 - 1; i >= 0 && !(genColumn >= line[i][COLUMN]); index2 = i--)
              ;
            return index2;
          }
          function insert(array, index2, value) {
            for (let i = array.length; i > index2; i--)
              array[i] = array[i - 1];
            array[index2] = value;
          }
          function removeEmptyFinalLines(mappings) {
            const { length } = mappings;
            let len = length;
            for (let i = len - 1; i >= 0 && !(mappings[i].length > 0); len = i, i--)
              ;
            len < length && (mappings.length = len);
          }
          function putAll(strarr, array) {
            for (let i = 0; i < array.length; i++)
              setArray.put(strarr, array[i]);
          }
          function skipSourceless(line, index2) {
            return 0 === index2 || 1 === line[index2 - 1].length;
          }
          function skipSource(line, index2, sourcesIndex, sourceLine, sourceColumn, namesIndex) {
            if (0 === index2)
              return false;
            const prev = line[index2 - 1];
            return 1 !== prev.length && sourcesIndex === prev[SOURCES_INDEX] && sourceLine === prev[SOURCE_LINE] && sourceColumn === prev[SOURCE_COLUMN] && namesIndex === (5 === prev.length ? prev[NAMES_INDEX] : NO_NAME);
          }
          function addMappingInternal(skipable, map, mapping) {
            const { generated, source, original, name, content } = mapping;
            if (!source)
              return addSegmentInternal(skipable, map, generated.line - 1, generated.column, null, null, null, null, null);
            const s = source;
            return addSegmentInternal(skipable, map, generated.line - 1, generated.column, s, original.line - 1, original.column, name, content);
          }
          exports3.addSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => addSegmentInternal(false, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content), exports3.maybeAddSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => addSegmentInternal(true, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content), exports3.addMapping = (map, mapping) => addMappingInternal(false, map, mapping), exports3.maybeAddMapping = (map, mapping) => addMappingInternal(true, map, mapping), exports3.setSourceContent = (map, source, content) => {
            const { _sources: sources, _sourcesContent: sourcesContent } = map;
            sourcesContent[setArray.put(sources, source)] = content;
          }, exports3.toDecodedMap = (map) => {
            const { file, sourceRoot, _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = map;
            return removeEmptyFinalLines(mappings), { version: 3, file: file || void 0, names: names.array, sourceRoot: sourceRoot || void 0, sources: sources.array, sourcesContent, mappings };
          }, exports3.toEncodedMap = (map) => {
            const decoded = exports3.toDecodedMap(map);
            return Object.assign(Object.assign({}, decoded), { mappings: sourcemapCodec.encode(decoded.mappings) });
          }, exports3.allMappings = (map) => {
            const out = [], { _mappings: mappings, _sources: sources, _names: names } = map;
            for (let i = 0; i < mappings.length; i++) {
              const line = mappings[i];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j], generated = { line: i + 1, column: seg[COLUMN] };
                let source, original, name;
                1 !== seg.length && (source = sources.array[seg[SOURCES_INDEX]], original = { line: seg[SOURCE_LINE] + 1, column: seg[SOURCE_COLUMN] }, 5 === seg.length && (name = names.array[seg[NAMES_INDEX]])), out.push({ generated, source, original, name });
              }
            }
            return out;
          }, exports3.fromMap = (input) => {
            const map = new traceMapping.TraceMap(input), gen = new GenMapping({ file: map.file, sourceRoot: map.sourceRoot });
            return putAll(gen._names, map.names), putAll(gen._sources, map.sources), gen._sourcesContent = map.sourcesContent || map.sources.map(() => null), gen._mappings = traceMapping.decodedMappings(map), gen;
          }, addSegmentInternal = (skipable, map, genLine, genColumn, source, sourceLine, sourceColumn, name, content) => {
            const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = map, line = getLine(mappings, genLine), index2 = getColumnIndex(line, genColumn);
            if (!source) {
              if (skipable && skipSourceless(line, index2))
                return;
              return insert(line, index2, [genColumn]);
            }
            const sourcesIndex = setArray.put(sources, source), namesIndex = name ? setArray.put(names, name) : NO_NAME;
            if (sourcesIndex === sourcesContent.length && (sourcesContent[sourcesIndex] = null != content ? content : null), !skipable || !skipSource(line, index2, sourcesIndex, sourceLine, sourceColumn, namesIndex))
              return insert(line, index2, name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, namesIndex] : [genColumn, sourcesIndex, sourceLine, sourceColumn]);
          }, exports3.GenMapping = GenMapping, Object.defineProperty(exports3, "__esModule", { value: true });
        }(exports2, __webpack_require__2("./node_modules/.pnpm/@jridgewell+set-array@1.1.1/node_modules/@jridgewell/set-array/dist/set-array.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.13/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.15/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js"));
      }, "./node_modules/.pnpm/@jridgewell+resolve-uri@3.0.7/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js": function(module2) {
        module2.exports = function() {
          "use strict";
          const schemeRegex = /^[\w+.-]+:\/\//, urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?/, fileRegex = /^file:(?:\/\/((?![a-z]:)[^/]*)?)?(\/?.*)/i;
          function isAbsoluteUrl(input) {
            return schemeRegex.test(input);
          }
          function isSchemeRelativeUrl(input) {
            return input.startsWith("//");
          }
          function isAbsolutePath(input) {
            return input.startsWith("/");
          }
          function isFileUrl(input) {
            return input.startsWith("file:");
          }
          function parseAbsoluteUrl(input) {
            const match = urlRegex.exec(input);
            return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/");
          }
          function parseFileUrl(input) {
            const match = fileRegex.exec(input), path3 = match[2];
            return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path3) ? path3 : "/" + path3);
          }
          function makeUrl(scheme, user, host, port, path3) {
            return { scheme, user, host, port, path: path3, relativePath: false };
          }
          function parseUrl(input) {
            if (isSchemeRelativeUrl(input)) {
              const url2 = parseAbsoluteUrl("http:" + input);
              return url2.scheme = "", url2;
            }
            if (isAbsolutePath(input)) {
              const url2 = parseAbsoluteUrl("http://foo.com" + input);
              return url2.scheme = "", url2.host = "", url2;
            }
            if (isFileUrl(input))
              return parseFileUrl(input);
            if (isAbsoluteUrl(input))
              return parseAbsoluteUrl(input);
            const url = parseAbsoluteUrl("http://foo.com/" + input);
            return url.scheme = "", url.host = "", url.relativePath = true, url;
          }
          function stripPathFilename(path3) {
            if (path3.endsWith("/.."))
              return path3;
            const index2 = path3.lastIndexOf("/");
            return path3.slice(0, index2 + 1);
          }
          function mergePaths(url, base) {
            url.relativePath && (normalizePath(base), "/" === url.path ? url.path = base.path : url.path = stripPathFilename(base.path) + url.path, url.relativePath = base.relativePath);
          }
          function normalizePath(url) {
            const { relativePath } = url, pieces = url.path.split("/");
            let pointer = 1, positive = 0, addTrailingSlash = false;
            for (let i = 1; i < pieces.length; i++) {
              const piece = pieces[i];
              piece ? (addTrailingSlash = false, "." !== piece && (".." !== piece ? (pieces[pointer++] = piece, positive++) : positive ? (addTrailingSlash = true, positive--, pointer--) : relativePath && (pieces[pointer++] = piece))) : addTrailingSlash = true;
            }
            let path3 = "";
            for (let i = 1; i < pointer; i++)
              path3 += "/" + pieces[i];
            (!path3 || addTrailingSlash && !path3.endsWith("/..")) && (path3 += "/"), url.path = path3;
          }
          function resolve2(input, base) {
            if (!input && !base)
              return "";
            const url = parseUrl(input);
            if (base && !url.scheme) {
              const baseUrl = parseUrl(base);
              url.scheme = baseUrl.scheme, url.host || (url.user = baseUrl.user, url.host = baseUrl.host, url.port = baseUrl.port), mergePaths(url, baseUrl);
            }
            if (normalizePath(url), url.relativePath) {
              const path3 = url.path.slice(1);
              return path3 ? !(base || input).startsWith(".") || path3.startsWith(".") ? path3 : "./" + path3 : ".";
            }
            return url.scheme || url.host ? `${url.scheme}//${url.user}${url.host}${url.port}${url.path}` : url.path;
          }
          return resolve2;
        }();
      }, "./node_modules/.pnpm/@jridgewell+set-array@1.1.1/node_modules/@jridgewell/set-array/dist/set-array.umd.js": function(__unused_webpack_module, exports2) {
        !function(exports3) {
          "use strict";
          exports3.get = void 0, exports3.put = void 0, exports3.pop = void 0;
          class SetArray {
            constructor() {
              this._indexes = { __proto__: null }, this.array = [];
            }
          }
          exports3.get = (strarr, key) => strarr._indexes[key], exports3.put = (strarr, key) => {
            const index2 = exports3.get(strarr, key);
            if (void 0 !== index2)
              return index2;
            const { array, _indexes: indexes } = strarr;
            return indexes[key] = array.push(key) - 1;
          }, exports3.pop = (strarr) => {
            const { array, _indexes: indexes } = strarr;
            0 !== array.length && (indexes[array.pop()] = void 0);
          }, exports3.SetArray = SetArray, Object.defineProperty(exports3, "__esModule", { value: true });
        }(exports2);
      }, "./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.13/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js": function(__unused_webpack_module, exports2) {
        !function(exports3) {
          "use strict";
          const comma = ",".charCodeAt(0), semicolon = ";".charCodeAt(0), chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", intToChar = new Uint8Array(64), charToInt = new Uint8Array(128);
          for (let i = 0; i < chars.length; i++) {
            const c = chars.charCodeAt(i);
            intToChar[i] = c, charToInt[c] = i;
          }
          const td = "undefined" != typeof TextDecoder ? new TextDecoder() : "undefined" != typeof Buffer ? { decode: (buf) => Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength).toString() } : { decode(buf) {
            let out = "";
            for (let i = 0; i < buf.length; i++)
              out += String.fromCharCode(buf[i]);
            return out;
          } };
          function decode(mappings) {
            const state = new Int32Array(5), decoded = [];
            let index2 = 0;
            do {
              const semi = indexOf(mappings, index2), line = [];
              let sorted = true, lastCol = 0;
              state[0] = 0;
              for (let i = index2; i < semi; i++) {
                let seg;
                i = decodeInteger(mappings, i, state, 0);
                const col = state[0];
                col < lastCol && (sorted = false), lastCol = col, hasMoreVlq(mappings, i, semi) ? (i = decodeInteger(mappings, i, state, 1), i = decodeInteger(mappings, i, state, 2), i = decodeInteger(mappings, i, state, 3), hasMoreVlq(mappings, i, semi) ? (i = decodeInteger(mappings, i, state, 4), seg = [col, state[1], state[2], state[3], state[4]]) : seg = [col, state[1], state[2], state[3]]) : seg = [col], line.push(seg);
              }
              sorted || sort(line), decoded.push(line), index2 = semi + 1;
            } while (index2 <= mappings.length);
            return decoded;
          }
          function indexOf(mappings, index2) {
            const idx = mappings.indexOf(";", index2);
            return -1 === idx ? mappings.length : idx;
          }
          function decodeInteger(mappings, pos, state, j) {
            let value = 0, shift = 0, integer = 0;
            do {
              const c = mappings.charCodeAt(pos++);
              integer = charToInt[c], value |= (31 & integer) << shift, shift += 5;
            } while (32 & integer);
            const shouldNegate = 1 & value;
            return value >>>= 1, shouldNegate && (value = -2147483648 | -value), state[j] += value, pos;
          }
          function hasMoreVlq(mappings, i, length) {
            return !(i >= length) && mappings.charCodeAt(i) !== comma;
          }
          function sort(line) {
            line.sort(sortComparator);
          }
          function sortComparator(a, b) {
            return a[0] - b[0];
          }
          function encode(decoded) {
            const state = new Int32Array(5), bufLength = 16384, subLength = bufLength - 36, buf = new Uint8Array(bufLength), sub = buf.subarray(0, subLength);
            let pos = 0, out = "";
            for (let i = 0; i < decoded.length; i++) {
              const line = decoded[i];
              if (i > 0 && (pos === bufLength && (out += td.decode(buf), pos = 0), buf[pos++] = semicolon), 0 !== line.length) {
                state[0] = 0;
                for (let j = 0; j < line.length; j++) {
                  const segment = line[j];
                  pos > subLength && (out += td.decode(sub), buf.copyWithin(0, subLength, pos), pos -= subLength), j > 0 && (buf[pos++] = comma), pos = encodeInteger(buf, pos, state, segment, 0), 1 !== segment.length && (pos = encodeInteger(buf, pos, state, segment, 1), pos = encodeInteger(buf, pos, state, segment, 2), pos = encodeInteger(buf, pos, state, segment, 3), 4 !== segment.length && (pos = encodeInteger(buf, pos, state, segment, 4)));
                }
              }
            }
            return out + td.decode(buf.subarray(0, pos));
          }
          function encodeInteger(buf, pos, state, segment, j) {
            const next = segment[j];
            let num = next - state[j];
            state[j] = next, num = num < 0 ? -num << 1 | 1 : num << 1;
            do {
              let clamped = 31 & num;
              num >>>= 5, num > 0 && (clamped |= 32), buf[pos++] = intToChar[clamped];
            } while (num > 0);
            return pos;
          }
          exports3.decode = decode, exports3.encode = encode, Object.defineProperty(exports3, "__esModule", { value: true });
        }(exports2);
      }, "./node_modules/.pnpm/@jridgewell+trace-mapping@0.3.15/node_modules/@jridgewell/trace-mapping/dist/trace-mapping.umd.js": function(__unused_webpack_module, exports2, __webpack_require__2) {
        !function(exports3, sourcemapCodec, resolveUri) {
          "use strict";
          function _interopDefaultLegacy(e) {
            return e && "object" == typeof e && "default" in e ? e : { default: e };
          }
          var resolveUri__default = _interopDefaultLegacy(resolveUri);
          function resolve2(input, base) {
            return base && !base.endsWith("/") && (base += "/"), resolveUri__default.default(input, base);
          }
          function stripFilename(path3) {
            if (!path3)
              return "";
            const index2 = path3.lastIndexOf("/");
            return path3.slice(0, index2 + 1);
          }
          const COLUMN = 0, SOURCES_INDEX = 1, SOURCE_LINE = 2, SOURCE_COLUMN = 3, NAMES_INDEX = 4, REV_GENERATED_LINE = 1, REV_GENERATED_COLUMN = 2;
          function maybeSort(mappings, owned) {
            const unsortedIndex = nextUnsortedSegmentLine(mappings, 0);
            if (unsortedIndex === mappings.length)
              return mappings;
            owned || (mappings = mappings.slice());
            for (let i = unsortedIndex; i < mappings.length; i = nextUnsortedSegmentLine(mappings, i + 1))
              mappings[i] = sortSegments(mappings[i], owned);
            return mappings;
          }
          function nextUnsortedSegmentLine(mappings, start) {
            for (let i = start; i < mappings.length; i++)
              if (!isSorted(mappings[i]))
                return i;
            return mappings.length;
          }
          function isSorted(line) {
            for (let j = 1; j < line.length; j++)
              if (line[j][COLUMN] < line[j - 1][COLUMN])
                return false;
            return true;
          }
          function sortSegments(line, owned) {
            return owned || (line = line.slice()), line.sort(sortComparator);
          }
          function sortComparator(a, b) {
            return a[COLUMN] - b[COLUMN];
          }
          let found = false;
          function binarySearch(haystack, needle, low, high) {
            for (; low <= high; ) {
              const mid = low + (high - low >> 1), cmp = haystack[mid][COLUMN] - needle;
              if (0 === cmp)
                return found = true, mid;
              cmp < 0 ? low = mid + 1 : high = mid - 1;
            }
            return found = false, low - 1;
          }
          function upperBound(haystack, needle, index2) {
            for (let i = index2 + 1; i < haystack.length && haystack[i][COLUMN] === needle; index2 = i++)
              ;
            return index2;
          }
          function lowerBound(haystack, needle, index2) {
            for (let i = index2 - 1; i >= 0 && haystack[i][COLUMN] === needle; index2 = i--)
              ;
            return index2;
          }
          function memoizedState() {
            return { lastKey: -1, lastNeedle: -1, lastIndex: -1 };
          }
          function memoizedBinarySearch(haystack, needle, state, key) {
            const { lastKey, lastNeedle, lastIndex } = state;
            let low = 0, high = haystack.length - 1;
            if (key === lastKey) {
              if (needle === lastNeedle)
                return found = -1 !== lastIndex && haystack[lastIndex][COLUMN] === needle, lastIndex;
              needle >= lastNeedle ? low = -1 === lastIndex ? 0 : lastIndex : high = lastIndex;
            }
            return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = binarySearch(haystack, needle, low, high);
          }
          function buildBySources(decoded, memos) {
            const sources = memos.map(buildNullArray);
            for (let i = 0; i < decoded.length; i++) {
              const line = decoded[i];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j];
                if (1 === seg.length)
                  continue;
                const sourceIndex = seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN], originalSource = sources[sourceIndex], originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []), memo = memos[sourceIndex], index2 = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
                insert(originalLine, memo.lastIndex = index2 + 1, [sourceColumn, i, seg[COLUMN]]);
              }
            }
            return sources;
          }
          function insert(array, index2, value) {
            for (let i = array.length; i > index2; i--)
              array[i] = array[i - 1];
            array[index2] = value;
          }
          function buildNullArray() {
            return { __proto__: null };
          }
          const AnyMap = function(map, mapUrl) {
            const parsed = "string" == typeof map ? JSON.parse(map) : map;
            if (!("sections" in parsed))
              return new TraceMap(parsed, mapUrl);
            const mappings = [], sources = [], sourcesContent = [], names = [];
            recurse(parsed, mapUrl, mappings, sources, sourcesContent, names, 0, 0, 1 / 0, 1 / 0);
            const joined = { version: 3, file: parsed.file, names, sources, sourcesContent, mappings };
            return exports3.presortedDecodedMap(joined);
          };
          function recurse(input, mapUrl, mappings, sources, sourcesContent, names, lineOffset, columnOffset, stopLine, stopColumn) {
            const { sections } = input;
            for (let i = 0; i < sections.length; i++) {
              const { map, offset: offset2 } = sections[i];
              let sl = stopLine, sc = stopColumn;
              if (i + 1 < sections.length) {
                const nextOffset = sections[i + 1].offset;
                sl = Math.min(stopLine, lineOffset + nextOffset.line), sl === stopLine ? sc = Math.min(stopColumn, columnOffset + nextOffset.column) : sl < stopLine && (sc = columnOffset + nextOffset.column);
              }
              addSection(map, mapUrl, mappings, sources, sourcesContent, names, lineOffset + offset2.line, columnOffset + offset2.column, sl, sc);
            }
          }
          function addSection(input, mapUrl, mappings, sources, sourcesContent, names, lineOffset, columnOffset, stopLine, stopColumn) {
            if ("sections" in input)
              return recurse(...arguments);
            const map = new TraceMap(input, mapUrl), sourcesOffset = sources.length, namesOffset = names.length, decoded = exports3.decodedMappings(map), { resolvedSources, sourcesContent: contents } = map;
            if (append(sources, resolvedSources), append(names, map.names), contents)
              append(sourcesContent, contents);
            else
              for (let i = 0; i < resolvedSources.length; i++)
                sourcesContent.push(null);
            for (let i = 0; i < decoded.length; i++) {
              const lineI = lineOffset + i;
              if (lineI > stopLine)
                return;
              const out = getLine(mappings, lineI), cOffset = 0 === i ? columnOffset : 0, line = decoded[i];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j], column = cOffset + seg[COLUMN];
                if (lineI === stopLine && column >= stopColumn)
                  return;
                if (1 === seg.length) {
                  out.push([column]);
                  continue;
                }
                const sourcesIndex = sourcesOffset + seg[SOURCES_INDEX], sourceLine = seg[SOURCE_LINE], sourceColumn = seg[SOURCE_COLUMN];
                out.push(4 === seg.length ? [column, sourcesIndex, sourceLine, sourceColumn] : [column, sourcesIndex, sourceLine, sourceColumn, namesOffset + seg[NAMES_INDEX]]);
              }
            }
          }
          function append(arr, other) {
            for (let i = 0; i < other.length; i++)
              arr.push(other[i]);
          }
          function getLine(arr, index2) {
            for (let i = arr.length; i <= index2; i++)
              arr[i] = [];
            return arr[index2];
          }
          const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)", COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)", LEAST_UPPER_BOUND = -1, GREATEST_LOWER_BOUND = 1;
          exports3.encodedMappings = void 0, exports3.decodedMappings = void 0, exports3.traceSegment = void 0, exports3.originalPositionFor = void 0, exports3.generatedPositionFor = void 0, exports3.eachMapping = void 0, exports3.sourceContentFor = void 0, exports3.presortedDecodedMap = void 0, exports3.decodedMap = void 0, exports3.encodedMap = void 0;
          class TraceMap {
            constructor(map, mapUrl) {
              const isString = "string" == typeof map;
              if (!isString && map._decodedMemo)
                return map;
              const parsed = isString ? JSON.parse(map) : map, { version: version2, file, names, sourceRoot, sources, sourcesContent } = parsed;
              this.version = version2, this.file = file, this.names = names, this.sourceRoot = sourceRoot, this.sources = sources, this.sourcesContent = sourcesContent;
              const from = resolve2(sourceRoot || "", stripFilename(mapUrl));
              this.resolvedSources = sources.map((s) => resolve2(s || "", from));
              const { mappings } = parsed;
              "string" == typeof mappings ? (this._encoded = mappings, this._decoded = void 0) : (this._encoded = void 0, this._decoded = maybeSort(mappings, isString)), this._decodedMemo = memoizedState(), this._bySources = void 0, this._bySourceMemos = void 0;
            }
          }
          function clone(map, mappings) {
            return { version: map.version, file: map.file, names: map.names, sourceRoot: map.sourceRoot, sources: map.sources, sourcesContent: map.sourcesContent, mappings };
          }
          function OMapping(source, line, column, name) {
            return { source, line, column, name };
          }
          function GMapping(line, column) {
            return { line, column };
          }
          function traceSegmentInternal(segments, memo, line, column, bias) {
            let index2 = memoizedBinarySearch(segments, column, memo, line);
            return found ? index2 = (bias === LEAST_UPPER_BOUND ? upperBound : lowerBound)(segments, column, index2) : bias === LEAST_UPPER_BOUND && index2++, -1 === index2 || index2 === segments.length ? null : segments[index2];
          }
          exports3.encodedMappings = (map) => {
            var _a;
            return null !== (_a = map._encoded) && void 0 !== _a ? _a : map._encoded = sourcemapCodec.encode(map._decoded);
          }, exports3.decodedMappings = (map) => map._decoded || (map._decoded = sourcemapCodec.decode(map._encoded)), exports3.traceSegment = (map, line, column) => {
            const decoded = exports3.decodedMappings(map);
            return line >= decoded.length ? null : traceSegmentInternal(decoded[line], map._decodedMemo, line, column, GREATEST_LOWER_BOUND);
          }, exports3.originalPositionFor = (map, { line, column, bias }) => {
            if (--line < 0)
              throw new Error(LINE_GTR_ZERO);
            if (column < 0)
              throw new Error(COL_GTR_EQ_ZERO);
            const decoded = exports3.decodedMappings(map);
            if (line >= decoded.length)
              return OMapping(null, null, null, null);
            const segment = traceSegmentInternal(decoded[line], map._decodedMemo, line, column, bias || GREATEST_LOWER_BOUND);
            if (null == segment)
              return OMapping(null, null, null, null);
            if (1 == segment.length)
              return OMapping(null, null, null, null);
            const { names, resolvedSources } = map;
            return OMapping(resolvedSources[segment[SOURCES_INDEX]], segment[SOURCE_LINE] + 1, segment[SOURCE_COLUMN], 5 === segment.length ? names[segment[NAMES_INDEX]] : null);
          }, exports3.generatedPositionFor = (map, { source, line, column, bias }) => {
            if (--line < 0)
              throw new Error(LINE_GTR_ZERO);
            if (column < 0)
              throw new Error(COL_GTR_EQ_ZERO);
            const { sources, resolvedSources } = map;
            let sourceIndex = sources.indexOf(source);
            if (-1 === sourceIndex && (sourceIndex = resolvedSources.indexOf(source)), -1 === sourceIndex)
              return GMapping(null, null);
            const generated = map._bySources || (map._bySources = buildBySources(exports3.decodedMappings(map), map._bySourceMemos = sources.map(memoizedState))), memos = map._bySourceMemos, segments = generated[sourceIndex][line];
            if (null == segments)
              return GMapping(null, null);
            const segment = traceSegmentInternal(segments, memos[sourceIndex], line, column, bias || GREATEST_LOWER_BOUND);
            return null == segment ? GMapping(null, null) : GMapping(segment[REV_GENERATED_LINE] + 1, segment[REV_GENERATED_COLUMN]);
          }, exports3.eachMapping = (map, cb) => {
            const decoded = exports3.decodedMappings(map), { names, resolvedSources } = map;
            for (let i = 0; i < decoded.length; i++) {
              const line = decoded[i];
              for (let j = 0; j < line.length; j++) {
                const seg = line[j], generatedLine = i + 1, generatedColumn = seg[0];
                let source = null, originalLine = null, originalColumn = null, name = null;
                1 !== seg.length && (source = resolvedSources[seg[1]], originalLine = seg[2] + 1, originalColumn = seg[3]), 5 === seg.length && (name = names[seg[4]]), cb({ generatedLine, generatedColumn, source, originalLine, originalColumn, name });
              }
            }
          }, exports3.sourceContentFor = (map, source) => {
            const { sources, resolvedSources, sourcesContent } = map;
            if (null == sourcesContent)
              return null;
            let index2 = sources.indexOf(source);
            return -1 === index2 && (index2 = resolvedSources.indexOf(source)), -1 === index2 ? null : sourcesContent[index2];
          }, exports3.presortedDecodedMap = (map, mapUrl) => {
            const tracer = new TraceMap(clone(map, []), mapUrl);
            return tracer._decoded = map.mappings, tracer;
          }, exports3.decodedMap = (map) => clone(map, exports3.decodedMappings(map)), exports3.encodedMap = (map) => clone(map, exports3.encodedMappings(map)), exports3.AnyMap = AnyMap, exports3.GREATEST_LOWER_BOUND = GREATEST_LOWER_BOUND, exports3.LEAST_UPPER_BOUND = LEAST_UPPER_BOUND, exports3.TraceMap = TraceMap, Object.defineProperty(exports3, "__esModule", { value: true });
        }(exports2, __webpack_require__2("./node_modules/.pnpm/@jridgewell+sourcemap-codec@1.4.13/node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.umd.js"), __webpack_require__2("./node_modules/.pnpm/@jridgewell+resolve-uri@3.0.7/node_modules/@jridgewell/resolve-uri/dist/resolve-uri.umd.js"));
      }, "./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/index.js": (module2, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(api) {
          var transformImport = (0, _utils.createDynamicImportTransform)(api);
          return { manipulateOptions: function(opts, parserOpts) {
            parserOpts.plugins.push("dynamicImport");
          }, visitor: { Import: function(path3) {
            transformImport(this, path3);
          } } };
        };
        var _utils = __webpack_require__2("./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/utils.js");
        module2.exports = exports2.default;
      }, "./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/utils.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var _slicedToArray = function(arr, i) {
          if (Array.isArray(arr))
            return arr;
          if (Symbol.iterator in Object(arr))
            return function(arr2, i2) {
              var _arr = [], _n = true, _d = false, _e = void 0;
              try {
                for (var _s, _i = arr2[Symbol.iterator](); !(_n = (_s = _i.next()).done) && (_arr.push(_s.value), !i2 || _arr.length !== i2); _n = true)
                  ;
              } catch (err) {
                _d = true, _e = err;
              } finally {
                try {
                  !_n && _i.return && _i.return();
                } finally {
                  if (_d)
                    throw _e;
                }
              }
              return _arr;
            }(arr, i);
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        };
        function getImportSource(t, callNode) {
          var importArguments = callNode.arguments, importPath = _slicedToArray(importArguments, 1)[0];
          return t.isStringLiteral(importPath) || t.isTemplateLiteral(importPath) ? (t.removeComments(importPath), importPath) : t.templateLiteral([t.templateElement({ raw: "", cooked: "" }), t.templateElement({ raw: "", cooked: "" }, true)], importArguments);
        }
        exports2.getImportSource = getImportSource, exports2.createDynamicImportTransform = function(_ref) {
          var template = _ref.template, t = _ref.types, builders = { static: { interop: template("Promise.resolve().then(() => INTEROP(require(SOURCE)))"), noInterop: template("Promise.resolve().then(() => require(SOURCE))") }, dynamic: { interop: template("Promise.resolve(SOURCE).then(s => INTEROP(require(s)))"), noInterop: template("Promise.resolve(SOURCE).then(s => require(s))") } }, visited = "function" == typeof WeakSet && /* @__PURE__ */ new WeakSet();
          return function(context, path3) {
            if (visited) {
              if (visited.has(path3))
                return;
              visited.add(path3);
            }
            var node, SOURCE = getImportSource(t, path3.parent), builder = (node = SOURCE, t.isStringLiteral(node) || t.isTemplateLiteral(node) && 0 === node.expressions.length ? builders.static : builders.dynamic), newImport = context.opts.noInterop ? builder.noInterop({ SOURCE }) : builder.interop({ SOURCE, INTEROP: context.addHelper("interopRequireWildcard") });
            path3.parentPath.replaceWith(newImport);
          };
        };
      }, "./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/utils.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        module2.exports = __webpack_require__2("./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/utils.js");
      }, "./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _path = __webpack_require__2("path");
        function isInType(path3) {
          switch (path3.parent.type) {
            case "TSTypeReference":
            case "TSQualifiedName":
            case "TSExpressionWithTypeArguments":
            case "TSTypeQuery":
              return true;
            default:
              return false;
          }
        }
        module2.exports = function(_ref) {
          var types2 = _ref.types, decoratorExpressionForConstructor = function(decorator, param) {
            return function(className) {
              var resultantDecorator = types2.callExpression(decorator.expression, [types2.Identifier(className), types2.Identifier("undefined"), types2.NumericLiteral(param.key)]), resultantDecoratorWithFallback = types2.logicalExpression("||", resultantDecorator, types2.Identifier(className)), assignment = types2.assignmentExpression("=", types2.Identifier(className), resultantDecoratorWithFallback);
              return types2.expressionStatement(assignment);
            };
          }, decoratorExpressionForMethod = function(decorator, param) {
            return function(className, functionName) {
              var resultantDecorator = types2.callExpression(decorator.expression, [types2.Identifier("".concat(className, ".prototype")), types2.StringLiteral(functionName), types2.NumericLiteral(param.key)]);
              return types2.expressionStatement(resultantDecorator);
            };
          };
          return { visitor: { Program: function(path3, state) {
            var extension = (0, _path.extname)(state.file.opts.filename);
            ".ts" !== extension && ".tsx" !== extension || function() {
              var decorators = /* @__PURE__ */ Object.create(null);
              path3.node.body.filter(function(it) {
                var type = it.type, declaration = it.declaration;
                switch (type) {
                  case "ClassDeclaration":
                    return true;
                  case "ExportNamedDeclaration":
                  case "ExportDefaultDeclaration":
                    return declaration && "ClassDeclaration" === declaration.type;
                  default:
                    return false;
                }
              }).map(function(it) {
                return "ClassDeclaration" === it.type ? it : it.declaration;
              }).forEach(function(clazz) {
                clazz.body.body.forEach(function(body) {
                  (body.params || []).forEach(function(param) {
                    (param.decorators || []).forEach(function(decorator) {
                      decorator.expression.callee ? decorators[decorator.expression.callee.name] = decorator : decorators[decorator.expression.name] = decorator;
                    });
                  });
                });
              });
              var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = void 0;
              try {
                for (var _step, _iterator = path3.get("body")[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var stmt = _step.value;
                  if ("ImportDeclaration" === stmt.node.type) {
                    if (0 === stmt.node.specifiers.length)
                      continue;
                    var _iteratorNormalCompletion2 = true, _didIteratorError2 = false, _iteratorError2 = void 0;
                    try {
                      for (var _step2, _loop = function() {
                        var specifier = _step2.value, binding = stmt.scope.getBinding(specifier.local.name);
                        binding.referencePaths.length ? binding.referencePaths.reduce(function(prev, next) {
                          return prev || isInType(next);
                        }, false) && Object.keys(decorators).forEach(function(k) {
                          var decorator = decorators[k];
                          (decorator.expression.arguments || []).forEach(function(arg) {
                            arg.name === specifier.local.name && binding.referencePaths.push({ parent: decorator.expression });
                          });
                        }) : decorators[specifier.local.name] && binding.referencePaths.push({ parent: decorators[specifier.local.name] });
                      }, _iterator2 = stmt.node.specifiers[Symbol.iterator](); !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true)
                        _loop();
                    } catch (err) {
                      _didIteratorError2 = true, _iteratorError2 = err;
                    } finally {
                      try {
                        _iteratorNormalCompletion2 || null == _iterator2.return || _iterator2.return();
                      } finally {
                        if (_didIteratorError2)
                          throw _iteratorError2;
                      }
                    }
                  }
                }
              } catch (err) {
                _didIteratorError = true, _iteratorError = err;
              } finally {
                try {
                  _iteratorNormalCompletion || null == _iterator.return || _iterator.return();
                } finally {
                  if (_didIteratorError)
                    throw _iteratorError;
                }
              }
            }();
          }, Function: function(path3) {
            var functionName = "";
            path3.node.id ? functionName = path3.node.id.name : path3.node.key && (functionName = path3.node.key.name), (path3.get("params") || []).slice().forEach(function(param) {
              var decorators = param.node.decorators || [], transformable = decorators.length;
              if (decorators.slice().forEach(function(decorator) {
                if ("ClassMethod" === path3.type) {
                  var classIdentifier, parentNode = path3.parentPath.parentPath, classDeclaration = path3.findParent(function(p) {
                    return "ClassDeclaration" === p.type;
                  });
                  if (classDeclaration ? classIdentifier = classDeclaration.node.id.name : (parentNode.insertAfter(null), classIdentifier = function(path4) {
                    var assignment = path4.findParent(function(p) {
                      return "AssignmentExpression" === p.node.type;
                    });
                    return "SequenceExpression" === assignment.node.right.type ? assignment.node.right.expressions[1].name : "ClassExpression" === assignment.node.right.type ? assignment.node.left.name : null;
                  }(path3)), "constructor" === functionName) {
                    var expression = decoratorExpressionForConstructor(decorator, param)(classIdentifier);
                    parentNode.insertAfter(expression);
                  } else {
                    var _expression = decoratorExpressionForMethod(decorator, param)(classIdentifier, functionName);
                    parentNode.insertAfter(_expression);
                  }
                } else {
                  var className = path3.findParent(function(p) {
                    return "VariableDeclarator" === p.node.type;
                  }).node.id.name;
                  if (functionName === className) {
                    var _expression2 = decoratorExpressionForConstructor(decorator, param)(className);
                    if ("body" === path3.parentKey)
                      path3.insertAfter(_expression2);
                    else
                      path3.findParent(function(p) {
                        return "body" === p.parentKey;
                      }).insertAfter(_expression2);
                  } else {
                    var classParent = path3.findParent(function(p) {
                      return "CallExpression" === p.node.type;
                    }), _expression3 = decoratorExpressionForMethod(decorator, param)(className, functionName);
                    classParent.insertAfter(_expression3);
                  }
                }
              }), transformable) {
                var replacement = function(path4) {
                  switch (path4.node.type) {
                    case "ObjectPattern":
                      return types2.ObjectPattern(path4.node.properties);
                    case "AssignmentPattern":
                      return types2.AssignmentPattern(path4.node.left, path4.node.right);
                    case "TSParameterProperty":
                      return types2.Identifier(path4.node.parameter.name);
                    default:
                      return types2.Identifier(path4.node.name);
                  }
                }(param);
                param.replaceWith(replacement);
              }
            });
          } } };
        };
      }, "./node_modules/.pnpm/convert-source-map@1.8.0/node_modules/convert-source-map/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        var fs4 = __webpack_require__2("fs"), path3 = __webpack_require__2("path"), SafeBuffer = __webpack_require__2("./node_modules/.pnpm/safe-buffer@5.1.2/node_modules/safe-buffer/index.js");
        function Converter(sm, opts) {
          var base64;
          (opts = opts || {}).isFileComment && (sm = function(sm2, dir) {
            var r2 = exports2.mapFileCommentRegex.exec(sm2), filename = r2[1] || r2[2], filepath = path3.resolve(dir, filename);
            try {
              return fs4.readFileSync(filepath, "utf8");
            } catch (e) {
              throw new Error("An error occurred while trying to read the map file at " + filepath + "\n" + e);
            }
          }(sm, opts.commentFileDir)), opts.hasComment && (sm = function(sm2) {
            return sm2.split(",").pop();
          }(sm)), opts.isEncoded && (base64 = sm, sm = (SafeBuffer.Buffer.from(base64, "base64") || "").toString()), (opts.isJSON || opts.isEncoded) && (sm = JSON.parse(sm)), this.sourcemap = sm;
        }
        Object.defineProperty(exports2, "commentRegex", { get: function() {
          return /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/gm;
        } }), Object.defineProperty(exports2, "mapFileCommentRegex", { get: function() {
          return /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"`]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/gm;
        } }), Converter.prototype.toJSON = function(space) {
          return JSON.stringify(this.sourcemap, null, space);
        }, Converter.prototype.toBase64 = function() {
          var json = this.toJSON();
          return (SafeBuffer.Buffer.from(json, "utf8") || "").toString("base64");
        }, Converter.prototype.toComment = function(options) {
          var data2 = "sourceMappingURL=data:application/json;charset=utf-8;base64," + this.toBase64();
          return options && options.multiline ? "/*# " + data2 + " */" : "//# " + data2;
        }, Converter.prototype.toObject = function() {
          return JSON.parse(this.toJSON());
        }, Converter.prototype.addProperty = function(key, value) {
          if (this.sourcemap.hasOwnProperty(key))
            throw new Error('property "' + key + '" already exists on the sourcemap, use set property instead');
          return this.setProperty(key, value);
        }, Converter.prototype.setProperty = function(key, value) {
          return this.sourcemap[key] = value, this;
        }, Converter.prototype.getProperty = function(key) {
          return this.sourcemap[key];
        }, exports2.fromObject = function(obj) {
          return new Converter(obj);
        }, exports2.fromJSON = function(json) {
          return new Converter(json, { isJSON: true });
        }, exports2.fromBase64 = function(base64) {
          return new Converter(base64, { isEncoded: true });
        }, exports2.fromComment = function(comment) {
          return new Converter(comment = comment.replace(/^\/\*/g, "//").replace(/\*\/$/g, ""), { isEncoded: true, hasComment: true });
        }, exports2.fromMapFileComment = function(comment, dir) {
          return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });
        }, exports2.fromSource = function(content) {
          var m = content.match(exports2.commentRegex);
          return m ? exports2.fromComment(m.pop()) : null;
        }, exports2.fromMapFileSource = function(content, dir) {
          var m = content.match(exports2.mapFileCommentRegex);
          return m ? exports2.fromMapFileComment(m.pop(), dir) : null;
        }, exports2.removeComments = function(src) {
          return src.replace(exports2.commentRegex, "");
        }, exports2.removeMapFileComments = function(src) {
          return src.replace(exports2.mapFileCommentRegex, "");
        }, exports2.generateMapFileComment = function(file, options) {
          var data2 = "sourceMappingURL=" + file;
          return options && options.multiline ? "/*# " + data2 + " */" : "//# " + data2;
        };
      }, "./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js": (module2, exports2, __webpack_require__2) => {
        exports2.formatArgs = function(args) {
          if (args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff), !this.useColors)
            return;
          const c = "color: " + this.color;
          args.splice(1, 0, c, "color: inherit");
          let index2 = 0, lastC = 0;
          args[0].replace(/%[a-zA-Z%]/g, (match) => {
            "%%" !== match && (index2++, "%c" === match && (lastC = index2));
          }), args.splice(lastC, 0, c);
        }, exports2.save = function(namespaces) {
          try {
            namespaces ? exports2.storage.setItem("debug", namespaces) : exports2.storage.removeItem("debug");
          } catch (error) {
          }
        }, exports2.load = function() {
          let r2;
          try {
            r2 = exports2.storage.getItem("debug");
          } catch (error) {
          }
          !r2 && "undefined" != typeof process && "env" in process && (r2 = process.env.DEBUG);
          return r2;
        }, exports2.useColors = function() {
          if ("undefined" != typeof window && window.process && ("renderer" === window.process.type || window.process.__nwjs))
            return true;
          if ("undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))
            return false;
          return "undefined" != typeof document && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || "undefined" != typeof window && window.console && (window.console.firebug || window.console.exception && window.console.table) || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || "undefined" != typeof navigator && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }, exports2.storage = function() {
          try {
            return localStorage;
          } catch (error) {
          }
        }(), exports2.destroy = (() => {
          let warned = false;
          return () => {
            warned || (warned = true, console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."));
          };
        })(), exports2.colors = ["#0000CC", "#0000FF", "#0033CC", "#0033FF", "#0066CC", "#0066FF", "#0099CC", "#0099FF", "#00CC00", "#00CC33", "#00CC66", "#00CC99", "#00CCCC", "#00CCFF", "#3300CC", "#3300FF", "#3333CC", "#3333FF", "#3366CC", "#3366FF", "#3399CC", "#3399FF", "#33CC00", "#33CC33", "#33CC66", "#33CC99", "#33CCCC", "#33CCFF", "#6600CC", "#6600FF", "#6633CC", "#6633FF", "#66CC00", "#66CC33", "#9900CC", "#9900FF", "#9933CC", "#9933FF", "#99CC00", "#99CC33", "#CC0000", "#CC0033", "#CC0066", "#CC0099", "#CC00CC", "#CC00FF", "#CC3300", "#CC3333", "#CC3366", "#CC3399", "#CC33CC", "#CC33FF", "#CC6600", "#CC6633", "#CC9900", "#CC9933", "#CCCC00", "#CCCC33", "#FF0000", "#FF0033", "#FF0066", "#FF0099", "#FF00CC", "#FF00FF", "#FF3300", "#FF3333", "#FF3366", "#FF3399", "#FF33CC", "#FF33FF", "#FF6600", "#FF6633", "#FF9900", "#FF9933", "#FFCC00", "#FFCC33"], exports2.log = console.debug || console.log || (() => {
        }), module2.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js")(exports2);
        const { formatters } = module2.exports;
        formatters.j = function(v) {
          try {
            return JSON.stringify(v);
          } catch (error) {
            return "[UnexpectedJSONParseError]: " + error.message;
          }
        };
      }, "./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        module2.exports = function(env) {
          function createDebug(namespace) {
            let prevTime, namespacesCache, enabledCache, enableOverride = null;
            function debug(...args) {
              if (!debug.enabled)
                return;
              const self2 = debug, curr = Number(new Date()), ms = curr - (prevTime || curr);
              self2.diff = ms, self2.prev = prevTime, self2.curr = curr, prevTime = curr, args[0] = createDebug.coerce(args[0]), "string" != typeof args[0] && args.unshift("%O");
              let index2 = 0;
              args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format2) => {
                if ("%%" === match)
                  return "%";
                index2++;
                const formatter = createDebug.formatters[format2];
                if ("function" == typeof formatter) {
                  const val = args[index2];
                  match = formatter.call(self2, val), args.splice(index2, 1), index2--;
                }
                return match;
              }), createDebug.formatArgs.call(self2, args);
              (self2.log || createDebug.log).apply(self2, args);
            }
            return debug.namespace = namespace, debug.useColors = createDebug.useColors(), debug.color = createDebug.selectColor(namespace), debug.extend = extend2, debug.destroy = createDebug.destroy, Object.defineProperty(debug, "enabled", { enumerable: true, configurable: false, get: () => null !== enableOverride ? enableOverride : (namespacesCache !== createDebug.namespaces && (namespacesCache = createDebug.namespaces, enabledCache = createDebug.enabled(namespace)), enabledCache), set: (v) => {
              enableOverride = v;
            } }), "function" == typeof createDebug.init && createDebug.init(debug), debug;
          }
          function extend2(namespace, delimiter) {
            const newDebug = createDebug(this.namespace + (void 0 === delimiter ? ":" : delimiter) + namespace);
            return newDebug.log = this.log, newDebug;
          }
          function toNamespace(regexp) {
            return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
          }
          return createDebug.debug = createDebug, createDebug.default = createDebug, createDebug.coerce = function(val) {
            if (val instanceof Error)
              return val.stack || val.message;
            return val;
          }, createDebug.disable = function() {
            const namespaces = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)].join(",");
            return createDebug.enable(""), namespaces;
          }, createDebug.enable = function(namespaces) {
            let i;
            createDebug.save(namespaces), createDebug.namespaces = namespaces, createDebug.names = [], createDebug.skips = [];
            const split = ("string" == typeof namespaces ? namespaces : "").split(/[\s,]+/), len = split.length;
            for (i = 0; i < len; i++)
              split[i] && ("-" === (namespaces = split[i].replace(/\*/g, ".*?"))[0] ? createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$")) : createDebug.names.push(new RegExp("^" + namespaces + "$")));
          }, createDebug.enabled = function(name) {
            if ("*" === name[name.length - 1])
              return true;
            let i, len;
            for (i = 0, len = createDebug.skips.length; i < len; i++)
              if (createDebug.skips[i].test(name))
                return false;
            for (i = 0, len = createDebug.names.length; i < len; i++)
              if (createDebug.names[i].test(name))
                return true;
            return false;
          }, createDebug.humanize = __webpack_require__2("./node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js"), createDebug.destroy = function() {
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
          }, Object.keys(env).forEach((key) => {
            createDebug[key] = env[key];
          }), createDebug.names = [], createDebug.skips = [], createDebug.formatters = {}, createDebug.selectColor = function(namespace) {
            let hash2 = 0;
            for (let i = 0; i < namespace.length; i++)
              hash2 = (hash2 << 5) - hash2 + namespace.charCodeAt(i), hash2 |= 0;
            return createDebug.colors[Math.abs(hash2) % createDebug.colors.length];
          }, createDebug.enable(createDebug.load()), createDebug;
        };
      }, "./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        "undefined" == typeof process || "renderer" === process.type || true === process.browser || process.__nwjs ? module2.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js") : module2.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/node.js");
      }, "./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/node.js": (module2, exports2, __webpack_require__2) => {
        const tty = __webpack_require__2("tty"), util = __webpack_require__2("util");
        exports2.init = function(debug) {
          debug.inspectOpts = {};
          const keys = Object.keys(exports2.inspectOpts);
          for (let i = 0; i < keys.length; i++)
            debug.inspectOpts[keys[i]] = exports2.inspectOpts[keys[i]];
        }, exports2.log = function(...args) {
          return process.stderr.write(util.format(...args) + "\n");
        }, exports2.formatArgs = function(args) {
          const { namespace: name, useColors } = this;
          if (useColors) {
            const c = this.color, colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c), prefix = `  ${colorCode};1m${name} \x1B[0m`;
            args[0] = prefix + args[0].split("\n").join("\n" + prefix), args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
          } else
            args[0] = function() {
              if (exports2.inspectOpts.hideDate)
                return "";
              return new Date().toISOString() + " ";
            }() + name + " " + args[0];
        }, exports2.save = function(namespaces) {
          namespaces ? process.env.DEBUG = namespaces : delete process.env.DEBUG;
        }, exports2.load = function() {
          return process.env.DEBUG;
        }, exports2.useColors = function() {
          return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
        }, exports2.destroy = util.deprecate(() => {
        }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."), exports2.colors = [6, 2, 3, 4, 5, 1];
        try {
          const supportsColor = __webpack_require__2("./node_modules/.pnpm/supports-color@5.5.0/node_modules/supports-color/index.js");
          supportsColor && (supportsColor.stderr || supportsColor).level >= 2 && (exports2.colors = [20, 21, 26, 27, 32, 33, 38, 39, 40, 41, 42, 43, 44, 45, 56, 57, 62, 63, 68, 69, 74, 75, 76, 77, 78, 79, 80, 81, 92, 93, 98, 99, 112, 113, 128, 129, 134, 135, 148, 149, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 178, 179, 184, 185, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 214, 215, 220, 221]);
        } catch (error) {
        }
        exports2.inspectOpts = Object.keys(process.env).filter((key) => /^debug_/i.test(key)).reduce((obj, key) => {
          const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => k.toUpperCase());
          let val = process.env[key];
          return val = !!/^(yes|on|true|enabled)$/i.test(val) || !/^(no|off|false|disabled)$/i.test(val) && ("null" === val ? null : Number(val)), obj[prop] = val, obj;
        }, {}), module2.exports = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js")(exports2);
        const { formatters } = module2.exports;
        formatters.o = function(v) {
          return this.inspectOpts.colors = this.useColors, util.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
        }, formatters.O = function(v) {
          return this.inspectOpts.colors = this.useColors, util.inspect(v, this.inspectOpts);
        };
      }, "./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js": (module2) => {
        "use strict";
        const GENSYNC_START = Symbol.for("gensync:v1:start"), GENSYNC_SUSPEND = Symbol.for("gensync:v1:suspend");
        function assertTypeof(type, name, value, allowUndefined) {
          if (typeof value === type || allowUndefined && void 0 === value)
            return;
          let msg;
          throw msg = allowUndefined ? `Expected opts.${name} to be either a ${type}, or undefined.` : `Expected opts.${name} to be a ${type}.`, makeError(msg, "GENSYNC_OPTIONS_ERROR");
        }
        function makeError(msg, code) {
          return Object.assign(new Error(msg), { code });
        }
        function buildOperation({ name, arity, sync, async }) {
          return setFunctionMetadata(name, arity, function* (...args) {
            const resume = yield GENSYNC_START;
            if (!resume) {
              return sync.call(this, args);
            }
            let result;
            try {
              async.call(this, args, (value) => {
                result || (result = { value }, resume());
              }, (err) => {
                result || (result = { err }, resume());
              });
            } catch (err) {
              result = { err }, resume();
            }
            if (yield GENSYNC_SUSPEND, result.hasOwnProperty("err"))
              throw result.err;
            return result.value;
          });
        }
        function evaluateSync(gen) {
          let value;
          for (; !({ value } = gen.next()).done; )
            assertStart(value, gen);
          return value;
        }
        function evaluateAsync(gen, resolve2, reject) {
          !function step() {
            try {
              let value;
              for (; !({ value } = gen.next()).done; ) {
                assertStart(value, gen);
                let sync = true, didSyncResume = false;
                const out = gen.next(() => {
                  sync ? didSyncResume = true : step();
                });
                if (sync = false, assertSuspend(out, gen), !didSyncResume)
                  return;
              }
              return resolve2(value);
            } catch (err) {
              return reject(err);
            }
          }();
        }
        function assertStart(value, gen) {
          value !== GENSYNC_START && throwError(gen, makeError(`Got unexpected yielded value in gensync generator: ${JSON.stringify(value)}. Did you perhaps mean to use 'yield*' instead of 'yield'?`, "GENSYNC_EXPECTED_START"));
        }
        function assertSuspend({ value, done }, gen) {
          (done || value !== GENSYNC_SUSPEND) && throwError(gen, makeError(done ? "Unexpected generator completion. If you get this, it is probably a gensync bug." : `Expected GENSYNC_SUSPEND, got ${JSON.stringify(value)}. If you get this, it is probably a gensync bug.`, "GENSYNC_EXPECTED_SUSPEND"));
        }
        function throwError(gen, err) {
          throw gen.throw && gen.throw(err), err;
        }
        function setFunctionMetadata(name, arity, fn) {
          if ("string" == typeof name) {
            const nameDesc = Object.getOwnPropertyDescriptor(fn, "name");
            nameDesc && !nameDesc.configurable || Object.defineProperty(fn, "name", Object.assign(nameDesc || {}, { configurable: true, value: name }));
          }
          if ("number" == typeof arity) {
            const lengthDesc = Object.getOwnPropertyDescriptor(fn, "length");
            lengthDesc && !lengthDesc.configurable || Object.defineProperty(fn, "length", Object.assign(lengthDesc || {}, { configurable: true, value: arity }));
          }
          return fn;
        }
        module2.exports = Object.assign(function(optsOrFn) {
          let genFn = optsOrFn;
          return genFn = "function" != typeof optsOrFn ? function({ name, arity, sync, async, errback }) {
            if (assertTypeof("string", "name", name, true), assertTypeof("number", "arity", arity, true), assertTypeof("function", "sync", sync), assertTypeof("function", "async", async, true), assertTypeof("function", "errback", errback, true), async && errback)
              throw makeError("Expected one of either opts.async or opts.errback, but got _both_.", "GENSYNC_OPTIONS_ERROR");
            if ("string" != typeof name) {
              let fnName;
              errback && errback.name && "errback" !== errback.name && (fnName = errback.name), async && async.name && "async" !== async.name && (fnName = async.name.replace(/Async$/, "")), sync && sync.name && "sync" !== sync.name && (fnName = sync.name.replace(/Sync$/, "")), "string" == typeof fnName && (name = fnName);
            }
            "number" != typeof arity && (arity = sync.length);
            return buildOperation({ name, arity, sync: function(args) {
              return sync.apply(this, args);
            }, async: function(args, resolve2, reject) {
              async ? async.apply(this, args).then(resolve2, reject) : errback ? errback.call(this, ...args, (err, value) => {
                null == err ? resolve2(value) : reject(err);
              }) : resolve2(sync.apply(this, args));
            } });
          }(optsOrFn) : function(genFn2) {
            return setFunctionMetadata(genFn2.name, genFn2.length, function(...args) {
              return genFn2.apply(this, args);
            });
          }(optsOrFn), Object.assign(genFn, function(genFn2) {
            return { sync: function(...args) {
              return evaluateSync(genFn2.apply(this, args));
            }, async: function(...args) {
              return new Promise((resolve2, reject) => {
                evaluateAsync(genFn2.apply(this, args), resolve2, reject);
              });
            }, errback: function(...args) {
              const cb = args.pop();
              if ("function" != typeof cb)
                throw makeError("Asynchronous function called without callback", "GENSYNC_ERRBACK_NO_CALLBACK");
              let gen;
              try {
                gen = genFn2.apply(this, args);
              } catch (err) {
                return void cb(err);
              }
              evaluateAsync(gen, (val) => cb(void 0, val), (err) => cb(err));
            } };
          }(genFn));
        }, { all: buildOperation({ name: "all", arity: 1, sync: function(args) {
          return Array.from(args[0]).map((item) => evaluateSync(item));
        }, async: function(args, resolve2, reject) {
          const items = Array.from(args[0]);
          if (0 === items.length)
            return void Promise.resolve().then(() => resolve2([]));
          let count = 0;
          const results = items.map(() => {
          });
          items.forEach((item, i) => {
            evaluateAsync(item, (val) => {
              results[i] = val, count += 1, count === results.length && resolve2(results);
            }, reject);
          });
        } }), race: buildOperation({ name: "race", arity: 1, sync: function(args) {
          const items = Array.from(args[0]);
          if (0 === items.length)
            throw makeError("Must race at least 1 item", "GENSYNC_RACE_NONEMPTY");
          return evaluateSync(items[0]);
        }, async: function(args, resolve2, reject) {
          const items = Array.from(args[0]);
          if (0 === items.length)
            throw makeError("Must race at least 1 item", "GENSYNC_RACE_NONEMPTY");
          for (const item of items)
            evaluateAsync(item, resolve2, reject);
        } }) });
      }, "./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        module2.exports = __webpack_require__2("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json");
      }, "./node_modules/.pnpm/has-flag@3.0.0/node_modules/has-flag/index.js": (module2) => {
        "use strict";
        module2.exports = (flag, argv) => {
          argv = argv || process.argv;
          const prefix = flag.startsWith("-") ? "" : 1 === flag.length ? "-" : "--", pos = argv.indexOf(prefix + flag), terminatorPos = argv.indexOf("--");
          return -1 !== pos && (-1 === terminatorPos || pos < terminatorPos);
        };
      }, "./node_modules/.pnpm/jsesc@2.5.2/node_modules/jsesc/jsesc.js": (module2) => {
        "use strict";
        const object = {}, hasOwnProperty2 = object.hasOwnProperty, forOwn = (object2, callback) => {
          for (const key in object2)
            hasOwnProperty2.call(object2, key) && callback(key, object2[key]);
        }, toString2 = object.toString, isArray2 = Array.isArray, isBuffer = Buffer.isBuffer, singleEscapes = { '"': '\\"', "'": "\\'", "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t" }, regexSingleEscape = /["'\\\b\f\n\r\t]/, regexDigit = /[0-9]/, regexWhitelist = /[ !#-&\(-\[\]-_a-~]/, jsesc = (argument, options) => {
          const increaseIndentation = () => {
            oldIndent = indent, ++options.indentLevel, indent = options.indent.repeat(options.indentLevel);
          }, defaults = { escapeEverything: false, minimal: false, isScriptContext: false, quotes: "single", wrap: false, es6: false, json: false, compact: true, lowercaseHex: false, numbers: "decimal", indent: "	", indentLevel: 0, __inline1__: false, __inline2__: false }, json = options && options.json;
          var destination, source;
          json && (defaults.quotes = "double", defaults.wrap = true), destination = defaults, options = (source = options) ? (forOwn(source, (key, value) => {
            destination[key] = value;
          }), destination) : destination, "single" != options.quotes && "double" != options.quotes && "backtick" != options.quotes && (options.quotes = "single");
          const quote = "double" == options.quotes ? '"' : "backtick" == options.quotes ? "`" : "'", compact = options.compact, lowercaseHex = options.lowercaseHex;
          let indent = options.indent.repeat(options.indentLevel), oldIndent = "";
          const inline1 = options.__inline1__, inline2 = options.__inline2__, newLine = compact ? "" : "\n";
          let result, isEmpty = true;
          const useBinNumbers = "binary" == options.numbers, useOctNumbers = "octal" == options.numbers, useDecNumbers = "decimal" == options.numbers, useHexNumbers = "hexadecimal" == options.numbers;
          if (json && argument && "function" == typeof argument.toJSON && (argument = argument.toJSON()), !((value) => "string" == typeof value || "[object String]" == toString2.call(value))(argument)) {
            if (((value) => "[object Map]" == toString2.call(value))(argument))
              return 0 == argument.size ? "new Map()" : (compact || (options.__inline1__ = true, options.__inline2__ = false), "new Map(" + jsesc(Array.from(argument), options) + ")");
            if (((value) => "[object Set]" == toString2.call(value))(argument))
              return 0 == argument.size ? "new Set()" : "new Set(" + jsesc(Array.from(argument), options) + ")";
            if (isBuffer(argument))
              return 0 == argument.length ? "Buffer.from([])" : "Buffer.from(" + jsesc(Array.from(argument), options) + ")";
            if (isArray2(argument))
              return result = [], options.wrap = true, inline1 && (options.__inline1__ = false, options.__inline2__ = true), inline2 || increaseIndentation(), ((array, callback) => {
                const length2 = array.length;
                let index3 = -1;
                for (; ++index3 < length2; )
                  callback(array[index3]);
              })(argument, (value) => {
                isEmpty = false, inline2 && (options.__inline2__ = false), result.push((compact || inline2 ? "" : indent) + jsesc(value, options));
              }), isEmpty ? "[]" : inline2 ? "[" + result.join(", ") + "]" : "[" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "]";
            if (!((value) => "number" == typeof value || "[object Number]" == toString2.call(value))(argument))
              return ((value) => "[object Object]" == toString2.call(value))(argument) ? (result = [], options.wrap = true, increaseIndentation(), forOwn(argument, (key, value) => {
                isEmpty = false, result.push((compact ? "" : indent) + jsesc(key, options) + ":" + (compact ? "" : " ") + jsesc(value, options));
              }), isEmpty ? "{}" : "{" + newLine + result.join("," + newLine) + newLine + (compact ? "" : oldIndent) + "}") : json ? JSON.stringify(argument) || "null" : String(argument);
            if (json)
              return JSON.stringify(argument);
            if (useDecNumbers)
              return String(argument);
            if (useHexNumbers) {
              let hexadecimal = argument.toString(16);
              return lowercaseHex || (hexadecimal = hexadecimal.toUpperCase()), "0x" + hexadecimal;
            }
            if (useBinNumbers)
              return "0b" + argument.toString(2);
            if (useOctNumbers)
              return "0o" + argument.toString(8);
          }
          const string = argument;
          let index2 = -1;
          const length = string.length;
          for (result = ""; ++index2 < length; ) {
            const character = string.charAt(index2);
            if (options.es6) {
              const first = string.charCodeAt(index2);
              if (first >= 55296 && first <= 56319 && length > index2 + 1) {
                const second = string.charCodeAt(index2 + 1);
                if (second >= 56320 && second <= 57343) {
                  let hexadecimal2 = (1024 * (first - 55296) + second - 56320 + 65536).toString(16);
                  lowercaseHex || (hexadecimal2 = hexadecimal2.toUpperCase()), result += "\\u{" + hexadecimal2 + "}", ++index2;
                  continue;
                }
              }
            }
            if (!options.escapeEverything) {
              if (regexWhitelist.test(character)) {
                result += character;
                continue;
              }
              if ('"' == character) {
                result += quote == character ? '\\"' : character;
                continue;
              }
              if ("`" == character) {
                result += quote == character ? "\\`" : character;
                continue;
              }
              if ("'" == character) {
                result += quote == character ? "\\'" : character;
                continue;
              }
            }
            if ("\0" == character && !json && !regexDigit.test(string.charAt(index2 + 1))) {
              result += "\\0";
              continue;
            }
            if (regexSingleEscape.test(character)) {
              result += singleEscapes[character];
              continue;
            }
            const charCode = character.charCodeAt(0);
            if (options.minimal && 8232 != charCode && 8233 != charCode) {
              result += character;
              continue;
            }
            let hexadecimal = charCode.toString(16);
            lowercaseHex || (hexadecimal = hexadecimal.toUpperCase());
            const longhand = hexadecimal.length > 2 || json, escaped = "\\" + (longhand ? "u" : "x") + ("0000" + hexadecimal).slice(longhand ? -4 : -2);
            result += escaped;
          }
          return options.wrap && (result = quote + result + quote), "`" == quote && (result = result.replace(/\$\{/g, "\\${")), options.isScriptContext ? result.replace(/<\/(script|style)/gi, "<\\/$1").replace(/<!--/g, json ? "\\u003C!--" : "\\x3C!--") : result;
        };
        jsesc.version = "2.5.2", module2.exports = jsesc;
      }, "./node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js": (module2) => {
        var s = 1e3, m = 60 * s, h = 60 * m, d = 24 * h, w = 7 * d, y = 365.25 * d;
        function plural(ms, msAbs, n, name) {
          var isPlural = msAbs >= 1.5 * n;
          return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
        }
        module2.exports = function(val, options) {
          options = options || {};
          var type = typeof val;
          if ("string" === type && val.length > 0)
            return function(str) {
              if ((str = String(str)).length > 100)
                return;
              var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
              if (!match)
                return;
              var n = parseFloat(match[1]);
              switch ((match[2] || "ms").toLowerCase()) {
                case "years":
                case "year":
                case "yrs":
                case "yr":
                case "y":
                  return n * y;
                case "weeks":
                case "week":
                case "w":
                  return n * w;
                case "days":
                case "day":
                case "d":
                  return n * d;
                case "hours":
                case "hour":
                case "hrs":
                case "hr":
                case "h":
                  return n * h;
                case "minutes":
                case "minute":
                case "mins":
                case "min":
                case "m":
                  return n * m;
                case "seconds":
                case "second":
                case "secs":
                case "sec":
                case "s":
                  return n * s;
                case "milliseconds":
                case "millisecond":
                case "msecs":
                case "msec":
                case "ms":
                  return n;
                default:
                  return;
              }
            }(val);
          if ("number" === type && isFinite(val))
            return options.long ? function(ms) {
              var msAbs = Math.abs(ms);
              if (msAbs >= d)
                return plural(ms, msAbs, d, "day");
              if (msAbs >= h)
                return plural(ms, msAbs, h, "hour");
              if (msAbs >= m)
                return plural(ms, msAbs, m, "minute");
              if (msAbs >= s)
                return plural(ms, msAbs, s, "second");
              return ms + " ms";
            }(val) : function(ms) {
              var msAbs = Math.abs(ms);
              if (msAbs >= d)
                return Math.round(ms / d) + "d";
              if (msAbs >= h)
                return Math.round(ms / h) + "h";
              if (msAbs >= m)
                return Math.round(ms / m) + "m";
              if (msAbs >= s)
                return Math.round(ms / s) + "s";
              return ms + "ms";
            }(val);
          throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
        };
      }, "./node_modules/.pnpm/safe-buffer@5.1.2/node_modules/safe-buffer/index.js": (module2, exports2, __webpack_require__2) => {
        var buffer = __webpack_require__2("buffer"), Buffer2 = buffer.Buffer;
        function copyProps(src, dst) {
          for (var key in src)
            dst[key] = src[key];
        }
        function SafeBuffer(arg, encodingOrOffset, length) {
          return Buffer2(arg, encodingOrOffset, length);
        }
        Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow ? module2.exports = buffer : (copyProps(buffer, exports2), exports2.Buffer = SafeBuffer), copyProps(Buffer2, SafeBuffer), SafeBuffer.from = function(arg, encodingOrOffset, length) {
          if ("number" == typeof arg)
            throw new TypeError("Argument must not be a number");
          return Buffer2(arg, encodingOrOffset, length);
        }, SafeBuffer.alloc = function(size, fill, encoding) {
          if ("number" != typeof size)
            throw new TypeError("Argument must be a number");
          var buf = Buffer2(size);
          return void 0 !== fill ? "string" == typeof encoding ? buf.fill(fill, encoding) : buf.fill(fill) : buf.fill(0), buf;
        }, SafeBuffer.allocUnsafe = function(size) {
          if ("number" != typeof size)
            throw new TypeError("Argument must be a number");
          return Buffer2(size);
        }, SafeBuffer.allocUnsafeSlow = function(size) {
          if ("number" != typeof size)
            throw new TypeError("Argument must be a number");
          return buffer.SlowBuffer(size);
        };
      }, "./node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js": (module2, exports2) => {
        var debug;
        exports2 = module2.exports = SemVer, debug = "object" == typeof process && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? function() {
          var args = Array.prototype.slice.call(arguments, 0);
          args.unshift("SEMVER"), console.log.apply(console, args);
        } : function() {
        }, exports2.SEMVER_SPEC_VERSION = "2.0.0";
        var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991, re = exports2.re = [], src = exports2.src = [], t = exports2.tokens = {}, R = 0;
        function tok(n) {
          t[n] = R++;
        }
        tok("NUMERICIDENTIFIER"), src[t.NUMERICIDENTIFIER] = "0|[1-9]\\d*", tok("NUMERICIDENTIFIERLOOSE"), src[t.NUMERICIDENTIFIERLOOSE] = "[0-9]+", tok("NONNUMERICIDENTIFIER"), src[t.NONNUMERICIDENTIFIER] = "\\d*[a-zA-Z-][a-zA-Z0-9-]*", tok("MAINVERSION"), src[t.MAINVERSION] = "(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")\\.(" + src[t.NUMERICIDENTIFIER] + ")", tok("MAINVERSIONLOOSE"), src[t.MAINVERSIONLOOSE] = "(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")\\.(" + src[t.NUMERICIDENTIFIERLOOSE] + ")", tok("PRERELEASEIDENTIFIER"), src[t.PRERELEASEIDENTIFIER] = "(?:" + src[t.NUMERICIDENTIFIER] + "|" + src[t.NONNUMERICIDENTIFIER] + ")", tok("PRERELEASEIDENTIFIERLOOSE"), src[t.PRERELEASEIDENTIFIERLOOSE] = "(?:" + src[t.NUMERICIDENTIFIERLOOSE] + "|" + src[t.NONNUMERICIDENTIFIER] + ")", tok("PRERELEASE"), src[t.PRERELEASE] = "(?:-(" + src[t.PRERELEASEIDENTIFIER] + "(?:\\." + src[t.PRERELEASEIDENTIFIER] + ")*))", tok("PRERELEASELOOSE"), src[t.PRERELEASELOOSE] = "(?:-?(" + src[t.PRERELEASEIDENTIFIERLOOSE] + "(?:\\." + src[t.PRERELEASEIDENTIFIERLOOSE] + ")*))", tok("BUILDIDENTIFIER"), src[t.BUILDIDENTIFIER] = "[0-9A-Za-z-]+", tok("BUILD"), src[t.BUILD] = "(?:\\+(" + src[t.BUILDIDENTIFIER] + "(?:\\." + src[t.BUILDIDENTIFIER] + ")*))", tok("FULL"), tok("FULLPLAIN"), src[t.FULLPLAIN] = "v?" + src[t.MAINVERSION] + src[t.PRERELEASE] + "?" + src[t.BUILD] + "?", src[t.FULL] = "^" + src[t.FULLPLAIN] + "$", tok("LOOSEPLAIN"), src[t.LOOSEPLAIN] = "[v=\\s]*" + src[t.MAINVERSIONLOOSE] + src[t.PRERELEASELOOSE] + "?" + src[t.BUILD] + "?", tok("LOOSE"), src[t.LOOSE] = "^" + src[t.LOOSEPLAIN] + "$", tok("GTLT"), src[t.GTLT] = "((?:<|>)?=?)", tok("XRANGEIDENTIFIERLOOSE"), src[t.XRANGEIDENTIFIERLOOSE] = src[t.NUMERICIDENTIFIERLOOSE] + "|x|X|\\*", tok("XRANGEIDENTIFIER"), src[t.XRANGEIDENTIFIER] = src[t.NUMERICIDENTIFIER] + "|x|X|\\*", tok("XRANGEPLAIN"), src[t.XRANGEPLAIN] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:\\.(" + src[t.XRANGEIDENTIFIER] + ")(?:" + src[t.PRERELEASE] + ")?" + src[t.BUILD] + "?)?)?", tok("XRANGEPLAINLOOSE"), src[t.XRANGEPLAINLOOSE] = "[v=\\s]*(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:\\.(" + src[t.XRANGEIDENTIFIERLOOSE] + ")(?:" + src[t.PRERELEASELOOSE] + ")?" + src[t.BUILD] + "?)?)?", tok("XRANGE"), src[t.XRANGE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAIN] + "$", tok("XRANGELOOSE"), src[t.XRANGELOOSE] = "^" + src[t.GTLT] + "\\s*" + src[t.XRANGEPLAINLOOSE] + "$", tok("COERCE"), src[t.COERCE] = "(^|[^\\d])(\\d{1,16})(?:\\.(\\d{1,16}))?(?:\\.(\\d{1,16}))?(?:$|[^\\d])", tok("COERCERTL"), re[t.COERCERTL] = new RegExp(src[t.COERCE], "g"), tok("LONETILDE"), src[t.LONETILDE] = "(?:~>?)", tok("TILDETRIM"), src[t.TILDETRIM] = "(\\s*)" + src[t.LONETILDE] + "\\s+", re[t.TILDETRIM] = new RegExp(src[t.TILDETRIM], "g");
        tok("TILDE"), src[t.TILDE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAIN] + "$", tok("TILDELOOSE"), src[t.TILDELOOSE] = "^" + src[t.LONETILDE] + src[t.XRANGEPLAINLOOSE] + "$", tok("LONECARET"), src[t.LONECARET] = "(?:\\^)", tok("CARETTRIM"), src[t.CARETTRIM] = "(\\s*)" + src[t.LONECARET] + "\\s+", re[t.CARETTRIM] = new RegExp(src[t.CARETTRIM], "g");
        tok("CARET"), src[t.CARET] = "^" + src[t.LONECARET] + src[t.XRANGEPLAIN] + "$", tok("CARETLOOSE"), src[t.CARETLOOSE] = "^" + src[t.LONECARET] + src[t.XRANGEPLAINLOOSE] + "$", tok("COMPARATORLOOSE"), src[t.COMPARATORLOOSE] = "^" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + ")$|^$", tok("COMPARATOR"), src[t.COMPARATOR] = "^" + src[t.GTLT] + "\\s*(" + src[t.FULLPLAIN] + ")$|^$", tok("COMPARATORTRIM"), src[t.COMPARATORTRIM] = "(\\s*)" + src[t.GTLT] + "\\s*(" + src[t.LOOSEPLAIN] + "|" + src[t.XRANGEPLAIN] + ")", re[t.COMPARATORTRIM] = new RegExp(src[t.COMPARATORTRIM], "g");
        tok("HYPHENRANGE"), src[t.HYPHENRANGE] = "^\\s*(" + src[t.XRANGEPLAIN] + ")\\s+-\\s+(" + src[t.XRANGEPLAIN] + ")\\s*$", tok("HYPHENRANGELOOSE"), src[t.HYPHENRANGELOOSE] = "^\\s*(" + src[t.XRANGEPLAINLOOSE] + ")\\s+-\\s+(" + src[t.XRANGEPLAINLOOSE] + ")\\s*$", tok("STAR"), src[t.STAR] = "(<|>)?=?\\s*\\*";
        for (var i = 0; i < R; i++)
          debug(i, src[i]), re[i] || (re[i] = new RegExp(src[i]));
        function parse4(version2, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), version2 instanceof SemVer)
            return version2;
          if ("string" != typeof version2)
            return null;
          if (version2.length > 256)
            return null;
          if (!(options.loose ? re[t.LOOSE] : re[t.FULL]).test(version2))
            return null;
          try {
            return new SemVer(version2, options);
          } catch (er) {
            return null;
          }
        }
        function SemVer(version2, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), version2 instanceof SemVer) {
            if (version2.loose === options.loose)
              return version2;
            version2 = version2.version;
          } else if ("string" != typeof version2)
            throw new TypeError("Invalid Version: " + version2);
          if (version2.length > 256)
            throw new TypeError("version is longer than 256 characters");
          if (!(this instanceof SemVer))
            return new SemVer(version2, options);
          debug("SemVer", version2, options), this.options = options, this.loose = !!options.loose;
          var m = version2.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL]);
          if (!m)
            throw new TypeError("Invalid Version: " + version2);
          if (this.raw = version2, this.major = +m[1], this.minor = +m[2], this.patch = +m[3], this.major > MAX_SAFE_INTEGER || this.major < 0)
            throw new TypeError("Invalid major version");
          if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
            throw new TypeError("Invalid minor version");
          if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
            throw new TypeError("Invalid patch version");
          m[4] ? this.prerelease = m[4].split(".").map(function(id) {
            if (/^[0-9]+$/.test(id)) {
              var num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER)
                return num;
            }
            return id;
          }) : this.prerelease = [], this.build = m[5] ? m[5].split(".") : [], this.format();
        }
        exports2.parse = parse4, exports2.valid = function(version2, options) {
          var v = parse4(version2, options);
          return v ? v.version : null;
        }, exports2.clean = function(version2, options) {
          var s = parse4(version2.trim().replace(/^[=v]+/, ""), options);
          return s ? s.version : null;
        }, exports2.SemVer = SemVer, SemVer.prototype.format = function() {
          return this.version = this.major + "." + this.minor + "." + this.patch, this.prerelease.length && (this.version += "-" + this.prerelease.join(".")), this.version;
        }, SemVer.prototype.toString = function() {
          return this.version;
        }, SemVer.prototype.compare = function(other) {
          return debug("SemVer.compare", this.version, this.options, other), other instanceof SemVer || (other = new SemVer(other, this.options)), this.compareMain(other) || this.comparePre(other);
        }, SemVer.prototype.compareMain = function(other) {
          return other instanceof SemVer || (other = new SemVer(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
        }, SemVer.prototype.comparePre = function(other) {
          if (other instanceof SemVer || (other = new SemVer(other, this.options)), this.prerelease.length && !other.prerelease.length)
            return -1;
          if (!this.prerelease.length && other.prerelease.length)
            return 1;
          if (!this.prerelease.length && !other.prerelease.length)
            return 0;
          var i2 = 0;
          do {
            var a = this.prerelease[i2], b = other.prerelease[i2];
            if (debug("prerelease compare", i2, a, b), void 0 === a && void 0 === b)
              return 0;
            if (void 0 === b)
              return 1;
            if (void 0 === a)
              return -1;
            if (a !== b)
              return compareIdentifiers(a, b);
          } while (++i2);
        }, SemVer.prototype.compareBuild = function(other) {
          other instanceof SemVer || (other = new SemVer(other, this.options));
          var i2 = 0;
          do {
            var a = this.build[i2], b = other.build[i2];
            if (debug("prerelease compare", i2, a, b), void 0 === a && void 0 === b)
              return 0;
            if (void 0 === b)
              return 1;
            if (void 0 === a)
              return -1;
            if (a !== b)
              return compareIdentifiers(a, b);
          } while (++i2);
        }, SemVer.prototype.inc = function(release, identifier) {
          switch (release) {
            case "premajor":
              this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
              break;
            case "preminor":
              this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
              break;
            case "prepatch":
              this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
              break;
            case "prerelease":
              0 === this.prerelease.length && this.inc("patch", identifier), this.inc("pre", identifier);
              break;
            case "major":
              0 === this.minor && 0 === this.patch && 0 !== this.prerelease.length || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
              break;
            case "minor":
              0 === this.patch && 0 !== this.prerelease.length || this.minor++, this.patch = 0, this.prerelease = [];
              break;
            case "patch":
              0 === this.prerelease.length && this.patch++, this.prerelease = [];
              break;
            case "pre":
              if (0 === this.prerelease.length)
                this.prerelease = [0];
              else {
                for (var i2 = this.prerelease.length; --i2 >= 0; )
                  "number" == typeof this.prerelease[i2] && (this.prerelease[i2]++, i2 = -2);
                -1 === i2 && this.prerelease.push(0);
              }
              identifier && (this.prerelease[0] === identifier ? isNaN(this.prerelease[1]) && (this.prerelease = [identifier, 0]) : this.prerelease = [identifier, 0]);
              break;
            default:
              throw new Error("invalid increment argument: " + release);
          }
          return this.format(), this.raw = this.version, this;
        }, exports2.inc = function(version2, release, loose, identifier) {
          "string" == typeof loose && (identifier = loose, loose = void 0);
          try {
            return new SemVer(version2, loose).inc(release, identifier).version;
          } catch (er) {
            return null;
          }
        }, exports2.diff = function(version1, version2) {
          if (eq(version1, version2))
            return null;
          var v1 = parse4(version1), v2 = parse4(version2), prefix = "";
          if (v1.prerelease.length || v2.prerelease.length) {
            prefix = "pre";
            var defaultResult = "prerelease";
          }
          for (var key in v1)
            if (("major" === key || "minor" === key || "patch" === key) && v1[key] !== v2[key])
              return prefix + key;
          return defaultResult;
        }, exports2.compareIdentifiers = compareIdentifiers;
        var numeric = /^[0-9]+$/;
        function compareIdentifiers(a, b) {
          var anum = numeric.test(a), bnum = numeric.test(b);
          return anum && bnum && (a = +a, b = +b), a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
        }
        function compare(a, b, loose) {
          return new SemVer(a, loose).compare(new SemVer(b, loose));
        }
        function gt(a, b, loose) {
          return compare(a, b, loose) > 0;
        }
        function lt(a, b, loose) {
          return compare(a, b, loose) < 0;
        }
        function eq(a, b, loose) {
          return 0 === compare(a, b, loose);
        }
        function neq(a, b, loose) {
          return 0 !== compare(a, b, loose);
        }
        function gte(a, b, loose) {
          return compare(a, b, loose) >= 0;
        }
        function lte(a, b, loose) {
          return compare(a, b, loose) <= 0;
        }
        function cmp(a, op, b, loose) {
          switch (op) {
            case "===":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a === b;
            case "!==":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a !== b;
            case "":
            case "=":
            case "==":
              return eq(a, b, loose);
            case "!=":
              return neq(a, b, loose);
            case ">":
              return gt(a, b, loose);
            case ">=":
              return gte(a, b, loose);
            case "<":
              return lt(a, b, loose);
            case "<=":
              return lte(a, b, loose);
            default:
              throw new TypeError("Invalid operator: " + op);
          }
        }
        function Comparator(comp, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), comp instanceof Comparator) {
            if (comp.loose === !!options.loose)
              return comp;
            comp = comp.value;
          }
          if (!(this instanceof Comparator))
            return new Comparator(comp, options);
          debug("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY ? this.value = "" : this.value = this.operator + this.semver.version, debug("comp", this);
        }
        exports2.rcompareIdentifiers = function(a, b) {
          return compareIdentifiers(b, a);
        }, exports2.major = function(a, loose) {
          return new SemVer(a, loose).major;
        }, exports2.minor = function(a, loose) {
          return new SemVer(a, loose).minor;
        }, exports2.patch = function(a, loose) {
          return new SemVer(a, loose).patch;
        }, exports2.compare = compare, exports2.compareLoose = function(a, b) {
          return compare(a, b, true);
        }, exports2.compareBuild = function(a, b, loose) {
          var versionA = new SemVer(a, loose), versionB = new SemVer(b, loose);
          return versionA.compare(versionB) || versionA.compareBuild(versionB);
        }, exports2.rcompare = function(a, b, loose) {
          return compare(b, a, loose);
        }, exports2.sort = function(list, loose) {
          return list.sort(function(a, b) {
            return exports2.compareBuild(a, b, loose);
          });
        }, exports2.rsort = function(list, loose) {
          return list.sort(function(a, b) {
            return exports2.compareBuild(b, a, loose);
          });
        }, exports2.gt = gt, exports2.lt = lt, exports2.eq = eq, exports2.neq = neq, exports2.gte = gte, exports2.lte = lte, exports2.cmp = cmp, exports2.Comparator = Comparator;
        var ANY = {};
        function Range(range, options) {
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), range instanceof Range)
            return range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease ? range : new Range(range.raw, options);
          if (range instanceof Comparator)
            return new Range(range.value, options);
          if (!(this instanceof Range))
            return new Range(range, options);
          if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range, this.set = range.split(/\s*\|\|\s*/).map(function(range2) {
            return this.parseRange(range2.trim());
          }, this).filter(function(c) {
            return c.length;
          }), !this.set.length)
            throw new TypeError("Invalid SemVer Range: " + range);
          this.format();
        }
        function isSatisfiable(comparators, options) {
          for (var result = true, remainingComparators = comparators.slice(), testComparator = remainingComparators.pop(); result && remainingComparators.length; )
            result = remainingComparators.every(function(otherComparator) {
              return testComparator.intersects(otherComparator, options);
            }), testComparator = remainingComparators.pop();
          return result;
        }
        function isX(id) {
          return !id || "x" === id.toLowerCase() || "*" === id;
        }
        function hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {
          return ((from = isX(fM) ? "" : isX(fm) ? ">=" + fM + ".0.0" : isX(fp) ? ">=" + fM + "." + fm + ".0" : ">=" + from) + " " + (to = isX(tM) ? "" : isX(tm) ? "<" + (+tM + 1) + ".0.0" : isX(tp) ? "<" + tM + "." + (+tm + 1) + ".0" : tpr ? "<=" + tM + "." + tm + "." + tp + "-" + tpr : "<=" + to)).trim();
        }
        function testSet(set, version2, options) {
          for (var i2 = 0; i2 < set.length; i2++)
            if (!set[i2].test(version2))
              return false;
          if (version2.prerelease.length && !options.includePrerelease) {
            for (i2 = 0; i2 < set.length; i2++)
              if (debug(set[i2].semver), set[i2].semver !== ANY && set[i2].semver.prerelease.length > 0) {
                var allowed = set[i2].semver;
                if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch)
                  return true;
              }
            return false;
          }
          return true;
        }
        function satisfies2(version2, range, options) {
          try {
            range = new Range(range, options);
          } catch (er) {
            return false;
          }
          return range.test(version2);
        }
        function outside(version2, range, hilo, options) {
          var gtfn, ltefn, ltfn, comp, ecomp;
          switch (version2 = new SemVer(version2, options), range = new Range(range, options), hilo) {
            case ">":
              gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
              break;
            case "<":
              gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
              break;
            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }
          if (satisfies2(version2, range, options))
            return false;
          for (var i2 = 0; i2 < range.set.length; ++i2) {
            var comparators = range.set[i2], high = null, low = null;
            if (comparators.forEach(function(comparator) {
              comparator.semver === ANY && (comparator = new Comparator(">=0.0.0")), high = high || comparator, low = low || comparator, gtfn(comparator.semver, high.semver, options) ? high = comparator : ltfn(comparator.semver, low.semver, options) && (low = comparator);
            }), high.operator === comp || high.operator === ecomp)
              return false;
            if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver))
              return false;
            if (low.operator === ecomp && ltfn(version2, low.semver))
              return false;
          }
          return true;
        }
        Comparator.prototype.parse = function(comp) {
          var r2 = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR], m = comp.match(r2);
          if (!m)
            throw new TypeError("Invalid comparator: " + comp);
          this.operator = void 0 !== m[1] ? m[1] : "", "=" === this.operator && (this.operator = ""), m[2] ? this.semver = new SemVer(m[2], this.options.loose) : this.semver = ANY;
        }, Comparator.prototype.toString = function() {
          return this.value;
        }, Comparator.prototype.test = function(version2) {
          if (debug("Comparator.test", version2, this.options.loose), this.semver === ANY || version2 === ANY)
            return true;
          if ("string" == typeof version2)
            try {
              version2 = new SemVer(version2, this.options);
            } catch (er) {
              return false;
            }
          return cmp(version2, this.operator, this.semver, this.options);
        }, Comparator.prototype.intersects = function(comp, options) {
          if (!(comp instanceof Comparator))
            throw new TypeError("a Comparator is required");
          var rangeTmp;
          if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), "" === this.operator)
            return "" === this.value || (rangeTmp = new Range(comp.value, options), satisfies2(this.value, rangeTmp, options));
          if ("" === comp.operator)
            return "" === comp.value || (rangeTmp = new Range(this.value, options), satisfies2(comp.semver, rangeTmp, options));
          var sameDirectionIncreasing = !(">=" !== this.operator && ">" !== this.operator || ">=" !== comp.operator && ">" !== comp.operator), sameDirectionDecreasing = !("<=" !== this.operator && "<" !== this.operator || "<=" !== comp.operator && "<" !== comp.operator), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = !(">=" !== this.operator && "<=" !== this.operator || ">=" !== comp.operator && "<=" !== comp.operator), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (">=" === this.operator || ">" === this.operator) && ("<=" === comp.operator || "<" === comp.operator), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ("<=" === this.operator || "<" === this.operator) && (">=" === comp.operator || ">" === comp.operator);
          return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
        }, exports2.Range = Range, Range.prototype.format = function() {
          return this.range = this.set.map(function(comps) {
            return comps.join(" ").trim();
          }).join("||").trim(), this.range;
        }, Range.prototype.toString = function() {
          return this.range;
        }, Range.prototype.parseRange = function(range) {
          var loose = this.options.loose;
          range = range.trim();
          var hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE];
          range = range.replace(hr, hyphenReplace), debug("hyphen replace", range), range = range.replace(re[t.COMPARATORTRIM], "$1$2$3"), debug("comparator trim", range, re[t.COMPARATORTRIM]), range = (range = (range = range.replace(re[t.TILDETRIM], "$1~")).replace(re[t.CARETTRIM], "$1^")).split(/\s+/).join(" ");
          var compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR], set = range.split(" ").map(function(comp) {
            return function(comp2, options) {
              return debug("comp", comp2, options), comp2 = function(comp3, options2) {
                return comp3.trim().split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    debug("caret", comp5, options3);
                    var r2 = options3.loose ? re[t.CARETLOOSE] : re[t.CARET];
                    return comp5.replace(r2, function(_, M, m, p, pr) {
                      var ret;
                      return debug("caret", comp5, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0" : isX(p) ? ret = "0" === M ? ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + ".0 <" + (+M + 1) + ".0.0" : pr ? (debug("replaceCaret pr", pr), ret = "0" === M ? "0" === m ? ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + m + "." + (+p + 1) : ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + "." + p + "-" + pr + " <" + (+M + 1) + ".0.0") : (debug("no pr"), ret = "0" === M ? "0" === m ? ">=" + M + "." + m + "." + p + " <" + M + "." + m + "." + (+p + 1) : ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0" : ">=" + M + "." + m + "." + p + " <" + (+M + 1) + ".0.0"), debug("caret return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug("caret", comp2), comp2 = function(comp3, options2) {
                return comp3.trim().split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    var r2 = options3.loose ? re[t.TILDELOOSE] : re[t.TILDE];
                    return comp5.replace(r2, function(_, M, m, p, pr) {
                      var ret;
                      return debug("tilde", comp5, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = ">=" + M + ".0.0 <" + (+M + 1) + ".0.0" : isX(p) ? ret = ">=" + M + "." + m + ".0 <" + M + "." + (+m + 1) + ".0" : pr ? (debug("replaceTilde pr", pr), ret = ">=" + M + "." + m + "." + p + "-" + pr + " <" + M + "." + (+m + 1) + ".0") : ret = ">=" + M + "." + m + "." + p + " <" + M + "." + (+m + 1) + ".0", debug("tilde return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug("tildes", comp2), comp2 = function(comp3, options2) {
                return debug("replaceXRanges", comp3, options2), comp3.split(/\s+/).map(function(comp4) {
                  return function(comp5, options3) {
                    comp5 = comp5.trim();
                    var r2 = options3.loose ? re[t.XRANGELOOSE] : re[t.XRANGE];
                    return comp5.replace(r2, function(ret, gtlt, M, m, p, pr) {
                      debug("xRange", comp5, ret, gtlt, M, m, p, pr);
                      var xM = isX(M), xm = xM || isX(m), xp = xm || isX(p), anyX = xp;
                      return "=" === gtlt && anyX && (gtlt = ""), pr = options3.includePrerelease ? "-0" : "", xM ? ret = ">" === gtlt || "<" === gtlt ? "<0.0.0-0" : "*" : gtlt && anyX ? (xm && (m = 0), p = 0, ">" === gtlt ? (gtlt = ">=", xm ? (M = +M + 1, m = 0, p = 0) : (m = +m + 1, p = 0)) : "<=" === gtlt && (gtlt = "<", xm ? M = +M + 1 : m = +m + 1), ret = gtlt + M + "." + m + "." + p + pr) : xm ? ret = ">=" + M + ".0.0" + pr + " <" + (+M + 1) + ".0.0" + pr : xp && (ret = ">=" + M + "." + m + ".0" + pr + " <" + M + "." + (+m + 1) + ".0" + pr), debug("xRange return", ret), ret;
                    });
                  }(comp4, options2);
                }).join(" ");
              }(comp2, options), debug("xrange", comp2), comp2 = function(comp3, options2) {
                return debug("replaceStars", comp3, options2), comp3.trim().replace(re[t.STAR], "");
              }(comp2, options), debug("stars", comp2), comp2;
            }(comp, this.options);
          }, this).join(" ").split(/\s+/);
          return this.options.loose && (set = set.filter(function(comp) {
            return !!comp.match(compRe);
          })), set = set.map(function(comp) {
            return new Comparator(comp, this.options);
          }, this);
        }, Range.prototype.intersects = function(range, options) {
          if (!(range instanceof Range))
            throw new TypeError("a Range is required");
          return this.set.some(function(thisComparators) {
            return isSatisfiable(thisComparators, options) && range.set.some(function(rangeComparators) {
              return isSatisfiable(rangeComparators, options) && thisComparators.every(function(thisComparator) {
                return rangeComparators.every(function(rangeComparator) {
                  return thisComparator.intersects(rangeComparator, options);
                });
              });
            });
          });
        }, exports2.toComparators = function(range, options) {
          return new Range(range, options).set.map(function(comp) {
            return comp.map(function(c) {
              return c.value;
            }).join(" ").trim().split(" ");
          });
        }, Range.prototype.test = function(version2) {
          if (!version2)
            return false;
          if ("string" == typeof version2)
            try {
              version2 = new SemVer(version2, this.options);
            } catch (er) {
              return false;
            }
          for (var i2 = 0; i2 < this.set.length; i2++)
            if (testSet(this.set[i2], version2, this.options))
              return true;
          return false;
        }, exports2.satisfies = satisfies2, exports2.maxSatisfying = function(versions, range, options) {
          var max = null, maxSV = null;
          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach(function(v) {
            rangeObj.test(v) && (max && -1 !== maxSV.compare(v) || (maxSV = new SemVer(max = v, options)));
          }), max;
        }, exports2.minSatisfying = function(versions, range, options) {
          var min = null, minSV = null;
          try {
            var rangeObj = new Range(range, options);
          } catch (er) {
            return null;
          }
          return versions.forEach(function(v) {
            rangeObj.test(v) && (min && 1 !== minSV.compare(v) || (minSV = new SemVer(min = v, options)));
          }), min;
        }, exports2.minVersion = function(range, loose) {
          range = new Range(range, loose);
          var minver = new SemVer("0.0.0");
          if (range.test(minver))
            return minver;
          if (minver = new SemVer("0.0.0-0"), range.test(minver))
            return minver;
          minver = null;
          for (var i2 = 0; i2 < range.set.length; ++i2) {
            range.set[i2].forEach(function(comparator) {
              var compver = new SemVer(comparator.semver.version);
              switch (comparator.operator) {
                case ">":
                  0 === compver.prerelease.length ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
                case "":
                case ">=":
                  minver && !gt(minver, compver) || (minver = compver);
                  break;
                case "<":
                case "<=":
                  break;
                default:
                  throw new Error("Unexpected operation: " + comparator.operator);
              }
            });
          }
          if (minver && range.test(minver))
            return minver;
          return null;
        }, exports2.validRange = function(range, options) {
          try {
            return new Range(range, options).range || "*";
          } catch (er) {
            return null;
          }
        }, exports2.ltr = function(version2, range, options) {
          return outside(version2, range, "<", options);
        }, exports2.gtr = function(version2, range, options) {
          return outside(version2, range, ">", options);
        }, exports2.outside = outside, exports2.prerelease = function(version2, options) {
          var parsed = parse4(version2, options);
          return parsed && parsed.prerelease.length ? parsed.prerelease : null;
        }, exports2.intersects = function(r1, r2, options) {
          return r1 = new Range(r1, options), r2 = new Range(r2, options), r1.intersects(r2);
        }, exports2.coerce = function(version2, options) {
          if (version2 instanceof SemVer)
            return version2;
          "number" == typeof version2 && (version2 = String(version2));
          if ("string" != typeof version2)
            return null;
          var match = null;
          if ((options = options || {}).rtl) {
            for (var next; (next = re[t.COERCERTL].exec(version2)) && (!match || match.index + match[0].length !== version2.length); )
              match && next.index + next[0].length === match.index + match[0].length || (match = next), re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
            re[t.COERCERTL].lastIndex = -1;
          } else
            match = version2.match(re[t.COERCE]);
          if (null === match)
            return null;
          return parse4(match[2] + "." + (match[3] || "0") + "." + (match[4] || "0"), options);
        };
      }, "./node_modules/.pnpm/supports-color@5.5.0/node_modules/supports-color/index.js": (module2, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        const os = __webpack_require__2("os"), hasFlag = __webpack_require__2("./node_modules/.pnpm/has-flag@3.0.0/node_modules/has-flag/index.js"), env = process.env;
        let forceColor;
        function getSupportLevel(stream) {
          const level = function(stream2) {
            if (false === forceColor)
              return 0;
            if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor"))
              return 3;
            if (hasFlag("color=256"))
              return 2;
            if (stream2 && !stream2.isTTY && true !== forceColor)
              return 0;
            const min = forceColor ? 1 : 0;
            if ("win32" === process.platform) {
              const osRelease = os.release().split(".");
              return Number(process.versions.node.split(".")[0]) >= 8 && Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586 ? Number(osRelease[2]) >= 14931 ? 3 : 2 : 1;
            }
            if ("CI" in env)
              return ["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI"].some((sign) => sign in env) || "codeship" === env.CI_NAME ? 1 : min;
            if ("TEAMCITY_VERSION" in env)
              return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
            if ("truecolor" === env.COLORTERM)
              return 3;
            if ("TERM_PROGRAM" in env) {
              const version2 = parseInt((env.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
              switch (env.TERM_PROGRAM) {
                case "iTerm.app":
                  return version2 >= 3 ? 3 : 2;
                case "Apple_Terminal":
                  return 2;
              }
            }
            return /-256(color)?$/i.test(env.TERM) ? 2 : /^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM) || "COLORTERM" in env ? 1 : (env.TERM, min);
          }(stream);
          return function(level2) {
            return 0 !== level2 && { level: level2, hasBasic: true, has256: level2 >= 2, has16m: level2 >= 3 };
          }(level);
        }
        hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") ? forceColor = false : (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) && (forceColor = true), "FORCE_COLOR" in env && (forceColor = 0 === env.FORCE_COLOR.length || 0 !== parseInt(env.FORCE_COLOR, 10)), module2.exports = { supportsColor: getSupportLevel, stdout: getSupportLevel(process.stdout), stderr: getSupportLevel(process.stderr) };
      }, "./node_modules/.pnpm/to-fast-properties@2.0.0/node_modules/to-fast-properties/index.js": (module2) => {
        "use strict";
        let fastProto = null;
        function FastObject(o) {
          if (null !== fastProto && (fastProto.property, 1)) {
            const result = fastProto;
            return fastProto = FastObject.prototype = null, result;
          }
          return fastProto = FastObject.prototype = null == o ? /* @__PURE__ */ Object.create(null) : o, new FastObject();
        }
        FastObject(), module2.exports = function(o) {
          return FastObject(o);
        };
      }, "./stubs/babel_codeframe.js": (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        function codeFrameColumns() {
          return "";
        }
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { codeFrameColumns: () => codeFrameColumns });
      }, "./stubs/helper_compilation_targets.js": (__unused_webpack_module, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        function getTargets() {
          return {};
        }
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { default: () => getTargets });
      }, assert: (module2) => {
        "use strict";
        module2.exports = _chunkI7OK7DX6cjs.__require.call(void 0, "assert");
      }, buffer: (module2) => {
        "use strict";
        module2.exports = _chunkI7OK7DX6cjs.__require.call(void 0, "buffer");
      }, fs: (module2) => {
        "use strict";
        module2.exports = _chunkI7OK7DX6cjs.__require.call(void 0, "fs");
      }, module: (module2) => {
        "use strict";
        module2.exports = _chunkI7OK7DX6cjs.__require.call(void 0, "module");
      }, os: (module2) => {
        "use strict";
        module2.exports = _chunkI7OK7DX6cjs.__require.call(void 0, "os");
      }, path: (module2) => {
        "use strict";
        module2.exports = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
      }, tty: (module2) => {
        "use strict";
        module2.exports = _chunkI7OK7DX6cjs.__require.call(void 0, "tty");
      }, url: (module2) => {
        "use strict";
        module2.exports = _chunkI7OK7DX6cjs.__require.call(void 0, "url");
      }, util: (module2) => {
        "use strict";
        module2.exports = _chunkI7OK7DX6cjs.__require.call(void 0, "util");
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/caching.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assertSimpleType = assertSimpleType, exports2.makeStrongCache = makeStrongCache, exports2.makeStrongCacheSync = function(handler) {
          return synchronize(makeStrongCache(handler));
        }, exports2.makeWeakCache = makeWeakCache, exports2.makeWeakCacheSync = function(handler) {
          return synchronize(makeWeakCache(handler));
        };
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/gensync-utils/async.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/util.js");
        const synchronize = (gen) => _gensync()(gen).sync;
        function* genTrue() {
          return true;
        }
        function makeWeakCache(handler) {
          return makeCachedFunction(WeakMap, handler);
        }
        function makeStrongCache(handler) {
          return makeCachedFunction(Map, handler);
        }
        function makeCachedFunction(CallCache, handler) {
          const callCacheSync = new CallCache(), callCacheAsync = new CallCache(), futureCache = new CallCache();
          return function* (arg, data2) {
            const asyncContext = yield* (0, _async.isAsync)(), callCache = asyncContext ? callCacheAsync : callCacheSync, cached = yield* function* (asyncContext2, callCache2, futureCache2, arg2, data3) {
              const cached2 = yield* getCachedValue(callCache2, arg2, data3);
              if (cached2.valid)
                return cached2;
              if (asyncContext2) {
                const cached3 = yield* getCachedValue(futureCache2, arg2, data3);
                if (cached3.valid) {
                  return { valid: true, value: yield* (0, _async.waitFor)(cached3.value.promise) };
                }
              }
              return { valid: false, value: null };
            }(asyncContext, callCache, futureCache, arg, data2);
            if (cached.valid)
              return cached.value;
            const cache = new CacheConfigurator(data2), handlerResult = handler(arg, cache);
            let finishLock, value;
            return value = (0, _util.isIterableIterator)(handlerResult) ? yield* (0, _async.onFirstPause)(handlerResult, () => {
              finishLock = function(config, futureCache2, arg2) {
                const finishLock2 = new Lock();
                return updateFunctionCache(futureCache2, config, arg2, finishLock2), finishLock2;
              }(cache, futureCache, arg);
            }) : handlerResult, updateFunctionCache(callCache, cache, arg, value), finishLock && (futureCache.delete(arg), finishLock.release(value)), value;
          };
        }
        function* getCachedValue(cache, arg, data2) {
          const cachedValue = cache.get(arg);
          if (cachedValue) {
            for (const { value, valid } of cachedValue)
              if (yield* valid(data2))
                return { valid: true, value };
          }
          return { valid: false, value: null };
        }
        function updateFunctionCache(cache, config, arg, value) {
          config.configured() || config.forever();
          let cachedValue = cache.get(arg);
          switch (config.deactivate(), config.mode()) {
            case "forever":
              cachedValue = [{ value, valid: genTrue }], cache.set(arg, cachedValue);
              break;
            case "invalidate":
              cachedValue = [{ value, valid: config.validator() }], cache.set(arg, cachedValue);
              break;
            case "valid":
              cachedValue ? cachedValue.push({ value, valid: config.validator() }) : (cachedValue = [{ value, valid: config.validator() }], cache.set(arg, cachedValue));
          }
        }
        class CacheConfigurator {
          constructor(data2) {
            this._active = true, this._never = false, this._forever = false, this._invalidate = false, this._configured = false, this._pairs = [], this._data = void 0, this._data = data2;
          }
          simple() {
            return function(cache) {
              function cacheFn(val) {
                if ("boolean" != typeof val)
                  return cache.using(() => assertSimpleType(val()));
                val ? cache.forever() : cache.never();
              }
              return cacheFn.forever = () => cache.forever(), cacheFn.never = () => cache.never(), cacheFn.using = (cb) => cache.using(() => assertSimpleType(cb())), cacheFn.invalidate = (cb) => cache.invalidate(() => assertSimpleType(cb())), cacheFn;
            }(this);
          }
          mode() {
            return this._never ? "never" : this._forever ? "forever" : this._invalidate ? "invalidate" : "valid";
          }
          forever() {
            if (!this._active)
              throw new Error("Cannot change caching after evaluation has completed.");
            if (this._never)
              throw new Error("Caching has already been configured with .never()");
            this._forever = true, this._configured = true;
          }
          never() {
            if (!this._active)
              throw new Error("Cannot change caching after evaluation has completed.");
            if (this._forever)
              throw new Error("Caching has already been configured with .forever()");
            this._never = true, this._configured = true;
          }
          using(handler) {
            if (!this._active)
              throw new Error("Cannot change caching after evaluation has completed.");
            if (this._never || this._forever)
              throw new Error("Caching has already been configured with .never or .forever()");
            this._configured = true;
            const key = handler(this._data), fn = (0, _async.maybeAsync)(handler, "You appear to be using an async cache handler, but Babel has been called synchronously");
            return (0, _async.isThenable)(key) ? key.then((key2) => (this._pairs.push([key2, fn]), key2)) : (this._pairs.push([key, fn]), key);
          }
          invalidate(handler) {
            return this._invalidate = true, this.using(handler);
          }
          validator() {
            const pairs = this._pairs;
            return function* (data2) {
              for (const [key, fn] of pairs)
                if (key !== (yield* fn(data2)))
                  return false;
              return true;
            };
          }
          deactivate() {
            this._active = false;
          }
          configured() {
            return this._configured;
          }
        }
        function assertSimpleType(value) {
          if ((0, _async.isThenable)(value))
            throw new Error("You appear to be using an async cache handler, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously handle your caching logic.");
          if (null != value && "string" != typeof value && "boolean" != typeof value && "number" != typeof value)
            throw new Error("Cache keys must be either string, boolean, number, null, or undefined.");
          return value;
        }
        class Lock {
          constructor() {
            this.released = false, this.promise = void 0, this._resolve = void 0, this.promise = new Promise((resolve2) => {
              this._resolve = resolve2;
            });
          }
          release(value) {
            this.released = true, this._resolve(value);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/config-chain.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data2 = __webpack_require__2("path");
          return _path = function() {
            return data2;
          }, data2;
        }
        function _debug() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");
          return _debug = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildPresetChain = function* (arg, context) {
          const chain = yield* buildPresetChainWalker(arg, context);
          return chain ? { plugins: dedupDescriptors(chain.plugins), presets: dedupDescriptors(chain.presets), options: chain.options.map((o) => normalizeOptions3(o)), files: /* @__PURE__ */ new Set() } : null;
        }, exports2.buildPresetChainWalker = void 0, exports2.buildRootChain = function* (opts, context) {
          let configReport, babelRcReport;
          const programmaticLogger = new _printer.ConfigPrinter(), programmaticChain = yield* loadProgrammaticChain({ options: opts, dirname: context.cwd }, context, void 0, programmaticLogger);
          if (!programmaticChain)
            return null;
          const programmaticReport = yield* programmaticLogger.output();
          let configFile;
          "string" == typeof opts.configFile ? configFile = yield* (0, _files.loadConfig)(opts.configFile, context.cwd, context.envName, context.caller) : false !== opts.configFile && (configFile = yield* (0, _files.findRootConfig)(context.root, context.envName, context.caller));
          let { babelrc, babelrcRoots } = opts, babelrcRootsDirectory = context.cwd;
          const configFileChain = emptyChain(), configFileLogger = new _printer.ConfigPrinter();
          if (configFile) {
            const validatedFile = validateConfigFile(configFile), result = yield* loadFileChain(validatedFile, context, void 0, configFileLogger);
            if (!result)
              return null;
            configReport = yield* configFileLogger.output(), void 0 === babelrc && (babelrc = validatedFile.options.babelrc), void 0 === babelrcRoots && (babelrcRootsDirectory = validatedFile.dirname, babelrcRoots = validatedFile.options.babelrcRoots), mergeChain(configFileChain, result);
          }
          let ignoreFile, babelrcFile, isIgnored = false;
          const fileChain = emptyChain();
          if ((true === babelrc || void 0 === babelrc) && "string" == typeof context.filename) {
            const pkgData = yield* (0, _files.findPackageData)(context.filename);
            if (pkgData && function(context2, pkgData2, babelrcRoots2, babelrcRootsDirectory2) {
              if ("boolean" == typeof babelrcRoots2)
                return babelrcRoots2;
              const absoluteRoot = context2.root;
              if (void 0 === babelrcRoots2)
                return -1 !== pkgData2.directories.indexOf(absoluteRoot);
              let babelrcPatterns = babelrcRoots2;
              Array.isArray(babelrcPatterns) || (babelrcPatterns = [babelrcPatterns]);
              if (babelrcPatterns = babelrcPatterns.map((pat) => "string" == typeof pat ? _path().resolve(babelrcRootsDirectory2, pat) : pat), 1 === babelrcPatterns.length && babelrcPatterns[0] === absoluteRoot)
                return -1 !== pkgData2.directories.indexOf(absoluteRoot);
              return babelrcPatterns.some((pat) => ("string" == typeof pat && (pat = (0, _patternToRegex.default)(pat, babelrcRootsDirectory2)), pkgData2.directories.some((directory) => matchPattern(pat, babelrcRootsDirectory2, directory, context2))));
            }(context, pkgData, babelrcRoots, babelrcRootsDirectory)) {
              if ({ ignore: ignoreFile, config: babelrcFile } = yield* (0, _files.findRelativeConfig)(pkgData, context.envName, context.caller), ignoreFile && fileChain.files.add(ignoreFile.filepath), ignoreFile && shouldIgnore(context, ignoreFile.ignore, null, ignoreFile.dirname) && (isIgnored = true), babelrcFile && !isIgnored) {
                const validatedFile = validateBabelrcFile(babelrcFile), babelrcLogger = new _printer.ConfigPrinter(), result = yield* loadFileChain(validatedFile, context, void 0, babelrcLogger);
                result ? (babelRcReport = yield* babelrcLogger.output(), mergeChain(fileChain, result)) : isIgnored = true;
              }
              babelrcFile && isIgnored && fileChain.files.add(babelrcFile.filepath);
            }
          }
          context.showConfig && console.log(`Babel configs on "${context.filename}" (ascending priority):
` + [configReport, babelRcReport, programmaticReport].filter((x) => !!x).join("\n\n") + "\n-----End Babel configs-----");
          const chain = mergeChain(mergeChain(mergeChain(emptyChain(), configFileChain), fileChain), programmaticChain);
          return { plugins: isIgnored ? [] : dedupDescriptors(chain.plugins), presets: isIgnored ? [] : dedupDescriptors(chain.presets), options: isIgnored ? [] : chain.options.map((o) => normalizeOptions3(o)), fileHandling: isIgnored ? "ignored" : "transpile", ignore: ignoreFile || void 0, babelrc: babelrcFile || void 0, config: configFile || void 0, files: chain.files };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/validation/options.js"), _patternToRegex = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/pattern-to-regex.js"), _printer = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/printer.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/config-error.js"), _files = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/index.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/caching.js"), _configDescriptors = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/config-descriptors.js");
        const debug = _debug()("babel:config:config-chain");
        const buildPresetChainWalker = makeChainWalker({ root: (preset) => loadPresetDescriptors(preset), env: (preset, envName) => loadPresetEnvDescriptors(preset)(envName), overrides: (preset, index2) => loadPresetOverridesDescriptors(preset)(index2), overridesEnv: (preset, index2, envName) => loadPresetOverridesEnvDescriptors(preset)(index2)(envName), createLogger: () => () => {
        } });
        exports2.buildPresetChainWalker = buildPresetChainWalker;
        const loadPresetDescriptors = (0, _caching.makeWeakCacheSync)((preset) => buildRootDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors)), loadPresetEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, envName))), loadPresetOverridesDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index2) => buildOverrideDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index2))), loadPresetOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((preset) => (0, _caching.makeStrongCacheSync)((index2) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(preset, preset.alias, _configDescriptors.createUncachedDescriptors, index2, envName))));
        const validateConfigFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("configfile", file.options, file.filepath) })), validateBabelrcFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("babelrcfile", file.options, file.filepath) })), validateExtendFile = (0, _caching.makeWeakCacheSync)((file) => ({ filepath: file.filepath, dirname: file.dirname, options: (0, _options.validate)("extendsfile", file.options, file.filepath) })), loadProgrammaticChain = makeChainWalker({ root: (input) => buildRootDescriptors(input, "base", _configDescriptors.createCachedDescriptors), env: (input, envName) => buildEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, envName), overrides: (input, index2) => buildOverrideDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index2), overridesEnv: (input, index2, envName) => buildOverrideEnvDescriptors(input, "base", _configDescriptors.createCachedDescriptors, index2, envName), createLogger: (input, context, baseLogger) => function(_, context2, baseLogger2) {
          var _context$caller;
          if (!baseLogger2)
            return () => {
            };
          return baseLogger2.configure(context2.showConfig, _printer.ChainFormatter.Programmatic, { callerName: null == (_context$caller = context2.caller) ? void 0 : _context$caller.name });
        }(0, context, baseLogger) }), loadFileChainWalker = makeChainWalker({ root: (file) => loadFileDescriptors(file), env: (file, envName) => loadFileEnvDescriptors(file)(envName), overrides: (file, index2) => loadFileOverridesDescriptors(file)(index2), overridesEnv: (file, index2, envName) => loadFileOverridesEnvDescriptors(file)(index2)(envName), createLogger: (file, context, baseLogger) => function(filepath, context2, baseLogger2) {
          if (!baseLogger2)
            return () => {
            };
          return baseLogger2.configure(context2.showConfig, _printer.ChainFormatter.Config, { filepath });
        }(file.filepath, context, baseLogger) });
        function* loadFileChain(input, context, files, baseLogger) {
          const chain = yield* loadFileChainWalker(input, context, files, baseLogger);
          return chain && chain.files.add(input.filepath), chain;
        }
        const loadFileDescriptors = (0, _caching.makeWeakCacheSync)((file) => buildRootDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors)), loadFileEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((envName) => buildEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, envName))), loadFileOverridesDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index2) => buildOverrideDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index2))), loadFileOverridesEnvDescriptors = (0, _caching.makeWeakCacheSync)((file) => (0, _caching.makeStrongCacheSync)((index2) => (0, _caching.makeStrongCacheSync)((envName) => buildOverrideEnvDescriptors(file, file.filepath, _configDescriptors.createUncachedDescriptors, index2, envName))));
        function buildRootDescriptors({ dirname: dirname4, options }, alias, descriptors) {
          return descriptors(dirname4, options, alias);
        }
        function buildEnvDescriptors({ dirname: dirname4, options }, alias, descriptors, envName) {
          const opts = options.env && options.env[envName];
          return opts ? descriptors(dirname4, opts, `${alias}.env["${envName}"]`) : null;
        }
        function buildOverrideDescriptors({ dirname: dirname4, options }, alias, descriptors, index2) {
          const opts = options.overrides && options.overrides[index2];
          if (!opts)
            throw new Error("Assertion failure - missing override");
          return descriptors(dirname4, opts, `${alias}.overrides[${index2}]`);
        }
        function buildOverrideEnvDescriptors({ dirname: dirname4, options }, alias, descriptors, index2, envName) {
          const override = options.overrides && options.overrides[index2];
          if (!override)
            throw new Error("Assertion failure - missing override");
          const opts = override.env && override.env[envName];
          return opts ? descriptors(dirname4, opts, `${alias}.overrides[${index2}].env["${envName}"]`) : null;
        }
        function makeChainWalker({ root, env, overrides, overridesEnv, createLogger }) {
          return function* (input, context, files = /* @__PURE__ */ new Set(), baseLogger) {
            const { dirname: dirname4 } = input, flattenedConfigs = [], rootOpts = root(input);
            if (configIsApplicable(rootOpts, dirname4, context, input.filepath)) {
              flattenedConfigs.push({ config: rootOpts, envName: void 0, index: void 0 });
              const envOpts = env(input, context.envName);
              envOpts && configIsApplicable(envOpts, dirname4, context, input.filepath) && flattenedConfigs.push({ config: envOpts, envName: context.envName, index: void 0 }), (rootOpts.options.overrides || []).forEach((_, index2) => {
                const overrideOps = overrides(input, index2);
                if (configIsApplicable(overrideOps, dirname4, context, input.filepath)) {
                  flattenedConfigs.push({ config: overrideOps, index: index2, envName: void 0 });
                  const overrideEnvOpts = overridesEnv(input, index2, context.envName);
                  overrideEnvOpts && configIsApplicable(overrideEnvOpts, dirname4, context, input.filepath) && flattenedConfigs.push({ config: overrideEnvOpts, index: index2, envName: context.envName });
                }
              });
            }
            if (flattenedConfigs.some(({ config: { options: { ignore: ignore2, only } } }) => shouldIgnore(context, ignore2, only, dirname4)))
              return null;
            const chain = emptyChain(), logger2 = createLogger(input, context, baseLogger);
            for (const { config, index: index2, envName } of flattenedConfigs) {
              if (!(yield* mergeExtendsChain(chain, config.options, dirname4, context, files, baseLogger)))
                return null;
              logger2(config, index2, envName), yield* mergeChainOpts(chain, config);
            }
            return chain;
          };
        }
        function* mergeExtendsChain(chain, opts, dirname4, context, files, baseLogger) {
          if (void 0 === opts.extends)
            return true;
          const file = yield* (0, _files.loadConfig)(opts.extends, dirname4, context.envName, context.caller);
          if (files.has(file))
            throw new Error(`Configuration cycle detected loading ${file.filepath}.
File already loaded following the config chain:
` + Array.from(files, (file2) => ` - ${file2.filepath}`).join("\n"));
          files.add(file);
          const fileChain = yield* loadFileChain(validateExtendFile(file), context, files, baseLogger);
          return files.delete(file), !!fileChain && (mergeChain(chain, fileChain), true);
        }
        function mergeChain(target, source) {
          target.options.push(...source.options), target.plugins.push(...source.plugins), target.presets.push(...source.presets);
          for (const file of source.files)
            target.files.add(file);
          return target;
        }
        function* mergeChainOpts(target, { options, plugins, presets }) {
          return target.options.push(options), target.plugins.push(...yield* plugins()), target.presets.push(...yield* presets()), target;
        }
        function emptyChain() {
          return { options: [], presets: [], plugins: [], files: /* @__PURE__ */ new Set() };
        }
        function normalizeOptions3(opts) {
          const options = Object.assign({}, opts);
          return delete options.extends, delete options.env, delete options.overrides, delete options.plugins, delete options.presets, delete options.passPerPreset, delete options.ignore, delete options.only, delete options.test, delete options.include, delete options.exclude, Object.prototype.hasOwnProperty.call(options, "sourceMap") && (options.sourceMaps = options.sourceMap, delete options.sourceMap), options;
        }
        function dedupDescriptors(items) {
          const map = /* @__PURE__ */ new Map(), descriptors = [];
          for (const item of items)
            if ("function" == typeof item.value) {
              const fnKey = item.value;
              let nameMap = map.get(fnKey);
              nameMap || (nameMap = /* @__PURE__ */ new Map(), map.set(fnKey, nameMap));
              let desc = nameMap.get(item.name);
              desc ? desc.value = item : (desc = { value: item }, descriptors.push(desc), item.ownPass || nameMap.set(item.name, desc));
            } else
              descriptors.push({ value: item });
          return descriptors.reduce((acc, desc) => (acc.push(desc.value), acc), []);
        }
        function configIsApplicable({ options }, dirname4, context, configName) {
          return (void 0 === options.test || configFieldIsApplicable(context, options.test, dirname4, configName)) && (void 0 === options.include || configFieldIsApplicable(context, options.include, dirname4, configName)) && (void 0 === options.exclude || !configFieldIsApplicable(context, options.exclude, dirname4, configName));
        }
        function configFieldIsApplicable(context, test, dirname4, configName) {
          return matchesPatterns(context, Array.isArray(test) ? test : [test], dirname4, configName);
        }
        function ignoreListReplacer(_key, value) {
          return value instanceof RegExp ? String(value) : value;
        }
        function shouldIgnore(context, ignore2, only, dirname4) {
          if (ignore2 && matchesPatterns(context, ignore2, dirname4)) {
            var _context$filename;
            const message = `No config is applied to "${null != (_context$filename = context.filename) ? _context$filename : "(unknown)"}" because it matches one of \`ignore: ${JSON.stringify(ignore2, ignoreListReplacer)}\` from "${dirname4}"`;
            return debug(message), context.showConfig && console.log(message), true;
          }
          if (only && !matchesPatterns(context, only, dirname4)) {
            var _context$filename2;
            const message = `No config is applied to "${null != (_context$filename2 = context.filename) ? _context$filename2 : "(unknown)"}" because it fails to match one of \`only: ${JSON.stringify(only, ignoreListReplacer)}\` from "${dirname4}"`;
            return debug(message), context.showConfig && console.log(message), true;
          }
          return false;
        }
        function matchesPatterns(context, patterns, dirname4, configName) {
          return patterns.some((pattern) => matchPattern(pattern, dirname4, context.filename, context, configName));
        }
        function matchPattern(pattern, dirname4, pathToTest, context, configName) {
          if ("function" == typeof pattern)
            return !!(0, _rewriteStackTrace.endHiddenCallStack)(pattern)(pathToTest, { dirname: dirname4, envName: context.envName, caller: context.caller });
          if ("string" != typeof pathToTest)
            throw new _configError.default("Configuration contains string/RegExp pattern, but no filename was passed to Babel", configName);
          return "string" == typeof pattern && (pattern = (0, _patternToRegex.default)(pattern, dirname4)), pattern.test(pathToTest);
        }
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/config-descriptors.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createCachedDescriptors = function(dirname4, options, alias) {
          const { plugins, presets, passPerPreset } = options;
          return { options: optionsWithResolvedBrowserslistConfigFile(options, dirname4), plugins: plugins ? () => createCachedPluginDescriptors(plugins, dirname4)(alias) : () => handlerOf([]), presets: presets ? () => createCachedPresetDescriptors(presets, dirname4)(alias)(!!passPerPreset) : () => handlerOf([]) };
        }, exports2.createDescriptor = createDescriptor, exports2.createUncachedDescriptors = function(dirname4, options, alias) {
          return { options: optionsWithResolvedBrowserslistConfigFile(options, dirname4), plugins: (0, _functional.once)(() => createPluginDescriptors(options.plugins || [], dirname4, alias)), presets: (0, _functional.once)(() => createPresetDescriptors(options.presets || [], dirname4, alias, !!options.passPerPreset)) };
        };
        var _functional = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/gensync-utils/functional.js"), _files = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/index.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/item.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/caching.js"), _resolveTargets = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/resolve-targets.js");
        function* handlerOf(value) {
          return value;
        }
        function optionsWithResolvedBrowserslistConfigFile(options, dirname4) {
          return "string" == typeof options.browserslistConfigFile && (options.browserslistConfigFile = (0, _resolveTargets.resolveBrowserslistConfigFile)(options.browserslistConfigFile, dirname4)), options;
        }
        const PRESET_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap(), createCachedPresetDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
          const dirname4 = cache.using((dir) => dir);
          return (0, _caching.makeStrongCacheSync)((alias) => (0, _caching.makeStrongCache)(function* (passPerPreset) {
            return (yield* createPresetDescriptors(items, dirname4, alias, passPerPreset)).map((desc) => loadCachedDescriptor(PRESET_DESCRIPTOR_CACHE, desc));
          }));
        }), PLUGIN_DESCRIPTOR_CACHE = /* @__PURE__ */ new WeakMap(), createCachedPluginDescriptors = (0, _caching.makeWeakCacheSync)((items, cache) => {
          const dirname4 = cache.using((dir) => dir);
          return (0, _caching.makeStrongCache)(function* (alias) {
            return (yield* createPluginDescriptors(items, dirname4, alias)).map((desc) => loadCachedDescriptor(PLUGIN_DESCRIPTOR_CACHE, desc));
          });
        }), DEFAULT_OPTIONS = {};
        function loadCachedDescriptor(cache, desc) {
          const { value, options = DEFAULT_OPTIONS } = desc;
          if (false === options)
            return desc;
          let cacheByOptions = cache.get(value);
          cacheByOptions || (cacheByOptions = /* @__PURE__ */ new WeakMap(), cache.set(value, cacheByOptions));
          let possibilities = cacheByOptions.get(options);
          if (possibilities || (possibilities = [], cacheByOptions.set(options, possibilities)), -1 === possibilities.indexOf(desc)) {
            const matches = possibilities.filter((possibility) => {
              return b = desc, (a = possibility).name === b.name && a.value === b.value && a.options === b.options && a.dirname === b.dirname && a.alias === b.alias && a.ownPass === b.ownPass && (a.file && a.file.request) === (b.file && b.file.request) && (a.file && a.file.resolved) === (b.file && b.file.resolved);
              var a, b;
            });
            if (matches.length > 0)
              return matches[0];
            possibilities.push(desc);
          }
          return desc;
        }
        function* createPresetDescriptors(items, dirname4, alias, passPerPreset) {
          return yield* createDescriptors("preset", items, dirname4, alias, passPerPreset);
        }
        function* createPluginDescriptors(items, dirname4, alias) {
          return yield* createDescriptors("plugin", items, dirname4, alias);
        }
        function* createDescriptors(type, items, dirname4, alias, ownPass) {
          const descriptors = yield* _gensync().all(items.map((item, index2) => createDescriptor(item, dirname4, { type, alias: `${alias}$${index2}`, ownPass: !!ownPass })));
          return function(items2) {
            const map = /* @__PURE__ */ new Map();
            for (const item of items2) {
              if ("function" != typeof item.value)
                continue;
              let nameMap = map.get(item.value);
              if (nameMap || (nameMap = /* @__PURE__ */ new Set(), map.set(item.value, nameMap)), nameMap.has(item.name)) {
                const conflicts = items2.filter((i) => i.value === item.value);
                throw new Error(["Duplicate plugin/preset detected.", "If you'd like to use two separate instances of a plugin,", "they need separate names, e.g.", "", "  plugins: [", "    ['some-plugin', {}],", "    ['some-plugin', {}, 'some unique name'],", "  ]", "", "Duplicates detected are:", `${JSON.stringify(conflicts, null, 2)}`].join("\n"));
              }
              nameMap.add(item.name);
            }
          }(descriptors), descriptors;
        }
        function* createDescriptor(pair, dirname4, { type, alias, ownPass }) {
          const desc = (0, _item.getItemDescriptor)(pair);
          if (desc)
            return desc;
          let name, options, file, value = pair;
          Array.isArray(value) && (3 === value.length ? [value, options, name] = value : [value, options] = value);
          let filepath = null;
          if ("string" == typeof value) {
            if ("string" != typeof type)
              throw new Error("To resolve a string-based item, the type of item must be given");
            const resolver = "plugin" === type ? _files.loadPlugin : _files.loadPreset, request = value;
            ({ filepath, value } = yield* resolver(value, dirname4)), file = { request, resolved: filepath };
          }
          if (!value)
            throw new Error(`Unexpected falsy value: ${String(value)}`);
          if ("object" == typeof value && value.__esModule) {
            if (!value.default)
              throw new Error("Must export a default export when using ES6 modules.");
            value = value.default;
          }
          if ("object" != typeof value && "function" != typeof value)
            throw new Error(`Unsupported format: ${typeof value}. Expected an object or a function.`);
          if (null !== filepath && "object" == typeof value && value)
            throw new Error(`Plugin/Preset files are not allowed to export objects, only functions. In ${filepath}`);
          return { name, alias: filepath || alias, value, options, dirname: dirname4, ownPass, file };
        }
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/configuration.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _debug() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");
          return _debug = function() {
            return data2;
          }, data2;
        }
        function _fs() {
          const data2 = __webpack_require__2("fs");
          return _fs = function() {
            return data2;
          }, data2;
        }
        function _path() {
          const data2 = __webpack_require__2("path");
          return _path = function() {
            return data2;
          }, data2;
        }
        function _json() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/json5@2.2.1/node_modules/json5/dist/index.mjs");
          return _json = function() {
            return data2;
          }, data2;
        }
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ROOT_CONFIG_FILENAMES = void 0, exports2.findConfigUpwards = function(rootDir) {
          let dirname4 = rootDir;
          for (; ; ) {
            for (const filename of ROOT_CONFIG_FILENAMES)
              if (_fs().existsSync(_path().join(dirname4, filename)))
                return dirname4;
            const nextDir = _path().dirname(dirname4);
            if (dirname4 === nextDir)
              break;
            dirname4 = nextDir;
          }
          return null;
        }, exports2.findRelativeConfig = function* (packageData, envName, caller) {
          let config = null, ignore2 = null;
          const dirname4 = _path().dirname(packageData.filepath);
          for (const loc of packageData.directories) {
            var _packageData$pkg;
            if (!config)
              config = yield* loadOneConfig(RELATIVE_CONFIG_FILENAMES, loc, envName, caller, (null == (_packageData$pkg = packageData.pkg) ? void 0 : _packageData$pkg.dirname) === loc ? packageToBabelConfig(packageData.pkg) : null);
            if (!ignore2) {
              const ignoreLoc = _path().join(loc, ".babelignore");
              ignore2 = yield* readIgnoreConfig(ignoreLoc), ignore2 && debug("Found ignore %o from %o.", ignore2.filepath, dirname4);
            }
          }
          return { config, ignore: ignore2 };
        }, exports2.findRootConfig = function(dirname4, envName, caller) {
          return loadOneConfig(ROOT_CONFIG_FILENAMES, dirname4, envName, caller);
        }, exports2.loadConfig = function* (name, dirname4, envName, caller) {
          const filepath = (v = process.versions.node, w = "8.9", v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1] ? __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files sync recursive").resolve : (r2, { paths: [b] }, M = __webpack_require__2("module")) => {
            let f = M._findPath(r2, M._nodeModulePaths(b).concat(b));
            if (f)
              return f;
            throw f = new Error(`Cannot resolve module '${r2}'`), f.code = "MODULE_NOT_FOUND", f;
          })(name, { paths: [dirname4] }), conf = yield* readConfig(filepath, envName, caller);
          var v, w;
          if (!conf)
            throw new _configError.default("Config file contains no configuration data", filepath);
          return debug("Loaded config %o from %o.", name, dirname4), conf;
        }, exports2.resolveShowConfigPath = function* (dirname4) {
          const targetPath = process.env.BABEL_SHOW_CONFIG_FOR;
          if (null != targetPath) {
            const absolutePath = _path().resolve(dirname4, targetPath);
            if (!(yield* fs4.stat(absolutePath)).isFile())
              throw new Error(`${absolutePath}: BABEL_SHOW_CONFIG_FOR must refer to a regular file, directories are not supported.`);
            return absolutePath;
          }
          return null;
        };
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/caching.js"), _configApi = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/helpers/config-api.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/utils.js"), _moduleTypes = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/module-types.js"), _patternToRegex = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/pattern-to-regex.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/config-error.js"), fs4 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/gensync-utils/fs.js");
        var _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const debug = _debug()("babel:config:loading:files:configuration"), ROOT_CONFIG_FILENAMES = ["babel.config.js", "babel.config.cjs", "babel.config.mjs", "babel.config.json"];
        exports2.ROOT_CONFIG_FILENAMES = ROOT_CONFIG_FILENAMES;
        const RELATIVE_CONFIG_FILENAMES = [".babelrc", ".babelrc.js", ".babelrc.cjs", ".babelrc.mjs", ".babelrc.json"];
        function* loadOneConfig(names, dirname4, envName, caller, previousConfig = null) {
          const config = (yield* _gensync().all(names.map((filename) => readConfig(_path().join(dirname4, filename), envName, caller)))).reduce((previousConfig2, config2) => {
            if (config2 && previousConfig2)
              throw new _configError.default(`Multiple configuration files found. Please remove one:
 - ${_path().basename(previousConfig2.filepath)}
 - ${config2.filepath}
from ${dirname4}`);
            return config2 || previousConfig2;
          }, previousConfig);
          return config && debug("Found configuration %o from %o.", config.filepath, dirname4), config;
        }
        function readConfig(filepath, envName, caller) {
          const ext = _path().extname(filepath);
          return ".js" === ext || ".cjs" === ext || ".mjs" === ext ? readConfigJS(filepath, { envName, caller }) : readConfigJSON5(filepath);
        }
        const LOADING_CONFIGS = /* @__PURE__ */ new Set(), readConfigJS = (0, _caching.makeStrongCache)(function* (filepath, cache) {
          if (!_fs().existsSync(filepath))
            return cache.never(), null;
          if (LOADING_CONFIGS.has(filepath))
            return cache.never(), debug("Auto-ignoring usage of config %o.", filepath), { filepath, dirname: _path().dirname(filepath), options: {} };
          let options;
          try {
            LOADING_CONFIGS.add(filepath), options = yield* (0, _moduleTypes.default)(filepath, "You appear to be using a native ECMAScript module configuration file, which is only supported when running Babel asynchronously.");
          } finally {
            LOADING_CONFIGS.delete(filepath);
          }
          let assertCache = false;
          if ("function" == typeof options && (yield* [], options = (0, _rewriteStackTrace.endHiddenCallStack)(options)((0, _configApi.makeConfigAPI)(cache)), assertCache = true), !options || "object" != typeof options || Array.isArray(options))
            throw new _configError.default("Configuration should be an exported JavaScript object.", filepath);
          if ("function" == typeof options.then)
            throw new _configError.default("You appear to be using an async configuration, which your current version of Babel does not support. We may add support for this in the future, but if you're on the most recent version of @babel/core and still seeing this error, then you'll need to synchronously return your config.", filepath);
          return assertCache && !cache.configured() && function(filepath2) {
            throw new _configError.default(`Caching was left unconfigured. Babel's plugins, presets, and .babelrc.js files can be configured
for various types of caching, using the first param of their handler functions:

module.exports = function(api) {
  // The API exposes the following:

  // Cache the returned value forever and don't call this function again.
  api.cache(true);

  // Don't cache at all. Not recommended because it will be very slow.
  api.cache(false);

  // Cached based on the value of some function. If this function returns a value different from
  // a previously-encountered value, the plugins will re-evaluate.
  var env = api.cache(() => process.env.NODE_ENV);

  // If testing for a specific env, we recommend specifics to avoid instantiating a plugin for
  // any possible NODE_ENV value that might come up during plugin execution.
  var isProd = api.cache(() => process.env.NODE_ENV === "production");

  // .cache(fn) will perform a linear search though instances to find the matching plugin based
  // based on previous instantiated plugins. If you want to recreate the plugin and discard the
  // previous instance whenever something changes, you may use:
  var isProd = api.cache.invalidate(() => process.env.NODE_ENV === "production");

  // Note, we also expose the following more-verbose versions of the above examples:
  api.cache.forever(); // api.cache(true)
  api.cache.never();   // api.cache(false)
  api.cache.using(fn); // api.cache(fn)

  // Return the value that will be cached.
  return { };
};`, filepath2);
          }(filepath), { filepath, dirname: _path().dirname(filepath), options };
        }), packageToBabelConfig = (0, _caching.makeWeakCacheSync)((file) => {
          const babel = file.options.babel;
          if (void 0 === babel)
            return null;
          if ("object" != typeof babel || Array.isArray(babel) || null === babel)
            throw new _configError.default(".babel property must be an object", file.filepath);
          return { filepath: file.filepath, dirname: file.dirname, options: babel };
        }), readConfigJSON5 = (0, _utils.makeStaticFileCache)((filepath, content) => {
          let options;
          try {
            options = _json().parse(content);
          } catch (err) {
            throw new _configError.default(`Error while parsing config - ${err.message}`, filepath);
          }
          if (!options)
            throw new _configError.default("No config detected", filepath);
          if ("object" != typeof options)
            throw new _configError.default("Config returned typeof " + typeof options, filepath);
          if (Array.isArray(options))
            throw new _configError.default("Expected config object but found array", filepath);
          return delete options.$schema, { filepath, dirname: _path().dirname(filepath), options };
        }), readIgnoreConfig = (0, _utils.makeStaticFileCache)((filepath, content) => {
          const ignoreDir = _path().dirname(filepath), ignorePatterns = content.split("\n").map((line) => line.replace(/#(.*?)$/, "").trim()).filter((line) => !!line);
          for (const pattern of ignorePatterns)
            if ("!" === pattern[0])
              throw new _configError.default("Negation of file paths is not supported.", filepath);
          return { filepath, dirname: _path().dirname(filepath), ignore: ignorePatterns.map((pattern) => (0, _patternToRegex.default)(pattern, ignoreDir)) };
        });
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/import-meta-resolve.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(_x, _x2) {
          return _resolve2.apply(this, arguments);
        };
        var _importMetaResolve = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/vendor/import-meta-resolve.js");
        function asyncGeneratorStep(gen, resolve2, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg), value = info.value;
          } catch (error) {
            return void reject(error);
          }
          info.done ? resolve2(value) : Promise.resolve(value).then(_next, _throw);
        }
        function _asyncToGenerator(fn) {
          return function() {
            var self2 = this, args = arguments;
            return new Promise(function(resolve2, reject) {
              var gen = fn.apply(self2, args);
              function _next(value) {
                asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "next", value);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          };
        }
        let import_;
        try {
          import_ = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/import.cjs");
        } catch (_unused) {
        }
        const importMetaResolveP = import_ && process.execArgv.includes("--experimental-import-meta-resolve") ? import_("data:text/javascript,export default import.meta.resolve").then((m) => m.default || _importMetaResolve.resolve, () => _importMetaResolve.resolve) : Promise.resolve(_importMetaResolve.resolve);
        function _resolve2() {
          return (_resolve2 = _asyncToGenerator(function* (specifier, parent) {
            return (yield importMetaResolveP)(specifier, parent);
          })).apply(this, arguments);
        }
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/import.cjs": (module2, __unused_webpack_exports, __webpack_require__2) => {
        module2.exports = function(filepath) {
          return __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files lazy recursive")(filepath);
        };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "ROOT_CONFIG_FILENAMES", { enumerable: true, get: function() {
          return _configuration.ROOT_CONFIG_FILENAMES;
        } }), Object.defineProperty(exports2, "findConfigUpwards", { enumerable: true, get: function() {
          return _configuration.findConfigUpwards;
        } }), Object.defineProperty(exports2, "findPackageData", { enumerable: true, get: function() {
          return _package.findPackageData;
        } }), Object.defineProperty(exports2, "findRelativeConfig", { enumerable: true, get: function() {
          return _configuration.findRelativeConfig;
        } }), Object.defineProperty(exports2, "findRootConfig", { enumerable: true, get: function() {
          return _configuration.findRootConfig;
        } }), Object.defineProperty(exports2, "loadConfig", { enumerable: true, get: function() {
          return _configuration.loadConfig;
        } }), Object.defineProperty(exports2, "loadPlugin", { enumerable: true, get: function() {
          return plugins.loadPlugin;
        } }), Object.defineProperty(exports2, "loadPreset", { enumerable: true, get: function() {
          return plugins.loadPreset;
        } }), exports2.resolvePreset = exports2.resolvePlugin = void 0, Object.defineProperty(exports2, "resolveShowConfigPath", { enumerable: true, get: function() {
          return _configuration.resolveShowConfigPath;
        } });
        var _package = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/package.js"), _configuration = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/configuration.js"), plugins = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/plugins.js");
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        const resolvePlugin = _gensync()(plugins.resolvePlugin).sync;
        exports2.resolvePlugin = resolvePlugin;
        const resolvePreset = _gensync()(plugins.resolvePreset).sync;
        exports2.resolvePreset = resolvePreset;
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/module-types.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function* (filepath, asyncError, fallbackToTranspiledModule = false) {
          switch (function(filename) {
            switch (_path().extname(filename)) {
              case ".cjs":
                return "cjs";
              case ".mjs":
                return "mjs";
              default:
                return "unknown";
            }
          }(filepath)) {
            case "cjs":
              return loadCjsDefault(filepath, fallbackToTranspiledModule);
            case "unknown":
              try {
                return loadCjsDefault(filepath, fallbackToTranspiledModule);
              } catch (e) {
                if ("ERR_REQUIRE_ESM" !== e.code)
                  throw e;
              }
            case "mjs":
              if (yield* (0, _async.isAsync)())
                return yield* (0, _async.waitFor)(function(_x) {
                  return _loadMjsDefault.apply(this, arguments);
                }(filepath));
              throw new _configError.default(asyncError, filepath);
          }
        }, exports2.supportsESM = void 0;
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/gensync-utils/async.js");
        function _path() {
          const data2 = __webpack_require__2("path");
          return _path = function() {
            return data2;
          }, data2;
        }
        function _url() {
          const data2 = __webpack_require__2("url");
          return _url = function() {
            return data2;
          }, data2;
        }
        function _semver() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js");
          return _semver = function() {
            return data2;
          }, data2;
        }
        var _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/config-error.js");
        function asyncGeneratorStep(gen, resolve2, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg), value = info.value;
          } catch (error) {
            return void reject(error);
          }
          info.done ? resolve2(value) : Promise.resolve(value).then(_next, _throw);
        }
        function _asyncToGenerator(fn) {
          return function() {
            var self2 = this, args = arguments;
            return new Promise(function(resolve2, reject) {
              var gen = fn.apply(self2, args);
              function _next(value) {
                asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "next", value);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          };
        }
        let import_;
        try {
          import_ = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/import.cjs");
        } catch (_unused) {
        }
        const supportsESM = _semver().satisfies(process.versions.node, "^12.17 || >=13.2");
        function loadCjsDefault(filepath, fallbackToTranspiledModule) {
          const module2 = (0, _rewriteStackTrace.endHiddenCallStack)(__webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files sync recursive"))(filepath);
          return null != module2 && module2.__esModule ? module2.default || (fallbackToTranspiledModule ? module2 : void 0) : module2;
        }
        function _loadMjsDefault() {
          return (_loadMjsDefault = _asyncToGenerator(function* (filepath) {
            if (!import_)
              throw new _configError.default("Internal error: Native ECMAScript modules aren't supported by this platform.\n", filepath);
            return (yield (0, _rewriteStackTrace.endHiddenCallStack)(import_)((0, _url().pathToFileURL)(filepath))).default;
          })).apply(this, arguments);
        }
        exports2.supportsESM = supportsESM;
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/package.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data2 = __webpack_require__2("path");
          return _path = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.findPackageData = function* (filepath) {
          let pkg = null;
          const directories = [];
          let isPackage = true, dirname4 = _path().dirname(filepath);
          for (; !pkg && "node_modules" !== _path().basename(dirname4); ) {
            directories.push(dirname4), pkg = yield* readConfigPackage(_path().join(dirname4, "package.json"));
            const nextLoc = _path().dirname(dirname4);
            if (dirname4 === nextLoc) {
              isPackage = false;
              break;
            }
            dirname4 = nextLoc;
          }
          return { filepath, directories, pkg, isPackage };
        };
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/utils.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/config-error.js");
        const readConfigPackage = (0, _utils.makeStaticFileCache)((filepath, content) => {
          let options;
          try {
            options = JSON.parse(content);
          } catch (err) {
            throw new _configError.default(`Error while parsing JSON - ${err.message}`, filepath);
          }
          if (!options)
            throw new Error(`${filepath}: No config detected`);
          if ("object" != typeof options)
            throw new _configError.default("Config returned typeof " + typeof options, filepath);
          if (Array.isArray(options))
            throw new _configError.default("Expected config object but found array", filepath);
          return { filepath, dirname: _path().dirname(filepath), options };
        });
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/plugins.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _debug() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");
          return _debug = function() {
            return data2;
          }, data2;
        }
        function _path() {
          const data2 = __webpack_require__2("path");
          return _path = function() {
            return data2;
          }, data2;
        }
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.loadPlugin = function* (name, dirname4) {
          const filepath = yield* resolvePlugin(name, dirname4), value = yield* requireModule("plugin", filepath);
          return debug("Loaded plugin %o from %o.", name, dirname4), { filepath, value };
        }, exports2.loadPreset = function* (name, dirname4) {
          const filepath = yield* resolvePreset(name, dirname4), value = yield* requireModule("preset", filepath);
          return debug("Loaded preset %o from %o.", name, dirname4), { filepath, value };
        }, exports2.resolvePlugin = resolvePlugin, exports2.resolvePreset = resolvePreset;
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/gensync-utils/async.js"), _moduleTypes = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/module-types.js");
        function _url() {
          const data2 = __webpack_require__2("url");
          return _url = function() {
            return data2;
          }, data2;
        }
        var _importMetaResolve = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/import-meta-resolve.js");
        function asyncGeneratorStep(gen, resolve2, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg), value = info.value;
          } catch (error) {
            return void reject(error);
          }
          info.done ? resolve2(value) : Promise.resolve(value).then(_next, _throw);
        }
        function _asyncToGenerator(fn) {
          return function() {
            var self2 = this, args = arguments;
            return new Promise(function(resolve2, reject) {
              var gen = fn.apply(self2, args);
              function _next(value) {
                asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "next", value);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          };
        }
        const debug = _debug()("babel:config:loading:files:plugins"), EXACT_RE = /^module:/, BABEL_PLUGIN_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-plugin-)/, BABEL_PRESET_PREFIX_RE = /^(?!@|module:|[^/]+\/|babel-preset-)/, BABEL_PLUGIN_ORG_RE = /^(@babel\/)(?!plugin-|[^/]+\/)/, BABEL_PRESET_ORG_RE = /^(@babel\/)(?!preset-|[^/]+\/)/, OTHER_PLUGIN_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-plugin(?:-|\/|$)|[^/]+\/)/, OTHER_PRESET_ORG_RE = /^(@(?!babel\/)[^/]+\/)(?![^/]*babel-preset(?:-|\/|$)|[^/]+\/)/, OTHER_ORG_DEFAULT_RE = /^(@(?!babel$)[^/]+)$/;
        function* resolvePlugin(name, dirname4) {
          return yield* resolveStandardizedName("plugin", name, dirname4);
        }
        function* resolvePreset(name, dirname4) {
          return yield* resolveStandardizedName("preset", name, dirname4);
        }
        function standardizeName(type, name) {
          if (_path().isAbsolute(name))
            return name;
          const isPreset = "preset" === type;
          return name.replace(isPreset ? BABEL_PRESET_PREFIX_RE : BABEL_PLUGIN_PREFIX_RE, `babel-${type}-`).replace(isPreset ? BABEL_PRESET_ORG_RE : BABEL_PLUGIN_ORG_RE, `$1${type}-`).replace(isPreset ? OTHER_PRESET_ORG_RE : OTHER_PLUGIN_ORG_RE, `$1babel-${type}-`).replace(OTHER_ORG_DEFAULT_RE, `$1/babel-${type}`).replace(EXACT_RE, "");
        }
        function* resolveAlternativesHelper(type, name) {
          const standardizedName = standardizeName(type, name), { error, value } = yield standardizedName;
          if (!error)
            return value;
          if ("MODULE_NOT_FOUND" !== error.code)
            throw error;
          standardizedName === name || (yield name).error || (error.message += `
- If you want to resolve "${name}", use "module:${name}"`), (yield standardizeName(type, "@babel/" + name)).error || (error.message += `
- Did you mean "@babel/${name}"?`);
          const oppositeType = "preset" === type ? "plugin" : "preset";
          throw (yield standardizeName(oppositeType, name)).error || (error.message += `
- Did you accidentally pass a ${oppositeType} as a ${type}?`), error;
        }
        function tryRequireResolve(id, { paths: [dirname4] }) {
          try {
            return { error: null, value: (v = process.versions.node, w = "8.9", v = v.split("."), w = w.split("."), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1] ? __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files sync recursive").resolve : (r2, { paths: [b] }, M = __webpack_require__2("module")) => {
              let f = M._findPath(r2, M._nodeModulePaths(b).concat(b));
              if (f)
                return f;
              throw f = new Error(`Cannot resolve module '${r2}'`), f.code = "MODULE_NOT_FOUND", f;
            })(id, { paths: [dirname4] }) };
          } catch (error) {
            return { error, value: null };
          }
          var v, w;
        }
        function tryImportMetaResolve(_x, _x2) {
          return _tryImportMetaResolve.apply(this, arguments);
        }
        function _tryImportMetaResolve() {
          return (_tryImportMetaResolve = _asyncToGenerator(function* (id, options) {
            try {
              return { error: null, value: yield (0, _importMetaResolve.default)(id, options) };
            } catch (error) {
              return { error, value: null };
            }
          })).apply(this, arguments);
        }
        function resolveStandardizedNameForRequire(type, name, dirname4) {
          const it = resolveAlternativesHelper(type, name);
          let res = it.next();
          for (; !res.done; )
            res = it.next(tryRequireResolve(res.value, { paths: [dirname4] }));
          return res.value;
        }
        function _resolveStandardizedNameForImport() {
          return (_resolveStandardizedNameForImport = _asyncToGenerator(function* (type, name, dirname4) {
            const parentUrl = (0, _url().pathToFileURL)(_path().join(dirname4, "./babel-virtual-resolve-base.js")).href, it = resolveAlternativesHelper(type, name);
            let res = it.next();
            for (; !res.done; )
              res = it.next(yield tryImportMetaResolve(res.value, parentUrl));
            return (0, _url().fileURLToPath)(res.value);
          })).apply(this, arguments);
        }
        const resolveStandardizedName = _gensync()({ sync: (type, name, dirname4 = process.cwd()) => resolveStandardizedNameForRequire(type, name, dirname4), async: (type, name, dirname4 = process.cwd()) => _asyncToGenerator(function* () {
          if (!_moduleTypes.supportsESM)
            return resolveStandardizedNameForRequire(type, name, dirname4);
          try {
            return yield function(_x3, _x4, _x5) {
              return _resolveStandardizedNameForImport.apply(this, arguments);
            }(type, name, dirname4);
          } catch (e) {
            try {
              return resolveStandardizedNameForRequire(type, name, dirname4);
            } catch (e2) {
              if ("MODULE_NOT_FOUND" === e.type)
                throw e;
              if ("MODULE_NOT_FOUND" === e2.type)
                throw e2;
              throw e;
            }
          }
        })() });
        var LOADING_MODULES = /* @__PURE__ */ new Set();
        function* requireModule(type, name) {
          if (!(yield* (0, _async.isAsync)()) && LOADING_MODULES.has(name))
            throw new Error(`Reentrant ${type} detected trying to load "${name}". This module is not ignored and is trying to load itself while compiling itself, leading to a dependency cycle. We recommend adding it to your "ignore" list in your babelrc, or to a .babelignore.`);
          try {
            return LOADING_MODULES.add(name), yield* (0, _moduleTypes.default)(name, `You appear to be using a native ECMAScript module ${type}, which is only supported when running Babel asynchronously.`, true);
          } catch (err) {
            throw err.message = `[BABEL]: ${err.message} (While processing: ${name})`, err;
          } finally {
            LOADING_MODULES.delete(name);
          }
        }
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/utils.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.makeStaticFileCache = function(fn) {
          return (0, _caching.makeStrongCache)(function* (filepath, cache) {
            const cached = cache.invalidate(() => function(filepath2) {
              if (!_fs2().existsSync(filepath2))
                return null;
              try {
                return +_fs2().statSync(filepath2).mtime;
              } catch (e) {
                if ("ENOENT" !== e.code && "ENOTDIR" !== e.code)
                  throw e;
              }
              return null;
            }(filepath));
            return null === cached ? null : fn(filepath, yield* fs4.readFile(filepath, "utf8"));
          });
        };
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/caching.js"), fs4 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/gensync-utils/fs.js");
        function _fs2() {
          const data2 = __webpack_require__2("fs");
          return _fs2 = function() {
            return data2;
          }, data2;
        }
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/full.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/gensync-utils/async.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/util.js"), context = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js"), _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/plugin.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/item.js"), _configChain = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/config-chain.js"), _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/helpers/deep-array.js");
        function _traverse() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data2;
          }, data2;
        }
        var _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/caching.js"), _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/validation/options.js"), _plugins = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/validation/plugins.js"), _configApi = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/helpers/config-api.js"), _partial = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/partial.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/config-error.js"), _default = _gensync()(function* (inputOpts) {
          var _opts$assumptions;
          const result = yield* (0, _partial.default)(inputOpts);
          if (!result)
            return null;
          const { options, context: context2, fileHandling } = result;
          if ("ignored" === fileHandling)
            return null;
          const optionDefaults = {}, { plugins, presets } = options;
          if (!plugins || !presets)
            throw new Error("Assertion failure - plugins and presets exist");
          const presetContext = Object.assign({}, context2, { targets: options.targets }), toDescriptor = (item) => {
            const desc = (0, _item.getItemDescriptor)(item);
            if (!desc)
              throw new Error("Assertion failure - must be config item");
            return desc;
          }, presetsDescriptors = presets.map(toDescriptor), initialPluginsDescriptors = plugins.map(toDescriptor), pluginDescriptorsByPass = [[]], passes = [], externalDependencies = [], ignored = yield* enhanceError(context2, function* recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {
            const presets2 = [];
            for (let i = 0; i < rawPresets.length; i++) {
              const descriptor = rawPresets[i];
              if (false !== descriptor.options) {
                try {
                  var preset = yield* loadPresetDescriptor(descriptor, presetContext);
                } catch (e) {
                  throw "BABEL_UNKNOWN_OPTION" === e.code && (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i, "preset", e), e;
                }
                externalDependencies.push(preset.externalDependencies), descriptor.ownPass ? presets2.push({ preset: preset.chain, pass: [] }) : presets2.unshift({ preset: preset.chain, pass: pluginDescriptorsPass });
              }
            }
            if (presets2.length > 0) {
              pluginDescriptorsByPass.splice(1, 0, ...presets2.map((o) => o.pass).filter((p) => p !== pluginDescriptorsPass));
              for (const { preset: preset2, pass } of presets2) {
                if (!preset2)
                  return true;
                pass.push(...preset2.plugins);
                if (yield* recursePresetDescriptors(preset2.presets, pass))
                  return true;
                preset2.options.forEach((opts2) => {
                  (0, _util.mergeOptions)(optionDefaults, opts2);
                });
              }
            }
          })(presetsDescriptors, pluginDescriptorsByPass[0]);
          if (ignored)
            return null;
          const opts = optionDefaults;
          (0, _util.mergeOptions)(opts, options);
          const pluginContext = Object.assign({}, presetContext, { assumptions: null != (_opts$assumptions = opts.assumptions) ? _opts$assumptions : {} });
          return yield* enhanceError(context2, function* () {
            pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);
            for (const descs of pluginDescriptorsByPass) {
              const pass = [];
              passes.push(pass);
              for (let i = 0; i < descs.length; i++) {
                const descriptor = descs[i];
                if (false !== descriptor.options) {
                  try {
                    var plugin = yield* loadPluginDescriptor(descriptor, pluginContext);
                  } catch (e) {
                    throw "BABEL_UNKNOWN_PLUGIN_PROPERTY" === e.code && (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i, "plugin", e), e;
                  }
                  pass.push(plugin), externalDependencies.push(plugin.externalDependencies);
                }
              }
            }
          })(), opts.plugins = passes[0], opts.presets = passes.slice(1).filter((plugins2) => plugins2.length > 0).map((plugins2) => ({ plugins: plugins2 })), opts.passPerPreset = opts.presets.length > 0, { options: opts, passes, externalDependencies: (0, _deepArray.finalize)(externalDependencies) };
        });
        function enhanceError(context2, fn) {
          return function* (arg1, arg2) {
            try {
              return yield* fn(arg1, arg2);
            } catch (e) {
              var _context$filename;
              if (!/^\[BABEL\]/.test(e.message))
                e.message = `[BABEL] ${null != (_context$filename = context2.filename) ? _context$filename : "unknown file"}: ${e.message}`;
              throw e;
            }
          };
        }
        exports2.default = _default;
        const makeDescriptorLoader = (apiFactory) => (0, _caching.makeWeakCache)(function* ({ value, options, dirname: dirname4, alias }, cache) {
          if (false === options)
            throw new Error("Assertion failure");
          options = options || {};
          const externalDependencies = [];
          let item = value;
          if ("function" == typeof value) {
            const factory = (0, _async.maybeAsync)(value, "You appear to be using an async plugin/preset, but Babel has been called synchronously"), api = Object.assign({}, context, apiFactory(cache, externalDependencies));
            try {
              item = yield* factory(api, options, dirname4);
            } catch (e) {
              throw alias && (e.message += ` (While processing: ${JSON.stringify(alias)})`), e;
            }
          }
          if (!item || "object" != typeof item)
            throw new Error("Plugin/Preset did not return an object.");
          if ((0, _async.isThenable)(item))
            throw yield* [], new Error(`You appear to be using a promise as a plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version. As an alternative, you can prefix the promise with "await". (While processing: ${JSON.stringify(alias)})`);
          if (externalDependencies.length > 0 && (!cache.configured() || "forever" === cache.mode())) {
            let error = `A plugin/preset has external untracked dependencies (${externalDependencies[0]}), but the cache `;
            throw cache.configured() ? error += " has been configured to never be invalidated. " : error += "has not been configured to be invalidated when the external dependencies change. ", error += `Plugins/presets should configure their cache to be invalidated when the external dependencies change, for example using \`api.cache.invalidate(() => statSync(filepath).mtimeMs)\` or \`api.cache.never()\`
(While processing: ${JSON.stringify(alias)})`, new Error(error);
          }
          return { value: item, options, dirname: dirname4, alias, externalDependencies: (0, _deepArray.finalize)(externalDependencies) };
        }), pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI), presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI);
        function* loadPluginDescriptor(descriptor, context2) {
          if (descriptor.value instanceof _plugin.default) {
            if (descriptor.options)
              throw new Error("Passed options to an existing Plugin instance will not work.");
            return descriptor.value;
          }
          return yield* instantiatePlugin(yield* pluginDescriptorLoader(descriptor, context2), context2);
        }
        const instantiatePlugin = (0, _caching.makeWeakCache)(function* ({ value, options, dirname: dirname4, alias, externalDependencies }, cache) {
          const pluginObj = (0, _plugins.validatePluginObject)(value), plugin = Object.assign({}, pluginObj);
          if (plugin.visitor && (plugin.visitor = _traverse().default.explode(Object.assign({}, plugin.visitor))), plugin.inherits) {
            const inheritsDescriptor = { name: void 0, alias: `${alias}$inherits`, value: plugin.inherits, options, dirname: dirname4 }, inherits = yield* (0, _async.forwardAsync)(loadPluginDescriptor, (run) => cache.invalidate((data2) => run(inheritsDescriptor, data2)));
            plugin.pre = chain(inherits.pre, plugin.pre), plugin.post = chain(inherits.post, plugin.post), plugin.manipulateOptions = chain(inherits.manipulateOptions, plugin.manipulateOptions), plugin.visitor = _traverse().default.visitors.merge([inherits.visitor || {}, plugin.visitor || {}]), inherits.externalDependencies.length > 0 && (externalDependencies = 0 === externalDependencies.length ? inherits.externalDependencies : (0, _deepArray.finalize)([externalDependencies, inherits.externalDependencies]));
          }
          return new _plugin.default(plugin, options, alias, externalDependencies);
        }), validateIfOptionNeedsFilename = (options, descriptor) => {
          if (options.test || options.include || options.exclude) {
            const formattedPresetName = descriptor.name ? `"${descriptor.name}"` : "/* your preset */";
            throw new _configError.default([`Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`, "```", `babel.transformSync(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`, "```", "See https://babeljs.io/docs/en/options#filename for more information."].join("\n"));
          }
        };
        function* loadPresetDescriptor(descriptor, context2) {
          const preset = instantiatePreset(yield* presetDescriptorLoader(descriptor, context2));
          return ((preset2, context3, descriptor2) => {
            if (!context3.filename) {
              const { options } = preset2;
              validateIfOptionNeedsFilename(options, descriptor2), options.overrides && options.overrides.forEach((overrideOptions) => validateIfOptionNeedsFilename(overrideOptions, descriptor2));
            }
          })(preset, context2, descriptor), { chain: yield* (0, _configChain.buildPresetChain)(preset, context2), externalDependencies: preset.externalDependencies };
        }
        const instantiatePreset = (0, _caching.makeWeakCacheSync)(({ value, dirname: dirname4, alias, externalDependencies }) => ({ options: (0, _options.validate)("preset", value), alias, dirname: dirname4, externalDependencies }));
        function chain(a, b) {
          const fns = [a, b].filter(Boolean);
          return fns.length <= 1 ? fns[0] : function(...args) {
            for (const fn of fns)
              fn.apply(this, args);
          };
        }
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/helpers/config-api.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _semver() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js");
          return _semver = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.makeConfigAPI = makeConfigAPI, exports2.makePluginAPI = function(cache, externalDependencies) {
          return Object.assign({}, makePresetAPI(cache, externalDependencies), { assumption: (name) => cache.using((data2) => data2.assumptions[name]) });
        }, exports2.makePresetAPI = makePresetAPI;
        var _ = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js"), _caching = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/caching.js");
        function makeConfigAPI(cache) {
          return { version: _.version, cache: cache.simple(), env: (value) => cache.using((data2) => void 0 === value ? data2.envName : "function" == typeof value ? (0, _caching.assertSimpleType)(value(data2.envName)) : (Array.isArray(value) ? value : [value]).some((entry) => {
            if ("string" != typeof entry)
              throw new Error("Unexpected non-string value");
            return entry === data2.envName;
          })), async: () => false, caller: (cb) => cache.using((data2) => (0, _caching.assertSimpleType)(cb(data2.caller))), assertVersion };
        }
        function makePresetAPI(cache, externalDependencies) {
          return Object.assign({}, makeConfigAPI(cache), { targets: () => JSON.parse(cache.using((data2) => JSON.stringify(data2.targets))), addExternalDependency: (ref2) => {
            externalDependencies.push(ref2);
          } });
        }
        function assertVersion(range) {
          if ("number" == typeof range) {
            if (!Number.isInteger(range))
              throw new Error("Expected string or integer value.");
            range = `^${range}.0.0-0`;
          }
          if ("string" != typeof range)
            throw new Error("Expected string or integer value.");
          if (_semver().satisfies(_.version, range))
            return;
          const limit = Error.stackTraceLimit;
          "number" == typeof limit && limit < 25 && (Error.stackTraceLimit = 25);
          const err = new Error(`Requires Babel "${range}", but was loaded with "${_.version}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
          throw "number" == typeof limit && (Error.stackTraceLimit = limit), Object.assign(err, { code: "BABEL_VERSION_UNSUPPORTED", version: _.version, range });
        }
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/helpers/deep-array.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.finalize = function(deepArr) {
          return Object.freeze(deepArr);
        }, exports2.flattenToSet = function(arr) {
          const result = /* @__PURE__ */ new Set(), stack = [arr];
          for (; stack.length > 0; )
            for (const el of stack.pop())
              Array.isArray(el) ? stack.push(el) : result.add(el);
          return result;
        };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/helpers/environment.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.getEnv = function(defaultValue = "development") {
          return process.env.BABEL_ENV || process.env.NODE_ENV || defaultValue;
        };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createConfigItem = function(target, options, callback) {
          return void 0 !== callback ? createConfigItemRunner.errback(target, options, callback) : "function" == typeof options ? createConfigItemRunner.errback(target, void 0, callback) : createConfigItemRunner.sync(target, options);
        }, exports2.createConfigItemSync = exports2.createConfigItemAsync = void 0, Object.defineProperty(exports2, "default", { enumerable: true, get: function() {
          return _full.default;
        } }), exports2.loadPartialConfigSync = exports2.loadPartialConfigAsync = exports2.loadPartialConfig = exports2.loadOptionsSync = exports2.loadOptionsAsync = exports2.loadOptions = void 0;
        var _full = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/full.js"), _partial = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/partial.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/item.js");
        const loadOptionsRunner = _gensync()(function* (opts) {
          var _config$options;
          const config = yield* (0, _full.default)(opts);
          return null != (_config$options = null == config ? void 0 : config.options) ? _config$options : null;
        }), createConfigItemRunner = _gensync()(_item.createConfigItem), maybeErrback = (runner) => (argOrCallback, maybeCallback) => {
          let arg, callback;
          return void 0 === maybeCallback && "function" == typeof argOrCallback ? (callback = argOrCallback, arg = void 0) : (callback = maybeCallback, arg = argOrCallback), callback ? runner.errback(arg, callback) : runner.sync(arg);
        }, loadPartialConfig = maybeErrback(_partial.loadPartialConfig);
        exports2.loadPartialConfig = loadPartialConfig;
        const loadPartialConfigSync = _partial.loadPartialConfig.sync;
        exports2.loadPartialConfigSync = loadPartialConfigSync;
        const loadPartialConfigAsync = _partial.loadPartialConfig.async;
        exports2.loadPartialConfigAsync = loadPartialConfigAsync;
        const loadOptions = maybeErrback(loadOptionsRunner);
        exports2.loadOptions = loadOptions;
        const loadOptionsSync = loadOptionsRunner.sync;
        exports2.loadOptionsSync = loadOptionsSync;
        const loadOptionsAsync = loadOptionsRunner.async;
        exports2.loadOptionsAsync = loadOptionsAsync;
        const createConfigItemSync = createConfigItemRunner.sync;
        exports2.createConfigItemSync = createConfigItemSync;
        const createConfigItemAsync = createConfigItemRunner.async;
        exports2.createConfigItemAsync = createConfigItemAsync;
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/item.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data2 = __webpack_require__2("path");
          return _path = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createConfigItem = function* (value, { dirname: dirname4 = ".", type } = {}) {
          return createItemFromDescriptor(yield* (0, _configDescriptors.createDescriptor)(value, _path().resolve(dirname4), { type, alias: "programmatic item" }));
        }, exports2.createItemFromDescriptor = createItemFromDescriptor, exports2.getItemDescriptor = function(item) {
          if (null != item && item[CONFIG_ITEM_BRAND])
            return item._descriptor;
          return;
        };
        var _configDescriptors = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/config-descriptors.js");
        function createItemFromDescriptor(desc) {
          return new ConfigItem(desc);
        }
        const CONFIG_ITEM_BRAND = Symbol.for("@babel/core@7 - ConfigItem");
        class ConfigItem {
          constructor(descriptor) {
            this._descriptor = void 0, this[CONFIG_ITEM_BRAND] = true, this.value = void 0, this.options = void 0, this.dirname = void 0, this.name = void 0, this.file = void 0, this._descriptor = descriptor, Object.defineProperty(this, "_descriptor", { enumerable: false }), Object.defineProperty(this, CONFIG_ITEM_BRAND, { enumerable: false }), this.value = this._descriptor.value, this.options = this._descriptor.options, this.dirname = this._descriptor.dirname, this.name = this._descriptor.name, this.file = this._descriptor.file ? { request: this._descriptor.file.request, resolved: this._descriptor.file.resolved } : void 0, Object.freeze(this);
          }
        }
        Object.freeze(ConfigItem.prototype);
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/partial.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data2 = __webpack_require__2("path");
          return _path = function() {
            return data2;
          }, data2;
        }
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = loadPrivatePartialConfig, exports2.loadPartialConfig = void 0;
        var _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/plugin.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/util.js"), _item = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/item.js"), _configChain = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/config-chain.js"), _environment = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/helpers/environment.js"), _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/validation/options.js"), _files = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/index.js"), _resolveTargets = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/resolve-targets.js");
        const _excluded = ["showIgnoredFiles"];
        function* loadPrivatePartialConfig(inputOpts) {
          if (null != inputOpts && ("object" != typeof inputOpts || Array.isArray(inputOpts)))
            throw new Error("Babel options must be an object, null, or undefined");
          const args = inputOpts ? (0, _options.validate)("arguments", inputOpts) : {}, { envName = (0, _environment.getEnv)(), cwd = ".", root: rootDir = ".", rootMode = "root", caller, cloneInputAst = true } = args, absoluteCwd = _path().resolve(cwd), absoluteRootDir = function(rootDir2, rootMode2) {
            switch (rootMode2) {
              case "root":
                return rootDir2;
              case "upward-optional": {
                const upwardRootDir = (0, _files.findConfigUpwards)(rootDir2);
                return null === upwardRootDir ? rootDir2 : upwardRootDir;
              }
              case "upward": {
                const upwardRootDir = (0, _files.findConfigUpwards)(rootDir2);
                if (null !== upwardRootDir)
                  return upwardRootDir;
                throw Object.assign(new Error(`Babel was run with rootMode:"upward" but a root could not be found when searching upward from "${rootDir2}".
One of the following config files must be in the directory tree: "${_files.ROOT_CONFIG_FILENAMES.join(", ")}".`), { code: "BABEL_ROOT_NOT_FOUND", dirname: rootDir2 });
              }
              default:
                throw new Error("Assertion failure - unknown rootMode value.");
            }
          }(_path().resolve(absoluteCwd, rootDir), rootMode), filename = "string" == typeof args.filename ? _path().resolve(cwd, args.filename) : void 0, context = { filename, cwd: absoluteCwd, root: absoluteRootDir, envName, caller, showConfig: (yield* (0, _files.resolveShowConfigPath)(absoluteCwd)) === filename }, configChain = yield* (0, _configChain.buildRootChain)(args, context);
          if (!configChain)
            return null;
          const merged = { assumptions: {} };
          configChain.options.forEach((opts) => {
            (0, _util.mergeOptions)(merged, opts);
          });
          return { options: Object.assign({}, merged, { targets: (0, _resolveTargets.resolveTargets)(merged, absoluteRootDir), cloneInputAst, babelrc: false, configFile: false, browserslistConfigFile: false, passPerPreset: false, envName: context.envName, cwd: context.cwd, root: context.root, rootMode: "root", filename: "string" == typeof context.filename ? context.filename : void 0, plugins: configChain.plugins.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)), presets: configChain.presets.map((descriptor) => (0, _item.createItemFromDescriptor)(descriptor)) }), context, fileHandling: configChain.fileHandling, ignore: configChain.ignore, babelrc: configChain.babelrc, config: configChain.config, files: configChain.files };
        }
        const loadPartialConfig = _gensync()(function* (opts) {
          let showIgnoredFiles = false;
          if ("object" == typeof opts && null !== opts && !Array.isArray(opts)) {
            var _opts = opts;
            ({ showIgnoredFiles } = _opts), opts = function(source, excluded) {
              if (null == source)
                return {};
              var key, i, target = {}, sourceKeys = Object.keys(source);
              for (i = 0; i < sourceKeys.length; i++)
                key = sourceKeys[i], excluded.indexOf(key) >= 0 || (target[key] = source[key]);
              return target;
            }(_opts, _excluded);
          }
          const result = yield* loadPrivatePartialConfig(opts);
          if (!result)
            return null;
          const { options, babelrc, ignore: ignore2, config, fileHandling, files } = result;
          return "ignored" !== fileHandling || showIgnoredFiles ? ((options.plugins || []).forEach((item) => {
            if (item.value instanceof _plugin.default)
              throw new Error("Passing cached plugin instances is not supported in babel.loadPartialConfig()");
          }), new PartialConfig(options, babelrc ? babelrc.filepath : void 0, ignore2 ? ignore2.filepath : void 0, config ? config.filepath : void 0, fileHandling, files)) : null;
        });
        exports2.loadPartialConfig = loadPartialConfig;
        class PartialConfig {
          constructor(options, babelrc, ignore2, config, fileHandling, files) {
            this.options = void 0, this.babelrc = void 0, this.babelignore = void 0, this.config = void 0, this.fileHandling = void 0, this.files = void 0, this.options = options, this.babelignore = ignore2, this.babelrc = babelrc, this.config = config, this.fileHandling = fileHandling, this.files = files, Object.freeze(this);
          }
          hasFilesystemConfig() {
            return void 0 !== this.babelrc || void 0 !== this.config;
          }
        }
        Object.freeze(PartialConfig.prototype);
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/pattern-to-regex.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data2 = __webpack_require__2("path");
          return _path = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(pattern, dirname4) {
          const parts = _path().resolve(dirname4, pattern).split(_path().sep);
          return new RegExp(["^", ...parts.map((part, i) => {
            const last = i === parts.length - 1;
            return "**" === part ? last ? starStarPatLast : starStarPat : "*" === part ? last ? starPatLast : starPat : 0 === part.indexOf("*.") ? substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep) : escapeRegExp(part) + (last ? endSep : sep);
          })].join(""));
        };
        const sep = `\\${_path().sep}`, endSep = `(?:${sep}|$)`, substitution = `[^${sep}]+`, starPat = `(?:${substitution}${sep})`, starPatLast = `(?:${substitution}${endSep})`, starStarPat = `${starPat}*?`, starStarPatLast = `${starPat}*?${starPatLast}?`;
        function escapeRegExp(string) {
          return string.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&");
        }
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/plugin.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/helpers/deep-array.js");
        exports2.default = class {
          constructor(plugin, options, key, externalDependencies = (0, _deepArray.finalize)([])) {
            this.key = void 0, this.manipulateOptions = void 0, this.post = void 0, this.pre = void 0, this.visitor = void 0, this.parserOverride = void 0, this.generatorOverride = void 0, this.options = void 0, this.externalDependencies = void 0, this.key = plugin.name || key, this.manipulateOptions = plugin.manipulateOptions, this.post = plugin.post, this.pre = plugin.pre, this.visitor = plugin.visitor || {}, this.parserOverride = plugin.parserOverride, this.generatorOverride = plugin.generatorOverride, this.options = options, this.externalDependencies = externalDependencies;
          }
        };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/printer.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ConfigPrinter = exports2.ChainFormatter = void 0;
        const ChainFormatter = { Programmatic: 0, Config: 1 };
        exports2.ChainFormatter = ChainFormatter;
        const Formatter = { title(type, callerName, filepath) {
          let title = "";
          return type === ChainFormatter.Programmatic ? (title = "programmatic options", callerName && (title += " from " + callerName)) : title = "config " + filepath, title;
        }, loc(index2, envName) {
          let loc = "";
          return null != index2 && (loc += `.overrides[${index2}]`), null != envName && (loc += `.env["${envName}"]`), loc;
        }, *optionsAndDescriptors(opt) {
          const content = Object.assign({}, opt.options);
          delete content.overrides, delete content.env;
          const pluginDescriptors = [...yield* opt.plugins()];
          pluginDescriptors.length && (content.plugins = pluginDescriptors.map((d) => descriptorToConfig(d)));
          const presetDescriptors = [...yield* opt.presets()];
          return presetDescriptors.length && (content.presets = [...presetDescriptors].map((d) => descriptorToConfig(d))), JSON.stringify(content, void 0, 2);
        } };
        function descriptorToConfig(d) {
          var _d$file;
          let name = null == (_d$file = d.file) ? void 0 : _d$file.request;
          return null == name && ("object" == typeof d.value ? name = d.value : "function" == typeof d.value && (name = `[Function: ${d.value.toString().slice(0, 50)} ... ]`)), null == name && (name = "[Unknown]"), void 0 === d.options ? name : null == d.name ? [name, d.options] : [name, d.options, d.name];
        }
        class ConfigPrinter {
          constructor() {
            this._stack = [];
          }
          configure(enabled, type, { callerName, filepath }) {
            return enabled ? (content, index2, envName) => {
              this._stack.push({ type, callerName, filepath, content, index: index2, envName });
            } : () => {
            };
          }
          static *format(config) {
            let title = Formatter.title(config.type, config.callerName, config.filepath);
            const loc = Formatter.loc(config.index, config.envName);
            loc && (title += ` ${loc}`);
            return `${title}
${yield* Formatter.optionsAndDescriptors(config.content)}`;
          }
          *output() {
            if (0 === this._stack.length)
              return "";
            return (yield* _gensync().all(this._stack.map((s) => ConfigPrinter.format(s)))).join("\n\n");
          }
        }
        exports2.ConfigPrinter = ConfigPrinter;
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/resolve-targets.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data2 = __webpack_require__2("path");
          return _path = function() {
            return data2;
          }, data2;
        }
        function _helperCompilationTargets() {
          const data2 = __webpack_require__2("./stubs/helper_compilation_targets.js");
          return _helperCompilationTargets = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.resolveBrowserslistConfigFile = function(browserslistConfigFile, configFileDir) {
          return _path().resolve(configFileDir, browserslistConfigFile);
        }, exports2.resolveTargets = function(options, root) {
          const optTargets = options.targets;
          let targets;
          "string" == typeof optTargets || Array.isArray(optTargets) ? targets = { browsers: optTargets } : optTargets && (targets = "esmodules" in optTargets ? Object.assign({}, optTargets, { esmodules: "intersect" }) : optTargets);
          const { browserslistConfigFile } = options;
          let configFile, ignoreBrowserslistConfig = false;
          "string" == typeof browserslistConfigFile ? configFile = browserslistConfigFile : ignoreBrowserslistConfig = false === browserslistConfigFile;
          return (0, _helperCompilationTargets().default)(targets, { ignoreBrowserslistConfig, configFile, configPath: root, browserslistEnv: options.browserslistEnv });
        };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/util.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function mergeDefaultFields(target, source) {
          for (const k of Object.keys(source)) {
            const val = source[k];
            void 0 !== val && (target[k] = val);
          }
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isIterableIterator = function(value) {
          return !!value && "function" == typeof value.next && "function" == typeof value[Symbol.iterator];
        }, exports2.mergeOptions = function(target, source) {
          for (const k of Object.keys(source))
            if ("parserOpts" !== k && "generatorOpts" !== k && "assumptions" !== k || !source[k]) {
              const val = source[k];
              void 0 !== val && (target[k] = val);
            } else {
              const parserOpts = source[k];
              mergeDefaultFields(target[k] || (target[k] = {}), parserOpts);
            }
        };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/validation/option-assertions.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _helperCompilationTargets() {
          const data2 = __webpack_require__2("./stubs/helper_compilation_targets.js");
          return _helperCompilationTargets = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.access = access, exports2.assertArray = assertArray, exports2.assertAssumptions = function(loc, value) {
          if (void 0 === value)
            return;
          if ("object" != typeof value || null === value)
            throw new Error(`${msg(loc)} must be an object or undefined.`);
          let root = loc;
          do {
            root = root.parent;
          } while ("root" !== root.type);
          const inPreset = "preset" === root.source;
          for (const name of Object.keys(value)) {
            const subLoc = access(loc, name);
            if (!_options.assumptionsNames.has(name))
              throw new Error(`${msg(subLoc)} is not a supported assumption.`);
            if ("boolean" != typeof value[name])
              throw new Error(`${msg(subLoc)} must be a boolean.`);
            if (inPreset && false === value[name])
              throw new Error(`${msg(subLoc)} cannot be set to 'false' inside presets.`);
          }
          return value;
        }, exports2.assertBabelrcSearch = function(loc, value) {
          if (void 0 === value || "boolean" == typeof value)
            return value;
          if (Array.isArray(value))
            value.forEach((item, i) => {
              if (!checkValidTest(item))
                throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
            });
          else if (!checkValidTest(value))
            throw new Error(`${msg(loc)} must be a undefined, a boolean, a string/Function/RegExp or an array of those, got ${JSON.stringify(value)}`);
          return value;
        }, exports2.assertBoolean = assertBoolean, exports2.assertCallerMetadata = function(loc, value) {
          const obj = assertObject(loc, value);
          if (obj) {
            if ("string" != typeof obj.name)
              throw new Error(`${msg(loc)} set but does not contain "name" property string`);
            for (const prop of Object.keys(obj)) {
              const propLoc = access(loc, prop), value2 = obj[prop];
              if (null != value2 && "boolean" != typeof value2 && "string" != typeof value2 && "number" != typeof value2)
                throw new Error(`${msg(propLoc)} must be null, undefined, a boolean, a string, or a number.`);
            }
          }
          return value;
        }, exports2.assertCompact = function(loc, value) {
          if (void 0 !== value && "boolean" != typeof value && "auto" !== value)
            throw new Error(`${msg(loc)} must be a boolean, "auto", or undefined`);
          return value;
        }, exports2.assertConfigApplicableTest = function(loc, value) {
          if (void 0 === value)
            return value;
          if (Array.isArray(value))
            value.forEach((item, i) => {
              if (!checkValidTest(item))
                throw new Error(`${msg(access(loc, i))} must be a string/Function/RegExp.`);
            });
          else if (!checkValidTest(value))
            throw new Error(`${msg(loc)} must be a string/Function/RegExp, or an array of those`);
          return value;
        }, exports2.assertConfigFileSearch = function(loc, value) {
          if (void 0 !== value && "boolean" != typeof value && "string" != typeof value)
            throw new Error(`${msg(loc)} must be a undefined, a boolean, a string, got ${JSON.stringify(value)}`);
          return value;
        }, exports2.assertFunction = function(loc, value) {
          if (void 0 !== value && "function" != typeof value)
            throw new Error(`${msg(loc)} must be a function, or undefined`);
          return value;
        }, exports2.assertIgnoreList = function(loc, value) {
          const arr = assertArray(loc, value);
          arr && arr.forEach((item, i) => function(loc2, value2) {
            if ("string" != typeof value2 && "function" != typeof value2 && !(value2 instanceof RegExp))
              throw new Error(`${msg(loc2)} must be an array of string/Function/RegExp values, or undefined`);
            return value2;
          }(access(loc, i), item));
          return arr;
        }, exports2.assertInputSourceMap = function(loc, value) {
          if (void 0 !== value && "boolean" != typeof value && ("object" != typeof value || !value))
            throw new Error(`${msg(loc)} must be a boolean, object, or undefined`);
          return value;
        }, exports2.assertObject = assertObject, exports2.assertPluginList = function(loc, value) {
          const arr = assertArray(loc, value);
          arr && arr.forEach((item, i) => function(loc2, value2) {
            if (Array.isArray(value2)) {
              if (0 === value2.length)
                throw new Error(`${msg(loc2)} must include an object`);
              if (value2.length > 3)
                throw new Error(`${msg(loc2)} may only be a two-tuple or three-tuple`);
              if (assertPluginTarget(access(loc2, 0), value2[0]), value2.length > 1) {
                const opts = value2[1];
                if (void 0 !== opts && false !== opts && ("object" != typeof opts || Array.isArray(opts) || null === opts))
                  throw new Error(`${msg(access(loc2, 1))} must be an object, false, or undefined`);
              }
              if (3 === value2.length) {
                const name = value2[2];
                if (void 0 !== name && "string" != typeof name)
                  throw new Error(`${msg(access(loc2, 2))} must be a string, or undefined`);
              }
            } else
              assertPluginTarget(loc2, value2);
            return value2;
          }(access(loc, i), item));
          return arr;
        }, exports2.assertRootMode = function(loc, value) {
          if (void 0 !== value && "root" !== value && "upward" !== value && "upward-optional" !== value)
            throw new Error(`${msg(loc)} must be a "root", "upward", "upward-optional" or undefined`);
          return value;
        }, exports2.assertSourceMaps = function(loc, value) {
          if (void 0 !== value && "boolean" != typeof value && "inline" !== value && "both" !== value)
            throw new Error(`${msg(loc)} must be a boolean, "inline", "both", or undefined`);
          return value;
        }, exports2.assertSourceType = function(loc, value) {
          if (void 0 !== value && "module" !== value && "script" !== value && "unambiguous" !== value)
            throw new Error(`${msg(loc)} must be "module", "script", "unambiguous", or undefined`);
          return value;
        }, exports2.assertString = function(loc, value) {
          if (void 0 !== value && "string" != typeof value)
            throw new Error(`${msg(loc)} must be a string, or undefined`);
          return value;
        }, exports2.assertTargets = function(loc, value) {
          if ((0, _helperCompilationTargets().isBrowsersQueryValid)(value))
            return value;
          if ("object" != typeof value || !value || Array.isArray(value))
            throw new Error(`${msg(loc)} must be a string, an array of strings or an object`);
          const browsersLoc = access(loc, "browsers"), esmodulesLoc = access(loc, "esmodules");
          assertBrowsersList(browsersLoc, value.browsers), assertBoolean(esmodulesLoc, value.esmodules);
          for (const key of Object.keys(value)) {
            const val = value[key], subLoc = access(loc, key);
            if ("esmodules" === key)
              assertBoolean(subLoc, val);
            else if ("browsers" === key)
              assertBrowsersList(subLoc, val);
            else {
              if (!Object.hasOwnProperty.call(_helperCompilationTargets().TargetNames, key)) {
                const validTargets = Object.keys(_helperCompilationTargets().TargetNames).join(", ");
                throw new Error(`${msg(subLoc)} is not a valid target. Supported targets are ${validTargets}`);
              }
              assertBrowserVersion(subLoc, val);
            }
          }
          return value;
        }, exports2.msg = msg;
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/validation/options.js");
        function msg(loc) {
          switch (loc.type) {
            case "root":
              return "";
            case "env":
              return `${msg(loc.parent)}.env["${loc.name}"]`;
            case "overrides":
              return `${msg(loc.parent)}.overrides[${loc.index}]`;
            case "option":
              return `${msg(loc.parent)}.${loc.name}`;
            case "access":
              return `${msg(loc.parent)}[${JSON.stringify(loc.name)}]`;
            default:
              throw new Error(`Assertion failure: Unknown type ${loc.type}`);
          }
        }
        function access(loc, name) {
          return { type: "access", name, parent: loc };
        }
        function assertBoolean(loc, value) {
          if (void 0 !== value && "boolean" != typeof value)
            throw new Error(`${msg(loc)} must be a boolean, or undefined`);
          return value;
        }
        function assertObject(loc, value) {
          if (void 0 !== value && ("object" != typeof value || Array.isArray(value) || !value))
            throw new Error(`${msg(loc)} must be an object, or undefined`);
          return value;
        }
        function assertArray(loc, value) {
          if (null != value && !Array.isArray(value))
            throw new Error(`${msg(loc)} must be an array, or undefined`);
          return value;
        }
        function checkValidTest(value) {
          return "string" == typeof value || "function" == typeof value || value instanceof RegExp;
        }
        function assertPluginTarget(loc, value) {
          if (("object" != typeof value || !value) && "string" != typeof value && "function" != typeof value)
            throw new Error(`${msg(loc)} must be a string, object, function`);
          return value;
        }
        function assertBrowsersList(loc, value) {
          if (void 0 !== value && !(0, _helperCompilationTargets().isBrowsersQueryValid)(value))
            throw new Error(`${msg(loc)} must be undefined, a string or an array of strings`);
        }
        function assertBrowserVersion(loc, value) {
          if (("number" != typeof value || Math.round(value) !== value) && "string" != typeof value)
            throw new Error(`${msg(loc)} must be a string or an integer number`);
        }
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/validation/options.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assumptionsNames = void 0, exports2.checkNoUnwrappedItemOptionPairs = function(items, index2, type, e) {
          if (0 === index2)
            return;
          const lastItem = items[index2 - 1], thisItem = items[index2];
          lastItem.file && void 0 === lastItem.options && "object" == typeof thisItem.value && (e.message += `
- Maybe you meant to use
"${type}s": [
  ["${lastItem.file.request}", ${JSON.stringify(thisItem.value, void 0, 2)}]
]
To be a valid ${type}, its name and options should be wrapped in a pair of brackets`);
        }, exports2.validate = function(type, opts, filename) {
          try {
            return validateNested({ type: "root", source: type }, opts);
          } catch (error) {
            const configError = new _configError.default(error.message, filename);
            throw error.code && (configError.code = error.code), configError;
          }
        };
        var _removed = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/validation/removed.js"), _optionAssertions = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/validation/option-assertions.js"), _configError = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/config-error.js");
        const ROOT_VALIDATORS = { cwd: _optionAssertions.assertString, root: _optionAssertions.assertString, rootMode: _optionAssertions.assertRootMode, configFile: _optionAssertions.assertConfigFileSearch, caller: _optionAssertions.assertCallerMetadata, filename: _optionAssertions.assertString, filenameRelative: _optionAssertions.assertString, code: _optionAssertions.assertBoolean, ast: _optionAssertions.assertBoolean, cloneInputAst: _optionAssertions.assertBoolean, envName: _optionAssertions.assertString }, BABELRC_VALIDATORS = { babelrc: _optionAssertions.assertBoolean, babelrcRoots: _optionAssertions.assertBabelrcSearch }, NONPRESET_VALIDATORS = { extends: _optionAssertions.assertString, ignore: _optionAssertions.assertIgnoreList, only: _optionAssertions.assertIgnoreList, targets: _optionAssertions.assertTargets, browserslistConfigFile: _optionAssertions.assertConfigFileSearch, browserslistEnv: _optionAssertions.assertString }, COMMON_VALIDATORS = { inputSourceMap: _optionAssertions.assertInputSourceMap, presets: _optionAssertions.assertPluginList, plugins: _optionAssertions.assertPluginList, passPerPreset: _optionAssertions.assertBoolean, assumptions: _optionAssertions.assertAssumptions, env: function(loc, value) {
          if ("env" === loc.parent.type)
            throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside of another .env block`);
          const parent = loc.parent, obj = (0, _optionAssertions.assertObject)(loc, value);
          if (obj)
            for (const envName of Object.keys(obj)) {
              const env = (0, _optionAssertions.assertObject)((0, _optionAssertions.access)(loc, envName), obj[envName]);
              if (!env)
                continue;
              validateNested({ type: "env", name: envName, parent }, env);
            }
          return obj;
        }, overrides: function(loc, value) {
          if ("env" === loc.parent.type)
            throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .env block`);
          if ("overrides" === loc.parent.type)
            throw new Error(`${(0, _optionAssertions.msg)(loc)} is not allowed inside an .overrides block`);
          const parent = loc.parent, arr = (0, _optionAssertions.assertArray)(loc, value);
          if (arr)
            for (const [index2, item] of arr.entries()) {
              const objLoc = (0, _optionAssertions.access)(loc, index2), env = (0, _optionAssertions.assertObject)(objLoc, item);
              if (!env)
                throw new Error(`${(0, _optionAssertions.msg)(objLoc)} must be an object`);
              validateNested({ type: "overrides", index: index2, parent }, env);
            }
          return arr;
        }, test: _optionAssertions.assertConfigApplicableTest, include: _optionAssertions.assertConfigApplicableTest, exclude: _optionAssertions.assertConfigApplicableTest, retainLines: _optionAssertions.assertBoolean, comments: _optionAssertions.assertBoolean, shouldPrintComment: _optionAssertions.assertFunction, compact: _optionAssertions.assertCompact, minified: _optionAssertions.assertBoolean, auxiliaryCommentBefore: _optionAssertions.assertString, auxiliaryCommentAfter: _optionAssertions.assertString, sourceType: _optionAssertions.assertSourceType, wrapPluginVisitorMethod: _optionAssertions.assertFunction, highlightCode: _optionAssertions.assertBoolean, sourceMaps: _optionAssertions.assertSourceMaps, sourceMap: _optionAssertions.assertSourceMaps, sourceFileName: _optionAssertions.assertString, sourceRoot: _optionAssertions.assertString, parserOpts: _optionAssertions.assertObject, generatorOpts: _optionAssertions.assertObject };
        Object.assign(COMMON_VALIDATORS, { getModuleId: _optionAssertions.assertFunction, moduleRoot: _optionAssertions.assertString, moduleIds: _optionAssertions.assertBoolean, moduleId: _optionAssertions.assertString });
        const assumptionsNames = /* @__PURE__ */ new Set(["arrayLikeIsIterable", "constantReexports", "constantSuper", "enumerableModuleMeta", "ignoreFunctionLength", "ignoreToPrimitiveHint", "iterableIsArray", "mutableTemplateObject", "noClassCalls", "noDocumentAll", "noIncompleteNsImportDetection", "noNewArrows", "objectRestNoSymbols", "privateFieldsAsProperties", "pureGetters", "setClassMethods", "setComputedProperties", "setPublicClassFields", "setSpreadProperties", "skipForOfIteratorClosing", "superIsCallableConstructor"]);
        function getSource(loc) {
          return "root" === loc.type ? loc.source : getSource(loc.parent);
        }
        function validateNested(loc, opts) {
          const type = getSource(loc);
          return function(opts2) {
            if (has(opts2, "sourceMap") && has(opts2, "sourceMaps"))
              throw new Error(".sourceMap is an alias for .sourceMaps, cannot use both");
          }(opts), Object.keys(opts).forEach((key) => {
            const optLoc = { type: "option", name: key, parent: loc };
            if ("preset" === type && NONPRESET_VALIDATORS[key])
              throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in preset options`);
            if ("arguments" !== type && ROOT_VALIDATORS[key])
              throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options`);
            if ("arguments" !== type && "configfile" !== type && BABELRC_VALIDATORS[key]) {
              if ("babelrcfile" === type || "extendsfile" === type)
                throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is not allowed in .babelrc or "extends"ed files, only in root programmatic options, or babel.config.js/config file options`);
              throw new Error(`${(0, _optionAssertions.msg)(optLoc)} is only allowed in root programmatic options, or babel.config.js/config file options`);
            }
            (COMMON_VALIDATORS[key] || NONPRESET_VALIDATORS[key] || BABELRC_VALIDATORS[key] || ROOT_VALIDATORS[key] || throwUnknownError)(optLoc, opts[key]);
          }), opts;
        }
        function throwUnknownError(loc) {
          const key = loc.name;
          if (_removed.default[key]) {
            const { message, version: version2 = 5 } = _removed.default[key];
            throw new Error(`Using removed Babel ${version2} option: ${(0, _optionAssertions.msg)(loc)} - ${message}`);
          }
          {
            const unknownOptErr = new Error(`Unknown option: ${(0, _optionAssertions.msg)(loc)}. Check out https://babeljs.io/docs/en/babel-core/#options for more information about options.`);
            throw unknownOptErr.code = "BABEL_UNKNOWN_OPTION", unknownOptErr;
          }
        }
        function has(obj, key) {
          return Object.prototype.hasOwnProperty.call(obj, key);
        }
        exports2.assumptionsNames = assumptionsNames;
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/validation/plugins.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.validatePluginObject = function(obj) {
          const rootPath = { type: "root", source: "plugin" };
          return Object.keys(obj).forEach((key) => {
            const validator = VALIDATORS[key];
            if (!validator) {
              const invalidPluginPropertyError = new Error(`.${key} is not a valid Plugin property`);
              throw invalidPluginPropertyError.code = "BABEL_UNKNOWN_PLUGIN_PROPERTY", invalidPluginPropertyError;
            }
            validator({ type: "option", name: key, parent: rootPath }, obj[key]);
          }), obj;
        };
        var _optionAssertions = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/validation/option-assertions.js");
        const VALIDATORS = { name: _optionAssertions.assertString, manipulateOptions: _optionAssertions.assertFunction, pre: _optionAssertions.assertFunction, post: _optionAssertions.assertFunction, inherits: _optionAssertions.assertFunction, visitor: function(loc, value) {
          const obj = (0, _optionAssertions.assertObject)(loc, value);
          if (obj && (Object.keys(obj).forEach((prop) => function(key, value2) {
            if (value2 && "object" == typeof value2)
              Object.keys(value2).forEach((handler) => {
                if ("enter" !== handler && "exit" !== handler)
                  throw new Error(`.visitor["${key}"] may only have .enter and/or .exit handlers.`);
              });
            else if ("function" != typeof value2)
              throw new Error(`.visitor["${key}"] must be a function`);
            return value2;
          }(prop, obj[prop])), obj.enter || obj.exit))
            throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all "enter" or "exit" handlers. Please target individual nodes.`);
          return obj;
        }, parserOverride: _optionAssertions.assertFunction, generatorOverride: _optionAssertions.assertFunction };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/validation/removed.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        exports2.default = { auxiliaryComment: { message: "Use `auxiliaryCommentBefore` or `auxiliaryCommentAfter`" }, blacklist: { message: "Put the specific transforms you want in the `plugins` option" }, breakConfig: { message: "This is not a necessary option in Babel 6" }, experimental: { message: "Put the specific transforms you want in the `plugins` option" }, externalHelpers: { message: "Use the `external-helpers` plugin instead. Check out http://babeljs.io/docs/plugins/external-helpers/" }, extra: { message: "" }, jsxPragma: { message: "use the `pragma` option in the `react-jsx` plugin. Check out http://babeljs.io/docs/plugins/transform-react-jsx/" }, loose: { message: "Specify the `loose` option for the relevant plugin you are using or use a preset that sets the option." }, metadataUsedHelpers: { message: "Not required anymore as this is enabled by default" }, modules: { message: "Use the corresponding module transform plugin in the `plugins` option. Check out http://babeljs.io/docs/plugins/#modules" }, nonStandard: { message: "Use the `react-jsx` and `flow-strip-types` plugins to support JSX and Flow. Also check out the react preset http://babeljs.io/docs/plugins/preset-react/" }, optional: { message: "Put the specific transforms you want in the `plugins` option" }, sourceMapName: { message: "The `sourceMapName` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves." }, stage: { message: "Check out the corresponding stage-x presets http://babeljs.io/docs/plugins/#presets" }, whitelist: { message: "Put the specific transforms you want in the `plugins` option" }, resolveModuleSource: { version: 6, message: "Use `babel-plugin-module-resolver@3`'s 'resolvePath' options" }, metadata: { version: 6, message: "Generated plugin metadata is always included in the output result" }, sourceMapTarget: { version: 6, message: "The `sourceMapTarget` option has been removed because it makes more sense for the tooling that calls Babel to assign `map.file` themselves." } };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/config-error.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        class ConfigError extends Error {
          constructor(message, filename) {
            super(message), (0, _rewriteStackTrace.expectedError)(this), filename && (0, _rewriteStackTrace.injcectVirtualStackFrame)(this, filename);
          }
        }
        exports2.default = ConfigError;
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.beginHiddenCallStack = function(fn) {
          return SUPPORTED ? Object.defineProperty(function(...args) {
            return setupPrepareStackTrace(), fn(...args);
          }, "name", { value: STOP_HIDNG }) : fn;
        }, exports2.endHiddenCallStack = function(fn) {
          return SUPPORTED ? Object.defineProperty(function(...args) {
            return fn(...args);
          }, "name", { value: START_HIDNG }) : fn;
        }, exports2.expectedError = function(error) {
          if (!SUPPORTED)
            return;
          return expectedErrors.add(error), error;
        }, exports2.injcectVirtualStackFrame = function(error, filename) {
          if (!SUPPORTED)
            return;
          let frames = virtualFrames.get(error);
          frames || virtualFrames.set(error, frames = []);
          return frames.push(function(filename2) {
            return /* @__PURE__ */ Object.create({ isNative: () => false, isConstructor: () => false, isToplevel: () => true, getFileName: () => filename2, getLineNumber: () => {
            }, getColumnNumber: () => {
            }, getFunctionName: () => {
            }, getMethodName: () => {
            }, getTypeName: () => {
            }, toString: () => filename2 });
          }(filename)), error;
        };
        const ErrorToString = Function.call.bind(Error.prototype.toString), SUPPORTED = !!Error.captureStackTrace, START_HIDNG = "startHiding - secret - don't use this - v1", STOP_HIDNG = "stopHiding - secret - don't use this - v1", expectedErrors = /* @__PURE__ */ new WeakSet(), virtualFrames = /* @__PURE__ */ new WeakMap();
        function setupPrepareStackTrace() {
          setupPrepareStackTrace = () => {
          };
          const { prepareStackTrace = defaultPrepareStackTrace } = Error;
          Error.stackTraceLimit && (Error.stackTraceLimit = Math.max(Error.stackTraceLimit, 50)), Error.prepareStackTrace = function(err, trace) {
            let newTrace = [];
            let status = expectedErrors.has(err) ? "hiding" : "unknown";
            for (let i = 0; i < trace.length; i++) {
              const name = trace[i].getFunctionName();
              if (name === START_HIDNG)
                status = "hiding";
              else if (name === STOP_HIDNG) {
                if ("hiding" === status)
                  status = "showing", virtualFrames.has(err) && newTrace.unshift(...virtualFrames.get(err));
                else if ("unknown" === status) {
                  newTrace = trace;
                  break;
                }
              } else
                "hiding" !== status && newTrace.push(trace[i]);
            }
            return prepareStackTrace(err, newTrace);
          };
        }
        function defaultPrepareStackTrace(err, trace) {
          return 0 === trace.length ? ErrorToString(err) : `${ErrorToString(err)}
    at ${trace.join("\n    at ")}`;
        }
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/gensync-utils/async.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        function asyncGeneratorStep(gen, resolve2, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg), value = info.value;
          } catch (error) {
            return void reject(error);
          }
          info.done ? resolve2(value) : Promise.resolve(value).then(_next, _throw);
        }
        function _asyncToGenerator(fn) {
          return function() {
            var self2 = this, args = arguments;
            return new Promise(function(resolve2, reject) {
              var gen = fn.apply(self2, args);
              function _next(value) {
                asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "next", value);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          };
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.forwardAsync = function(action, cb) {
          const g = _gensync()(action);
          return withKind((kind) => {
            const adapted = g[kind];
            return cb(adapted);
          });
        }, exports2.isAsync = void 0, exports2.isThenable = isThenable, exports2.maybeAsync = function(fn, message) {
          return _gensync()({ sync(...args) {
            const result = fn.apply(this, args);
            if (isThenable(result))
              throw new Error(message);
            return result;
          }, async(...args) {
            return Promise.resolve(fn.apply(this, args));
          } });
        }, exports2.waitFor = exports2.onFirstPause = void 0;
        const runGenerator = _gensync()(function* (item) {
          return yield* item;
        }), isAsync = _gensync()({ sync: () => false, errback: (cb) => cb(null, true) });
        exports2.isAsync = isAsync;
        const withKind = _gensync()({ sync: (cb) => cb("sync"), async: (_ref = _asyncToGenerator(function* (cb) {
          return cb("async");
        }), function(_x) {
          return _ref.apply(this, arguments);
        }) });
        var _ref;
        const onFirstPause = _gensync()({ name: "onFirstPause", arity: 2, sync: function(item) {
          return runGenerator.sync(item);
        }, errback: function(item, firstPause, cb) {
          let completed = false;
          runGenerator.errback(item, (err, value) => {
            completed = true, cb(err, value);
          }), completed || firstPause();
        } });
        exports2.onFirstPause = onFirstPause;
        const waitFor = _gensync()({ sync: (x) => x, async: (_ref2 = _asyncToGenerator(function* (x) {
          return x;
        }), function(_x2) {
          return _ref2.apply(this, arguments);
        }) });
        var _ref2;
        function isThenable(val) {
          return !(!val || "object" != typeof val && "function" != typeof val || !val.then || "function" != typeof val.then);
        }
        exports2.waitFor = waitFor;
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/gensync-utils/fs.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _fs() {
          const data2 = __webpack_require__2("fs");
          return _fs = function() {
            return data2;
          }, data2;
        }
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.stat = exports2.readFile = void 0;
        const readFile = _gensync()({ sync: _fs().readFileSync, errback: _fs().readFile });
        exports2.readFile = readFile;
        const stat = _gensync()({ sync: _fs().statSync, errback: _fs().stat });
        exports2.stat = stat;
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/gensync-utils/functional.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.once = function(fn) {
          let result, resultP;
          return function* () {
            if (result)
              return result;
            if (!(yield* (0, _async.isAsync)()))
              return result = yield* fn();
            if (resultP)
              return yield* (0, _async.waitFor)(resultP);
            let resolve2, reject;
            resultP = new Promise((res, rej) => {
              resolve2 = res, reject = rej;
            });
            try {
              return result = yield* fn(), resultP = null, resolve2(result), result;
            } catch (error) {
              throw reject(error), error;
            }
          };
        };
        var _async = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/gensync-utils/async.js");
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.DEFAULT_EXTENSIONS = void 0, Object.defineProperty(exports2, "File", { enumerable: true, get: function() {
          return _file.default;
        } }), exports2.OptionManager = void 0, exports2.Plugin = function(alias) {
          throw new Error(`The (${alias}) Babel 5 plugin is being run with an unsupported Babel version.`);
        }, Object.defineProperty(exports2, "buildExternalHelpers", { enumerable: true, get: function() {
          return _buildExternalHelpers.default;
        } }), Object.defineProperty(exports2, "createConfigItem", { enumerable: true, get: function() {
          return _config.createConfigItem;
        } }), Object.defineProperty(exports2, "createConfigItemAsync", { enumerable: true, get: function() {
          return _config.createConfigItemAsync;
        } }), Object.defineProperty(exports2, "createConfigItemSync", { enumerable: true, get: function() {
          return _config.createConfigItemSync;
        } }), Object.defineProperty(exports2, "getEnv", { enumerable: true, get: function() {
          return _environment.getEnv;
        } }), Object.defineProperty(exports2, "loadOptions", { enumerable: true, get: function() {
          return _config.loadOptions;
        } }), Object.defineProperty(exports2, "loadOptionsAsync", { enumerable: true, get: function() {
          return _config.loadOptionsAsync;
        } }), Object.defineProperty(exports2, "loadOptionsSync", { enumerable: true, get: function() {
          return _config.loadOptionsSync;
        } }), Object.defineProperty(exports2, "loadPartialConfig", { enumerable: true, get: function() {
          return _config.loadPartialConfig;
        } }), Object.defineProperty(exports2, "loadPartialConfigAsync", { enumerable: true, get: function() {
          return _config.loadPartialConfigAsync;
        } }), Object.defineProperty(exports2, "loadPartialConfigSync", { enumerable: true, get: function() {
          return _config.loadPartialConfigSync;
        } }), Object.defineProperty(exports2, "parse", { enumerable: true, get: function() {
          return _parse.parse;
        } }), Object.defineProperty(exports2, "parseAsync", { enumerable: true, get: function() {
          return _parse.parseAsync;
        } }), Object.defineProperty(exports2, "parseSync", { enumerable: true, get: function() {
          return _parse.parseSync;
        } }), Object.defineProperty(exports2, "resolvePlugin", { enumerable: true, get: function() {
          return _files.resolvePlugin;
        } }), Object.defineProperty(exports2, "resolvePreset", { enumerable: true, get: function() {
          return _files.resolvePreset;
        } }), Object.defineProperty(exports2, "template", { enumerable: true, get: function() {
          return _template().default;
        } }), Object.defineProperty(exports2, "tokTypes", { enumerable: true, get: function() {
          return _parser().tokTypes;
        } }), Object.defineProperty(exports2, "transform", { enumerable: true, get: function() {
          return _transform.transform;
        } }), Object.defineProperty(exports2, "transformAsync", { enumerable: true, get: function() {
          return _transform.transformAsync;
        } }), Object.defineProperty(exports2, "transformFile", { enumerable: true, get: function() {
          return _transformFile.transformFile;
        } }), Object.defineProperty(exports2, "transformFileAsync", { enumerable: true, get: function() {
          return _transformFile.transformFileAsync;
        } }), Object.defineProperty(exports2, "transformFileSync", { enumerable: true, get: function() {
          return _transformFile.transformFileSync;
        } }), Object.defineProperty(exports2, "transformFromAst", { enumerable: true, get: function() {
          return _transformAst.transformFromAst;
        } }), Object.defineProperty(exports2, "transformFromAstAsync", { enumerable: true, get: function() {
          return _transformAst.transformFromAstAsync;
        } }), Object.defineProperty(exports2, "transformFromAstSync", { enumerable: true, get: function() {
          return _transformAst.transformFromAstSync;
        } }), Object.defineProperty(exports2, "transformSync", { enumerable: true, get: function() {
          return _transform.transformSync;
        } }), Object.defineProperty(exports2, "traverse", { enumerable: true, get: function() {
          return _traverse().default;
        } }), exports2.version = exports2.types = void 0;
        var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/file/file.js"), _buildExternalHelpers = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/tools/build-external-helpers.js"), _files = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/files/index.js"), _environment = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/helpers/environment.js");
        function _types() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
          return _types = function() {
            return data2;
          }, data2;
        }
        function _parser() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.19.1/node_modules/@babel/parser/lib/index.js");
          return _parser = function() {
            return data2;
          }, data2;
        }
        function _traverse() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data2;
          }, data2;
        }
        function _template() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/index.js");
          return _template = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "types", { enumerable: true, get: function() {
          return _types();
        } });
        var _config = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/index.js"), _transform = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transform.js"), _transformFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transform-file.js"), _transformAst = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transform-ast.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/parse.js");
        exports2.version = "7.19.1";
        const DEFAULT_EXTENSIONS2 = Object.freeze([".js", ".jsx", ".es6", ".es", ".mjs", ".cjs"]);
        exports2.DEFAULT_EXTENSIONS = DEFAULT_EXTENSIONS2;
        exports2.OptionManager = class {
          init(opts) {
            return (0, _config.loadOptionsSync)(opts);
          }
        };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/parse.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.parse = void 0, exports2.parseAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.async)(...args);
        }, exports2.parseSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(...args);
        };
        var _config = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/index.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/parser/index.js"), _normalizeOpts = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/normalize-opts.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const parseRunner = _gensync()(function* (code, opts) {
          const config = yield* (0, _config.default)(opts);
          return null === config ? null : yield* (0, _parser.default)(config.passes, (0, _normalizeOpts.default)(config), code);
        });
        exports2.parse = function(code, opts, callback) {
          if ("function" == typeof opts && (callback = opts, opts = void 0), void 0 === callback)
            return (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.sync)(code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(parseRunner.errback)(code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/parser/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _parser() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.19.1/node_modules/@babel/parser/lib/index.js");
          return _parser = function() {
            return data2;
          }, data2;
        }
        function _codeFrame() {
          const data2 = __webpack_require__2("./stubs/babel_codeframe.js");
          return _codeFrame = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function* (pluginPasses, { parserOpts, highlightCode = true, filename = "unknown" }, code) {
          try {
            const results = [];
            for (const plugins of pluginPasses)
              for (const plugin of plugins) {
                const { parserOverride } = plugin;
                if (parserOverride) {
                  const ast = parserOverride(code, parserOpts, _parser().parse);
                  void 0 !== ast && results.push(ast);
                }
              }
            if (0 === results.length)
              return (0, _parser().parse)(code, parserOpts);
            if (1 === results.length) {
              if (yield* [], "function" == typeof results[0].then)
                throw new Error("You appear to be using an async parser plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
              return results[0];
            }
            throw new Error("More than one plugin attempted to override parsing.");
          } catch (err) {
            "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED" === err.code && (err.message += "\nConsider renaming the file to '.mjs', or setting sourceType:module or sourceType:unambiguous in your Babel config for this file.");
            const { loc, missingPlugin } = err;
            if (loc) {
              const codeFrame = (0, _codeFrame().codeFrameColumns)(code, { start: { line: loc.line, column: loc.column + 1 } }, { highlightCode });
              err.message = missingPlugin ? `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame) : `${filename}: ${err.message}

` + codeFrame, err.code = "BABEL_PARSE_ERROR";
            }
            throw err;
          }
        };
        var _missingPluginHelper = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js");
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/parser/util/missing-plugin-helper.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(missingPluginName, loc, codeFrame) {
          let helpMessage = `Support for the experimental syntax '${missingPluginName}' isn't currently enabled (${loc.line}:${loc.column + 1}):

` + codeFrame;
          const pluginInfo = pluginNameMap[missingPluginName];
          if (pluginInfo) {
            const { syntax: syntaxPlugin, transform: transformPlugin } = pluginInfo;
            if (syntaxPlugin) {
              const syntaxPluginInfo = getNameURLCombination(syntaxPlugin);
              if (transformPlugin) {
                const transformPluginInfo = getNameURLCombination(transformPlugin), sectionType = transformPlugin.name.startsWith("@babel/plugin") ? "plugins" : "presets";
                helpMessage += `

Add ${transformPluginInfo} to the '${sectionType}' section of your Babel config to enable transformation.
If you want to leave it as-is, add ${syntaxPluginInfo} to the 'plugins' section to enable parsing.`;
              } else
                helpMessage += `

Add ${syntaxPluginInfo} to the 'plugins' section of your Babel config to enable parsing.`;
            }
          }
          return helpMessage;
        };
        const pluginNameMap = { asyncDoExpressions: { syntax: { name: "@babel/plugin-syntax-async-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-do-expressions" } }, classProperties: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-proposal-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-class-properties" } }, classPrivateProperties: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-proposal-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-class-properties" } }, classPrivateMethods: { syntax: { name: "@babel/plugin-syntax-class-properties", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-class-properties" }, transform: { name: "@babel/plugin-proposal-private-methods", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-private-methods" } }, classStaticBlock: { syntax: { name: "@babel/plugin-syntax-class-static-block", url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-syntax-class-static-block" }, transform: { name: "@babel/plugin-proposal-class-static-block", url: "https://github.com/babel/babel/tree/HEAD/packages/babel-plugin-proposal-class-static-block" } }, decimal: { syntax: { name: "@babel/plugin-syntax-decimal", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decimal" } }, decorators: { syntax: { name: "@babel/plugin-syntax-decorators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-decorators" }, transform: { name: "@babel/plugin-proposal-decorators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-decorators" } }, doExpressions: { syntax: { name: "@babel/plugin-syntax-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-do-expressions" }, transform: { name: "@babel/plugin-proposal-do-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-do-expressions" } }, dynamicImport: { syntax: { name: "@babel/plugin-syntax-dynamic-import", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-dynamic-import" } }, exportDefaultFrom: { syntax: { name: "@babel/plugin-syntax-export-default-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-default-from" }, transform: { name: "@babel/plugin-proposal-export-default-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-default-from" } }, exportNamespaceFrom: { syntax: { name: "@babel/plugin-syntax-export-namespace-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-export-namespace-from" }, transform: { name: "@babel/plugin-proposal-export-namespace-from", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-export-namespace-from" } }, flow: { syntax: { name: "@babel/plugin-syntax-flow", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-flow" }, transform: { name: "@babel/preset-flow", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-flow" } }, functionBind: { syntax: { name: "@babel/plugin-syntax-function-bind", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-bind" }, transform: { name: "@babel/plugin-proposal-function-bind", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-bind" } }, functionSent: { syntax: { name: "@babel/plugin-syntax-function-sent", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-function-sent" }, transform: { name: "@babel/plugin-proposal-function-sent", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-function-sent" } }, importMeta: { syntax: { name: "@babel/plugin-syntax-import-meta", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-meta" } }, jsx: { syntax: { name: "@babel/plugin-syntax-jsx", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-jsx" }, transform: { name: "@babel/preset-react", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-react" } }, importAssertions: { syntax: { name: "@babel/plugin-syntax-import-assertions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-import-assertions" } }, moduleStringNames: { syntax: { name: "@babel/plugin-syntax-module-string-names", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-module-string-names" } }, numericSeparator: { syntax: { name: "@babel/plugin-syntax-numeric-separator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-numeric-separator" }, transform: { name: "@babel/plugin-proposal-numeric-separator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-numeric-separator" } }, optionalChaining: { syntax: { name: "@babel/plugin-syntax-optional-chaining", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-chaining" }, transform: { name: "@babel/plugin-proposal-optional-chaining", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-optional-chaining" } }, pipelineOperator: { syntax: { name: "@babel/plugin-syntax-pipeline-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-pipeline-operator" }, transform: { name: "@babel/plugin-proposal-pipeline-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-pipeline-operator" } }, privateIn: { syntax: { name: "@babel/plugin-syntax-private-property-in-object", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-private-property-in-object" }, transform: { name: "@babel/plugin-proposal-private-property-in-object", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-private-property-in-object" } }, recordAndTuple: { syntax: { name: "@babel/plugin-syntax-record-and-tuple", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-record-and-tuple" } }, regexpUnicodeSets: { syntax: { name: "@babel/plugin-syntax-unicode-sets-regex", url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-syntax-unicode-sets-regex/README.md" }, transform: { name: "@babel/plugin-proposal-unicode-sets-regex", url: "https://github.com/babel/babel/blob/main/packages/babel-plugin-proposalunicode-sets-regex/README.md" } }, throwExpressions: { syntax: { name: "@babel/plugin-syntax-throw-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-throw-expressions" }, transform: { name: "@babel/plugin-proposal-throw-expressions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-throw-expressions" } }, typescript: { syntax: { name: "@babel/plugin-syntax-typescript", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-typescript" }, transform: { name: "@babel/preset-typescript", url: "https://github.com/babel/babel/tree/main/packages/babel-preset-typescript" } }, asyncGenerators: { syntax: { name: "@babel/plugin-syntax-async-generators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-async-generators" }, transform: { name: "@babel/plugin-proposal-async-generator-functions", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-async-generator-functions" } }, logicalAssignment: { syntax: { name: "@babel/plugin-syntax-logical-assignment-operators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-logical-assignment-operators" }, transform: { name: "@babel/plugin-proposal-logical-assignment-operators", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-logical-assignment-operators" } }, nullishCoalescingOperator: { syntax: { name: "@babel/plugin-syntax-nullish-coalescing-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-nullish-coalescing-operator" }, transform: { name: "@babel/plugin-proposal-nullish-coalescing-operator", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-transform-nullish-coalescing-opearator" } }, objectRestSpread: { syntax: { name: "@babel/plugin-syntax-object-rest-spread", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-object-rest-spread" }, transform: { name: "@babel/plugin-proposal-object-rest-spread", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-object-rest-spread" } }, optionalCatchBinding: { syntax: { name: "@babel/plugin-syntax-optional-catch-binding", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-syntax-optional-catch-binding" }, transform: { name: "@babel/plugin-proposal-optional-catch-binding", url: "https://github.com/babel/babel/tree/main/packages/babel-plugin-proposal-optional-catch-binding" } } };
        pluginNameMap.privateIn.syntax = pluginNameMap.privateIn.transform;
        const getNameURLCombination = ({ name, url }) => `${name} (${url})`;
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/tools/build-external-helpers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function helpers() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.19.0/node_modules/@babel/helpers/lib/index.js");
          return helpers = function() {
            return data2;
          }, data2;
        }
        function _generator() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/index.js");
          return _generator = function() {
            return data2;
          }, data2;
        }
        function _template() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/index.js");
          return _template = function() {
            return data2;
          }, data2;
        }
        function _t() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(allowlist, outputType = "global") {
          let tree;
          const build2 = { global: buildGlobal, module: buildModule, umd: buildUmd, var: buildVar }[outputType];
          if (!build2)
            throw new Error(`Unsupported output type ${outputType}`);
          tree = build2(allowlist);
          return (0, _generator().default)(tree).code;
        };
        var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/file/file.js");
        const { arrayExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, cloneNode, conditionalExpression, exportNamedDeclaration, exportSpecifier, expressionStatement, functionExpression, identifier, memberExpression, objectExpression, program, stringLiteral, unaryExpression, variableDeclaration, variableDeclarator } = _t();
        function buildGlobal(allowlist) {
          const namespace = identifier("babelHelpers"), body = [], container = functionExpression(null, [identifier("global")], blockStatement(body)), tree = program([expressionStatement(callExpression(container, [conditionalExpression(binaryExpression("===", unaryExpression("typeof", identifier("global")), stringLiteral("undefined")), identifier("self"), identifier("global"))]))]);
          return body.push(variableDeclaration("var", [variableDeclarator(namespace, assignmentExpression("=", memberExpression(identifier("global"), namespace), objectExpression([])))])), buildHelpers(body, namespace, allowlist), tree;
        }
        function buildModule(allowlist) {
          const body = [], refs = buildHelpers(body, null, allowlist);
          return body.unshift(exportNamedDeclaration(null, Object.keys(refs).map((name) => exportSpecifier(cloneNode(refs[name]), identifier(name))))), program(body, [], "module");
        }
        function buildUmd(allowlist) {
          const namespace = identifier("babelHelpers"), body = [];
          return body.push(variableDeclaration("var", [variableDeclarator(namespace, identifier("global"))])), buildHelpers(body, namespace, allowlist), program([(replacements = { FACTORY_PARAMETERS: identifier("global"), BROWSER_ARGUMENTS: assignmentExpression("=", memberExpression(identifier("root"), namespace), objectExpression([])), COMMON_ARGUMENTS: identifier("exports"), AMD_ARGUMENTS: arrayExpression([stringLiteral("exports")]), FACTORY_BODY: body, UMD_ROOT: identifier("this") }, _template().default.statement`
    (function (root, factory) {
      if (typeof define === "function" && define.amd) {
        define(AMD_ARGUMENTS, factory);
      } else if (typeof exports === "object") {
        factory(COMMON_ARGUMENTS);
      } else {
        factory(BROWSER_ARGUMENTS);
      }
    })(UMD_ROOT, function (FACTORY_PARAMETERS) {
      FACTORY_BODY
    });
  `(replacements))]);
          var replacements;
        }
        function buildVar(allowlist) {
          const namespace = identifier("babelHelpers"), body = [];
          body.push(variableDeclaration("var", [variableDeclarator(namespace, objectExpression([]))]));
          const tree = program(body);
          return buildHelpers(body, namespace, allowlist), body.push(expressionStatement(namespace)), tree;
        }
        function buildHelpers(body, namespace, allowlist) {
          const getHelperReference = (name) => namespace ? memberExpression(namespace, identifier(name)) : identifier(`_${name}`), refs = {};
          return helpers().list.forEach(function(name) {
            if (allowlist && allowlist.indexOf(name) < 0)
              return;
            const ref2 = refs[name] = getHelperReference(name);
            helpers().ensure(name, _file.default);
            const { nodes } = helpers().get(name, getHelperReference, ref2);
            body.push(...nodes);
          }), refs;
        }
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transform-ast.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transformFromAst = void 0, exports2.transformFromAstAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.async)(...args);
        }, exports2.transformFromAstSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(...args);
        };
        var _config = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/index.js"), _transformation = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/index.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const transformFromAstRunner = _gensync()(function* (ast, code, opts) {
          const config = yield* (0, _config.default)(opts);
          if (null === config)
            return null;
          if (!ast)
            throw new Error("No AST given");
          return yield* (0, _transformation.run)(config, code, ast);
        });
        exports2.transformFromAst = function(ast, code, optsOrCallback, maybeCallback) {
          let opts, callback;
          if ("function" == typeof optsOrCallback ? (callback = optsOrCallback, opts = void 0) : (opts = optsOrCallback, callback = maybeCallback), void 0 === callback)
            return (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.sync)(ast, code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(transformFromAstRunner.errback)(ast, code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transform-file.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transformFile = function(...args) {
          return transformFileRunner.errback(...args);
        }, exports2.transformFileAsync = function(...args) {
          return transformFileRunner.async(...args);
        }, exports2.transformFileSync = function(...args) {
          return transformFileRunner.sync(...args);
        };
        var _config = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/index.js"), _transformation = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/index.js"), fs4 = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/gensync-utils/fs.js");
        const transformFileRunner = _gensync()(function* (filename, opts) {
          const options = Object.assign({}, opts, { filename }), config = yield* (0, _config.default)(options);
          if (null === config)
            return null;
          const code = yield* fs4.readFile(filename, "utf8");
          return yield* (0, _transformation.run)(config, code);
        });
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transform.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _gensync() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/gensync@1.0.0-beta.2/node_modules/gensync/index.js");
          return _gensync = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.transform = void 0, exports2.transformAsync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.async)(...args);
        }, exports2.transformSync = function(...args) {
          return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(...args);
        };
        var _config = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/index.js"), _transformation = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/index.js"), _rewriteStackTrace = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/errors/rewrite-stack-trace.js");
        const transformRunner = _gensync()(function* (code, opts) {
          const config = yield* (0, _config.default)(opts);
          return null === config ? null : yield* (0, _transformation.run)(config, code);
        });
        exports2.transform = function(code, optsOrCallback, maybeCallback) {
          let opts, callback;
          if ("function" == typeof optsOrCallback ? (callback = optsOrCallback, opts = void 0) : (opts = optsOrCallback, callback = maybeCallback), void 0 === callback)
            return (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.sync)(code, opts);
          (0, _rewriteStackTrace.beginHiddenCallStack)(transformRunner.errback)(code, opts, callback);
        };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _traverse() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function() {
          LOADED_PLUGIN || (LOADED_PLUGIN = new _plugin.default(Object.assign({}, blockHoistPlugin, { visitor: _traverse().default.explode(blockHoistPlugin.visitor) }), {}));
          return LOADED_PLUGIN;
        };
        var _plugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/plugin.js");
        let LOADED_PLUGIN;
        function priority(bodyNode) {
          const priority2 = null == bodyNode ? void 0 : bodyNode._blockHoist;
          return null == priority2 ? 1 : true === priority2 ? 2 : priority2;
        }
        const blockHoistPlugin = { name: "internal.blockHoist", visitor: { Block: { exit({ node }) {
          const { body } = node;
          let max = Math.pow(2, 30) - 1, hasChange = false;
          for (let i = 0; i < body.length; i++) {
            const p = priority(body[i]);
            if (p > max) {
              hasChange = true;
              break;
            }
            max = p;
          }
          hasChange && (node.body = function(body2) {
            const buckets = /* @__PURE__ */ Object.create(null);
            for (let i = 0; i < body2.length; i++) {
              const n = body2[i], p = priority(n);
              (buckets[p] || (buckets[p] = [])).push(n);
            }
            const keys = Object.keys(buckets).map((k) => +k).sort((a, b) => b - a);
            let index2 = 0;
            for (const key of keys) {
              const bucket = buckets[key];
              for (const n of bucket)
                body2[index2++] = n;
            }
            return body2;
          }(body.slice()));
        } } } };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/file/file.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function helpers() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.19.0/node_modules/@babel/helpers/lib/index.js");
          return helpers = function() {
            return data2;
          }, data2;
        }
        function _traverse() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data2;
          }, data2;
        }
        function _codeFrame() {
          const data2 = __webpack_require__2("./stubs/babel_codeframe.js");
          return _codeFrame = function() {
            return data2;
          }, data2;
        }
        function _t() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data2;
          }, data2;
        }
        function _helperModuleTransforms() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.19.0/node_modules/@babel/helper-module-transforms/lib/index.js");
          return _helperModuleTransforms = function() {
            return data2;
          }, data2;
        }
        function _semver() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/semver@6.3.0/node_modules/semver/semver.js");
          return _semver = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        const { cloneNode, interpreterDirective } = _t(), errorVisitor = { enter(path3, state) {
          const loc = path3.node.loc;
          loc && (state.loc = loc, path3.stop());
        } };
        class File {
          constructor(options, { code, ast, inputMap }) {
            this._map = /* @__PURE__ */ new Map(), this.opts = void 0, this.declarations = {}, this.path = void 0, this.ast = void 0, this.scope = void 0, this.metadata = {}, this.code = "", this.inputMap = void 0, this.hub = { file: this, getCode: () => this.code, getScope: () => this.scope, addHelper: this.addHelper.bind(this), buildError: this.buildCodeFrameError.bind(this) }, this.opts = options, this.code = code, this.ast = ast, this.inputMap = inputMap, this.path = _traverse().NodePath.get({ hub: this.hub, parentPath: null, parent: this.ast, container: this.ast, key: "program" }).setContext(), this.scope = this.path.scope;
          }
          get shebang() {
            const { interpreter } = this.path.node;
            return interpreter ? interpreter.value : "";
          }
          set shebang(value) {
            value ? this.path.get("interpreter").replaceWith(interpreterDirective(value)) : this.path.get("interpreter").remove();
          }
          set(key, val) {
            if ("helpersNamespace" === key)
              throw new Error("Babel 7.0.0-beta.56 has dropped support for the 'helpersNamespace' utility.If you are using @babel/plugin-external-helpers you will need to use a newer version than the one you currently have installed. If you have your own implementation, you'll want to explore using 'helperGenerator' alongside 'file.availableHelper()'.");
            this._map.set(key, val);
          }
          get(key) {
            return this._map.get(key);
          }
          has(key) {
            return this._map.has(key);
          }
          getModuleName() {
            return (0, _helperModuleTransforms().getModuleName)(this.opts, this.opts);
          }
          addImport() {
            throw new Error("This API has been removed. If you're looking for this functionality in Babel 7, you should import the '@babel/helper-module-imports' module and use the functions exposed  from that module, such as 'addNamed' or 'addDefault'.");
          }
          availableHelper(name, versionRange) {
            let minVersion;
            try {
              minVersion = helpers().minVersion(name);
            } catch (err) {
              if ("BABEL_HELPER_UNKNOWN" !== err.code)
                throw err;
              return false;
            }
            return "string" != typeof versionRange || (_semver().valid(versionRange) && (versionRange = `^${versionRange}`), !_semver().intersects(`<${minVersion}`, versionRange) && !_semver().intersects(">=8.0.0", versionRange));
          }
          addHelper(name) {
            const declar = this.declarations[name];
            if (declar)
              return cloneNode(declar);
            const generator = this.get("helperGenerator");
            if (generator) {
              const res = generator(name);
              if (res)
                return res;
            }
            helpers().ensure(name, File);
            const uid = this.declarations[name] = this.scope.generateUidIdentifier(name), dependencies = {};
            for (const dep of helpers().getDependencies(name))
              dependencies[dep] = this.addHelper(dep);
            const { nodes, globals } = helpers().get(name, (dep) => dependencies[dep], uid, Object.keys(this.scope.getAllBindings()));
            return globals.forEach((name2) => {
              this.path.scope.hasBinding(name2, true) && this.path.scope.rename(name2);
            }), nodes.forEach((node) => {
              node._compact = true;
            }), this.path.unshiftContainer("body", nodes), this.path.get("body").forEach((path3) => {
              -1 !== nodes.indexOf(path3.node) && path3.isVariableDeclaration() && this.scope.registerDeclaration(path3);
            }), uid;
          }
          addTemplateObject() {
            throw new Error("This function has been moved into the template literal transform itself.");
          }
          buildCodeFrameError(node, msg, _Error = SyntaxError) {
            let loc = node && (node.loc || node._loc);
            if (!loc && node) {
              const state = { loc: null };
              (0, _traverse().default)(node, errorVisitor, this.scope, state), loc = state.loc;
              let txt = "This is an error on an internal node. Probably an internal error.";
              loc && (txt += " Location has been estimated."), msg += ` (${txt})`;
            }
            if (loc) {
              const { highlightCode = true } = this.opts;
              msg += "\n" + (0, _codeFrame().codeFrameColumns)(this.code, { start: { line: loc.start.line, column: loc.start.column + 1 }, end: loc.end && loc.start.line === loc.end.line ? { line: loc.end.line, column: loc.end.column + 1 } : void 0 }, { highlightCode });
            }
            return new _Error(msg);
          }
        }
        exports2.default = File;
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/file/generate.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _convertSourceMap() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/convert-source-map@1.8.0/node_modules/convert-source-map/index.js");
          return _convertSourceMap = function() {
            return data2;
          }, data2;
        }
        function _generator() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/index.js");
          return _generator = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(pluginPasses, file) {
          const { opts, ast, code, inputMap } = file, { generatorOpts } = opts, results = [];
          for (const plugins of pluginPasses)
            for (const plugin of plugins) {
              const { generatorOverride } = plugin;
              if (generatorOverride) {
                const result2 = generatorOverride(ast, generatorOpts, code, _generator().default);
                void 0 !== result2 && results.push(result2);
              }
            }
          let result;
          if (0 === results.length)
            result = (0, _generator().default)(ast, generatorOpts, code);
          else {
            if (1 !== results.length)
              throw new Error("More than one plugin attempted to override codegen.");
            if (result = results[0], "function" == typeof result.then)
              throw new Error("You appear to be using an async codegen plugin, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
          }
          let { code: outputCode, decodedMap: outputMap = result.map } = result;
          outputMap && (outputMap = inputMap ? (0, _mergeMap.default)(inputMap.toObject(), outputMap, generatorOpts.sourceFileName) : result.map);
          "inline" !== opts.sourceMaps && "both" !== opts.sourceMaps || (outputCode += "\n" + _convertSourceMap().fromObject(outputMap).toComment());
          "inline" === opts.sourceMaps && (outputMap = null);
          return { outputCode, outputMap };
        };
        var _mergeMap = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/file/merge-map.js");
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/file/merge-map.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _remapping() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@ampproject+remapping@2.2.0/node_modules/@ampproject/remapping/dist/remapping.mjs");
          return _remapping = function() {
            return data2;
          }, data2;
        }
        function rootless(map) {
          return Object.assign({}, map, { sourceRoot: null });
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(inputMap, map, sourceFileName) {
          const source = sourceFileName.replace(/\\/g, "/");
          let found = false;
          const result = _remapping()(rootless(map), (s, ctx) => s !== source || found ? null : (found = true, ctx.source = "", rootless(inputMap)));
          "string" == typeof inputMap.sourceRoot && (result.sourceRoot = inputMap.sourceRoot);
          return Object.assign({}, result);
        };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _traverse() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/index.js");
          return _traverse = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.run = function* (config, code, ast) {
          const file = yield* (0, _normalizeFile.default)(config.passes, (0, _normalizeOpts.default)(config), code, ast), opts = file.opts;
          try {
            yield* function* (file2, pluginPasses) {
              for (const pluginPairs of pluginPasses) {
                const passPairs = [], passes = [], visitors = [];
                for (const plugin of pluginPairs.concat([(0, _blockHoistPlugin.default)()])) {
                  const pass = new _pluginPass.default(file2, plugin.key, plugin.options);
                  passPairs.push([plugin, pass]), passes.push(pass), visitors.push(plugin.visitor);
                }
                for (const [plugin, pass] of passPairs) {
                  const fn = plugin.pre;
                  if (fn) {
                    const result = fn.call(pass, file2);
                    if (yield* [], isThenable(result))
                      throw new Error("You appear to be using an plugin with an async .pre, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
                  }
                }
                const visitor = _traverse().default.visitors.merge(visitors, passes, file2.opts.wrapPluginVisitorMethod);
                (0, _traverse().default)(file2.ast, visitor, file2.scope);
                for (const [plugin, pass] of passPairs) {
                  const fn = plugin.post;
                  if (fn) {
                    const result = fn.call(pass, file2);
                    if (yield* [], isThenable(result))
                      throw new Error("You appear to be using an plugin with an async .post, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
                  }
                }
              }
            }(file, config.passes);
          } catch (e) {
            var _opts$filename;
            throw e.message = `${null != (_opts$filename = opts.filename) ? _opts$filename : "unknown file"}: ${e.message}`, e.code || (e.code = "BABEL_TRANSFORM_ERROR"), e;
          }
          let outputCode, outputMap;
          try {
            false !== opts.code && ({ outputCode, outputMap } = (0, _generate.default)(config.passes, file));
          } catch (e) {
            var _opts$filename2;
            throw e.message = `${null != (_opts$filename2 = opts.filename) ? _opts$filename2 : "unknown file"}: ${e.message}`, e.code || (e.code = "BABEL_GENERATE_ERROR"), e;
          }
          return { metadata: file.metadata, options: opts, ast: true === opts.ast ? file.ast : null, code: void 0 === outputCode ? null : outputCode, map: void 0 === outputMap ? null : outputMap, sourceType: file.ast.program.sourceType, externalDependencies: (0, _deepArray.flattenToSet)(config.externalDependencies) };
        };
        var _pluginPass = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/plugin-pass.js"), _blockHoistPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/block-hoist-plugin.js"), _normalizeOpts = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/normalize-opts.js"), _normalizeFile = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/normalize-file.js"), _generate = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/file/generate.js"), _deepArray = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/config/helpers/deep-array.js");
        function isThenable(val) {
          return !(!val || "object" != typeof val && "function" != typeof val || !val.then || "function" != typeof val.then);
        }
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/normalize-file.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _fs() {
          const data2 = __webpack_require__2("fs");
          return _fs = function() {
            return data2;
          }, data2;
        }
        function _path() {
          const data2 = __webpack_require__2("path");
          return _path = function() {
            return data2;
          }, data2;
        }
        function _debug() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js");
          return _debug = function() {
            return data2;
          }, data2;
        }
        function _t() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
          return _t = function() {
            return data2;
          }, data2;
        }
        function _convertSourceMap() {
          const data2 = __webpack_require__2("./node_modules/.pnpm/convert-source-map@1.8.0/node_modules/convert-source-map/index.js");
          return _convertSourceMap = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function* (pluginPasses, options, code, ast) {
          if (code = `${code || ""}`, ast) {
            if ("Program" === ast.type)
              ast = file(ast, [], []);
            else if ("File" !== ast.type)
              throw new Error("AST root must be a Program or File node");
            options.cloneInputAst && (ast = (0, _cloneDeep.default)(ast));
          } else
            ast = yield* (0, _parser.default)(pluginPasses, options, code);
          let inputMap = null;
          if (false !== options.inputSourceMap) {
            if ("object" == typeof options.inputSourceMap && (inputMap = _convertSourceMap().fromObject(options.inputSourceMap)), !inputMap) {
              const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);
              if (lastComment)
                try {
                  inputMap = _convertSourceMap().fromComment(lastComment);
                } catch (err) {
                  debug("discarding unknown inline input sourcemap", err);
                }
            }
            if (!inputMap) {
              const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);
              if ("string" == typeof options.filename && lastComment)
                try {
                  const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment), inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]));
                  inputMapContent.length > 3e6 ? debug("skip merging input map > 1 MB") : inputMap = _convertSourceMap().fromJSON(inputMapContent);
                } catch (err) {
                  debug("discarding unknown file input sourcemap", err);
                }
              else
                lastComment && debug("discarding un-loadable file input sourcemap");
            }
          }
          return new _file.default(options, { code, ast, inputMap });
        };
        var _file = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/file/file.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/parser/index.js"), _cloneDeep = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/util/clone-deep.js");
        const { file, traverseFast } = _t(), debug = _debug()("babel:transform:file");
        const INLINE_SOURCEMAP_REGEX = /^[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+?;)?base64,(?:.*)$/, EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \t]+sourceMappingURL=([^\s'"`]+)[ \t]*$/;
        function extractCommentsFromList(regex, comments, lastComment) {
          return comments && (comments = comments.filter(({ value }) => !regex.test(value) || (lastComment = value, false))), [comments, lastComment];
        }
        function extractComments(regex, ast) {
          let lastComment = null;
          return traverseFast(ast, (node) => {
            [node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment), [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment), [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);
          }), lastComment;
        }
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/normalize-opts.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _path() {
          const data2 = __webpack_require__2("path");
          return _path = function() {
            return data2;
          }, data2;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(config) {
          const { filename, cwd, filenameRelative = "string" == typeof filename ? _path().relative(cwd, filename) : "unknown", sourceType = "module", inputSourceMap, sourceMaps = !!inputSourceMap, sourceRoot = config.options.moduleRoot, sourceFileName = _path().basename(filenameRelative), comments = true, compact = "auto" } = config.options, opts = config.options, options = Object.assign({}, opts, { parserOpts: Object.assign({ sourceType: ".mjs" === _path().extname(filenameRelative) ? "module" : sourceType, sourceFileName: filename, plugins: [] }, opts.parserOpts), generatorOpts: Object.assign({ filename, auxiliaryCommentBefore: opts.auxiliaryCommentBefore, auxiliaryCommentAfter: opts.auxiliaryCommentAfter, retainLines: opts.retainLines, comments, shouldPrintComment: opts.shouldPrintComment, compact, minified: opts.minified, sourceMaps, sourceRoot, sourceFileName }, opts.generatorOpts) });
          for (const plugins of config.passes)
            for (const plugin of plugins)
              plugin.manipulateOptions && plugin.manipulateOptions(options, options.parserOpts);
          return options;
        };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/plugin-pass.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        class PluginPass {
          constructor(file, key, options) {
            this._map = /* @__PURE__ */ new Map(), this.key = void 0, this.file = void 0, this.opts = void 0, this.cwd = void 0, this.filename = void 0, this.key = key, this.file = file, this.opts = options || {}, this.cwd = file.opts.cwd, this.filename = file.opts.filename;
          }
          set(key, val) {
            this._map.set(key, val);
          }
          get(key) {
            return this._map.get(key);
          }
          availableHelper(name, versionRange) {
            return this.file.availableHelper(name, versionRange);
          }
          addHelper(name) {
            return this.file.addHelper(name);
          }
          addImport() {
            return this.file.addImport();
          }
          buildCodeFrameError(node, msg, _Error) {
            return this.file.buildCodeFrameError(node, msg, _Error);
          }
        }
        exports2.default = PluginPass, PluginPass.prototype.getModuleName = function() {
          return this.file.getModuleName();
        };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/transformation/util/clone-deep.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function deepClone(value, cache) {
          if (null !== value) {
            if (cache.has(value))
              return cache.get(value);
            let cloned;
            if (Array.isArray(value)) {
              cloned = new Array(value.length);
              for (let i = 0; i < value.length; i++)
                cloned[i] = "object" != typeof value[i] ? value[i] : deepClone(value[i], cache);
            } else {
              cloned = {};
              const keys = Object.keys(value);
              for (let i = 0; i < keys.length; i++) {
                const key = keys[i];
                cloned[key] = "object" != typeof value[key] ? value[key] : deepClone(value[key], cache);
              }
            }
            return cache.set(value, cloned), cloned;
          }
          return value;
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(value) {
          return "object" != typeof value ? value : deepClone(value, /* @__PURE__ */ new Map());
        };
      }, "./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/vendor/import-meta-resolve.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _url() {
          const data2 = __webpack_require__2("url");
          return _url = function() {
            return data2;
          }, data2;
        }
        function _fs() {
          const data2 = function(obj, nodeInterop) {
            if (!nodeInterop && obj && obj.__esModule)
              return obj;
            if (null === obj || "object" != typeof obj && "function" != typeof obj)
              return { default: obj };
            var cache = _getRequireWildcardCache(nodeInterop);
            if (cache && cache.has(obj))
              return cache.get(obj);
            var newObj = {}, hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
            for (var key in obj)
              if ("default" !== key && Object.prototype.hasOwnProperty.call(obj, key)) {
                var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
                desc && (desc.get || desc.set) ? Object.defineProperty(newObj, key, desc) : newObj[key] = obj[key];
              }
            newObj.default = obj, cache && cache.set(obj, newObj);
            return newObj;
          }(__webpack_require__2("fs"), true);
          return _fs = function() {
            return data2;
          }, data2;
        }
        function _path() {
          const data2 = __webpack_require__2("path");
          return _path = function() {
            return data2;
          }, data2;
        }
        function _assert() {
          const data2 = __webpack_require__2("assert");
          return _assert = function() {
            return data2;
          }, data2;
        }
        function _util() {
          const data2 = __webpack_require__2("util");
          return _util = function() {
            return data2;
          }, data2;
        }
        function _getRequireWildcardCache(nodeInterop) {
          if ("function" != typeof WeakMap)
            return null;
          var cacheBabelInterop = /* @__PURE__ */ new WeakMap(), cacheNodeInterop = /* @__PURE__ */ new WeakMap();
          return (_getRequireWildcardCache = function(nodeInterop2) {
            return nodeInterop2 ? cacheNodeInterop : cacheBabelInterop;
          })(nodeInterop);
        }
        function asyncGeneratorStep(gen, resolve2, reject, _next, _throw, key, arg) {
          try {
            var info = gen[key](arg), value = info.value;
          } catch (error) {
            return void reject(error);
          }
          info.done ? resolve2(value) : Promise.resolve(value).then(_next, _throw);
        }
        function _asyncToGenerator(fn) {
          return function() {
            var self2 = this, args = arguments;
            return new Promise(function(resolve2, reject) {
              var gen = fn.apply(self2, args);
              function _next(value) {
                asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "next", value);
              }
              function _throw(err) {
                asyncGeneratorStep(gen, resolve2, reject, _next, _throw, "throw", err);
              }
              _next(void 0);
            });
          };
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.moduleResolve = moduleResolve2, exports2.resolve = function(_x, _x2) {
          return _resolve2.apply(this, arguments);
        };
        var re$3 = { exports: {} };
        var constants = { SEMVER_SPEC_VERSION: "2.0.0", MAX_LENGTH: 256, MAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER || 9007199254740991, MAX_SAFE_COMPONENT_LENGTH: 16 };
        var debug_1 = "object" == typeof process && process.env && process.env.NODE_DEBUG && /\bsemver\b/i.test(process.env.NODE_DEBUG) ? (...args) => console.error("SEMVER", ...args) : () => {
        };
        !function(module2, exports3) {
          const { MAX_SAFE_COMPONENT_LENGTH } = constants, debug2 = debug_1, re2 = (exports3 = module2.exports = {}).re = [], src = exports3.src = [], t2 = exports3.t = {};
          let R = 0;
          const createToken = (name, value, isGlobal) => {
            const index2 = R++;
            debug2(name, index2, value), t2[name] = index2, src[index2] = value, re2[index2] = new RegExp(value, isGlobal ? "g" : void 0);
          };
          createToken("NUMERICIDENTIFIER", "0|[1-9]\\d*"), createToken("NUMERICIDENTIFIERLOOSE", "[0-9]+"), createToken("NONNUMERICIDENTIFIER", "\\d*[a-zA-Z-][a-zA-Z0-9-]*"), createToken("MAINVERSION", `(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})\\.(${src[t2.NUMERICIDENTIFIER]})`), createToken("MAINVERSIONLOOSE", `(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})\\.(${src[t2.NUMERICIDENTIFIERLOOSE]})`), createToken("PRERELEASEIDENTIFIER", `(?:${src[t2.NUMERICIDENTIFIER]}|${src[t2.NONNUMERICIDENTIFIER]})`), createToken("PRERELEASEIDENTIFIERLOOSE", `(?:${src[t2.NUMERICIDENTIFIERLOOSE]}|${src[t2.NONNUMERICIDENTIFIER]})`), createToken("PRERELEASE", `(?:-(${src[t2.PRERELEASEIDENTIFIER]}(?:\\.${src[t2.PRERELEASEIDENTIFIER]})*))`), createToken("PRERELEASELOOSE", `(?:-?(${src[t2.PRERELEASEIDENTIFIERLOOSE]}(?:\\.${src[t2.PRERELEASEIDENTIFIERLOOSE]})*))`), createToken("BUILDIDENTIFIER", "[0-9A-Za-z-]+"), createToken("BUILD", `(?:\\+(${src[t2.BUILDIDENTIFIER]}(?:\\.${src[t2.BUILDIDENTIFIER]})*))`), createToken("FULLPLAIN", `v?${src[t2.MAINVERSION]}${src[t2.PRERELEASE]}?${src[t2.BUILD]}?`), createToken("FULL", `^${src[t2.FULLPLAIN]}$`), createToken("LOOSEPLAIN", `[v=\\s]*${src[t2.MAINVERSIONLOOSE]}${src[t2.PRERELEASELOOSE]}?${src[t2.BUILD]}?`), createToken("LOOSE", `^${src[t2.LOOSEPLAIN]}$`), createToken("GTLT", "((?:<|>)?=?)"), createToken("XRANGEIDENTIFIERLOOSE", `${src[t2.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`), createToken("XRANGEIDENTIFIER", `${src[t2.NUMERICIDENTIFIER]}|x|X|\\*`), createToken("XRANGEPLAIN", `[v=\\s]*(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:\\.(${src[t2.XRANGEIDENTIFIER]})(?:${src[t2.PRERELEASE]})?${src[t2.BUILD]}?)?)?`), createToken("XRANGEPLAINLOOSE", `[v=\\s]*(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:\\.(${src[t2.XRANGEIDENTIFIERLOOSE]})(?:${src[t2.PRERELEASELOOSE]})?${src[t2.BUILD]}?)?)?`), createToken("XRANGE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAIN]}$`), createToken("XRANGELOOSE", `^${src[t2.GTLT]}\\s*${src[t2.XRANGEPLAINLOOSE]}$`), createToken("COERCE", `(^|[^\\d])(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}})(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?(?:$|[^\\d])`), createToken("COERCERTL", src[t2.COERCE], true), createToken("LONETILDE", "(?:~>?)"), createToken("TILDETRIM", `(\\s*)${src[t2.LONETILDE]}\\s+`, true), exports3.tildeTrimReplace = "$1~", createToken("TILDE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAIN]}$`), createToken("TILDELOOSE", `^${src[t2.LONETILDE]}${src[t2.XRANGEPLAINLOOSE]}$`), createToken("LONECARET", "(?:\\^)"), createToken("CARETTRIM", `(\\s*)${src[t2.LONECARET]}\\s+`, true), exports3.caretTrimReplace = "$1^", createToken("CARET", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAIN]}$`), createToken("CARETLOOSE", `^${src[t2.LONECARET]}${src[t2.XRANGEPLAINLOOSE]}$`), createToken("COMPARATORLOOSE", `^${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]})$|^$`), createToken("COMPARATOR", `^${src[t2.GTLT]}\\s*(${src[t2.FULLPLAIN]})$|^$`), createToken("COMPARATORTRIM", `(\\s*)${src[t2.GTLT]}\\s*(${src[t2.LOOSEPLAIN]}|${src[t2.XRANGEPLAIN]})`, true), exports3.comparatorTrimReplace = "$1$2$3", createToken("HYPHENRANGE", `^\\s*(${src[t2.XRANGEPLAIN]})\\s+-\\s+(${src[t2.XRANGEPLAIN]})\\s*$`), createToken("HYPHENRANGELOOSE", `^\\s*(${src[t2.XRANGEPLAINLOOSE]})\\s+-\\s+(${src[t2.XRANGEPLAINLOOSE]})\\s*$`), createToken("STAR", "(<|>)?=?\\s*\\*"), createToken("GTE0", "^\\s*>=\\s*0\\.0\\.0\\s*$"), createToken("GTE0PRE", "^\\s*>=\\s*0\\.0\\.0-0\\s*$");
        }(re$3, re$3.exports);
        const opts = ["includePrerelease", "loose", "rtl"];
        var parseOptions_1 = (options) => options ? "object" != typeof options ? { loose: true } : opts.filter((k) => options[k]).reduce((o, k) => (o[k] = true, o), {}) : {};
        const numeric = /^[0-9]+$/, compareIdentifiers$1 = (a, b) => {
          const anum = numeric.test(a), bnum = numeric.test(b);
          return anum && bnum && (a = +a, b = +b), a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;
        };
        var identifiers = { compareIdentifiers: compareIdentifiers$1, rcompareIdentifiers: (a, b) => compareIdentifiers$1(b, a) };
        const debug = debug_1, { MAX_LENGTH: MAX_LENGTH$1, MAX_SAFE_INTEGER } = constants, { re: re$2, t: t$2 } = re$3.exports, parseOptions$1 = parseOptions_1, { compareIdentifiers } = identifiers;
        class SemVer$c {
          constructor(version2, options) {
            if (options = parseOptions$1(options), version2 instanceof SemVer$c) {
              if (version2.loose === !!options.loose && version2.includePrerelease === !!options.includePrerelease)
                return version2;
              version2 = version2.version;
            } else if ("string" != typeof version2)
              throw new TypeError(`Invalid Version: ${version2}`);
            if (version2.length > MAX_LENGTH$1)
              throw new TypeError(`version is longer than ${MAX_LENGTH$1} characters`);
            debug("SemVer", version2, options), this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease;
            const m = version2.trim().match(options.loose ? re$2[t$2.LOOSE] : re$2[t$2.FULL]);
            if (!m)
              throw new TypeError(`Invalid Version: ${version2}`);
            if (this.raw = version2, this.major = +m[1], this.minor = +m[2], this.patch = +m[3], this.major > MAX_SAFE_INTEGER || this.major < 0)
              throw new TypeError("Invalid major version");
            if (this.minor > MAX_SAFE_INTEGER || this.minor < 0)
              throw new TypeError("Invalid minor version");
            if (this.patch > MAX_SAFE_INTEGER || this.patch < 0)
              throw new TypeError("Invalid patch version");
            m[4] ? this.prerelease = m[4].split(".").map((id) => {
              if (/^[0-9]+$/.test(id)) {
                const num = +id;
                if (num >= 0 && num < MAX_SAFE_INTEGER)
                  return num;
              }
              return id;
            }) : this.prerelease = [], this.build = m[5] ? m[5].split(".") : [], this.format();
          }
          format() {
            return this.version = `${this.major}.${this.minor}.${this.patch}`, this.prerelease.length && (this.version += `-${this.prerelease.join(".")}`), this.version;
          }
          toString() {
            return this.version;
          }
          compare(other) {
            if (debug("SemVer.compare", this.version, this.options, other), !(other instanceof SemVer$c)) {
              if ("string" == typeof other && other === this.version)
                return 0;
              other = new SemVer$c(other, this.options);
            }
            return other.version === this.version ? 0 : this.compareMain(other) || this.comparePre(other);
          }
          compareMain(other) {
            return other instanceof SemVer$c || (other = new SemVer$c(other, this.options)), compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);
          }
          comparePre(other) {
            if (other instanceof SemVer$c || (other = new SemVer$c(other, this.options)), this.prerelease.length && !other.prerelease.length)
              return -1;
            if (!this.prerelease.length && other.prerelease.length)
              return 1;
            if (!this.prerelease.length && !other.prerelease.length)
              return 0;
            let i = 0;
            do {
              const a = this.prerelease[i], b = other.prerelease[i];
              if (debug("prerelease compare", i, a, b), void 0 === a && void 0 === b)
                return 0;
              if (void 0 === b)
                return 1;
              if (void 0 === a)
                return -1;
              if (a !== b)
                return compareIdentifiers(a, b);
            } while (++i);
          }
          compareBuild(other) {
            other instanceof SemVer$c || (other = new SemVer$c(other, this.options));
            let i = 0;
            do {
              const a = this.build[i], b = other.build[i];
              if (debug("prerelease compare", i, a, b), void 0 === a && void 0 === b)
                return 0;
              if (void 0 === b)
                return 1;
              if (void 0 === a)
                return -1;
              if (a !== b)
                return compareIdentifiers(a, b);
            } while (++i);
          }
          inc(release, identifier) {
            switch (release) {
              case "premajor":
                this.prerelease.length = 0, this.patch = 0, this.minor = 0, this.major++, this.inc("pre", identifier);
                break;
              case "preminor":
                this.prerelease.length = 0, this.patch = 0, this.minor++, this.inc("pre", identifier);
                break;
              case "prepatch":
                this.prerelease.length = 0, this.inc("patch", identifier), this.inc("pre", identifier);
                break;
              case "prerelease":
                0 === this.prerelease.length && this.inc("patch", identifier), this.inc("pre", identifier);
                break;
              case "major":
                0 === this.minor && 0 === this.patch && 0 !== this.prerelease.length || this.major++, this.minor = 0, this.patch = 0, this.prerelease = [];
                break;
              case "minor":
                0 === this.patch && 0 !== this.prerelease.length || this.minor++, this.patch = 0, this.prerelease = [];
                break;
              case "patch":
                0 === this.prerelease.length && this.patch++, this.prerelease = [];
                break;
              case "pre":
                if (0 === this.prerelease.length)
                  this.prerelease = [0];
                else {
                  let i = this.prerelease.length;
                  for (; --i >= 0; )
                    "number" == typeof this.prerelease[i] && (this.prerelease[i]++, i = -2);
                  -1 === i && this.prerelease.push(0);
                }
                identifier && (0 === compareIdentifiers(this.prerelease[0], identifier) ? isNaN(this.prerelease[1]) && (this.prerelease = [identifier, 0]) : this.prerelease = [identifier, 0]);
                break;
              default:
                throw new Error(`invalid increment argument: ${release}`);
            }
            return this.format(), this.raw = this.version, this;
          }
        }
        var semver$2 = SemVer$c;
        const { MAX_LENGTH } = constants, { re: re$1, t: t$1 } = re$3.exports, SemVer$b = semver$2, parseOptions = parseOptions_1;
        var parse_1 = (version2, options) => {
          if (options = parseOptions(options), version2 instanceof SemVer$b)
            return version2;
          if ("string" != typeof version2)
            return null;
          if (version2.length > MAX_LENGTH)
            return null;
          if (!(options.loose ? re$1[t$1.LOOSE] : re$1[t$1.FULL]).test(version2))
            return null;
          try {
            return new SemVer$b(version2, options);
          } catch (er) {
            return null;
          }
        };
        const parse$4 = parse_1;
        var valid_1 = (version2, options) => {
          const v = parse$4(version2, options);
          return v ? v.version : null;
        };
        const parse$3 = parse_1;
        var clean_1 = (version2, options) => {
          const s = parse$3(version2.trim().replace(/^[=v]+/, ""), options);
          return s ? s.version : null;
        };
        const SemVer$a = semver$2;
        var inc_1 = (version2, release, options, identifier) => {
          "string" == typeof options && (identifier = options, options = void 0);
          try {
            return new SemVer$a(version2 instanceof SemVer$a ? version2.version : version2, options).inc(release, identifier).version;
          } catch (er) {
            return null;
          }
        };
        const SemVer$9 = semver$2;
        var compare_1 = (a, b, loose) => new SemVer$9(a, loose).compare(new SemVer$9(b, loose));
        const compare$9 = compare_1;
        var eq_1 = (a, b, loose) => 0 === compare$9(a, b, loose);
        const parse$2 = parse_1, eq$1 = eq_1;
        var diff_1 = (version1, version2) => {
          if (eq$1(version1, version2))
            return null;
          {
            const v1 = parse$2(version1), v2 = parse$2(version2), hasPre = v1.prerelease.length || v2.prerelease.length, prefix = hasPre ? "pre" : "", defaultResult = hasPre ? "prerelease" : "";
            for (const key in v1)
              if (("major" === key || "minor" === key || "patch" === key) && v1[key] !== v2[key])
                return prefix + key;
            return defaultResult;
          }
        };
        const SemVer$8 = semver$2;
        var major_1 = (a, loose) => new SemVer$8(a, loose).major;
        const SemVer$7 = semver$2;
        var minor_1 = (a, loose) => new SemVer$7(a, loose).minor;
        const SemVer$6 = semver$2;
        var patch_1 = (a, loose) => new SemVer$6(a, loose).patch;
        const parse$1 = parse_1;
        var prerelease_1 = (version2, options) => {
          const parsed = parse$1(version2, options);
          return parsed && parsed.prerelease.length ? parsed.prerelease : null;
        };
        const compare$8 = compare_1;
        var rcompare_1 = (a, b, loose) => compare$8(b, a, loose);
        const compare$7 = compare_1;
        var compareLoose_1 = (a, b) => compare$7(a, b, true);
        const SemVer$5 = semver$2;
        var compareBuild_1 = (a, b, loose) => {
          const versionA = new SemVer$5(a, loose), versionB = new SemVer$5(b, loose);
          return versionA.compare(versionB) || versionA.compareBuild(versionB);
        };
        const compareBuild$1 = compareBuild_1;
        var sort_1 = (list, loose) => list.sort((a, b) => compareBuild$1(a, b, loose));
        const compareBuild = compareBuild_1;
        var rsort_1 = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
        const compare$6 = compare_1;
        var gt_1 = (a, b, loose) => compare$6(a, b, loose) > 0;
        const compare$5 = compare_1;
        var lt_1 = (a, b, loose) => compare$5(a, b, loose) < 0;
        const compare$4 = compare_1;
        var neq_1 = (a, b, loose) => 0 !== compare$4(a, b, loose);
        const compare$3 = compare_1;
        var gte_1 = (a, b, loose) => compare$3(a, b, loose) >= 0;
        const compare$2 = compare_1;
        var lte_1 = (a, b, loose) => compare$2(a, b, loose) <= 0;
        const eq = eq_1, neq = neq_1, gt$2 = gt_1, gte$1 = gte_1, lt$1 = lt_1, lte$1 = lte_1;
        var cmp_1 = (a, op, b, loose) => {
          switch (op) {
            case "===":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a === b;
            case "!==":
              return "object" == typeof a && (a = a.version), "object" == typeof b && (b = b.version), a !== b;
            case "":
            case "=":
            case "==":
              return eq(a, b, loose);
            case "!=":
              return neq(a, b, loose);
            case ">":
              return gt$2(a, b, loose);
            case ">=":
              return gte$1(a, b, loose);
            case "<":
              return lt$1(a, b, loose);
            case "<=":
              return lte$1(a, b, loose);
            default:
              throw new TypeError(`Invalid operator: ${op}`);
          }
        };
        const SemVer$4 = semver$2, parse4 = parse_1, { re, t } = re$3.exports;
        var iterator, hasRequiredIterator, yallist, hasRequiredYallist, lruCache, hasRequiredLruCache, range, hasRequiredRange, comparator, hasRequiredComparator, coerce_1 = (version2, options) => {
          if (version2 instanceof SemVer$4)
            return version2;
          if ("number" == typeof version2 && (version2 = String(version2)), "string" != typeof version2)
            return null;
          let match = null;
          if ((options = options || {}).rtl) {
            let next;
            for (; (next = re[t.COERCERTL].exec(version2)) && (!match || match.index + match[0].length !== version2.length); )
              match && next.index + next[0].length === match.index + match[0].length || (match = next), re[t.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
            re[t.COERCERTL].lastIndex = -1;
          } else
            match = version2.match(re[t.COERCE]);
          return null === match ? null : parse4(`${match[2]}.${match[3] || "0"}.${match[4] || "0"}`, options);
        };
        function requireYallist() {
          if (hasRequiredYallist)
            return yallist;
          function Yallist(list) {
            var self2 = this;
            if (self2 instanceof Yallist || (self2 = new Yallist()), self2.tail = null, self2.head = null, self2.length = 0, list && "function" == typeof list.forEach)
              list.forEach(function(item) {
                self2.push(item);
              });
            else if (arguments.length > 0)
              for (var i = 0, l = arguments.length; i < l; i++)
                self2.push(arguments[i]);
            return self2;
          }
          function insert(self2, node, value) {
            var inserted = node === self2.head ? new Node3(value, null, node, self2) : new Node3(value, node, node.next, self2);
            return null === inserted.next && (self2.tail = inserted), null === inserted.prev && (self2.head = inserted), self2.length++, inserted;
          }
          function push(self2, item) {
            self2.tail = new Node3(item, self2.tail, null, self2), self2.head || (self2.head = self2.tail), self2.length++;
          }
          function unshift(self2, item) {
            self2.head = new Node3(item, null, self2.head, self2), self2.tail || (self2.tail = self2.head), self2.length++;
          }
          function Node3(value, prev, next, list) {
            if (!(this instanceof Node3))
              return new Node3(value, prev, next, list);
            this.list = list, this.value = value, prev ? (prev.next = this, this.prev = prev) : this.prev = null, next ? (next.prev = this, this.next = next) : this.next = null;
          }
          hasRequiredYallist = 1, yallist = Yallist, Yallist.Node = Node3, Yallist.create = Yallist, Yallist.prototype.removeNode = function(node) {
            if (node.list !== this)
              throw new Error("removing node which does not belong to this list");
            var next = node.next, prev = node.prev;
            return next && (next.prev = prev), prev && (prev.next = next), node === this.head && (this.head = next), node === this.tail && (this.tail = prev), node.list.length--, node.next = null, node.prev = null, node.list = null, next;
          }, Yallist.prototype.unshiftNode = function(node) {
            if (node !== this.head) {
              node.list && node.list.removeNode(node);
              var head = this.head;
              node.list = this, node.next = head, head && (head.prev = node), this.head = node, this.tail || (this.tail = node), this.length++;
            }
          }, Yallist.prototype.pushNode = function(node) {
            if (node !== this.tail) {
              node.list && node.list.removeNode(node);
              var tail = this.tail;
              node.list = this, node.prev = tail, tail && (tail.next = node), this.tail = node, this.head || (this.head = node), this.length++;
            }
          }, Yallist.prototype.push = function() {
            for (var i = 0, l = arguments.length; i < l; i++)
              push(this, arguments[i]);
            return this.length;
          }, Yallist.prototype.unshift = function() {
            for (var i = 0, l = arguments.length; i < l; i++)
              unshift(this, arguments[i]);
            return this.length;
          }, Yallist.prototype.pop = function() {
            if (this.tail) {
              var res = this.tail.value;
              return this.tail = this.tail.prev, this.tail ? this.tail.next = null : this.head = null, this.length--, res;
            }
          }, Yallist.prototype.shift = function() {
            if (this.head) {
              var res = this.head.value;
              return this.head = this.head.next, this.head ? this.head.prev = null : this.tail = null, this.length--, res;
            }
          }, Yallist.prototype.forEach = function(fn, thisp) {
            thisp = thisp || this;
            for (var walker = this.head, i = 0; null !== walker; i++)
              fn.call(thisp, walker.value, i, this), walker = walker.next;
          }, Yallist.prototype.forEachReverse = function(fn, thisp) {
            thisp = thisp || this;
            for (var walker = this.tail, i = this.length - 1; null !== walker; i--)
              fn.call(thisp, walker.value, i, this), walker = walker.prev;
          }, Yallist.prototype.get = function(n) {
            for (var i = 0, walker = this.head; null !== walker && i < n; i++)
              walker = walker.next;
            if (i === n && null !== walker)
              return walker.value;
          }, Yallist.prototype.getReverse = function(n) {
            for (var i = 0, walker = this.tail; null !== walker && i < n; i++)
              walker = walker.prev;
            if (i === n && null !== walker)
              return walker.value;
          }, Yallist.prototype.map = function(fn, thisp) {
            thisp = thisp || this;
            for (var res = new Yallist(), walker = this.head; null !== walker; )
              res.push(fn.call(thisp, walker.value, this)), walker = walker.next;
            return res;
          }, Yallist.prototype.mapReverse = function(fn, thisp) {
            thisp = thisp || this;
            for (var res = new Yallist(), walker = this.tail; null !== walker; )
              res.push(fn.call(thisp, walker.value, this)), walker = walker.prev;
            return res;
          }, Yallist.prototype.reduce = function(fn, initial) {
            var acc, walker = this.head;
            if (arguments.length > 1)
              acc = initial;
            else {
              if (!this.head)
                throw new TypeError("Reduce of empty list with no initial value");
              walker = this.head.next, acc = this.head.value;
            }
            for (var i = 0; null !== walker; i++)
              acc = fn(acc, walker.value, i), walker = walker.next;
            return acc;
          }, Yallist.prototype.reduceReverse = function(fn, initial) {
            var acc, walker = this.tail;
            if (arguments.length > 1)
              acc = initial;
            else {
              if (!this.tail)
                throw new TypeError("Reduce of empty list with no initial value");
              walker = this.tail.prev, acc = this.tail.value;
            }
            for (var i = this.length - 1; null !== walker; i--)
              acc = fn(acc, walker.value, i), walker = walker.prev;
            return acc;
          }, Yallist.prototype.toArray = function() {
            for (var arr = new Array(this.length), i = 0, walker = this.head; null !== walker; i++)
              arr[i] = walker.value, walker = walker.next;
            return arr;
          }, Yallist.prototype.toArrayReverse = function() {
            for (var arr = new Array(this.length), i = 0, walker = this.tail; null !== walker; i++)
              arr[i] = walker.value, walker = walker.prev;
            return arr;
          }, Yallist.prototype.slice = function(from, to) {
            (to = to || this.length) < 0 && (to += this.length), (from = from || 0) < 0 && (from += this.length);
            var ret = new Yallist();
            if (to < from || to < 0)
              return ret;
            from < 0 && (from = 0), to > this.length && (to = this.length);
            for (var i = 0, walker = this.head; null !== walker && i < from; i++)
              walker = walker.next;
            for (; null !== walker && i < to; i++, walker = walker.next)
              ret.push(walker.value);
            return ret;
          }, Yallist.prototype.sliceReverse = function(from, to) {
            (to = to || this.length) < 0 && (to += this.length), (from = from || 0) < 0 && (from += this.length);
            var ret = new Yallist();
            if (to < from || to < 0)
              return ret;
            from < 0 && (from = 0), to > this.length && (to = this.length);
            for (var i = this.length, walker = this.tail; null !== walker && i > to; i--)
              walker = walker.prev;
            for (; null !== walker && i > from; i--, walker = walker.prev)
              ret.push(walker.value);
            return ret;
          }, Yallist.prototype.splice = function(start, deleteCount, ...nodes) {
            start > this.length && (start = this.length - 1), start < 0 && (start = this.length + start);
            for (var i = 0, walker = this.head; null !== walker && i < start; i++)
              walker = walker.next;
            var ret = [];
            for (i = 0; walker && i < deleteCount; i++)
              ret.push(walker.value), walker = this.removeNode(walker);
            null === walker && (walker = this.tail), walker !== this.head && walker !== this.tail && (walker = walker.prev);
            for (i = 0; i < nodes.length; i++)
              walker = insert(this, walker, nodes[i]);
            return ret;
          }, Yallist.prototype.reverse = function() {
            for (var head = this.head, tail = this.tail, walker = head; null !== walker; walker = walker.prev) {
              var p = walker.prev;
              walker.prev = walker.next, walker.next = p;
            }
            return this.head = tail, this.tail = head, this;
          };
          try {
            (hasRequiredIterator ? iterator : (hasRequiredIterator = 1, iterator = function(Yallist2) {
              Yallist2.prototype[Symbol.iterator] = function* () {
                for (let walker = this.head; walker; walker = walker.next)
                  yield walker.value;
              };
            }))(Yallist);
          } catch (er) {
          }
          return yallist;
        }
        function requireRange() {
          if (hasRequiredRange)
            return range;
          hasRequiredRange = 1;
          class Range2 {
            constructor(range2, options) {
              if (options = parseOptions2(options), range2 instanceof Range2)
                return range2.loose === !!options.loose && range2.includePrerelease === !!options.includePrerelease ? range2 : new Range2(range2.raw, options);
              if (range2 instanceof Comparator2)
                return this.raw = range2.value, this.set = [[range2]], this.format(), this;
              if (this.options = options, this.loose = !!options.loose, this.includePrerelease = !!options.includePrerelease, this.raw = range2, this.set = range2.split("||").map((r2) => this.parseRange(r2.trim())).filter((c) => c.length), !this.set.length)
                throw new TypeError(`Invalid SemVer Range: ${range2}`);
              if (this.set.length > 1) {
                const first = this.set[0];
                if (this.set = this.set.filter((c) => !isNullSet(c[0])), 0 === this.set.length)
                  this.set = [first];
                else if (this.set.length > 1) {
                  for (const c of this.set)
                    if (1 === c.length && isAny(c[0])) {
                      this.set = [c];
                      break;
                    }
                }
              }
              this.format();
            }
            format() {
              return this.range = this.set.map((comps) => comps.join(" ").trim()).join("||").trim(), this.range;
            }
            toString() {
              return this.range;
            }
            parseRange(range2) {
              range2 = range2.trim();
              const memoKey = `parseRange:${Object.keys(this.options).join(",")}:${range2}`, cached = cache.get(memoKey);
              if (cached)
                return cached;
              const loose = this.options.loose, hr = loose ? re2[t2.HYPHENRANGELOOSE] : re2[t2.HYPHENRANGE];
              range2 = range2.replace(hr, hyphenReplace(this.options.includePrerelease)), debug2("hyphen replace", range2), range2 = range2.replace(re2[t2.COMPARATORTRIM], comparatorTrimReplace), debug2("comparator trim", range2);
              let rangeList = (range2 = (range2 = (range2 = range2.replace(re2[t2.TILDETRIM], tildeTrimReplace)).replace(re2[t2.CARETTRIM], caretTrimReplace)).split(/\s+/).join(" ")).split(" ").map((comp) => parseComparator(comp, this.options)).join(" ").split(/\s+/).map((comp) => replaceGTE0(comp, this.options));
              loose && (rangeList = rangeList.filter((comp) => (debug2("loose invalid filter", comp, this.options), !!comp.match(re2[t2.COMPARATORLOOSE])))), debug2("range list", rangeList);
              const rangeMap = /* @__PURE__ */ new Map(), comparators = rangeList.map((comp) => new Comparator2(comp, this.options));
              for (const comp of comparators) {
                if (isNullSet(comp))
                  return [comp];
                rangeMap.set(comp.value, comp);
              }
              rangeMap.size > 1 && rangeMap.has("") && rangeMap.delete("");
              const result = [...rangeMap.values()];
              return cache.set(memoKey, result), result;
            }
            intersects(range2, options) {
              if (!(range2 instanceof Range2))
                throw new TypeError("a Range is required");
              return this.set.some((thisComparators) => isSatisfiable(thisComparators, options) && range2.set.some((rangeComparators) => isSatisfiable(rangeComparators, options) && thisComparators.every((thisComparator) => rangeComparators.every((rangeComparator) => thisComparator.intersects(rangeComparator, options)))));
            }
            test(version2) {
              if (!version2)
                return false;
              if ("string" == typeof version2)
                try {
                  version2 = new SemVer2(version2, this.options);
                } catch (er) {
                  return false;
                }
              for (let i = 0; i < this.set.length; i++)
                if (testSet(this.set[i], version2, this.options))
                  return true;
              return false;
            }
          }
          range = Range2;
          const LRU = function() {
            if (hasRequiredLruCache)
              return lruCache;
            hasRequiredLruCache = 1;
            const Yallist = requireYallist(), MAX = Symbol("max"), LENGTH = Symbol("length"), LENGTH_CALCULATOR = Symbol("lengthCalculator"), ALLOW_STALE = Symbol("allowStale"), MAX_AGE = Symbol("maxAge"), DISPOSE = Symbol("dispose"), NO_DISPOSE_ON_SET = Symbol("noDisposeOnSet"), LRU_LIST = Symbol("lruList"), CACHE = Symbol("cache"), UPDATE_AGE_ON_GET = Symbol("updateAgeOnGet"), naiveLength = () => 1, get = (self2, key, doUse) => {
              const node = self2[CACHE].get(key);
              if (node) {
                const hit = node.value;
                if (isStale(self2, hit)) {
                  if (del(self2, node), !self2[ALLOW_STALE])
                    return;
                } else
                  doUse && (self2[UPDATE_AGE_ON_GET] && (node.value.now = Date.now()), self2[LRU_LIST].unshiftNode(node));
                return hit.value;
              }
            }, isStale = (self2, hit) => {
              if (!hit || !hit.maxAge && !self2[MAX_AGE])
                return false;
              const diff = Date.now() - hit.now;
              return hit.maxAge ? diff > hit.maxAge : self2[MAX_AGE] && diff > self2[MAX_AGE];
            }, trim = (self2) => {
              if (self2[LENGTH] > self2[MAX])
                for (let walker = self2[LRU_LIST].tail; self2[LENGTH] > self2[MAX] && null !== walker; ) {
                  const prev = walker.prev;
                  del(self2, walker), walker = prev;
                }
            }, del = (self2, node) => {
              if (node) {
                const hit = node.value;
                self2[DISPOSE] && self2[DISPOSE](hit.key, hit.value), self2[LENGTH] -= hit.length, self2[CACHE].delete(hit.key), self2[LRU_LIST].removeNode(node);
              }
            };
            class Entry {
              constructor(key, value, length, now, maxAge) {
                this.key = key, this.value = value, this.length = length, this.now = now, this.maxAge = maxAge || 0;
              }
            }
            const forEachStep = (self2, fn, node, thisp) => {
              let hit = node.value;
              isStale(self2, hit) && (del(self2, node), self2[ALLOW_STALE] || (hit = void 0)), hit && fn.call(thisp, hit.value, hit.key, self2);
            };
            return lruCache = class {
              constructor(options) {
                if ("number" == typeof options && (options = { max: options }), options || (options = {}), options.max && ("number" != typeof options.max || options.max < 0))
                  throw new TypeError("max must be a non-negative number");
                this[MAX] = options.max || 1 / 0;
                const lc = options.length || naiveLength;
                if (this[LENGTH_CALCULATOR] = "function" != typeof lc ? naiveLength : lc, this[ALLOW_STALE] = options.stale || false, options.maxAge && "number" != typeof options.maxAge)
                  throw new TypeError("maxAge must be a number");
                this[MAX_AGE] = options.maxAge || 0, this[DISPOSE] = options.dispose, this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false, this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false, this.reset();
              }
              set max(mL) {
                if ("number" != typeof mL || mL < 0)
                  throw new TypeError("max must be a non-negative number");
                this[MAX] = mL || 1 / 0, trim(this);
              }
              get max() {
                return this[MAX];
              }
              set allowStale(allowStale) {
                this[ALLOW_STALE] = !!allowStale;
              }
              get allowStale() {
                return this[ALLOW_STALE];
              }
              set maxAge(mA) {
                if ("number" != typeof mA)
                  throw new TypeError("maxAge must be a non-negative number");
                this[MAX_AGE] = mA, trim(this);
              }
              get maxAge() {
                return this[MAX_AGE];
              }
              set lengthCalculator(lC) {
                "function" != typeof lC && (lC = naiveLength), lC !== this[LENGTH_CALCULATOR] && (this[LENGTH_CALCULATOR] = lC, this[LENGTH] = 0, this[LRU_LIST].forEach((hit) => {
                  hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key), this[LENGTH] += hit.length;
                })), trim(this);
              }
              get lengthCalculator() {
                return this[LENGTH_CALCULATOR];
              }
              get length() {
                return this[LENGTH];
              }
              get itemCount() {
                return this[LRU_LIST].length;
              }
              rforEach(fn, thisp) {
                thisp = thisp || this;
                for (let walker = this[LRU_LIST].tail; null !== walker; ) {
                  const prev = walker.prev;
                  forEachStep(this, fn, walker, thisp), walker = prev;
                }
              }
              forEach(fn, thisp) {
                thisp = thisp || this;
                for (let walker = this[LRU_LIST].head; null !== walker; ) {
                  const next = walker.next;
                  forEachStep(this, fn, walker, thisp), walker = next;
                }
              }
              keys() {
                return this[LRU_LIST].toArray().map((k) => k.key);
              }
              values() {
                return this[LRU_LIST].toArray().map((k) => k.value);
              }
              reset() {
                this[DISPOSE] && this[LRU_LIST] && this[LRU_LIST].length && this[LRU_LIST].forEach((hit) => this[DISPOSE](hit.key, hit.value)), this[CACHE] = /* @__PURE__ */ new Map(), this[LRU_LIST] = new Yallist(), this[LENGTH] = 0;
              }
              dump() {
                return this[LRU_LIST].map((hit) => !isStale(this, hit) && { k: hit.key, v: hit.value, e: hit.now + (hit.maxAge || 0) }).toArray().filter((h) => h);
              }
              dumpLru() {
                return this[LRU_LIST];
              }
              set(key, value, maxAge) {
                if ((maxAge = maxAge || this[MAX_AGE]) && "number" != typeof maxAge)
                  throw new TypeError("maxAge must be a number");
                const now = maxAge ? Date.now() : 0, len = this[LENGTH_CALCULATOR](value, key);
                if (this[CACHE].has(key)) {
                  if (len > this[MAX])
                    return del(this, this[CACHE].get(key)), false;
                  const item = this[CACHE].get(key).value;
                  return this[DISPOSE] && (this[NO_DISPOSE_ON_SET] || this[DISPOSE](key, item.value)), item.now = now, item.maxAge = maxAge, item.value = value, this[LENGTH] += len - item.length, item.length = len, this.get(key), trim(this), true;
                }
                const hit = new Entry(key, value, len, now, maxAge);
                return hit.length > this[MAX] ? (this[DISPOSE] && this[DISPOSE](key, value), false) : (this[LENGTH] += hit.length, this[LRU_LIST].unshift(hit), this[CACHE].set(key, this[LRU_LIST].head), trim(this), true);
              }
              has(key) {
                if (!this[CACHE].has(key))
                  return false;
                const hit = this[CACHE].get(key).value;
                return !isStale(this, hit);
              }
              get(key) {
                return get(this, key, true);
              }
              peek(key) {
                return get(this, key, false);
              }
              pop() {
                const node = this[LRU_LIST].tail;
                return node ? (del(this, node), node.value) : null;
              }
              del(key) {
                del(this, this[CACHE].get(key));
              }
              load(arr) {
                this.reset();
                const now = Date.now();
                for (let l = arr.length - 1; l >= 0; l--) {
                  const hit = arr[l], expiresAt = hit.e || 0;
                  if (0 === expiresAt)
                    this.set(hit.k, hit.v);
                  else {
                    const maxAge = expiresAt - now;
                    maxAge > 0 && this.set(hit.k, hit.v, maxAge);
                  }
                }
              }
              prune() {
                this[CACHE].forEach((value, key) => get(this, key, false));
              }
            };
          }(), cache = new LRU({ max: 1e3 }), parseOptions2 = parseOptions_1, Comparator2 = requireComparator(), debug2 = debug_1, SemVer2 = semver$2, { re: re2, t: t2, comparatorTrimReplace, tildeTrimReplace, caretTrimReplace } = re$3.exports, isNullSet = (c) => "<0.0.0-0" === c.value, isAny = (c) => "" === c.value, isSatisfiable = (comparators, options) => {
            let result = true;
            const remainingComparators = comparators.slice();
            let testComparator = remainingComparators.pop();
            for (; result && remainingComparators.length; )
              result = remainingComparators.every((otherComparator) => testComparator.intersects(otherComparator, options)), testComparator = remainingComparators.pop();
            return result;
          }, parseComparator = (comp, options) => (debug2("comp", comp, options), comp = replaceCarets(comp, options), debug2("caret", comp), comp = replaceTildes(comp, options), debug2("tildes", comp), comp = replaceXRanges(comp, options), debug2("xrange", comp), comp = replaceStars(comp, options), debug2("stars", comp), comp), isX = (id) => !id || "x" === id.toLowerCase() || "*" === id, replaceTildes = (comp, options) => comp.trim().split(/\s+/).map((c) => replaceTilde(c, options)).join(" "), replaceTilde = (comp, options) => {
            const r2 = options.loose ? re2[t2.TILDELOOSE] : re2[t2.TILDE];
            return comp.replace(r2, (_, M, m, p, pr) => {
              let ret;
              return debug2("tilde", comp, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0 <${+M + 1}.0.0-0` : isX(p) ? ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0` : pr ? (debug2("replaceTilde pr", pr), ret = `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0`) : ret = `>=${M}.${m}.${p} <${M}.${+m + 1}.0-0`, debug2("tilde return", ret), ret;
            });
          }, replaceCarets = (comp, options) => comp.trim().split(/\s+/).map((c) => replaceCaret(c, options)).join(" "), replaceCaret = (comp, options) => {
            debug2("caret", comp, options);
            const r2 = options.loose ? re2[t2.CARETLOOSE] : re2[t2.CARET], z = options.includePrerelease ? "-0" : "";
            return comp.replace(r2, (_, M, m, p, pr) => {
              let ret;
              return debug2("caret", comp, _, M, m, p, pr), isX(M) ? ret = "" : isX(m) ? ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0` : isX(p) ? ret = "0" === M ? `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.0${z} <${+M + 1}.0.0-0` : pr ? (debug2("replaceCaret pr", pr), ret = "0" === M ? "0" === m ? `>=${M}.${m}.${p}-${pr} <${M}.${m}.${+p + 1}-0` : `>=${M}.${m}.${p}-${pr} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.${p}-${pr} <${+M + 1}.0.0-0`) : (debug2("no pr"), ret = "0" === M ? "0" === m ? `>=${M}.${m}.${p}${z} <${M}.${m}.${+p + 1}-0` : `>=${M}.${m}.${p}${z} <${M}.${+m + 1}.0-0` : `>=${M}.${m}.${p} <${+M + 1}.0.0-0`), debug2("caret return", ret), ret;
            });
          }, replaceXRanges = (comp, options) => (debug2("replaceXRanges", comp, options), comp.split(/\s+/).map((c) => replaceXRange(c, options)).join(" ")), replaceXRange = (comp, options) => {
            comp = comp.trim();
            const r2 = options.loose ? re2[t2.XRANGELOOSE] : re2[t2.XRANGE];
            return comp.replace(r2, (ret, gtlt, M, m, p, pr) => {
              debug2("xRange", comp, ret, gtlt, M, m, p, pr);
              const xM = isX(M), xm = xM || isX(m), xp = xm || isX(p), anyX = xp;
              return "=" === gtlt && anyX && (gtlt = ""), pr = options.includePrerelease ? "-0" : "", xM ? ret = ">" === gtlt || "<" === gtlt ? "<0.0.0-0" : "*" : gtlt && anyX ? (xm && (m = 0), p = 0, ">" === gtlt ? (gtlt = ">=", xm ? (M = +M + 1, m = 0, p = 0) : (m = +m + 1, p = 0)) : "<=" === gtlt && (gtlt = "<", xm ? M = +M + 1 : m = +m + 1), "<" === gtlt && (pr = "-0"), ret = `${gtlt + M}.${m}.${p}${pr}`) : xm ? ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0` : xp && (ret = `>=${M}.${m}.0${pr} <${M}.${+m + 1}.0-0`), debug2("xRange return", ret), ret;
            });
          }, replaceStars = (comp, options) => (debug2("replaceStars", comp, options), comp.trim().replace(re2[t2.STAR], "")), replaceGTE0 = (comp, options) => (debug2("replaceGTE0", comp, options), comp.trim().replace(re2[options.includePrerelease ? t2.GTE0PRE : t2.GTE0], "")), hyphenReplace = (incPr) => ($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) => `${from = isX(fM) ? "" : isX(fm) ? `>=${fM}.0.0${incPr ? "-0" : ""}` : isX(fp) ? `>=${fM}.${fm}.0${incPr ? "-0" : ""}` : fpr ? `>=${from}` : `>=${from}${incPr ? "-0" : ""}`} ${to = isX(tM) ? "" : isX(tm) ? `<${+tM + 1}.0.0-0` : isX(tp) ? `<${tM}.${+tm + 1}.0-0` : tpr ? `<=${tM}.${tm}.${tp}-${tpr}` : incPr ? `<${tM}.${tm}.${+tp + 1}-0` : `<=${to}`}`.trim(), testSet = (set, version2, options) => {
            for (let i = 0; i < set.length; i++)
              if (!set[i].test(version2))
                return false;
            if (version2.prerelease.length && !options.includePrerelease) {
              for (let i = 0; i < set.length; i++)
                if (debug2(set[i].semver), set[i].semver !== Comparator2.ANY && set[i].semver.prerelease.length > 0) {
                  const allowed = set[i].semver;
                  if (allowed.major === version2.major && allowed.minor === version2.minor && allowed.patch === version2.patch)
                    return true;
                }
              return false;
            }
            return true;
          };
          return range;
        }
        function requireComparator() {
          if (hasRequiredComparator)
            return comparator;
          hasRequiredComparator = 1;
          const ANY2 = Symbol("SemVer ANY");
          class Comparator2 {
            static get ANY() {
              return ANY2;
            }
            constructor(comp, options) {
              if (options = parseOptions2(options), comp instanceof Comparator2) {
                if (comp.loose === !!options.loose)
                  return comp;
                comp = comp.value;
              }
              debug2("comparator", comp, options), this.options = options, this.loose = !!options.loose, this.parse(comp), this.semver === ANY2 ? this.value = "" : this.value = this.operator + this.semver.version, debug2("comp", this);
            }
            parse(comp) {
              const r2 = this.options.loose ? re2[t2.COMPARATORLOOSE] : re2[t2.COMPARATOR], m = comp.match(r2);
              if (!m)
                throw new TypeError(`Invalid comparator: ${comp}`);
              this.operator = void 0 !== m[1] ? m[1] : "", "=" === this.operator && (this.operator = ""), m[2] ? this.semver = new SemVer2(m[2], this.options.loose) : this.semver = ANY2;
            }
            toString() {
              return this.value;
            }
            test(version2) {
              if (debug2("Comparator.test", version2, this.options.loose), this.semver === ANY2 || version2 === ANY2)
                return true;
              if ("string" == typeof version2)
                try {
                  version2 = new SemVer2(version2, this.options);
                } catch (er) {
                  return false;
                }
              return cmp(version2, this.operator, this.semver, this.options);
            }
            intersects(comp, options) {
              if (!(comp instanceof Comparator2))
                throw new TypeError("a Comparator is required");
              if (options && "object" == typeof options || (options = { loose: !!options, includePrerelease: false }), "" === this.operator)
                return "" === this.value || new Range2(comp.value, options).test(this.value);
              if ("" === comp.operator)
                return "" === comp.value || new Range2(this.value, options).test(comp.semver);
              const sameDirectionIncreasing = !(">=" !== this.operator && ">" !== this.operator || ">=" !== comp.operator && ">" !== comp.operator), sameDirectionDecreasing = !("<=" !== this.operator && "<" !== this.operator || "<=" !== comp.operator && "<" !== comp.operator), sameSemVer = this.semver.version === comp.semver.version, differentDirectionsInclusive = !(">=" !== this.operator && "<=" !== this.operator || ">=" !== comp.operator && "<=" !== comp.operator), oppositeDirectionsLessThan = cmp(this.semver, "<", comp.semver, options) && (">=" === this.operator || ">" === this.operator) && ("<=" === comp.operator || "<" === comp.operator), oppositeDirectionsGreaterThan = cmp(this.semver, ">", comp.semver, options) && ("<=" === this.operator || "<" === this.operator) && (">=" === comp.operator || ">" === comp.operator);
              return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;
            }
          }
          comparator = Comparator2;
          const parseOptions2 = parseOptions_1, { re: re2, t: t2 } = re$3.exports, cmp = cmp_1, debug2 = debug_1, SemVer2 = semver$2, Range2 = requireRange();
          return comparator;
        }
        const Range$8 = requireRange();
        var satisfies_1 = (version2, range2, options) => {
          try {
            range2 = new Range$8(range2, options);
          } catch (er) {
            return false;
          }
          return range2.test(version2);
        };
        const Range$7 = requireRange();
        var toComparators_1 = (range2, options) => new Range$7(range2, options).set.map((comp) => comp.map((c) => c.value).join(" ").trim().split(" "));
        const SemVer$3 = semver$2, Range$6 = requireRange();
        var maxSatisfying_1 = (versions, range2, options) => {
          let max = null, maxSV = null, rangeObj = null;
          try {
            rangeObj = new Range$6(range2, options);
          } catch (er) {
            return null;
          }
          return versions.forEach((v) => {
            rangeObj.test(v) && (max && -1 !== maxSV.compare(v) || (max = v, maxSV = new SemVer$3(max, options)));
          }), max;
        };
        const SemVer$2 = semver$2, Range$5 = requireRange();
        var minSatisfying_1 = (versions, range2, options) => {
          let min = null, minSV = null, rangeObj = null;
          try {
            rangeObj = new Range$5(range2, options);
          } catch (er) {
            return null;
          }
          return versions.forEach((v) => {
            rangeObj.test(v) && (min && 1 !== minSV.compare(v) || (min = v, minSV = new SemVer$2(min, options)));
          }), min;
        };
        const SemVer$1 = semver$2, Range$4 = requireRange(), gt$1 = gt_1;
        var minVersion_1 = (range2, loose) => {
          range2 = new Range$4(range2, loose);
          let minver = new SemVer$1("0.0.0");
          if (range2.test(minver))
            return minver;
          if (minver = new SemVer$1("0.0.0-0"), range2.test(minver))
            return minver;
          minver = null;
          for (let i = 0; i < range2.set.length; ++i) {
            const comparators = range2.set[i];
            let setMin = null;
            comparators.forEach((comparator2) => {
              const compver = new SemVer$1(comparator2.semver.version);
              switch (comparator2.operator) {
                case ">":
                  0 === compver.prerelease.length ? compver.patch++ : compver.prerelease.push(0), compver.raw = compver.format();
                case "":
                case ">=":
                  setMin && !gt$1(compver, setMin) || (setMin = compver);
                  break;
                case "<":
                case "<=":
                  break;
                default:
                  throw new Error(`Unexpected operation: ${comparator2.operator}`);
              }
            }), !setMin || minver && !gt$1(minver, setMin) || (minver = setMin);
          }
          return minver && range2.test(minver) ? minver : null;
        };
        const Range$3 = requireRange();
        var valid = (range2, options) => {
          try {
            return new Range$3(range2, options).range || "*";
          } catch (er) {
            return null;
          }
        };
        const SemVer = semver$2, Comparator$1 = requireComparator(), { ANY: ANY$1 } = Comparator$1, Range$2 = requireRange(), satisfies$2 = satisfies_1, gt = gt_1, lt = lt_1, lte = lte_1, gte = gte_1;
        var outside_1 = (version2, range2, hilo, options) => {
          let gtfn, ltefn, ltfn, comp, ecomp;
          switch (version2 = new SemVer(version2, options), range2 = new Range$2(range2, options), hilo) {
            case ">":
              gtfn = gt, ltefn = lte, ltfn = lt, comp = ">", ecomp = ">=";
              break;
            case "<":
              gtfn = lt, ltefn = gte, ltfn = gt, comp = "<", ecomp = "<=";
              break;
            default:
              throw new TypeError('Must provide a hilo val of "<" or ">"');
          }
          if (satisfies$2(version2, range2, options))
            return false;
          for (let i = 0; i < range2.set.length; ++i) {
            const comparators = range2.set[i];
            let high = null, low = null;
            if (comparators.forEach((comparator2) => {
              comparator2.semver === ANY$1 && (comparator2 = new Comparator$1(">=0.0.0")), high = high || comparator2, low = low || comparator2, gtfn(comparator2.semver, high.semver, options) ? high = comparator2 : ltfn(comparator2.semver, low.semver, options) && (low = comparator2);
            }), high.operator === comp || high.operator === ecomp)
              return false;
            if ((!low.operator || low.operator === comp) && ltefn(version2, low.semver))
              return false;
            if (low.operator === ecomp && ltfn(version2, low.semver))
              return false;
          }
          return true;
        };
        const outside$1 = outside_1;
        var gtr_1 = (version2, range2, options) => outside$1(version2, range2, ">", options);
        const outside = outside_1;
        var ltr_1 = (version2, range2, options) => outside(version2, range2, "<", options);
        const Range$1 = requireRange();
        var intersects_1 = (r1, r2, options) => (r1 = new Range$1(r1, options), r2 = new Range$1(r2, options), r1.intersects(r2));
        const satisfies$1 = satisfies_1, compare$1 = compare_1;
        const Range = requireRange(), Comparator = requireComparator(), { ANY } = Comparator, satisfies2 = satisfies_1, compare = compare_1, simpleSubset = (sub, dom, options) => {
          if (sub === dom)
            return true;
          if (1 === sub.length && sub[0].semver === ANY) {
            if (1 === dom.length && dom[0].semver === ANY)
              return true;
            sub = options.includePrerelease ? [new Comparator(">=0.0.0-0")] : [new Comparator(">=0.0.0")];
          }
          if (1 === dom.length && dom[0].semver === ANY) {
            if (options.includePrerelease)
              return true;
            dom = [new Comparator(">=0.0.0")];
          }
          const eqSet = /* @__PURE__ */ new Set();
          let gt2, lt2, gtltComp, higher, lower, hasDomLT, hasDomGT;
          for (const c of sub)
            ">" === c.operator || ">=" === c.operator ? gt2 = higherGT(gt2, c, options) : "<" === c.operator || "<=" === c.operator ? lt2 = lowerLT(lt2, c, options) : eqSet.add(c.semver);
          if (eqSet.size > 1)
            return null;
          if (gt2 && lt2) {
            if (gtltComp = compare(gt2.semver, lt2.semver, options), gtltComp > 0)
              return null;
            if (0 === gtltComp && (">=" !== gt2.operator || "<=" !== lt2.operator))
              return null;
          }
          for (const eq2 of eqSet) {
            if (gt2 && !satisfies2(eq2, String(gt2), options))
              return null;
            if (lt2 && !satisfies2(eq2, String(lt2), options))
              return null;
            for (const c of dom)
              if (!satisfies2(eq2, String(c), options))
                return false;
            return true;
          }
          let needDomLTPre = !(!lt2 || options.includePrerelease || !lt2.semver.prerelease.length) && lt2.semver, needDomGTPre = !(!gt2 || options.includePrerelease || !gt2.semver.prerelease.length) && gt2.semver;
          needDomLTPre && 1 === needDomLTPre.prerelease.length && "<" === lt2.operator && 0 === needDomLTPre.prerelease[0] && (needDomLTPre = false);
          for (const c of dom) {
            if (hasDomGT = hasDomGT || ">" === c.operator || ">=" === c.operator, hasDomLT = hasDomLT || "<" === c.operator || "<=" === c.operator, gt2) {
              if (needDomGTPre && c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomGTPre.major && c.semver.minor === needDomGTPre.minor && c.semver.patch === needDomGTPre.patch && (needDomGTPre = false), ">" === c.operator || ">=" === c.operator) {
                if (higher = higherGT(gt2, c, options), higher === c && higher !== gt2)
                  return false;
              } else if (">=" === gt2.operator && !satisfies2(gt2.semver, String(c), options))
                return false;
            }
            if (lt2) {
              if (needDomLTPre && c.semver.prerelease && c.semver.prerelease.length && c.semver.major === needDomLTPre.major && c.semver.minor === needDomLTPre.minor && c.semver.patch === needDomLTPre.patch && (needDomLTPre = false), "<" === c.operator || "<=" === c.operator) {
                if (lower = lowerLT(lt2, c, options), lower === c && lower !== lt2)
                  return false;
              } else if ("<=" === lt2.operator && !satisfies2(lt2.semver, String(c), options))
                return false;
            }
            if (!c.operator && (lt2 || gt2) && 0 !== gtltComp)
              return false;
          }
          return !(gt2 && hasDomLT && !lt2 && 0 !== gtltComp) && (!(lt2 && hasDomGT && !gt2 && 0 !== gtltComp) && (!needDomGTPre && !needDomLTPre));
        }, higherGT = (a, b, options) => {
          if (!a)
            return b;
          const comp = compare(a.semver, b.semver, options);
          return comp > 0 ? a : comp < 0 || ">" === b.operator && ">=" === a.operator ? b : a;
        }, lowerLT = (a, b, options) => {
          if (!a)
            return b;
          const comp = compare(a.semver, b.semver, options);
          return comp < 0 ? a : comp > 0 || "<" === b.operator && "<=" === a.operator ? b : a;
        };
        var subset_1 = (sub, dom, options = {}) => {
          if (sub === dom)
            return true;
          sub = new Range(sub, options), dom = new Range(dom, options);
          let sawNonNull = false;
          OUTER:
            for (const simpleSub of sub.set) {
              for (const simpleDom of dom.set) {
                const isSub = simpleSubset(simpleSub, simpleDom, options);
                if (sawNonNull = sawNonNull || null !== isSub, isSub)
                  continue OUTER;
              }
              if (sawNonNull)
                return false;
            }
          return true;
        };
        const internalRe = re$3.exports;
        var semver$1 = { re: internalRe.re, src: internalRe.src, tokens: internalRe.t, SEMVER_SPEC_VERSION: constants.SEMVER_SPEC_VERSION, SemVer: semver$2, compareIdentifiers: identifiers.compareIdentifiers, rcompareIdentifiers: identifiers.rcompareIdentifiers, parse: parse_1, valid: valid_1, clean: clean_1, inc: inc_1, diff: diff_1, major: major_1, minor: minor_1, patch: patch_1, prerelease: prerelease_1, compare: compare_1, rcompare: rcompare_1, compareLoose: compareLoose_1, compareBuild: compareBuild_1, sort: sort_1, rsort: rsort_1, gt: gt_1, lt: lt_1, eq: eq_1, neq: neq_1, gte: gte_1, lte: lte_1, cmp: cmp_1, coerce: coerce_1, Comparator: requireComparator(), Range: requireRange(), satisfies: satisfies_1, toComparators: toComparators_1, maxSatisfying: maxSatisfying_1, minSatisfying: minSatisfying_1, minVersion: minVersion_1, validRange: valid, outside: outside_1, gtr: gtr_1, ltr: ltr_1, intersects: intersects_1, simplifyRange: (versions, range2, options) => {
          const set = [];
          let first = null, prev = null;
          const v = versions.sort((a, b) => compare$1(a, b, options));
          for (const version2 of v) {
            satisfies$1(version2, range2, options) ? (prev = version2, first || (first = version2)) : (prev && set.push([first, prev]), prev = null, first = null);
          }
          first && set.push([first, null]);
          const ranges = [];
          for (const [min, max] of set)
            min === max ? ranges.push(min) : max || min !== v[0] ? max ? min === v[0] ? ranges.push(`<=${max}`) : ranges.push(`${min} - ${max}`) : ranges.push(`>=${min}`) : ranges.push("*");
          const simplified = ranges.join(" || "), original = "string" == typeof range2.raw ? range2.raw : String(range2);
          return simplified.length < original.length ? simplified : range2;
        }, subset: subset_1 }, semver = semver$1;
        const reader2 = { read: function(jsonPath) {
          return find2(_path().dirname(jsonPath));
        } };
        function find2(dir) {
          try {
            return { string: _fs().default.readFileSync(_path().toNamespacedPath(_path().join(dir, "package.json")), "utf8") };
          } catch (error) {
            if ("ENOENT" === error.code) {
              const parent = _path().dirname(dir);
              return dir !== parent ? find2(parent) : { string: void 0 };
            }
            throw error;
          }
        }
        const isWindows3 = "win32" === process.platform, own$12 = {}.hasOwnProperty, codes2 = {}, messages2 = /* @__PURE__ */ new Map();
        let userStackTraceLimit2;
        function createError2(sym, value, def) {
          return messages2.set(sym, value), function(Base, key) {
            return NodeError;
            function NodeError(...args) {
              const limit = Error.stackTraceLimit;
              isErrorStackTraceLimitWritable2() && (Error.stackTraceLimit = 0);
              const error = new Base();
              isErrorStackTraceLimitWritable2() && (Error.stackTraceLimit = limit);
              const message = function(key2, args2, self2) {
                const message2 = messages2.get(key2);
                if ("function" == typeof message2)
                  return _assert()(message2.length <= args2.length, `Code: ${key2}; The provided arguments length (${args2.length}) does not match the required ones (${message2.length}).`), Reflect.apply(message2, self2, args2);
                const expectedLength = (message2.match(/%[dfijoOs]/g) || []).length;
                return _assert()(expectedLength === args2.length, `Code: ${key2}; The provided arguments length (${args2.length}) does not match the required ones (${expectedLength}).`), 0 === args2.length ? message2 : (args2.unshift(message2), Reflect.apply(_util().format, null, args2));
              }(key, args, error);
              return Object.defineProperty(error, "message", { value: message, enumerable: false, writable: true, configurable: true }), Object.defineProperty(error, "toString", { value() {
                return `${this.name} [${key}]: ${this.message}`;
              }, enumerable: false, writable: true, configurable: true }), addCodeToName2(error, Base.name, key), error.code = key, error;
            }
          }(def, sym);
        }
        codes2.ERR_INVALID_MODULE_SPECIFIER = createError2("ERR_INVALID_MODULE_SPECIFIER", (request, reason, base) => `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`, TypeError), codes2.ERR_INVALID_PACKAGE_CONFIG = createError2("ERR_INVALID_PACKAGE_CONFIG", (path3, base, message) => `Invalid package config ${path3}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`, Error), codes2.ERR_INVALID_PACKAGE_TARGET = createError2("ERR_INVALID_PACKAGE_TARGET", (pkgPath, key, target, isImport = false, base) => {
          const relError = "string" == typeof target && !isImport && target.length > 0 && !target.startsWith("./");
          return "." === key ? (_assert()(false === isImport), `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ""}${relError ? '; targets must start with "./"' : ""}`) : `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(target)} defined for '${key}' in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ""}${relError ? '; targets must start with "./"' : ""}`;
        }, Error), codes2.ERR_MODULE_NOT_FOUND = createError2("ERR_MODULE_NOT_FOUND", (path3, base, type = "package") => `Cannot find ${type} '${path3}' imported from ${base}`, Error), codes2.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError2("ERR_PACKAGE_IMPORT_NOT_DEFINED", (specifier, packagePath, base) => `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`, TypeError), codes2.ERR_PACKAGE_PATH_NOT_EXPORTED = createError2("ERR_PACKAGE_PATH_NOT_EXPORTED", (pkgPath, subpath, base) => "." === subpath ? `No "exports" main defined in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}` : `Package subpath '${subpath}' is not defined by "exports" in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}`, Error), codes2.ERR_UNSUPPORTED_DIR_IMPORT = createError2("ERR_UNSUPPORTED_DIR_IMPORT", "Directory import '%s' is not supported resolving ES modules imported from %s", Error), codes2.ERR_UNKNOWN_FILE_EXTENSION = createError2("ERR_UNKNOWN_FILE_EXTENSION", 'Unknown file extension "%s" for %s', TypeError), codes2.ERR_INVALID_ARG_VALUE = createError2("ERR_INVALID_ARG_VALUE", (name, value, reason = "is invalid") => {
          let inspected = (0, _util().inspect)(value);
          inspected.length > 128 && (inspected = `${inspected.slice(0, 128)}...`);
          return `The ${name.includes(".") ? "property" : "argument"} '${name}' ${reason}. Received ${inspected}`;
        }, TypeError), codes2.ERR_UNSUPPORTED_ESM_URL_SCHEME = createError2("ERR_UNSUPPORTED_ESM_URL_SCHEME", (url) => {
          let message = "Only file and data URLs are supported by the default ESM loader";
          return isWindows3 && 2 === url.protocol.length && (message += ". On Windows, absolute paths must be valid file:// URLs"), message += `. Received protocol '${url.protocol}'`, message;
        }, Error);
        const addCodeToName2 = hideStackFrames2(function(error, name, code) {
          (error = captureLargerStackTrace2(error)).name = `${name} [${code}]`, error.stack, "SystemError" === name ? Object.defineProperty(error, "name", { value: name, enumerable: false, writable: true, configurable: true }) : delete error.name;
        });
        function isErrorStackTraceLimitWritable2() {
          const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
          return void 0 === desc ? Object.isExtensible(Error) : own$12.call(desc, "writable") ? desc.writable : void 0 !== desc.set;
        }
        function hideStackFrames2(fn) {
          const hidden = "__node_internal_" + fn.name;
          return Object.defineProperty(fn, "name", { value: hidden }), fn;
        }
        const captureLargerStackTrace2 = hideStackFrames2(function(error) {
          const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable2();
          return stackTraceLimitIsWritable && (userStackTraceLimit2 = Error.stackTraceLimit, Error.stackTraceLimit = Number.POSITIVE_INFINITY), Error.captureStackTrace(error), stackTraceLimitIsWritable && (Error.stackTraceLimit = userStackTraceLimit2), error;
        });
        const { ERR_UNKNOWN_FILE_EXTENSION: ERR_UNKNOWN_FILE_EXTENSION2 } = codes2, extensionFormatMap2 = { __proto__: null, ".cjs": "commonjs", ".js": "module", ".mjs": "module" };
        function defaultGetFormat2(url) {
          if (url.startsWith("node:"))
            return { format: "builtin" };
          const parsed = new (_url()).URL(url);
          if ("data:" === parsed.protocol) {
            const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(parsed.pathname) || [null, null];
            return { format: "text/javascript" === mime ? "module" : null };
          }
          if ("file:" === parsed.protocol) {
            const ext = _path().extname(parsed.pathname);
            let format2;
            if (format2 = ".js" === ext ? "module" === function(url2) {
              return getPackageScopeConfig2(url2).type;
            }(parsed.href) ? "module" : "commonjs" : extensionFormatMap2[ext], !format2)
              throw new ERR_UNKNOWN_FILE_EXTENSION2(ext, (0, _url().fileURLToPath)(url));
            return { format: format2 || null };
          }
          return { format: null };
        }
        const listOfBuiltins = function({ version: version2 = process.version, experimental: experimental2 = false } = {}) {
          var coreModules = ["assert", "buffer", "child_process", "cluster", "console", "constants", "crypto", "dgram", "dns", "domain", "events", "fs", "http", "https", "module", "net", "os", "path", "punycode", "querystring", "readline", "repl", "stream", "string_decoder", "sys", "timers", "tls", "tty", "url", "util", "vm", "zlib"];
          return semver.lt(version2, "6.0.0") && coreModules.push("freelist"), semver.gte(version2, "1.0.0") && coreModules.push("v8"), semver.gte(version2, "1.1.0") && coreModules.push("process"), semver.gte(version2, "8.0.0") && coreModules.push("inspector"), semver.gte(version2, "8.1.0") && coreModules.push("async_hooks"), semver.gte(version2, "8.4.0") && coreModules.push("http2"), semver.gte(version2, "8.5.0") && coreModules.push("perf_hooks"), semver.gte(version2, "10.0.0") && coreModules.push("trace_events"), semver.gte(version2, "10.5.0") && (experimental2 || semver.gte(version2, "12.0.0")) && coreModules.push("worker_threads"), semver.gte(version2, "12.16.0") && experimental2 && coreModules.push("wasi"), coreModules;
        }(), { ERR_INVALID_MODULE_SPECIFIER: ERR_INVALID_MODULE_SPECIFIER2, ERR_INVALID_PACKAGE_CONFIG: ERR_INVALID_PACKAGE_CONFIG2, ERR_INVALID_PACKAGE_TARGET: ERR_INVALID_PACKAGE_TARGET2, ERR_MODULE_NOT_FOUND: ERR_MODULE_NOT_FOUND2, ERR_PACKAGE_IMPORT_NOT_DEFINED: ERR_PACKAGE_IMPORT_NOT_DEFINED2, ERR_PACKAGE_PATH_NOT_EXPORTED: ERR_PACKAGE_PATH_NOT_EXPORTED2, ERR_UNSUPPORTED_DIR_IMPORT: ERR_UNSUPPORTED_DIR_IMPORT2, ERR_UNSUPPORTED_ESM_URL_SCHEME: ERR_UNSUPPORTED_ESM_URL_SCHEME2, ERR_INVALID_ARG_VALUE: ERR_INVALID_ARG_VALUE2 } = codes2, own2 = {}.hasOwnProperty, DEFAULT_CONDITIONS = Object.freeze(["node", "import"]), DEFAULT_CONDITIONS_SET2 = new Set(DEFAULT_CONDITIONS), invalidSegmentRegEx2 = /(^|\\|\/)(\.\.?|node_modules)(\\|\/|$)/, patternRegEx2 = /\*/g, encodedSepRegEx2 = /%2f|%2c/i, emittedPackageWarnings2 = /* @__PURE__ */ new Set(), packageJsonCache2 = /* @__PURE__ */ new Map();
        function emitFolderMapDeprecation2(match, pjsonUrl, isExports, base) {
          const pjsonPath = (0, _url().fileURLToPath)(pjsonUrl);
          emittedPackageWarnings2.has(pjsonPath + "|" + match) || (emittedPackageWarnings2.add(pjsonPath + "|" + match), process.emitWarning(`Use of deprecated folder mapping "${match}" in the ${isExports ? '"exports"' : '"imports"'} field module resolution of the package at ${pjsonPath}${base ? ` imported from ${(0, _url().fileURLToPath)(base)}` : ""}.
Update this package.json to use a subpath pattern like "${match}*".`, "DeprecationWarning", "DEP0148"));
        }
        function emitLegacyIndexDeprecation2(url, packageJsonUrl, base, main) {
          const { format: format2 } = defaultGetFormat2(url.href);
          if ("module" !== format2)
            return;
          const path3 = (0, _url().fileURLToPath)(url.href), pkgPath = (0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), basePath = (0, _url().fileURLToPath)(base);
          main ? process.emitWarning(`Package ${pkgPath} has a "main" field set to ${JSON.stringify(main)}, excluding the full filename and extension to the resolved file at "${path3.slice(pkgPath.length)}", imported from ${basePath}.
 Automatic extension resolution of the "main" field isdeprecated for ES modules.`, "DeprecationWarning", "DEP0151") : process.emitWarning(`No "main" or "exports" field defined in the package.json for ${pkgPath} resolving the main entry point "${path3.slice(pkgPath.length)}", imported from ${basePath}.
Default "index" lookups for the main are deprecated for ES modules.`, "DeprecationWarning", "DEP0151");
        }
        function tryStatSync2(path3) {
          try {
            return (0, _fs().statSync)(path3);
          } catch (_unused) {
            return new (_fs()).Stats();
          }
        }
        function getPackageConfig2(path3, specifier, base) {
          const existing = packageJsonCache2.get(path3);
          if (void 0 !== existing)
            return existing;
          const source = reader2.read(path3).string;
          if (void 0 === source) {
            const packageConfig2 = { pjsonPath: path3, exists: false, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
            return packageJsonCache2.set(path3, packageConfig2), packageConfig2;
          }
          let packageJson;
          try {
            packageJson = JSON.parse(source);
          } catch (error) {
            throw new ERR_INVALID_PACKAGE_CONFIG2(path3, (base ? `"${specifier}" from ` : "") + (0, _url().fileURLToPath)(base || specifier), error.message);
          }
          const { exports: exports3, imports, main, name, type } = packageJson, packageConfig = { pjsonPath: path3, exists: true, main: "string" == typeof main ? main : void 0, name: "string" == typeof name ? name : void 0, type: "module" === type || "commonjs" === type ? type : "none", exports: exports3, imports: imports && "object" == typeof imports ? imports : void 0 };
          return packageJsonCache2.set(path3, packageConfig), packageConfig;
        }
        function getPackageScopeConfig2(resolved) {
          let packageJsonUrl = new (_url()).URL("./package.json", resolved);
          for (; ; ) {
            if (packageJsonUrl.pathname.endsWith("node_modules/package.json"))
              break;
            const packageConfig2 = getPackageConfig2((0, _url().fileURLToPath)(packageJsonUrl), resolved);
            if (packageConfig2.exists)
              return packageConfig2;
            const lastPackageJsonUrl = packageJsonUrl;
            if (packageJsonUrl = new (_url()).URL("../package.json", packageJsonUrl), packageJsonUrl.pathname === lastPackageJsonUrl.pathname)
              break;
          }
          const packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl), packageConfig = { pjsonPath: packageJsonPath, exists: false, main: void 0, name: void 0, type: "none", exports: void 0, imports: void 0 };
          return packageJsonCache2.set(packageJsonPath, packageConfig), packageConfig;
        }
        function fileExists2(url) {
          return tryStatSync2((0, _url().fileURLToPath)(url)).isFile();
        }
        function legacyMainResolve2(packageJsonUrl, packageConfig, base) {
          let guess;
          if (void 0 !== packageConfig.main) {
            if (guess = new (_url()).URL(`./${packageConfig.main}`, packageJsonUrl), fileExists2(guess))
              return guess;
            const tries2 = [`./${packageConfig.main}.js`, `./${packageConfig.main}.json`, `./${packageConfig.main}.node`, `./${packageConfig.main}/index.js`, `./${packageConfig.main}/index.json`, `./${packageConfig.main}/index.node`];
            let i2 = -1;
            for (; ++i2 < tries2.length && (guess = new (_url()).URL(tries2[i2], packageJsonUrl), !fileExists2(guess)); )
              guess = void 0;
            if (guess)
              return emitLegacyIndexDeprecation2(guess, packageJsonUrl, base, packageConfig.main), guess;
          }
          const tries = ["./index.js", "./index.json", "./index.node"];
          let i = -1;
          for (; ++i < tries.length && (guess = new (_url()).URL(tries[i], packageJsonUrl), !fileExists2(guess)); )
            guess = void 0;
          if (guess)
            return emitLegacyIndexDeprecation2(guess, packageJsonUrl, base, packageConfig.main), guess;
          throw new ERR_MODULE_NOT_FOUND2((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), (0, _url().fileURLToPath)(base));
        }
        function throwExportsNotFound2(subpath, packageJsonUrl, base) {
          throw new ERR_PACKAGE_PATH_NOT_EXPORTED2((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), subpath, base && (0, _url().fileURLToPath)(base));
        }
        function throwInvalidPackageTarget2(subpath, target, packageJsonUrl, internal2, base) {
          throw target = "object" == typeof target && null !== target ? JSON.stringify(target, null, "") : `${target}`, new ERR_INVALID_PACKAGE_TARGET2((0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl)), subpath, target, internal2, base && (0, _url().fileURLToPath)(base));
        }
        function resolvePackageTargetString2(target, subpath, match, packageJsonUrl, base, pattern, internal2, conditions) {
          if ("" === subpath || pattern || "/" === target[target.length - 1] || throwInvalidPackageTarget2(match, target, packageJsonUrl, internal2, base), !target.startsWith("./")) {
            if (internal2 && !target.startsWith("../") && !target.startsWith("/")) {
              let isURL = false;
              try {
                new (_url()).URL(target), isURL = true;
              } catch (_unused2) {
              }
              if (!isURL) {
                return packageResolve2(pattern ? target.replace(patternRegEx2, subpath) : target + subpath, packageJsonUrl, conditions);
              }
            }
            throwInvalidPackageTarget2(match, target, packageJsonUrl, internal2, base);
          }
          invalidSegmentRegEx2.test(target.slice(2)) && throwInvalidPackageTarget2(match, target, packageJsonUrl, internal2, base);
          const resolved = new (_url()).URL(target, packageJsonUrl), resolvedPath = resolved.pathname, packagePath = new (_url()).URL(".", packageJsonUrl).pathname;
          return resolvedPath.startsWith(packagePath) || throwInvalidPackageTarget2(match, target, packageJsonUrl, internal2, base), "" === subpath ? resolved : (invalidSegmentRegEx2.test(subpath) && function(subpath2, packageJsonUrl2, internal3, base2) {
            const reason = `request is not a valid subpath for the "${internal3 ? "imports" : "exports"}" resolution of ${(0, _url().fileURLToPath)(packageJsonUrl2)}`;
            throw new ERR_INVALID_MODULE_SPECIFIER2(subpath2, reason, base2 && (0, _url().fileURLToPath)(base2));
          }(match + subpath, packageJsonUrl, internal2, base), pattern ? new (_url()).URL(resolved.href.replace(patternRegEx2, subpath)) : new (_url()).URL(subpath, resolved));
        }
        function isArrayIndex2(key) {
          const keyNumber = Number(key);
          return `${keyNumber}` === key && (keyNumber >= 0 && keyNumber < 4294967295);
        }
        function resolvePackageTarget2(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal2, conditions) {
          if ("string" == typeof target)
            return resolvePackageTargetString2(target, subpath, packageSubpath, packageJsonUrl, base, pattern, internal2, conditions);
          if (Array.isArray(target)) {
            const targetList = target;
            if (0 === targetList.length)
              return null;
            let lastException, i = -1;
            for (; ++i < targetList.length; ) {
              const targetItem = targetList[i];
              let resolved;
              try {
                resolved = resolvePackageTarget2(packageJsonUrl, targetItem, subpath, packageSubpath, base, pattern, internal2, conditions);
              } catch (error) {
                if (lastException = error, "ERR_INVALID_PACKAGE_TARGET" === error.code)
                  continue;
                throw error;
              }
              if (void 0 !== resolved) {
                if (null !== resolved)
                  return resolved;
                lastException = null;
              }
            }
            if (null == lastException)
              return lastException;
            throw lastException;
          }
          if ("object" != typeof target || null === target) {
            if (null === target)
              return null;
            throwInvalidPackageTarget2(packageSubpath, target, packageJsonUrl, internal2, base);
          } else {
            const keys = Object.getOwnPropertyNames(target);
            let i = -1;
            for (; ++i < keys.length; ) {
              if (isArrayIndex2(keys[i]))
                throw new ERR_INVALID_PACKAGE_CONFIG2((0, _url().fileURLToPath)(packageJsonUrl), base, '"exports" cannot contain numeric property keys.');
            }
            for (i = -1; ++i < keys.length; ) {
              const key = keys[i];
              if ("default" === key || conditions && conditions.has(key)) {
                const resolved = resolvePackageTarget2(packageJsonUrl, target[key], subpath, packageSubpath, base, pattern, internal2, conditions);
                if (void 0 === resolved)
                  continue;
                return resolved;
              }
            }
          }
        }
        function packageExportsResolve2(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
          let exports3 = packageConfig.exports;
          if (function(exports4, packageJsonUrl2, base2) {
            if ("string" == typeof exports4 || Array.isArray(exports4))
              return true;
            if ("object" != typeof exports4 || null === exports4)
              return false;
            const keys2 = Object.getOwnPropertyNames(exports4);
            let isConditionalSugar = false, i2 = 0, j = -1;
            for (; ++j < keys2.length; ) {
              const key = keys2[j], curIsConditionalSugar = "" === key || "." !== key[0];
              if (0 == i2++)
                isConditionalSugar = curIsConditionalSugar;
              else if (isConditionalSugar !== curIsConditionalSugar)
                throw new ERR_INVALID_PACKAGE_CONFIG2((0, _url().fileURLToPath)(packageJsonUrl2), base2, `"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`);
            }
            return isConditionalSugar;
          }(exports3, packageJsonUrl, base) && (exports3 = { ".": exports3 }), own2.call(exports3, packageSubpath)) {
            const resolved = resolvePackageTarget2(packageJsonUrl, exports3[packageSubpath], "", packageSubpath, base, false, false, conditions);
            return null == resolved && throwExportsNotFound2(packageSubpath, packageJsonUrl, base), { resolved, exact: true };
          }
          let bestMatch = "";
          const keys = Object.getOwnPropertyNames(exports3);
          let i = -1;
          for (; ++i < keys.length; ) {
            const key = keys[i];
            ("*" === key[key.length - 1] && packageSubpath.startsWith(key.slice(0, -1)) && packageSubpath.length >= key.length && key.length > bestMatch.length || "/" === key[key.length - 1] && packageSubpath.startsWith(key) && key.length > bestMatch.length) && (bestMatch = key);
          }
          if (bestMatch) {
            const target = exports3[bestMatch], pattern = "*" === bestMatch[bestMatch.length - 1], resolved = resolvePackageTarget2(packageJsonUrl, target, packageSubpath.slice(bestMatch.length - (pattern ? 1 : 0)), bestMatch, base, pattern, false, conditions);
            return null == resolved && throwExportsNotFound2(packageSubpath, packageJsonUrl, base), pattern || emitFolderMapDeprecation2(bestMatch, packageJsonUrl, true, base), { resolved, exact: pattern };
          }
          throwExportsNotFound2(packageSubpath, packageJsonUrl, base);
        }
        function packageImportsResolve2(name, base, conditions) {
          if ("#" === name || name.startsWith("#/")) {
            throw new ERR_INVALID_MODULE_SPECIFIER2(name, "is not a valid internal imports specifier name", (0, _url().fileURLToPath)(base));
          }
          let packageJsonUrl;
          const packageConfig = getPackageScopeConfig2(base);
          if (packageConfig.exists) {
            packageJsonUrl = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
            const imports = packageConfig.imports;
            if (imports)
              if (own2.call(imports, name)) {
                const resolved = resolvePackageTarget2(packageJsonUrl, imports[name], "", name, base, false, true, conditions);
                if (null !== resolved)
                  return { resolved, exact: true };
              } else {
                let bestMatch = "";
                const keys = Object.getOwnPropertyNames(imports);
                let i = -1;
                for (; ++i < keys.length; ) {
                  const key = keys[i];
                  ("*" === key[key.length - 1] && name.startsWith(key.slice(0, -1)) && name.length >= key.length && key.length > bestMatch.length || "/" === key[key.length - 1] && name.startsWith(key) && key.length > bestMatch.length) && (bestMatch = key);
                }
                if (bestMatch) {
                  const target = imports[bestMatch], pattern = "*" === bestMatch[bestMatch.length - 1], resolved = resolvePackageTarget2(packageJsonUrl, target, name.slice(bestMatch.length - (pattern ? 1 : 0)), bestMatch, base, pattern, true, conditions);
                  if (null !== resolved)
                    return pattern || emitFolderMapDeprecation2(bestMatch, packageJsonUrl, false, base), { resolved, exact: pattern };
                }
              }
          }
          !function(specifier, packageJsonUrl2, base2) {
            throw new ERR_PACKAGE_IMPORT_NOT_DEFINED2(specifier, packageJsonUrl2 && (0, _url().fileURLToPath)(new (_url()).URL(".", packageJsonUrl2)), (0, _url().fileURLToPath)(base2));
          }(name, packageJsonUrl, base);
        }
        function packageResolve2(specifier, base, conditions) {
          const { packageName, packageSubpath, isScoped } = function(specifier2, base2) {
            let separatorIndex = specifier2.indexOf("/"), validPackageName = true, isScoped2 = false;
            "@" === specifier2[0] && (isScoped2 = true, -1 === separatorIndex || 0 === specifier2.length ? validPackageName = false : separatorIndex = specifier2.indexOf("/", separatorIndex + 1));
            const packageName2 = -1 === separatorIndex ? specifier2 : specifier2.slice(0, separatorIndex);
            let i = -1;
            for (; ++i < packageName2.length; )
              if ("%" === packageName2[i] || "\\" === packageName2[i]) {
                validPackageName = false;
                break;
              }
            if (!validPackageName)
              throw new ERR_INVALID_MODULE_SPECIFIER2(specifier2, "is not a valid package name", (0, _url().fileURLToPath)(base2));
            return { packageName: packageName2, packageSubpath: "." + (-1 === separatorIndex ? "" : specifier2.slice(separatorIndex)), isScoped: isScoped2 };
          }(specifier, base), packageConfig = getPackageScopeConfig2(base);
          if (packageConfig.exists) {
            const packageJsonUrl2 = (0, _url().pathToFileURL)(packageConfig.pjsonPath);
            if (packageConfig.name === packageName && void 0 !== packageConfig.exports && null !== packageConfig.exports)
              return packageExportsResolve2(packageJsonUrl2, packageSubpath, packageConfig, base, conditions).resolved;
          }
          let lastPath, packageJsonUrl = new (_url()).URL("./node_modules/" + packageName + "/package.json", base), packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
          do {
            if (!tryStatSync2(packageJsonPath.slice(0, -13)).isDirectory()) {
              lastPath = packageJsonPath, packageJsonUrl = new (_url()).URL((isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json", packageJsonUrl), packageJsonPath = (0, _url().fileURLToPath)(packageJsonUrl);
              continue;
            }
            const packageConfig2 = getPackageConfig2(packageJsonPath, specifier, base);
            return void 0 !== packageConfig2.exports && null !== packageConfig2.exports ? packageExportsResolve2(packageJsonUrl, packageSubpath, packageConfig2, base, conditions).resolved : "." === packageSubpath ? legacyMainResolve2(packageJsonUrl, packageConfig2, base) : new (_url()).URL(packageSubpath, packageJsonUrl);
          } while (packageJsonPath.length !== lastPath.length);
          throw new ERR_MODULE_NOT_FOUND2(packageName, (0, _url().fileURLToPath)(base));
        }
        function moduleResolve2(specifier, base, conditions) {
          let resolved;
          if (function(specifier2) {
            return "" !== specifier2 && ("/" === specifier2[0] || function(specifier3) {
              if ("." === specifier3[0]) {
                if (1 === specifier3.length || "/" === specifier3[1])
                  return true;
                if ("." === specifier3[1] && (2 === specifier3.length || "/" === specifier3[2]))
                  return true;
              }
              return false;
            }(specifier2));
          }(specifier))
            resolved = new (_url()).URL(specifier, base);
          else if ("#" === specifier[0])
            ({ resolved } = packageImportsResolve2(specifier, base, conditions));
          else
            try {
              resolved = new (_url()).URL(specifier);
            } catch (_unused3) {
              resolved = packageResolve2(specifier, base, conditions);
            }
          return function(resolved2, base2) {
            if (encodedSepRegEx2.test(resolved2.pathname))
              throw new ERR_INVALID_MODULE_SPECIFIER2(resolved2.pathname, 'must not include encoded "/" or "\\" characters', (0, _url().fileURLToPath)(base2));
            const path3 = (0, _url().fileURLToPath)(resolved2), stats = tryStatSync2(path3.endsWith("/") ? path3.slice(-1) : path3);
            if (stats.isDirectory()) {
              const error = new ERR_UNSUPPORTED_DIR_IMPORT2(path3, (0, _url().fileURLToPath)(base2));
              throw error.url = String(resolved2), error;
            }
            if (!stats.isFile())
              throw new ERR_MODULE_NOT_FOUND2(path3 || resolved2.pathname, base2 && (0, _url().fileURLToPath)(base2), "module");
            return resolved2;
          }(resolved, base);
        }
        function defaultResolve(specifier, context = {}) {
          const { parentURL } = context;
          let parsed;
          try {
            if (parsed = new (_url()).URL(specifier), "data:" === parsed.protocol)
              return { url: specifier };
          } catch (_unused4) {
          }
          if (parsed && "node:" === parsed.protocol)
            return { url: specifier };
          if (parsed && "file:" !== parsed.protocol && "data:" !== parsed.protocol)
            throw new ERR_UNSUPPORTED_ESM_URL_SCHEME2(parsed);
          if (listOfBuiltins.includes(specifier))
            return { url: "node:" + specifier };
          parentURL.startsWith("data:") && new (_url()).URL(specifier, parentURL);
          const conditions = function(conditions2) {
            if (void 0 !== conditions2 && conditions2 !== DEFAULT_CONDITIONS) {
              if (!Array.isArray(conditions2))
                throw new ERR_INVALID_ARG_VALUE2("conditions", conditions2, "expected an array");
              return new Set(conditions2);
            }
            return DEFAULT_CONDITIONS_SET2;
          }(context.conditions);
          let url = moduleResolve2(specifier, new (_url()).URL(parentURL), conditions);
          const urlPath = (0, _url().fileURLToPath)(url), real = (0, _fs().realpathSync)(urlPath), old = url;
          return url = (0, _url().pathToFileURL)(real + (urlPath.endsWith(_path().sep) ? "/" : "")), url.search = old.search, url.hash = old.hash, { url: `${url}` };
        }
        function _resolve2() {
          return (_resolve2 = _asyncToGenerator(function* (specifier, parent) {
            if (!parent)
              throw new Error("Please pass `parent`: `import-meta-resolve` cannot ponyfill that");
            try {
              return defaultResolve(specifier, { parentURL: parent }).url;
            } catch (error) {
              return "ERR_UNSUPPORTED_DIR_IMPORT" === error.code ? error.url : Promise.reject(error);
            }
          })).apply(this, arguments);
        }
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/buffer.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        exports2.default = class {
          constructor(map) {
            this._map = null, this._buf = "", this._str = "", this._appendCount = 0, this._last = 0, this._queue = [], this._queueCursor = 0, this._position = { line: 1, column: 0 }, this._sourcePosition = { identifierName: void 0, line: void 0, column: void 0, filename: void 0 }, this._disallowedPop = { identifierName: void 0, line: void 0, column: void 0, filename: void 0, objectReusable: true }, this._map = map, this._allocQueue();
          }
          _allocQueue() {
            const queue = this._queue;
            for (let i = 0; i < 16; i++)
              queue.push({ char: 0, repeat: 1, line: void 0, column: void 0, identifierName: void 0, filename: "" });
          }
          _pushQueue(char, repeat, line, column, identifierName, filename) {
            const cursor = this._queueCursor;
            cursor === this._queue.length && this._allocQueue();
            const item = this._queue[cursor];
            item.char = char, item.repeat = repeat, item.line = line, item.column = column, item.identifierName = identifierName, item.filename = filename, this._queueCursor++;
          }
          _popQueue() {
            if (0 === this._queueCursor)
              throw new Error("Cannot pop from empty queue");
            return this._queue[--this._queueCursor];
          }
          get() {
            this._flush();
            const map = this._map, result = { code: (this._buf + this._str).trimRight(), decodedMap: null == map ? void 0 : map.getDecoded(), get map() {
              const resultMap = map ? map.get() : null;
              return result.map = resultMap, resultMap;
            }, set map(value) {
              Object.defineProperty(result, "map", { value, writable: true });
            }, get rawMappings() {
              const mappings = null == map ? void 0 : map.getRawMappings();
              return result.rawMappings = mappings, mappings;
            }, set rawMappings(value) {
              Object.defineProperty(result, "rawMappings", { value, writable: true });
            } };
            return result;
          }
          append(str, maybeNewline) {
            this._flush(), this._append(str, this._sourcePosition, maybeNewline);
          }
          appendChar(char) {
            this._flush(), this._appendChar(char, 1, this._sourcePosition);
          }
          queue(char) {
            if (10 === char)
              for (; 0 !== this._queueCursor; ) {
                const char2 = this._queue[this._queueCursor - 1].char;
                if (32 !== char2 && 9 !== char2)
                  break;
                this._queueCursor--;
              }
            const sourcePosition = this._sourcePosition;
            this._pushQueue(char, 1, sourcePosition.line, sourcePosition.column, sourcePosition.identifierName, sourcePosition.filename);
          }
          queueIndentation(char, repeat) {
            this._pushQueue(char, repeat, void 0, void 0, void 0, void 0);
          }
          _flush() {
            const queueCursor = this._queueCursor, queue = this._queue;
            for (let i = 0; i < queueCursor; i++) {
              const item = queue[i];
              this._appendChar(item.char, item.repeat, item);
            }
            this._queueCursor = 0;
          }
          _appendChar(char, repeat, sourcePos) {
            this._last = char, this._str += repeat > 1 ? String.fromCharCode(char).repeat(repeat) : String.fromCharCode(char), 10 !== char ? (this._mark(sourcePos.line, sourcePos.column, sourcePos.identifierName, sourcePos.filename), this._position.column += repeat) : (this._position.line++, this._position.column = 0);
          }
          _append(str, sourcePos, maybeNewline) {
            const len = str.length;
            if (this._last = str.charCodeAt(len - 1), ++this._appendCount > 4096 ? (this._str, this._buf += this._str, this._str = str, this._appendCount = 0) : this._str += str, !maybeNewline && !this._map)
              return void (this._position.column += len);
            const { column, identifierName, filename } = sourcePos;
            let line = sourcePos.line, i = str.indexOf("\n"), last = 0;
            for (0 !== i && this._mark(line, column, identifierName, filename); -1 !== i; )
              this._position.line++, this._position.column = 0, last = i + 1, last < str.length && this._mark(++line, 0, identifierName, filename), i = str.indexOf("\n", last);
            this._position.column += str.length - last;
          }
          _mark(line, column, identifierName, filename) {
            var _this$_map;
            null == (_this$_map = this._map) || _this$_map.mark(this._position, line, column, identifierName, filename);
          }
          removeTrailingNewline() {
            const queueCursor = this._queueCursor;
            0 !== queueCursor && 10 === this._queue[queueCursor - 1].char && this._queueCursor--;
          }
          removeLastSemicolon() {
            const queueCursor = this._queueCursor;
            0 !== queueCursor && 59 === this._queue[queueCursor - 1].char && this._queueCursor--;
          }
          getLastChar() {
            const queueCursor = this._queueCursor;
            return 0 !== queueCursor ? this._queue[queueCursor - 1].char : this._last;
          }
          endsWithCharAndNewline() {
            const queue = this._queue, queueCursor = this._queueCursor;
            if (0 !== queueCursor) {
              if (10 !== queue[queueCursor - 1].char)
                return;
              return queueCursor > 1 ? queue[queueCursor - 2].char : this._last;
            }
          }
          hasContent() {
            return 0 !== this._queueCursor || !!this._last;
          }
          exactSource(loc, cb) {
            if (!this._map)
              return cb();
            this.source("start", loc), cb(), this.source("end", loc), this._disallowPop("start", loc);
          }
          source(prop, loc) {
            loc && this._normalizePosition(prop, loc, this._sourcePosition);
          }
          withSource(prop, loc, cb) {
            if (!this._map)
              return cb();
            const originalLine = this._sourcePosition.line, originalColumn = this._sourcePosition.column, originalFilename = this._sourcePosition.filename, originalIdentifierName = this._sourcePosition.identifierName;
            this.source(prop, loc), cb(), (this._disallowedPop.objectReusable || this._disallowedPop.line !== originalLine || this._disallowedPop.column !== originalColumn || this._disallowedPop.filename !== originalFilename) && (this._sourcePosition.line = originalLine, this._sourcePosition.column = originalColumn, this._sourcePosition.filename = originalFilename, this._sourcePosition.identifierName = originalIdentifierName, this._disallowedPop.objectReusable = true);
          }
          _disallowPop(prop, loc) {
            if (!loc)
              return;
            const disallowedPop = this._disallowedPop;
            this._normalizePosition(prop, loc, disallowedPop), disallowedPop.objectReusable = false;
          }
          _normalizePosition(prop, loc, targetObj) {
            const pos = loc[prop];
            targetObj.identifierName = "start" === prop && loc.identifierName || void 0, pos ? (targetObj.line = pos.line, targetObj.column = pos.column, targetObj.filename = loc.filename) : (targetObj.line = null, targetObj.column = null, targetObj.filename = null);
          }
          getCurrentColumn() {
            const queue = this._queue;
            let lastIndex = -1, len = 0;
            for (let i = 0; i < this._queueCursor; i++) {
              const item = queue[i];
              10 === item.char && (lastIndex = i, len += item.repeat);
            }
            return -1 === lastIndex ? this._position.column + len : len - 1 - lastIndex;
          }
          getCurrentLine() {
            let count = 0;
            const queue = this._queue;
            for (let i = 0; i < this._queueCursor; i++)
              10 === queue[i].char && count++;
            return this._position.line + count;
          }
        };
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/base.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.BlockStatement = function(node) {
          var _node$directives;
          this.tokenChar(123), this.printInnerComments(node);
          const hasDirectives = null == (_node$directives = node.directives) ? void 0 : _node$directives.length;
          node.body.length || hasDirectives ? (this.newline(), this.printSequence(node.directives, node, { indent: true }), hasDirectives && this.newline(), this.printSequence(node.body, node, { indent: true }), this.removeTrailingNewline(), this.source("end", node.loc), this.endsWith(10) || this.newline(), this.rightBrace()) : (this.source("end", node.loc), this.tokenChar(125));
        }, exports2.Directive = function(node) {
          this.print(node.value, node), this.semicolon();
        }, exports2.DirectiveLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw)
            return void this.token(raw);
          const { value } = node;
          if (unescapedDoubleQuoteRE.test(value)) {
            if (unescapedSingleQuoteRE.test(value))
              throw new Error("Malformed AST: it is not possible to print a directive containing both unescaped single and double quotes.");
            this.token(`'${value}'`);
          } else
            this.token(`"${value}"`);
        }, exports2.File = function(node) {
          node.program && this.print(node.program.interpreter, node);
          this.print(node.program, node);
        }, exports2.InterpreterDirective = function(node) {
          this.token(`#!${node.value}
`, true);
        }, exports2.Placeholder = function(node) {
          this.token("%%"), this.print(node.name), this.token("%%"), "Statement" === node.expectedNode && this.semicolon();
        }, exports2.Program = function(node) {
          this.printInnerComments(node, false), this.printSequence(node.directives, node), node.directives && node.directives.length && this.newline();
          this.printSequence(node.body, node);
        };
        const unescapedSingleQuoteRE = /(?:^|[^\\])(?:\\\\)*'/, unescapedDoubleQuoteRE = /(?:^|[^\\])(?:\\\\)*"/;
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/classes.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ClassAccessorProperty = function(node) {
          this.printJoin(node.decorators, node), this.source("end", node.key.loc), this.tsPrintClassMemberModifiers(node), this.word("accessor"), this.printInnerComments(node), this.space(), node.computed ? (this.tokenChar(91), this.print(node.key, node), this.tokenChar(93)) : (this._variance(node), this.print(node.key, node));
          node.optional && this.tokenChar(63);
          node.definite && this.tokenChar(33);
          this.print(node.typeAnnotation, node), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value, node));
          this.semicolon();
        }, exports2.ClassBody = function(node) {
          this.tokenChar(123), this.printInnerComments(node), 0 === node.body.length ? this.tokenChar(125) : (this.newline(), this.indent(), this.printSequence(node.body, node), this.dedent(), this.endsWith(10) || this.newline(), this.rightBrace());
        }, exports2.ClassExpression = exports2.ClassDeclaration = function(node, parent) {
          this.format.decoratorsBeforeExport && (isExportDefaultDeclaration(parent) || isExportNamedDeclaration(parent)) || this.printJoin(node.decorators, node);
          node.declare && (this.word("declare"), this.space());
          node.abstract && (this.word("abstract"), this.space());
          this.word("class"), this.printInnerComments(node), node.id && (this.space(), this.print(node.id, node));
          this.print(node.typeParameters, node), node.superClass && (this.space(), this.word("extends"), this.space(), this.print(node.superClass, node), this.print(node.superTypeParameters, node));
          node.implements && (this.space(), this.word("implements"), this.space(), this.printList(node.implements, node));
          this.space(), this.print(node.body, node);
        }, exports2.ClassMethod = function(node) {
          this._classMethodHead(node), this.space(), this.print(node.body, node);
        }, exports2.ClassPrivateMethod = function(node) {
          this._classMethodHead(node), this.space(), this.print(node.body, node);
        }, exports2.ClassPrivateProperty = function(node) {
          this.printJoin(node.decorators, node), node.static && (this.word("static"), this.space());
          this.print(node.key, node), this.print(node.typeAnnotation, node), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value, node));
          this.semicolon();
        }, exports2.ClassProperty = function(node) {
          this.printJoin(node.decorators, node), this.source("end", node.key.loc), this.tsPrintClassMemberModifiers(node), node.computed ? (this.tokenChar(91), this.print(node.key, node), this.tokenChar(93)) : (this._variance(node), this.print(node.key, node));
          node.optional && this.tokenChar(63);
          node.definite && this.tokenChar(33);
          this.print(node.typeAnnotation, node), node.value && (this.space(), this.tokenChar(61), this.space(), this.print(node.value, node));
          this.semicolon();
        }, exports2.StaticBlock = function(node) {
          this.word("static"), this.space(), this.tokenChar(123), 0 === node.body.length ? this.tokenChar(125) : (this.newline(), this.printSequence(node.body, node, { indent: true }), this.rightBrace());
        }, exports2._classMethodHead = function(node) {
          this.printJoin(node.decorators, node), this.source("end", node.key.loc), this.tsPrintClassMemberModifiers(node), this._methodHead(node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { isExportDefaultDeclaration, isExportNamedDeclaration } = _t;
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/expressions.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.LogicalExpression = exports2.BinaryExpression = exports2.AssignmentExpression = function(node, parent) {
          const parens = this.inForStatementInitCounter && "in" === node.operator && !n.needsParens(node, parent);
          parens && this.tokenChar(40);
          this.print(node.left, node), this.space(), "in" === node.operator || "instanceof" === node.operator ? this.word(node.operator) : this.token(node.operator);
          this.space(), this.print(node.right, node), parens && this.tokenChar(41);
        }, exports2.AssignmentPattern = function(node) {
          this.print(node.left, node), node.left.optional && this.tokenChar(63);
          this.print(node.left.typeAnnotation, node), this.space(), this.tokenChar(61), this.space(), this.print(node.right, node);
        }, exports2.AwaitExpression = function(node) {
          this.word("await"), node.argument && (this.space(), this.printTerminatorless(node.argument, node, false));
        }, exports2.BindExpression = function(node) {
          this.print(node.object, node), this.token("::"), this.print(node.callee, node);
        }, exports2.CallExpression = function(node) {
          this.print(node.callee, node), this.print(node.typeArguments, node), this.print(node.typeParameters, node), this.tokenChar(40), this.printList(node.arguments, node), this.tokenChar(41);
        }, exports2.ConditionalExpression = function(node) {
          this.print(node.test, node), this.space(), this.tokenChar(63), this.space(), this.print(node.consequent, node), this.space(), this.tokenChar(58), this.space(), this.print(node.alternate, node);
        }, exports2.Decorator = function(node) {
          this.tokenChar(64);
          const { expression } = node;
          !function(node2) {
            if ("ParenthesizedExpression" === node2.type)
              return false;
            return !isDecoratorMemberExpression("CallExpression" === node2.type ? node2.callee : node2);
          }(expression) ? this.print(expression, node) : (this.tokenChar(40), this.print(expression, node), this.tokenChar(41));
          this.newline();
        }, exports2.DoExpression = function(node) {
          node.async && (this.word("async"), this.space());
          this.word("do"), this.space(), this.print(node.body, node);
        }, exports2.EmptyStatement = function() {
          this.semicolon(true);
        }, exports2.ExpressionStatement = function(node) {
          this.print(node.expression, node), this.semicolon();
        }, exports2.Import = function() {
          this.word("import");
        }, exports2.MemberExpression = function(node) {
          if (this.print(node.object, node), !node.computed && isMemberExpression(node.property))
            throw new TypeError("Got a MemberExpression for MemberExpression property");
          let computed = node.computed;
          isLiteral(node.property) && "number" == typeof node.property.value && (computed = true);
          computed ? (this.tokenChar(91), this.print(node.property, node), this.tokenChar(93)) : (this.tokenChar(46), this.print(node.property, node));
        }, exports2.MetaProperty = function(node) {
          this.print(node.meta, node), this.tokenChar(46), this.print(node.property, node);
        }, exports2.ModuleExpression = function(node) {
          this.word("module"), this.space(), this.tokenChar(123), 0 === node.body.body.length ? this.tokenChar(125) : (this.newline(), this.printSequence(node.body.body, node, { indent: true }), this.rightBrace());
        }, exports2.NewExpression = function(node, parent) {
          if (this.word("new"), this.space(), this.print(node.callee, node), this.format.minified && 0 === node.arguments.length && !node.optional && !isCallExpression(parent, { callee: node }) && !isMemberExpression(parent) && !isNewExpression(parent))
            return;
          this.print(node.typeArguments, node), this.print(node.typeParameters, node), node.optional && this.token("?.");
          this.tokenChar(40), this.printList(node.arguments, node), this.tokenChar(41);
        }, exports2.OptionalCallExpression = function(node) {
          this.print(node.callee, node), this.print(node.typeArguments, node), this.print(node.typeParameters, node), node.optional && this.token("?.");
          this.tokenChar(40), this.printList(node.arguments, node), this.tokenChar(41);
        }, exports2.OptionalMemberExpression = function(node) {
          if (this.print(node.object, node), !node.computed && isMemberExpression(node.property))
            throw new TypeError("Got a MemberExpression for MemberExpression property");
          let computed = node.computed;
          isLiteral(node.property) && "number" == typeof node.property.value && (computed = true);
          node.optional && this.token("?.");
          computed ? (this.tokenChar(91), this.print(node.property, node), this.tokenChar(93)) : (node.optional || this.tokenChar(46), this.print(node.property, node));
        }, exports2.ParenthesizedExpression = function(node) {
          this.tokenChar(40), this.print(node.expression, node), this.tokenChar(41);
        }, exports2.PrivateName = function(node) {
          this.tokenChar(35), this.print(node.id, node);
        }, exports2.SequenceExpression = function(node) {
          this.printList(node.expressions, node);
        }, exports2.Super = function() {
          this.word("super");
        }, exports2.ThisExpression = function() {
          this.word("this");
        }, exports2.UnaryExpression = function(node) {
          "void" === node.operator || "delete" === node.operator || "typeof" === node.operator || "throw" === node.operator ? (this.word(node.operator), this.space()) : this.token(node.operator);
          this.print(node.argument, node);
        }, exports2.UpdateExpression = function(node) {
          node.prefix ? (this.token(node.operator), this.print(node.argument, node)) : (this.printTerminatorless(node.argument, node, true), this.token(node.operator));
        }, exports2.V8IntrinsicIdentifier = function(node) {
          this.tokenChar(37), this.word(node.name);
        }, exports2.YieldExpression = function(node) {
          this.word("yield"), node.delegate && this.tokenChar(42);
          node.argument && (this.space(), this.printTerminatorless(node.argument, node, false));
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), n = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/node/index.js");
        const { isCallExpression, isLiteral, isMemberExpression, isNewExpression } = _t;
        function isDecoratorMemberExpression(node) {
          switch (node.type) {
            case "Identifier":
              return true;
            case "MemberExpression":
              return !node.computed && "Identifier" === node.property.type && isDecoratorMemberExpression(node.object);
            default:
              return false;
          }
        }
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/flow.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.AnyTypeAnnotation = function() {
          this.word("any");
        }, exports2.ArrayTypeAnnotation = function(node) {
          this.print(node.elementType, node, true), this.tokenChar(91), this.tokenChar(93);
        }, exports2.BooleanLiteralTypeAnnotation = function(node) {
          this.word(node.value ? "true" : "false");
        }, exports2.BooleanTypeAnnotation = function() {
          this.word("boolean");
        }, exports2.DeclareClass = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("class"), this.space(), this._interfaceish(node);
        }, exports2.DeclareExportAllDeclaration = function(node) {
          this.word("declare"), this.space(), _modules.ExportAllDeclaration.call(this, node);
        }, exports2.DeclareExportDeclaration = function(node) {
          this.word("declare"), this.space(), this.word("export"), this.space(), node.default && (this.word("default"), this.space());
          FlowExportDeclaration.call(this, node);
        }, exports2.DeclareFunction = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("function"), this.space(), this.print(node.id, node), this.print(node.id.typeAnnotation.typeAnnotation, node), node.predicate && (this.space(), this.print(node.predicate, node));
          this.semicolon();
        }, exports2.DeclareInterface = function(node) {
          this.word("declare"), this.space(), this.InterfaceDeclaration(node);
        }, exports2.DeclareModule = function(node) {
          this.word("declare"), this.space(), this.word("module"), this.space(), this.print(node.id, node), this.space(), this.print(node.body, node);
        }, exports2.DeclareModuleExports = function(node) {
          this.word("declare"), this.space(), this.word("module"), this.tokenChar(46), this.word("exports"), this.print(node.typeAnnotation, node);
        }, exports2.DeclareOpaqueType = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.OpaqueType(node);
        }, exports2.DeclareTypeAlias = function(node) {
          this.word("declare"), this.space(), this.TypeAlias(node);
        }, exports2.DeclareVariable = function(node, parent) {
          isDeclareExportDeclaration(parent) || (this.word("declare"), this.space());
          this.word("var"), this.space(), this.print(node.id, node), this.print(node.id.typeAnnotation, node), this.semicolon();
        }, exports2.DeclaredPredicate = function(node) {
          this.tokenChar(37), this.word("checks"), this.tokenChar(40), this.print(node.value, node), this.tokenChar(41);
        }, exports2.EmptyTypeAnnotation = function() {
          this.word("empty");
        }, exports2.EnumBooleanBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "boolean", explicitType), enumBody(this, node);
        }, exports2.EnumBooleanMember = function(node) {
          enumInitializedMember(this, node);
        }, exports2.EnumDeclaration = function(node) {
          const { id, body } = node;
          this.word("enum"), this.space(), this.print(id, node), this.print(body, node);
        }, exports2.EnumDefaultedMember = function(node) {
          const { id } = node;
          this.print(id, node), this.tokenChar(44);
        }, exports2.EnumNumberBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "number", explicitType), enumBody(this, node);
        }, exports2.EnumNumberMember = function(node) {
          enumInitializedMember(this, node);
        }, exports2.EnumStringBody = function(node) {
          const { explicitType } = node;
          enumExplicitType(this, "string", explicitType), enumBody(this, node);
        }, exports2.EnumStringMember = function(node) {
          enumInitializedMember(this, node);
        }, exports2.EnumSymbolBody = function(node) {
          enumExplicitType(this, "symbol", true), enumBody(this, node);
        }, exports2.ExistsTypeAnnotation = function() {
          this.tokenChar(42);
        }, exports2.FunctionTypeAnnotation = function(node, parent) {
          this.print(node.typeParameters, node), this.tokenChar(40), node.this && (this.word("this"), this.tokenChar(58), this.space(), this.print(node.this.typeAnnotation, node), (node.params.length || node.rest) && (this.tokenChar(44), this.space()));
          this.printList(node.params, node), node.rest && (node.params.length && (this.tokenChar(44), this.space()), this.token("..."), this.print(node.rest, node));
          this.tokenChar(41), parent && ("ObjectTypeCallProperty" === parent.type || "DeclareFunction" === parent.type || "ObjectTypeProperty" === parent.type && parent.method) ? this.tokenChar(58) : (this.space(), this.token("=>"));
          this.space(), this.print(node.returnType, node);
        }, exports2.FunctionTypeParam = function(node) {
          this.print(node.name, node), node.optional && this.tokenChar(63);
          node.name && (this.tokenChar(58), this.space());
          this.print(node.typeAnnotation, node);
        }, exports2.IndexedAccessType = function(node) {
          this.print(node.objectType, node, true), this.tokenChar(91), this.print(node.indexType, node), this.tokenChar(93);
        }, exports2.InferredPredicate = function() {
          this.tokenChar(37), this.word("checks");
        }, exports2.InterfaceDeclaration = function(node) {
          this.word("interface"), this.space(), this._interfaceish(node);
        }, exports2.GenericTypeAnnotation = exports2.ClassImplements = exports2.InterfaceExtends = function(node) {
          this.print(node.id, node), this.print(node.typeParameters, node, true);
        }, exports2.InterfaceTypeAnnotation = function(node) {
          this.word("interface"), node.extends && node.extends.length && (this.space(), this.word("extends"), this.space(), this.printList(node.extends, node));
          this.space(), this.print(node.body, node);
        }, exports2.IntersectionTypeAnnotation = function(node) {
          this.printJoin(node.types, node, { separator: andSeparator });
        }, exports2.MixedTypeAnnotation = function() {
          this.word("mixed");
        }, exports2.NullLiteralTypeAnnotation = function() {
          this.word("null");
        }, exports2.NullableTypeAnnotation = function(node) {
          this.tokenChar(63), this.print(node.typeAnnotation, node);
        }, Object.defineProperty(exports2, "NumberLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _types2.NumericLiteral;
        } }), exports2.NumberTypeAnnotation = function() {
          this.word("number");
        }, exports2.ObjectTypeAnnotation = function(node) {
          node.exact ? this.token("{|") : this.tokenChar(123);
          const props = [...node.properties, ...node.callProperties || [], ...node.indexers || [], ...node.internalSlots || []];
          props.length && (this.space(), this.printJoin(props, node, { addNewlines(leading) {
            if (leading && !props[0])
              return 1;
          }, indent: true, statement: true, iterator: () => {
            (1 !== props.length || node.inexact) && (this.tokenChar(44), this.space());
          } }), this.space());
          node.inexact && (this.indent(), this.token("..."), props.length && this.newline(), this.dedent());
          node.exact ? this.token("|}") : this.tokenChar(125);
        }, exports2.ObjectTypeCallProperty = function(node) {
          node.static && (this.word("static"), this.space());
          this.print(node.value, node);
        }, exports2.ObjectTypeIndexer = function(node) {
          node.static && (this.word("static"), this.space());
          this._variance(node), this.tokenChar(91), node.id && (this.print(node.id, node), this.tokenChar(58), this.space());
          this.print(node.key, node), this.tokenChar(93), this.tokenChar(58), this.space(), this.print(node.value, node);
        }, exports2.ObjectTypeInternalSlot = function(node) {
          node.static && (this.word("static"), this.space());
          this.tokenChar(91), this.tokenChar(91), this.print(node.id, node), this.tokenChar(93), this.tokenChar(93), node.optional && this.tokenChar(63);
          node.method || (this.tokenChar(58), this.space());
          this.print(node.value, node);
        }, exports2.ObjectTypeProperty = function(node) {
          node.proto && (this.word("proto"), this.space());
          node.static && (this.word("static"), this.space());
          "get" !== node.kind && "set" !== node.kind || (this.word(node.kind), this.space());
          this._variance(node), this.print(node.key, node), node.optional && this.tokenChar(63);
          node.method || (this.tokenChar(58), this.space());
          this.print(node.value, node);
        }, exports2.ObjectTypeSpreadProperty = function(node) {
          this.token("..."), this.print(node.argument, node);
        }, exports2.OpaqueType = function(node) {
          this.word("opaque"), this.space(), this.word("type"), this.space(), this.print(node.id, node), this.print(node.typeParameters, node), node.supertype && (this.tokenChar(58), this.space(), this.print(node.supertype, node));
          node.impltype && (this.space(), this.tokenChar(61), this.space(), this.print(node.impltype, node));
          this.semicolon();
        }, exports2.OptionalIndexedAccessType = function(node) {
          this.print(node.objectType, node), node.optional && this.token("?.");
          this.tokenChar(91), this.print(node.indexType, node), this.tokenChar(93);
        }, exports2.QualifiedTypeIdentifier = function(node) {
          this.print(node.qualification, node), this.tokenChar(46), this.print(node.id, node);
        }, Object.defineProperty(exports2, "StringLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _types2.StringLiteral;
        } }), exports2.StringTypeAnnotation = function() {
          this.word("string");
        }, exports2.SymbolTypeAnnotation = function() {
          this.word("symbol");
        }, exports2.ThisTypeAnnotation = function() {
          this.word("this");
        }, exports2.TupleTypeAnnotation = function(node) {
          this.tokenChar(91), this.printList(node.types, node), this.tokenChar(93);
        }, exports2.TypeAlias = function(node) {
          this.word("type"), this.space(), this.print(node.id, node), this.print(node.typeParameters, node), this.space(), this.tokenChar(61), this.space(), this.print(node.right, node), this.semicolon();
        }, exports2.TypeAnnotation = function(node) {
          this.tokenChar(58), this.space(), node.optional && this.tokenChar(63);
          this.print(node.typeAnnotation, node);
        }, exports2.TypeCastExpression = function(node) {
          this.tokenChar(40), this.print(node.expression, node), this.print(node.typeAnnotation, node), this.tokenChar(41);
        }, exports2.TypeParameter = function(node) {
          this._variance(node), this.word(node.name), node.bound && this.print(node.bound, node);
          node.default && (this.space(), this.tokenChar(61), this.space(), this.print(node.default, node));
        }, exports2.TypeParameterDeclaration = exports2.TypeParameterInstantiation = function(node) {
          this.tokenChar(60), this.printList(node.params, node, {}), this.tokenChar(62);
        }, exports2.TypeofTypeAnnotation = function(node) {
          this.word("typeof"), this.space(), this.print(node.argument, node);
        }, exports2.UnionTypeAnnotation = function(node) {
          this.printJoin(node.types, node, { separator: orSeparator });
        }, exports2.Variance = function(node) {
          "plus" === node.kind ? this.tokenChar(43) : this.tokenChar(45);
        }, exports2.VoidTypeAnnotation = function() {
          this.word("void");
        }, exports2._interfaceish = function(node) {
          var _node$extends;
          this.print(node.id, node), this.print(node.typeParameters, node), null != (_node$extends = node.extends) && _node$extends.length && (this.space(), this.word("extends"), this.space(), this.printList(node.extends, node));
          node.mixins && node.mixins.length && (this.space(), this.word("mixins"), this.space(), this.printList(node.mixins, node));
          node.implements && node.implements.length && (this.space(), this.word("implements"), this.space(), this.printList(node.implements, node));
          this.space(), this.print(node.body, node);
        }, exports2._variance = function(node) {
          node.variance && ("plus" === node.variance.kind ? this.tokenChar(43) : "minus" === node.variance.kind && this.tokenChar(45));
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _modules = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/modules.js"), _types2 = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/types.js");
        const { isDeclareExportDeclaration, isStatement } = _t;
        function enumExplicitType(context, name, hasExplicitType) {
          hasExplicitType && (context.space(), context.word("of"), context.space(), context.word(name)), context.space();
        }
        function enumBody(context, node) {
          const { members } = node;
          context.token("{"), context.indent(), context.newline();
          for (const member of members)
            context.print(member, node), context.newline();
          node.hasUnknownMembers && (context.token("..."), context.newline()), context.dedent(), context.token("}");
        }
        function enumInitializedMember(context, node) {
          const { id, init } = node;
          context.print(id, node), context.space(), context.token("="), context.space(), context.print(init, node), context.token(",");
        }
        function FlowExportDeclaration(node) {
          if (node.declaration) {
            const declar = node.declaration;
            this.print(declar, node), isStatement(declar) || this.semicolon();
          } else
            this.tokenChar(123), node.specifiers.length && (this.space(), this.printList(node.specifiers, node), this.space()), this.tokenChar(125), node.source && (this.space(), this.word("from"), this.space(), this.print(node.source, node)), this.semicolon();
        }
        function andSeparator() {
          this.space(), this.tokenChar(38), this.space();
        }
        function orSeparator() {
          this.space(), this.tokenChar(124), this.space();
        }
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var _templateLiterals = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/template-literals.js");
        Object.keys(_templateLiterals).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _templateLiterals[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _templateLiterals[key];
          } }));
        });
        var _expressions = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/expressions.js");
        Object.keys(_expressions).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _expressions[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _expressions[key];
          } }));
        });
        var _statements = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/statements.js");
        Object.keys(_statements).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _statements[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _statements[key];
          } }));
        });
        var _classes = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/classes.js");
        Object.keys(_classes).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _classes[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _classes[key];
          } }));
        });
        var _methods = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/methods.js");
        Object.keys(_methods).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _methods[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _methods[key];
          } }));
        });
        var _modules = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/modules.js");
        Object.keys(_modules).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _modules[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _modules[key];
          } }));
        });
        var _types = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/types.js");
        Object.keys(_types).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _types[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _types[key];
          } }));
        });
        var _flow = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/flow.js");
        Object.keys(_flow).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _flow[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _flow[key];
          } }));
        });
        var _base = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/base.js");
        Object.keys(_base).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _base[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _base[key];
          } }));
        });
        var _jsx = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/jsx.js");
        Object.keys(_jsx).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _jsx[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _jsx[key];
          } }));
        });
        var _typescript = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/typescript.js");
        Object.keys(_typescript).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (key in exports2 && exports2[key] === _typescript[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _typescript[key];
          } }));
        });
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/jsx.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function spaceSeparator() {
          this.space();
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.JSXAttribute = function(node) {
          this.print(node.name, node), node.value && (this.tokenChar(61), this.print(node.value, node));
        }, exports2.JSXClosingElement = function(node) {
          this.token("</"), this.print(node.name, node), this.tokenChar(62);
        }, exports2.JSXClosingFragment = function() {
          this.token("</"), this.tokenChar(62);
        }, exports2.JSXElement = function(node) {
          const open = node.openingElement;
          if (this.print(open, node), open.selfClosing)
            return;
          this.indent();
          for (const child of node.children)
            this.print(child, node);
          this.dedent(), this.print(node.closingElement, node);
        }, exports2.JSXEmptyExpression = function(node) {
          this.printInnerComments(node);
        }, exports2.JSXExpressionContainer = function(node) {
          this.tokenChar(123), this.print(node.expression, node), this.tokenChar(125);
        }, exports2.JSXFragment = function(node) {
          this.print(node.openingFragment, node), this.indent();
          for (const child of node.children)
            this.print(child, node);
          this.dedent(), this.print(node.closingFragment, node);
        }, exports2.JSXIdentifier = function(node) {
          this.word(node.name);
        }, exports2.JSXMemberExpression = function(node) {
          this.print(node.object, node), this.tokenChar(46), this.print(node.property, node);
        }, exports2.JSXNamespacedName = function(node) {
          this.print(node.namespace, node), this.tokenChar(58), this.print(node.name, node);
        }, exports2.JSXOpeningElement = function(node) {
          this.tokenChar(60), this.print(node.name, node), this.print(node.typeParameters, node), node.attributes.length > 0 && (this.space(), this.printJoin(node.attributes, node, { separator: spaceSeparator }));
          node.selfClosing ? (this.space(), this.token("/>")) : this.tokenChar(62);
        }, exports2.JSXOpeningFragment = function() {
          this.tokenChar(60), this.tokenChar(62);
        }, exports2.JSXSpreadAttribute = function(node) {
          this.tokenChar(123), this.token("..."), this.print(node.argument, node), this.tokenChar(125);
        }, exports2.JSXSpreadChild = function(node) {
          this.tokenChar(123), this.token("..."), this.print(node.expression, node), this.tokenChar(125);
        }, exports2.JSXText = function(node) {
          const raw = this.getPossibleRaw(node);
          void 0 !== raw ? this.token(raw, true) : this.token(node.value, true);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/methods.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArrowFunctionExpression = function(node) {
          node.async && (this.word("async"), this.space());
          const firstParam = node.params[0];
          this.format.retainLines || this.format.auxiliaryCommentBefore || this.format.auxiliaryCommentAfter || 1 !== node.params.length || !isIdentifier(firstParam) || function(node2, param) {
            var _param$leadingComment, _param$trailingCommen;
            return !!(node2.typeParameters || node2.returnType || node2.predicate || param.typeAnnotation || param.optional || null != (_param$leadingComment = param.leadingComments) && _param$leadingComment.length || null != (_param$trailingCommen = param.trailingComments) && _param$trailingCommen.length);
          }(node, firstParam) ? this._params(node) : this.print(firstParam, node);
          this._predicate(node), this.space(), this.token("=>"), this.space(), this.print(node.body, node);
        }, exports2.FunctionDeclaration = exports2.FunctionExpression = function(node) {
          this._functionHead(node), this.space(), this.print(node.body, node);
        }, exports2._functionHead = function(node) {
          node.async && (this.word("async"), this.space());
          this.word("function"), node.generator && this.tokenChar(42);
          this.printInnerComments(node), this.space(), node.id && this.print(node.id, node);
          this._params(node), "TSDeclareFunction" !== node.type && this._predicate(node);
        }, exports2._methodHead = function(node) {
          const kind = node.kind, key = node.key;
          "get" !== kind && "set" !== kind || (this.word(kind), this.space());
          node.async && (this._catchUp("start", key.loc), this.word("async"), this.space());
          "method" !== kind && "init" !== kind || node.generator && this.tokenChar(42);
          node.computed ? (this.tokenChar(91), this.print(key, node), this.tokenChar(93)) : this.print(key, node);
          node.optional && this.tokenChar(63);
          this._params(node);
        }, exports2._param = function(parameter, parent) {
          this.printJoin(parameter.decorators, parameter), this.print(parameter, parent), parameter.optional && this.tokenChar(63);
          this.print(parameter.typeAnnotation, parameter);
        }, exports2._parameters = function(parameters, parent) {
          for (let i = 0; i < parameters.length; i++)
            this._param(parameters[i], parent), i < parameters.length - 1 && (this.tokenChar(44), this.space());
        }, exports2._params = function(node) {
          this.print(node.typeParameters, node), this.tokenChar(40), this._parameters(node.params, node), this.tokenChar(41), this.print(node.returnType, node, "ArrowFunctionExpression" === node.type);
        }, exports2._predicate = function(node) {
          node.predicate && (node.returnType || this.tokenChar(58), this.space(), this.print(node.predicate, node));
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { isIdentifier } = _t;
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/modules.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ExportAllDeclaration = function(node) {
          this.word("export"), this.space(), "type" === node.exportKind && (this.word("type"), this.space());
          this.tokenChar(42), this.space(), this.word("from"), this.space(), this.print(node.source, node), this.printAssertions(node), this.semicolon();
        }, exports2.ExportDefaultDeclaration = function(node) {
          this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration) && this.printJoin(node.declaration.decorators, node);
          this.word("export"), this.space(), this.word("default"), this.space();
          const declar = node.declaration;
          this.print(declar, node), isStatement(declar) || this.semicolon();
        }, exports2.ExportDefaultSpecifier = function(node) {
          this.print(node.exported, node);
        }, exports2.ExportNamedDeclaration = function(node) {
          this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration) && this.printJoin(node.declaration.decorators, node);
          if (this.word("export"), this.space(), node.declaration) {
            const declar = node.declaration;
            this.print(declar, node), isStatement(declar) || this.semicolon();
          } else {
            "type" === node.exportKind && (this.word("type"), this.space());
            const specifiers = node.specifiers.slice(0);
            let hasSpecial = false;
            for (; ; ) {
              const first = specifiers[0];
              if (!isExportDefaultSpecifier(first) && !isExportNamespaceSpecifier(first))
                break;
              hasSpecial = true, this.print(specifiers.shift(), node), specifiers.length && (this.tokenChar(44), this.space());
            }
            (specifiers.length || !specifiers.length && !hasSpecial) && (this.tokenChar(123), specifiers.length && (this.space(), this.printList(specifiers, node), this.space()), this.tokenChar(125)), node.source && (this.space(), this.word("from"), this.space(), this.print(node.source, node), this.printAssertions(node)), this.semicolon();
          }
        }, exports2.ExportNamespaceSpecifier = function(node) {
          this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(node.exported, node);
        }, exports2.ExportSpecifier = function(node) {
          "type" === node.exportKind && (this.word("type"), this.space());
          this.print(node.local, node), node.exported && node.local.name !== node.exported.name && (this.space(), this.word("as"), this.space(), this.print(node.exported, node));
        }, exports2.ImportAttribute = function(node) {
          this.print(node.key), this.tokenChar(58), this.space(), this.print(node.value);
        }, exports2.ImportDeclaration = function(node) {
          this.word("import"), this.space();
          const isTypeKind = "type" === node.importKind || "typeof" === node.importKind;
          isTypeKind && (this.word(node.importKind), this.space());
          const specifiers = node.specifiers.slice(0), hasSpecifiers = !!specifiers.length;
          for (; hasSpecifiers; ) {
            const first = specifiers[0];
            if (!isImportDefaultSpecifier(first) && !isImportNamespaceSpecifier(first))
              break;
            this.print(specifiers.shift(), node), specifiers.length && (this.tokenChar(44), this.space());
          }
          specifiers.length ? (this.tokenChar(123), this.space(), this.printList(specifiers, node), this.space(), this.tokenChar(125)) : isTypeKind && !hasSpecifiers && (this.tokenChar(123), this.tokenChar(125));
          (hasSpecifiers || isTypeKind) && (this.space(), this.word("from"), this.space());
          var _node$attributes;
          this.print(node.source, node), this.printAssertions(node), null != (_node$attributes = node.attributes) && _node$attributes.length && (this.space(), this.word("with"), this.space(), this.printList(node.attributes, node));
          this.semicolon();
        }, exports2.ImportDefaultSpecifier = function(node) {
          this.print(node.local, node);
        }, exports2.ImportNamespaceSpecifier = function(node) {
          this.tokenChar(42), this.space(), this.word("as"), this.space(), this.print(node.local, node);
        }, exports2.ImportSpecifier = function(node) {
          "type" !== node.importKind && "typeof" !== node.importKind || (this.word(node.importKind), this.space());
          this.print(node.imported, node), node.local && node.local.name !== node.imported.name && (this.space(), this.word("as"), this.space(), this.print(node.local, node));
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { isClassDeclaration, isExportDefaultSpecifier, isExportNamespaceSpecifier, isImportDefaultSpecifier, isImportNamespaceSpecifier, isStatement } = _t;
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/statements.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.BreakStatement = function(node) {
          this.word("break"), printStatementAfterKeyword(this, node.label, node, true);
        }, exports2.CatchClause = function(node) {
          this.word("catch"), this.space(), node.param && (this.tokenChar(40), this.print(node.param, node), this.print(node.param.typeAnnotation, node), this.tokenChar(41), this.space());
          this.print(node.body, node);
        }, exports2.ContinueStatement = function(node) {
          this.word("continue"), printStatementAfterKeyword(this, node.label, node, true);
        }, exports2.DebuggerStatement = function() {
          this.word("debugger"), this.semicolon();
        }, exports2.DoWhileStatement = function(node) {
          this.word("do"), this.space(), this.print(node.body, node), this.space(), this.word("while"), this.space(), this.tokenChar(40), this.print(node.test, node), this.tokenChar(41), this.semicolon();
        }, exports2.ForOfStatement = exports2.ForInStatement = void 0, exports2.ForStatement = function(node) {
          this.word("for"), this.space(), this.tokenChar(40), this.inForStatementInitCounter++, this.print(node.init, node), this.inForStatementInitCounter--, this.tokenChar(59), node.test && (this.space(), this.print(node.test, node));
          this.tokenChar(59), node.update && (this.space(), this.print(node.update, node));
          this.tokenChar(41), this.printBlock(node);
        }, exports2.IfStatement = function(node) {
          this.word("if"), this.space(), this.tokenChar(40), this.print(node.test, node), this.tokenChar(41), this.space();
          const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));
          needsBlock && (this.tokenChar(123), this.newline(), this.indent());
          this.printAndIndentOnComments(node.consequent, node), needsBlock && (this.dedent(), this.newline(), this.tokenChar(125));
          node.alternate && (this.endsWith(125) && this.space(), this.word("else"), this.space(), this.printAndIndentOnComments(node.alternate, node));
        }, exports2.LabeledStatement = function(node) {
          this.print(node.label, node), this.tokenChar(58), this.space(), this.print(node.body, node);
        }, exports2.ReturnStatement = function(node) {
          this.word("return"), printStatementAfterKeyword(this, node.argument, node, false);
        }, exports2.SwitchCase = function(node) {
          node.test ? (this.word("case"), this.space(), this.print(node.test, node), this.tokenChar(58)) : (this.word("default"), this.tokenChar(58));
          node.consequent.length && (this.newline(), this.printSequence(node.consequent, node, { indent: true }));
        }, exports2.SwitchStatement = function(node) {
          this.word("switch"), this.space(), this.tokenChar(40), this.print(node.discriminant, node), this.tokenChar(41), this.space(), this.tokenChar(123), this.printSequence(node.cases, node, { indent: true, addNewlines(leading, cas) {
            if (!leading && node.cases[node.cases.length - 1] === cas)
              return -1;
          } }), this.tokenChar(125);
        }, exports2.ThrowStatement = function(node) {
          this.word("throw"), printStatementAfterKeyword(this, node.argument, node, false);
        }, exports2.TryStatement = function(node) {
          this.word("try"), this.space(), this.print(node.block, node), this.space(), node.handlers ? this.print(node.handlers[0], node) : this.print(node.handler, node);
          node.finalizer && (this.space(), this.word("finally"), this.space(), this.print(node.finalizer, node));
        }, exports2.VariableDeclaration = function(node, parent) {
          node.declare && (this.word("declare"), this.space());
          this.word(node.kind), this.space();
          let separator, hasInits = false;
          if (!isFor(parent))
            for (const declar of node.declarations)
              declar.init && (hasInits = true);
          hasInits && (separator = "const" === node.kind ? constDeclarationIndent : variableDeclarationIndent);
          if (this.printList(node.declarations, node, { separator }), isFor(parent)) {
            if (isForStatement(parent)) {
              if (parent.init === node)
                return;
            } else if (parent.left === node)
              return;
          }
          this.semicolon();
        }, exports2.VariableDeclarator = function(node) {
          this.print(node.id, node), node.definite && this.tokenChar(33);
          this.print(node.id.typeAnnotation, node), node.init && (this.space(), this.tokenChar(61), this.space(), this.print(node.init, node));
        }, exports2.WhileStatement = function(node) {
          this.word("while"), this.space(), this.tokenChar(40), this.print(node.test, node), this.tokenChar(41), this.printBlock(node);
        }, exports2.WithStatement = function(node) {
          this.word("with"), this.space(), this.tokenChar(40), this.print(node.object, node), this.tokenChar(41), this.printBlock(node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { isFor, isForStatement, isIfStatement, isStatement } = _t;
        function getLastStatement(statement) {
          const { body } = statement;
          return false === isStatement(body) ? statement : getLastStatement(body);
        }
        function ForXStatement(node) {
          this.word("for"), this.space();
          const isForOf = "ForOfStatement" === node.type;
          isForOf && node.await && (this.word("await"), this.space()), this.tokenChar(40), this.print(node.left, node), this.space(), this.word(isForOf ? "of" : "in"), this.space(), this.print(node.right, node), this.tokenChar(41), this.printBlock(node);
        }
        const ForInStatement = ForXStatement;
        exports2.ForInStatement = ForInStatement;
        const ForOfStatement = ForXStatement;
        function printStatementAfterKeyword(printer, node, parent, isLabel) {
          node && (printer.space(), printer.printTerminatorless(node, parent, isLabel)), printer.semicolon();
        }
        function variableDeclarationIndent() {
          if (this.tokenChar(44), this.newline(), this.endsWith(10))
            for (let i = 0; i < 4; i++)
              this.space(true);
        }
        function constDeclarationIndent() {
          if (this.tokenChar(44), this.newline(), this.endsWith(10))
            for (let i = 0; i < 6; i++)
              this.space(true);
        }
        exports2.ForOfStatement = ForOfStatement;
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/template-literals.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.TaggedTemplateExpression = function(node) {
          this.print(node.tag, node), this.print(node.typeParameters, node), this.print(node.quasi, node);
        }, exports2.TemplateElement = function(node, parent) {
          const isFirst = parent.quasis[0] === node, isLast = parent.quasis[parent.quasis.length - 1] === node, value = (isFirst ? "`" : "}") + node.value.raw + (isLast ? "`" : "${");
          this.token(value, true);
        }, exports2.TemplateLiteral = function(node) {
          const quasis = node.quasis;
          for (let i = 0; i < quasis.length; i++)
            this.print(quasis[i], node), i + 1 < quasis.length && this.print(node.expressions[i], node);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/types.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArgumentPlaceholder = function() {
          this.tokenChar(63);
        }, exports2.ArrayPattern = exports2.ArrayExpression = function(node) {
          const elems = node.elements, len = elems.length;
          this.tokenChar(91), this.printInnerComments(node);
          for (let i = 0; i < elems.length; i++) {
            const elem = elems[i];
            elem ? (i > 0 && this.space(), this.print(elem, node), i < len - 1 && this.tokenChar(44)) : this.tokenChar(44);
          }
          this.tokenChar(93);
        }, exports2.BigIntLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw)
            return void this.word(raw);
          this.word(node.value + "n");
        }, exports2.BooleanLiteral = function(node) {
          this.word(node.value ? "true" : "false");
        }, exports2.DecimalLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw)
            return void this.word(raw);
          this.word(node.value + "m");
        }, exports2.Identifier = function(node) {
          this.exactSource(node.loc, () => {
            this.word(node.name);
          });
        }, exports2.NullLiteral = function() {
          this.word("null");
        }, exports2.NumericLiteral = function(node) {
          const raw = this.getPossibleRaw(node), opts = this.format.jsescOption, value = node.value + "";
          opts.numbers ? this.number(_jsesc(node.value, opts)) : null == raw ? this.number(value) : this.format.minified ? this.number(raw.length < value.length ? raw : value) : this.number(raw);
        }, exports2.ObjectPattern = exports2.ObjectExpression = function(node) {
          const props = node.properties;
          this.tokenChar(123), this.printInnerComments(node), props.length && (this.space(), this.printList(props, node, { indent: true, statement: true }), this.space());
          this.tokenChar(125);
        }, exports2.ObjectMethod = function(node) {
          this.printJoin(node.decorators, node), this._methodHead(node), this.space(), this.print(node.body, node);
        }, exports2.ObjectProperty = function(node) {
          if (this.printJoin(node.decorators, node), node.computed)
            this.tokenChar(91), this.print(node.key, node), this.tokenChar(93);
          else {
            if (isAssignmentPattern(node.value) && isIdentifier(node.key) && node.key.name === node.value.left.name)
              return void this.print(node.value, node);
            if (this.print(node.key, node), node.shorthand && isIdentifier(node.key) && isIdentifier(node.value) && node.key.name === node.value.name)
              return;
          }
          this.tokenChar(58), this.space(), this.print(node.value, node);
        }, exports2.PipelineBareFunction = function(node) {
          this.print(node.callee, node);
        }, exports2.PipelinePrimaryTopicReference = function() {
          this.tokenChar(35);
        }, exports2.PipelineTopicExpression = function(node) {
          this.print(node.expression, node);
        }, exports2.RecordExpression = function(node) {
          const props = node.properties;
          let startToken, endToken;
          if ("bar" === this.format.recordAndTupleSyntaxType)
            startToken = "{|", endToken = "|}";
          else {
            if ("hash" !== this.format.recordAndTupleSyntaxType && null != this.format.recordAndTupleSyntaxType)
              throw new Error(`The "recordAndTupleSyntaxType" generator option must be "bar" or "hash" (${JSON.stringify(this.format.recordAndTupleSyntaxType)} received).`);
            startToken = "#{", endToken = "}";
          }
          this.token(startToken), this.printInnerComments(node), props.length && (this.space(), this.printList(props, node, { indent: true, statement: true }), this.space());
          this.token(endToken);
        }, exports2.RegExpLiteral = function(node) {
          this.word(`/${node.pattern}/${node.flags}`);
        }, exports2.SpreadElement = exports2.RestElement = function(node) {
          this.token("..."), this.print(node.argument, node);
        }, exports2.StringLiteral = function(node) {
          const raw = this.getPossibleRaw(node);
          if (!this.format.minified && void 0 !== raw)
            return void this.token(raw);
          const val = _jsesc(node.value, Object.assign(this.format.jsescOption, this.format.jsonCompatibleStrings && { json: true }));
          return this.token(val);
        }, exports2.TopicReference = function() {
          const { topicToken } = this.format;
          if (!validTopicTokenSet.has(topicToken)) {
            const givenTopicTokenJSON = JSON.stringify(topicToken), validTopics = Array.from(validTopicTokenSet, (v) => JSON.stringify(v));
            throw new Error(`The "topicToken" generator option must be one of ${validTopics.join(", ")} (${givenTopicTokenJSON} received instead).`);
          }
          this.token(topicToken);
        }, exports2.TupleExpression = function(node) {
          const elems = node.elements, len = elems.length;
          let startToken, endToken;
          if ("bar" === this.format.recordAndTupleSyntaxType)
            startToken = "[|", endToken = "|]";
          else {
            if ("hash" !== this.format.recordAndTupleSyntaxType)
              throw new Error(`${this.format.recordAndTupleSyntaxType} is not a valid recordAndTuple syntax type`);
            startToken = "#[", endToken = "]";
          }
          this.token(startToken), this.printInnerComments(node);
          for (let i = 0; i < elems.length; i++) {
            const elem = elems[i];
            elem && (i > 0 && this.space(), this.print(elem, node), i < len - 1 && this.tokenChar(44));
          }
          this.token(endToken);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _jsesc = __webpack_require__2("./node_modules/.pnpm/jsesc@2.5.2/node_modules/jsesc/jsesc.js");
        const { isAssignmentPattern, isIdentifier } = _t;
        const validTopicTokenSet = /* @__PURE__ */ new Set(["^^", "@@", "^", "%", "#"]);
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/typescript.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function tsPrintBraced(printer, members, node) {
          if (printer.token("{"), members.length) {
            printer.indent(), printer.newline();
            for (const member of members)
              printer.print(member, node), printer.newline();
            printer.dedent(), printer.rightBrace();
          } else
            printer.token("}");
        }
        function tsPrintUnionOrIntersectionType(printer, node, sep) {
          printer.printJoin(node.types, node, { separator() {
            this.space(), this.token(sep), this.space();
          } });
        }
        function tokenIfPlusMinus(self2, tok) {
          true !== tok && self2.token(tok);
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.TSAnyKeyword = function() {
          this.word("any");
        }, exports2.TSArrayType = function(node) {
          this.print(node.elementType, node, true), this.token("[]");
        }, exports2.TSAsExpression = function(node) {
          const { expression, typeAnnotation } = node;
          this.print(expression, node), this.space(), this.word("as"), this.space(), this.print(typeAnnotation, node);
        }, exports2.TSBigIntKeyword = function() {
          this.word("bigint");
        }, exports2.TSBooleanKeyword = function() {
          this.word("boolean");
        }, exports2.TSCallSignatureDeclaration = function(node) {
          this.tsPrintSignatureDeclarationBase(node), this.tokenChar(59);
        }, exports2.TSConditionalType = function(node) {
          this.print(node.checkType), this.space(), this.word("extends"), this.space(), this.print(node.extendsType), this.space(), this.tokenChar(63), this.space(), this.print(node.trueType), this.space(), this.tokenChar(58), this.space(), this.print(node.falseType);
        }, exports2.TSConstructSignatureDeclaration = function(node) {
          this.word("new"), this.space(), this.tsPrintSignatureDeclarationBase(node), this.tokenChar(59);
        }, exports2.TSConstructorType = function(node) {
          node.abstract && (this.word("abstract"), this.space());
          this.word("new"), this.space(), this.tsPrintFunctionOrConstructorType(node);
        }, exports2.TSDeclareFunction = function(node) {
          node.declare && (this.word("declare"), this.space());
          this._functionHead(node), this.tokenChar(59);
        }, exports2.TSDeclareMethod = function(node) {
          this._classMethodHead(node), this.tokenChar(59);
        }, exports2.TSEnumDeclaration = function(node) {
          const { declare, const: isConst, id, members } = node;
          declare && (this.word("declare"), this.space());
          isConst && (this.word("const"), this.space());
          this.word("enum"), this.space(), this.print(id, node), this.space(), tsPrintBraced(this, members, node);
        }, exports2.TSEnumMember = function(node) {
          const { id, initializer } = node;
          this.print(id, node), initializer && (this.space(), this.tokenChar(61), this.space(), this.print(initializer, node));
          this.tokenChar(44);
        }, exports2.TSExportAssignment = function(node) {
          this.word("export"), this.space(), this.tokenChar(61), this.space(), this.print(node.expression, node), this.tokenChar(59);
        }, exports2.TSExpressionWithTypeArguments = function(node) {
          this.print(node.expression, node), this.print(node.typeParameters, node);
        }, exports2.TSExternalModuleReference = function(node) {
          this.token("require("), this.print(node.expression, node), this.tokenChar(41);
        }, exports2.TSFunctionType = function(node) {
          this.tsPrintFunctionOrConstructorType(node);
        }, exports2.TSImportEqualsDeclaration = function(node) {
          const { isExport, id, moduleReference } = node;
          isExport && (this.word("export"), this.space());
          this.word("import"), this.space(), this.print(id, node), this.space(), this.tokenChar(61), this.space(), this.print(moduleReference, node), this.tokenChar(59);
        }, exports2.TSImportType = function(node) {
          const { argument, qualifier, typeParameters } = node;
          this.word("import"), this.tokenChar(40), this.print(argument, node), this.tokenChar(41), qualifier && (this.tokenChar(46), this.print(qualifier, node));
          typeParameters && this.print(typeParameters, node);
        }, exports2.TSIndexSignature = function(node) {
          const { readonly, static: isStatic } = node;
          isStatic && (this.word("static"), this.space());
          readonly && (this.word("readonly"), this.space());
          this.tokenChar(91), this._parameters(node.parameters, node), this.tokenChar(93), this.print(node.typeAnnotation, node), this.tokenChar(59);
        }, exports2.TSIndexedAccessType = function(node) {
          this.print(node.objectType, node, true), this.tokenChar(91), this.print(node.indexType, node), this.tokenChar(93);
        }, exports2.TSInferType = function(node) {
          this.token("infer"), this.space(), this.print(node.typeParameter);
        }, exports2.TSInstantiationExpression = function(node) {
          this.print(node.expression, node), this.print(node.typeParameters, node);
        }, exports2.TSInterfaceBody = function(node) {
          this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);
        }, exports2.TSInterfaceDeclaration = function(node) {
          const { declare, id, typeParameters, extends: extendz, body } = node;
          declare && (this.word("declare"), this.space());
          this.word("interface"), this.space(), this.print(id, node), this.print(typeParameters, node), null != extendz && extendz.length && (this.space(), this.word("extends"), this.space(), this.printList(extendz, node));
          this.space(), this.print(body, node);
        }, exports2.TSIntersectionType = function(node) {
          tsPrintUnionOrIntersectionType(this, node, "&");
        }, exports2.TSIntrinsicKeyword = function() {
          this.word("intrinsic");
        }, exports2.TSLiteralType = function(node) {
          this.print(node.literal, node);
        }, exports2.TSMappedType = function(node) {
          const { nameType, optional, readonly, typeParameter } = node;
          this.tokenChar(123), this.space(), readonly && (tokenIfPlusMinus(this, readonly), this.word("readonly"), this.space());
          this.tokenChar(91), this.word(typeParameter.name), this.space(), this.word("in"), this.space(), this.print(typeParameter.constraint, typeParameter), nameType && (this.space(), this.word("as"), this.space(), this.print(nameType, node));
          this.tokenChar(93), optional && (tokenIfPlusMinus(this, optional), this.tokenChar(63));
          this.tokenChar(58), this.space(), this.print(node.typeAnnotation, node), this.space(), this.tokenChar(125);
        }, exports2.TSMethodSignature = function(node) {
          const { kind } = node;
          "set" !== kind && "get" !== kind || (this.word(kind), this.space());
          this.tsPrintPropertyOrMethodName(node), this.tsPrintSignatureDeclarationBase(node), this.tokenChar(59);
        }, exports2.TSModuleBlock = function(node) {
          tsPrintBraced(this, node.body, node);
        }, exports2.TSModuleDeclaration = function(node) {
          const { declare, id } = node;
          declare && (this.word("declare"), this.space());
          node.global || (this.word("Identifier" === id.type ? "namespace" : "module"), this.space());
          if (this.print(id, node), !node.body)
            return void this.tokenChar(59);
          let body = node.body;
          for (; "TSModuleDeclaration" === body.type; )
            this.tokenChar(46), this.print(body.id, body), body = body.body;
          this.space(), this.print(body, node);
        }, exports2.TSNamedTupleMember = function(node) {
          this.print(node.label, node), node.optional && this.tokenChar(63);
          this.tokenChar(58), this.space(), this.print(node.elementType, node);
        }, exports2.TSNamespaceExportDeclaration = function(node) {
          this.word("export"), this.space(), this.word("as"), this.space(), this.word("namespace"), this.space(), this.print(node.id, node);
        }, exports2.TSNeverKeyword = function() {
          this.word("never");
        }, exports2.TSNonNullExpression = function(node) {
          this.print(node.expression, node), this.tokenChar(33);
        }, exports2.TSNullKeyword = function() {
          this.word("null");
        }, exports2.TSNumberKeyword = function() {
          this.word("number");
        }, exports2.TSObjectKeyword = function() {
          this.word("object");
        }, exports2.TSOptionalType = function(node) {
          this.print(node.typeAnnotation, node), this.tokenChar(63);
        }, exports2.TSParameterProperty = function(node) {
          node.accessibility && (this.word(node.accessibility), this.space());
          node.readonly && (this.word("readonly"), this.space());
          this._param(node.parameter);
        }, exports2.TSParenthesizedType = function(node) {
          this.tokenChar(40), this.print(node.typeAnnotation, node), this.tokenChar(41);
        }, exports2.TSPropertySignature = function(node) {
          const { readonly, initializer } = node;
          readonly && (this.word("readonly"), this.space());
          this.tsPrintPropertyOrMethodName(node), this.print(node.typeAnnotation, node), initializer && (this.space(), this.tokenChar(61), this.space(), this.print(initializer, node));
          this.tokenChar(59);
        }, exports2.TSQualifiedName = function(node) {
          this.print(node.left, node), this.tokenChar(46), this.print(node.right, node);
        }, exports2.TSRestType = function(node) {
          this.token("..."), this.print(node.typeAnnotation, node);
        }, exports2.TSStringKeyword = function() {
          this.word("string");
        }, exports2.TSSymbolKeyword = function() {
          this.word("symbol");
        }, exports2.TSThisType = function() {
          this.word("this");
        }, exports2.TSTupleType = function(node) {
          this.tokenChar(91), this.printList(node.elementTypes, node), this.tokenChar(93);
        }, exports2.TSTypeAliasDeclaration = function(node) {
          const { declare, id, typeParameters, typeAnnotation } = node;
          declare && (this.word("declare"), this.space());
          this.word("type"), this.space(), this.print(id, node), this.print(typeParameters, node), this.space(), this.tokenChar(61), this.space(), this.print(typeAnnotation, node), this.tokenChar(59);
        }, exports2.TSTypeAnnotation = function(node) {
          this.tokenChar(58), this.space(), node.optional && this.tokenChar(63);
          this.print(node.typeAnnotation, node);
        }, exports2.TSTypeAssertion = function(node) {
          const { typeAnnotation, expression } = node;
          this.tokenChar(60), this.print(typeAnnotation, node), this.tokenChar(62), this.space(), this.print(expression, node);
        }, exports2.TSTypeLiteral = function(node) {
          this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);
        }, exports2.TSTypeOperator = function(node) {
          this.word(node.operator), this.space(), this.print(node.typeAnnotation, node);
        }, exports2.TSTypeParameter = function(node) {
          node.in && (this.word("in"), this.space());
          node.out && (this.word("out"), this.space());
          this.word(node.name), node.constraint && (this.space(), this.word("extends"), this.space(), this.print(node.constraint, node));
          node.default && (this.space(), this.tokenChar(61), this.space(), this.print(node.default, node));
        }, exports2.TSTypeParameterDeclaration = exports2.TSTypeParameterInstantiation = function(node, parent) {
          this.tokenChar(60), this.printList(node.params, node, {}), "ArrowFunctionExpression" === parent.type && 1 === node.params.length && this.tokenChar(44);
          this.tokenChar(62);
        }, exports2.TSTypePredicate = function(node) {
          node.asserts && (this.word("asserts"), this.space());
          this.print(node.parameterName), node.typeAnnotation && (this.space(), this.word("is"), this.space(), this.print(node.typeAnnotation.typeAnnotation));
        }, exports2.TSTypeQuery = function(node) {
          this.word("typeof"), this.space(), this.print(node.exprName), node.typeParameters && this.print(node.typeParameters, node);
        }, exports2.TSTypeReference = function(node) {
          this.print(node.typeName, node, true), this.print(node.typeParameters, node, true);
        }, exports2.TSUndefinedKeyword = function() {
          this.word("undefined");
        }, exports2.TSUnionType = function(node) {
          tsPrintUnionOrIntersectionType(this, node, "|");
        }, exports2.TSUnknownKeyword = function() {
          this.word("unknown");
        }, exports2.TSVoidKeyword = function() {
          this.word("void");
        }, exports2.tsPrintClassMemberModifiers = function(node) {
          const isField = "ClassAccessorProperty" === node.type || "ClassProperty" === node.type;
          isField && node.declare && (this.word("declare"), this.space());
          node.accessibility && (this.word(node.accessibility), this.space());
          node.static && (this.word("static"), this.space());
          node.override && (this.word("override"), this.space());
          node.abstract && (this.word("abstract"), this.space());
          isField && node.readonly && (this.word("readonly"), this.space());
        }, exports2.tsPrintFunctionOrConstructorType = function(node) {
          const { typeParameters } = node, parameters = node.parameters;
          this.print(typeParameters, node), this.tokenChar(40), this._parameters(parameters, node), this.tokenChar(41), this.space(), this.token("=>"), this.space();
          const returnType = node.typeAnnotation;
          this.print(returnType.typeAnnotation, node);
        }, exports2.tsPrintPropertyOrMethodName = function(node) {
          node.computed && this.tokenChar(91);
          this.print(node.key, node), node.computed && this.tokenChar(93);
          node.optional && this.tokenChar(63);
        }, exports2.tsPrintSignatureDeclarationBase = function(node) {
          const { typeParameters } = node, parameters = node.parameters;
          this.print(typeParameters, node), this.tokenChar(40), this._parameters(parameters, node), this.tokenChar(41);
          const returnType = node.typeAnnotation;
          this.print(returnType, node);
        }, exports2.tsPrintTypeLiteralOrInterfaceBody = function(members, node) {
          tsPrintBraced(this, members, node);
        };
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.CodeGenerator = void 0, exports2.default = function(ast, opts, code) {
          return new Generator(ast, opts, code).generate();
        };
        var _sourceMap = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/source-map.js"), _printer = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/printer.js");
        class Generator extends _printer.default {
          constructor(ast, opts = {}, code) {
            const format2 = function(code2, opts2) {
              const format3 = { auxiliaryCommentBefore: opts2.auxiliaryCommentBefore, auxiliaryCommentAfter: opts2.auxiliaryCommentAfter, shouldPrintComment: opts2.shouldPrintComment, retainLines: opts2.retainLines, retainFunctionParens: opts2.retainFunctionParens, comments: null == opts2.comments || opts2.comments, compact: opts2.compact, minified: opts2.minified, concise: opts2.concise, indent: { adjustMultilineComment: true, style: "  ", base: 0 }, jsescOption: Object.assign({ quotes: "double", wrap: true, minimal: false }, opts2.jsescOption), recordAndTupleSyntaxType: opts2.recordAndTupleSyntaxType, topicToken: opts2.topicToken };
              format3.decoratorsBeforeExport = !!opts2.decoratorsBeforeExport, format3.jsonCompatibleStrings = opts2.jsonCompatibleStrings, format3.minified ? (format3.compact = true, format3.shouldPrintComment = format3.shouldPrintComment || (() => format3.comments)) : format3.shouldPrintComment = format3.shouldPrintComment || ((value) => format3.comments || value.includes("@license") || value.includes("@preserve"));
              "auto" === format3.compact && (format3.compact = code2.length > 5e5, format3.compact && console.error(`[BABEL] Note: The code generator has deoptimised the styling of ${opts2.filename} as it exceeds the max of 500KB.`));
              format3.compact && (format3.indent.adjustMultilineComment = false);
              return format3;
            }(code, opts);
            super(format2, opts.sourceMaps ? new _sourceMap.default(opts, code) : null), this.ast = void 0, this.ast = ast;
          }
          generate() {
            return super.generate(this.ast);
          }
        }
        exports2.CodeGenerator = class {
          constructor(ast, opts, code) {
            this._generator = void 0, this._generator = new Generator(ast, opts, code);
          }
          generate() {
            return this._generator.generate();
          }
        };
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/node/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.needsParens = function(node, parent, printStack) {
          if (!parent)
            return false;
          if (isNewExpression(parent) && parent.callee === node && isOrHasCallExpression(node))
            return true;
          return find2(expandedParens, node, parent, printStack);
        }, exports2.needsWhitespace = needsWhitespace, exports2.needsWhitespaceAfter = function(node, parent) {
          return needsWhitespace(node, parent, 2);
        }, exports2.needsWhitespaceBefore = function(node, parent) {
          return needsWhitespace(node, parent, 1);
        };
        var whitespace = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/node/whitespace.js"), parens = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/node/parentheses.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { FLIPPED_ALIAS_KEYS, isCallExpression, isExpressionStatement, isMemberExpression, isNewExpression } = _t;
        function expandAliases(obj) {
          const newObj = {};
          function add(type, func) {
            const fn = newObj[type];
            newObj[type] = fn ? function(node, parent, stack) {
              const result = fn(node, parent, stack);
              return null == result ? func(node, parent, stack) : result;
            } : func;
          }
          for (const type of Object.keys(obj)) {
            const aliases = FLIPPED_ALIAS_KEYS[type];
            if (aliases)
              for (const alias of aliases)
                add(alias, obj[type]);
            else
              add(type, obj[type]);
          }
          return newObj;
        }
        const expandedParens = expandAliases(parens), expandedWhitespaceNodes = expandAliases(whitespace.nodes);
        function find2(obj, node, parent, printStack) {
          const fn = obj[node.type];
          return fn ? fn(node, parent, printStack) : null;
        }
        function isOrHasCallExpression(node) {
          return !!isCallExpression(node) || isMemberExpression(node) && isOrHasCallExpression(node.object);
        }
        function needsWhitespace(node, parent, type) {
          if (!node)
            return false;
          isExpressionStatement(node) && (node = node.expression);
          const flag = find2(expandedWhitespaceNodes, node, parent);
          return "number" == typeof flag && 0 != (flag & type);
        }
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/node/parentheses.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArrowFunctionExpression = function(node, parent) {
          return isExportDeclaration(parent) || ConditionalExpression(node, parent);
        }, exports2.AssignmentExpression = function(node, parent) {
          return !!isObjectPattern(node.left) || ConditionalExpression(node, parent);
        }, exports2.Binary = function(node, parent) {
          if ("**" === node.operator && isBinaryExpression(parent, { operator: "**" }))
            return parent.left === node;
          if (isClassExtendsClause(node, parent))
            return true;
          if (hasPostfixPart(node, parent) || isUnaryLike(parent) || isAwaitExpression(parent))
            return true;
          if (isBinary(parent)) {
            const parentOp = parent.operator, parentPos = PRECEDENCE[parentOp], nodeOp = node.operator, nodePos = PRECEDENCE[nodeOp];
            if (parentPos === nodePos && parent.right === node && !isLogicalExpression(parent) || parentPos > nodePos)
              return true;
          }
        }, exports2.BinaryExpression = function(node, parent) {
          return "in" === node.operator && (isVariableDeclarator(parent) || isFor(parent));
        }, exports2.ClassExpression = function(node, parent, printStack) {
          return isFirstInContext(printStack, 5);
        }, exports2.ConditionalExpression = ConditionalExpression, exports2.DoExpression = function(node, parent, printStack) {
          return !node.async && isFirstInContext(printStack, 1);
        }, exports2.FunctionExpression = function(node, parent, printStack) {
          return isFirstInContext(printStack, 5);
        }, exports2.FunctionTypeAnnotation = function(node, parent, printStack) {
          if (printStack.length < 3)
            return;
          return isUnionTypeAnnotation(parent) || isIntersectionTypeAnnotation(parent) || isArrayTypeAnnotation(parent) || isTypeAnnotation(parent) && isArrowFunctionExpression(printStack[printStack.length - 3]);
        }, exports2.Identifier = function(node, parent, printStack) {
          var _node$extra;
          if (null != (_node$extra = node.extra) && _node$extra.parenthesized && isAssignmentExpression(parent, { left: node }) && (isFunctionExpression(parent.right) || isClassExpression(parent.right)) && null == parent.right.id)
            return true;
          if ("let" === node.name) {
            const isFollowedByBracket = isMemberExpression(parent, { object: node, computed: true }) || isOptionalMemberExpression(parent, { object: node, computed: true, optional: false });
            return isFirstInContext(printStack, isFollowedByBracket ? 57 : 32);
          }
          return "async" === node.name && isForOfStatement(parent) && node === parent.left;
        }, exports2.LogicalExpression = function(node, parent) {
          switch (node.operator) {
            case "||":
              return !!isLogicalExpression(parent) && ("??" === parent.operator || "&&" === parent.operator);
            case "&&":
              return isLogicalExpression(parent, { operator: "??" });
            case "??":
              return isLogicalExpression(parent) && "??" !== parent.operator;
          }
        }, exports2.NullableTypeAnnotation = function(node, parent) {
          return isArrayTypeAnnotation(parent);
        }, exports2.ObjectExpression = function(node, parent, printStack) {
          return isFirstInContext(printStack, 3);
        }, exports2.OptionalIndexedAccessType = function(node, parent) {
          return isIndexedAccessType(parent, { objectType: node });
        }, exports2.OptionalCallExpression = exports2.OptionalMemberExpression = function(node, parent) {
          return isCallExpression(parent, { callee: node }) || isMemberExpression(parent, { object: node });
        }, exports2.SequenceExpression = function(node, parent) {
          if (isForStatement(parent) || isThrowStatement(parent) || isReturnStatement(parent) || isIfStatement(parent) && parent.test === node || isWhileStatement(parent) && parent.test === node || isForInStatement(parent) && parent.right === node || isSwitchStatement(parent) && parent.discriminant === node || isExpressionStatement(parent) && parent.expression === node)
            return false;
          return true;
        }, exports2.TSAsExpression = function() {
          return true;
        }, exports2.TSInferType = function(node, parent) {
          return isTSArrayType(parent) || isTSOptionalType(parent);
        }, exports2.TSInstantiationExpression = function(node, parent) {
          return (isCallExpression(parent) || isOptionalCallExpression(parent) || isNewExpression(parent) || isTSInstantiationExpression(parent)) && !!parent.typeParameters;
        }, exports2.TSTypeAssertion = function() {
          return true;
        }, exports2.TSIntersectionType = exports2.TSUnionType = function(node, parent) {
          return isTSArrayType(parent) || isTSOptionalType(parent) || isTSIntersectionType(parent) || isTSUnionType(parent) || isTSRestType(parent);
        }, exports2.UnaryLike = UnaryLike, exports2.IntersectionTypeAnnotation = exports2.UnionTypeAnnotation = function(node, parent) {
          return isArrayTypeAnnotation(parent) || isNullableTypeAnnotation(parent) || isIntersectionTypeAnnotation(parent) || isUnionTypeAnnotation(parent);
        }, exports2.UpdateExpression = function(node, parent) {
          return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);
        }, exports2.AwaitExpression = exports2.YieldExpression = function(node, parent) {
          return isBinary(parent) || isUnaryLike(parent) || hasPostfixPart(node, parent) || isAwaitExpression(parent) && isYieldExpression(node) || isConditionalExpression(parent) && node === parent.test || isClassExtendsClause(node, parent);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { isArrayTypeAnnotation, isArrowFunctionExpression, isAssignmentExpression, isAwaitExpression, isBinary, isBinaryExpression, isUpdateExpression, isCallExpression, isClass, isClassExpression, isConditional, isConditionalExpression, isExportDeclaration, isExportDefaultDeclaration, isExpressionStatement, isFor, isForInStatement, isForOfStatement, isForStatement, isFunctionExpression, isIfStatement, isIndexedAccessType, isIntersectionTypeAnnotation, isLogicalExpression, isMemberExpression, isNewExpression, isNullableTypeAnnotation, isObjectPattern, isOptionalCallExpression, isOptionalMemberExpression, isReturnStatement, isSequenceExpression, isSwitchStatement, isTSArrayType, isTSAsExpression, isTSInstantiationExpression, isTSIntersectionType, isTSNonNullExpression, isTSOptionalType, isTSRestType, isTSTypeAssertion, isTSUnionType, isTaggedTemplateExpression, isThrowStatement, isTypeAnnotation, isUnaryLike, isUnionTypeAnnotation, isVariableDeclarator, isWhileStatement, isYieldExpression } = _t, PRECEDENCE = { "||": 0, "??": 0, "|>": 0, "&&": 1, "|": 2, "^": 3, "&": 4, "==": 5, "===": 5, "!=": 5, "!==": 5, "<": 6, ">": 6, "<=": 6, ">=": 6, in: 6, instanceof: 6, ">>": 7, "<<": 7, ">>>": 7, "+": 8, "-": 8, "*": 9, "/": 9, "%": 9, "**": 10 }, isClassExtendsClause = (node, parent) => isClass(parent, { superClass: node }), hasPostfixPart = (node, parent) => (isMemberExpression(parent) || isOptionalMemberExpression(parent)) && parent.object === node || (isCallExpression(parent) || isOptionalCallExpression(parent) || isNewExpression(parent)) && parent.callee === node || isTaggedTemplateExpression(parent) && parent.tag === node || isTSNonNullExpression(parent);
        function UnaryLike(node, parent) {
          return hasPostfixPart(node, parent) || isBinaryExpression(parent, { operator: "**", left: node }) || isClassExtendsClause(node, parent);
        }
        function ConditionalExpression(node, parent) {
          return !!(isUnaryLike(parent) || isBinary(parent) || isConditionalExpression(parent, { test: node }) || isAwaitExpression(parent) || isTSTypeAssertion(parent) || isTSAsExpression(parent)) || UnaryLike(node, parent);
        }
        function isFirstInContext(printStack, checkParam) {
          const expressionStatement = 1 & checkParam, arrowBody = 2 & checkParam, exportDefault = 4 & checkParam, forHead = 8 & checkParam, forInHead = 16 & checkParam, forOfHead = 32 & checkParam;
          let i = printStack.length - 1;
          if (i <= 0)
            return;
          let node = printStack[i];
          i--;
          let parent = printStack[i];
          for (; i >= 0; ) {
            if (expressionStatement && isExpressionStatement(parent, { expression: node }) || exportDefault && isExportDefaultDeclaration(parent, { declaration: node }) || arrowBody && isArrowFunctionExpression(parent, { body: node }) || forHead && isForStatement(parent, { init: node }) || forInHead && isForInStatement(parent, { left: node }) || forOfHead && isForOfStatement(parent, { left: node }))
              return true;
            if (!(i > 0 && (hasPostfixPart(node, parent) && !isNewExpression(parent) || isSequenceExpression(parent) && parent.expressions[0] === node || isUpdateExpression(parent) && !parent.prefix || isConditional(parent, { test: node }) || isBinary(parent, { left: node }) || isAssignmentExpression(parent, { left: node }))))
              return false;
            node = parent, i--, parent = printStack[i];
          }
          return false;
        }
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/node/whitespace.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.nodes = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { FLIPPED_ALIAS_KEYS, isArrayExpression, isAssignmentExpression, isBinary, isBlockStatement, isCallExpression, isFunction, isIdentifier, isLiteral, isMemberExpression, isObjectExpression, isOptionalCallExpression, isOptionalMemberExpression, isStringLiteral } = _t;
        function crawlInternal(node, state) {
          return node ? (isMemberExpression(node) || isOptionalMemberExpression(node) ? (crawlInternal(node.object, state), node.computed && crawlInternal(node.property, state)) : isBinary(node) || isAssignmentExpression(node) ? (crawlInternal(node.left, state), crawlInternal(node.right, state)) : isCallExpression(node) || isOptionalCallExpression(node) ? (state.hasCall = true, crawlInternal(node.callee, state)) : isFunction(node) ? state.hasFunction = true : isIdentifier(node) && (state.hasHelper = state.hasHelper || node.callee && isHelper(node.callee)), state) : state;
        }
        function crawl(node) {
          return crawlInternal(node, { hasCall: false, hasFunction: false, hasHelper: false });
        }
        function isHelper(node) {
          return !!node && (isMemberExpression(node) ? isHelper(node.object) || isHelper(node.property) : isIdentifier(node) ? "require" === node.name || 95 === node.name.charCodeAt(0) : isCallExpression(node) ? isHelper(node.callee) : !(!isBinary(node) && !isAssignmentExpression(node)) && (isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right)));
        }
        function isType(node) {
          return isLiteral(node) || isObjectExpression(node) || isArrayExpression(node) || isIdentifier(node) || isMemberExpression(node);
        }
        const nodes = { AssignmentExpression(node) {
          const state = crawl(node.right);
          if (state.hasCall && state.hasHelper || state.hasFunction)
            return state.hasFunction ? 3 : 2;
        }, SwitchCase: (node, parent) => (node.consequent.length || parent.cases[0] === node ? 1 : 0) | (node.consequent.length || parent.cases[parent.cases.length - 1] !== node ? 0 : 2), LogicalExpression(node) {
          if (isFunction(node.left) || isFunction(node.right))
            return 2;
        }, Literal(node) {
          if (isStringLiteral(node) && "use strict" === node.value)
            return 2;
        }, CallExpression(node) {
          if (isFunction(node.callee) || isHelper(node))
            return 3;
        }, OptionalCallExpression(node) {
          if (isFunction(node.callee))
            return 3;
        }, VariableDeclaration(node) {
          for (let i = 0; i < node.declarations.length; i++) {
            const declar = node.declarations[i];
            let enabled = isHelper(declar.id) && !isType(declar.init);
            if (!enabled && declar.init) {
              const state = crawl(declar.init);
              enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
            }
            if (enabled)
              return 3;
          }
        }, IfStatement(node) {
          if (isBlockStatement(node.consequent))
            return 3;
        } };
        exports2.nodes = nodes, nodes.ObjectProperty = nodes.ObjectTypeProperty = nodes.ObjectMethod = function(node, parent) {
          if (parent.properties[0] === node)
            return 1;
        }, nodes.ObjectTypeCallProperty = function(node, parent) {
          var _parent$properties;
          if (parent.callProperties[0] === node && (null == (_parent$properties = parent.properties) || !_parent$properties.length))
            return 1;
        }, nodes.ObjectTypeIndexer = function(node, parent) {
          var _parent$properties2, _parent$callPropertie;
          if (!(parent.indexers[0] !== node || null != (_parent$properties2 = parent.properties) && _parent$properties2.length || null != (_parent$callPropertie = parent.callProperties) && _parent$callPropertie.length))
            return 1;
        }, nodes.ObjectTypeInternalSlot = function(node, parent) {
          var _parent$properties3, _parent$callPropertie2, _parent$indexers;
          if (!(parent.internalSlots[0] !== node || null != (_parent$properties3 = parent.properties) && _parent$properties3.length || null != (_parent$callPropertie2 = parent.callProperties) && _parent$callPropertie2.length || null != (_parent$indexers = parent.indexers) && _parent$indexers.length))
            return 1;
        }, [["Function", true], ["Class", true], ["Loop", true], ["LabeledStatement", true], ["SwitchStatement", true], ["TryStatement", true]].forEach(function([type, amounts]) {
          [type].concat(FLIPPED_ALIAS_KEYS[type] || []).forEach(function(type2) {
            const ret = amounts ? 3 : 0;
            nodes[type2] = () => ret;
          });
        });
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/printer.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _buffer = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/buffer.js"), n = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/node/index.js"), generatorFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/generators/index.js");
        const SCIENTIFIC_NOTATION = /e/i, ZERO_DECIMAL_INTEGER = /\.0+$/, NON_DECIMAL_LITERAL = /^0[box]/, PURE_ANNOTATION_RE = /^\s*[@#]__PURE__\s*$/, { needsParens, needsWhitespaceAfter, needsWhitespaceBefore } = n;
        class Printer {
          constructor(format2, map) {
            this.inForStatementInitCounter = 0, this._printStack = [], this._indent = 0, this._indentChar = 0, this._indentRepeat = 0, this._insideAux = false, this._parenPushNewlineState = null, this._noLineTerminator = false, this._printAuxAfterOnNextUserNode = false, this._printedComments = /* @__PURE__ */ new Set(), this._endsWithInteger = false, this._endsWithWord = false, this.format = format2, this._buf = new _buffer.default(map), this._indentChar = format2.indent.style.charCodeAt(0), this._indentRepeat = format2.indent.style.length;
          }
          generate(ast) {
            return this.print(ast), this._maybeAddAuxComment(), this._buf.get();
          }
          indent() {
            this.format.compact || this.format.concise || this._indent++;
          }
          dedent() {
            this.format.compact || this.format.concise || this._indent--;
          }
          semicolon(force = false) {
            this._maybeAddAuxComment(), force ? this._appendChar(59) : this._queue(59);
          }
          rightBrace() {
            this.format.minified && this._buf.removeLastSemicolon(), this.tokenChar(125);
          }
          space(force = false) {
            if (!this.format.compact) {
              if (force)
                this._space();
              else if (this._buf.hasContent()) {
                const lastCp = this.getLastChar();
                32 !== lastCp && 10 !== lastCp && this._space();
              }
            }
          }
          word(str) {
            (this._endsWithWord || 47 === str.charCodeAt(0) && this.endsWith(47)) && this._space(), this._maybeAddAuxComment(), this._append(str, false), this._endsWithWord = true;
          }
          number(str) {
            this.word(str), this._endsWithInteger = Number.isInteger(+str) && !NON_DECIMAL_LITERAL.test(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && 46 !== str.charCodeAt(str.length - 1);
          }
          token(str, maybeNewline = false) {
            const lastChar = this.getLastChar(), strFirst = str.charCodeAt(0);
            (33 === lastChar && "--" === str || 43 === strFirst && 43 === lastChar || 45 === strFirst && 45 === lastChar || 46 === strFirst && this._endsWithInteger) && this._space(), this._maybeAddAuxComment(), this._append(str, maybeNewline);
          }
          tokenChar(char) {
            const lastChar = this.getLastChar();
            (43 === char && 43 === lastChar || 45 === char && 45 === lastChar || 46 === char && this._endsWithInteger) && this._space(), this._maybeAddAuxComment(), this._appendChar(char);
          }
          newline(i = 1) {
            if (this.format.retainLines || this.format.compact)
              return;
            if (this.format.concise)
              return void this.space();
            const charBeforeNewline = this.endsWithCharAndNewline();
            if (10 !== charBeforeNewline && (123 !== charBeforeNewline && 58 !== charBeforeNewline || i--, !(i <= 0)))
              for (let j = 0; j < i; j++)
                this._newline();
          }
          endsWith(char) {
            return this.getLastChar() === char;
          }
          getLastChar() {
            return this._buf.getLastChar();
          }
          endsWithCharAndNewline() {
            return this._buf.endsWithCharAndNewline();
          }
          removeTrailingNewline() {
            this._buf.removeTrailingNewline();
          }
          exactSource(loc, cb) {
            this._catchUp("start", loc), this._buf.exactSource(loc, cb);
          }
          source(prop, loc) {
            this._catchUp(prop, loc), this._buf.source(prop, loc);
          }
          withSource(prop, loc, cb) {
            this._catchUp(prop, loc), this._buf.withSource(prop, loc, cb);
          }
          _space() {
            this._queue(32);
          }
          _newline() {
            this._queue(10);
          }
          _append(str, maybeNewline) {
            this._maybeAddParen(str), this._maybeIndent(str.charCodeAt(0)), this._buf.append(str, maybeNewline), this._endsWithWord = false, this._endsWithInteger = false;
          }
          _appendChar(char) {
            this._maybeAddParenChar(char), this._maybeIndent(char), this._buf.appendChar(char), this._endsWithWord = false, this._endsWithInteger = false;
          }
          _queue(char) {
            this._maybeAddParenChar(char), this._maybeIndent(char), this._buf.queue(char), this._endsWithWord = false, this._endsWithInteger = false;
          }
          _maybeIndent(firstChar) {
            this._indent && 10 !== firstChar && this.endsWith(10) && this._buf.queueIndentation(this._indentChar, this._getIndent());
          }
          _maybeAddParenChar(char) {
            const parenPushNewlineState = this._parenPushNewlineState;
            parenPushNewlineState && 32 !== char && (10 === char ? (this.tokenChar(40), this.indent(), parenPushNewlineState.printed = true) : this._parenPushNewlineState = null);
          }
          _maybeAddParen(str) {
            const parenPushNewlineState = this._parenPushNewlineState;
            if (!parenPushNewlineState)
              return;
            const len = str.length;
            let i;
            for (i = 0; i < len && 32 === str.charCodeAt(i); i++)
              continue;
            if (i === len)
              return;
            const cha = str.charCodeAt(i);
            if (10 !== cha) {
              if (47 !== cha || i + 1 === len)
                return void (this._parenPushNewlineState = null);
              const chaPost = str.charCodeAt(i + 1);
              if (42 === chaPost) {
                if (PURE_ANNOTATION_RE.test(str.slice(i + 2, len - 2)))
                  return;
              } else if (47 !== chaPost)
                return void (this._parenPushNewlineState = null);
            }
            this.tokenChar(40), this.indent(), parenPushNewlineState.printed = true;
          }
          _catchUp(prop, loc) {
            if (!this.format.retainLines)
              return;
            const pos = loc ? loc[prop] : null;
            if (null != (null == pos ? void 0 : pos.line)) {
              const count = pos.line - this._buf.getCurrentLine();
              for (let i = 0; i < count; i++)
                this._newline();
            }
          }
          _getIndent() {
            return this._indentRepeat * this._indent;
          }
          printTerminatorless(node, parent, isLabel) {
            if (isLabel)
              this._noLineTerminator = true, this.print(node, parent), this._noLineTerminator = false;
            else {
              const terminatorState = { printed: false };
              this._parenPushNewlineState = terminatorState, this.print(node, parent), terminatorState.printed && (this.dedent(), this.newline(), this.tokenChar(41));
            }
          }
          print(node, parent, noLineTerminator) {
            if (!node)
              return;
            const nodeType = node.type, format2 = this.format, oldConcise = format2.concise;
            node._compact && (format2.concise = true);
            const printMethod = this[nodeType];
            if (void 0 === printMethod)
              throw new ReferenceError(`unknown node of type ${JSON.stringify(nodeType)} with constructor ${JSON.stringify(node.constructor.name)}`);
            this._printStack.push(node);
            const oldInAux = this._insideAux;
            let shouldPrintParens;
            this._insideAux = null == node.loc, this._maybeAddAuxComment(this._insideAux && !oldInAux), shouldPrintParens = !!(format2.retainFunctionParens && "FunctionExpression" === nodeType && node.extra && node.extra.parenthesized) || needsParens(node, parent, this._printStack), shouldPrintParens && this.tokenChar(40), this._printLeadingComments(node);
            const loc = "Program" === nodeType || "File" === nodeType ? null : node.loc;
            this.withSource("start", loc, printMethod.bind(this, node, parent)), noLineTerminator && !this._noLineTerminator ? (this._noLineTerminator = true, this._printTrailingComments(node), this._noLineTerminator = false) : this._printTrailingComments(node), shouldPrintParens && this.tokenChar(41), this._printStack.pop(), format2.concise = oldConcise, this._insideAux = oldInAux;
          }
          _maybeAddAuxComment(enteredPositionlessNode) {
            enteredPositionlessNode && this._printAuxBeforeComment(), this._insideAux || this._printAuxAfterComment();
          }
          _printAuxBeforeComment() {
            if (this._printAuxAfterOnNextUserNode)
              return;
            this._printAuxAfterOnNextUserNode = true;
            const comment = this.format.auxiliaryCommentBefore;
            comment && this._printComment({ type: "CommentBlock", value: comment });
          }
          _printAuxAfterComment() {
            if (!this._printAuxAfterOnNextUserNode)
              return;
            this._printAuxAfterOnNextUserNode = false;
            const comment = this.format.auxiliaryCommentAfter;
            comment && this._printComment({ type: "CommentBlock", value: comment });
          }
          getPossibleRaw(node) {
            const extra = node.extra;
            if (extra && null != extra.raw && null != extra.rawValue && node.value === extra.rawValue)
              return extra.raw;
          }
          printJoin(nodes, parent, opts = {}) {
            if (null == nodes || !nodes.length)
              return;
            opts.indent && this.indent();
            const newlineOpts = { addNewlines: opts.addNewlines }, len = nodes.length;
            for (let i = 0; i < len; i++) {
              const node = nodes[i];
              node && (opts.statement && this._printNewline(true, node, parent, newlineOpts), this.print(node, parent), opts.iterator && opts.iterator(node, i), opts.separator && i < len - 1 && opts.separator.call(this), opts.statement && this._printNewline(false, node, parent, newlineOpts));
            }
            opts.indent && this.dedent();
          }
          printAndIndentOnComments(node, parent) {
            const indent = node.leadingComments && node.leadingComments.length > 0;
            indent && this.indent(), this.print(node, parent), indent && this.dedent();
          }
          printBlock(parent) {
            const node = parent.body;
            "EmptyStatement" !== node.type && this.space(), this.print(node, parent);
          }
          _printTrailingComments(node) {
            this._printComments(this._getComments(false, node));
          }
          _printLeadingComments(node) {
            this._printComments(this._getComments(true, node), true);
          }
          printInnerComments(node, indent = true) {
            var _node$innerComments;
            null != (_node$innerComments = node.innerComments) && _node$innerComments.length && (indent && this.indent(), this._printComments(node.innerComments), indent && this.dedent());
          }
          printSequence(nodes, parent, opts = {}) {
            return opts.statement = true, this.printJoin(nodes, parent, opts);
          }
          printList(items, parent, opts = {}) {
            return null == opts.separator && (opts.separator = commaSeparator), this.printJoin(items, parent, opts);
          }
          _printNewline(leading, node, parent, opts) {
            if (this.format.retainLines || this.format.compact)
              return;
            if (this.format.concise)
              return void this.space();
            let lines = 0;
            if (this._buf.hasContent()) {
              leading || lines++, opts.addNewlines && (lines += opts.addNewlines(leading, node) || 0);
              (leading ? needsWhitespaceBefore : needsWhitespaceAfter)(node, parent) && lines++;
            }
            this.newline(Math.min(2, lines));
          }
          _getComments(leading, node) {
            return node && (leading ? node.leadingComments : node.trailingComments) || null;
          }
          _printComment(comment, skipNewLines) {
            if (comment.ignore)
              return;
            if (this._printedComments.has(comment))
              return;
            if (!this.format.shouldPrintComment(comment.value))
              return;
            this._printedComments.add(comment);
            const isBlockComment = "CommentBlock" === comment.type, printNewLines = isBlockComment && !skipNewLines && !this._noLineTerminator;
            printNewLines && this._buf.hasContent() && this.newline(1);
            const lastCharCode = this.getLastChar();
            let val;
            91 !== lastCharCode && 123 !== lastCharCode && this.space();
            let maybeNewline = false;
            if (isBlockComment) {
              if (val = `/*${comment.value}*/`, this.format.indent.adjustMultilineComment) {
                var _comment$loc;
                const offset2 = null == (_comment$loc = comment.loc) ? void 0 : _comment$loc.start.column;
                if (offset2) {
                  const newlineRegex = new RegExp("\\n\\s{1," + offset2 + "}", "g");
                  val = val.replace(newlineRegex, "\n");
                }
                const indentSize = Math.max(this._getIndent(), this.format.retainLines ? 0 : this._buf.getCurrentColumn());
                val = val.replace(/\n(?!$)/g, `
${" ".repeat(indentSize)}`), maybeNewline = true;
              }
            } else
              this._noLineTerminator ? val = `/*${comment.value}*/` : (val = `//${comment.value}
`, maybeNewline = true);
            this.endsWith(47) && this._space(), this.withSource("start", comment.loc, this._append.bind(this, val, maybeNewline)), printNewLines && this.newline(1);
          }
          _printComments(comments, inlinePureAnnotation) {
            if (null != comments && comments.length)
              if (inlinePureAnnotation && 1 === comments.length && PURE_ANNOTATION_RE.test(comments[0].value))
                this._printComment(comments[0], this._buf.hasContent() && !this.endsWith(10));
              else
                for (const comment of comments)
                  this._printComment(comment);
          }
          printAssertions(node) {
            var _node$assertions;
            null != (_node$assertions = node.assertions) && _node$assertions.length && (this.space(), this.word("assert"), this.space(), this.tokenChar(123), this.space(), this.printList(node.assertions, node), this.space(), this.tokenChar(125));
          }
        }
        Object.assign(Printer.prototype, generatorFunctions), Printer.prototype.Noop = function() {
        };
        var _default = Printer;
        function commaSeparator() {
          this.tokenChar(44), this.space();
        }
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/source-map.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _genMapping = __webpack_require__2("./node_modules/.pnpm/@jridgewell+gen-mapping@0.3.2/node_modules/@jridgewell/gen-mapping/dist/gen-mapping.umd.js");
        exports2.default = class {
          constructor(opts, code) {
            var _opts$sourceFileName;
            this._map = void 0, this._rawMappings = void 0, this._sourceFileName = void 0, this._lastGenLine = 0, this._lastSourceLine = 0, this._lastSourceColumn = 0;
            const map = this._map = new _genMapping.GenMapping({ sourceRoot: opts.sourceRoot });
            this._sourceFileName = null == (_opts$sourceFileName = opts.sourceFileName) ? void 0 : _opts$sourceFileName.replace(/\\/g, "/"), this._rawMappings = void 0, "string" == typeof code ? (0, _genMapping.setSourceContent)(map, this._sourceFileName, code) : "object" == typeof code && Object.keys(code).forEach((sourceFileName) => {
              (0, _genMapping.setSourceContent)(map, sourceFileName.replace(/\\/g, "/"), code[sourceFileName]);
            });
          }
          get() {
            return (0, _genMapping.toEncodedMap)(this._map);
          }
          getDecoded() {
            return (0, _genMapping.toDecodedMap)(this._map);
          }
          getRawMappings() {
            return this._rawMappings || (this._rawMappings = (0, _genMapping.allMappings)(this._map));
          }
          mark(generated, line, column, identifierName, filename) {
            this._rawMappings = void 0, (0, _genMapping.maybeAddMapping)(this._map, { name: identifierName, generated, source: null == line ? void 0 : (null == filename ? void 0 : filename.replace(/\\/g, "/")) || this._sourceFileName, original: null == line ? void 0 : { line, column } });
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.18.6/node_modules/@babel/helper-annotate-as-pure/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(pathOrNode) {
          const node = pathOrNode.node || pathOrNode;
          if ((({ leadingComments }) => !!leadingComments && leadingComments.some((comment) => /[@#]__PURE__/.test(comment.value)))(node))
            return;
          addComment(node, "leading", "#__PURE__");
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { addComment } = _t;
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildDecoratedClass = function(ref2, path3, elements, file) {
          const { node, scope } = path3, initializeId = scope.generateUidIdentifier("initialize"), isDeclaration = node.id && path3.isDeclaration(), isStrict = path3.isInStrictMode(), { superClass } = node;
          node.type = "ClassDeclaration", node.id || (node.id = _core.types.cloneNode(ref2));
          let superId;
          superClass && (superId = scope.generateUidIdentifierBasedOnNode(node.superClass, "super"), node.superClass = superId);
          const classDecorators = takeDecorators(node), definitions = _core.types.arrayExpression(elements.filter((element) => !element.node.abstract && "TSIndexSignature" !== element.node.type).map((path4) => function(file2, classRef, superRef, path5) {
            const isMethod = path5.isClassMethod();
            if (path5.isPrivate())
              throw path5.buildCodeFrameError(`Private ${isMethod ? "methods" : "fields"} in decorated classes are not supported yet.`);
            if ("ClassAccessorProperty" === path5.node.type)
              throw path5.buildCodeFrameError('Accessor properties are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.');
            if ("StaticBlock" === path5.node.type)
              throw path5.buildCodeFrameError('Static blocks are not supported in 2018-09 decorator transform, please specify { "version": "2021-12" } instead.');
            const { node: node2, scope: scope2 } = path5;
            path5.isTSDeclareMethod() || new _helperReplaceSupers.default({ methodPath: path5, objectRef: classRef, superRef, file: file2, refToPreserve: classRef }).replace();
            const properties = [prop("kind", _core.types.stringLiteral(_core.types.isClassMethod(node2) ? node2.kind : "field")), prop("decorators", takeDecorators(node2)), prop("static", node2.static && _core.types.booleanLiteral(true)), prop("key", getKey(node2))].filter(Boolean);
            if (_core.types.isClassMethod(node2)) {
              const id = node2.computed ? null : node2.key, transformed = _core.types.toExpression(node2);
              properties.push(prop("value", (0, _helperFunctionName.default)({ node: transformed, id, scope: scope2 }) || transformed));
            } else
              _core.types.isClassProperty(node2) && node2.value ? properties.push((key = "value", body = _core.template.statements.ast`return ${node2.value}`, _core.types.objectMethod("method", _core.types.identifier(key), [], _core.types.blockStatement(body)))) : properties.push(prop("value", scope2.buildUndefinedNode()));
            var key, body;
            return path5.remove(), _core.types.objectExpression(properties);
          }(file, node.id, superId, path4))), wrapperCall = _core.template.expression.ast`
    ${function(file2) {
            try {
              return file2.addHelper("decorate");
            } catch (err) {
              throw "BABEL_HELPER_UNKNOWN" === err.code && (err.message += "\n  '@babel/plugin-transform-decorators' in non-legacy mode requires '@babel/core' version ^7.0.2 and you appear to be using an older version."), err;
            }
          }(file)}(
      ${classDecorators || _core.types.nullLiteral()},
      function (${initializeId}, ${superClass ? _core.types.cloneNode(superId) : null}) {
        ${node}
        return { F: ${_core.types.cloneNode(node.id)}, d: ${definitions} };
      },
      ${superClass}
    )
  `;
          isStrict || wrapperCall.arguments[1].body.directives.push(_core.types.directive(_core.types.directiveLiteral("use strict")));
          let replacement = wrapperCall, classPathDesc = "arguments.1.body.body.0";
          isDeclaration && (replacement = _core.template.statement.ast`let ${ref2} = ${wrapperCall}`, classPathDesc = "declarations.0.init." + classPathDesc);
          return { instanceNodes: [_core.template.statement.ast`${_core.types.cloneNode(initializeId)}(this)`], wrapClass: (path4) => (path4.replaceWith(replacement), path4.get(classPathDesc)) };
        }, exports2.hasDecorators = function(node) {
          return hasOwnDecorators(node) || node.body.body.some(hasOwnDecorators);
        }, exports2.hasOwnDecorators = hasOwnDecorators;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.19.1/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-function-name@7.19.0/node_modules/@babel/helper-function-name/lib/index.js");
        function hasOwnDecorators(node) {
          return !(!node.decorators || !node.decorators.length);
        }
        function prop(key, value) {
          return value ? _core.types.objectProperty(_core.types.identifier(key), value) : null;
        }
        function takeDecorators(node) {
          let result;
          return node.decorators && node.decorators.length > 0 && (result = _core.types.arrayExpression(node.decorators.map((decorator) => decorator.expression))), node.decorators = void 0, result;
        }
        function getKey(node) {
          return node.computed ? node.key : _core.types.isIdentifier(node.key) ? _core.types.stringLiteral(node.key.name) : _core.types.stringLiteral(String(node.key.value));
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/features.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.FEATURES = void 0, exports2.enableFeature = function(file, feature, loose) {
          hasFeature(file, feature) && !canIgnoreLoose(file, feature) || (file.set(featuresKey, file.get(featuresKey) | feature), "#__internal__@babel/preset-env__prefer-true-but-false-is-ok-if-it-prevents-an-error" === loose ? (setLoose(file, feature, true), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature)) : "#__internal__@babel/preset-env__prefer-false-but-true-is-ok-if-it-prevents-an-error" === loose ? (setLoose(file, feature, false), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) | feature)) : setLoose(file, feature, loose));
          let resolvedLoose, higherPriorityPluginName;
          for (const [mask, name] of featuresSameLoose) {
            if (!hasFeature(file, mask))
              continue;
            const loose2 = isLoose(file, mask);
            if (!canIgnoreLoose(file, mask)) {
              if (resolvedLoose === !loose2)
                throw new Error("'loose' mode configuration must be the same for @babel/plugin-proposal-class-properties, @babel/plugin-proposal-private-methods and @babel/plugin-proposal-private-property-in-object (when they are enabled).");
              resolvedLoose = loose2, higherPriorityPluginName = name;
            }
          }
          if (void 0 !== resolvedLoose)
            for (const [mask, name] of featuresSameLoose)
              hasFeature(file, mask) && isLoose(file, mask) !== resolvedLoose && (setLoose(file, mask, resolvedLoose), console.warn(`Though the "loose" option was set to "${!resolvedLoose}" in your @babel/preset-env config, it will not be used for ${name} since the "loose" mode option was set to "${resolvedLoose}" for ${higherPriorityPluginName}.
The "loose" option must be the same for @babel/plugin-proposal-class-properties, @babel/plugin-proposal-private-methods and @babel/plugin-proposal-private-property-in-object (when they are enabled): you can silence this warning by explicitly adding
	["${name}", { "loose": ${resolvedLoose} }]
to the "plugins" section of your Babel config.`));
        }, exports2.isLoose = isLoose, exports2.shouldTransform = function(path3, file) {
          let decoratorPath = null, publicFieldPath = null, privateFieldPath = null, privateMethodPath = null, staticBlockPath = null;
          (0, _decorators.hasOwnDecorators)(path3.node) && (decoratorPath = path3.get("decorators.0"));
          for (const el of path3.get("body.body"))
            !decoratorPath && (0, _decorators.hasOwnDecorators)(el.node) && (decoratorPath = el.get("decorators.0")), !publicFieldPath && el.isClassProperty() && (publicFieldPath = el), !privateFieldPath && el.isClassPrivateProperty() && (privateFieldPath = el), !privateMethodPath && null != el.isClassPrivateMethod && el.isClassPrivateMethod() && (privateMethodPath = el), !staticBlockPath && null != el.isStaticBlock && el.isStaticBlock() && (staticBlockPath = el);
          if (decoratorPath && privateFieldPath)
            throw privateFieldPath.buildCodeFrameError("Private fields in decorated classes are not supported yet.");
          if (decoratorPath && privateMethodPath)
            throw privateMethodPath.buildCodeFrameError("Private methods in decorated classes are not supported yet.");
          if (decoratorPath && !hasFeature(file, FEATURES.decorators))
            throw path3.buildCodeFrameError('Decorators are not enabled.\nIf you are using ["@babel/plugin-proposal-decorators", { "version": "legacy" }], make sure it comes *before* "@babel/plugin-proposal-class-properties" and enable loose mode, like so:\n	["@babel/plugin-proposal-decorators", { "version": "legacy" }]\n	["@babel/plugin-proposal-class-properties", { "loose": true }]');
          if (privateMethodPath && !hasFeature(file, FEATURES.privateMethods))
            throw privateMethodPath.buildCodeFrameError("Class private methods are not enabled. Please add `@babel/plugin-proposal-private-methods` to your configuration.");
          if ((publicFieldPath || privateFieldPath) && !hasFeature(file, FEATURES.fields) && !hasFeature(file, FEATURES.privateMethods))
            throw path3.buildCodeFrameError("Class fields are not enabled. Please add `@babel/plugin-proposal-class-properties` to your configuration.");
          if (staticBlockPath && !hasFeature(file, FEATURES.staticBlocks))
            throw path3.buildCodeFrameError("Static class blocks are not enabled. Please add `@babel/plugin-proposal-class-static-block` to your configuration.");
          if (decoratorPath || privateMethodPath || staticBlockPath)
            return true;
          if ((publicFieldPath || privateFieldPath) && hasFeature(file, FEATURES.fields))
            return true;
          return false;
        };
        var _decorators = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js");
        const FEATURES = Object.freeze({ fields: 2, privateMethods: 4, decorators: 8, privateIn: 16, staticBlocks: 32 });
        exports2.FEATURES = FEATURES;
        const featuresSameLoose = /* @__PURE__ */ new Map([[FEATURES.fields, "@babel/plugin-proposal-class-properties"], [FEATURES.privateMethods, "@babel/plugin-proposal-private-methods"], [FEATURES.privateIn, "@babel/plugin-proposal-private-property-in-object"]]), featuresKey = "@babel/plugin-class-features/featuresKey", looseKey = "@babel/plugin-class-features/looseKey", looseLowPriorityKey = "@babel/plugin-class-features/looseLowPriorityKey/#__internal__@babel/preset-env__please-overwrite-loose-instead-of-throwing";
        function hasFeature(file, feature) {
          return !!(file.get(featuresKey) & feature);
        }
        function isLoose(file, feature) {
          return !!(file.get(looseKey) & feature);
        }
        function setLoose(file, feature, loose) {
          loose ? file.set(looseKey, file.get(looseKey) | feature) : file.set(looseKey, file.get(looseKey) & ~feature), file.set(looseLowPriorityKey, file.get(looseLowPriorityKey) & ~feature);
        }
        function canIgnoreLoose(file, feature) {
          return !!(file.get(looseLowPriorityKey) & feature);
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildFieldsInitNodes = function(ref2, superRef, props, privateNamesMap, state, setPublicClassFields, privateFieldsAsProperties, constantSuper, innerBindingRef) {
          let injectSuperRef, needsClassRef = false;
          const staticNodes = [], instanceNodes = [], pureStaticNodes = [], getSuperRef = _core.types.isIdentifier(superRef) ? () => superRef : () => (null != injectSuperRef || (injectSuperRef = props[0].scope.generateUidIdentifierBasedOnNode(superRef)), injectSuperRef);
          for (const prop of props) {
            prop.isClassProperty() && ts.assertFieldTransformed(prop);
            const isStatic = !(null != _core.types.isStaticBlock && _core.types.isStaticBlock(prop.node)) && prop.node.static, isInstance = !isStatic, isPrivate = prop.isPrivate(), isPublic = !isPrivate, isField = prop.isProperty(), isMethod = !isField, isStaticBlock = null == prop.isStaticBlock ? void 0 : prop.isStaticBlock();
            if (isStatic || isMethod && isPrivate || isStaticBlock) {
              const replaced = replaceThisContext(prop, ref2, getSuperRef, state, isStaticBlock, constantSuper, innerBindingRef);
              needsClassRef = needsClassRef || replaced;
            }
            switch (true) {
              case isStaticBlock: {
                const blockBody = prop.node.body;
                1 === blockBody.length && _core.types.isExpressionStatement(blockBody[0]) ? staticNodes.push(blockBody[0]) : staticNodes.push(_core.template.statement.ast`(() => { ${blockBody} })()`);
                break;
              }
              case (isStatic && isPrivate && isField && privateFieldsAsProperties):
                needsClassRef = true, staticNodes.push(buildPrivateFieldInitLoose(_core.types.cloneNode(ref2), prop, privateNamesMap));
                break;
              case (isStatic && isPrivate && isField && !privateFieldsAsProperties):
                needsClassRef = true, staticNodes.push(buildPrivateStaticFieldInitSpec(prop, privateNamesMap));
                break;
              case (isStatic && isPublic && isField && setPublicClassFields):
                if (!isNameOrLength(prop.node)) {
                  needsClassRef = true, staticNodes.push(buildPublicFieldInitLoose(_core.types.cloneNode(ref2), prop));
                  break;
                }
              case (isStatic && isPublic && isField && !setPublicClassFields):
                needsClassRef = true, staticNodes.push(buildPublicFieldInitSpec(_core.types.cloneNode(ref2), prop, state));
                break;
              case (isInstance && isPrivate && isField && privateFieldsAsProperties):
                instanceNodes.push(buildPrivateFieldInitLoose(_core.types.thisExpression(), prop, privateNamesMap));
                break;
              case (isInstance && isPrivate && isField && !privateFieldsAsProperties):
                instanceNodes.push(buildPrivateInstanceFieldInitSpec(_core.types.thisExpression(), prop, privateNamesMap, state));
                break;
              case (isInstance && isPrivate && isMethod && privateFieldsAsProperties):
                instanceNodes.unshift(buildPrivateMethodInitLoose(_core.types.thisExpression(), prop, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));
                break;
              case (isInstance && isPrivate && isMethod && !privateFieldsAsProperties):
                instanceNodes.unshift(buildPrivateInstanceMethodInitSpec(_core.types.thisExpression(), prop, privateNamesMap, state)), pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));
                break;
              case (isStatic && isPrivate && isMethod && !privateFieldsAsProperties):
                needsClassRef = true, staticNodes.unshift(buildPrivateStaticFieldInitSpec(prop, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));
                break;
              case (isStatic && isPrivate && isMethod && privateFieldsAsProperties):
                needsClassRef = true, staticNodes.unshift(buildPrivateStaticMethodInitLoose(_core.types.cloneNode(ref2), prop, state, privateNamesMap)), pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));
                break;
              case (isInstance && isPublic && isField && setPublicClassFields):
                instanceNodes.push(buildPublicFieldInitLoose(_core.types.thisExpression(), prop));
                break;
              case (isInstance && isPublic && isField && !setPublicClassFields):
                instanceNodes.push(buildPublicFieldInitSpec(_core.types.thisExpression(), prop, state));
                break;
              default:
                throw new Error("Unreachable.");
            }
          }
          return { staticNodes: staticNodes.filter(Boolean), instanceNodes: instanceNodes.filter(Boolean), pureStaticNodes: pureStaticNodes.filter(Boolean), wrapClass(path3) {
            for (const prop of props)
              prop.remove();
            return injectSuperRef && (path3.scope.push({ id: _core.types.cloneNode(injectSuperRef) }), path3.set("superClass", _core.types.assignmentExpression("=", injectSuperRef, path3.node.superClass))), needsClassRef ? (path3.isClassExpression() ? (path3.scope.push({ id: ref2 }), path3.replaceWith(_core.types.assignmentExpression("=", _core.types.cloneNode(ref2), path3.node))) : path3.node.id || (path3.node.id = ref2), path3) : path3;
          } };
        }, exports2.buildPrivateNamesMap = function(props) {
          const privateNamesMap = /* @__PURE__ */ new Map();
          for (const prop of props)
            if (prop.isPrivate()) {
              const { name } = prop.node.key.id, update = privateNamesMap.has(name) ? privateNamesMap.get(name) : { id: prop.scope.generateUidIdentifier(name), static: prop.node.static, method: !prop.isProperty() };
              prop.isClassPrivateMethod() && ("get" === prop.node.kind ? update.getId = prop.scope.generateUidIdentifier(`get_${name}`) : "set" === prop.node.kind ? update.setId = prop.scope.generateUidIdentifier(`set_${name}`) : "method" === prop.node.kind && (update.methodId = prop.scope.generateUidIdentifier(name))), privateNamesMap.set(name, update);
            }
          return privateNamesMap;
        }, exports2.buildPrivateNamesNodes = function(privateNamesMap, privateFieldsAsProperties, state) {
          const initNodes = [];
          for (const [name, value] of privateNamesMap) {
            const { static: isStatic, method: isMethod, getId, setId } = value, isAccessor = getId || setId, id = _core.types.cloneNode(value.id);
            let init;
            privateFieldsAsProperties ? init = _core.types.callExpression(state.addHelper("classPrivateFieldLooseKey"), [_core.types.stringLiteral(name)]) : isStatic || (init = _core.types.newExpression(_core.types.identifier(!isMethod || isAccessor ? "WeakMap" : "WeakSet"), [])), init && ((0, _helperAnnotateAsPure.default)(init), initNodes.push(_core.template.statement.ast`var ${id} = ${init}`));
          }
          return initNodes;
        }, exports2.transformPrivateNamesUsage = function(ref2, path3, privateNamesMap, { privateFieldsAsProperties, noDocumentAll, innerBinding }, state) {
          if (!privateNamesMap.size)
            return;
          const body = path3.get("body"), handler = privateFieldsAsProperties ? privateNameHandlerLoose : privateNameHandlerSpec;
          (0, _helperMemberExpressionToFunctions.default)(body, privateNameVisitor, Object.assign({ privateNamesMap, classRef: ref2, file: state }, handler, { noDocumentAll, innerBinding })), body.traverse(privateInVisitor, { privateNamesMap, classRef: ref2, file: state, privateFieldsAsProperties, innerBinding });
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.19.1/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"), _helperMemberExpressionToFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.18.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"), _helperOptimiseCallExpression = __webpack_require__2("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.18.6/node_modules/@babel/helper-optimise-call-expression/lib/index.js"), _helperAnnotateAsPure = __webpack_require__2("./node_modules/.pnpm/@babel+helper-annotate-as-pure@7.18.6/node_modules/@babel/helper-annotate-as-pure/lib/index.js"), ts = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js");
        function privateNameVisitorFactory(visitor) {
          const privateNameVisitor2 = Object.assign({}, visitor, { Class(path3) {
            const { privateNamesMap } = this, body = path3.get("body.body"), visiblePrivateNames = new Map(privateNamesMap), redeclared = [];
            for (const prop of body) {
              if (!prop.isPrivate())
                continue;
              const { name } = prop.node.key.id;
              visiblePrivateNames.delete(name), redeclared.push(name);
            }
            redeclared.length && (path3.get("body").traverse(nestedVisitor, Object.assign({}, this, { redeclared })), path3.traverse(privateNameVisitor2, Object.assign({}, this, { privateNamesMap: visiblePrivateNames })), path3.skipKey("body"));
          } }), nestedVisitor = _core.traverse.visitors.merge([Object.assign({}, visitor), _helperEnvironmentVisitor.default]);
          return privateNameVisitor2;
        }
        const privateNameVisitor = privateNameVisitorFactory({ PrivateName(path3, { noDocumentAll }) {
          const { privateNamesMap, redeclared } = this, { node, parentPath } = path3;
          if (!parentPath.isMemberExpression({ property: node }) && !parentPath.isOptionalMemberExpression({ property: node }))
            return;
          const { name } = node.id;
          privateNamesMap.has(name) && (redeclared && redeclared.includes(name) || this.handle(parentPath, noDocumentAll));
        } });
        function unshadow(name, scope, innerBinding) {
          for (; null != (_scope = scope) && _scope.hasBinding(name) && !scope.bindingIdentifierEquals(name, innerBinding); ) {
            var _scope;
            scope.rename(name), scope = scope.parent;
          }
        }
        const privateInVisitor = privateNameVisitorFactory({ BinaryExpression(path3) {
          const { operator, left, right } = path3.node;
          if ("in" !== operator)
            return;
          if (!_core.types.isPrivateName(left))
            return;
          const { privateFieldsAsProperties, privateNamesMap, redeclared } = this, { name } = left.id;
          if (!privateNamesMap.has(name))
            return;
          if (redeclared && redeclared.includes(name))
            return;
          if (unshadow(this.classRef.name, path3.scope, this.innerBinding), privateFieldsAsProperties) {
            const { id: id2 } = privateNamesMap.get(name);
            return void path3.replaceWith(_core.template.expression.ast`
        Object.prototype.hasOwnProperty.call(${right}, ${_core.types.cloneNode(id2)})
      `);
          }
          const { id, static: isStatic } = privateNamesMap.get(name);
          isStatic ? path3.replaceWith(_core.template.expression.ast`${right} === ${this.classRef}`) : path3.replaceWith(_core.template.expression.ast`${_core.types.cloneNode(id)}.has(${right})`);
        } }), privateNameHandlerSpec = { memoise(member, count) {
          const { scope } = member, { object } = member.node, memo = scope.maybeGenerateMemoised(object);
          memo && this.memoiser.set(object, memo, count);
        }, receiver(member) {
          const { object } = member.node;
          return this.memoiser.has(object) ? _core.types.cloneNode(this.memoiser.get(object)) : _core.types.cloneNode(object);
        }, get(member) {
          const { classRef, privateNamesMap, file, innerBinding } = this, { name } = member.node.property.id, { id, static: isStatic, method: isMethod, methodId, getId, setId } = privateNamesMap.get(name), isAccessor = getId || setId;
          if (isStatic) {
            const helperName = isMethod && !isAccessor ? "classStaticPrivateMethodGet" : "classStaticPrivateFieldSpecGet";
            return unshadow(classRef.name, member.scope, innerBinding), _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id)]);
          }
          if (isMethod) {
            if (isAccessor) {
              if (!getId && setId) {
                if (file.availableHelper("writeOnlyError"))
                  return _core.types.sequenceExpression([this.receiver(member), _core.types.callExpression(file.addHelper("writeOnlyError"), [_core.types.stringLiteral(`#${name}`)])]);
                console.warn("@babel/helpers is outdated, update it to silence this warning.");
              }
              return _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), _core.types.cloneNode(id)]);
            }
            return _core.types.callExpression(file.addHelper("classPrivateMethodGet"), [this.receiver(member), _core.types.cloneNode(id), _core.types.cloneNode(methodId)]);
          }
          return _core.types.callExpression(file.addHelper("classPrivateFieldGet"), [this.receiver(member), _core.types.cloneNode(id)]);
        }, boundGet(member) {
          return this.memoise(member, 1), _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [this.receiver(member)]);
        }, set(member, value) {
          const { classRef, privateNamesMap, file } = this, { name } = member.node.property.id, { id, static: isStatic, method: isMethod, setId, getId } = privateNamesMap.get(name);
          if (isStatic) {
            const helperName = isMethod && !(getId || setId) ? "classStaticPrivateMethodSet" : "classStaticPrivateFieldSpecSet";
            return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id), value]);
          }
          return isMethod ? setId ? _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [this.receiver(member), _core.types.cloneNode(id), value]) : _core.types.sequenceExpression([this.receiver(member), value, _core.types.callExpression(file.addHelper("readOnlyError"), [_core.types.stringLiteral(`#${name}`)])]) : _core.types.callExpression(file.addHelper("classPrivateFieldSet"), [this.receiver(member), _core.types.cloneNode(id), value]);
        }, destructureSet(member) {
          const { classRef, privateNamesMap, file } = this, { name } = member.node.property.id, { id, static: isStatic } = privateNamesMap.get(name);
          if (isStatic) {
            try {
              var helper = file.addHelper("classStaticPrivateFieldDestructureSet");
            } catch (_unused) {
              throw new Error("Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \nplease update @babel/helpers to the latest version.");
            }
            return _core.types.memberExpression(_core.types.callExpression(helper, [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id)]), _core.types.identifier("value"));
          }
          return _core.types.memberExpression(_core.types.callExpression(file.addHelper("classPrivateFieldDestructureSet"), [this.receiver(member), _core.types.cloneNode(id)]), _core.types.identifier("value"));
        }, call(member, args) {
          return this.memoise(member, 1), (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, false);
        }, optionalCall(member, args) {
          return this.memoise(member, 1), (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, true);
        } }, privateNameHandlerLoose = { get(member) {
          const { privateNamesMap, file } = this, { object } = member.node, { name } = member.node.property.id;
          return _core.template.expression`BASE(REF, PROP)[PROP]`({ BASE: file.addHelper("classPrivateFieldLooseBase"), REF: _core.types.cloneNode(object), PROP: _core.types.cloneNode(privateNamesMap.get(name).id) });
        }, set() {
          throw new Error("private name handler with loose = true don't need set()");
        }, boundGet(member) {
          return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier("bind")), [_core.types.cloneNode(member.node.object)]);
        }, simpleSet(member) {
          return this.get(member);
        }, destructureSet(member) {
          return this.get(member);
        }, call(member, args) {
          return _core.types.callExpression(this.get(member), args);
        }, optionalCall(member, args) {
          return _core.types.optionalCallExpression(this.get(member), args, true);
        } };
        function buildPrivateFieldInitLoose(ref2, prop, privateNamesMap) {
          const { id } = privateNamesMap.get(prop.node.key.id.name), value = prop.node.value || prop.scope.buildUndefinedNode();
          return _core.template.statement.ast`
    Object.defineProperty(${ref2}, ${_core.types.cloneNode(id)}, {
      // configurable is false by default
      // enumerable is false by default
      writable: true,
      value: ${value}
    });
  `;
        }
        function buildPrivateInstanceFieldInitSpec(ref2, prop, privateNamesMap, state) {
          const { id } = privateNamesMap.get(prop.node.key.id.name), value = prop.node.value || prop.scope.buildUndefinedNode();
          if (!state.availableHelper("classPrivateFieldInitSpec"))
            return _core.template.statement.ast`${_core.types.cloneNode(id)}.set(${ref2}, {
        // configurable is always false for private elements
        // enumerable is always false for private elements
        writable: true,
        value: ${value},
      })`;
          const helper = state.addHelper("classPrivateFieldInitSpec");
          return _core.template.statement.ast`${helper}(
    ${_core.types.thisExpression()},
    ${_core.types.cloneNode(id)},
    {
      writable: true,
      value: ${value}
    },
  )`;
        }
        function buildPrivateStaticFieldInitSpec(prop, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, getId, setId, initAdded } = privateName, isAccessor = getId || setId;
          if (!prop.isProperty() && (initAdded || !isAccessor))
            return;
          if (isAccessor)
            return privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), _core.template.statement.ast`
      var ${_core.types.cloneNode(id)} = {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
      }
    `;
          const value = prop.node.value || prop.scope.buildUndefinedNode();
          return _core.template.statement.ast`
    var ${_core.types.cloneNode(id)} = {
      // configurable is false by default
      // enumerable is false by default
      writable: true,
      value: ${value}
    };
  `;
        }
        function buildPrivateMethodInitLoose(ref2, prop, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { methodId, id, getId, setId, initAdded } = privateName;
          if (initAdded)
            return;
          if (methodId)
            return _core.template.statement.ast`
        Object.defineProperty(${ref2}, ${id}, {
          // configurable is false by default
          // enumerable is false by default
          // writable is false by default
          value: ${methodId.name}
        });
      `;
          return getId || setId ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), _core.template.statement.ast`
      Object.defineProperty(${ref2}, ${id}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
      });
    `) : void 0;
        }
        function buildPrivateInstanceMethodInitSpec(ref2, prop, privateNamesMap, state) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { getId, setId, initAdded } = privateName;
          if (initAdded)
            return;
          return getId || setId ? function(ref3, prop2, privateNamesMap2, state2) {
            const privateName2 = privateNamesMap2.get(prop2.node.key.id.name), { id, getId: getId2, setId: setId2 } = privateName2;
            if (privateNamesMap2.set(prop2.node.key.id.name, Object.assign({}, privateName2, { initAdded: true })), !state2.availableHelper("classPrivateFieldInitSpec"))
              return _core.template.statement.ast`
      ${id}.set(${ref3}, {
        get: ${getId2 ? getId2.name : prop2.scope.buildUndefinedNode()},
        set: ${setId2 ? setId2.name : prop2.scope.buildUndefinedNode()}
      });
    `;
            const helper = state2.addHelper("classPrivateFieldInitSpec");
            return _core.template.statement.ast`${helper}(
    ${_core.types.thisExpression()},
    ${_core.types.cloneNode(id)},
    {
      get: ${getId2 ? getId2.name : prop2.scope.buildUndefinedNode()},
      set: ${setId2 ? setId2.name : prop2.scope.buildUndefinedNode()}
    },
  )`;
          }(ref2, prop, privateNamesMap, state) : function(ref3, prop2, privateNamesMap2, state2) {
            const privateName2 = privateNamesMap2.get(prop2.node.key.id.name), { id } = privateName2;
            if (!state2.availableHelper("classPrivateMethodInitSpec"))
              return _core.template.statement.ast`${id}.add(${ref3})`;
            const helper = state2.addHelper("classPrivateMethodInitSpec");
            return _core.template.statement.ast`${helper}(
    ${_core.types.thisExpression()},
    ${_core.types.cloneNode(id)}
  )`;
          }(ref2, prop, privateNamesMap, state);
        }
        function buildPublicFieldInitLoose(ref2, prop) {
          const { key, computed } = prop.node, value = prop.node.value || prop.scope.buildUndefinedNode();
          return _core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(ref2, key, computed || _core.types.isLiteral(key)), value));
        }
        function buildPublicFieldInitSpec(ref2, prop, state) {
          const { key, computed } = prop.node, value = prop.node.value || prop.scope.buildUndefinedNode();
          return _core.types.expressionStatement(_core.types.callExpression(state.addHelper("defineProperty"), [ref2, computed || _core.types.isLiteral(key) ? key : _core.types.stringLiteral(key.name), value]));
        }
        function buildPrivateStaticMethodInitLoose(ref2, prop, state, privateNamesMap) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, methodId, getId, setId, initAdded } = privateName;
          if (initAdded)
            return;
          return getId || setId ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { initAdded: true })), _core.template.statement.ast`
      Object.defineProperty(${ref2}, ${id}, {
        // configurable is false by default
        // enumerable is false by default
        // writable is false by default
        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},
        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}
      })
    `) : _core.template.statement.ast`
    Object.defineProperty(${ref2}, ${id}, {
      // configurable is false by default
      // enumerable is false by default
      // writable is false by default
      value: ${methodId.name}
    });
  `;
        }
        function buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties = false) {
          const privateName = privateNamesMap.get(prop.node.key.id.name), { id, methodId, getId, setId, getterDeclared, setterDeclared, static: isStatic } = privateName, { params, body, generator, async } = prop.node, isGetter = getId && !getterDeclared && 0 === params.length, isSetter = setId && !setterDeclared && params.length > 0;
          let declId = methodId;
          return isGetter ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { getterDeclared: true })), declId = getId) : isSetter ? (privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, { setterDeclared: true })), declId = setId) : isStatic && !privateFieldsAsProperties && (declId = id), _core.types.functionDeclaration(_core.types.cloneNode(declId), params, body, generator, async);
        }
        const thisContextVisitor = _core.traverse.visitors.merge([{ ThisExpression(path3, state) {
          state.needsClassRef = true, path3.replaceWith(_core.types.cloneNode(state.classRef));
        }, MetaProperty(path3) {
          const meta = path3.get("meta"), property = path3.get("property"), { scope } = path3;
          meta.isIdentifier({ name: "new" }) && property.isIdentifier({ name: "target" }) && path3.replaceWith(scope.buildUndefinedNode());
        } }, _helperEnvironmentVisitor.default]), innerReferencesVisitor = { ReferencedIdentifier(path3, state) {
          path3.scope.bindingIdentifierEquals(path3.node.name, state.innerBinding) && (state.needsClassRef = true, path3.node.name = state.classRef.name);
        } };
        function replaceThisContext(path3, ref2, getSuperRef, file, isStaticBlock, constantSuper, innerBindingRef) {
          var _state$classRef;
          const state = { classRef: ref2, needsClassRef: false, innerBinding: innerBindingRef };
          return new _helperReplaceSupers.default({ methodPath: path3, constantSuper, file, refToPreserve: ref2, getSuperRef, getObjectRef: () => (state.needsClassRef = true, null != _core.types.isStaticBlock && _core.types.isStaticBlock(path3.node) || path3.node.static ? ref2 : _core.types.memberExpression(ref2, _core.types.identifier("prototype"))) }).replace(), (isStaticBlock || path3.isProperty()) && path3.traverse(thisContextVisitor, state), null != innerBindingRef && null != (_state$classRef = state.classRef) && _state$classRef.name && state.classRef.name !== (null == innerBindingRef ? void 0 : innerBindingRef.name) && path3.traverse(innerReferencesVisitor, state), state.needsClassRef;
        }
        function isNameOrLength({ key, computed }) {
          return "Identifier" === key.type ? !computed && ("name" === key.name || "length" === key.name) : "StringLiteral" === key.type && ("name" === key.value || "length" === key.value);
        }
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "FEATURES", { enumerable: true, get: function() {
          return _features.FEATURES;
        } }), exports2.createClassFeaturePlugin = function({ name, feature, loose, manipulateOptions, api = { assumption: () => {
        } }, inherits }) {
          const setPublicClassFields = api.assumption("setPublicClassFields"), privateFieldsAsProperties = api.assumption("privateFieldsAsProperties"), constantSuper = api.assumption("constantSuper"), noDocumentAll = api.assumption("noDocumentAll");
          if (true === loose) {
            const explicit = [];
            void 0 !== setPublicClassFields && explicit.push('"setPublicClassFields"'), void 0 !== privateFieldsAsProperties && explicit.push('"privateFieldsAsProperties"'), 0 !== explicit.length && console.warn(`[${name}]: You are using the "loose: true" option and you are explicitly setting a value for the ${explicit.join(" and ")} assumption${explicit.length > 1 ? "s" : ""}. The "loose" option can cause incompatibilities with the other class features plugins, so it's recommended that you replace it with the following top-level option:
	"assumptions": {
		"setPublicClassFields": true,
		"privateFieldsAsProperties": true
	}`);
          }
          return { name, manipulateOptions, inherits, pre(file) {
            (0, _features.enableFeature)(file, feature, loose), (!file.get(versionKey) || file.get(versionKey) < version2) && file.set(versionKey, version2);
          }, visitor: { Class(path3, { file }) {
            if (file.get(versionKey) !== version2)
              return;
            if (!(0, _features.shouldTransform)(path3, file))
              return;
            path3.isClassDeclaration() && (0, _typescript.assertFieldTransformed)(path3);
            const loose2 = (0, _features.isLoose)(file, feature);
            let constructor;
            const isDecorated = (0, _decorators.hasDecorators)(path3.node), props = [], elements = [], computedPaths = [], privateNames = /* @__PURE__ */ new Set(), body = path3.get("body");
            for (const path4 of body.get("body")) {
              if ((path4.isClassProperty() || path4.isClassMethod()) && path4.node.computed && computedPaths.push(path4), path4.isPrivate()) {
                const { name: name2 } = path4.node.key.id, getName = `get ${name2}`, setName = `set ${name2}`;
                if (path4.isClassPrivateMethod()) {
                  if ("get" === path4.node.kind) {
                    if (privateNames.has(getName) || privateNames.has(name2) && !privateNames.has(setName))
                      throw path4.buildCodeFrameError("Duplicate private field");
                    privateNames.add(getName).add(name2);
                  } else if ("set" === path4.node.kind) {
                    if (privateNames.has(setName) || privateNames.has(name2) && !privateNames.has(getName))
                      throw path4.buildCodeFrameError("Duplicate private field");
                    privateNames.add(setName).add(name2);
                  }
                } else {
                  if (privateNames.has(name2) && !privateNames.has(getName) && !privateNames.has(setName) || privateNames.has(name2) && (privateNames.has(getName) || privateNames.has(setName)))
                    throw path4.buildCodeFrameError("Duplicate private field");
                  privateNames.add(name2);
                }
              }
              path4.isClassMethod({ kind: "constructor" }) ? constructor = path4 : (elements.push(path4), (path4.isProperty() || path4.isPrivate() || null != path4.isStaticBlock && path4.isStaticBlock()) && props.push(path4));
            }
            if (!props.length && !isDecorated)
              return;
            const innerBinding = path3.node.id;
            let ref2;
            !innerBinding || path3.isClassExpression() ? ((0, _helperFunctionName.default)(path3), ref2 = path3.scope.generateUidIdentifier("class")) : ref2 = _core.types.cloneNode(path3.node.id);
            const privateNamesMap = (0, _fields.buildPrivateNamesMap)(props), privateNamesNodes = (0, _fields.buildPrivateNamesNodes)(privateNamesMap, null != privateFieldsAsProperties ? privateFieldsAsProperties : loose2, file);
            let keysNodes, staticNodes, instanceNodes, pureStaticNodes, wrapClass;
            (0, _fields.transformPrivateNamesUsage)(ref2, path3, privateNamesMap, { privateFieldsAsProperties: null != privateFieldsAsProperties ? privateFieldsAsProperties : loose2, noDocumentAll, innerBinding }, file), isDecorated ? (staticNodes = pureStaticNodes = keysNodes = [], { instanceNodes, wrapClass } = (0, _decorators.buildDecoratedClass)(ref2, path3, elements, file)) : (keysNodes = (0, _misc.extractComputedKeys)(path3, computedPaths, file), { staticNodes, pureStaticNodes, instanceNodes, wrapClass } = (0, _fields.buildFieldsInitNodes)(ref2, path3.node.superClass, props, privateNamesMap, file, null != setPublicClassFields ? setPublicClassFields : loose2, null != privateFieldsAsProperties ? privateFieldsAsProperties : loose2, null != constantSuper ? constantSuper : loose2, innerBinding)), instanceNodes.length > 0 && (0, _misc.injectInitialization)(path3, constructor, instanceNodes, (referenceVisitor, state) => {
              if (!isDecorated)
                for (const prop of props)
                  null != _core.types.isStaticBlock && _core.types.isStaticBlock(prop.node) || prop.node.static || prop.traverse(referenceVisitor, state);
            });
            const wrappedPath = wrapClass(path3);
            wrappedPath.insertBefore([...privateNamesNodes, ...keysNodes]), staticNodes.length > 0 && wrappedPath.insertAfter(staticNodes), pureStaticNodes.length > 0 && wrappedPath.find((parent) => parent.isStatement() || parent.isDeclaration()).insertAfter(pureStaticNodes);
          }, ExportDefaultDeclaration(path3, { file }) {
            {
              if (file.get(versionKey) !== version2)
                return;
              const decl = path3.get("declaration");
              decl.isClassDeclaration() && (0, _decorators.hasDecorators)(decl.node) && (decl.node.id ? (0, _helperSplitExportDeclaration.default)(path3) : decl.node.type = "ClassExpression");
            }
          } } };
        }, Object.defineProperty(exports2, "enableFeature", { enumerable: true, get: function() {
          return _features.enableFeature;
        } }), Object.defineProperty(exports2, "injectInitialization", { enumerable: true, get: function() {
          return _misc.injectInitialization;
        } });
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js"), _helperFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-function-name@7.19.0/node_modules/@babel/helper-function-name/lib/index.js"), _helperSplitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js"), _fields = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/fields.js"), _decorators = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/decorators.js"), _misc = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js"), _features = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/features.js"), _typescript = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js");
        const version2 = "7.19.0".split(".").reduce((v, x) => 1e5 * v + +x, 0), versionKey = "@babel/plugin-class-features/version";
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/misc.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.extractComputedKeys = function(path3, computedPaths, file) {
          const declarations = [], state = { classBinding: path3.node.id && path3.scope.getBinding(path3.node.id.name), file };
          for (const computedPath of computedPaths) {
            const computedKey = computedPath.get("key");
            computedKey.isReferencedIdentifier() ? handleClassTDZ(computedKey, state) : computedKey.traverse(classFieldDefinitionEvaluationTDZVisitor, state);
            const computedNode = computedPath.node;
            if (!computedKey.isConstantExpression()) {
              const ident = path3.scope.generateUidIdentifierBasedOnNode(computedNode.key);
              path3.scope.push({ id: ident, kind: "let" }), declarations.push(_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.cloneNode(ident), computedNode.key))), computedNode.key = _core.types.cloneNode(ident);
            }
          }
          return declarations;
        }, exports2.injectInitialization = function(path3, constructor, nodes, renamer) {
          if (!nodes.length)
            return;
          const isDerived = !!path3.node.superClass;
          if (!constructor) {
            const newConstructor = _core.types.classMethod("constructor", _core.types.identifier("constructor"), [], _core.types.blockStatement([]));
            isDerived && (newConstructor.params = [_core.types.restElement(_core.types.identifier("args"))], newConstructor.body.body.push(_core.template.statement.ast`super(...args)`)), [constructor] = path3.get("body").unshiftContainer("body", newConstructor);
          }
          renamer && renamer(referenceVisitor, { scope: constructor.scope });
          if (isDerived) {
            const bareSupers = [];
            constructor.traverse(findBareSupers, bareSupers);
            let isFirst = true;
            for (const bareSuper of bareSupers)
              isFirst ? (bareSuper.insertAfter(nodes), isFirst = false) : bareSuper.insertAfter(nodes.map((n) => _core.types.cloneNode(n)));
          } else
            constructor.get("body").unshiftContainer("body", nodes);
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js");
        const findBareSupers = _core.traverse.visitors.merge([{ Super(path3) {
          const { node, parentPath } = path3;
          parentPath.isCallExpression({ callee: node }) && this.push(parentPath);
        } }, _helperEnvironmentVisitor.default]), referenceVisitor = { "TSTypeAnnotation|TypeAnnotation"(path3) {
          path3.skip();
        }, ReferencedIdentifier(path3, { scope }) {
          scope.hasOwnBinding(path3.node.name) && (scope.rename(path3.node.name), path3.skip());
        } };
        function handleClassTDZ(path3, state) {
          if (state.classBinding && state.classBinding === path3.scope.getBinding(path3.node.name)) {
            const classNameTDZError = state.file.addHelper("classNameTDZError"), throwNode = _core.types.callExpression(classNameTDZError, [_core.types.stringLiteral(path3.node.name)]);
            path3.replaceWith(_core.types.sequenceExpression([throwNode, path3.node])), path3.skip();
          }
        }
        const classFieldDefinitionEvaluationTDZVisitor = { ReferencedIdentifier: handleClassTDZ };
      }, "./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/typescript.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assertFieldTransformed = function(path3) {
          if (path3.node.declare)
            throw path3.buildCodeFrameError("TypeScript 'declare' fields must first be transformed by @babel/plugin-transform-typescript.\nIf you have already enabled that plugin (or '@babel/preset-typescript'), make sure that it runs before any plugin related to additional class features:\n - @babel/plugin-proposal-class-properties\n - @babel/plugin-proposal-private-methods\n - @babel/plugin-proposal-decorators");
        };
      }, "./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function requeueComputedKeyAndDecorators(path3) {
          const { context, node } = path3;
          if (node.computed && context.maybeQueue(path3.get("key")), node.decorators)
            for (const decorator of path3.get("decorators"))
              context.maybeQueue(decorator);
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0, exports2.requeueComputedKeyAndDecorators = requeueComputedKeyAndDecorators, exports2.skipAllButComputedKey = function(path3) {
          path3.skip(), path3.node.computed && path3.context.maybeQueue(path3.get("key"));
        };
        var _default = { FunctionParent(path3) {
          path3.isArrowFunctionExpression() || (path3.skip(), path3.isMethod() && requeueComputedKeyAndDecorators(path3));
        }, Property(path3) {
          path3.isObjectProperty() || (path3.skip(), requeueComputedKeyAndDecorators(path3));
        } };
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+helper-function-name@7.19.0/node_modules/@babel/helper-function-name/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function({ node, parent, scope, id }, localBinding = false, supportUnicodeId = false) {
          if (node.id)
            return;
          if (!isObjectProperty(parent) && !isObjectMethod(parent, { kind: "method" }) || parent.computed && !isLiteral(parent.key)) {
            if (isVariableDeclarator(parent)) {
              if (id = parent.id, isIdentifier(id) && !localBinding) {
                const binding = scope.parent.getBinding(id.name);
                if (binding && binding.constant && scope.getBinding(id.name) === binding)
                  return node.id = cloneNode(id), void (node.id[NOT_LOCAL_BINDING] = true);
              }
            } else if (isAssignmentExpression(parent, { operator: "=" }))
              id = parent.left;
            else if (!id)
              return;
          } else
            id = parent.key;
          let name;
          id && isLiteral(id) ? name = function(id2) {
            if (isNullLiteral(id2))
              return "null";
            if (isRegExpLiteral(id2))
              return `_${id2.pattern}_${id2.flags}`;
            if (isTemplateLiteral(id2))
              return id2.quasis.map((quasi) => quasi.value.raw).join("");
            if (void 0 !== id2.value)
              return id2.value + "";
            return "";
          }(id) : id && isIdentifier(id) && (name = id.name);
          if (void 0 === name)
            return;
          if (!supportUnicodeId && isFunction(node) && /[\uD800-\uDFFF]/.test(name))
            return;
          name = toBindingIdentifierName(name);
          const newId = identifier(name);
          newId[NOT_LOCAL_BINDING] = true;
          return function(state, method, id2, scope2) {
            if (state.selfReference) {
              if (!scope2.hasBinding(id2.name) || scope2.hasGlobal(id2.name)) {
                if (!isFunction(method))
                  return;
                let build2 = buildPropertyMethodAssignmentWrapper;
                method.generator && (build2 = buildGeneratorPropertyMethodAssignmentWrapper);
                const template = build2({ FUNCTION: method, FUNCTION_ID: id2, FUNCTION_KEY: scope2.generateUidIdentifier(id2.name) }).expression, params = template.callee.body.body[0].params;
                for (let i = 0, len = function(node2) {
                  const count = node2.params.findIndex((param) => isAssignmentPattern(param) || isRestElement(param));
                  return -1 === count ? node2.params.length : count;
                }(method); i < len; i++)
                  params.push(scope2.generateUidIdentifier("x"));
                return template;
              }
              scope2.rename(id2.name);
            }
            method.id = id2, scope2.getProgramParent().references[id2.name] = true;
          }(function(node2, name2, scope2) {
            const state = { selfAssignment: false, selfReference: false, outerDeclar: scope2.getBindingIdentifier(name2), name: name2 }, binding = scope2.getOwnBinding(name2);
            binding ? "param" === binding.kind && (state.selfReference = true) : (state.outerDeclar || scope2.hasGlobal(name2)) && scope2.traverse(node2, visitor, state);
            return state;
          }(node, name, scope), node, newId, scope) || node;
        };
        var _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { NOT_LOCAL_BINDING, cloneNode, identifier, isAssignmentExpression, isAssignmentPattern, isFunction, isIdentifier, isLiteral, isNullLiteral, isObjectMethod, isObjectProperty, isRegExpLiteral, isRestElement, isTemplateLiteral, isVariableDeclarator, toBindingIdentifierName } = _t;
        const buildPropertyMethodAssignmentWrapper = _template.default.statement("\n  (function (FUNCTION_KEY) {\n    function FUNCTION_ID() {\n      return FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    }\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n"), buildGeneratorPropertyMethodAssignmentWrapper = _template.default.statement("\n  (function (FUNCTION_KEY) {\n    function* FUNCTION_ID() {\n      return yield* FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    };\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n"), visitor = { "ReferencedIdentifier|BindingIdentifier"(path3, state) {
          if (path3.node.name !== state.name)
            return;
          path3.scope.getBindingIdentifier(state.name) === state.outerDeclar && (state.selfReference = true, path3.stop());
        } };
      }, "./node_modules/.pnpm/@babel+helper-hoist-variables@7.18.6/node_modules/@babel/helper-hoist-variables/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path3, emit, kind = "var") {
          path3.traverse(visitor, { kind, emit });
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { assignmentExpression, expressionStatement, identifier } = _t, visitor = { Scope(path3, state) {
          "let" === state.kind && path3.skip();
        }, FunctionParent(path3) {
          path3.skip();
        }, VariableDeclaration(path3, state) {
          if (state.kind && path3.node.kind !== state.kind)
            return;
          const nodes = [], declarations = path3.get("declarations");
          let firstId;
          for (const declar of declarations) {
            firstId = declar.node.id, declar.node.init && nodes.push(expressionStatement(assignmentExpression("=", declar.node.id, declar.node.init)));
            for (const name of Object.keys(declar.getBindingIdentifiers()))
              state.emit(identifier(name), name, null !== declar.node.init);
          }
          path3.parentPath.isFor({ left: path3.node }) ? path3.replaceWith(firstId) : path3.replaceWithMultiple(nodes);
        } };
      }, "./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.18.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function _interopNamespace(e) {
          if (e && e.__esModule)
            return e;
          var n = /* @__PURE__ */ Object.create(null);
          return e && Object.keys(e).forEach(function(k) {
            if ("default" !== k) {
              var d = Object.getOwnPropertyDescriptor(e, k);
              Object.defineProperty(n, k, d.get ? d : { enumerable: true, get: function() {
                return e[k];
              } });
            }
          }), n.default = e, Object.freeze(n);
        }
        Object.defineProperty(exports2, "__esModule", { value: true });
        var _t__namespace = _interopNamespace(__webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"));
        function willPathCastToBoolean(path3) {
          const maybeWrapped = path3, { node, parentPath } = maybeWrapped;
          if (parentPath.isLogicalExpression()) {
            const { operator, right } = parentPath.node;
            if ("&&" === operator || "||" === operator || "??" === operator && node === right)
              return willPathCastToBoolean(parentPath);
          }
          if (parentPath.isSequenceExpression()) {
            const { expressions } = parentPath.node;
            return expressions[expressions.length - 1] !== node || willPathCastToBoolean(parentPath);
          }
          return parentPath.isConditional({ test: node }) || parentPath.isUnaryExpression({ operator: "!" }) || parentPath.isLoop({ test: node });
        }
        const { LOGICAL_OPERATORS, arrowFunctionExpression, assignmentExpression, binaryExpression, booleanLiteral, callExpression, cloneNode, conditionalExpression, identifier, isMemberExpression, isOptionalCallExpression, isOptionalMemberExpression, isUpdateExpression, logicalExpression, memberExpression, nullLiteral, optionalCallExpression, optionalMemberExpression, sequenceExpression, updateExpression } = _t__namespace;
        class AssignmentMemoiser {
          constructor() {
            this._map = void 0, this._map = /* @__PURE__ */ new WeakMap();
          }
          has(key) {
            return this._map.has(key);
          }
          get(key) {
            if (!this.has(key))
              return;
            const record = this._map.get(key), { value } = record;
            return record.count--, 0 === record.count ? assignmentExpression("=", value, key) : value;
          }
          set(key, value, count) {
            return this._map.set(key, { count, value });
          }
        }
        function toNonOptional(path3, base) {
          const { node } = path3;
          if (isOptionalMemberExpression(node))
            return memberExpression(base, node.property, node.computed);
          if (path3.isOptionalCallExpression()) {
            const callee = path3.get("callee");
            if (path3.node.optional && callee.isOptionalMemberExpression()) {
              const object = callee.node.object, context = path3.scope.maybeGenerateMemoised(object);
              return callee.get("object").replaceWith(assignmentExpression("=", context, object)), callExpression(memberExpression(base, identifier("call")), [context, ...path3.node.arguments]);
            }
            return callExpression(base, path3.node.arguments);
          }
          return path3.node;
        }
        const handle = { memoise() {
        }, handle(member, noDocumentAll) {
          const { node, parent, parentPath, scope } = member;
          if (member.isOptionalMemberExpression()) {
            if (function(path3) {
              for (; path3 && !path3.isProgram(); ) {
                const { parentPath: parentPath2, container, listKey } = path3, parentNode = parentPath2.node;
                if (listKey) {
                  if (container !== parentNode[listKey])
                    return true;
                } else if (container !== parentNode)
                  return true;
                path3 = parentPath2;
              }
              return false;
            }(member))
              return;
            const endPath = member.find(({ node: node2, parent: parent2 }) => isOptionalMemberExpression(parent2) ? parent2.optional || parent2.object !== node2 : !isOptionalCallExpression(parent2) || (node2 !== member.node && parent2.optional || parent2.callee !== node2));
            if (scope.path.isPattern())
              return void endPath.replaceWith(callExpression(arrowFunctionExpression([], endPath.node), []));
            const willEndPathCastToBoolean = willPathCastToBoolean(endPath), rootParentPath = endPath.parentPath;
            if (rootParentPath.isUpdateExpression({ argument: node }) || rootParentPath.isAssignmentExpression({ left: node }))
              throw member.buildCodeFrameError("can't handle assignment");
            const isDeleteOperation = rootParentPath.isUnaryExpression({ operator: "delete" });
            if (isDeleteOperation && endPath.isOptionalMemberExpression() && endPath.get("property").isPrivateName())
              throw member.buildCodeFrameError("can't delete a private class element");
            let startingOptional = member;
            for (; ; )
              if (startingOptional.isOptionalMemberExpression()) {
                if (startingOptional.node.optional)
                  break;
                startingOptional = startingOptional.get("object");
              } else {
                if (!startingOptional.isOptionalCallExpression())
                  throw new Error(`Internal error: unexpected ${startingOptional.node.type}`);
                if (startingOptional.node.optional)
                  break;
                startingOptional = startingOptional.get("callee");
              }
            const startingNode = startingOptional.isOptionalMemberExpression() ? startingOptional.node.object : startingOptional.node.callee, baseNeedsMemoised = scope.maybeGenerateMemoised(startingNode), baseRef = null != baseNeedsMemoised ? baseNeedsMemoised : startingNode, parentIsOptionalCall = parentPath.isOptionalCallExpression({ callee: node }), isOptionalCall = (parent2) => parentIsOptionalCall, parentIsCall = parentPath.isCallExpression({ callee: node });
            startingOptional.replaceWith(toNonOptional(startingOptional, baseRef)), isOptionalCall() ? parent.optional ? parentPath.replaceWith(this.optionalCall(member, parent.arguments)) : parentPath.replaceWith(this.call(member, parent.arguments)) : parentIsCall ? member.replaceWith(this.boundGet(member)) : member.replaceWith(this.get(member));
            let context, regular = member.node;
            for (let current2 = member; current2 !== endPath; ) {
              const parentPath2 = current2.parentPath;
              if (parentPath2 === endPath && isOptionalCall() && parent.optional) {
                regular = parentPath2.node;
                break;
              }
              regular = toNonOptional(parentPath2, regular), current2 = parentPath2;
            }
            const endParentPath = endPath.parentPath;
            if (isMemberExpression(regular) && endParentPath.isOptionalCallExpression({ callee: endPath.node, optional: true })) {
              const { object } = regular;
              context = member.scope.maybeGenerateMemoised(object), context && (regular.object = assignmentExpression("=", context, object));
            }
            let replacementPath = endPath;
            isDeleteOperation && (replacementPath = endParentPath, regular = endParentPath.node);
            const baseMemoised = baseNeedsMemoised ? assignmentExpression("=", cloneNode(baseRef), cloneNode(startingNode)) : cloneNode(baseRef);
            if (willEndPathCastToBoolean) {
              let nonNullishCheck;
              nonNullishCheck = noDocumentAll ? binaryExpression("!=", baseMemoised, nullLiteral()) : logicalExpression("&&", binaryExpression("!==", baseMemoised, nullLiteral()), binaryExpression("!==", cloneNode(baseRef), scope.buildUndefinedNode())), replacementPath.replaceWith(logicalExpression("&&", nonNullishCheck, regular));
            } else {
              let nullishCheck;
              nullishCheck = noDocumentAll ? binaryExpression("==", baseMemoised, nullLiteral()) : logicalExpression("||", binaryExpression("===", baseMemoised, nullLiteral()), binaryExpression("===", cloneNode(baseRef), scope.buildUndefinedNode())), replacementPath.replaceWith(conditionalExpression(nullishCheck, isDeleteOperation ? booleanLiteral(true) : scope.buildUndefinedNode(), regular));
            }
            if (context) {
              const endParent = endParentPath.node;
              endParentPath.replaceWith(optionalCallExpression(optionalMemberExpression(endParent.callee, identifier("call"), false, true), [cloneNode(context), ...endParent.arguments], false));
            }
          } else {
            if (isUpdateExpression(parent, { argument: node })) {
              if (this.simpleSet)
                return void member.replaceWith(this.simpleSet(member));
              const { operator, prefix } = parent;
              this.memoise(member, 2);
              const ref2 = scope.generateUidIdentifierBasedOnNode(node);
              scope.push({ id: ref2 });
              const seq = [assignmentExpression("=", cloneNode(ref2), this.get(member))];
              if (prefix) {
                seq.push(updateExpression(operator, cloneNode(ref2), prefix));
                const value = sequenceExpression(seq);
                return void parentPath.replaceWith(this.set(member, value));
              }
              {
                const ref22 = scope.generateUidIdentifierBasedOnNode(node);
                scope.push({ id: ref22 }), seq.push(assignmentExpression("=", cloneNode(ref22), updateExpression(operator, cloneNode(ref2), prefix)), cloneNode(ref2));
                const value = sequenceExpression(seq);
                return void parentPath.replaceWith(sequenceExpression([this.set(member, value), cloneNode(ref22)]));
              }
            }
            if (parentPath.isAssignmentExpression({ left: node })) {
              if (this.simpleSet)
                return void member.replaceWith(this.simpleSet(member));
              const { operator, right: value } = parentPath.node;
              if ("=" === operator)
                parentPath.replaceWith(this.set(member, value));
              else {
                const operatorTrunc = operator.slice(0, -1);
                LOGICAL_OPERATORS.includes(operatorTrunc) ? (this.memoise(member, 1), parentPath.replaceWith(logicalExpression(operatorTrunc, this.get(member), this.set(member, value)))) : (this.memoise(member, 2), parentPath.replaceWith(this.set(member, binaryExpression(operatorTrunc, this.get(member), value))));
              }
            } else {
              if (!parentPath.isCallExpression({ callee: node }))
                return parentPath.isOptionalCallExpression({ callee: node }) ? scope.path.isPattern() ? void parentPath.replaceWith(callExpression(arrowFunctionExpression([], parentPath.node), [])) : void parentPath.replaceWith(this.optionalCall(member, parentPath.node.arguments)) : void (parentPath.isForXStatement({ left: node }) || parentPath.isObjectProperty({ value: node }) && parentPath.parentPath.isObjectPattern() || parentPath.isAssignmentPattern({ left: node }) && parentPath.parentPath.isObjectProperty({ value: parent }) && parentPath.parentPath.parentPath.isObjectPattern() || parentPath.isArrayPattern() || parentPath.isAssignmentPattern({ left: node }) && parentPath.parentPath.isArrayPattern() || parentPath.isRestElement() ? member.replaceWith(this.destructureSet(member)) : parentPath.isTaggedTemplateExpression() ? member.replaceWith(this.boundGet(member)) : member.replaceWith(this.get(member)));
              parentPath.replaceWith(this.call(member, parentPath.node.arguments));
            }
          }
        } };
        exports2.default = function(path3, visitor, state) {
          path3.traverse(visitor, Object.assign({}, handle, state, { memoiser: new AssignmentMemoiser() }));
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/import-builder.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { callExpression, cloneNode, expressionStatement, identifier, importDeclaration, importDefaultSpecifier, importNamespaceSpecifier, importSpecifier, memberExpression, stringLiteral, variableDeclaration, variableDeclarator } = _t;
        exports2.default = class {
          constructor(importedSource, scope, hub) {
            this._statements = [], this._resultName = null, this._importedSource = void 0, this._scope = scope, this._hub = hub, this._importedSource = importedSource;
          }
          done() {
            return { statements: this._statements, resultName: this._resultName };
          }
          import() {
            return this._statements.push(importDeclaration([], stringLiteral(this._importedSource))), this;
          }
          require() {
            return this._statements.push(expressionStatement(callExpression(identifier("require"), [stringLiteral(this._importedSource)]))), this;
          }
          namespace(name = "namespace") {
            const local = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importNamespaceSpecifier(local)], this._resultName = cloneNode(local), this;
          }
          default(name) {
            const id = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importDefaultSpecifier(id)], this._resultName = cloneNode(id), this;
          }
          named(name, importName2) {
            if ("default" === importName2)
              return this.default(name);
            const id = this._scope.generateUidIdentifier(name), statement = this._statements[this._statements.length - 1];
            return _assert("ImportDeclaration" === statement.type), _assert(0 === statement.specifiers.length), statement.specifiers = [importSpecifier(id, identifier(importName2))], this._resultName = cloneNode(id), this;
          }
          var(name) {
            const id = this._scope.generateUidIdentifier(name);
            let statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" !== statement.type && (_assert(this._resultName), statement = expressionStatement(this._resultName), this._statements.push(statement)), this._statements[this._statements.length - 1] = variableDeclaration("var", [variableDeclarator(id, statement.expression)]), this._resultName = cloneNode(id), this;
          }
          defaultInterop() {
            return this._interop(this._hub.addHelper("interopRequireDefault"));
          }
          wildcardInterop() {
            return this._interop(this._hub.addHelper("interopRequireWildcard"));
          }
          _interop(callee) {
            const statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" === statement.type ? statement.expression = callExpression(callee, [statement.expression]) : "VariableDeclaration" === statement.type ? (_assert(1 === statement.declarations.length), statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init])) : _assert.fail("Unexpected type."), this;
          }
          prop(name) {
            const statement = this._statements[this._statements.length - 1];
            return "ExpressionStatement" === statement.type ? statement.expression = memberExpression(statement.expression, identifier(name)) : "VariableDeclaration" === statement.type ? (_assert(1 === statement.declarations.length), statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name))) : _assert.fail("Unexpected type:" + statement.type), this;
          }
          read(name) {
            this._resultName = memberExpression(this._resultName, identifier(name));
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/import-injector.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _importBuilder = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/import-builder.js"), _isModule = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/is-module.js");
        const { numericLiteral, sequenceExpression } = _t;
        exports2.default = class {
          constructor(path3, importedSource, opts) {
            this._defaultOpts = { importedSource: null, importedType: "commonjs", importedInterop: "babel", importingInterop: "babel", ensureLiveReference: false, ensureNoContext: false, importPosition: "before" };
            const programPath = path3.find((p) => p.isProgram());
            this._programPath = programPath, this._programScope = programPath.scope, this._hub = programPath.hub, this._defaultOpts = this._applyDefaults(importedSource, opts, true);
          }
          addDefault(importedSourceIn, opts) {
            return this.addNamed("default", importedSourceIn, opts);
          }
          addNamed(importName2, importedSourceIn, opts) {
            return _assert("string" == typeof importName2), this._generateImport(this._applyDefaults(importedSourceIn, opts), importName2);
          }
          addNamespace(importedSourceIn, opts) {
            return this._generateImport(this._applyDefaults(importedSourceIn, opts), null);
          }
          addSideEffect(importedSourceIn, opts) {
            return this._generateImport(this._applyDefaults(importedSourceIn, opts), void 0);
          }
          _applyDefaults(importedSource, opts, isInit = false) {
            let newOpts;
            return "string" == typeof importedSource ? newOpts = Object.assign({}, this._defaultOpts, { importedSource }, opts) : (_assert(!opts, "Unexpected secondary arguments."), newOpts = Object.assign({}, this._defaultOpts, importedSource)), !isInit && opts && (void 0 !== opts.nameHint && (newOpts.nameHint = opts.nameHint), void 0 !== opts.blockHoist && (newOpts.blockHoist = opts.blockHoist)), newOpts;
          }
          _generateImport(opts, importName2) {
            const isDefault = "default" === importName2, isNamed = !!importName2 && !isDefault, isNamespace = null === importName2, { importedSource, importedType, importedInterop, importingInterop, ensureLiveReference, ensureNoContext, nameHint, importPosition, blockHoist } = opts;
            let name = nameHint || importName2;
            const isMod = (0, _isModule.default)(this._programPath), isModuleForNode = isMod && "node" === importingInterop, isModuleForBabel = isMod && "babel" === importingInterop;
            if ("after" === importPosition && !isMod)
              throw new Error('"importPosition": "after" is only supported in modules');
            const builder = new _importBuilder.default(importedSource, this._programScope, this._hub);
            if ("es6" === importedType) {
              if (!isModuleForNode && !isModuleForBabel)
                throw new Error("Cannot import an ES6 module from CommonJS");
              builder.import(), isNamespace ? builder.namespace(nameHint || importedSource) : (isDefault || isNamed) && builder.named(name, importName2);
            } else {
              if ("commonjs" !== importedType)
                throw new Error(`Unexpected interopType "${importedType}"`);
              if ("babel" === importedInterop)
                if (isModuleForNode) {
                  name = "default" !== name ? name : importedSource;
                  const es6Default = `${importedSource}$es6Default`;
                  builder.import(), isNamespace ? builder.default(es6Default).var(name || importedSource).wildcardInterop() : isDefault ? ensureLiveReference ? builder.default(es6Default).var(name || importedSource).defaultInterop().read("default") : builder.default(es6Default).var(name).defaultInterop().prop(importName2) : isNamed && builder.default(es6Default).read(importName2);
                } else
                  isModuleForBabel ? (builder.import(), isNamespace ? builder.namespace(name || importedSource) : (isDefault || isNamed) && builder.named(name, importName2)) : (builder.require(), isNamespace ? builder.var(name || importedSource).wildcardInterop() : (isDefault || isNamed) && ensureLiveReference ? isDefault ? (name = "default" !== name ? name : importedSource, builder.var(name).read(importName2), builder.defaultInterop()) : builder.var(importedSource).read(importName2) : isDefault ? builder.var(name).defaultInterop().prop(importName2) : isNamed && builder.var(name).prop(importName2));
              else if ("compiled" === importedInterop)
                isModuleForNode ? (builder.import(), isNamespace ? builder.default(name || importedSource) : (isDefault || isNamed) && builder.default(importedSource).read(name)) : isModuleForBabel ? (builder.import(), isNamespace ? builder.namespace(name || importedSource) : (isDefault || isNamed) && builder.named(name, importName2)) : (builder.require(), isNamespace ? builder.var(name || importedSource) : (isDefault || isNamed) && (ensureLiveReference ? builder.var(importedSource).read(name) : builder.prop(importName2).var(name)));
              else {
                if ("uncompiled" !== importedInterop)
                  throw new Error(`Unknown importedInterop "${importedInterop}".`);
                if (isDefault && ensureLiveReference)
                  throw new Error("No live reference for commonjs default");
                isModuleForNode ? (builder.import(), isNamespace ? builder.default(name || importedSource) : isDefault ? builder.default(name) : isNamed && builder.default(importedSource).read(name)) : isModuleForBabel ? (builder.import(), isNamespace ? builder.default(name || importedSource) : isDefault ? builder.default(name) : isNamed && builder.named(name, importName2)) : (builder.require(), isNamespace ? builder.var(name || importedSource) : isDefault ? builder.var(name) : isNamed && (ensureLiveReference ? builder.var(importedSource).read(name) : builder.var(name).prop(importName2)));
              }
            }
            const { statements, resultName } = builder.done();
            return this._insertStatements(statements, importPosition, blockHoist), (isDefault || isNamed) && ensureNoContext && "Identifier" !== resultName.type ? sequenceExpression([numericLiteral(0), resultName]) : resultName;
          }
          _insertStatements(statements, importPosition = "before", blockHoist = 3) {
            const body = this._programPath.get("body");
            if ("after" === importPosition) {
              for (let i = body.length - 1; i >= 0; i--)
                if (body[i].isImportDeclaration())
                  return void body[i].insertAfter(statements);
            } else {
              statements.forEach((node) => {
                node._blockHoist = blockHoist;
              });
              const targetPath = body.find((p) => {
                const val = p.node._blockHoist;
                return Number.isFinite(val) && val < 4;
              });
              if (targetPath)
                return void targetPath.insertBefore(statements);
            }
            this._programPath.unshiftContainer("body", statements);
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "ImportInjector", { enumerable: true, get: function() {
          return _importInjector.default;
        } }), exports2.addDefault = function(path3, importedSource, opts) {
          return new _importInjector.default(path3).addDefault(importedSource, opts);
        }, exports2.addNamed = function(path3, name, importedSource, opts) {
          return new _importInjector.default(path3).addNamed(name, importedSource, opts);
        }, exports2.addNamespace = function(path3, importedSource, opts) {
          return new _importInjector.default(path3).addNamespace(importedSource, opts);
        }, exports2.addSideEffect = function(path3, importedSource, opts) {
          return new _importInjector.default(path3).addSideEffect(importedSource, opts);
        }, Object.defineProperty(exports2, "isModule", { enumerable: true, get: function() {
          return _isModule.default;
        } });
        var _importInjector = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/import-injector.js"), _isModule = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/is-module.js");
      }, "./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/is-module.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path3) {
          const { sourceType } = path3.node;
          if ("module" !== sourceType && "script" !== sourceType)
            throw path3.buildCodeFrameError(`Unknown sourceType "${sourceType}", cannot transform.`);
          return "module" === path3.node.sourceType;
        };
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.18.9/node_modules/@babel/helper-module-transforms/lib/get-module-name.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = getModuleName;
        {
          const originalGetModuleName = getModuleName;
          exports2.default = getModuleName = function(rootOpts, pluginOpts) {
            var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;
            return originalGetModuleName(rootOpts, { moduleId: null != (_pluginOpts$moduleId = pluginOpts.moduleId) ? _pluginOpts$moduleId : rootOpts.moduleId, moduleIds: null != (_pluginOpts$moduleIds = pluginOpts.moduleIds) ? _pluginOpts$moduleIds : rootOpts.moduleIds, getModuleId: null != (_pluginOpts$getModule = pluginOpts.getModuleId) ? _pluginOpts$getModule : rootOpts.getModuleId, moduleRoot: null != (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) ? _pluginOpts$moduleRoo : rootOpts.moduleRoot });
          };
        }
        function getModuleName(rootOpts, pluginOpts) {
          const { filename, filenameRelative = filename, sourceRoot = pluginOpts.moduleRoot } = rootOpts, { moduleId, moduleIds = !!moduleId, getModuleId, moduleRoot = sourceRoot } = pluginOpts;
          if (!moduleIds)
            return null;
          if (null != moduleId && !getModuleId)
            return moduleId;
          let moduleName = null != moduleRoot ? moduleRoot + "/" : "";
          if (filenameRelative) {
            const sourceRootReplacer = null != sourceRoot ? new RegExp("^" + sourceRoot + "/?") : "";
            moduleName += filenameRelative.replace(sourceRootReplacer, "").replace(/\.(\w*?)$/, "");
          }
          return moduleName = moduleName.replace(/\\/g, "/"), getModuleId && getModuleId(moduleName) || moduleName;
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.18.9/node_modules/@babel/helper-module-transforms/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildNamespaceInitStatements = function(metadata, sourceMetadata, constantReexports = false) {
          const statements = [];
          let srcNamespace = identifier(sourceMetadata.name);
          sourceMetadata.lazy && (srcNamespace = callExpression(srcNamespace, []));
          for (const localName of sourceMetadata.importsNamespace)
            localName !== sourceMetadata.name && statements.push(_template.default.statement`var NAME = SOURCE;`({ NAME: localName, SOURCE: cloneNode(srcNamespace) }));
          constantReexports && statements.push(...buildReexportsFromMeta(metadata, sourceMetadata, true));
          for (const exportName of sourceMetadata.reexportNamespace)
            statements.push((sourceMetadata.lazy ? _template.default.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          ` : _template.default.statement`EXPORTS.NAME = NAMESPACE;`)({ EXPORTS: metadata.exportName, NAME: exportName, NAMESPACE: cloneNode(srcNamespace) }));
          if (sourceMetadata.reexportAll) {
            const statement = function(metadata2, namespace, constantReexports2) {
              return (constantReexports2 ? _template.default.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : _template.default.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({ NAMESPACE: namespace, EXPORTS: metadata2.exportName, VERIFY_NAME_LIST: metadata2.exportNameListName ? _template.default`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({ EXPORTS_LIST: metadata2.exportNameListName }) : null });
            }(metadata, cloneNode(srcNamespace), constantReexports);
            statement.loc = sourceMetadata.reexportAll.loc, statements.push(statement);
          }
          return statements;
        }, exports2.ensureStatementsHoisted = function(statements) {
          statements.forEach((header) => {
            header._blockHoist = 3;
          });
        }, Object.defineProperty(exports2, "getModuleName", { enumerable: true, get: function() {
          return _getModuleName.default;
        } }), Object.defineProperty(exports2, "hasExports", { enumerable: true, get: function() {
          return _normalizeAndLoadMetadata.hasExports;
        } }), Object.defineProperty(exports2, "isModule", { enumerable: true, get: function() {
          return _helperModuleImports.isModule;
        } }), Object.defineProperty(exports2, "isSideEffectImport", { enumerable: true, get: function() {
          return _normalizeAndLoadMetadata.isSideEffectImport;
        } }), exports2.rewriteModuleStatementsAndPrepareHeader = function(path3, { loose, exportName, strict, allowTopLevelThis, strictMode, noInterop, importInterop = noInterop ? "none" : "babel", lazy, esNamespaceOnly, filename, constantReexports = loose, enumerableModuleMeta = loose, noIncompleteNsImportDetection }) {
          (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop), _assert((0, _helperModuleImports.isModule)(path3), "Cannot process module statements in a script"), path3.node.sourceType = "script";
          const meta = (0, _normalizeAndLoadMetadata.default)(path3, exportName, { importInterop, initializeReexports: constantReexports, lazy, esNamespaceOnly, filename });
          allowTopLevelThis || (0, _rewriteThis.default)(path3);
          if ((0, _rewriteLiveReferences.default)(path3, meta), false !== strictMode) {
            const hasStrict = path3.node.directives.some((directive2) => "use strict" === directive2.value.value);
            hasStrict || path3.unshiftContainer("directives", directive(directiveLiteral("use strict")));
          }
          const headers = [];
          (0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict && headers.push(function(metadata, enumerableModuleMeta2 = false) {
            return (enumerableModuleMeta2 ? _template.default.statement`
        EXPORTS.__esModule = true;
      ` : _template.default.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({ EXPORTS: metadata.exportName });
          }(meta, enumerableModuleMeta));
          const nameList = function(programPath, metadata) {
            const exportedVars = /* @__PURE__ */ Object.create(null);
            for (const data2 of metadata.local.values())
              for (const name2 of data2.names)
                exportedVars[name2] = true;
            let hasReexport = false;
            for (const data2 of metadata.source.values()) {
              for (const exportName2 of data2.reexports.keys())
                exportedVars[exportName2] = true;
              for (const exportName2 of data2.reexportNamespace)
                exportedVars[exportName2] = true;
              hasReexport = hasReexport || !!data2.reexportAll;
            }
            if (!hasReexport || 0 === Object.keys(exportedVars).length)
              return null;
            const name = programPath.scope.generateUidIdentifier("exportNames");
            return delete exportedVars.default, { name: name.name, statement: variableDeclaration("var", [variableDeclarator(name, valueToNode(exportedVars))]) };
          }(path3, meta);
          nameList && (meta.exportNameListName = nameList.name, headers.push(nameList.statement));
          return headers.push(...function(programPath, metadata, constantReexports2 = false, noIncompleteNsImportDetection2 = false) {
            const initStatements = [];
            for (const [localName, data2] of metadata.local)
              if ("import" === data2.kind)
                ;
              else if ("hoisted" === data2.kind)
                initStatements.push([data2.names[0], buildInitStatement(metadata, data2.names, identifier(localName))]);
              else if (!noIncompleteNsImportDetection2)
                for (const exportName2 of data2.names)
                  initStatements.push([exportName2, null]);
            for (const data2 of metadata.source.values()) {
              if (!constantReexports2) {
                const reexportsStatements = buildReexportsFromMeta(metadata, data2, false), reexports = [...data2.reexports.keys()];
                for (let i = 0; i < reexportsStatements.length; i++)
                  initStatements.push([reexports[i], reexportsStatements[i]]);
              }
              if (!noIncompleteNsImportDetection2)
                for (const exportName2 of data2.reexportNamespace)
                  initStatements.push([exportName2, null]);
            }
            initStatements.sort(([a], [b]) => a < b ? -1 : b < a ? 1 : 0);
            const results = [];
            if (noIncompleteNsImportDetection2)
              for (const [, initStatement] of initStatements)
                results.push(initStatement);
            else {
              const chunkSize = 100;
              for (let i = 0; i < initStatements.length; i += chunkSize) {
                let uninitializedExportNames = [];
                for (let j = 0; j < chunkSize && i + j < initStatements.length; j++) {
                  const [exportName2, initStatement] = initStatements[i + j];
                  null !== initStatement ? (uninitializedExportNames.length > 0 && (results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode())), uninitializedExportNames = []), results.push(initStatement)) : uninitializedExportNames.push(exportName2);
                }
                uninitializedExportNames.length > 0 && results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
              }
            }
            return results;
          }(path3, meta, constantReexports, noIncompleteNsImportDetection)), { meta, headers };
        }, Object.defineProperty(exports2, "rewriteThis", { enumerable: true, get: function() {
          return _rewriteThis.default;
        } }), exports2.wrapInterop = function(programPath, expr, type) {
          if ("none" === type)
            return null;
          if ("node-namespace" === type)
            return callExpression(programPath.hub.addHelper("interopRequireWildcard"), [expr, booleanLiteral(true)]);
          if ("node-default" === type)
            return null;
          let helper;
          if ("default" === type)
            helper = "interopRequireDefault";
          else {
            if ("namespace" !== type)
              throw new Error(`Unknown interop: ${type}`);
            helper = "interopRequireWildcard";
          }
          return callExpression(programPath.hub.addHelper(helper), [expr]);
        };
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/index.js"), _helperModuleImports = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/index.js"), _rewriteThis = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.18.9/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js"), _rewriteLiveReferences = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.18.9/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js"), _normalizeAndLoadMetadata = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.18.9/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js"), _getModuleName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.18.9/node_modules/@babel/helper-module-transforms/lib/get-module-name.js");
        const { booleanLiteral, callExpression, cloneNode, directive, directiveLiteral, expressionStatement, identifier, isIdentifier, memberExpression, stringLiteral, valueToNode, variableDeclaration, variableDeclarator } = _t;
        const ReexportTemplate = { constant: _template.default.statement`EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;`, constantComputed: _template.default.statement`EXPORTS["EXPORT_NAME"] = NAMESPACE_IMPORT;`, spec: _template.default.statement`
    Object.defineProperty(EXPORTS, "EXPORT_NAME", {
      enumerable: true,
      get: function() {
        return NAMESPACE_IMPORT;
      },
    });
    ` }, buildReexportsFromMeta = (meta, metadata, constantReexports) => {
          const namespace = metadata.lazy ? callExpression(identifier(metadata.name), []) : identifier(metadata.name), { stringSpecifiers } = meta;
          return Array.from(metadata.reexports, ([exportName, importName2]) => {
            let NAMESPACE_IMPORT = cloneNode(namespace);
            "default" === importName2 && "node-default" === metadata.interop || (NAMESPACE_IMPORT = stringSpecifiers.has(importName2) ? memberExpression(NAMESPACE_IMPORT, stringLiteral(importName2), true) : memberExpression(NAMESPACE_IMPORT, identifier(importName2)));
            const astNodes = { EXPORTS: meta.exportName, EXPORT_NAME: exportName, NAMESPACE_IMPORT };
            return constantReexports || isIdentifier(NAMESPACE_IMPORT) ? stringSpecifiers.has(exportName) ? ReexportTemplate.constantComputed(astNodes) : ReexportTemplate.constant(astNodes) : ReexportTemplate.spec(astNodes);
          });
        };
        const InitTemplate = { computed: _template.default.expression`EXPORTS["NAME"] = VALUE`, default: _template.default.expression`EXPORTS.NAME = VALUE` };
        function buildInitStatement(metadata, exportNames, initExpr) {
          const { stringSpecifiers, exportName: EXPORTS } = metadata;
          return expressionStatement(exportNames.reduce((acc, exportName) => {
            const params = { EXPORTS, NAME: exportName, VALUE: acc };
            return stringSpecifiers.has(exportName) ? InitTemplate.computed(params) : InitTemplate.default(params);
          }, initExpr));
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.18.9/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath, exportName, { importInterop, initializeReexports = false, lazy = false, esNamespaceOnly = false, filename }) {
          exportName || (exportName = programPath.scope.generateUidIdentifier("exports").name);
          const stringSpecifiers = /* @__PURE__ */ new Set();
          !function(programPath2) {
            programPath2.get("body").forEach((child) => {
              child.isExportDefaultDeclaration() && (0, _helperSplitExportDeclaration.default)(child);
            });
          }(programPath);
          const { local, source, hasExports } = function(programPath2, { lazy: lazy2, initializeReexports: initializeReexports2 }, stringSpecifiers2) {
            const localData = function(programPath3, initializeReexports3, stringSpecifiers3) {
              const bindingKindLookup = /* @__PURE__ */ new Map();
              programPath3.get("body").forEach((child) => {
                let kind;
                if (child.isImportDeclaration())
                  kind = "import";
                else {
                  if (child.isExportDefaultDeclaration() && (child = child.get("declaration")), child.isExportNamedDeclaration()) {
                    if (child.node.declaration)
                      child = child.get("declaration");
                    else if (initializeReexports3 && child.node.source && child.get("source").isStringLiteral())
                      return void child.get("specifiers").forEach((spec) => {
                        assertExportSpecifier(spec), bindingKindLookup.set(spec.get("local").node.name, "block");
                      });
                  }
                  if (child.isFunctionDeclaration())
                    kind = "hoisted";
                  else if (child.isClassDeclaration())
                    kind = "block";
                  else if (child.isVariableDeclaration({ kind: "var" }))
                    kind = "var";
                  else {
                    if (!child.isVariableDeclaration())
                      return;
                    kind = "block";
                  }
                }
                Object.keys(child.getOuterBindingIdentifiers()).forEach((name) => {
                  bindingKindLookup.set(name, kind);
                });
              });
              const localMetadata = /* @__PURE__ */ new Map(), getLocalMetadata = (idPath) => {
                const localName = idPath.node.name;
                let metadata = localMetadata.get(localName);
                if (!metadata) {
                  const kind = bindingKindLookup.get(localName);
                  if (void 0 === kind)
                    throw idPath.buildCodeFrameError(`Exporting local "${localName}", which is not declared.`);
                  metadata = { names: [], kind }, localMetadata.set(localName, metadata);
                }
                return metadata;
              };
              return programPath3.get("body").forEach((child) => {
                if (!child.isExportNamedDeclaration() || !initializeReexports3 && child.node.source) {
                  if (child.isExportDefaultDeclaration()) {
                    const declaration = child.get("declaration");
                    if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration())
                      throw declaration.buildCodeFrameError("Unexpected default expression export.");
                    getLocalMetadata(declaration.get("id")).names.push("default");
                  }
                } else if (child.node.declaration) {
                  const declaration = child.get("declaration"), ids = declaration.getOuterBindingIdentifierPaths();
                  Object.keys(ids).forEach((name) => {
                    if ("__esModule" === name)
                      throw declaration.buildCodeFrameError('Illegal export "__esModule".');
                    getLocalMetadata(ids[name]).names.push(name);
                  });
                } else
                  child.get("specifiers").forEach((spec) => {
                    const local2 = spec.get("local"), exported = spec.get("exported"), localMetadata2 = getLocalMetadata(local2), exportName2 = getExportSpecifierName(exported, stringSpecifiers3);
                    if ("__esModule" === exportName2)
                      throw exported.buildCodeFrameError('Illegal export "__esModule".');
                    localMetadata2.names.push(exportName2);
                  });
              }), localMetadata;
            }(programPath2, initializeReexports2, stringSpecifiers2), sourceData = /* @__PURE__ */ new Map(), getData = (sourceNode) => {
              const source2 = sourceNode.value;
              let data2 = sourceData.get(source2);
              return data2 || (data2 = { name: programPath2.scope.generateUidIdentifier((0, _path.basename)(source2, (0, _path.extname)(source2))).name, interop: "none", loc: null, imports: /* @__PURE__ */ new Map(), importsNamespace: /* @__PURE__ */ new Set(), reexports: /* @__PURE__ */ new Map(), reexportNamespace: /* @__PURE__ */ new Set(), reexportAll: null, lazy: false, source: source2 }, sourceData.set(source2, data2)), data2;
            };
            let hasExports2 = false;
            programPath2.get("body").forEach((child) => {
              if (child.isImportDeclaration()) {
                const data2 = getData(child.node.source);
                data2.loc || (data2.loc = child.node.loc), child.get("specifiers").forEach((spec) => {
                  if (spec.isImportDefaultSpecifier()) {
                    const localName = spec.get("local").node.name;
                    data2.imports.set(localName, "default");
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data2.reexports.set(name, "default");
                    }));
                  } else if (spec.isImportNamespaceSpecifier()) {
                    const localName = spec.get("local").node.name;
                    data2.importsNamespace.add(localName);
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data2.reexportNamespace.add(name);
                    }));
                  } else if (spec.isImportSpecifier()) {
                    const importName2 = getExportSpecifierName(spec.get("imported"), stringSpecifiers2), localName = spec.get("local").node.name;
                    data2.imports.set(localName, importName2);
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data2.reexports.set(name, importName2);
                    }));
                  }
                });
              } else if (child.isExportAllDeclaration()) {
                hasExports2 = true;
                const data2 = getData(child.node.source);
                data2.loc || (data2.loc = child.node.loc), data2.reexportAll = { loc: child.node.loc };
              } else if (child.isExportNamedDeclaration() && child.node.source) {
                hasExports2 = true;
                const data2 = getData(child.node.source);
                data2.loc || (data2.loc = child.node.loc), child.get("specifiers").forEach((spec) => {
                  assertExportSpecifier(spec);
                  const importName2 = getExportSpecifierName(spec.get("local"), stringSpecifiers2), exportName2 = getExportSpecifierName(spec.get("exported"), stringSpecifiers2);
                  if (data2.reexports.set(exportName2, importName2), "__esModule" === exportName2)
                    throw spec.get("exported").buildCodeFrameError('Illegal export "__esModule".');
                });
              } else
                (child.isExportNamedDeclaration() || child.isExportDefaultDeclaration()) && (hasExports2 = true);
            });
            for (const metadata of sourceData.values()) {
              let needsDefault = false, needsNamed = false;
              metadata.importsNamespace.size > 0 && (needsDefault = true, needsNamed = true), metadata.reexportAll && (needsNamed = true);
              for (const importName2 of metadata.imports.values())
                "default" === importName2 ? needsDefault = true : needsNamed = true;
              for (const importName2 of metadata.reexports.values())
                "default" === importName2 ? needsDefault = true : needsNamed = true;
              needsDefault && needsNamed ? metadata.interop = "namespace" : needsDefault && (metadata.interop = "default");
            }
            for (const [source2, metadata] of sourceData)
              if (false !== lazy2 && !isSideEffectImport(metadata) && !metadata.reexportAll)
                if (true === lazy2)
                  metadata.lazy = !/\./.test(source2);
                else if (Array.isArray(lazy2))
                  metadata.lazy = -1 !== lazy2.indexOf(source2);
                else {
                  if ("function" != typeof lazy2)
                    throw new Error(".lazy must be a boolean, string array, or function");
                  metadata.lazy = lazy2(source2);
                }
            return { hasExports: hasExports2, local: localData, source: sourceData };
          }(programPath, { initializeReexports, lazy }, stringSpecifiers);
          !function(programPath2) {
            programPath2.get("body").forEach((child) => {
              if (child.isImportDeclaration())
                child.remove();
              else if (child.isExportNamedDeclaration())
                child.node.declaration ? (child.node.declaration._blockHoist = child.node._blockHoist, child.replaceWith(child.node.declaration)) : child.remove();
              else if (child.isExportDefaultDeclaration()) {
                const declaration = child.get("declaration");
                if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration())
                  throw declaration.buildCodeFrameError("Unexpected default expression export.");
                declaration._blockHoist = child.node._blockHoist, child.replaceWith(declaration);
              } else
                child.isExportAllDeclaration() && child.remove();
            });
          }(programPath);
          for (const [, metadata] of source) {
            metadata.importsNamespace.size > 0 && (metadata.name = metadata.importsNamespace.values().next().value);
            const resolvedInterop = resolveImportInterop(importInterop, metadata.source, filename);
            "none" === resolvedInterop ? metadata.interop = "none" : "node" === resolvedInterop && "namespace" === metadata.interop ? metadata.interop = "node-namespace" : "node" === resolvedInterop && "default" === metadata.interop ? metadata.interop = "node-default" : esNamespaceOnly && "namespace" === metadata.interop && (metadata.interop = "default");
          }
          return { exportName, exportNameListName: null, hasExports, local, source, stringSpecifiers };
        }, exports2.hasExports = function(metadata) {
          return metadata.hasExports;
        }, exports2.isSideEffectImport = isSideEffectImport, exports2.validateImportInteropOption = validateImportInteropOption;
        var _path = __webpack_require__2("path"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.18.6/node_modules/@babel/helper-validator-identifier/lib/index.js"), _helperSplitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js");
        function isSideEffectImport(source) {
          return 0 === source.imports.size && 0 === source.importsNamespace.size && 0 === source.reexports.size && 0 === source.reexportNamespace.size && !source.reexportAll;
        }
        function validateImportInteropOption(importInterop) {
          if ("function" != typeof importInterop && "none" !== importInterop && "babel" !== importInterop && "node" !== importInterop)
            throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${importInterop}).`);
          return importInterop;
        }
        function resolveImportInterop(importInterop, source, filename) {
          return "function" == typeof importInterop ? validateImportInteropOption(importInterop(source, filename)) : importInterop;
        }
        function getExportSpecifierName(path3, stringSpecifiers) {
          if (path3.isIdentifier())
            return path3.node.name;
          if (path3.isStringLiteral()) {
            const stringValue = path3.node.value;
            return (0, _helperValidatorIdentifier.isIdentifierName)(stringValue) || stringSpecifiers.add(stringValue), stringValue;
          }
          throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${path3.node.type}`);
        }
        function assertExportSpecifier(path3) {
          if (!path3.isExportSpecifier())
            throw path3.isExportNamespaceSpecifier() ? path3.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-proposal-export-namespace-from`.") : path3.buildCodeFrameError("Unexpected export specifier type");
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.18.9/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath, metadata) {
          const imported = /* @__PURE__ */ new Map(), exported = /* @__PURE__ */ new Map(), requeueInParent = (path3) => {
            programPath.requeue(path3);
          };
          for (const [source, data2] of metadata.source) {
            for (const [localName, importName2] of data2.imports)
              imported.set(localName, [source, importName2, null]);
            for (const localName of data2.importsNamespace)
              imported.set(localName, [source, null, localName]);
          }
          for (const [local, data2] of metadata.local) {
            let exportMeta = exported.get(local);
            exportMeta || (exportMeta = [], exported.set(local, exportMeta)), exportMeta.push(...data2.names);
          }
          const rewriteBindingInitVisitorState = { metadata, requeueInParent, scope: programPath.scope, exported };
          programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState), (0, _helperSimpleAccess.default)(programPath, /* @__PURE__ */ new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]), false);
          const rewriteReferencesVisitorState = { seen: /* @__PURE__ */ new WeakSet(), metadata, requeueInParent, scope: programPath.scope, imported, exported, buildImportReference: ([source, importName2, localName], identNode) => {
            const meta = metadata.source.get(source);
            if (localName)
              return meta.lazy && (identNode = callExpression(identNode, [])), identNode;
            let namespace = identifier(meta.name);
            if (meta.lazy && (namespace = callExpression(namespace, [])), "default" === importName2 && "node-default" === meta.interop)
              return namespace;
            const computed = metadata.stringSpecifiers.has(importName2);
            return memberExpression(namespace, computed ? stringLiteral(importName2) : identifier(importName2), computed);
          } };
          programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);
        };
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/index.js"), _helperSimpleAccess = __webpack_require__2("./node_modules/.pnpm/@babel+helper-simple-access@7.18.6/node_modules/@babel/helper-simple-access/lib/index.js");
        const { assignmentExpression, callExpression, cloneNode, expressionStatement, getOuterBindingIdentifiers, identifier, isMemberExpression, isVariableDeclaration, jsxIdentifier, jsxMemberExpression, memberExpression, numericLiteral, sequenceExpression, stringLiteral, variableDeclaration, variableDeclarator } = _t;
        const rewriteBindingInitVisitor = { Scope(path3) {
          path3.skip();
        }, ClassDeclaration(path3) {
          const { requeueInParent, exported, metadata } = this, { id } = path3.node;
          if (!id)
            throw new Error("Expected class to have a name");
          const localName = id.name, exportNames = exported.get(localName) || [];
          if (exportNames.length > 0) {
            const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName), path3.scope));
            statement._blockHoist = path3.node._blockHoist, requeueInParent(path3.insertAfter(statement)[0]);
          }
        }, VariableDeclaration(path3) {
          const { requeueInParent, exported, metadata } = this;
          Object.keys(path3.getOuterBindingIdentifiers()).forEach((localName) => {
            const exportNames = exported.get(localName) || [];
            if (exportNames.length > 0) {
              const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName), path3.scope));
              statement._blockHoist = path3.node._blockHoist, requeueInParent(path3.insertAfter(statement)[0]);
            }
          });
        } }, buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr, scope) => {
          const exportsObjectName = metadata.exportName;
          for (let currentScope = scope; null != currentScope; currentScope = currentScope.parent)
            currentScope.hasOwnBinding(exportsObjectName) && currentScope.rename(exportsObjectName);
          return (exportNames || []).reduce((expr, exportName) => {
            const { stringSpecifiers } = metadata, computed = stringSpecifiers.has(exportName);
            return assignmentExpression("=", memberExpression(identifier(exportsObjectName), computed ? stringLiteral(exportName) : identifier(exportName), computed), expr);
          }, localExpr);
        }, buildImportThrow = (localName) => _template.default.expression.ast`
    (function() {
      throw new Error('"' + '${localName}' + '" is read-only.');
    })()
  `, rewriteReferencesVisitor = { ReferencedIdentifier(path3) {
          const { seen, buildImportReference, scope, imported, requeueInParent } = this;
          if (seen.has(path3.node))
            return;
          seen.add(path3.node);
          const localName = path3.node.name, importData = imported.get(localName);
          if (importData) {
            if (function(path4) {
              do {
                switch (path4.parent.type) {
                  case "TSTypeAnnotation":
                  case "TSTypeAliasDeclaration":
                  case "TSTypeReference":
                  case "TypeAnnotation":
                  case "TypeAlias":
                    return true;
                  case "ExportSpecifier":
                    return "type" === path4.parentPath.parent.exportKind;
                  default:
                    if (path4.parentPath.isStatement() || path4.parentPath.isExpression())
                      return false;
                }
              } while (path4 = path4.parentPath);
            }(path3))
              throw path3.buildCodeFrameError(`Cannot transform the imported binding "${localName}" since it's also used in a type annotation. Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);
            const localBinding = path3.scope.getBinding(localName);
            if (scope.getBinding(localName) !== localBinding)
              return;
            const ref2 = buildImportReference(importData, path3.node);
            if (ref2.loc = path3.node.loc, (path3.parentPath.isCallExpression({ callee: path3.node }) || path3.parentPath.isOptionalCallExpression({ callee: path3.node }) || path3.parentPath.isTaggedTemplateExpression({ tag: path3.node })) && isMemberExpression(ref2))
              path3.replaceWith(sequenceExpression([numericLiteral(0), ref2]));
            else if (path3.isJSXIdentifier() && isMemberExpression(ref2)) {
              const { object, property } = ref2;
              path3.replaceWith(jsxMemberExpression(jsxIdentifier(object.name), jsxIdentifier(property.name)));
            } else
              path3.replaceWith(ref2);
            requeueInParent(path3), path3.skip();
          }
        }, UpdateExpression(path3) {
          const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
          if (seen.has(path3.node))
            return;
          seen.add(path3.node);
          const arg = path3.get("argument");
          if (arg.isMemberExpression())
            return;
          const update = path3.node;
          if (arg.isIdentifier()) {
            const localName = arg.node.name;
            if (scope.getBinding(localName) !== path3.scope.getBinding(localName))
              return;
            const exportedNames = exported.get(localName), importData = imported.get(localName);
            if ((null == exportedNames ? void 0 : exportedNames.length) > 0 || importData)
              if (importData)
                path3.replaceWith(assignmentExpression(update.operator[0] + "=", buildImportReference(importData, arg.node), buildImportThrow(localName)));
              else if (update.prefix)
                path3.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, cloneNode(update), path3.scope));
              else {
                const ref2 = scope.generateDeclaredUidIdentifier(localName);
                path3.replaceWith(sequenceExpression([assignmentExpression("=", cloneNode(ref2), cloneNode(update)), buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier(localName), path3.scope), cloneNode(ref2)]));
              }
          }
          requeueInParent(path3), path3.skip();
        }, AssignmentExpression: { exit(path3) {
          const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
          if (seen.has(path3.node))
            return;
          seen.add(path3.node);
          const left = path3.get("left");
          if (!left.isMemberExpression())
            if (left.isIdentifier()) {
              const localName = left.node.name;
              if (scope.getBinding(localName) !== path3.scope.getBinding(localName))
                return;
              const exportedNames = exported.get(localName), importData = imported.get(localName);
              if ((null == exportedNames ? void 0 : exportedNames.length) > 0 || importData) {
                _assert("=" === path3.node.operator, "Path was not simplified");
                const assignment = path3.node;
                importData && (assignment.left = buildImportReference(importData, left.node), assignment.right = sequenceExpression([assignment.right, buildImportThrow(localName)])), path3.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment, path3.scope)), requeueInParent(path3);
              }
            } else {
              const ids = left.getOuterBindingIdentifiers(), programScopeIds = Object.keys(ids).filter((localName) => scope.getBinding(localName) === path3.scope.getBinding(localName)), id = programScopeIds.find((localName) => imported.has(localName));
              id && (path3.node.right = sequenceExpression([path3.node.right, buildImportThrow(id)]));
              const items = [];
              if (programScopeIds.forEach((localName) => {
                const exportedNames = exported.get(localName) || [];
                exportedNames.length > 0 && items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier(localName), path3.scope));
              }), items.length > 0) {
                let node = sequenceExpression(items);
                path3.parentPath.isExpressionStatement() && (node = expressionStatement(node), node._blockHoist = path3.parentPath.node._blockHoist);
                requeueInParent(path3.insertAfter(node)[0]);
              }
            }
        } }, "ForOfStatement|ForInStatement"(path3) {
          const { scope, node } = path3, { left } = node, { exported, imported, scope: programScope } = this;
          if (!isVariableDeclaration(left)) {
            let importConstViolationName, didTransformExport = false;
            const loopBodyScope = path3.get("body").scope;
            for (const name of Object.keys(getOuterBindingIdentifiers(left)))
              programScope.getBinding(name) === scope.getBinding(name) && (exported.has(name) && (didTransformExport = true, loopBodyScope.hasOwnBinding(name) && loopBodyScope.rename(name)), imported.has(name) && !importConstViolationName && (importConstViolationName = name));
            if (!didTransformExport && !importConstViolationName)
              return;
            path3.ensureBlock();
            const bodyPath = path3.get("body"), newLoopId = scope.generateUidIdentifierBasedOnNode(left);
            path3.get("left").replaceWith(variableDeclaration("let", [variableDeclarator(cloneNode(newLoopId))])), scope.registerDeclaration(path3.get("left")), didTransformExport && bodyPath.unshiftContainer("body", expressionStatement(assignmentExpression("=", left, newLoopId))), importConstViolationName && bodyPath.unshiftContainer("body", expressionStatement(buildImportThrow(importConstViolationName)));
          }
        } };
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.18.9/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath) {
          (0, _traverse.default)(programPath.node, Object.assign({}, rewriteThisVisitor, { noScope: true }));
        };
        var _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { numericLiteral, unaryExpression } = _t;
        const rewriteThisVisitor = _traverse.default.visitors.merge([_helperEnvironmentVisitor.default, { ThisExpression(path3) {
          path3.replaceWith(unaryExpression("void", numericLiteral(0), true));
        } }]);
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.19.0/node_modules/@babel/helper-module-transforms/lib/get-module-name.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = getModuleName;
        {
          const originalGetModuleName = getModuleName;
          exports2.default = getModuleName = function(rootOpts, pluginOpts) {
            var _pluginOpts$moduleId, _pluginOpts$moduleIds, _pluginOpts$getModule, _pluginOpts$moduleRoo;
            return originalGetModuleName(rootOpts, { moduleId: null != (_pluginOpts$moduleId = pluginOpts.moduleId) ? _pluginOpts$moduleId : rootOpts.moduleId, moduleIds: null != (_pluginOpts$moduleIds = pluginOpts.moduleIds) ? _pluginOpts$moduleIds : rootOpts.moduleIds, getModuleId: null != (_pluginOpts$getModule = pluginOpts.getModuleId) ? _pluginOpts$getModule : rootOpts.getModuleId, moduleRoot: null != (_pluginOpts$moduleRoo = pluginOpts.moduleRoot) ? _pluginOpts$moduleRoo : rootOpts.moduleRoot });
          };
        }
        function getModuleName(rootOpts, pluginOpts) {
          const { filename, filenameRelative = filename, sourceRoot = pluginOpts.moduleRoot } = rootOpts, { moduleId, moduleIds = !!moduleId, getModuleId, moduleRoot = sourceRoot } = pluginOpts;
          if (!moduleIds)
            return null;
          if (null != moduleId && !getModuleId)
            return moduleId;
          let moduleName = null != moduleRoot ? moduleRoot + "/" : "";
          if (filenameRelative) {
            const sourceRootReplacer = null != sourceRoot ? new RegExp("^" + sourceRoot + "/?") : "";
            moduleName += filenameRelative.replace(sourceRootReplacer, "").replace(/\.(\w*?)$/, "");
          }
          return moduleName = moduleName.replace(/\\/g, "/"), getModuleId && getModuleId(moduleName) || moduleName;
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.19.0/node_modules/@babel/helper-module-transforms/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.buildNamespaceInitStatements = function(metadata, sourceMetadata, constantReexports = false) {
          const statements = [];
          let srcNamespace = identifier(sourceMetadata.name);
          sourceMetadata.lazy && (srcNamespace = callExpression(srcNamespace, []));
          for (const localName of sourceMetadata.importsNamespace)
            localName !== sourceMetadata.name && statements.push(_template.default.statement`var NAME = SOURCE;`({ NAME: localName, SOURCE: cloneNode(srcNamespace) }));
          constantReexports && statements.push(...buildReexportsFromMeta(metadata, sourceMetadata, true));
          for (const exportName of sourceMetadata.reexportNamespace)
            statements.push((sourceMetadata.lazy ? _template.default.statement`
            Object.defineProperty(EXPORTS, "NAME", {
              enumerable: true,
              get: function() {
                return NAMESPACE;
              }
            });
          ` : _template.default.statement`EXPORTS.NAME = NAMESPACE;`)({ EXPORTS: metadata.exportName, NAME: exportName, NAMESPACE: cloneNode(srcNamespace) }));
          if (sourceMetadata.reexportAll) {
            const statement = function(metadata2, namespace, constantReexports2) {
              return (constantReexports2 ? _template.default.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          EXPORTS[key] = NAMESPACE[key];
        });
      ` : _template.default.statement`
        Object.keys(NAMESPACE).forEach(function(key) {
          if (key === "default" || key === "__esModule") return;
          VERIFY_NAME_LIST;
          if (key in EXPORTS && EXPORTS[key] === NAMESPACE[key]) return;

          Object.defineProperty(EXPORTS, key, {
            enumerable: true,
            get: function() {
              return NAMESPACE[key];
            },
          });
        });
    `)({ NAMESPACE: namespace, EXPORTS: metadata2.exportName, VERIFY_NAME_LIST: metadata2.exportNameListName ? _template.default`
            if (Object.prototype.hasOwnProperty.call(EXPORTS_LIST, key)) return;
          `({ EXPORTS_LIST: metadata2.exportNameListName }) : null });
            }(metadata, cloneNode(srcNamespace), constantReexports);
            statement.loc = sourceMetadata.reexportAll.loc, statements.push(statement);
          }
          return statements;
        }, exports2.ensureStatementsHoisted = function(statements) {
          statements.forEach((header) => {
            header._blockHoist = 3;
          });
        }, Object.defineProperty(exports2, "getModuleName", { enumerable: true, get: function() {
          return _getModuleName.default;
        } }), Object.defineProperty(exports2, "hasExports", { enumerable: true, get: function() {
          return _normalizeAndLoadMetadata.hasExports;
        } }), Object.defineProperty(exports2, "isModule", { enumerable: true, get: function() {
          return _helperModuleImports.isModule;
        } }), Object.defineProperty(exports2, "isSideEffectImport", { enumerable: true, get: function() {
          return _normalizeAndLoadMetadata.isSideEffectImport;
        } }), exports2.rewriteModuleStatementsAndPrepareHeader = function(path3, { loose, exportName, strict, allowTopLevelThis, strictMode, noInterop, importInterop = noInterop ? "none" : "babel", lazy, esNamespaceOnly, filename, constantReexports = loose, enumerableModuleMeta = loose, noIncompleteNsImportDetection }) {
          (0, _normalizeAndLoadMetadata.validateImportInteropOption)(importInterop), _assert((0, _helperModuleImports.isModule)(path3), "Cannot process module statements in a script"), path3.node.sourceType = "script";
          const meta = (0, _normalizeAndLoadMetadata.default)(path3, exportName, { importInterop, initializeReexports: constantReexports, lazy, esNamespaceOnly, filename });
          allowTopLevelThis || (0, _rewriteThis.default)(path3);
          if ((0, _rewriteLiveReferences.default)(path3, meta), false !== strictMode) {
            const hasStrict = path3.node.directives.some((directive2) => "use strict" === directive2.value.value);
            hasStrict || path3.unshiftContainer("directives", directive(directiveLiteral("use strict")));
          }
          const headers = [];
          (0, _normalizeAndLoadMetadata.hasExports)(meta) && !strict && headers.push(function(metadata, enumerableModuleMeta2 = false) {
            return (enumerableModuleMeta2 ? _template.default.statement`
        EXPORTS.__esModule = true;
      ` : _template.default.statement`
        Object.defineProperty(EXPORTS, "__esModule", {
          value: true,
        });
      `)({ EXPORTS: metadata.exportName });
          }(meta, enumerableModuleMeta));
          const nameList = function(programPath, metadata) {
            const exportedVars = /* @__PURE__ */ Object.create(null);
            for (const data2 of metadata.local.values())
              for (const name2 of data2.names)
                exportedVars[name2] = true;
            let hasReexport = false;
            for (const data2 of metadata.source.values()) {
              for (const exportName2 of data2.reexports.keys())
                exportedVars[exportName2] = true;
              for (const exportName2 of data2.reexportNamespace)
                exportedVars[exportName2] = true;
              hasReexport = hasReexport || !!data2.reexportAll;
            }
            if (!hasReexport || 0 === Object.keys(exportedVars).length)
              return null;
            const name = programPath.scope.generateUidIdentifier("exportNames");
            return delete exportedVars.default, { name: name.name, statement: variableDeclaration("var", [variableDeclarator(name, valueToNode(exportedVars))]) };
          }(path3, meta);
          nameList && (meta.exportNameListName = nameList.name, headers.push(nameList.statement));
          return headers.push(...function(programPath, metadata, constantReexports2 = false, noIncompleteNsImportDetection2 = false) {
            const initStatements = [];
            for (const [localName, data2] of metadata.local)
              if ("import" === data2.kind)
                ;
              else if ("hoisted" === data2.kind)
                initStatements.push([data2.names[0], buildInitStatement(metadata, data2.names, identifier(localName))]);
              else if (!noIncompleteNsImportDetection2)
                for (const exportName2 of data2.names)
                  initStatements.push([exportName2, null]);
            for (const data2 of metadata.source.values()) {
              if (!constantReexports2) {
                const reexportsStatements = buildReexportsFromMeta(metadata, data2, false), reexports = [...data2.reexports.keys()];
                for (let i = 0; i < reexportsStatements.length; i++)
                  initStatements.push([reexports[i], reexportsStatements[i]]);
              }
              if (!noIncompleteNsImportDetection2)
                for (const exportName2 of data2.reexportNamespace)
                  initStatements.push([exportName2, null]);
            }
            initStatements.sort(([a], [b]) => a < b ? -1 : b < a ? 1 : 0);
            const results = [];
            if (noIncompleteNsImportDetection2)
              for (const [, initStatement] of initStatements)
                results.push(initStatement);
            else {
              const chunkSize = 100;
              for (let i = 0; i < initStatements.length; i += chunkSize) {
                let uninitializedExportNames = [];
                for (let j = 0; j < chunkSize && i + j < initStatements.length; j++) {
                  const [exportName2, initStatement] = initStatements[i + j];
                  null !== initStatement ? (uninitializedExportNames.length > 0 && (results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode())), uninitializedExportNames = []), results.push(initStatement)) : uninitializedExportNames.push(exportName2);
                }
                uninitializedExportNames.length > 0 && results.push(buildInitStatement(metadata, uninitializedExportNames, programPath.scope.buildUndefinedNode()));
              }
            }
            return results;
          }(path3, meta, constantReexports, noIncompleteNsImportDetection)), { meta, headers };
        }, Object.defineProperty(exports2, "rewriteThis", { enumerable: true, get: function() {
          return _rewriteThis.default;
        } }), exports2.wrapInterop = function(programPath, expr, type) {
          if ("none" === type)
            return null;
          if ("node-namespace" === type)
            return callExpression(programPath.hub.addHelper("interopRequireWildcard"), [expr, booleanLiteral(true)]);
          if ("node-default" === type)
            return null;
          let helper;
          if ("default" === type)
            helper = "interopRequireDefault";
          else {
            if ("namespace" !== type)
              throw new Error(`Unknown interop: ${type}`);
            helper = "interopRequireWildcard";
          }
          return callExpression(programPath.hub.addHelper(helper), [expr]);
        };
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/index.js"), _helperModuleImports = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-imports@7.18.6/node_modules/@babel/helper-module-imports/lib/index.js"), _rewriteThis = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.19.0/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js"), _rewriteLiveReferences = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.19.0/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js"), _normalizeAndLoadMetadata = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.19.0/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js"), _getModuleName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.19.0/node_modules/@babel/helper-module-transforms/lib/get-module-name.js");
        const { booleanLiteral, callExpression, cloneNode, directive, directiveLiteral, expressionStatement, identifier, isIdentifier, memberExpression, stringLiteral, valueToNode, variableDeclaration, variableDeclarator } = _t;
        const ReexportTemplate = { constant: _template.default.statement`EXPORTS.EXPORT_NAME = NAMESPACE_IMPORT;`, constantComputed: _template.default.statement`EXPORTS["EXPORT_NAME"] = NAMESPACE_IMPORT;`, spec: _template.default.statement`
    Object.defineProperty(EXPORTS, "EXPORT_NAME", {
      enumerable: true,
      get: function() {
        return NAMESPACE_IMPORT;
      },
    });
    ` }, buildReexportsFromMeta = (meta, metadata, constantReexports) => {
          const namespace = metadata.lazy ? callExpression(identifier(metadata.name), []) : identifier(metadata.name), { stringSpecifiers } = meta;
          return Array.from(metadata.reexports, ([exportName, importName2]) => {
            let NAMESPACE_IMPORT = cloneNode(namespace);
            "default" === importName2 && "node-default" === metadata.interop || (NAMESPACE_IMPORT = stringSpecifiers.has(importName2) ? memberExpression(NAMESPACE_IMPORT, stringLiteral(importName2), true) : memberExpression(NAMESPACE_IMPORT, identifier(importName2)));
            const astNodes = { EXPORTS: meta.exportName, EXPORT_NAME: exportName, NAMESPACE_IMPORT };
            return constantReexports || isIdentifier(NAMESPACE_IMPORT) ? stringSpecifiers.has(exportName) ? ReexportTemplate.constantComputed(astNodes) : ReexportTemplate.constant(astNodes) : ReexportTemplate.spec(astNodes);
          });
        };
        const InitTemplate = { computed: _template.default.expression`EXPORTS["NAME"] = VALUE`, default: _template.default.expression`EXPORTS.NAME = VALUE` };
        function buildInitStatement(metadata, exportNames, initExpr) {
          const { stringSpecifiers, exportName: EXPORTS } = metadata;
          return expressionStatement(exportNames.reduce((acc, exportName) => {
            const params = { EXPORTS, NAME: exportName, VALUE: acc };
            return stringSpecifiers.has(exportName) ? InitTemplate.computed(params) : InitTemplate.default(params);
          }, initExpr));
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.19.0/node_modules/@babel/helper-module-transforms/lib/normalize-and-load-metadata.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath, exportName, { importInterop, initializeReexports = false, lazy = false, esNamespaceOnly = false, filename }) {
          exportName || (exportName = programPath.scope.generateUidIdentifier("exports").name);
          const stringSpecifiers = /* @__PURE__ */ new Set();
          !function(programPath2) {
            programPath2.get("body").forEach((child) => {
              child.isExportDefaultDeclaration() && (0, _helperSplitExportDeclaration.default)(child);
            });
          }(programPath);
          const { local, source, hasExports } = function(programPath2, { lazy: lazy2, initializeReexports: initializeReexports2 }, stringSpecifiers2) {
            const localData = function(programPath3, initializeReexports3, stringSpecifiers3) {
              const bindingKindLookup = /* @__PURE__ */ new Map();
              programPath3.get("body").forEach((child) => {
                let kind;
                if (child.isImportDeclaration())
                  kind = "import";
                else {
                  if (child.isExportDefaultDeclaration() && (child = child.get("declaration")), child.isExportNamedDeclaration()) {
                    if (child.node.declaration)
                      child = child.get("declaration");
                    else if (initializeReexports3 && child.node.source && child.get("source").isStringLiteral())
                      return void child.get("specifiers").forEach((spec) => {
                        assertExportSpecifier(spec), bindingKindLookup.set(spec.get("local").node.name, "block");
                      });
                  }
                  if (child.isFunctionDeclaration())
                    kind = "hoisted";
                  else if (child.isClassDeclaration())
                    kind = "block";
                  else if (child.isVariableDeclaration({ kind: "var" }))
                    kind = "var";
                  else {
                    if (!child.isVariableDeclaration())
                      return;
                    kind = "block";
                  }
                }
                Object.keys(child.getOuterBindingIdentifiers()).forEach((name) => {
                  bindingKindLookup.set(name, kind);
                });
              });
              const localMetadata = /* @__PURE__ */ new Map(), getLocalMetadata = (idPath) => {
                const localName = idPath.node.name;
                let metadata = localMetadata.get(localName);
                if (!metadata) {
                  const kind = bindingKindLookup.get(localName);
                  if (void 0 === kind)
                    throw idPath.buildCodeFrameError(`Exporting local "${localName}", which is not declared.`);
                  metadata = { names: [], kind }, localMetadata.set(localName, metadata);
                }
                return metadata;
              };
              return programPath3.get("body").forEach((child) => {
                if (!child.isExportNamedDeclaration() || !initializeReexports3 && child.node.source) {
                  if (child.isExportDefaultDeclaration()) {
                    const declaration = child.get("declaration");
                    if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration())
                      throw declaration.buildCodeFrameError("Unexpected default expression export.");
                    getLocalMetadata(declaration.get("id")).names.push("default");
                  }
                } else if (child.node.declaration) {
                  const declaration = child.get("declaration"), ids = declaration.getOuterBindingIdentifierPaths();
                  Object.keys(ids).forEach((name) => {
                    if ("__esModule" === name)
                      throw declaration.buildCodeFrameError('Illegal export "__esModule".');
                    getLocalMetadata(ids[name]).names.push(name);
                  });
                } else
                  child.get("specifiers").forEach((spec) => {
                    const local2 = spec.get("local"), exported = spec.get("exported"), localMetadata2 = getLocalMetadata(local2), exportName2 = getExportSpecifierName(exported, stringSpecifiers3);
                    if ("__esModule" === exportName2)
                      throw exported.buildCodeFrameError('Illegal export "__esModule".');
                    localMetadata2.names.push(exportName2);
                  });
              }), localMetadata;
            }(programPath2, initializeReexports2, stringSpecifiers2), sourceData = /* @__PURE__ */ new Map(), getData = (sourceNode) => {
              const source2 = sourceNode.value;
              let data2 = sourceData.get(source2);
              return data2 || (data2 = { name: programPath2.scope.generateUidIdentifier((0, _path.basename)(source2, (0, _path.extname)(source2))).name, interop: "none", loc: null, imports: /* @__PURE__ */ new Map(), importsNamespace: /* @__PURE__ */ new Set(), reexports: /* @__PURE__ */ new Map(), reexportNamespace: /* @__PURE__ */ new Set(), reexportAll: null, lazy: false, source: source2 }, sourceData.set(source2, data2)), data2;
            };
            let hasExports2 = false;
            programPath2.get("body").forEach((child) => {
              if (child.isImportDeclaration()) {
                const data2 = getData(child.node.source);
                data2.loc || (data2.loc = child.node.loc), child.get("specifiers").forEach((spec) => {
                  if (spec.isImportDefaultSpecifier()) {
                    const localName = spec.get("local").node.name;
                    data2.imports.set(localName, "default");
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data2.reexports.set(name, "default");
                    }));
                  } else if (spec.isImportNamespaceSpecifier()) {
                    const localName = spec.get("local").node.name;
                    data2.importsNamespace.add(localName);
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data2.reexportNamespace.add(name);
                    }));
                  } else if (spec.isImportSpecifier()) {
                    const importName2 = getExportSpecifierName(spec.get("imported"), stringSpecifiers2), localName = spec.get("local").node.name;
                    data2.imports.set(localName, importName2);
                    const reexport = localData.get(localName);
                    reexport && (localData.delete(localName), reexport.names.forEach((name) => {
                      data2.reexports.set(name, importName2);
                    }));
                  }
                });
              } else if (child.isExportAllDeclaration()) {
                hasExports2 = true;
                const data2 = getData(child.node.source);
                data2.loc || (data2.loc = child.node.loc), data2.reexportAll = { loc: child.node.loc };
              } else if (child.isExportNamedDeclaration() && child.node.source) {
                hasExports2 = true;
                const data2 = getData(child.node.source);
                data2.loc || (data2.loc = child.node.loc), child.get("specifiers").forEach((spec) => {
                  assertExportSpecifier(spec);
                  const importName2 = getExportSpecifierName(spec.get("local"), stringSpecifiers2), exportName2 = getExportSpecifierName(spec.get("exported"), stringSpecifiers2);
                  if (data2.reexports.set(exportName2, importName2), "__esModule" === exportName2)
                    throw spec.get("exported").buildCodeFrameError('Illegal export "__esModule".');
                });
              } else
                (child.isExportNamedDeclaration() || child.isExportDefaultDeclaration()) && (hasExports2 = true);
            });
            for (const metadata of sourceData.values()) {
              let needsDefault = false, needsNamed = false;
              metadata.importsNamespace.size > 0 && (needsDefault = true, needsNamed = true), metadata.reexportAll && (needsNamed = true);
              for (const importName2 of metadata.imports.values())
                "default" === importName2 ? needsDefault = true : needsNamed = true;
              for (const importName2 of metadata.reexports.values())
                "default" === importName2 ? needsDefault = true : needsNamed = true;
              needsDefault && needsNamed ? metadata.interop = "namespace" : needsDefault && (metadata.interop = "default");
            }
            for (const [source2, metadata] of sourceData)
              if (false !== lazy2 && !isSideEffectImport(metadata) && !metadata.reexportAll)
                if (true === lazy2)
                  metadata.lazy = !/\./.test(source2);
                else if (Array.isArray(lazy2))
                  metadata.lazy = -1 !== lazy2.indexOf(source2);
                else {
                  if ("function" != typeof lazy2)
                    throw new Error(".lazy must be a boolean, string array, or function");
                  metadata.lazy = lazy2(source2);
                }
            return { hasExports: hasExports2, local: localData, source: sourceData };
          }(programPath, { initializeReexports, lazy }, stringSpecifiers);
          !function(programPath2) {
            programPath2.get("body").forEach((child) => {
              if (child.isImportDeclaration())
                child.remove();
              else if (child.isExportNamedDeclaration())
                child.node.declaration ? (child.node.declaration._blockHoist = child.node._blockHoist, child.replaceWith(child.node.declaration)) : child.remove();
              else if (child.isExportDefaultDeclaration()) {
                const declaration = child.get("declaration");
                if (!declaration.isFunctionDeclaration() && !declaration.isClassDeclaration())
                  throw declaration.buildCodeFrameError("Unexpected default expression export.");
                declaration._blockHoist = child.node._blockHoist, child.replaceWith(declaration);
              } else
                child.isExportAllDeclaration() && child.remove();
            });
          }(programPath);
          for (const [, metadata] of source) {
            metadata.importsNamespace.size > 0 && (metadata.name = metadata.importsNamespace.values().next().value);
            const resolvedInterop = resolveImportInterop(importInterop, metadata.source, filename);
            "none" === resolvedInterop ? metadata.interop = "none" : "node" === resolvedInterop && "namespace" === metadata.interop ? metadata.interop = "node-namespace" : "node" === resolvedInterop && "default" === metadata.interop ? metadata.interop = "node-default" : esNamespaceOnly && "namespace" === metadata.interop && (metadata.interop = "default");
          }
          return { exportName, exportNameListName: null, hasExports, local, source, stringSpecifiers };
        }, exports2.hasExports = function(metadata) {
          return metadata.hasExports;
        }, exports2.isSideEffectImport = isSideEffectImport, exports2.validateImportInteropOption = validateImportInteropOption;
        var _path = __webpack_require__2("path"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.18.6/node_modules/@babel/helper-validator-identifier/lib/index.js"), _helperSplitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js");
        function isSideEffectImport(source) {
          return 0 === source.imports.size && 0 === source.importsNamespace.size && 0 === source.reexports.size && 0 === source.reexportNamespace.size && !source.reexportAll;
        }
        function validateImportInteropOption(importInterop) {
          if ("function" != typeof importInterop && "none" !== importInterop && "babel" !== importInterop && "node" !== importInterop)
            throw new Error(`.importInterop must be one of "none", "babel", "node", or a function returning one of those values (received ${importInterop}).`);
          return importInterop;
        }
        function resolveImportInterop(importInterop, source, filename) {
          return "function" == typeof importInterop ? validateImportInteropOption(importInterop(source, filename)) : importInterop;
        }
        function getExportSpecifierName(path3, stringSpecifiers) {
          if (path3.isIdentifier())
            return path3.node.name;
          if (path3.isStringLiteral()) {
            const stringValue = path3.node.value;
            return (0, _helperValidatorIdentifier.isIdentifierName)(stringValue) || stringSpecifiers.add(stringValue), stringValue;
          }
          throw new Error(`Expected export specifier to be either Identifier or StringLiteral, got ${path3.node.type}`);
        }
        function assertExportSpecifier(path3) {
          if (!path3.isExportSpecifier())
            throw path3.isExportNamespaceSpecifier() ? path3.buildCodeFrameError("Export namespace should be first transformed by `@babel/plugin-proposal-export-namespace-from`.") : path3.buildCodeFrameError("Unexpected export specifier type");
        }
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.19.0/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath, metadata) {
          const imported = /* @__PURE__ */ new Map(), exported = /* @__PURE__ */ new Map(), requeueInParent = (path3) => {
            programPath.requeue(path3);
          };
          for (const [source, data2] of metadata.source) {
            for (const [localName, importName2] of data2.imports)
              imported.set(localName, [source, importName2, null]);
            for (const localName of data2.importsNamespace)
              imported.set(localName, [source, null, localName]);
          }
          for (const [local, data2] of metadata.local) {
            let exportMeta = exported.get(local);
            exportMeta || (exportMeta = [], exported.set(local, exportMeta)), exportMeta.push(...data2.names);
          }
          const rewriteBindingInitVisitorState = { metadata, requeueInParent, scope: programPath.scope, exported };
          programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState), (0, _helperSimpleAccess.default)(programPath, /* @__PURE__ */ new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]), false);
          const rewriteReferencesVisitorState = { seen: /* @__PURE__ */ new WeakSet(), metadata, requeueInParent, scope: programPath.scope, imported, exported, buildImportReference: ([source, importName2, localName], identNode) => {
            const meta = metadata.source.get(source);
            if (localName)
              return meta.lazy && (identNode = callExpression(identNode, [])), identNode;
            let namespace = identifier(meta.name);
            if (meta.lazy && (namespace = callExpression(namespace, [])), "default" === importName2 && "node-default" === meta.interop)
              return namespace;
            const computed = metadata.stringSpecifiers.has(importName2);
            return memberExpression(namespace, computed ? stringLiteral(importName2) : identifier(importName2), computed);
          } };
          programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);
        };
        var _assert = __webpack_require__2("assert"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/index.js"), _helperSimpleAccess = __webpack_require__2("./node_modules/.pnpm/@babel+helper-simple-access@7.18.6/node_modules/@babel/helper-simple-access/lib/index.js");
        const { assignmentExpression, callExpression, cloneNode, expressionStatement, getOuterBindingIdentifiers, identifier, isMemberExpression, isVariableDeclaration, jsxIdentifier, jsxMemberExpression, memberExpression, numericLiteral, sequenceExpression, stringLiteral, variableDeclaration, variableDeclarator } = _t;
        const rewriteBindingInitVisitor = { Scope(path3) {
          path3.skip();
        }, ClassDeclaration(path3) {
          const { requeueInParent, exported, metadata } = this, { id } = path3.node;
          if (!id)
            throw new Error("Expected class to have a name");
          const localName = id.name, exportNames = exported.get(localName) || [];
          if (exportNames.length > 0) {
            const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName), path3.scope));
            statement._blockHoist = path3.node._blockHoist, requeueInParent(path3.insertAfter(statement)[0]);
          }
        }, VariableDeclaration(path3) {
          const { requeueInParent, exported, metadata } = this;
          Object.keys(path3.getOuterBindingIdentifiers()).forEach((localName) => {
            const exportNames = exported.get(localName) || [];
            if (exportNames.length > 0) {
              const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName), path3.scope));
              statement._blockHoist = path3.node._blockHoist, requeueInParent(path3.insertAfter(statement)[0]);
            }
          });
        } }, buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr, scope) => {
          const exportsObjectName = metadata.exportName;
          for (let currentScope = scope; null != currentScope; currentScope = currentScope.parent)
            currentScope.hasOwnBinding(exportsObjectName) && currentScope.rename(exportsObjectName);
          return (exportNames || []).reduce((expr, exportName) => {
            const { stringSpecifiers } = metadata, computed = stringSpecifiers.has(exportName);
            return assignmentExpression("=", memberExpression(identifier(exportsObjectName), computed ? stringLiteral(exportName) : identifier(exportName), computed), expr);
          }, localExpr);
        }, buildImportThrow = (localName) => _template.default.expression.ast`
    (function() {
      throw new Error('"' + '${localName}' + '" is read-only.');
    })()
  `, rewriteReferencesVisitor = { ReferencedIdentifier(path3) {
          const { seen, buildImportReference, scope, imported, requeueInParent } = this;
          if (seen.has(path3.node))
            return;
          seen.add(path3.node);
          const localName = path3.node.name, importData = imported.get(localName);
          if (importData) {
            if (function(path4) {
              do {
                switch (path4.parent.type) {
                  case "TSTypeAnnotation":
                  case "TSTypeAliasDeclaration":
                  case "TSTypeReference":
                  case "TypeAnnotation":
                  case "TypeAlias":
                    return true;
                  case "ExportSpecifier":
                    return "type" === path4.parentPath.parent.exportKind;
                  default:
                    if (path4.parentPath.isStatement() || path4.parentPath.isExpression())
                      return false;
                }
              } while (path4 = path4.parentPath);
            }(path3))
              throw path3.buildCodeFrameError(`Cannot transform the imported binding "${localName}" since it's also used in a type annotation. Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);
            const localBinding = path3.scope.getBinding(localName);
            if (scope.getBinding(localName) !== localBinding)
              return;
            const ref2 = buildImportReference(importData, path3.node);
            if (ref2.loc = path3.node.loc, (path3.parentPath.isCallExpression({ callee: path3.node }) || path3.parentPath.isOptionalCallExpression({ callee: path3.node }) || path3.parentPath.isTaggedTemplateExpression({ tag: path3.node })) && isMemberExpression(ref2))
              path3.replaceWith(sequenceExpression([numericLiteral(0), ref2]));
            else if (path3.isJSXIdentifier() && isMemberExpression(ref2)) {
              const { object, property } = ref2;
              path3.replaceWith(jsxMemberExpression(jsxIdentifier(object.name), jsxIdentifier(property.name)));
            } else
              path3.replaceWith(ref2);
            requeueInParent(path3), path3.skip();
          }
        }, UpdateExpression(path3) {
          const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
          if (seen.has(path3.node))
            return;
          seen.add(path3.node);
          const arg = path3.get("argument");
          if (arg.isMemberExpression())
            return;
          const update = path3.node;
          if (arg.isIdentifier()) {
            const localName = arg.node.name;
            if (scope.getBinding(localName) !== path3.scope.getBinding(localName))
              return;
            const exportedNames = exported.get(localName), importData = imported.get(localName);
            if ((null == exportedNames ? void 0 : exportedNames.length) > 0 || importData)
              if (importData)
                path3.replaceWith(assignmentExpression(update.operator[0] + "=", buildImportReference(importData, arg.node), buildImportThrow(localName)));
              else if (update.prefix)
                path3.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, cloneNode(update), path3.scope));
              else {
                const ref2 = scope.generateDeclaredUidIdentifier(localName);
                path3.replaceWith(sequenceExpression([assignmentExpression("=", cloneNode(ref2), cloneNode(update)), buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier(localName), path3.scope), cloneNode(ref2)]));
              }
          }
          requeueInParent(path3), path3.skip();
        }, AssignmentExpression: { exit(path3) {
          const { scope, seen, imported, exported, requeueInParent, buildImportReference } = this;
          if (seen.has(path3.node))
            return;
          seen.add(path3.node);
          const left = path3.get("left");
          if (!left.isMemberExpression())
            if (left.isIdentifier()) {
              const localName = left.node.name;
              if (scope.getBinding(localName) !== path3.scope.getBinding(localName))
                return;
              const exportedNames = exported.get(localName), importData = imported.get(localName);
              if ((null == exportedNames ? void 0 : exportedNames.length) > 0 || importData) {
                _assert("=" === path3.node.operator, "Path was not simplified");
                const assignment = path3.node;
                importData && (assignment.left = buildImportReference(importData, left.node), assignment.right = sequenceExpression([assignment.right, buildImportThrow(localName)])), path3.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment, path3.scope)), requeueInParent(path3);
              }
            } else {
              const ids = left.getOuterBindingIdentifiers(), programScopeIds = Object.keys(ids).filter((localName) => scope.getBinding(localName) === path3.scope.getBinding(localName)), id = programScopeIds.find((localName) => imported.has(localName));
              id && (path3.node.right = sequenceExpression([path3.node.right, buildImportThrow(id)]));
              const items = [];
              if (programScopeIds.forEach((localName) => {
                const exportedNames = exported.get(localName) || [];
                exportedNames.length > 0 && items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier(localName), path3.scope));
              }), items.length > 0) {
                let node = sequenceExpression(items);
                path3.parentPath.isExpressionStatement() && (node = expressionStatement(node), node._blockHoist = path3.parentPath.node._blockHoist);
                requeueInParent(path3.insertAfter(node)[0]);
              }
            }
        } }, "ForOfStatement|ForInStatement"(path3) {
          const { scope, node } = path3, { left } = node, { exported, imported, scope: programScope } = this;
          if (!isVariableDeclaration(left)) {
            let importConstViolationName, didTransformExport = false;
            const loopBodyScope = path3.get("body").scope;
            for (const name of Object.keys(getOuterBindingIdentifiers(left)))
              programScope.getBinding(name) === scope.getBinding(name) && (exported.has(name) && (didTransformExport = true, loopBodyScope.hasOwnBinding(name) && loopBodyScope.rename(name)), imported.has(name) && !importConstViolationName && (importConstViolationName = name));
            if (!didTransformExport && !importConstViolationName)
              return;
            path3.ensureBlock();
            const bodyPath = path3.get("body"), newLoopId = scope.generateUidIdentifierBasedOnNode(left);
            path3.get("left").replaceWith(variableDeclaration("let", [variableDeclarator(cloneNode(newLoopId))])), scope.registerDeclaration(path3.get("left")), didTransformExport && bodyPath.unshiftContainer("body", expressionStatement(assignmentExpression("=", left, newLoopId))), importConstViolationName && bodyPath.unshiftContainer("body", expressionStatement(buildImportThrow(importConstViolationName)));
          }
        } };
      }, "./node_modules/.pnpm/@babel+helper-module-transforms@7.19.0/node_modules/@babel/helper-module-transforms/lib/rewrite-this.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(programPath) {
          (0, _traverse.default)(programPath.node, Object.assign({}, rewriteThisVisitor, { noScope: true }));
        };
        var _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { numericLiteral, unaryExpression } = _t;
        const rewriteThisVisitor = _traverse.default.visitors.merge([_helperEnvironmentVisitor.default, { ThisExpression(path3) {
          path3.replaceWith(unaryExpression("void", numericLiteral(0), true));
        } }]);
      }, "./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.18.6/node_modules/@babel/helper-optimise-call-expression/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(callee, thisNode, args, optional) {
          return 1 === args.length && isSpreadElement(args[0]) && isIdentifier(args[0].argument, { name: "arguments" }) ? optional ? optionalCallExpression(optionalMemberExpression(callee, identifier("apply"), false, true), [thisNode, args[0].argument], false) : callExpression(memberExpression(callee, identifier("apply")), [thisNode, args[0].argument]) : optional ? optionalCallExpression(optionalMemberExpression(callee, identifier("call"), false, true), [thisNode, ...args], false) : callExpression(memberExpression(callee, identifier("call")), [thisNode, ...args]);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { callExpression, identifier, isIdentifier, isSpreadElement, memberExpression, optionalCallExpression, optionalMemberExpression } = _t;
      }, "./node_modules/.pnpm/@babel+helper-plugin-utils@7.18.9/node_modules/@babel/helper-plugin-utils/lib/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function declare(builder) {
          return (api, options, dirname4) => {
            var _clonedApi2;
            let clonedApi;
            for (const name of Object.keys(apiPolyfills)) {
              var _clonedApi;
              api[name] || (clonedApi = null != (_clonedApi = clonedApi) ? _clonedApi : copyApiObject(api), clonedApi[name] = apiPolyfills[name](clonedApi));
            }
            return builder(null != (_clonedApi2 = clonedApi) ? _clonedApi2 : api, options || {}, dirname4);
          };
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.declare = declare, exports2.declarePreset = void 0;
        const declarePreset = declare;
        exports2.declarePreset = declarePreset;
        const apiPolyfills = { assertVersion: (api) => (range) => {
          !function(range2, version2) {
            if ("number" == typeof range2) {
              if (!Number.isInteger(range2))
                throw new Error("Expected string or integer value.");
              range2 = `^${range2}.0.0-0`;
            }
            if ("string" != typeof range2)
              throw new Error("Expected string or integer value.");
            const limit = Error.stackTraceLimit;
            "number" == typeof limit && limit < 25 && (Error.stackTraceLimit = 25);
            let err;
            err = "7." === version2.slice(0, 2) ? new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${version2}". You'll need to update your @babel/core version.`) : new Error(`Requires Babel "${range2}", but was loaded with "${version2}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
            "number" == typeof limit && (Error.stackTraceLimit = limit);
            throw Object.assign(err, { code: "BABEL_VERSION_UNSUPPORTED", version: version2, range: range2 });
          }(range, api.version);
        }, targets: () => () => ({}), assumption: () => () => {
        } };
        function copyApiObject(api) {
          let proto = null;
          return "string" == typeof api.version && /^7\./.test(api.version) && (proto = Object.getPrototypeOf(api), !proto || has(proto, "version") && has(proto, "transform") && has(proto, "template") && has(proto, "types") || (proto = null)), Object.assign({}, proto, api);
        }
        function has(obj, key) {
          return Object.prototype.hasOwnProperty.call(obj, key);
        }
      }, "./node_modules/.pnpm/@babel+helper-plugin-utils@7.19.0/node_modules/@babel/helper-plugin-utils/lib/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function declare(builder) {
          return (api, options, dirname4) => {
            var _clonedApi2;
            let clonedApi;
            for (const name of Object.keys(apiPolyfills)) {
              var _clonedApi;
              api[name] || (clonedApi = null != (_clonedApi = clonedApi) ? _clonedApi : copyApiObject(api), clonedApi[name] = apiPolyfills[name](clonedApi));
            }
            return builder(null != (_clonedApi2 = clonedApi) ? _clonedApi2 : api, options || {}, dirname4);
          };
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.declare = declare, exports2.declarePreset = void 0;
        const declarePreset = declare;
        exports2.declarePreset = declarePreset;
        const apiPolyfills = { assertVersion: (api) => (range) => {
          !function(range2, version2) {
            if ("number" == typeof range2) {
              if (!Number.isInteger(range2))
                throw new Error("Expected string or integer value.");
              range2 = `^${range2}.0.0-0`;
            }
            if ("string" != typeof range2)
              throw new Error("Expected string or integer value.");
            const limit = Error.stackTraceLimit;
            "number" == typeof limit && limit < 25 && (Error.stackTraceLimit = 25);
            let err;
            err = "7." === version2.slice(0, 2) ? new Error(`Requires Babel "^7.0.0-beta.41", but was loaded with "${version2}". You'll need to update your @babel/core version.`) : new Error(`Requires Babel "${range2}", but was loaded with "${version2}". If you are sure you have a compatible version of @babel/core, it is likely that something in your build process is loading the wrong version. Inspect the stack trace of this error to look for the first entry that doesn't mention "@babel/core" or "babel-core" to see what is calling Babel.`);
            "number" == typeof limit && (Error.stackTraceLimit = limit);
            throw Object.assign(err, { code: "BABEL_VERSION_UNSUPPORTED", version: version2, range: range2 });
          }(range, api.version);
        }, targets: () => () => ({}), assumption: () => () => {
        } };
        function copyApiObject(api) {
          let proto = null;
          return "string" == typeof api.version && /^7\./.test(api.version) && (proto = Object.getPrototypeOf(api), !proto || has(proto, "version") && has(proto, "transform") && has(proto, "template") && has(proto, "types") || (proto = null)), Object.assign({}, proto, api);
        }
        function has(obj, key) {
          return Object.prototype.hasOwnProperty.call(obj, key);
        }
      }, "./node_modules/.pnpm/@babel+helper-replace-supers@7.19.1/node_modules/@babel/helper-replace-supers/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0, Object.defineProperty(exports2, "environmentVisitor", { enumerable: true, get: function() {
          return _helperEnvironmentVisitor.default;
        } }), Object.defineProperty(exports2, "skipAllButComputedKey", { enumerable: true, get: function() {
          return _helperEnvironmentVisitor.skipAllButComputedKey;
        } });
        var _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/index.js"), _helperMemberExpressionToFunctions = __webpack_require__2("./node_modules/.pnpm/@babel+helper-member-expression-to-functions@7.18.9/node_modules/@babel/helper-member-expression-to-functions/lib/index.js"), _helperOptimiseCallExpression = __webpack_require__2("./node_modules/.pnpm/@babel+helper-optimise-call-expression@7.18.6/node_modules/@babel/helper-optimise-call-expression/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { assignmentExpression, booleanLiteral, callExpression, cloneNode, identifier, memberExpression, sequenceExpression, stringLiteral, thisExpression } = _t;
        function getPrototypeOfExpression(objectRef, isStatic, file, isPrivateMethod) {
          objectRef = cloneNode(objectRef);
          const targetRef = isStatic || isPrivateMethod ? objectRef : memberExpression(objectRef, identifier("prototype"));
          return callExpression(file.addHelper("getPrototypeOf"), [targetRef]);
        }
        const visitor = _traverse.default.visitors.merge([_helperEnvironmentVisitor.default, { Super(path3, state) {
          const { node, parentPath } = path3;
          parentPath.isMemberExpression({ object: node }) && state.handle(parentPath);
        } }]), unshadowSuperBindingVisitor = _traverse.default.visitors.merge([_helperEnvironmentVisitor.default, { Scopable(path3, { refName }) {
          const binding = path3.scope.getOwnBinding(refName);
          binding && binding.identifier.name === refName && path3.scope.rename(refName);
        } }]), specHandlers = { memoise(superMember, count) {
          const { scope, node } = superMember, { computed, property } = node;
          if (!computed)
            return;
          const memo = scope.maybeGenerateMemoised(property);
          memo && this.memoiser.set(property, memo, count);
        }, prop(superMember) {
          const { computed, property } = superMember.node;
          return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : computed ? cloneNode(property) : stringLiteral(property.name);
        }, get(superMember) {
          return this._get(superMember, this._getThisRefs());
        }, _get(superMember, thisRefs) {
          const proto = getPrototypeOfExpression(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
          return callExpression(this.file.addHelper("get"), [thisRefs.memo ? sequenceExpression([thisRefs.memo, proto]) : proto, this.prop(superMember), thisRefs.this]);
        }, _getThisRefs() {
          if (!this.isDerivedConstructor)
            return { this: thisExpression() };
          const thisRef = this.scope.generateDeclaredUidIdentifier("thisSuper");
          return { memo: assignmentExpression("=", thisRef, thisExpression()), this: cloneNode(thisRef) };
        }, set(superMember, value) {
          const thisRefs = this._getThisRefs(), proto = getPrototypeOfExpression(this.getObjectRef(), this.isStatic, this.file, this.isPrivateMethod);
          return callExpression(this.file.addHelper("set"), [thisRefs.memo ? sequenceExpression([thisRefs.memo, proto]) : proto, this.prop(superMember), value, thisRefs.this, booleanLiteral(superMember.isInStrictMode())]);
        }, destructureSet(superMember) {
          throw superMember.buildCodeFrameError("Destructuring to a super field is not supported yet.");
        }, call(superMember, args) {
          const thisRefs = this._getThisRefs();
          return (0, _helperOptimiseCallExpression.default)(this._get(superMember, thisRefs), cloneNode(thisRefs.this), args, false);
        }, optionalCall(superMember, args) {
          const thisRefs = this._getThisRefs();
          return (0, _helperOptimiseCallExpression.default)(this._get(superMember, thisRefs), cloneNode(thisRefs.this), args, true);
        } }, looseHandlers = Object.assign({}, specHandlers, { prop(superMember) {
          const { property } = superMember.node;
          return this.memoiser.has(property) ? cloneNode(this.memoiser.get(property)) : cloneNode(property);
        }, get(superMember) {
          const { isStatic, getSuperRef } = this, { computed } = superMember.node, prop = this.prop(superMember);
          let object;
          var _getSuperRef, _getSuperRef2;
          isStatic ? object = null != (_getSuperRef = getSuperRef()) ? _getSuperRef : memberExpression(identifier("Function"), identifier("prototype")) : object = memberExpression(null != (_getSuperRef2 = getSuperRef()) ? _getSuperRef2 : identifier("Object"), identifier("prototype"));
          return memberExpression(object, prop, computed);
        }, set(superMember, value) {
          const { computed } = superMember.node, prop = this.prop(superMember);
          return assignmentExpression("=", memberExpression(thisExpression(), prop, computed), value);
        }, destructureSet(superMember) {
          const { computed } = superMember.node, prop = this.prop(superMember);
          return memberExpression(thisExpression(), prop, computed);
        }, call(superMember, args) {
          return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, false);
        }, optionalCall(superMember, args) {
          return (0, _helperOptimiseCallExpression.default)(this.get(superMember), thisExpression(), args, true);
        } });
        exports2.default = class {
          constructor(opts) {
            var _opts$constantSuper;
            const path3 = opts.methodPath;
            this.methodPath = path3, this.isDerivedConstructor = path3.isClassMethod({ kind: "constructor" }) && !!opts.superRef, this.isStatic = path3.isObjectMethod() || path3.node.static || (null == path3.isStaticBlock ? void 0 : path3.isStaticBlock()), this.isPrivateMethod = path3.isPrivate() && path3.isMethod(), this.file = opts.file, this.constantSuper = null != (_opts$constantSuper = opts.constantSuper) ? _opts$constantSuper : opts.isLoose, this.opts = opts;
          }
          getObjectRef() {
            return cloneNode(this.opts.objectRef || this.opts.getObjectRef());
          }
          getSuperRef() {
            return this.opts.superRef ? cloneNode(this.opts.superRef) : this.opts.getSuperRef ? cloneNode(this.opts.getSuperRef()) : void 0;
          }
          replace() {
            this.opts.refToPreserve && this.methodPath.traverse(unshadowSuperBindingVisitor, { refName: this.opts.refToPreserve.name });
            const handler = this.constantSuper ? looseHandlers : specHandlers;
            (0, _helperMemberExpressionToFunctions.default)(this.methodPath, visitor, Object.assign({ file: this.file, scope: this.methodPath.scope, isDerivedConstructor: this.isDerivedConstructor, isStatic: this.isStatic, isPrivateMethod: this.isPrivateMethod, getObjectRef: this.getObjectRef.bind(this), getSuperRef: this.getSuperRef.bind(this), boundGet: handler.get }, handler));
          }
        };
      }, "./node_modules/.pnpm/@babel+helper-simple-access@7.18.6/node_modules/@babel/helper-simple-access/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path3, bindingNames, includeUpdateExpression = true) {
          path3.traverse(simpleAssignmentVisitor, { scope: path3.scope, bindingNames, seen: /* @__PURE__ */ new WeakSet(), includeUpdateExpression });
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { LOGICAL_OPERATORS, assignmentExpression, binaryExpression, cloneNode, identifier, logicalExpression, numericLiteral, sequenceExpression, unaryExpression } = _t;
        const simpleAssignmentVisitor = { UpdateExpression: { exit(path3) {
          const { scope, bindingNames, includeUpdateExpression } = this;
          if (!includeUpdateExpression)
            return;
          const arg = path3.get("argument");
          if (!arg.isIdentifier())
            return;
          const localName = arg.node.name;
          if (bindingNames.has(localName) && scope.getBinding(localName) === path3.scope.getBinding(localName))
            if (path3.parentPath.isExpressionStatement() && !path3.isCompletionRecord()) {
              const operator = "++" == path3.node.operator ? "+=" : "-=";
              path3.replaceWith(assignmentExpression(operator, arg.node, numericLiteral(1)));
            } else if (path3.node.prefix)
              path3.replaceWith(assignmentExpression("=", identifier(localName), binaryExpression(path3.node.operator[0], unaryExpression("+", arg.node), numericLiteral(1))));
            else {
              const old = path3.scope.generateUidIdentifierBasedOnNode(arg.node, "old"), varName = old.name;
              path3.scope.push({ id: old });
              const binary = binaryExpression(path3.node.operator[0], identifier(varName), numericLiteral(1));
              path3.replaceWith(sequenceExpression([assignmentExpression("=", identifier(varName), unaryExpression("+", arg.node)), assignmentExpression("=", cloneNode(arg.node), binary), identifier(varName)]));
            }
        } }, AssignmentExpression: { exit(path3) {
          const { scope, seen, bindingNames } = this;
          if ("=" === path3.node.operator)
            return;
          if (seen.has(path3.node))
            return;
          seen.add(path3.node);
          const left = path3.get("left");
          if (!left.isIdentifier())
            return;
          const localName = left.node.name;
          if (!bindingNames.has(localName))
            return;
          if (scope.getBinding(localName) !== path3.scope.getBinding(localName))
            return;
          const operator = path3.node.operator.slice(0, -1);
          LOGICAL_OPERATORS.includes(operator) ? path3.replaceWith(logicalExpression(operator, path3.node.left, assignmentExpression("=", cloneNode(path3.node.left), path3.node.right))) : (path3.node.right = binaryExpression(operator, cloneNode(path3.node.left), path3.node.right), path3.node.operator = "=");
        } } };
      }, "./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.18.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isTransparentExprWrapper = isTransparentExprWrapper, exports2.skipTransparentExprWrapperNodes = function(node) {
          for (; isTransparentExprWrapper(node); )
            node = node.expression;
          return node;
        }, exports2.skipTransparentExprWrappers = function(path3) {
          for (; isTransparentExprWrapper(path3.node); )
            path3 = path3.get("expression");
          return path3;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { isParenthesizedExpression, isTSAsExpression, isTSNonNullExpression, isTSTypeAssertion, isTypeCastExpression } = _t;
        function isTransparentExprWrapper(node) {
          return isTSAsExpression(node) || isTSTypeAssertion(node) || isTSNonNullExpression(node) || isTypeCastExpression(node) || isParenthesizedExpression(node);
        }
      }, "./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(exportDeclaration) {
          if (!exportDeclaration.isExportDeclaration() || exportDeclaration.isExportAllDeclaration())
            throw new Error("Only default and named export declarations can be split.");
          if (exportDeclaration.isExportDefaultDeclaration()) {
            const declaration2 = exportDeclaration.get("declaration"), standaloneDeclaration = declaration2.isFunctionDeclaration() || declaration2.isClassDeclaration(), scope = declaration2.isScope() ? declaration2.scope.parent : declaration2.scope;
            let id = declaration2.node.id, needBindingRegistration = false;
            id || (needBindingRegistration = true, id = scope.generateUidIdentifier("default"), (standaloneDeclaration || declaration2.isFunctionExpression() || declaration2.isClassExpression()) && (declaration2.node.id = cloneNode(id)));
            const updatedDeclaration = standaloneDeclaration ? declaration2.node : variableDeclaration("var", [variableDeclarator(cloneNode(id), declaration2.node)]), updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier("default"))]);
            return exportDeclaration.insertAfter(updatedExportDeclaration), exportDeclaration.replaceWith(updatedDeclaration), needBindingRegistration && scope.registerDeclaration(exportDeclaration), exportDeclaration;
          }
          if (exportDeclaration.get("specifiers").length > 0)
            throw new Error("It doesn't make sense to split exported specifiers.");
          const declaration = exportDeclaration.get("declaration"), bindingIdentifiers = declaration.getOuterBindingIdentifiers(), specifiers = Object.keys(bindingIdentifiers).map((name) => exportSpecifier(identifier(name), identifier(name))), aliasDeclar = exportNamedDeclaration(null, specifiers);
          return exportDeclaration.insertAfter(aliasDeclar), exportDeclaration.replaceWith(declaration.node), exportDeclaration;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { cloneNode, exportNamedDeclaration, exportSpecifier, identifier, variableDeclaration, variableDeclarator } = _t;
      }, "./node_modules/.pnpm/@babel+helper-string-parser@7.18.10/node_modules/@babel/helper-string-parser/lib/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.readCodePoint = readCodePoint, exports2.readInt = readInt, exports2.readStringContents = function(type, input, pos, lineStart, curLine, errors) {
          const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
          let out = "", containsInvalid = false, chunkStart = pos;
          const { length } = input;
          for (; ; ) {
            if (pos >= length) {
              errors.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
              break;
            }
            const ch = input.charCodeAt(pos);
            if (isStringEnd(type, ch, input, pos)) {
              out += input.slice(chunkStart, pos);
              break;
            }
            if (92 === ch) {
              let escaped;
              out += input.slice(chunkStart, pos), { ch: escaped, pos, lineStart, curLine } = readEscapedChar(input, pos, lineStart, curLine, "template" === type, errors), null === escaped ? containsInvalid = true : out += escaped, chunkStart = pos;
            } else
              8232 === ch || 8233 === ch ? (++pos, ++curLine, lineStart = pos) : 10 === ch || 13 === ch ? "template" === type ? (out += input.slice(chunkStart, pos) + "\n", ++pos, 13 === ch && 10 === input.charCodeAt(pos) && ++pos, ++curLine, chunkStart = lineStart = pos) : errors.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
          }
          return { pos, str: out, containsInvalid, lineStart, curLine };
        };
        var _isDigit = function(code) {
          return code >= 48 && code <= 57;
        };
        const forbiddenNumericSeparatorSiblings = { decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: /* @__PURE__ */ new Set([46, 88, 95, 120]) }, isAllowedNumericSeparatorSibling = { bin: (ch) => 48 === ch || 49 === ch, oct: (ch) => ch >= 48 && ch <= 55, dec: (ch) => ch >= 48 && ch <= 57, hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102 };
        function isStringEnd(type, ch, input, pos) {
          return "template" === type ? 96 === ch || 36 === ch && 123 === input.charCodeAt(pos + 1) : ch === ("double" === type ? 34 : 39);
        }
        function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
          const throwOnInvalid = !inTemplate;
          pos++;
          const res = (ch2) => ({ pos, ch: ch2, lineStart, curLine }), ch = input.charCodeAt(pos++);
          switch (ch) {
            case 110:
              return res("\n");
            case 114:
              return res("\r");
            case 120: {
              let code;
              return { code, pos } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors), res(null === code ? null : String.fromCharCode(code));
            }
            case 117: {
              let code;
              return { code, pos } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors), res(null === code ? null : String.fromCodePoint(code));
            }
            case 116:
              return res("	");
            case 98:
              return res("\b");
            case 118:
              return res("\v");
            case 102:
              return res("\f");
            case 13:
              10 === input.charCodeAt(pos) && ++pos;
            case 10:
              lineStart = pos, ++curLine;
            case 8232:
            case 8233:
              return res("");
            case 56:
            case 57:
              if (inTemplate)
                return res(null);
              errors.strictNumericEscape(pos - 1, lineStart, curLine);
            default:
              if (ch >= 48 && ch <= 55) {
                const startPos = pos - 1;
                let octalStr = input.slice(startPos, pos + 2).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
                octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
                const next = input.charCodeAt(pos);
                if ("0" !== octalStr || 56 === next || 57 === next) {
                  if (inTemplate)
                    return res(null);
                  errors.strictNumericEscape(startPos, lineStart, curLine);
                }
                return res(String.fromCharCode(octal));
              }
              return res(String.fromCharCode(ch));
          }
        }
        function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
          const initialPos = pos;
          let n;
          return { n, pos } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors), null === n && (throwOnInvalid ? errors.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), { code: n, pos };
        }
        function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors) {
          const start = pos, forbiddenSiblings = 16 === radix ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = 16 === radix ? isAllowedNumericSeparatorSibling.hex : 10 === radix ? isAllowedNumericSeparatorSibling.dec : 8 === radix ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
          let invalid = false, total = 0;
          for (let i = 0, e = null == len ? 1 / 0 : len; i < e; ++i) {
            const code = input.charCodeAt(pos);
            let val;
            if (95 !== code || "bail" === allowNumSeparator) {
              if (val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : _isDigit(code) ? code - 48 : 1 / 0, val >= radix)
                if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix))
                  val = 0;
                else {
                  if (!forceLen)
                    break;
                  val = 0, invalid = true;
                }
              ++pos, total = total * radix + val;
            } else {
              const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
              allowNumSeparator ? (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) && errors.unexpectedNumericSeparator(pos, lineStart, curLine) : errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine), ++pos;
            }
          }
          return pos === start || null != len && pos - start !== len || invalid ? { n: null, pos } : { n: total, pos };
        }
        function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
          let code;
          if (123 === input.charCodeAt(pos)) {
            if (++pos, { code, pos } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors), ++pos, null !== code && code > 1114111) {
              if (!throwOnInvalid)
                return { code: null, pos };
              errors.invalidCodePoint(pos, lineStart, curLine);
            }
          } else
            ({ code, pos } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
          return { code, pos };
        }
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.18.6/node_modules/@babel/helper-validator-identifier/lib/identifier.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isIdentifierChar = isIdentifierChar2, exports2.isIdentifierName = function(name) {
          let isFirst = true;
          for (let i = 0; i < name.length; i++) {
            let cp = name.charCodeAt(i);
            if (55296 == (64512 & cp) && i + 1 < name.length) {
              const trail = name.charCodeAt(++i);
              56320 == (64512 & trail) && (cp = 65536 + ((1023 & cp) << 10) + (1023 & trail));
            }
            if (isFirst) {
              if (isFirst = false, !isIdentifierStart2(cp))
                return false;
            } else if (!isIdentifierChar2(cp))
              return false;
          }
          return !isFirst;
        }, exports2.isIdentifierStart = isIdentifierStart2;
        let nonASCIIidentifierStartChars2 = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", nonASCIIidentifierChars2 = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
        const nonASCIIidentifierStart2 = new RegExp("[" + nonASCIIidentifierStartChars2 + "]"), nonASCIIidentifier2 = new RegExp("[" + nonASCIIidentifierStartChars2 + nonASCIIidentifierChars2 + "]");
        nonASCIIidentifierStartChars2 = nonASCIIidentifierChars2 = null;
        const astralIdentifierStartCodes2 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938], astralIdentifierCodes2 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
        function isInAstralSet2(code, set) {
          let pos = 65536;
          for (let i = 0, length = set.length; i < length; i += 2) {
            if (pos += set[i], pos > code)
              return false;
            if (pos += set[i + 1], pos >= code)
              return true;
          }
          return false;
        }
        function isIdentifierStart2(code) {
          return code < 65 ? 36 === code : code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart2.test(String.fromCharCode(code)) : isInAstralSet2(code, astralIdentifierStartCodes2)));
        }
        function isIdentifierChar2(code) {
          return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifier2.test(String.fromCharCode(code)) : isInAstralSet2(code, astralIdentifierStartCodes2) || isInAstralSet2(code, astralIdentifierCodes2))));
        }
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.18.6/node_modules/@babel/helper-validator-identifier/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "isIdentifierChar", { enumerable: true, get: function() {
          return _identifier.isIdentifierChar;
        } }), Object.defineProperty(exports2, "isIdentifierName", { enumerable: true, get: function() {
          return _identifier.isIdentifierName;
        } }), Object.defineProperty(exports2, "isIdentifierStart", { enumerable: true, get: function() {
          return _identifier.isIdentifierStart;
        } }), Object.defineProperty(exports2, "isKeyword", { enumerable: true, get: function() {
          return _keyword.isKeyword;
        } }), Object.defineProperty(exports2, "isReservedWord", { enumerable: true, get: function() {
          return _keyword.isReservedWord;
        } }), Object.defineProperty(exports2, "isStrictBindOnlyReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictBindOnlyReservedWord;
        } }), Object.defineProperty(exports2, "isStrictBindReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictBindReservedWord;
        } }), Object.defineProperty(exports2, "isStrictReservedWord", { enumerable: true, get: function() {
          return _keyword.isStrictReservedWord;
        } });
        var _identifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.18.6/node_modules/@babel/helper-validator-identifier/lib/identifier.js"), _keyword = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.18.6/node_modules/@babel/helper-validator-identifier/lib/keyword.js");
      }, "./node_modules/.pnpm/@babel+helper-validator-identifier@7.18.6/node_modules/@babel/helper-validator-identifier/lib/keyword.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isKeyword = function(word) {
          return keywords2.has(word);
        }, exports2.isReservedWord = isReservedWord, exports2.isStrictBindOnlyReservedWord = isStrictBindOnlyReservedWord, exports2.isStrictBindReservedWord = function(word, inModule) {
          return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
        }, exports2.isStrictReservedWord = isStrictReservedWord;
        const reservedWords_strict = ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], reservedWords_strictBind = ["eval", "arguments"], keywords2 = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
        function isReservedWord(word, inModule) {
          return inModule && "await" === word || "enum" === word;
        }
        function isStrictReservedWord(word, inModule) {
          return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
        }
        function isStrictBindOnlyReservedWord(word) {
          return reservedWordsStrictBindSet.has(word);
        }
      }, "./node_modules/.pnpm/@babel+helpers@7.19.0/node_modules/@babel/helpers/lib/helpers-generated.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/index.js");
        function helper(minVersion, source) {
          return Object.freeze({ minVersion, ast: () => _template.default.program.ast(source, { preserveComments: true }) });
        }
        var _default = Object.freeze({ AsyncGenerator: helper("7.0.0-beta.0", 'import OverloadYield from"OverloadYield";export default function AsyncGenerator(gen){var front,back;function resume(key,arg){try{var result=gen[key](arg),value=result.value,overloaded=value instanceof OverloadYield;Promise.resolve(overloaded?value.v:value).then((function(arg){if(overloaded){var nextKey="return"===key?"return":"next";if(!value.k||arg.done)return resume(nextKey,arg);arg=gen[nextKey](arg).value}settle(result.done?"return":"normal",arg)}),(function(err){resume("throw",err)}))}catch(err){settle("throw",err)}}function settle(type,value){switch(type){case"return":front.resolve({value:value,done:!0});break;case"throw":front.reject(value);break;default:front.resolve({value:value,done:!1})}(front=front.next)?resume(front.key,front.arg):back=null}this._invoke=function(key,arg){return new Promise((function(resolve,reject){var request={key:key,arg:arg,resolve:resolve,reject:reject,next:null};back?back=back.next=request:(front=back=request,resume(key,arg))}))},"function"!=typeof gen.return&&(this.return=void 0)}AsyncGenerator.prototype["function"==typeof Symbol&&Symbol.asyncIterator||"@@asyncIterator"]=function(){return this},AsyncGenerator.prototype.next=function(arg){return this._invoke("next",arg)},AsyncGenerator.prototype.throw=function(arg){return this._invoke("throw",arg)},AsyncGenerator.prototype.return=function(arg){return this._invoke("return",arg)};'), OverloadYield: helper("7.18.14", "export default function _OverloadYield(value,kind){this.v=value,this.k=kind}"), applyDecs: helper("7.17.8", 'function old_createMetadataMethodsForProperty(metadataMap,kind,property,decoratorFinishedRef){return{getMetadata:function(key){old_assertNotFinished(decoratorFinishedRef,"getMetadata"),old_assertMetadataKey(key);var metadataForKey=metadataMap[key];if(void 0!==metadataForKey)if(1===kind){var pub=metadataForKey.public;if(void 0!==pub)return pub[property]}else if(2===kind){var priv=metadataForKey.private;if(void 0!==priv)return priv.get(property)}else if(Object.hasOwnProperty.call(metadataForKey,"constructor"))return metadataForKey.constructor},setMetadata:function(key,value){old_assertNotFinished(decoratorFinishedRef,"setMetadata"),old_assertMetadataKey(key);var metadataForKey=metadataMap[key];if(void 0===metadataForKey&&(metadataForKey=metadataMap[key]={}),1===kind){var pub=metadataForKey.public;void 0===pub&&(pub=metadataForKey.public={}),pub[property]=value}else if(2===kind){var priv=metadataForKey.priv;void 0===priv&&(priv=metadataForKey.private=new Map),priv.set(property,value)}else metadataForKey.constructor=value}}}function old_convertMetadataMapToFinal(obj,metadataMap){var parentMetadataMap=obj[Symbol.metadata||Symbol.for("Symbol.metadata")],metadataKeys=Object.getOwnPropertySymbols(metadataMap);if(0!==metadataKeys.length){for(var i=0;i<metadataKeys.length;i++){var key=metadataKeys[i],metaForKey=metadataMap[key],parentMetaForKey=parentMetadataMap?parentMetadataMap[key]:null,pub=metaForKey.public,parentPub=parentMetaForKey?parentMetaForKey.public:null;pub&&parentPub&&Object.setPrototypeOf(pub,parentPub);var priv=metaForKey.private;if(priv){var privArr=Array.from(priv.values()),parentPriv=parentMetaForKey?parentMetaForKey.private:null;parentPriv&&(privArr=privArr.concat(parentPriv)),metaForKey.private=privArr}parentMetaForKey&&Object.setPrototypeOf(metaForKey,parentMetaForKey)}parentMetadataMap&&Object.setPrototypeOf(metadataMap,parentMetadataMap),obj[Symbol.metadata||Symbol.for("Symbol.metadata")]=metadataMap}}function old_createAddInitializerMethod(initializers,decoratorFinishedRef){return function(initializer){old_assertNotFinished(decoratorFinishedRef,"addInitializer"),old_assertCallable(initializer,"An initializer"),initializers.push(initializer)}}function old_memberDec(dec,name,desc,metadataMap,initializers,kind,isStatic,isPrivate,value){var kindStr;switch(kind){case 1:kindStr="accessor";break;case 2:kindStr="method";break;case 3:kindStr="getter";break;case 4:kindStr="setter";break;default:kindStr="field"}var metadataKind,metadataName,ctx={kind:kindStr,name:isPrivate?"#"+name:name,isStatic:isStatic,isPrivate:isPrivate},decoratorFinishedRef={v:!1};if(0!==kind&&(ctx.addInitializer=old_createAddInitializerMethod(initializers,decoratorFinishedRef)),isPrivate){metadataKind=2,metadataName=Symbol(name);var access={};0===kind?(access.get=desc.get,access.set=desc.set):2===kind?access.get=function(){return desc.value}:(1!==kind&&3!==kind||(access.get=function(){return desc.get.call(this)}),1!==kind&&4!==kind||(access.set=function(v){desc.set.call(this,v)})),ctx.access=access}else metadataKind=1,metadataName=name;try{return dec(value,Object.assign(ctx,old_createMetadataMethodsForProperty(metadataMap,metadataKind,metadataName,decoratorFinishedRef)))}finally{decoratorFinishedRef.v=!0}}function old_assertNotFinished(decoratorFinishedRef,fnName){if(decoratorFinishedRef.v)throw new Error("attempted to call "+fnName+" after decoration was finished")}function old_assertMetadataKey(key){if("symbol"!=typeof key)throw new TypeError("Metadata keys must be symbols, received: "+key)}function old_assertCallable(fn,hint){if("function"!=typeof fn)throw new TypeError(hint+" must be a function")}function old_assertValidReturnValue(kind,value){var type=typeof value;if(1===kind){if("object"!==type||null===value)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==value.get&&old_assertCallable(value.get,"accessor.get"),void 0!==value.set&&old_assertCallable(value.set,"accessor.set"),void 0!==value.init&&old_assertCallable(value.init,"accessor.init"),void 0!==value.initializer&&old_assertCallable(value.initializer,"accessor.initializer")}else if("function"!==type){var hint;throw hint=0===kind?"field":10===kind?"class":"method",new TypeError(hint+" decorators must return a function or void 0")}}function old_getInit(desc){var initializer;return null==(initializer=desc.init)&&(initializer=desc.initializer)&&"undefined"!=typeof console&&console.warn(".initializer has been renamed to .init as of March 2022"),initializer}function old_applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,metadataMap,initializers){var desc,initializer,value,newValue,get,set,decs=decInfo[0];if(isPrivate?desc=0===kind||1===kind?{get:decInfo[3],set:decInfo[4]}:3===kind?{get:decInfo[3]}:4===kind?{set:decInfo[3]}:{value:decInfo[3]}:0!==kind&&(desc=Object.getOwnPropertyDescriptor(base,name)),1===kind?value={get:desc.get,set:desc.set}:2===kind?value=desc.value:3===kind?value=desc.get:4===kind&&(value=desc.set),"function"==typeof decs)void 0!==(newValue=old_memberDec(decs,name,desc,metadataMap,initializers,kind,isStatic,isPrivate,value))&&(old_assertValidReturnValue(kind,newValue),0===kind?initializer=newValue:1===kind?(initializer=old_getInit(newValue),get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue);else for(var i=decs.length-1;i>=0;i--){var newInit;if(void 0!==(newValue=old_memberDec(decs[i],name,desc,metadataMap,initializers,kind,isStatic,isPrivate,value)))old_assertValidReturnValue(kind,newValue),0===kind?newInit=newValue:1===kind?(newInit=old_getInit(newValue),get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue,void 0!==newInit&&(void 0===initializer?initializer=newInit:"function"==typeof initializer?initializer=[initializer,newInit]:initializer.push(newInit))}if(0===kind||1===kind){if(void 0===initializer)initializer=function(instance,init){return init};else if("function"!=typeof initializer){var ownInitializers=initializer;initializer=function(instance,init){for(var value=init,i=0;i<ownInitializers.length;i++)value=ownInitializers[i].call(instance,value);return value}}else{var originalInitializer=initializer;initializer=function(instance,init){return originalInitializer.call(instance,init)}}ret.push(initializer)}0!==kind&&(1===kind?(desc.get=value.get,desc.set=value.set):2===kind?desc.value=value:3===kind?desc.get=value:4===kind&&(desc.set=value),isPrivate?1===kind?(ret.push((function(instance,args){return value.get.call(instance,args)})),ret.push((function(instance,args){return value.set.call(instance,args)}))):2===kind?ret.push(value):ret.push((function(instance,args){return value.call(instance,args)})):Object.defineProperty(base,name,desc))}function old_applyMemberDecs(ret,Class,protoMetadataMap,staticMetadataMap,decInfos){for(var protoInitializers,staticInitializers,existingProtoNonFields=new Map,existingStaticNonFields=new Map,i=0;i<decInfos.length;i++){var decInfo=decInfos[i];if(Array.isArray(decInfo)){var base,metadataMap,initializers,kind=decInfo[1],name=decInfo[2],isPrivate=decInfo.length>3,isStatic=kind>=5;if(isStatic?(base=Class,metadataMap=staticMetadataMap,0!==(kind-=5)&&(initializers=staticInitializers=staticInitializers||[])):(base=Class.prototype,metadataMap=protoMetadataMap,0!==kind&&(initializers=protoInitializers=protoInitializers||[])),0!==kind&&!isPrivate){var existingNonFields=isStatic?existingStaticNonFields:existingProtoNonFields,existingKind=existingNonFields.get(name)||0;if(!0===existingKind||3===existingKind&&4!==kind||4===existingKind&&3!==kind)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+name);!existingKind&&kind>2?existingNonFields.set(name,kind):existingNonFields.set(name,!0)}old_applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,metadataMap,initializers)}}old_pushInitializers(ret,protoInitializers),old_pushInitializers(ret,staticInitializers)}function old_pushInitializers(ret,initializers){initializers&&ret.push((function(instance){for(var i=0;i<initializers.length;i++)initializers[i].call(instance);return instance}))}function old_applyClassDecs(ret,targetClass,metadataMap,classDecs){if(classDecs.length>0){for(var initializers=[],newClass=targetClass,name=targetClass.name,i=classDecs.length-1;i>=0;i--){var decoratorFinishedRef={v:!1};try{var ctx=Object.assign({kind:"class",name:name,addInitializer:old_createAddInitializerMethod(initializers,decoratorFinishedRef)},old_createMetadataMethodsForProperty(metadataMap,0,name,decoratorFinishedRef)),nextNewClass=classDecs[i](newClass,ctx)}finally{decoratorFinishedRef.v=!0}void 0!==nextNewClass&&(old_assertValidReturnValue(10,nextNewClass),newClass=nextNewClass)}ret.push(newClass,(function(){for(var i=0;i<initializers.length;i++)initializers[i].call(newClass)}))}}export default function applyDecs(targetClass,memberDecs,classDecs){var ret=[],staticMetadataMap={},protoMetadataMap={};return old_applyMemberDecs(ret,targetClass,protoMetadataMap,staticMetadataMap,memberDecs),old_convertMetadataMapToFinal(targetClass.prototype,protoMetadataMap),old_applyClassDecs(ret,targetClass,staticMetadataMap,classDecs),old_convertMetadataMapToFinal(targetClass,staticMetadataMap),ret}'), applyDecs2203: helper("7.19.0", 'function createAddInitializerMethod(initializers,decoratorFinishedRef){return function(initializer){assertNotFinished(decoratorFinishedRef,"addInitializer"),assertCallable(initializer,"An initializer"),initializers.push(initializer)}}function memberDec(dec,name,desc,initializers,kind,isStatic,isPrivate,value){var kindStr;switch(kind){case 1:kindStr="accessor";break;case 2:kindStr="method";break;case 3:kindStr="getter";break;case 4:kindStr="setter";break;default:kindStr="field"}var get,set,ctx={kind:kindStr,name:isPrivate?"#"+name:name,static:isStatic,private:isPrivate},decoratorFinishedRef={v:!1};0!==kind&&(ctx.addInitializer=createAddInitializerMethod(initializers,decoratorFinishedRef)),0===kind?isPrivate?(get=desc.get,set=desc.set):(get=function(){return this[name]},set=function(v){this[name]=v}):2===kind?get=function(){return desc.value}:(1!==kind&&3!==kind||(get=function(){return desc.get.call(this)}),1!==kind&&4!==kind||(set=function(v){desc.set.call(this,v)})),ctx.access=get&&set?{get:get,set:set}:get?{get:get}:{set:set};try{return dec(value,ctx)}finally{decoratorFinishedRef.v=!0}}function assertNotFinished(decoratorFinishedRef,fnName){if(decoratorFinishedRef.v)throw new Error("attempted to call "+fnName+" after decoration was finished")}function assertCallable(fn,hint){if("function"!=typeof fn)throw new TypeError(hint+" must be a function")}function assertValidReturnValue(kind,value){var type=typeof value;if(1===kind){if("object"!==type||null===value)throw new TypeError("accessor decorators must return an object with get, set, or init properties or void 0");void 0!==value.get&&assertCallable(value.get,"accessor.get"),void 0!==value.set&&assertCallable(value.set,"accessor.set"),void 0!==value.init&&assertCallable(value.init,"accessor.init")}else if("function"!==type){var hint;throw hint=0===kind?"field":10===kind?"class":"method",new TypeError(hint+" decorators must return a function or void 0")}}function applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,initializers){var desc,init,value,newValue,get,set,decs=decInfo[0];if(isPrivate?desc=0===kind||1===kind?{get:decInfo[3],set:decInfo[4]}:3===kind?{get:decInfo[3]}:4===kind?{set:decInfo[3]}:{value:decInfo[3]}:0!==kind&&(desc=Object.getOwnPropertyDescriptor(base,name)),1===kind?value={get:desc.get,set:desc.set}:2===kind?value=desc.value:3===kind?value=desc.get:4===kind&&(value=desc.set),"function"==typeof decs)void 0!==(newValue=memberDec(decs,name,desc,initializers,kind,isStatic,isPrivate,value))&&(assertValidReturnValue(kind,newValue),0===kind?init=newValue:1===kind?(init=newValue.init,get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue);else for(var i=decs.length-1;i>=0;i--){var newInit;if(void 0!==(newValue=memberDec(decs[i],name,desc,initializers,kind,isStatic,isPrivate,value)))assertValidReturnValue(kind,newValue),0===kind?newInit=newValue:1===kind?(newInit=newValue.init,get=newValue.get||value.get,set=newValue.set||value.set,value={get:get,set:set}):value=newValue,void 0!==newInit&&(void 0===init?init=newInit:"function"==typeof init?init=[init,newInit]:init.push(newInit))}if(0===kind||1===kind){if(void 0===init)init=function(instance,init){return init};else if("function"!=typeof init){var ownInitializers=init;init=function(instance,init){for(var value=init,i=0;i<ownInitializers.length;i++)value=ownInitializers[i].call(instance,value);return value}}else{var originalInitializer=init;init=function(instance,init){return originalInitializer.call(instance,init)}}ret.push(init)}0!==kind&&(1===kind?(desc.get=value.get,desc.set=value.set):2===kind?desc.value=value:3===kind?desc.get=value:4===kind&&(desc.set=value),isPrivate?1===kind?(ret.push((function(instance,args){return value.get.call(instance,args)})),ret.push((function(instance,args){return value.set.call(instance,args)}))):2===kind?ret.push(value):ret.push((function(instance,args){return value.call(instance,args)})):Object.defineProperty(base,name,desc))}function applyMemberDecs(ret,Class,decInfos){for(var protoInitializers,staticInitializers,existingProtoNonFields=new Map,existingStaticNonFields=new Map,i=0;i<decInfos.length;i++){var decInfo=decInfos[i];if(Array.isArray(decInfo)){var base,initializers,kind=decInfo[1],name=decInfo[2],isPrivate=decInfo.length>3,isStatic=kind>=5;if(isStatic?(base=Class,0!==(kind-=5)&&(initializers=staticInitializers=staticInitializers||[])):(base=Class.prototype,0!==kind&&(initializers=protoInitializers=protoInitializers||[])),0!==kind&&!isPrivate){var existingNonFields=isStatic?existingStaticNonFields:existingProtoNonFields,existingKind=existingNonFields.get(name)||0;if(!0===existingKind||3===existingKind&&4!==kind||4===existingKind&&3!==kind)throw new Error("Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: "+name);!existingKind&&kind>2?existingNonFields.set(name,kind):existingNonFields.set(name,!0)}applyMemberDec(ret,base,decInfo,name,kind,isStatic,isPrivate,initializers)}}pushInitializers(ret,protoInitializers),pushInitializers(ret,staticInitializers)}function pushInitializers(ret,initializers){initializers&&ret.push((function(instance){for(var i=0;i<initializers.length;i++)initializers[i].call(instance);return instance}))}function applyClassDecs(ret,targetClass,classDecs){if(classDecs.length>0){for(var initializers=[],newClass=targetClass,name=targetClass.name,i=classDecs.length-1;i>=0;i--){var decoratorFinishedRef={v:!1};try{var nextNewClass=classDecs[i](newClass,{kind:"class",name:name,addInitializer:createAddInitializerMethod(initializers,decoratorFinishedRef)})}finally{decoratorFinishedRef.v=!0}void 0!==nextNewClass&&(assertValidReturnValue(10,nextNewClass),newClass=nextNewClass)}ret.push(newClass,(function(){for(var i=0;i<initializers.length;i++)initializers[i].call(newClass)}))}}export default function applyDecs2203(targetClass,memberDecs,classDecs){var ret=[];return applyMemberDecs(ret,targetClass,memberDecs),applyClassDecs(ret,targetClass,classDecs),ret}'), asyncGeneratorDelegate: helper("7.0.0-beta.0", 'import OverloadYield from"OverloadYield";export default function _asyncGeneratorDelegate(inner){var iter={},waiting=!1;function pump(key,value){return waiting=!0,value=new Promise((function(resolve){resolve(inner[key](value))})),{done:!1,value:new OverloadYield(value,1)}}return iter["undefined"!=typeof Symbol&&Symbol.iterator||"@@iterator"]=function(){return this},iter.next=function(value){return waiting?(waiting=!1,value):pump("next",value)},"function"==typeof inner.throw&&(iter.throw=function(value){if(waiting)throw waiting=!1,value;return pump("throw",value)}),"function"==typeof inner.return&&(iter.return=function(value){return waiting?(waiting=!1,value):pump("return",value)}),iter}'), asyncIterator: helper("7.15.9", 'export default function _asyncIterator(iterable){var method,async,sync,retry=2;for("undefined"!=typeof Symbol&&(async=Symbol.asyncIterator,sync=Symbol.iterator);retry--;){if(async&&null!=(method=iterable[async]))return method.call(iterable);if(sync&&null!=(method=iterable[sync]))return new AsyncFromSyncIterator(method.call(iterable));async="@@asyncIterator",sync="@@iterator"}throw new TypeError("Object is not async iterable")}function AsyncFromSyncIterator(s){function AsyncFromSyncIteratorContinuation(r){if(Object(r)!==r)return Promise.reject(new TypeError(r+" is not an object."));var done=r.done;return Promise.resolve(r.value).then((function(value){return{value:value,done:done}}))}return AsyncFromSyncIterator=function(s){this.s=s,this.n=s.next},AsyncFromSyncIterator.prototype={s:null,n:null,next:function(){return AsyncFromSyncIteratorContinuation(this.n.apply(this.s,arguments))},return:function(value){var ret=this.s.return;return void 0===ret?Promise.resolve({value:value,done:!0}):AsyncFromSyncIteratorContinuation(ret.apply(this.s,arguments))},throw:function(value){var thr=this.s.return;return void 0===thr?Promise.reject(value):AsyncFromSyncIteratorContinuation(thr.apply(this.s,arguments))}},new AsyncFromSyncIterator(s)}'), awaitAsyncGenerator: helper("7.0.0-beta.0", 'import OverloadYield from"OverloadYield";export default function _awaitAsyncGenerator(value){return new OverloadYield(value,0)}'), jsx: helper("7.0.0-beta.0", 'var REACT_ELEMENT_TYPE;export default function _createRawReactElement(type,props,key,children){REACT_ELEMENT_TYPE||(REACT_ELEMENT_TYPE="function"==typeof Symbol&&Symbol.for&&Symbol.for("react.element")||60103);var defaultProps=type&&type.defaultProps,childrenLength=arguments.length-3;if(props||0===childrenLength||(props={children:void 0}),1===childrenLength)props.children=children;else if(childrenLength>1){for(var childArray=new Array(childrenLength),i=0;i<childrenLength;i++)childArray[i]=arguments[i+3];props.children=childArray}if(props&&defaultProps)for(var propName in defaultProps)void 0===props[propName]&&(props[propName]=defaultProps[propName]);else props||(props=defaultProps||{});return{$$typeof:REACT_ELEMENT_TYPE,type:type,key:void 0===key?null:""+key,ref:null,props:props,_owner:null}}'), objectSpread2: helper("7.5.0", 'import defineProperty from"defineProperty";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter((function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable}))),keys.push.apply(keys,symbols)}return keys}export default function _objectSpread2(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach((function(key){defineProperty(target,key,source[key])})):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach((function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))}))}return target}'), regeneratorRuntime: helper("7.18.0", `export default function _regeneratorRuntime(){"use strict";
/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */_regeneratorRuntime=function(){return exports};var exports={},Op=Object.prototype,hasOwn=Op.hasOwnProperty,$Symbol="function"==typeof Symbol?Symbol:{},iteratorSymbol=$Symbol.iterator||"@@iterator",asyncIteratorSymbol=$Symbol.asyncIterator||"@@asyncIterator",toStringTagSymbol=$Symbol.toStringTag||"@@toStringTag";function define(obj,key,value){return Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}),obj[key]}try{define({},"")}catch(err){define=function(obj,key,value){return obj[key]=value}}function wrap(innerFn,outerFn,self,tryLocsList){var protoGenerator=outerFn&&outerFn.prototype instanceof Generator?outerFn:Generator,generator=Object.create(protoGenerator.prototype),context=new Context(tryLocsList||[]);return generator._invoke=function(innerFn,self,context){var state="suspendedStart";return function(method,arg){if("executing"===state)throw new Error("Generator is already running");if("completed"===state){if("throw"===method)throw arg;return doneResult()}for(context.method=method,context.arg=arg;;){var delegate=context.delegate;if(delegate){var delegateResult=maybeInvokeDelegate(delegate,context);if(delegateResult){if(delegateResult===ContinueSentinel)continue;return delegateResult}}if("next"===context.method)context.sent=context._sent=context.arg;else if("throw"===context.method){if("suspendedStart"===state)throw state="completed",context.arg;context.dispatchException(context.arg)}else"return"===context.method&&context.abrupt("return",context.arg);state="executing";var record=tryCatch(innerFn,self,context);if("normal"===record.type){if(state=context.done?"completed":"suspendedYield",record.arg===ContinueSentinel)continue;return{value:record.arg,done:context.done}}"throw"===record.type&&(state="completed",context.method="throw",context.arg=record.arg)}}}(innerFn,self,context),generator}function tryCatch(fn,obj,arg){try{return{type:"normal",arg:fn.call(obj,arg)}}catch(err){return{type:"throw",arg:err}}}exports.wrap=wrap;var ContinueSentinel={};function Generator(){}function GeneratorFunction(){}function GeneratorFunctionPrototype(){}var IteratorPrototype={};define(IteratorPrototype,iteratorSymbol,(function(){return this}));var getProto=Object.getPrototypeOf,NativeIteratorPrototype=getProto&&getProto(getProto(values([])));NativeIteratorPrototype&&NativeIteratorPrototype!==Op&&hasOwn.call(NativeIteratorPrototype,iteratorSymbol)&&(IteratorPrototype=NativeIteratorPrototype);var Gp=GeneratorFunctionPrototype.prototype=Generator.prototype=Object.create(IteratorPrototype);function defineIteratorMethods(prototype){["next","throw","return"].forEach((function(method){define(prototype,method,(function(arg){return this._invoke(method,arg)}))}))}function AsyncIterator(generator,PromiseImpl){function invoke(method,arg,resolve,reject){var record=tryCatch(generator[method],generator,arg);if("throw"!==record.type){var result=record.arg,value=result.value;return value&&"object"==typeof value&&hasOwn.call(value,"__await")?PromiseImpl.resolve(value.__await).then((function(value){invoke("next",value,resolve,reject)}),(function(err){invoke("throw",err,resolve,reject)})):PromiseImpl.resolve(value).then((function(unwrapped){result.value=unwrapped,resolve(result)}),(function(error){return invoke("throw",error,resolve,reject)}))}reject(record.arg)}var previousPromise;this._invoke=function(method,arg){function callInvokeWithMethodAndArg(){return new PromiseImpl((function(resolve,reject){invoke(method,arg,resolve,reject)}))}return previousPromise=previousPromise?previousPromise.then(callInvokeWithMethodAndArg,callInvokeWithMethodAndArg):callInvokeWithMethodAndArg()}}function maybeInvokeDelegate(delegate,context){var method=delegate.iterator[context.method];if(undefined===method){if(context.delegate=null,"throw"===context.method){if(delegate.iterator.return&&(context.method="return",context.arg=undefined,maybeInvokeDelegate(delegate,context),"throw"===context.method))return ContinueSentinel;context.method="throw",context.arg=new TypeError("The iterator does not provide a 'throw' method")}return ContinueSentinel}var record=tryCatch(method,delegate.iterator,context.arg);if("throw"===record.type)return context.method="throw",context.arg=record.arg,context.delegate=null,ContinueSentinel;var info=record.arg;return info?info.done?(context[delegate.resultName]=info.value,context.next=delegate.nextLoc,"return"!==context.method&&(context.method="next",context.arg=undefined),context.delegate=null,ContinueSentinel):info:(context.method="throw",context.arg=new TypeError("iterator result is not an object"),context.delegate=null,ContinueSentinel)}function pushTryEntry(locs){var entry={tryLoc:locs[0]};1 in locs&&(entry.catchLoc=locs[1]),2 in locs&&(entry.finallyLoc=locs[2],entry.afterLoc=locs[3]),this.tryEntries.push(entry)}function resetTryEntry(entry){var record=entry.completion||{};record.type="normal",delete record.arg,entry.completion=record}function Context(tryLocsList){this.tryEntries=[{tryLoc:"root"}],tryLocsList.forEach(pushTryEntry,this),this.reset(!0)}function values(iterable){if(iterable){var iteratorMethod=iterable[iteratorSymbol];if(iteratorMethod)return iteratorMethod.call(iterable);if("function"==typeof iterable.next)return iterable;if(!isNaN(iterable.length)){var i=-1,next=function next(){for(;++i<iterable.length;)if(hasOwn.call(iterable,i))return next.value=iterable[i],next.done=!1,next;return next.value=undefined,next.done=!0,next};return next.next=next}}return{next:doneResult}}function doneResult(){return{value:undefined,done:!0}}return GeneratorFunction.prototype=GeneratorFunctionPrototype,define(Gp,"constructor",GeneratorFunctionPrototype),define(GeneratorFunctionPrototype,"constructor",GeneratorFunction),GeneratorFunction.displayName=define(GeneratorFunctionPrototype,toStringTagSymbol,"GeneratorFunction"),exports.isGeneratorFunction=function(genFun){var ctor="function"==typeof genFun&&genFun.constructor;return!!ctor&&(ctor===GeneratorFunction||"GeneratorFunction"===(ctor.displayName||ctor.name))},exports.mark=function(genFun){return Object.setPrototypeOf?Object.setPrototypeOf(genFun,GeneratorFunctionPrototype):(genFun.__proto__=GeneratorFunctionPrototype,define(genFun,toStringTagSymbol,"GeneratorFunction")),genFun.prototype=Object.create(Gp),genFun},exports.awrap=function(arg){return{__await:arg}},defineIteratorMethods(AsyncIterator.prototype),define(AsyncIterator.prototype,asyncIteratorSymbol,(function(){return this})),exports.AsyncIterator=AsyncIterator,exports.async=function(innerFn,outerFn,self,tryLocsList,PromiseImpl){void 0===PromiseImpl&&(PromiseImpl=Promise);var iter=new AsyncIterator(wrap(innerFn,outerFn,self,tryLocsList),PromiseImpl);return exports.isGeneratorFunction(outerFn)?iter:iter.next().then((function(result){return result.done?result.value:iter.next()}))},defineIteratorMethods(Gp),define(Gp,toStringTagSymbol,"Generator"),define(Gp,iteratorSymbol,(function(){return this})),define(Gp,"toString",(function(){return"[object Generator]"})),exports.keys=function(object){var keys=[];for(var key in object)keys.push(key);return keys.reverse(),function next(){for(;keys.length;){var key=keys.pop();if(key in object)return next.value=key,next.done=!1,next}return next.done=!0,next}},exports.values=values,Context.prototype={constructor:Context,reset:function(skipTempReset){if(this.prev=0,this.next=0,this.sent=this._sent=undefined,this.done=!1,this.delegate=null,this.method="next",this.arg=undefined,this.tryEntries.forEach(resetTryEntry),!skipTempReset)for(var name in this)"t"===name.charAt(0)&&hasOwn.call(this,name)&&!isNaN(+name.slice(1))&&(this[name]=undefined)},stop:function(){this.done=!0;var rootRecord=this.tryEntries[0].completion;if("throw"===rootRecord.type)throw rootRecord.arg;return this.rval},dispatchException:function(exception){if(this.done)throw exception;var context=this;function handle(loc,caught){return record.type="throw",record.arg=exception,context.next=loc,caught&&(context.method="next",context.arg=undefined),!!caught}for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i],record=entry.completion;if("root"===entry.tryLoc)return handle("end");if(entry.tryLoc<=this.prev){var hasCatch=hasOwn.call(entry,"catchLoc"),hasFinally=hasOwn.call(entry,"finallyLoc");if(hasCatch&&hasFinally){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0);if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}else if(hasCatch){if(this.prev<entry.catchLoc)return handle(entry.catchLoc,!0)}else{if(!hasFinally)throw new Error("try statement without catch or finally");if(this.prev<entry.finallyLoc)return handle(entry.finallyLoc)}}}},abrupt:function(type,arg){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc<=this.prev&&hasOwn.call(entry,"finallyLoc")&&this.prev<entry.finallyLoc){var finallyEntry=entry;break}}finallyEntry&&("break"===type||"continue"===type)&&finallyEntry.tryLoc<=arg&&arg<=finallyEntry.finallyLoc&&(finallyEntry=null);var record=finallyEntry?finallyEntry.completion:{};return record.type=type,record.arg=arg,finallyEntry?(this.method="next",this.next=finallyEntry.finallyLoc,ContinueSentinel):this.complete(record)},complete:function(record,afterLoc){if("throw"===record.type)throw record.arg;return"break"===record.type||"continue"===record.type?this.next=record.arg:"return"===record.type?(this.rval=this.arg=record.arg,this.method="return",this.next="end"):"normal"===record.type&&afterLoc&&(this.next=afterLoc),ContinueSentinel},finish:function(finallyLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.finallyLoc===finallyLoc)return this.complete(entry.completion,entry.afterLoc),resetTryEntry(entry),ContinueSentinel}},catch:function(tryLoc){for(var i=this.tryEntries.length-1;i>=0;--i){var entry=this.tryEntries[i];if(entry.tryLoc===tryLoc){var record=entry.completion;if("throw"===record.type){var thrown=record.arg;resetTryEntry(entry)}return thrown}}throw new Error("illegal catch attempt")},delegateYield:function(iterable,resultName,nextLoc){return this.delegate={iterator:values(iterable),resultName:resultName,nextLoc:nextLoc},"next"===this.method&&(this.arg=undefined),ContinueSentinel}},exports}`), typeof: helper("7.0.0-beta.0", 'export default function _typeof(obj){"@babel/helpers - typeof";return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(obj){return typeof obj}:function(obj){return obj&&"function"==typeof Symbol&&obj.constructor===Symbol&&obj!==Symbol.prototype?"symbol":typeof obj},_typeof(obj)}'), wrapRegExp: helper("7.19.0", 'import setPrototypeOf from"setPrototypeOf";import inherits from"inherits";export default function _wrapRegExp(){_wrapRegExp=function(re,groups){return new BabelRegExp(re,void 0,groups)};var _super=RegExp.prototype,_groups=new WeakMap;function BabelRegExp(re,flags,groups){var _this=new RegExp(re,flags);return _groups.set(_this,groups||_groups.get(re)),setPrototypeOf(_this,BabelRegExp.prototype)}function buildGroups(result,re){var g=_groups.get(re);return Object.keys(g).reduce((function(groups,name){var i=g[name];if("number"==typeof i)groups[name]=result[i];else{for(var k=0;void 0===result[i[k]]&&k+1<i.length;)k++;groups[name]=result[i[k]]}return groups}),Object.create(null))}return inherits(BabelRegExp,RegExp),BabelRegExp.prototype.exec=function(str){var result=_super.exec.call(this,str);return result&&(result.groups=buildGroups(result,this)),result},BabelRegExp.prototype[Symbol.replace]=function(str,substitution){if("string"==typeof substitution){var groups=_groups.get(this);return _super[Symbol.replace].call(this,str,substitution.replace(/\\$<([^>]+)>/g,(function(_,name){return"$"+groups[name]})))}if("function"==typeof substitution){var _this=this;return _super[Symbol.replace].call(this,str,(function(){var args=arguments;return"object"!=typeof args[args.length-1]&&(args=[].slice.call(args)).push(buildGroups(args,_this)),substitution.apply(this,args)}))}return _super[Symbol.replace].call(this,str,substitution)},_wrapRegExp.apply(this,arguments)}') });
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+helpers@7.19.0/node_modules/@babel/helpers/lib/helpers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _template = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/index.js"), _helpersGenerated = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.19.0/node_modules/@babel/helpers/lib/helpers-generated.js");
        const helpers = Object.assign({ __proto__: null }, _helpersGenerated.default);
        var _default = helpers;
        exports2.default = _default;
        const helper = (minVersion) => (tpl) => ({ minVersion, ast: () => _template.default.program.ast(tpl) });
        helpers.AwaitValue = helper("7.0.0-beta.0")`
    export default function _AwaitValue(value) {
      this.wrapped = value;
    }
  `, helpers.wrapAsyncGenerator = helper("7.0.0-beta.0")`
  import AsyncGenerator from "AsyncGenerator";

  export default function _wrapAsyncGenerator(fn) {
    return function () {
      return new AsyncGenerator(fn.apply(this, arguments));
    };
  }
`, helpers.asyncToGenerator = helper("7.0.0-beta.0")`
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }

    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }

  export default function _asyncToGenerator(fn) {
    return function () {
      var self = this, args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }

        _next(undefined);
      });
    };
  }
`, helpers.classCallCheck = helper("7.0.0-beta.0")`
  export default function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }
`, helpers.createClass = helper("7.0.0-beta.0")`
  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i ++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  export default function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", { writable: false });
    return Constructor;
  }
`, helpers.defineEnumerableProperties = helper("7.0.0-beta.0")`
  export default function _defineEnumerableProperties(obj, descs) {
    for (var key in descs) {
      var desc = descs[key];
      desc.configurable = desc.enumerable = true;
      if ("value" in desc) desc.writable = true;
      Object.defineProperty(obj, key, desc);
    }

    // Symbols are not enumerated over by for-in loops. If native
    // Symbols are available, fetch all of the descs object's own
    // symbol properties and define them on our target object too.
    if (Object.getOwnPropertySymbols) {
      var objectSymbols = Object.getOwnPropertySymbols(descs);
      for (var i = 0; i < objectSymbols.length; i++) {
        var sym = objectSymbols[i];
        var desc = descs[sym];
        desc.configurable = desc.enumerable = true;
        if ("value" in desc) desc.writable = true;
        Object.defineProperty(obj, sym, desc);
      }
    }
    return obj;
  }
`, helpers.defaults = helper("7.0.0-beta.0")`
  export default function _defaults(obj, defaults) {
    var keys = Object.getOwnPropertyNames(defaults);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      var value = Object.getOwnPropertyDescriptor(defaults, key);
      if (value && value.configurable && obj[key] === undefined) {
        Object.defineProperty(obj, key, value);
      }
    }
    return obj;
  }
`, helpers.defineProperty = helper("7.0.0-beta.0")`
  export default function _defineProperty(obj, key, value) {
    // Shortcircuit the slow defineProperty path when possible.
    // We are trying to avoid issues where setters defined on the
    // prototype cause side effects under the fast path of simple
    // assignment. By checking for existence of the property with
    // the in operator, we can optimize most of this overhead away.
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }
    return obj;
  }
`, helpers.extends = helper("7.0.0-beta.0")`
  export default function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };

    return _extends.apply(this, arguments);
  }
`, helpers.objectSpread = helper("7.0.0-beta.0")`
  import defineProperty from "defineProperty";

  export default function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = (arguments[i] != null) ? Object(arguments[i]) : {};
      var ownKeys = Object.keys(source);
      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function(sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }
      ownKeys.forEach(function(key) {
        defineProperty(target, key, source[key]);
      });
    }
    return target;
  }
`, helpers.inherits = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }
    // We can't use defineProperty to set the prototype in a single step because it
    // doesn't work in Chrome <= 36. https://github.com/babel/babel/issues/14056
    // V8 bug: https://bugs.chromium.org/p/v8/issues/detail?id=3334
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    Object.defineProperty(subClass, "prototype", { writable: false });
    if (superClass) setPrototypeOf(subClass, superClass);
  }
`, helpers.inheritsLoose = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";

  export default function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    setPrototypeOf(subClass, superClass);
  }
`, helpers.getPrototypeOf = helper("7.0.0-beta.0")`
  export default function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
      ? Object.getPrototypeOf.bind()
      : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        };
    return _getPrototypeOf(o);
  }
`, helpers.setPrototypeOf = helper("7.0.0-beta.0")`
  export default function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf
      ? Object.setPrototypeOf.bind()
      : function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        };
    return _setPrototypeOf(o, p);
  }
`, helpers.isNativeReflectConstruct = helper("7.9.0")`
  export default function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;

    // core-js@3
    if (Reflect.construct.sham) return false;

    // Proxy can't be polyfilled. Every browser implemented
    // proxies before or at the same time as Reflect.construct,
    // so if they support Proxy they also support Reflect.construct.
    if (typeof Proxy === "function") return true;

    // Since Reflect.construct can't be properly polyfilled, some
    // implementations (e.g. core-js@2) don't set the correct internal slots.
    // Those polyfills don't allow us to subclass built-ins, so we need to
    // use our fallback implementation.
    try {
      // If the internal slots aren't set, this throws an error similar to
      //   TypeError: this is not a Boolean object.

      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
      return true;
    } catch (e) {
      return false;
    }
  }
`, helpers.construct = helper("7.0.0-beta.0")`
  import setPrototypeOf from "setPrototypeOf";
  import isNativeReflectConstruct from "isNativeReflectConstruct";

  export default function _construct(Parent, args, Class) {
    if (isNativeReflectConstruct()) {
      _construct = Reflect.construct.bind();
    } else {
      // NOTE: If Parent !== Class, the correct __proto__ is set *after*
      //       calling the constructor.
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }
    // Avoid issues with Class being present but undefined when it wasn't
    // present in the original call.
    return _construct.apply(null, arguments);
  }
`, helpers.isNativeFunction = helper("7.0.0-beta.0")`
  export default function _isNativeFunction(fn) {
    // Note: This function returns "true" for core-js functions.
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  }
`, helpers.wrapNativeSuper = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";
  import setPrototypeOf from "setPrototypeOf";
  import isNativeFunction from "isNativeFunction";
  import construct from "construct";

  export default function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;

    _wrapNativeSuper = function _wrapNativeSuper(Class) {
      if (Class === null || !isNativeFunction(Class)) return Class;
      if (typeof Class !== "function") {
        throw new TypeError("Super expression must either be null or a function");
      }
      if (typeof _cache !== "undefined") {
        if (_cache.has(Class)) return _cache.get(Class);
        _cache.set(Class, Wrapper);
      }
      function Wrapper() {
        return construct(Class, arguments, getPrototypeOf(this).constructor)
      }
      Wrapper.prototype = Object.create(Class.prototype, {
        constructor: {
          value: Wrapper,
          enumerable: false,
          writable: true,
          configurable: true,
        }
      });

      return setPrototypeOf(Wrapper, Class);
    }

    return _wrapNativeSuper(Class)
  }
`, helpers.instanceof = helper("7.0.0-beta.0")`
  export default function _instanceof(left, right) {
    if (right != null && typeof Symbol !== "undefined" && right[Symbol.hasInstance]) {
      return !!right[Symbol.hasInstance](left);
    } else {
      return left instanceof right;
    }
  }
`, helpers.interopRequireDefault = helper("7.0.0-beta.0")`
  export default function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : { default: obj };
  }
`, helpers.interopRequireWildcard = helper("7.14.0")`
  function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;

    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function (nodeInterop) {
      return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
  }

  export default function _interopRequireWildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
      return obj;
    }

    if (obj === null || (typeof obj !== "object" && typeof obj !== "function")) {
      return { default: obj }
    }

    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }

    var newObj = {};
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for (var key in obj) {
      if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
        var desc = hasPropertyDescriptor
          ? Object.getOwnPropertyDescriptor(obj, key)
          : null;
        if (desc && (desc.get || desc.set)) {
          Object.defineProperty(newObj, key, desc);
        } else {
          newObj[key] = obj[key];
        }
      }
    }
    newObj.default = obj;
    if (cache) {
      cache.set(obj, newObj);
    }
    return newObj;
  }
`, helpers.newArrowCheck = helper("7.0.0-beta.0")`
  export default function _newArrowCheck(innerThis, boundThis) {
    if (innerThis !== boundThis) {
      throw new TypeError("Cannot instantiate an arrow function");
    }
  }
`, helpers.objectDestructuringEmpty = helper("7.0.0-beta.0")`
  export default function _objectDestructuringEmpty(obj) {
    if (obj == null) throw new TypeError("Cannot destructure undefined");
  }
`, helpers.objectWithoutPropertiesLoose = helper("7.0.0-beta.0")`
  export default function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};

    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }
`, helpers.objectWithoutProperties = helper("7.0.0-beta.0")`
  import objectWithoutPropertiesLoose from "objectWithoutPropertiesLoose";

  export default function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = objectWithoutPropertiesLoose(source, excluded);
    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }
`, helpers.assertThisInitialized = helper("7.0.0-beta.0")`
  export default function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }
    return self;
  }
`, helpers.possibleConstructorReturn = helper("7.0.0-beta.0")`
  import assertThisInitialized from "assertThisInitialized";

  export default function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    } else if (call !== void 0) {
      throw new TypeError("Derived constructors may only return object or undefined");
    }

    return assertThisInitialized(self);
  }
`, helpers.createSuper = helper("7.9.0")`
  import getPrototypeOf from "getPrototypeOf";
  import isNativeReflectConstruct from "isNativeReflectConstruct";
  import possibleConstructorReturn from "possibleConstructorReturn";

  export default function _createSuper(Derived) {
    var hasNativeReflectConstruct = isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = getPrototypeOf(Derived), result;
      if (hasNativeReflectConstruct) {
        // NOTE: This doesn't work if this.__proto__.constructor has been modified.
        var NewTarget = getPrototypeOf(this).constructor;
        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }
      return possibleConstructorReturn(this, result);
    }
  }
 `, helpers.superPropBase = helper("7.0.0-beta.0")`
  import getPrototypeOf from "getPrototypeOf";

  export default function _superPropBase(object, property) {
    // Yes, this throws if object is null to being with, that's on purpose.
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = getPrototypeOf(object);
      if (object === null) break;
    }
    return object;
  }
`, helpers.get = helper("7.0.0-beta.0")`
  import superPropBase from "superPropBase";

  export default function _get() {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get.bind();
    } else {
      _get = function _get(target, property, receiver) {
        var base = superPropBase(target, property);

        if (!base) return;

        var desc = Object.getOwnPropertyDescriptor(base, property);
        if (desc.get) {
          // STEP 3. If receiver is not present, then set receiver to target.
          return desc.get.call(arguments.length < 3 ? target : receiver);
        }

        return desc.value;
      };
    }
    return _get.apply(this, arguments);
  }
`, helpers.set = helper("7.0.0-beta.0")`
  import superPropBase from "superPropBase";
  import defineProperty from "defineProperty";

  function set(target, property, value, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.set) {
      set = Reflect.set;
    } else {
      set = function set(target, property, value, receiver) {
        var base = superPropBase(target, property);
        var desc;

        if (base) {
          desc = Object.getOwnPropertyDescriptor(base, property);
          if (desc.set) {
            desc.set.call(receiver, value);
            return true;
          } else if (!desc.writable) {
            // Both getter and non-writable fall into this.
            return false;
          }
        }

        // Without a super that defines the property, spec boils down to
        // "define on receiver" for some reason.
        desc = Object.getOwnPropertyDescriptor(receiver, property);
        if (desc) {
          if (!desc.writable) {
            // Setter, getter, and non-writable fall into this.
            return false;
          }

          desc.value = value;
          Object.defineProperty(receiver, property, desc);
        } else {
          // Avoid setters that may be defined on Sub's prototype, but not on
          // the instance.
          defineProperty(receiver, property, value);
        }

        return true;
      };
    }

    return set(target, property, value, receiver);
  }

  export default function _set(target, property, value, receiver, isStrict) {
    var s = set(target, property, value, receiver || target);
    if (!s && isStrict) {
      throw new Error('failed to set property');
    }

    return value;
  }
`, helpers.taggedTemplateLiteral = helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteral(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    return Object.freeze(Object.defineProperties(strings, {
        raw: { value: Object.freeze(raw) }
    }));
  }
`, helpers.taggedTemplateLiteralLoose = helper("7.0.0-beta.0")`
  export default function _taggedTemplateLiteralLoose(strings, raw) {
    if (!raw) { raw = strings.slice(0); }
    strings.raw = raw;
    return strings;
  }
`, helpers.readOnlyError = helper("7.0.0-beta.0")`
  export default function _readOnlyError(name) {
    throw new TypeError("\\"" + name + "\\" is read-only");
  }
`, helpers.writeOnlyError = helper("7.12.13")`
  export default function _writeOnlyError(name) {
    throw new TypeError("\\"" + name + "\\" is write-only");
  }
`, helpers.classNameTDZError = helper("7.0.0-beta.0")`
  export default function _classNameTDZError(name) {
    throw new Error("Class \\"" + name + "\\" cannot be referenced in computed property keys.");
  }
`, helpers.temporalUndefined = helper("7.0.0-beta.0")`
  // This function isn't mean to be called, but to be used as a reference.
  // We can't use a normal object because it isn't hoisted.
  export default function _temporalUndefined() {}
`, helpers.tdz = helper("7.5.5")`
  export default function _tdzError(name) {
    throw new ReferenceError(name + " is not defined - temporal dead zone");
  }
`, helpers.temporalRef = helper("7.0.0-beta.0")`
  import undef from "temporalUndefined";
  import err from "tdz";

  export default function _temporalRef(val, name) {
    return val === undef ? err(name) : val;
  }
`, helpers.slicedToArray = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimit from "iterableToArrayLimit";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArray(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimit(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
`, helpers.slicedToArrayLoose = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArrayLimitLoose from "iterableToArrayLimitLoose";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _slicedToArrayLoose(arr, i) {
    return (
      arrayWithHoles(arr) ||
      iterableToArrayLimitLoose(arr, i) ||
      unsupportedIterableToArray(arr, i) ||
      nonIterableRest()
    );
  }
`, helpers.toArray = helper("7.0.0-beta.0")`
  import arrayWithHoles from "arrayWithHoles";
  import iterableToArray from "iterableToArray";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableRest from "nonIterableRest";

  export default function _toArray(arr) {
    return (
      arrayWithHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableRest()
    );
  }
`, helpers.toConsumableArray = helper("7.0.0-beta.0")`
  import arrayWithoutHoles from "arrayWithoutHoles";
  import iterableToArray from "iterableToArray";
  import unsupportedIterableToArray from "unsupportedIterableToArray";
  import nonIterableSpread from "nonIterableSpread";

  export default function _toConsumableArray(arr) {
    return (
      arrayWithoutHoles(arr) ||
      iterableToArray(arr) ||
      unsupportedIterableToArray(arr) ||
      nonIterableSpread()
    );
  }
`, helpers.arrayWithoutHoles = helper("7.0.0-beta.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return arrayLikeToArray(arr);
  }
`, helpers.arrayWithHoles = helper("7.0.0-beta.0")`
  export default function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }
`, helpers.maybeArrayLike = helper("7.9.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _maybeArrayLike(next, arr, i) {
    if (arr && !Array.isArray(arr) && typeof arr.length === "number") {
      var len = arr.length;
      return arrayLikeToArray(arr, i !== void 0 && i < len ? i : len);
    }
    return next(arr, i);
  }
`, helpers.iterableToArray = helper("7.0.0-beta.0")`
  export default function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }
`, helpers.iterableToArrayLimit = helper("7.0.0-beta.0")`
  export default function _iterableToArrayLimit(arr, i) {
    // this is an expanded form of \`for...of\` that properly supports abrupt completions of
    // iterators etc. variable names have been minimised to reduce the size of this massive
    // helper. sometimes spec compliance is annoying :(
    //
    // _n = _iteratorNormalCompletion
    // _d = _didIteratorError
    // _e = _iteratorError
    // _i = _iterator
    // _s = _step

    var _i = arr == null ? null : (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
    if (_i == null) return;

    var _arr = [];
    var _n = true;
    var _d = false;
    var _s, _e;
    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);
        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
`, helpers.iterableToArrayLimitLoose = helper("7.0.0-beta.0")`
  export default function _iterableToArrayLimitLoose(arr, i) {
    var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]);
    if (_i == null) return;

    var _arr = [];
    for (_i = _i.call(arr), _step; !(_step = _i.next()).done;) {
      _arr.push(_step.value);
      if (i && _arr.length === i) break;
    }
    return _arr;
  }
`, helpers.unsupportedIterableToArray = helper("7.9.0")`
  import arrayLikeToArray from "arrayLikeToArray";

  export default function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return arrayLikeToArray(o, minLen);
  }
`, helpers.arrayLikeToArray = helper("7.9.0")`
  export default function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
`, helpers.nonIterableSpread = helper("7.0.0-beta.0")`
  export default function _nonIterableSpread() {
    throw new TypeError(
      "Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
`, helpers.nonIterableRest = helper("7.0.0-beta.0")`
  export default function _nonIterableRest() {
    throw new TypeError(
      "Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."
    );
  }
`, helpers.createForOfIteratorHelper = helper("7.9.0")`
  import unsupportedIterableToArray from "unsupportedIterableToArray";

  // s: start (create the iterator)
  // n: next
  // e: error (called whenever something throws)
  // f: finish (always called at the end)

  export default function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (!it) {
      // Fallback for engines without symbol support
      if (
        Array.isArray(o) ||
        (it = unsupportedIterableToArray(o)) ||
        (allowArrayLike && o && typeof o.length === "number")
      ) {
        if (it) o = it;
        var i = 0;
        var F = function(){};
        return {
          s: F,
          n: function() {
            if (i >= o.length) return { done: true };
            return { done: false, value: o[i++] };
          },
          e: function(e) { throw e; },
          f: F,
        };
      }

      throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }

    var normalCompletion = true, didErr = false, err;

    return {
      s: function() {
        it = it.call(o);
      },
      n: function() {
        var step = it.next();
        normalCompletion = step.done;
        return step;
      },
      e: function(e) {
        didErr = true;
        err = e;
      },
      f: function() {
        try {
          if (!normalCompletion && it.return != null) it.return();
        } finally {
          if (didErr) throw err;
        }
      }
    };
  }
`, helpers.createForOfIteratorHelperLoose = helper("7.9.0")`
  import unsupportedIterableToArray from "unsupportedIterableToArray";

  export default function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];

    if (it) return (it = it.call(o)).next.bind(it);

    // Fallback for engines without symbol support
    if (
      Array.isArray(o) ||
      (it = unsupportedIterableToArray(o)) ||
      (allowArrayLike && o && typeof o.length === "number")
    ) {
      if (it) o = it;
      var i = 0;
      return function() {
        if (i >= o.length) return { done: true };
        return { done: false, value: o[i++] };
      }
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
`, helpers.skipFirstGeneratorNext = helper("7.0.0-beta.0")`
  export default function _skipFirstGeneratorNext(fn) {
    return function () {
      var it = fn.apply(this, arguments);
      it.next();
      return it;
    }
  }
`, helpers.toPrimitive = helper("7.1.5")`
  export default function _toPrimitive(
    input,
    hint /*: "default" | "string" | "number" | void */
  ) {
    if (typeof input !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
      var res = prim.call(input, hint || "default");
      if (typeof res !== "object") return res;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
  }
`, helpers.toPropertyKey = helper("7.1.5")`
  import toPrimitive from "toPrimitive";

  export default function _toPropertyKey(arg) {
    var key = toPrimitive(arg, "string");
    return typeof key === "symbol" ? key : String(key);
  }
`, helpers.initializerWarningHelper = helper("7.0.0-beta.0")`
    export default function _initializerWarningHelper(descriptor, context){
        throw new Error(
          'Decorating class property failed. Please ensure that ' +
          'proposal-class-properties is enabled and runs after the decorators transform.'
        );
    }
`, helpers.initializerDefineProperty = helper("7.0.0-beta.0")`
    export default function _initializerDefineProperty(target, property, descriptor, context){
        if (!descriptor) return;

        Object.defineProperty(target, property, {
            enumerable: descriptor.enumerable,
            configurable: descriptor.configurable,
            writable: descriptor.writable,
            value: descriptor.initializer ? descriptor.initializer.call(context) : void 0,
        });
    }
`, helpers.applyDecoratedDescriptor = helper("7.0.0-beta.0")`
    export default function _applyDecoratedDescriptor(target, property, decorators, descriptor, context){
        var desc = {};
        Object.keys(descriptor).forEach(function(key){
            desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;
        if ('value' in desc || desc.initializer){
            desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function(desc, decorator){
            return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0){
            desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
            desc.initializer = undefined;
        }

        if (desc.initializer === void 0){
            Object.defineProperty(target, property, desc);
            desc = null;
        }

        return desc;
    }
`, helpers.classPrivateFieldLooseKey = helper("7.0.0-beta.0")`
  var id = 0;
  export default function _classPrivateFieldKey(name) {
    return "__private_" + (id++) + "_" + name;
  }
`, helpers.classPrivateFieldLooseBase = helper("7.0.0-beta.0")`
  export default function _classPrivateFieldBase(receiver, privateKey) {
    if (!Object.prototype.hasOwnProperty.call(receiver, privateKey)) {
      throw new TypeError("attempted to use private field on non-instance");
    }
    return receiver;
  }
`, helpers.classPrivateFieldGet = helper("7.0.0-beta.0")`
  import classApplyDescriptorGet from "classApplyDescriptorGet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldGet(receiver, privateMap) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "get");
    return classApplyDescriptorGet(receiver, descriptor);
  }
`, helpers.classPrivateFieldSet = helper("7.0.0-beta.0")`
  import classApplyDescriptorSet from "classApplyDescriptorSet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldSet(receiver, privateMap, value) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
`, helpers.classPrivateFieldDestructureSet = helper("7.4.4")`
  import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
  import classExtractFieldDescriptor from "classExtractFieldDescriptor";
  export default function _classPrivateFieldDestructureSet(receiver, privateMap) {
    var descriptor = classExtractFieldDescriptor(receiver, privateMap, "set");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
`, helpers.classExtractFieldDescriptor = helper("7.13.10")`
  export default function _classExtractFieldDescriptor(receiver, privateMap, action) {
    if (!privateMap.has(receiver)) {
      throw new TypeError("attempted to " + action + " private field on non-instance");
    }
    return privateMap.get(receiver);
  }
`, helpers.classStaticPrivateFieldSpecGet = helper("7.0.2")`
  import classApplyDescriptorGet from "classApplyDescriptorGet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "get");
    return classApplyDescriptorGet(receiver, descriptor);
  }
`, helpers.classStaticPrivateFieldSpecSet = helper("7.0.2")`
  import classApplyDescriptorSet from "classApplyDescriptorSet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "set");
    classApplyDescriptorSet(receiver, descriptor, value);
    return value;
  }
`, helpers.classStaticPrivateMethodGet = helper("7.3.2")`
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  export default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    return method;
  }
`, helpers.classStaticPrivateMethodSet = helper("7.3.2")`
  export default function _classStaticPrivateMethodSet() {
    throw new TypeError("attempted to set read only static private field");
  }
`, helpers.classApplyDescriptorGet = helper("7.13.10")`
  export default function _classApplyDescriptorGet(receiver, descriptor) {
    if (descriptor.get) {
      return descriptor.get.call(receiver);
    }
    return descriptor.value;
  }
`, helpers.classApplyDescriptorSet = helper("7.13.10")`
  export default function _classApplyDescriptorSet(receiver, descriptor, value) {
    if (descriptor.set) {
      descriptor.set.call(receiver, value);
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
      }
      descriptor.value = value;
    }
  }
`, helpers.classApplyDescriptorDestructureSet = helper("7.13.10")`
  export default function _classApplyDescriptorDestructureSet(receiver, descriptor) {
    if (descriptor.set) {
      if (!("__destrObj" in descriptor)) {
        descriptor.__destrObj = {
          set value(v) {
            descriptor.set.call(receiver, v)
          },
        };
      }
      return descriptor.__destrObj;
    } else {
      if (!descriptor.writable) {
        // This should only throw in strict mode, but class bodies are
        // always strict and private fields can only be used inside
        // class bodies.
        throw new TypeError("attempted to set read only private field");
      }

      return descriptor;
    }
  }
`, helpers.classStaticPrivateFieldDestructureSet = helper("7.13.10")`
  import classApplyDescriptorDestructureSet from "classApplyDescriptorDestructureSet";
  import classCheckPrivateStaticAccess from "classCheckPrivateStaticAccess";
  import classCheckPrivateStaticFieldDescriptor from "classCheckPrivateStaticFieldDescriptor";
  export default function _classStaticPrivateFieldDestructureSet(receiver, classConstructor, descriptor) {
    classCheckPrivateStaticAccess(receiver, classConstructor);
    classCheckPrivateStaticFieldDescriptor(descriptor, "set");
    return classApplyDescriptorDestructureSet(receiver, descriptor);
  }
`, helpers.classCheckPrivateStaticAccess = helper("7.13.10")`
  export default function _classCheckPrivateStaticAccess(receiver, classConstructor) {
    if (receiver !== classConstructor) {
      throw new TypeError("Private static access of wrong provenance");
    }
  }
`, helpers.classCheckPrivateStaticFieldDescriptor = helper("7.13.10")`
  export default function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {
    if (descriptor === undefined) {
      throw new TypeError("attempted to " + action + " private static field before its declaration");
    }
  }
`, helpers.decorate = helper("7.1.5")`
  import toArray from "toArray";
  import toPropertyKey from "toPropertyKey";

  // These comments are stripped by @babel/template
  /*::
  type PropertyDescriptor =
    | {
        value: any,
        writable: boolean,
        configurable: boolean,
        enumerable: boolean,
      }
    | {
        get?: () => any,
        set?: (v: any) => void,
        configurable: boolean,
        enumerable: boolean,
      };

  type FieldDescriptor ={
    writable: boolean,
    configurable: boolean,
    enumerable: boolean,
  };

  type Placement = "static" | "prototype" | "own";
  type Key = string | symbol; // PrivateName is not supported yet.

  type ElementDescriptor =
    | {
        kind: "method",
        key: Key,
        placement: Placement,
        descriptor: PropertyDescriptor
      }
    | {
        kind: "field",
        key: Key,
        placement: Placement,
        descriptor: FieldDescriptor,
        initializer?: () => any,
      };

  // This is exposed to the user code
  type ElementObjectInput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
  };

  // This is exposed to the user code
  type ElementObjectOutput = ElementDescriptor & {
    [@@toStringTag]?: "Descriptor"
    extras?: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  // This is exposed to the user code
  type ClassObject = {
    [@@toStringTag]?: "Descriptor",
    kind: "class",
    elements: ElementDescriptor[],
  };

  type ElementDecorator = (descriptor: ElementObjectInput) => ?ElementObjectOutput;
  type ClassDecorator = (descriptor: ClassObject) => ?ClassObject;
  type ClassFinisher = <A, B>(cl: Class<A>) => Class<B>;

  // Only used by Babel in the transform output, not part of the spec.
  type ElementDefinition =
    | {
        kind: "method",
        value: any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
      }
    | {
        kind: "field",
        value: () => any,
        key: Key,
        static?: boolean,
        decorators?: ElementDecorator[],
    };

  declare function ClassFactory<C>(initialize: (instance: C) => void): {
    F: Class<C>,
    d: ElementDefinition[]
  }

  */

  /*::
  // Various combinations with/without extras and with one or many finishers

  type ElementFinisherExtras = {
    element: ElementDescriptor,
    finisher?: ClassFinisher,
    extras?: ElementDescriptor[],
  };

  type ElementFinishersExtras = {
    element: ElementDescriptor,
    finishers: ClassFinisher[],
    extras: ElementDescriptor[],
  };

  type ElementsFinisher = {
    elements: ElementDescriptor[],
    finisher?: ClassFinisher,
  };

  type ElementsFinishers = {
    elements: ElementDescriptor[],
    finishers: ClassFinisher[],
  };

  */

  /*::

  type Placements = {
    static: Key[],
    prototype: Key[],
    own: Key[],
  };

  */

  // ClassDefinitionEvaluation (Steps 26-*)
  export default function _decorate(
    decorators /*: ClassDecorator[] */,
    factory /*: ClassFactory */,
    superClass /*: ?Class<*> */,
    mixins /*: ?Array<Function> */,
  ) /*: Class<*> */ {
    var api = _getDecoratorsApi();
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        api = mixins[i](api);
      }
    }

    var r = factory(function initialize(O) {
      api.initializeInstanceElements(O, decorated.elements);
    }, superClass);
    var decorated = api.decorateClass(
      _coalesceClassElements(r.d.map(_createElementDescriptor)),
      decorators,
    );

    api.initializeClassElements(r.F, decorated.elements);

    return api.runClassFinishers(r.F, decorated.finishers);
  }

  function _getDecoratorsApi() {
    _getDecoratorsApi = function() {
      return api;
    };

    var api = {
      elementsDefinitionOrder: [["method"], ["field"]],

      // InitializeInstanceElements
      initializeInstanceElements: function(
        /*::<C>*/ O /*: C */,
        elements /*: ElementDescriptor[] */,
      ) {
        ["method", "field"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            if (element.kind === kind && element.placement === "own") {
              this.defineClassElement(O, element);
            }
          }, this);
        }, this);
      },

      // InitializeClassElements
      initializeClassElements: function(
        /*::<C>*/ F /*: Class<C> */,
        elements /*: ElementDescriptor[] */,
      ) {
        var proto = F.prototype;

        ["method", "field"].forEach(function(kind) {
          elements.forEach(function(element /*: ElementDescriptor */) {
            var placement = element.placement;
            if (
              element.kind === kind &&
              (placement === "static" || placement === "prototype")
            ) {
              var receiver = placement === "static" ? F : proto;
              this.defineClassElement(receiver, element);
            }
          }, this);
        }, this);
      },

      // DefineClassElement
      defineClassElement: function(
        /*::<C>*/ receiver /*: C | Class<C> */,
        element /*: ElementDescriptor */,
      ) {
        var descriptor /*: PropertyDescriptor */ = element.descriptor;
        if (element.kind === "field") {
          var initializer = element.initializer;
          descriptor = {
            enumerable: descriptor.enumerable,
            writable: descriptor.writable,
            configurable: descriptor.configurable,
            value: initializer === void 0 ? void 0 : initializer.call(receiver),
          };
        }
        Object.defineProperty(receiver, element.key, descriptor);
      },

      // DecorateClass
      decorateClass: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var newElements /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];
        var placements /*: Placements */ = {
          static: [],
          prototype: [],
          own: [],
        };

        elements.forEach(function(element /*: ElementDescriptor */) {
          this.addElementPlacement(element, placements);
        }, this);

        elements.forEach(function(element /*: ElementDescriptor */) {
          if (!_hasDecorators(element)) return newElements.push(element);

          var elementFinishersExtras /*: ElementFinishersExtras */ = this.decorateElement(
            element,
            placements,
          );
          newElements.push(elementFinishersExtras.element);
          newElements.push.apply(newElements, elementFinishersExtras.extras);
          finishers.push.apply(finishers, elementFinishersExtras.finishers);
        }, this);

        if (!decorators) {
          return { elements: newElements, finishers: finishers };
        }

        var result /*: ElementsFinishers */ = this.decorateConstructor(
          newElements,
          decorators,
        );
        finishers.push.apply(finishers, result.finishers);
        result.finishers = finishers;

        return result;
      },

      // AddElementPlacement
      addElementPlacement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
        silent /*: boolean */,
      ) {
        var keys = placements[element.placement];
        if (!silent && keys.indexOf(element.key) !== -1) {
          throw new TypeError("Duplicated element (" + element.key + ")");
        }
        keys.push(element.key);
      },

      // DecorateElement
      decorateElement: function(
        element /*: ElementDescriptor */,
        placements /*: Placements */,
      ) /*: ElementFinishersExtras */ {
        var extras /*: ElementDescriptor[] */ = [];
        var finishers /*: ClassFinisher[] */ = [];

        for (
          var decorators = element.decorators, i = decorators.length - 1;
          i >= 0;
          i--
        ) {
          // (inlined) RemoveElementPlacement
          var keys = placements[element.placement];
          keys.splice(keys.indexOf(element.key), 1);

          var elementObject /*: ElementObjectInput */ = this.fromElementDescriptor(
            element,
          );
          var elementFinisherExtras /*: ElementFinisherExtras */ = this.toElementFinisherExtras(
            (0, decorators[i])(elementObject) /*: ElementObjectOutput */ ||
              elementObject,
          );

          element = elementFinisherExtras.element;
          this.addElementPlacement(element, placements);

          if (elementFinisherExtras.finisher) {
            finishers.push(elementFinisherExtras.finisher);
          }

          var newExtras /*: ElementDescriptor[] | void */ =
            elementFinisherExtras.extras;
          if (newExtras) {
            for (var j = 0; j < newExtras.length; j++) {
              this.addElementPlacement(newExtras[j], placements);
            }
            extras.push.apply(extras, newExtras);
          }
        }

        return { element: element, finishers: finishers, extras: extras };
      },

      // DecorateConstructor
      decorateConstructor: function(
        elements /*: ElementDescriptor[] */,
        decorators /*: ClassDecorator[] */,
      ) /*: ElementsFinishers */ {
        var finishers /*: ClassFinisher[] */ = [];

        for (var i = decorators.length - 1; i >= 0; i--) {
          var obj /*: ClassObject */ = this.fromClassDescriptor(elements);
          var elementsAndFinisher /*: ElementsFinisher */ = this.toClassDescriptor(
            (0, decorators[i])(obj) /*: ClassObject */ || obj,
          );

          if (elementsAndFinisher.finisher !== undefined) {
            finishers.push(elementsAndFinisher.finisher);
          }

          if (elementsAndFinisher.elements !== undefined) {
            elements = elementsAndFinisher.elements;

            for (var j = 0; j < elements.length - 1; j++) {
              for (var k = j + 1; k < elements.length; k++) {
                if (
                  elements[j].key === elements[k].key &&
                  elements[j].placement === elements[k].placement
                ) {
                  throw new TypeError(
                    "Duplicated element (" + elements[j].key + ")",
                  );
                }
              }
            }
          }
        }

        return { elements: elements, finishers: finishers };
      },

      // FromElementDescriptor
      fromElementDescriptor: function(
        element /*: ElementDescriptor */,
      ) /*: ElementObject */ {
        var obj /*: ElementObject */ = {
          kind: element.kind,
          key: element.key,
          placement: element.placement,
          descriptor: element.descriptor,
        };

        var desc = {
          value: "Descriptor",
          configurable: true,
        };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        if (element.kind === "field") obj.initializer = element.initializer;

        return obj;
      },

      // ToElementDescriptors
      toElementDescriptors: function(
        elementObjects /*: ElementObject[] */,
      ) /*: ElementDescriptor[] */ {
        if (elementObjects === undefined) return;
        return toArray(elementObjects).map(function(elementObject) {
          var element = this.toElementDescriptor(elementObject);
          this.disallowProperty(elementObject, "finisher", "An element descriptor");
          this.disallowProperty(elementObject, "extras", "An element descriptor");
          return element;
        }, this);
      },

      // ToElementDescriptor
      toElementDescriptor: function(
        elementObject /*: ElementObject */,
      ) /*: ElementDescriptor */ {
        var kind = String(elementObject.kind);
        if (kind !== "method" && kind !== "field") {
          throw new TypeError(
            'An element descriptor\\'s .kind property must be either "method" or' +
              ' "field", but a decorator created an element descriptor with' +
              ' .kind "' +
              kind +
              '"',
          );
        }

        var key = toPropertyKey(elementObject.key);

        var placement = String(elementObject.placement);
        if (
          placement !== "static" &&
          placement !== "prototype" &&
          placement !== "own"
        ) {
          throw new TypeError(
            'An element descriptor\\'s .placement property must be one of "static",' +
              ' "prototype" or "own", but a decorator created an element descriptor' +
              ' with .placement "' +
              placement +
              '"',
          );
        }

        var descriptor /*: PropertyDescriptor */ = elementObject.descriptor;

        this.disallowProperty(elementObject, "elements", "An element descriptor");

        var element /*: ElementDescriptor */ = {
          kind: kind,
          key: key,
          placement: placement,
          descriptor: Object.assign({}, descriptor),
        };

        if (kind !== "field") {
          this.disallowProperty(elementObject, "initializer", "A method descriptor");
        } else {
          this.disallowProperty(
            descriptor,
            "get",
            "The property descriptor of a field descriptor",
          );
          this.disallowProperty(
            descriptor,
            "set",
            "The property descriptor of a field descriptor",
          );
          this.disallowProperty(
            descriptor,
            "value",
            "The property descriptor of a field descriptor",
          );

          element.initializer = elementObject.initializer;
        }

        return element;
      },

      toElementFinisherExtras: function(
        elementObject /*: ElementObject */,
      ) /*: ElementFinisherExtras */ {
        var element /*: ElementDescriptor */ = this.toElementDescriptor(
          elementObject,
        );
        var finisher /*: ClassFinisher */ = _optionalCallableProperty(
          elementObject,
          "finisher",
        );
        var extras /*: ElementDescriptors[] */ = this.toElementDescriptors(
          elementObject.extras,
        );

        return { element: element, finisher: finisher, extras: extras };
      },

      // FromClassDescriptor
      fromClassDescriptor: function(
        elements /*: ElementDescriptor[] */,
      ) /*: ClassObject */ {
        var obj = {
          kind: "class",
          elements: elements.map(this.fromElementDescriptor, this),
        };

        var desc = { value: "Descriptor", configurable: true };
        Object.defineProperty(obj, Symbol.toStringTag, desc);

        return obj;
      },

      // ToClassDescriptor
      toClassDescriptor: function(
        obj /*: ClassObject */,
      ) /*: ElementsFinisher */ {
        var kind = String(obj.kind);
        if (kind !== "class") {
          throw new TypeError(
            'A class descriptor\\'s .kind property must be "class", but a decorator' +
              ' created a class descriptor with .kind "' +
              kind +
              '"',
          );
        }

        this.disallowProperty(obj, "key", "A class descriptor");
        this.disallowProperty(obj, "placement", "A class descriptor");
        this.disallowProperty(obj, "descriptor", "A class descriptor");
        this.disallowProperty(obj, "initializer", "A class descriptor");
        this.disallowProperty(obj, "extras", "A class descriptor");

        var finisher = _optionalCallableProperty(obj, "finisher");
        var elements = this.toElementDescriptors(obj.elements);

        return { elements: elements, finisher: finisher };
      },

      // RunClassFinishers
      runClassFinishers: function(
        constructor /*: Class<*> */,
        finishers /*: ClassFinisher[] */,
      ) /*: Class<*> */ {
        for (var i = 0; i < finishers.length; i++) {
          var newConstructor /*: ?Class<*> */ = (0, finishers[i])(constructor);
          if (newConstructor !== undefined) {
            // NOTE: This should check if IsConstructor(newConstructor) is false.
            if (typeof newConstructor !== "function") {
              throw new TypeError("Finishers must return a constructor.");
            }
            constructor = newConstructor;
          }
        }
        return constructor;
      },

      disallowProperty: function(obj, name, objectType) {
        if (obj[name] !== undefined) {
          throw new TypeError(objectType + " can't have a ." + name + " property.");
        }
      }
    };

    return api;
  }

  // ClassElementEvaluation
  function _createElementDescriptor(
    def /*: ElementDefinition */,
  ) /*: ElementDescriptor */ {
    var key = toPropertyKey(def.key);

    var descriptor /*: PropertyDescriptor */;
    if (def.kind === "method") {
      descriptor = {
        value: def.value,
        writable: true,
        configurable: true,
        enumerable: false,
      };
    } else if (def.kind === "get") {
      descriptor = { get: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "set") {
      descriptor = { set: def.value, configurable: true, enumerable: false };
    } else if (def.kind === "field") {
      descriptor = { configurable: true, writable: true, enumerable: true };
    }

    var element /*: ElementDescriptor */ = {
      kind: def.kind === "field" ? "field" : "method",
      key: key,
      placement: def.static
        ? "static"
        : def.kind === "field"
        ? "own"
        : "prototype",
      descriptor: descriptor,
    };
    if (def.decorators) element.decorators = def.decorators;
    if (def.kind === "field") element.initializer = def.value;

    return element;
  }

  // CoalesceGetterSetter
  function _coalesceGetterSetter(
    element /*: ElementDescriptor */,
    other /*: ElementDescriptor */,
  ) {
    if (element.descriptor.get !== undefined) {
      other.descriptor.get = element.descriptor.get;
    } else {
      other.descriptor.set = element.descriptor.set;
    }
  }

  // CoalesceClassElements
  function _coalesceClassElements(
    elements /*: ElementDescriptor[] */,
  ) /*: ElementDescriptor[] */ {
    var newElements /*: ElementDescriptor[] */ = [];

    var isSameElement = function(
      other /*: ElementDescriptor */,
    ) /*: boolean */ {
      return (
        other.kind === "method" &&
        other.key === element.key &&
        other.placement === element.placement
      );
    };

    for (var i = 0; i < elements.length; i++) {
      var element /*: ElementDescriptor */ = elements[i];
      var other /*: ElementDescriptor */;

      if (
        element.kind === "method" &&
        (other = newElements.find(isSameElement))
      ) {
        if (
          _isDataDescriptor(element.descriptor) ||
          _isDataDescriptor(other.descriptor)
        ) {
          if (_hasDecorators(element) || _hasDecorators(other)) {
            throw new ReferenceError(
              "Duplicated methods (" + element.key + ") can't be decorated.",
            );
          }
          other.descriptor = element.descriptor;
        } else {
          if (_hasDecorators(element)) {
            if (_hasDecorators(other)) {
              throw new ReferenceError(
                "Decorators can't be placed on different accessors with for " +
                  "the same property (" +
                  element.key +
                  ").",
              );
            }
            other.decorators = element.decorators;
          }
          _coalesceGetterSetter(element, other);
        }
      } else {
        newElements.push(element);
      }
    }

    return newElements;
  }

  function _hasDecorators(element /*: ElementDescriptor */) /*: boolean */ {
    return element.decorators && element.decorators.length;
  }

  function _isDataDescriptor(desc /*: PropertyDescriptor */) /*: boolean */ {
    return (
      desc !== undefined &&
      !(desc.value === undefined && desc.writable === undefined)
    );
  }

  function _optionalCallableProperty /*::<T>*/(
    obj /*: T */,
    name /*: $Keys<T> */,
  ) /*: ?Function */ {
    var value = obj[name];
    if (value !== undefined && typeof value !== "function") {
      throw new TypeError("Expected '" + name + "' to be a function");
    }
    return value;
  }

`, helpers.classPrivateMethodGet = helper("7.1.6")`
  export default function _classPrivateMethodGet(receiver, privateSet, fn) {
    if (!privateSet.has(receiver)) {
      throw new TypeError("attempted to get private field on non-instance");
    }
    return fn;
  }
`, helpers.checkPrivateRedeclaration = helper("7.14.1")`
  export default function _checkPrivateRedeclaration(obj, privateCollection) {
    if (privateCollection.has(obj)) {
      throw new TypeError("Cannot initialize the same private elements twice on an object");
    }
  }
`, helpers.classPrivateFieldInitSpec = helper("7.14.1")`
  import checkPrivateRedeclaration from "checkPrivateRedeclaration";

  export default function _classPrivateFieldInitSpec(obj, privateMap, value) {
    checkPrivateRedeclaration(obj, privateMap);
    privateMap.set(obj, value);
  }
`, helpers.classPrivateMethodInitSpec = helper("7.14.1")`
  import checkPrivateRedeclaration from "checkPrivateRedeclaration";

  export default function _classPrivateMethodInitSpec(obj, privateSet) {
    checkPrivateRedeclaration(obj, privateSet);
    privateSet.add(obj);
  }
`, helpers.classPrivateMethodSet = helper("7.1.6")`
    export default function _classPrivateMethodSet() {
      throw new TypeError("attempted to reassign private method");
    }
  `, helpers.identity = helper("7.17.0")`
  export default function _identity(x) {
    return x;
  }
`;
      }, "./node_modules/.pnpm/@babel+helpers@7.19.0/node_modules/@babel/helpers/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0, exports2.ensure = function(name, newFileClass) {
          FileClass || (FileClass = newFileClass), loadHelper(name);
        }, exports2.get = get, exports2.getDependencies = function(name) {
          return loadHelper(name).getDependencies();
        }, exports2.list = void 0, exports2.minVersion = function(name) {
          return loadHelper(name).minVersion;
        };
        var _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _helpers = __webpack_require__2("./node_modules/.pnpm/@babel+helpers@7.19.0/node_modules/@babel/helpers/lib/helpers.js");
        const { assignmentExpression, cloneNode, expressionStatement, file, identifier } = _t;
        function makePath(path3) {
          const parts = [];
          for (; path3.parentPath; path3 = path3.parentPath)
            parts.push(path3.key), path3.inList && parts.push(path3.listKey);
          return parts.reverse().join(".");
        }
        let FileClass;
        function getHelperMetadata(file2) {
          const globals = /* @__PURE__ */ new Set(), localBindingNames = /* @__PURE__ */ new Set(), dependencies = /* @__PURE__ */ new Map();
          let exportName, exportPath;
          const exportBindingAssignments = [], importPaths = [], importBindingsReferences = [], dependencyVisitor = { ImportDeclaration(child) {
            const name = child.node.source.value;
            if (!_helpers.default[name])
              throw child.buildCodeFrameError(`Unknown helper ${name}`);
            if (1 !== child.get("specifiers").length || !child.get("specifiers.0").isImportDefaultSpecifier())
              throw child.buildCodeFrameError("Helpers can only import a default value");
            const bindingIdentifier = child.node.specifiers[0].local;
            dependencies.set(bindingIdentifier, name), importPaths.push(makePath(child));
          }, ExportDefaultDeclaration(child) {
            const decl = child.get("declaration");
            if (!decl.isFunctionDeclaration() || !decl.node.id)
              throw decl.buildCodeFrameError("Helpers can only export named function declarations");
            exportName = decl.node.id.name, exportPath = makePath(child);
          }, ExportAllDeclaration(child) {
            throw child.buildCodeFrameError("Helpers can only export default");
          }, ExportNamedDeclaration(child) {
            throw child.buildCodeFrameError("Helpers can only export default");
          }, Statement(child) {
            child.isModuleDeclaration() || child.skip();
          } }, referenceVisitor = { Program(path3) {
            const bindings = path3.scope.getAllBindings();
            Object.keys(bindings).forEach((name) => {
              name !== exportName && (dependencies.has(bindings[name].identifier) || localBindingNames.add(name));
            });
          }, ReferencedIdentifier(child) {
            const name = child.node.name, binding = child.scope.getBinding(name);
            binding ? dependencies.has(binding.identifier) && importBindingsReferences.push(makePath(child)) : globals.add(name);
          }, AssignmentExpression(child) {
            const left = child.get("left");
            if (!(exportName in left.getBindingIdentifiers()))
              return;
            if (!left.isIdentifier())
              throw left.buildCodeFrameError("Only simple assignments to exports are allowed in helpers");
            const binding = child.scope.getBinding(exportName);
            null != binding && binding.scope.path.isProgram() && exportBindingAssignments.push(makePath(child));
          } };
          if ((0, _traverse.default)(file2.ast, dependencyVisitor, file2.scope), (0, _traverse.default)(file2.ast, referenceVisitor, file2.scope), !exportPath)
            throw new Error("Helpers must have a default export.");
          return exportBindingAssignments.reverse(), { globals: Array.from(globals), localBindingNames: Array.from(localBindingNames), dependencies, exportBindingAssignments, exportPath, exportName, importBindingsReferences, importPaths };
        }
        const helperData = /* @__PURE__ */ Object.create(null);
        function loadHelper(name) {
          if (!helperData[name]) {
            const helper = _helpers.default[name];
            if (!helper)
              throw Object.assign(new ReferenceError(`Unknown helper ${name}`), { code: "BABEL_HELPER_UNKNOWN", helper: name });
            const fn = () => {
              if (!FileClass) {
                const fakeFile = { ast: file(helper.ast()), path: null };
                return (0, _traverse.default)(fakeFile.ast, { Program: (path3) => (fakeFile.path = path3).stop() }), fakeFile;
              }
              return new FileClass({ filename: `babel-helper://${name}` }, { ast: file(helper.ast()), code: "[internal Babel helper code]", inputMap: null });
            };
            let metadata = null;
            helperData[name] = { minVersion: helper.minVersion, build(getDependency, id, localBindings) {
              const file2 = fn();
              return metadata || (metadata = getHelperMetadata(file2)), function(file3, metadata2, id2, localBindings2, getDependency2) {
                if (localBindings2 && !id2)
                  throw new Error("Unexpected local bindings for module-based helpers.");
                if (!id2)
                  return;
                const { localBindingNames, dependencies, exportBindingAssignments, exportPath, exportName, importBindingsReferences, importPaths } = metadata2, dependenciesRefs = {};
                dependencies.forEach((name2, id3) => {
                  dependenciesRefs[id3.name] = "function" == typeof getDependency2 && getDependency2(name2) || id3;
                });
                const toRename = {}, bindings = new Set(localBindings2 || []);
                localBindingNames.forEach((name2) => {
                  let newName = name2;
                  for (; bindings.has(newName); )
                    newName = "_" + newName;
                  newName !== name2 && (toRename[name2] = newName);
                }), "Identifier" === id2.type && exportName !== id2.name && (toRename[exportName] = id2.name);
                const { path: path3 } = file3, exp = path3.get(exportPath), imps = importPaths.map((p) => path3.get(p)), impsBindingRefs = importBindingsReferences.map((p) => path3.get(p)), decl = exp.get("declaration");
                if ("Identifier" === id2.type)
                  exp.replaceWith(decl);
                else {
                  if ("MemberExpression" !== id2.type)
                    throw new Error("Unexpected helper format.");
                  exportBindingAssignments.forEach((assignPath) => {
                    const assign = path3.get(assignPath);
                    assign.replaceWith(assignmentExpression("=", id2, assign.node));
                  }), exp.replaceWith(decl), path3.pushContainer("body", expressionStatement(assignmentExpression("=", id2, identifier(exportName))));
                }
                Object.keys(toRename).forEach((name2) => {
                  path3.scope.rename(name2, toRename[name2]);
                });
                for (const path4 of imps)
                  path4.remove();
                for (const path4 of impsBindingRefs) {
                  const node = cloneNode(dependenciesRefs[path4.node.name]);
                  path4.replaceWith(node);
                }
              }(file2, metadata, id, localBindings, getDependency), { nodes: file2.ast.program.body, globals: metadata.globals };
            }, getDependencies: () => (metadata || (metadata = getHelperMetadata(fn())), Array.from(metadata.dependencies.values())) };
          }
          return helperData[name];
        }
        function get(name, getDependency, id, localBindings) {
          return loadHelper(name).build(getDependency, id, localBindings);
        }
        const list = Object.keys(_helpers.default).map((name) => name.replace(/^_/, ""));
        exports2.list = list;
        var _default = get;
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+parser@7.18.13/node_modules/@babel/parser/lib/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (null == source)
            return {};
          var key, i, target = {}, sourceKeys = Object.keys(source);
          for (i = 0; i < sourceKeys.length; i++)
            key = sourceKeys[i], excluded.indexOf(key) >= 0 || (target[key] = source[key]);
          return target;
        }
        Object.defineProperty(exports2, "__esModule", { value: true });
        class Position3 {
          constructor(line, col, index2) {
            this.line = void 0, this.column = void 0, this.index = void 0, this.line = line, this.column = col, this.index = index2;
          }
        }
        class SourceLocation3 {
          constructor(start, end) {
            this.start = void 0, this.end = void 0, this.filename = void 0, this.identifierName = void 0, this.start = start, this.end = end;
          }
        }
        function createPositionWithColumnOffset(position, columnOffset) {
          const { line, column, index: index2 } = position;
          return new Position3(line, column + columnOffset, index2 + columnOffset);
        }
        var ParseErrorCode_SyntaxError = "BABEL_PARSER_SYNTAX_ERROR", ParseErrorCode_SourceTypeModuleError = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
        const reflect = (keys, last = keys.length - 1) => ({ get() {
          return keys.reduce((object, key) => object[key], this);
        }, set(value) {
          keys.reduce((item, key, i) => i === last ? item[key] = value : item[key], this);
        } });
        var ModuleErrors = { ImportMetaOutsideModule: { message: `import.meta may appear only with 'sourceType: "module"'`, code: ParseErrorCode_SourceTypeModuleError }, ImportOutsideModule: { message: `'import' and 'export' may appear only with 'sourceType: "module"'`, code: ParseErrorCode_SourceTypeModuleError } };
        const NodeDescriptions = { ArrayPattern: "array destructuring pattern", AssignmentExpression: "assignment expression", AssignmentPattern: "assignment expression", ArrowFunctionExpression: "arrow function expression", ConditionalExpression: "conditional expression", CatchClause: "catch clause", ForOfStatement: "for-of statement", ForInStatement: "for-in statement", ForStatement: "for-loop", FormalParameters: "function parameter list", Identifier: "identifier", ImportSpecifier: "import specifier", ImportDefaultSpecifier: "import default specifier", ImportNamespaceSpecifier: "import namespace specifier", ObjectPattern: "object destructuring pattern", ParenthesizedExpression: "parenthesized expression", RestElement: "rest element", UpdateExpression: { true: "prefix operation", false: "postfix operation" }, VariableDeclarator: "variable declaration", YieldExpression: "yield expression" }, toNodeDescription = ({ type, prefix }) => "UpdateExpression" === type ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];
        var StandardErrors = { AccessorIsGenerator: ({ kind }) => `A ${kind}ter cannot be a generator.`, ArgumentsInClass: "'arguments' is only allowed in functions and class methods.", AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.", AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.", AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.", AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.", AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncFunction: "'await' is only allowed within async functions.", BadGetterArity: "A 'get' accesor must not have any formal parameters.", BadSetterArity: "A 'set' accesor must have exactly one formal parameter.", BadSetterRestParameter: "A 'set' accesor function argument must not be a rest parameter.", ConstructorClassField: "Classes may not have a field named 'constructor'.", ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.", ConstructorIsAccessor: "Class constructor may not be an accessor.", ConstructorIsAsync: "Constructor can't be an async function.", ConstructorIsGenerator: "Constructor can't be a generator.", DeclarationMissingInitializer: ({ kind }) => `Missing initializer in ${kind} declaration.`, DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.", DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?", DecoratorExportClass: "Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.", DecoratorSemicolon: "Decorators must not be followed by a semicolon.", DecoratorStaticBlock: "Decorators can't be used with a static block.", DeletePrivateField: "Deleting a private field is not allowed.", DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.", DuplicateConstructor: "Duplicate constructor in the same class.", DuplicateDefaultExport: "Only one default export allowed per module.", DuplicateExport: ({ exportName }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`, DuplicateProto: "Redefinition of __proto__ property.", DuplicateRegExpFlags: "Duplicate regular expression flag.", ElementAfterRest: "Rest element must be last element.", EscapedCharNotAnIdentifier: "Invalid Unicode escape.", ExportBindingIsString: ({ localName, exportName }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`, ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.", ForInOfLoopInitializer: ({ type }) => `'${"ForInStatement" === type ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`, ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.", ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.", GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.", IllegalBreakContinue: ({ type }) => `Unsyntactic ${"BreakStatement" === type ? "break" : "continue"}.`, IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.", IllegalReturn: "'return' outside of function.", ImportBindingIsString: ({ importName: importName2 }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${importName2}" as foo }\`?`, ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.", ImportCallArity: ({ maxArgumentCount }) => `\`import()\` requires exactly ${1 === maxArgumentCount ? "one argument" : "one or two arguments"}.`, ImportCallNotNewExpression: "Cannot use new with import(...).", ImportCallSpreadArgument: "`...` is not allowed in `import()`.", ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.", IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.", InvalidBigIntLiteral: "Invalid BigIntLiteral.", InvalidCodePoint: "Code point out of bounds.", InvalidCoverInitializedName: "Invalid shorthand property initializer.", InvalidDecimal: "Invalid decimal.", InvalidDigit: ({ radix }) => `Expected number in radix ${radix}.`, InvalidEscapeSequence: "Bad character escape sequence.", InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.", InvalidEscapedReservedWord: ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`, InvalidIdentifier: ({ identifierName }) => `Invalid identifier ${identifierName}.`, InvalidLhs: ({ ancestor }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`, InvalidLhsBinding: ({ ancestor }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`, InvalidNumber: "Invalid number.", InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.", InvalidOrUnexpectedToken: ({ unexpected }) => `Unexpected character '${unexpected}'.`, InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.", InvalidPrivateFieldResolution: ({ identifierName }) => `Private name #${identifierName} is not defined.`, InvalidPropertyBindingPattern: "Binding member expression.", InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.", InvalidRestAssignmentPattern: "Invalid rest operator's argument.", LabelRedeclaration: ({ labelName }) => `Label '${labelName}' is already declared.`, LetInLexicalBinding: "'let' is not allowed to be used as a name in 'let' or 'const' declarations.", LineTerminatorBeforeArrow: "No line break is allowed before '=>'.", MalformedRegExpFlags: "Invalid regular expression flag.", MissingClassName: "A class name is required.", MissingEqInAssignment: "Only '=' operator can be used for specifying default value.", MissingSemicolon: "Missing semicolon.", MissingPlugin: ({ missingPlugin }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`, MissingOneOfPlugins: ({ missingPlugin }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`, MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.", MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.", ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.", ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.", ModuleAttributesWithDuplicateKeys: ({ key }) => `Duplicate key "${key}" is not allowed in module attributes.`, ModuleExportNameHasLoneSurrogate: ({ surrogateCharCode }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`, ModuleExportUndefined: ({ localName }) => `Export '${localName}' is not defined.`, MultipleDefaultsInSwitch: "Multiple default clauses.", NewlineAfterThrow: "Illegal newline after throw.", NoCatchOrFinally: "Missing catch or finally clause.", NumberIdentifier: "Identifier directly after number.", NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.", ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.", OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.", OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.", OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.", ParamDupe: "Argument name clash.", PatternHasAccessor: "Object pattern can't contain getter or setter.", PatternHasMethod: "Object pattern can't contain methods.", PrivateInExpectedIn: ({ identifierName }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`, PrivateNameRedeclaration: ({ identifierName }) => `Duplicate private name #${identifierName}.`, RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", RecordNoProto: "'__proto__' is not allowed in Record expressions.", RestTrailingComma: "Unexpected trailing comma after rest element.", SloppyFunction: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.", StaticPrototype: "Classes may not have static property named prototype.", SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?", SuperPrivateField: "Private fields can't be accessed on super.", TrailingDecorator: "Decorators must be attached to a class element.", TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.", UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.', UnexpectedDigitAfterHash: "Unexpected digit after hash token.", UnexpectedImportExport: "'import' and 'export' may only appear at the top level.", UnexpectedKeyword: ({ keyword }) => `Unexpected keyword '${keyword}'.`, UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.", UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.", UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.", UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.", UnexpectedPrivateField: "Unexpected private name.", UnexpectedReservedWord: ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`, UnexpectedSuper: "'super' is only allowed in object methods and classes.", UnexpectedToken: ({ expected, unexpected }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`, UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.", UnsupportedBind: "Binding should be performed on object property.", UnsupportedDecoratorExport: "A decorated export must export a class declaration.", UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.", UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.", UnsupportedMetaProperty: ({ target, onlyValidPropertyName }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`, UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.", UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.", UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).", UnterminatedComment: "Unterminated comment.", UnterminatedRegExp: "Unterminated regular expression.", UnterminatedString: "Unterminated string constant.", UnterminatedTemplate: "Unterminated template.", VarRedeclaration: ({ identifierName }) => `Identifier '${identifierName}' has already been declared.`, YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.", YieldInParameter: "Yield expression is not allowed in formal parameters.", ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0." };
        const UnparenthesizedPipeBodyDescriptions = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
        var PipelineOperatorErrors = { PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.", PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.', PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.", PipeTopicUnconfiguredToken: ({ token }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`, PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.", PipeUnparenthesizedBody: ({ type }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({ type })}; please wrap it in parentheses.`, PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.', PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.", PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.", PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.", PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.", PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.' };
        const _excluded$1 = ["toMessage"], _excluded2$1 = ["message"];
        function toParseErrorConstructor(_ref) {
          let { toMessage } = _ref, properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);
          return function constructor({ loc, details }) {
            return ((constructor2, properties2, descriptors) => Object.keys(descriptors).map((key) => [key, descriptors[key]]).filter(([, descriptor]) => !!descriptor).map(([key, descriptor]) => [key, "function" == typeof descriptor ? { value: descriptor, enumerable: false } : "string" == typeof descriptor.reflect ? Object.assign({}, descriptor, reflect(descriptor.reflect.split("."))) : descriptor]).reduce((instance, [key, descriptor]) => Object.defineProperty(instance, key, Object.assign({ configurable: true }, descriptor)), Object.assign(new constructor2(), properties2)))(SyntaxError, Object.assign({}, properties, { loc }), { clone(overrides = {}) {
              const loc2 = overrides.loc || {};
              return constructor({ loc: new Position3("line" in loc2 ? loc2.line : this.loc.line, "column" in loc2 ? loc2.column : this.loc.column, "index" in loc2 ? loc2.index : this.loc.index), details: Object.assign({}, this.details, overrides.details) });
            }, details: { value: details, enumerable: false }, message: { get() {
              return `${toMessage(this.details)} (${this.loc.line}:${this.loc.column})`;
            }, set(value) {
              Object.defineProperty(this, "message", { value });
            } }, pos: { reflect: "loc.index", enumerable: true }, missingPlugin: "missingPlugin" in details && { reflect: "details.missingPlugin", enumerable: true } });
          };
        }
        function ParseErrorEnum(argument, syntaxPlugin) {
          if (Array.isArray(argument))
            return (parseErrorTemplates) => ParseErrorEnum(parseErrorTemplates, argument[0]);
          const ParseErrorConstructors = {};
          for (const reasonCode of Object.keys(argument)) {
            const template = argument[reasonCode], _ref2 = "string" == typeof template ? { message: () => template } : "function" == typeof template ? { message: template } : template, { message } = _ref2, rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1), toMessage = "string" == typeof message ? () => message : message;
            ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({ code: ParseErrorCode_SyntaxError, reasonCode, toMessage }, syntaxPlugin ? { syntaxPlugin } : {}, rest));
          }
          return ParseErrorConstructors;
        }
        const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum({ StrictDelete: "Deleting local variable in strict mode.", StrictEvalArguments: ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`, StrictEvalArgumentsBinding: ({ bindingName }) => `Binding '${bindingName}' in strict mode.`, StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.", StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.", StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.", StrictWith: "'with' in strict mode." }), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors)), { defineProperty } = Object, toUnenumerable = (object, key) => defineProperty(object, key, { enumerable: false, value: object[key] });
        function toESTreeLocation(node) {
          return node.loc.start && toUnenumerable(node.loc.start, "index"), node.loc.end && toUnenumerable(node.loc.end, "index"), node;
        }
        class TokContext3 {
          constructor(token, preserveSpace) {
            this.token = void 0, this.preserveSpace = void 0, this.token = token, this.preserveSpace = !!preserveSpace;
          }
        }
        const types2 = { brace: new TokContext3("{"), j_oTag: new TokContext3("<tag"), j_cTag: new TokContext3("</tag"), j_expr: new TokContext3("<tag>...</tag>", true) };
        types2.template = new TokContext3("`", true);
        class ExportedTokenType {
          constructor(label, conf = {}) {
            this.label = void 0, this.keyword = void 0, this.beforeExpr = void 0, this.startsExpr = void 0, this.rightAssociative = void 0, this.isLoop = void 0, this.isAssign = void 0, this.prefix = void 0, this.postfix = void 0, this.binop = void 0, this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.rightAssociative = !!conf.rightAssociative, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = null != conf.binop ? conf.binop : null, this.updateContext = null;
          }
        }
        const keywords$12 = /* @__PURE__ */ new Map();
        function createKeyword(name, options = {}) {
          options.keyword = name;
          const token = createToken(name, options);
          return keywords$12.set(name, token), token;
        }
        function createBinop(name, binop2) {
          return createToken(name, { beforeExpr: true, binop: binop2 });
        }
        let tokenTypeCounter = -1;
        const tokenTypes = [], tokenLabels = [], tokenBinops = [], tokenBeforeExprs = [], tokenStartsExprs = [], tokenPrefixes = [];
        function createToken(name, options = {}) {
          var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
          return ++tokenTypeCounter, tokenLabels.push(name), tokenBinops.push(null != (_options$binop = options.binop) ? _options$binop : -1), tokenBeforeExprs.push(null != (_options$beforeExpr = options.beforeExpr) && _options$beforeExpr), tokenStartsExprs.push(null != (_options$startsExpr = options.startsExpr) && _options$startsExpr), tokenPrefixes.push(null != (_options$prefix = options.prefix) && _options$prefix), tokenTypes.push(new ExportedTokenType(name, options)), tokenTypeCounter;
        }
        function createKeywordLike(name, options = {}) {
          var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
          return ++tokenTypeCounter, keywords$12.set(name, tokenTypeCounter), tokenLabels.push(name), tokenBinops.push(null != (_options$binop2 = options.binop) ? _options$binop2 : -1), tokenBeforeExprs.push(null != (_options$beforeExpr2 = options.beforeExpr) && _options$beforeExpr2), tokenStartsExprs.push(null != (_options$startsExpr2 = options.startsExpr) && _options$startsExpr2), tokenPrefixes.push(null != (_options$prefix2 = options.prefix) && _options$prefix2), tokenTypes.push(new ExportedTokenType("name", options)), tokenTypeCounter;
        }
        const tt = { bracketL: createToken("[", { beforeExpr: true, startsExpr: true }), bracketHashL: createToken("#[", { beforeExpr: true, startsExpr: true }), bracketBarL: createToken("[|", { beforeExpr: true, startsExpr: true }), bracketR: createToken("]"), bracketBarR: createToken("|]"), braceL: createToken("{", { beforeExpr: true, startsExpr: true }), braceBarL: createToken("{|", { beforeExpr: true, startsExpr: true }), braceHashL: createToken("#{", { beforeExpr: true, startsExpr: true }), braceR: createToken("}"), braceBarR: createToken("|}"), parenL: createToken("(", { beforeExpr: true, startsExpr: true }), parenR: createToken(")"), comma: createToken(",", { beforeExpr: true }), semi: createToken(";", { beforeExpr: true }), colon: createToken(":", { beforeExpr: true }), doubleColon: createToken("::", { beforeExpr: true }), dot: createToken("."), question: createToken("?", { beforeExpr: true }), questionDot: createToken("?."), arrow: createToken("=>", { beforeExpr: true }), template: createToken("template"), ellipsis: createToken("...", { beforeExpr: true }), backQuote: createToken("`", { startsExpr: true }), dollarBraceL: createToken("${", { beforeExpr: true, startsExpr: true }), templateTail: createToken("...`", { startsExpr: true }), templateNonTail: createToken("...${", { beforeExpr: true, startsExpr: true }), at: createToken("@"), hash: createToken("#", { startsExpr: true }), interpreterDirective: createToken("#!..."), eq: createToken("=", { beforeExpr: true, isAssign: true }), assign: createToken("_=", { beforeExpr: true, isAssign: true }), slashAssign: createToken("_=", { beforeExpr: true, isAssign: true }), xorAssign: createToken("_=", { beforeExpr: true, isAssign: true }), moduloAssign: createToken("_=", { beforeExpr: true, isAssign: true }), incDec: createToken("++/--", { prefix: true, postfix: true, startsExpr: true }), bang: createToken("!", { beforeExpr: true, prefix: true, startsExpr: true }), tilde: createToken("~", { beforeExpr: true, prefix: true, startsExpr: true }), doubleCaret: createToken("^^", { startsExpr: true }), doubleAt: createToken("@@", { startsExpr: true }), pipeline: createBinop("|>", 0), nullishCoalescing: createBinop("??", 1), logicalOR: createBinop("||", 1), logicalAND: createBinop("&&", 2), bitwiseOR: createBinop("|", 3), bitwiseXOR: createBinop("^", 4), bitwiseAND: createBinop("&", 5), equality: createBinop("==/!=/===/!==", 6), lt: createBinop("</>/<=/>=", 7), gt: createBinop("</>/<=/>=", 7), relational: createBinop("</>/<=/>=", 7), bitShift: createBinop("<</>>/>>>", 8), bitShiftL: createBinop("<</>>/>>>", 8), bitShiftR: createBinop("<</>>/>>>", 8), plusMin: createToken("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: createToken("%", { binop: 10, startsExpr: true }), star: createToken("*", { binop: 10 }), slash: createBinop("/", 10), exponent: createToken("**", { beforeExpr: true, binop: 11, rightAssociative: true }), _in: createKeyword("in", { beforeExpr: true, binop: 7 }), _instanceof: createKeyword("instanceof", { beforeExpr: true, binop: 7 }), _break: createKeyword("break"), _case: createKeyword("case", { beforeExpr: true }), _catch: createKeyword("catch"), _continue: createKeyword("continue"), _debugger: createKeyword("debugger"), _default: createKeyword("default", { beforeExpr: true }), _else: createKeyword("else", { beforeExpr: true }), _finally: createKeyword("finally"), _function: createKeyword("function", { startsExpr: true }), _if: createKeyword("if"), _return: createKeyword("return", { beforeExpr: true }), _switch: createKeyword("switch"), _throw: createKeyword("throw", { beforeExpr: true, prefix: true, startsExpr: true }), _try: createKeyword("try"), _var: createKeyword("var"), _const: createKeyword("const"), _with: createKeyword("with"), _new: createKeyword("new", { beforeExpr: true, startsExpr: true }), _this: createKeyword("this", { startsExpr: true }), _super: createKeyword("super", { startsExpr: true }), _class: createKeyword("class", { startsExpr: true }), _extends: createKeyword("extends", { beforeExpr: true }), _export: createKeyword("export"), _import: createKeyword("import", { startsExpr: true }), _null: createKeyword("null", { startsExpr: true }), _true: createKeyword("true", { startsExpr: true }), _false: createKeyword("false", { startsExpr: true }), _typeof: createKeyword("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: createKeyword("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: createKeyword("delete", { beforeExpr: true, prefix: true, startsExpr: true }), _do: createKeyword("do", { isLoop: true, beforeExpr: true }), _for: createKeyword("for", { isLoop: true }), _while: createKeyword("while", { isLoop: true }), _as: createKeywordLike("as", { startsExpr: true }), _assert: createKeywordLike("assert", { startsExpr: true }), _async: createKeywordLike("async", { startsExpr: true }), _await: createKeywordLike("await", { startsExpr: true }), _from: createKeywordLike("from", { startsExpr: true }), _get: createKeywordLike("get", { startsExpr: true }), _let: createKeywordLike("let", { startsExpr: true }), _meta: createKeywordLike("meta", { startsExpr: true }), _of: createKeywordLike("of", { startsExpr: true }), _sent: createKeywordLike("sent", { startsExpr: true }), _set: createKeywordLike("set", { startsExpr: true }), _static: createKeywordLike("static", { startsExpr: true }), _yield: createKeywordLike("yield", { startsExpr: true }), _asserts: createKeywordLike("asserts", { startsExpr: true }), _checks: createKeywordLike("checks", { startsExpr: true }), _exports: createKeywordLike("exports", { startsExpr: true }), _global: createKeywordLike("global", { startsExpr: true }), _implements: createKeywordLike("implements", { startsExpr: true }), _intrinsic: createKeywordLike("intrinsic", { startsExpr: true }), _infer: createKeywordLike("infer", { startsExpr: true }), _is: createKeywordLike("is", { startsExpr: true }), _mixins: createKeywordLike("mixins", { startsExpr: true }), _proto: createKeywordLike("proto", { startsExpr: true }), _require: createKeywordLike("require", { startsExpr: true }), _keyof: createKeywordLike("keyof", { startsExpr: true }), _readonly: createKeywordLike("readonly", { startsExpr: true }), _unique: createKeywordLike("unique", { startsExpr: true }), _abstract: createKeywordLike("abstract", { startsExpr: true }), _declare: createKeywordLike("declare", { startsExpr: true }), _enum: createKeywordLike("enum", { startsExpr: true }), _module: createKeywordLike("module", { startsExpr: true }), _namespace: createKeywordLike("namespace", { startsExpr: true }), _interface: createKeywordLike("interface", { startsExpr: true }), _type: createKeywordLike("type", { startsExpr: true }), _opaque: createKeywordLike("opaque", { startsExpr: true }), name: createToken("name", { startsExpr: true }), string: createToken("string", { startsExpr: true }), num: createToken("num", { startsExpr: true }), bigint: createToken("bigint", { startsExpr: true }), decimal: createToken("decimal", { startsExpr: true }), regexp: createToken("regexp", { startsExpr: true }), privateName: createToken("#name", { startsExpr: true }), eof: createToken("eof"), jsxName: createToken("jsxName"), jsxText: createToken("jsxText", { beforeExpr: true }), jsxTagStart: createToken("jsxTagStart", { startsExpr: true }), jsxTagEnd: createToken("jsxTagEnd"), placeholder: createToken("%%", { startsExpr: true }) };
        function tokenIsIdentifier(token) {
          return token >= 93 && token <= 128;
        }
        function tokenIsKeywordOrIdentifier(token) {
          return token >= 58 && token <= 128;
        }
        function tokenIsLiteralPropertyName(token) {
          return token >= 58 && token <= 132;
        }
        function tokenCanStartExpression(token) {
          return tokenStartsExprs[token];
        }
        function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
          return token >= 125 && token <= 127;
        }
        function tokenIsKeyword(token) {
          return token >= 58 && token <= 92;
        }
        function tokenLabelName(token) {
          return tokenLabels[token];
        }
        function tokenOperatorPrecedence(token) {
          return tokenBinops[token];
        }
        function tokenIsTemplate(token) {
          return token >= 24 && token <= 25;
        }
        function getExportedToken(token) {
          return tokenTypes[token];
        }
        tokenTypes[8].updateContext = (context) => {
          context.pop();
        }, tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context) => {
          context.push(types2.brace);
        }, tokenTypes[22].updateContext = (context) => {
          context[context.length - 1] === types2.template ? context.pop() : context.push(types2.template);
        }, tokenTypes[138].updateContext = (context) => {
          context.push(types2.j_expr, types2.j_oTag);
        };
        let nonASCIIidentifierStartChars2 = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", nonASCIIidentifierChars2 = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
        const nonASCIIidentifierStart2 = new RegExp("[" + nonASCIIidentifierStartChars2 + "]"), nonASCIIidentifier2 = new RegExp("[" + nonASCIIidentifierStartChars2 + nonASCIIidentifierChars2 + "]");
        nonASCIIidentifierStartChars2 = nonASCIIidentifierChars2 = null;
        const astralIdentifierStartCodes2 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938], astralIdentifierCodes2 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
        function isInAstralSet2(code, set) {
          let pos = 65536;
          for (let i = 0, length = set.length; i < length; i += 2) {
            if (pos += set[i], pos > code)
              return false;
            if (pos += set[i + 1], pos >= code)
              return true;
          }
          return false;
        }
        function isIdentifierStart2(code) {
          return code < 65 ? 36 === code : code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart2.test(String.fromCharCode(code)) : isInAstralSet2(code, astralIdentifierStartCodes2)));
        }
        function isIdentifierChar2(code) {
          return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifier2.test(String.fromCharCode(code)) : isInAstralSet2(code, astralIdentifierStartCodes2) || isInAstralSet2(code, astralIdentifierCodes2))));
        }
        const reservedWords_strict = ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], reservedWords_strictBind = ["eval", "arguments"], keywords2 = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
        function isReservedWord(word, inModule) {
          return inModule && "await" === word || "enum" === word;
        }
        function isStrictReservedWord(word, inModule) {
          return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
        }
        function isStrictBindOnlyReservedWord(word) {
          return reservedWordsStrictBindSet.has(word);
        }
        function isStrictBindReservedWord(word, inModule) {
          return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
        }
        const reservedWordLikeSet = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
        function setTrailingComments(node, comments) {
          void 0 === node.trailingComments ? node.trailingComments = comments : node.trailingComments.unshift(...comments);
        }
        function setInnerComments(node, comments) {
          void 0 === node.innerComments ? node.innerComments = comments : node.innerComments.unshift(...comments);
        }
        function adjustInnerComments(node, elements, commentWS) {
          let lastElement = null, i = elements.length;
          for (; null === lastElement && i > 0; )
            lastElement = elements[--i];
          null === lastElement || lastElement.start > commentWS.start ? setInnerComments(node, commentWS.comments) : setTrailingComments(lastElement, commentWS.comments);
        }
        const lineBreak2 = /\r\n?|[\n\u2028\u2029]/, lineBreakG2 = new RegExp(lineBreak2.source, "g");
        function isNewLine2(code) {
          switch (code) {
            case 10:
            case 13:
            case 8232:
            case 8233:
              return true;
            default:
              return false;
          }
        }
        const skipWhiteSpace2 = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, skipWhiteSpaceToLineBreak = new RegExp("(?=(" + /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/y.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
        function isWhitespace(code) {
          switch (code) {
            case 9:
            case 11:
            case 12:
            case 32:
            case 160:
            case 5760:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        }
        class State {
          constructor() {
            this.strict = void 0, this.curLine = void 0, this.lineStart = void 0, this.startLoc = void 0, this.endLoc = void 0, this.errors = [], this.potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.maybeInArrowParameters = false, this.inType = false, this.noAnonFunctionType = false, this.hasFlowComment = false, this.isAmbientContext = false, this.inAbstractClass = false, this.inDisallowConditionalTypesContext = false, this.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null }, this.soloAwait = false, this.inFSharpPipelineDirectBody = false, this.labels = [], this.decoratorStack = [[]], this.comments = [], this.commentStack = [], this.pos = 0, this.type = 135, this.value = null, this.start = 0, this.end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.lastTokStart = 0, this.context = [types2.brace], this.canStartJSXElement = true, this.containsEsc = false, this.strictErrors = /* @__PURE__ */ new Map(), this.tokensLength = 0;
          }
          init({ strictMode, sourceType, startLine, startColumn }) {
            this.strict = false !== strictMode && (true === strictMode || "module" === sourceType), this.curLine = startLine, this.lineStart = -startColumn, this.startLoc = this.endLoc = new Position3(startLine, startColumn, 0);
          }
          curPosition() {
            return new Position3(this.curLine, this.pos - this.lineStart, this.pos);
          }
          clone(skipArrays) {
            const state = new State(), keys = Object.keys(this);
            for (let i = 0, length = keys.length; i < length; i++) {
              const key = keys[i];
              let val = this[key];
              !skipArrays && Array.isArray(val) && (val = val.slice()), state[key] = val;
            }
            return state;
          }
        }
        var _isDigit = function(code) {
          return code >= 48 && code <= 57;
        };
        const forbiddenNumericSeparatorSiblings = { decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: /* @__PURE__ */ new Set([46, 88, 95, 120]) }, isAllowedNumericSeparatorSibling = { bin: (ch) => 48 === ch || 49 === ch, oct: (ch) => ch >= 48 && ch <= 55, dec: (ch) => ch >= 48 && ch <= 57, hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102 };
        function readStringContents(type, input, pos, lineStart, curLine, errors) {
          const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
          let out = "", containsInvalid = false, chunkStart = pos;
          const { length } = input;
          for (; ; ) {
            if (pos >= length) {
              errors.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
              break;
            }
            const ch = input.charCodeAt(pos);
            if (isStringEnd(type, ch, input, pos)) {
              out += input.slice(chunkStart, pos);
              break;
            }
            if (92 === ch) {
              let escaped;
              out += input.slice(chunkStart, pos), { ch: escaped, pos, lineStart, curLine } = readEscapedChar(input, pos, lineStart, curLine, "template" === type, errors), null === escaped ? containsInvalid = true : out += escaped, chunkStart = pos;
            } else
              8232 === ch || 8233 === ch ? (++curLine, lineStart = ++pos) : 10 === ch || 13 === ch ? "template" === type ? (out += input.slice(chunkStart, pos) + "\n", ++pos, 13 === ch && 10 === input.charCodeAt(pos) && ++pos, ++curLine, chunkStart = lineStart = pos) : errors.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
          }
          return { pos, str: out, containsInvalid, lineStart, curLine };
        }
        function isStringEnd(type, ch, input, pos) {
          return "template" === type ? 96 === ch || 36 === ch && 123 === input.charCodeAt(pos + 1) : ch === ("double" === type ? 34 : 39);
        }
        function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
          const throwOnInvalid = !inTemplate;
          pos++;
          const res = (ch2) => ({ pos, ch: ch2, lineStart, curLine }), ch = input.charCodeAt(pos++);
          switch (ch) {
            case 110:
              return res("\n");
            case 114:
              return res("\r");
            case 120: {
              let code;
              return { code, pos } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors), res(null === code ? null : String.fromCharCode(code));
            }
            case 117: {
              let code;
              return { code, pos } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors), res(null === code ? null : String.fromCodePoint(code));
            }
            case 116:
              return res("	");
            case 98:
              return res("\b");
            case 118:
              return res("\v");
            case 102:
              return res("\f");
            case 13:
              10 === input.charCodeAt(pos) && ++pos;
            case 10:
              lineStart = pos, ++curLine;
            case 8232:
            case 8233:
              return res("");
            case 56:
            case 57:
              if (inTemplate)
                return res(null);
              errors.strictNumericEscape(pos - 1, lineStart, curLine);
            default:
              if (ch >= 48 && ch <= 55) {
                const startPos = pos - 1;
                let octalStr = input.slice(startPos, pos + 2).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
                octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
                const next = input.charCodeAt(pos);
                if ("0" !== octalStr || 56 === next || 57 === next) {
                  if (inTemplate)
                    return res(null);
                  errors.strictNumericEscape(startPos, lineStart, curLine);
                }
                return res(String.fromCharCode(octal));
              }
              return res(String.fromCharCode(ch));
          }
        }
        function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
          const initialPos = pos;
          let n;
          return { n, pos } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors), null === n && (throwOnInvalid ? errors.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), { code: n, pos };
        }
        function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors) {
          const start = pos, forbiddenSiblings = 16 === radix ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = 16 === radix ? isAllowedNumericSeparatorSibling.hex : 10 === radix ? isAllowedNumericSeparatorSibling.dec : 8 === radix ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
          let invalid = false, total = 0;
          for (let i = 0, e = null == len ? 1 / 0 : len; i < e; ++i) {
            const code = input.charCodeAt(pos);
            let val;
            if (95 !== code || "bail" === allowNumSeparator) {
              if (val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : _isDigit(code) ? code - 48 : 1 / 0, val >= radix)
                if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix))
                  val = 0;
                else {
                  if (!forceLen)
                    break;
                  val = 0, invalid = true;
                }
              ++pos, total = total * radix + val;
            } else {
              const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
              allowNumSeparator ? (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) && errors.unexpectedNumericSeparator(pos, lineStart, curLine) : errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine), ++pos;
            }
          }
          return pos === start || null != len && pos - start !== len || invalid ? { n: null, pos } : { n: total, pos };
        }
        function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
          let code;
          if (123 === input.charCodeAt(pos)) {
            if (++pos, { code, pos } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors), ++pos, null !== code && code > 1114111) {
              if (!throwOnInvalid)
                return { code: null, pos };
              errors.invalidCodePoint(pos, lineStart, curLine);
            }
          } else
            ({ code, pos } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
          return { code, pos };
        }
        const _excluded = ["at"], _excluded2 = ["at"];
        function buildPosition(pos, lineStart, curLine) {
          return new Position3(curLine, pos - lineStart, pos);
        }
        const VALID_REGEX_FLAGS = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]);
        class Token3 {
          constructor(state) {
            this.type = state.type, this.value = state.value, this.start = state.start, this.end = state.end, this.loc = new SourceLocation3(state.startLoc, state.endLoc);
          }
        }
        class Scope3 {
          constructor(flags) {
            this.var = /* @__PURE__ */ new Set(), this.lexical = /* @__PURE__ */ new Set(), this.functions = /* @__PURE__ */ new Set(), this.flags = flags;
          }
        }
        class ScopeHandler {
          constructor(parser, inModule) {
            this.parser = void 0, this.scopeStack = [], this.inModule = void 0, this.undefinedExports = /* @__PURE__ */ new Map(), this.parser = parser, this.inModule = inModule;
          }
          get inFunction() {
            return (2 & this.currentVarScopeFlags()) > 0;
          }
          get allowSuper() {
            return (16 & this.currentThisScopeFlags()) > 0;
          }
          get allowDirectSuper() {
            return (32 & this.currentThisScopeFlags()) > 0;
          }
          get inClass() {
            return (64 & this.currentThisScopeFlags()) > 0;
          }
          get inClassAndNotInNonArrowFunction() {
            const flags = this.currentThisScopeFlags();
            return (64 & flags) > 0 && 0 == (2 & flags);
          }
          get inStaticBlock() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];
              if (128 & flags)
                return true;
              if (323 & flags)
                return false;
            }
          }
          get inNonArrowFunction() {
            return (2 & this.currentThisScopeFlags()) > 0;
          }
          get treatFunctionsAsVar() {
            return this.treatFunctionsAsVarInScope(this.currentScope());
          }
          createScope(flags) {
            return new Scope3(flags);
          }
          enter(flags) {
            this.scopeStack.push(this.createScope(flags));
          }
          exit() {
            this.scopeStack.pop();
          }
          treatFunctionsAsVarInScope(scope) {
            return !!(130 & scope.flags || !this.parser.inModule && 1 & scope.flags);
          }
          declareName(name, bindingType, loc) {
            let scope = this.currentScope();
            if (8 & bindingType || 16 & bindingType)
              this.checkRedeclarationInScope(scope, name, bindingType, loc), 16 & bindingType ? scope.functions.add(name) : scope.lexical.add(name), 8 & bindingType && this.maybeExportDefined(scope, name);
            else if (4 & bindingType)
              for (let i = this.scopeStack.length - 1; i >= 0 && (scope = this.scopeStack[i], this.checkRedeclarationInScope(scope, name, bindingType, loc), scope.var.add(name), this.maybeExportDefined(scope, name), !(259 & scope.flags)); --i)
                ;
            this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
          }
          maybeExportDefined(scope, name) {
            this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
          }
          checkRedeclarationInScope(scope, name, bindingType, loc) {
            this.isRedeclaredInScope(scope, name, bindingType) && this.parser.raise(Errors.VarRedeclaration, { at: loc, identifierName: name });
          }
          isRedeclaredInScope(scope, name, bindingType) {
            return !!(1 & bindingType) && (8 & bindingType ? scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name) : 16 & bindingType ? scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name) : scope.lexical.has(name) && !(8 & scope.flags && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name));
          }
          checkLocalExport(id) {
            const { name } = id, topLevelScope = this.scopeStack[0];
            topLevelScope.lexical.has(name) || topLevelScope.var.has(name) || topLevelScope.functions.has(name) || this.undefinedExports.set(name, id.loc.start);
          }
          currentScope() {
            return this.scopeStack[this.scopeStack.length - 1];
          }
          currentVarScopeFlags() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];
              if (259 & flags)
                return flags;
            }
          }
          currentThisScopeFlags() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];
              if (323 & flags && !(4 & flags))
                return flags;
            }
          }
        }
        class FlowScope extends Scope3 {
          constructor(...args) {
            super(...args), this.declareFunctions = /* @__PURE__ */ new Set();
          }
        }
        class FlowScopeHandler extends ScopeHandler {
          createScope(flags) {
            return new FlowScope(flags);
          }
          declareName(name, bindingType, loc) {
            const scope = this.currentScope();
            if (2048 & bindingType)
              return this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name), void scope.declareFunctions.add(name);
            super.declareName(name, bindingType, loc);
          }
          isRedeclaredInScope(scope, name, bindingType) {
            return !!super.isRedeclaredInScope(scope, name, bindingType) || !!(2048 & bindingType) && (!scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name)));
          }
          checkLocalExport(id) {
            this.scopeStack[0].declareFunctions.has(id.name) || super.checkLocalExport(id);
          }
        }
        class ClassScope {
          constructor() {
            this.privateNames = /* @__PURE__ */ new Set(), this.loneAccessors = /* @__PURE__ */ new Map(), this.undefinedPrivateNames = /* @__PURE__ */ new Map();
          }
        }
        class ClassScopeHandler {
          constructor(parser) {
            this.parser = void 0, this.stack = [], this.undefinedPrivateNames = /* @__PURE__ */ new Map(), this.parser = parser;
          }
          current() {
            return this.stack[this.stack.length - 1];
          }
          enter() {
            this.stack.push(new ClassScope());
          }
          exit() {
            const oldClassScope = this.stack.pop(), current2 = this.current();
            for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames))
              current2 ? current2.undefinedPrivateNames.has(name) || current2.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, { at: loc, identifierName: name });
          }
          declarePrivateName(name, elementType, loc) {
            const { privateNames, loneAccessors, undefinedPrivateNames } = this.current();
            let redefined = privateNames.has(name);
            if (3 & elementType) {
              const accessor = redefined && loneAccessors.get(name);
              if (accessor) {
                const oldStatic = 4 & accessor, newStatic = 4 & elementType;
                redefined = (3 & accessor) === (3 & elementType) || oldStatic !== newStatic, redefined || loneAccessors.delete(name);
              } else
                redefined || loneAccessors.set(name, elementType);
            }
            redefined && this.parser.raise(Errors.PrivateNameRedeclaration, { at: loc, identifierName: name }), privateNames.add(name), undefinedPrivateNames.delete(name);
          }
          usePrivateName(name, loc) {
            let classScope;
            for (classScope of this.stack)
              if (classScope.privateNames.has(name))
                return;
            classScope ? classScope.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, { at: loc, identifierName: name });
          }
        }
        class ExpressionScope {
          constructor(type = 0) {
            this.type = void 0, this.type = type;
          }
          canBeArrowParameterDeclaration() {
            return 2 === this.type || 1 === this.type;
          }
          isCertainlyParameterDeclaration() {
            return 3 === this.type;
          }
        }
        class ArrowHeadParsingScope extends ExpressionScope {
          constructor(type) {
            super(type), this.declarationErrors = /* @__PURE__ */ new Map();
          }
          recordDeclarationError(ParsingErrorClass, { at: at2 }) {
            const index2 = at2.index;
            this.declarationErrors.set(index2, [ParsingErrorClass, at2]);
          }
          clearDeclarationError(index2) {
            this.declarationErrors.delete(index2);
          }
          iterateErrors(iterator) {
            this.declarationErrors.forEach(iterator);
          }
        }
        class ExpressionScopeHandler {
          constructor(parser) {
            this.parser = void 0, this.stack = [new ExpressionScope()], this.parser = parser;
          }
          enter(scope) {
            this.stack.push(scope);
          }
          exit() {
            this.stack.pop();
          }
          recordParameterInitializerError(toParseError, { at: node }) {
            const origin = { at: node.loc.start }, { stack } = this;
            let i = stack.length - 1, scope = stack[i];
            for (; !scope.isCertainlyParameterDeclaration(); ) {
              if (!scope.canBeArrowParameterDeclaration())
                return;
              scope.recordDeclarationError(toParseError, origin), scope = stack[--i];
            }
            this.parser.raise(toParseError, origin);
          }
          recordArrowParemeterBindingError(error, { at: node }) {
            const { stack } = this, scope = stack[stack.length - 1], origin = { at: node.loc.start };
            if (scope.isCertainlyParameterDeclaration())
              this.parser.raise(error, origin);
            else {
              if (!scope.canBeArrowParameterDeclaration())
                return;
              scope.recordDeclarationError(error, origin);
            }
          }
          recordAsyncArrowParametersError({ at: at2 }) {
            const { stack } = this;
            let i = stack.length - 1, scope = stack[i];
            for (; scope.canBeArrowParameterDeclaration(); )
              2 === scope.type && scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at: at2 }), scope = stack[--i];
          }
          validateAsPattern() {
            const { stack } = this, currentScope = stack[stack.length - 1];
            currentScope.canBeArrowParameterDeclaration() && currentScope.iterateErrors(([toParseError, loc]) => {
              this.parser.raise(toParseError, { at: loc });
              let i = stack.length - 2, scope = stack[i];
              for (; scope.canBeArrowParameterDeclaration(); )
                scope.clearDeclarationError(loc.index), scope = stack[--i];
            });
          }
        }
        function newExpressionScope() {
          return new ExpressionScope();
        }
        class ProductionParameterHandler {
          constructor() {
            this.stacks = [];
          }
          enter(flags) {
            this.stacks.push(flags);
          }
          exit() {
            this.stacks.pop();
          }
          currentFlags() {
            return this.stacks[this.stacks.length - 1];
          }
          get hasAwait() {
            return (2 & this.currentFlags()) > 0;
          }
          get hasYield() {
            return (1 & this.currentFlags()) > 0;
          }
          get hasReturn() {
            return (4 & this.currentFlags()) > 0;
          }
          get hasIn() {
            return (8 & this.currentFlags()) > 0;
          }
        }
        function functionFlags2(isAsync, isGenerator) {
          return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);
        }
        class ExpressionErrors {
          constructor() {
            this.shorthandAssignLoc = null, this.doubleProtoLoc = null, this.privateKeyLoc = null, this.optionalParametersLoc = null;
          }
        }
        class Node3 {
          constructor(parser, pos, loc) {
            this.type = "", this.start = pos, this.end = 0, this.loc = new SourceLocation3(loc), null != parser && parser.options.ranges && (this.range = [pos, 0]), null != parser && parser.filename && (this.loc.filename = parser.filename);
          }
        }
        const NodePrototype = Node3.prototype;
        function cloneIdentifier(node) {
          const { type, start, end, loc, range, extra, name } = node, cloned = Object.create(NodePrototype);
          return cloned.type = type, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, cloned.extra = extra, cloned.name = name, "Placeholder" === type && (cloned.expectedNode = node.expectedNode), cloned;
        }
        function cloneStringLiteral(node) {
          const { type, start, end, loc, range, extra } = node;
          if ("Placeholder" === type)
            return function(node2) {
              return cloneIdentifier(node2);
            }(node);
          const cloned = Object.create(NodePrototype);
          return cloned.type = type, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, void 0 !== node.raw ? cloned.raw = node.raw : cloned.extra = extra, cloned.value = node.value, cloned;
        }
        NodePrototype.__clone = function() {
          const newNode = new Node3(), keys = Object.keys(this);
          for (let i = 0, length = keys.length; i < length; i++) {
            const key = keys[i];
            "leadingComments" !== key && "trailingComments" !== key && "innerComments" !== key && (newNode[key] = this[key]);
          }
          return newNode;
        };
        const reservedTypes = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]), FlowErrors = ParseErrorEnum`flow`({ AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.", AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.", AssignReservedType: ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`, DeclareClassElement: "The `declare` modifier can only appear on class fields.", DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.", DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.", EnumBooleanMemberNotInitialized: ({ memberName, enumName }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`, EnumDuplicateMemberName: ({ memberName, enumName }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`, EnumInconsistentMemberValues: ({ enumName }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`, EnumInvalidExplicitType: ({ invalidEnumType, enumName }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`, EnumInvalidExplicitTypeUnknownSupplied: ({ enumName }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`, EnumInvalidMemberInitializerPrimaryType: ({ enumName, memberName, explicitType }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`, EnumInvalidMemberInitializerSymbolType: ({ enumName, memberName }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`, EnumInvalidMemberInitializerUnknownType: ({ enumName, memberName }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`, EnumInvalidMemberName: ({ enumName, memberName, suggestion }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`, EnumNumberMemberNotInitialized: ({ enumName, memberName }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`, EnumStringMemberInconsistentlyInitailized: ({ enumName }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`, GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.", ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.", InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.", InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.", InexactVariance: "Explicit inexact syntax cannot have variance.", InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.", MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.", NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.", NestedFlowComment: "Cannot have a flow comment inside another flow comment.", PatternIsOptional: Object.assign({ message: "A binding pattern parameter cannot be optional in an implementation signature." }, { reasonCode: "OptionalBindingPattern" }), SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.", SpreadVariance: "Spread properties cannot have variance.", ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.", ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.", ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.", ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.", ThisParamNoDefault: "The `this` parameter may not have a default value.", TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.", UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.", UnexpectedReservedType: ({ reservedType }) => `Unexpected reserved type ${reservedType}.`, UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.", UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.", UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.", UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".', UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.", UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.", UnsupportedDeclareExportKind: ({ unsupportedExportKind, suggestion }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`, UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.", UnterminatedFlowComment: "Unterminated flow-comment." });
        function hasTypeImportKind(node) {
          return "type" === node.importKind || "typeof" === node.importKind;
        }
        function isMaybeDefaultImport(type) {
          return tokenIsKeywordOrIdentifier(type) && 97 !== type;
        }
        const exportSuggestions = { const: "declare export var", let: "declare export var", type: "export type", interface: "export interface" };
        const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
        const entities = { __proto__: null, quot: '"', amp: "&", apos: "'", lt: "<", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", lang: "\u2329", rang: "\u232A", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666" }, JsxErrors = ParseErrorEnum`jsx`({ AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.", MissingClosingTagElement: ({ openingTagName }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`, MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.", UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?", UnexpectedToken: ({ unexpected, HTMLEntity }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`, UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.", UnterminatedJsxContent: "Unterminated JSX contents.", UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?" });
        function isFragment(object) {
          return !!object && ("JSXOpeningFragment" === object.type || "JSXClosingFragment" === object.type);
        }
        function getQualifiedJSXName(object) {
          if ("JSXIdentifier" === object.type)
            return object.name;
          if ("JSXNamespacedName" === object.type)
            return object.namespace.name + ":" + object.name.name;
          if ("JSXMemberExpression" === object.type)
            return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
          throw new Error("Node had unexpected type: " + object.type);
        }
        class TypeScriptScope extends Scope3 {
          constructor(...args) {
            super(...args), this.types = /* @__PURE__ */ new Set(), this.enums = /* @__PURE__ */ new Set(), this.constEnums = /* @__PURE__ */ new Set(), this.classes = /* @__PURE__ */ new Set(), this.exportOnlyBindings = /* @__PURE__ */ new Set();
          }
        }
        class TypeScriptScopeHandler extends ScopeHandler {
          createScope(flags) {
            return new TypeScriptScope(flags);
          }
          declareName(name, bindingType, loc) {
            const scope = this.currentScope();
            if (1024 & bindingType)
              return this.maybeExportDefined(scope, name), void scope.exportOnlyBindings.add(name);
            super.declareName(name, bindingType, loc), 2 & bindingType && (1 & bindingType || (this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name)), scope.types.add(name)), 256 & bindingType && scope.enums.add(name), 512 & bindingType && scope.constEnums.add(name), 128 & bindingType && scope.classes.add(name);
          }
          isRedeclaredInScope(scope, name, bindingType) {
            if (scope.enums.has(name)) {
              if (256 & bindingType) {
                return !!(512 & bindingType) !== scope.constEnums.has(name);
              }
              return true;
            }
            return 128 & bindingType && scope.classes.has(name) ? !!scope.lexical.has(name) && !!(1 & bindingType) : !!(2 & bindingType && scope.types.has(name)) || super.isRedeclaredInScope(scope, name, bindingType);
          }
          checkLocalExport(id) {
            const topLevelScope = this.scopeStack[0], { name } = id;
            topLevelScope.types.has(name) || topLevelScope.exportOnlyBindings.has(name) || super.checkLocalExport(id);
          }
        }
        function assert2(x) {
          if (!x)
            throw new Error("Assert fail");
        }
        const TSErrors = ParseErrorEnum`typescript`({ AbstractMethodHasImplementation: ({ methodName }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`, AbstractPropertyHasInitializer: ({ propertyName }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`, AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.", AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.", CannotFindName: ({ name }) => `Cannot find name '${name}'.`, ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.", ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.", ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.", ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.", DeclareAccessor: ({ kind }) => `'declare' is not allowed in ${kind}ters.`, DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.", DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.", DuplicateAccessibilityModifier: ({ modifier }) => "Accessibility modifier already seen.", DuplicateModifier: ({ modifier }) => `Duplicate modifier: '${modifier}'.`, EmptyHeritageClauseType: ({ token }) => `'${token}' list cannot be empty.`, EmptyTypeArguments: "Type argument list cannot be empty.", EmptyTypeParameters: "Type parameter list cannot be empty.", ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.", ImportAliasHasImportType: "An import alias can not use 'import type'.", IncompatibleModifiers: ({ modifiers }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`, IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.", IndexSignatureHasAccessibility: ({ modifier }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`, IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.", IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.", IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.", InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.", InvalidModifierOnTypeMember: ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`, InvalidModifierOnTypeParameter: ({ modifier }) => `'${modifier}' modifier cannot appear on a type parameter.`, InvalidModifierOnTypeParameterPositions: ({ modifier }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`, InvalidModifiersOrder: ({ orderedModifiers }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`, InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.", InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.", MissingInterfaceName: "'interface' declarations must be followed by an identifier.", MixedLabeledAndUnlabeledElements: "Tuple members must all have names or all not have names.", NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.", NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.", OptionalTypeBeforeRequired: "A required element cannot follow an optional element.", OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.", PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.", PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.", PrivateElementHasAccessibility: ({ modifier }) => `Private elements cannot have an accessibility modifier ('${modifier}').`, ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.", ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.", ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.", SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.", SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.", SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.", SingleTypeParameterWithoutTrailingComma: ({ typeParameterName }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`, StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.", TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.", TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.", TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.", UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.", UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.", UnexpectedTypeAnnotation: "Did not expect a type annotation here.", UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.", UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.", UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.", UnsupportedSignatureParameterKind: ({ type }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.` });
        function tsIsAccessModifier(modifier) {
          return "private" === modifier || "public" === modifier || "protected" === modifier;
        }
        function tsIsVarianceAnnotations(modifier) {
          return "in" === modifier || "out" === modifier;
        }
        function isPossiblyLiteralEnum(expression) {
          if ("MemberExpression" !== expression.type)
            return false;
          const { computed, property } = expression;
          return (!computed || "StringLiteral" === property.type || !("TemplateLiteral" !== property.type || property.expressions.length > 0)) && isUncomputedMemberExpressionChain(expression.object);
        }
        function isUncomputedMemberExpressionChain(expression) {
          return "Identifier" === expression.type || "MemberExpression" === expression.type && (!expression.computed && isUncomputedMemberExpressionChain(expression.object));
        }
        const PlaceholderErrors = ParseErrorEnum`placeholders`({ ClassNameIsRequired: "A class name is required.", UnexpectedSpace: "Unexpected space in placeholder." });
        function hasPlugin(plugins, expectedConfig) {
          const [expectedName, expectedOptions] = "string" == typeof expectedConfig ? [expectedConfig, {}] : expectedConfig, expectedKeys = Object.keys(expectedOptions), expectedOptionsIsEmpty = 0 === expectedKeys.length;
          return plugins.some((p) => {
            if ("string" == typeof p)
              return expectedOptionsIsEmpty && p === expectedName;
            {
              const [pluginName, pluginOptions] = p;
              if (pluginName !== expectedName)
                return false;
              for (const key of expectedKeys)
                if (pluginOptions[key] !== expectedOptions[key])
                  return false;
              return true;
            }
          });
        }
        function getPluginOption(plugins, name, option) {
          const plugin = plugins.find((plugin2) => Array.isArray(plugin2) ? plugin2[0] === name : plugin2 === name);
          return plugin && Array.isArray(plugin) && plugin.length > 1 ? plugin[1][option] : null;
        }
        const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"], TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"], RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
        const mixinPlugins = { estree: (superClass) => class extends superClass {
          parse() {
            const file = toESTreeLocation(super.parse());
            return this.options.tokens && (file.tokens = file.tokens.map(toESTreeLocation)), file;
          }
          parseRegExpLiteral({ pattern, flags }) {
            let regex = null;
            try {
              regex = new RegExp(pattern, flags);
            } catch (e) {
            }
            const node = this.estreeParseLiteral(regex);
            return node.regex = { pattern, flags }, node;
          }
          parseBigIntLiteral(value) {
            let bigInt;
            try {
              bigInt = BigInt(value);
            } catch (_unused) {
              bigInt = null;
            }
            const node = this.estreeParseLiteral(bigInt);
            return node.bigint = String(node.value || value), node;
          }
          parseDecimalLiteral(value) {
            const node = this.estreeParseLiteral(null);
            return node.decimal = String(node.value || value), node;
          }
          estreeParseLiteral(value) {
            return this.parseLiteral(value, "Literal");
          }
          parseStringLiteral(value) {
            return this.estreeParseLiteral(value);
          }
          parseNumericLiteral(value) {
            return this.estreeParseLiteral(value);
          }
          parseNullLiteral() {
            return this.estreeParseLiteral(null);
          }
          parseBooleanLiteral(value) {
            return this.estreeParseLiteral(value);
          }
          directiveToStmt(directive) {
            const directiveLiteral = directive.value, stmt = this.startNodeAt(directive.start, directive.loc.start), expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);
            return expression.value = directiveLiteral.extra.expressionValue, expression.raw = directiveLiteral.extra.raw, stmt.expression = this.finishNodeAt(expression, "Literal", directiveLiteral.loc.end), stmt.directive = directiveLiteral.extra.raw.slice(1, -1), this.finishNodeAt(stmt, "ExpressionStatement", directive.loc.end);
          }
          initFunction(node, isAsync) {
            super.initFunction(node, isAsync), node.expression = false;
          }
          checkDeclaration(node) {
            null != node && this.isObjectProperty(node) ? this.checkDeclaration(node.value) : super.checkDeclaration(node);
          }
          getObjectOrClassMethodParams(method) {
            return method.value.params;
          }
          isValidDirective(stmt) {
            var _stmt$expression$extr;
            return "ExpressionStatement" === stmt.type && "Literal" === stmt.expression.type && "string" == typeof stmt.expression.value && !(null != (_stmt$expression$extr = stmt.expression.extra) && _stmt$expression$extr.parenthesized);
          }
          parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
            super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
            const directiveStatements = node.directives.map((d) => this.directiveToStmt(d));
            node.body = directiveStatements.concat(node.body), delete node.directives;
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true), method.typeParameters && (method.value.typeParameters = method.typeParameters, delete method.typeParameters), classBody.body.push(method);
          }
          parsePrivateName() {
            const node = super.parsePrivateName();
            return this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(node) : node;
          }
          convertPrivateNameToPrivateIdentifier(node) {
            const name = super.getPrivateNameSV(node);
            return delete node.id, node.name = name, node.type = "PrivateIdentifier", node;
          }
          isPrivateName(node) {
            return this.getPluginOption("estree", "classFeatures") ? "PrivateIdentifier" === node.type : super.isPrivateName(node);
          }
          getPrivateNameSV(node) {
            return this.getPluginOption("estree", "classFeatures") ? node.name : super.getPrivateNameSV(node);
          }
          parseLiteral(value, type) {
            const node = super.parseLiteral(value, type);
            return node.raw = node.extra.raw, delete node.extra, node;
          }
          parseFunctionBody(node, allowExpression, isMethod = false) {
            super.parseFunctionBody(node, allowExpression, isMethod), node.expression = "BlockStatement" !== node.body.type;
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
            let funcNode = this.startNode();
            return funcNode.kind = node.kind, funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope), funcNode.type = "FunctionExpression", delete funcNode.kind, node.value = funcNode, "ClassPrivateMethod" === type && (node.computed = false), this.finishNode(node, "MethodDefinition");
          }
          parseClassProperty(...args) {
            const propertyNode = super.parseClassProperty(...args);
            return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode) : propertyNode;
          }
          parseClassPrivateProperty(...args) {
            const propertyNode = super.parseClassPrivateProperty(...args);
            return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode.computed = false, propertyNode) : propertyNode;
          }
          parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
            const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
            return node && (node.type = "Property", "method" === node.kind && (node.kind = "init"), node.shorthand = false), node;
          }
          parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
            const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
            return node && (node.kind = "init", node.type = "Property"), node;
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            return "Property" === type ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
          }
          isAssignable(node, isBinding) {
            return null != node && this.isObjectProperty(node) ? this.isAssignable(node.value, isBinding) : super.isAssignable(node, isBinding);
          }
          toAssignable(node, isLHS = false) {
            if (null != node && this.isObjectProperty(node)) {
              const { key, value } = node;
              this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value, isLHS);
            } else
              super.toAssignable(node, isLHS);
          }
          toAssignableObjectExpressionProp(prop, isLast, isLHS) {
            "get" === prop.kind || "set" === prop.kind ? this.raise(Errors.PatternHasAccessor, { at: prop.key }) : prop.method ? this.raise(Errors.PatternHasMethod, { at: prop.key }) : super.toAssignableObjectExpressionProp(prop, isLast, isLHS);
          }
          finishCallExpression(unfinished, optional) {
            const node = super.finishCallExpression(unfinished, optional);
            if ("Import" === node.callee.type) {
              var _node$arguments$;
              if (node.type = "ImportExpression", node.source = node.arguments[0], this.hasPlugin("importAssertions"))
                node.attributes = null != (_node$arguments$ = node.arguments[1]) ? _node$arguments$ : null;
              delete node.arguments, delete node.callee;
            }
            return node;
          }
          toReferencedArguments(node) {
            "ImportExpression" !== node.type && super.toReferencedArguments(node);
          }
          parseExport(unfinished) {
            const node = super.parseExport(unfinished);
            switch (node.type) {
              case "ExportAllDeclaration":
                node.exported = null;
                break;
              case "ExportNamedDeclaration":
                1 === node.specifiers.length && "ExportNamespaceSpecifier" === node.specifiers[0].type && (node.type = "ExportAllDeclaration", node.exported = node.specifiers[0].exported, delete node.specifiers);
            }
            return node;
          }
          parseSubscript(base, startPos, startLoc, noCalls, state) {
            const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);
            if (state.optionalChainMember) {
              if ("OptionalMemberExpression" !== node.type && "OptionalCallExpression" !== node.type || (node.type = node.type.substring(8)), state.stop) {
                const chain = this.startNodeAtNode(node);
                return chain.expression = node, this.finishNode(chain, "ChainExpression");
              }
            } else
              "MemberExpression" !== node.type && "CallExpression" !== node.type || (node.optional = false);
            return node;
          }
          hasPropertyAsPrivateName(node) {
            return "ChainExpression" === node.type && (node = node.expression), super.hasPropertyAsPrivateName(node);
          }
          isOptionalChain(node) {
            return "ChainExpression" === node.type;
          }
          isObjectProperty(node) {
            return "Property" === node.type && "init" === node.kind && !node.method;
          }
          isObjectMethod(node) {
            return node.method || "get" === node.kind || "set" === node.kind;
          }
          finishNodeAt(node, type, endLoc) {
            return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
          }
          resetStartLocation(node, start, startLoc) {
            super.resetStartLocation(node, start, startLoc), toESTreeLocation(node);
          }
          resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
            super.resetEndLocation(node, endLoc), toESTreeLocation(node);
          }
        }, jsx: (superClass) => class extends superClass {
          jsxReadToken() {
            let out = "", chunkStart = this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.length)
                throw this.raise(JsxErrors.UnterminatedJsxContent, { at: this.state.startLoc });
              const ch = this.input.charCodeAt(this.state.pos);
              switch (ch) {
                case 60:
                case 123:
                  return this.state.pos === this.state.start ? 60 === ch && this.state.canStartJSXElement ? (++this.state.pos, this.finishToken(138)) : super.getTokenFromCode(ch) : (out += this.input.slice(chunkStart, this.state.pos), this.finishToken(137, out));
                case 38:
                  out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos;
                  break;
                default:
                  isNewLine2(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(true), chunkStart = this.state.pos) : ++this.state.pos;
              }
            }
          }
          jsxReadNewLine(normalizeCRLF) {
            const ch = this.input.charCodeAt(this.state.pos);
            let out;
            return ++this.state.pos, 13 === ch && 10 === this.input.charCodeAt(this.state.pos) ? (++this.state.pos, out = normalizeCRLF ? "\n" : "\r\n") : out = String.fromCharCode(ch), ++this.state.curLine, this.state.lineStart = this.state.pos, out;
          }
          jsxReadString(quote) {
            let out = "", chunkStart = ++this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.length)
                throw this.raise(Errors.UnterminatedString, { at: this.state.startLoc });
              const ch = this.input.charCodeAt(this.state.pos);
              if (ch === quote)
                break;
              38 === ch ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos) : isNewLine2(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(false), chunkStart = this.state.pos) : ++this.state.pos;
            }
            return out += this.input.slice(chunkStart, this.state.pos++), this.finishToken(129, out);
          }
          jsxReadEntity() {
            const startPos = ++this.state.pos;
            if (35 === this.codePointAtPos(this.state.pos)) {
              ++this.state.pos;
              let radix = 10;
              120 === this.codePointAtPos(this.state.pos) && (radix = 16, ++this.state.pos);
              const codePoint = this.readInt(radix, void 0, false, "bail");
              if (null !== codePoint && 59 === this.codePointAtPos(this.state.pos))
                return ++this.state.pos, String.fromCodePoint(codePoint);
            } else {
              let count = 0, semi = false;
              for (; count++ < 10 && this.state.pos < this.length && !(semi = 59 == this.codePointAtPos(this.state.pos)); )
                ++this.state.pos;
              if (semi) {
                const desc = this.input.slice(startPos, this.state.pos), entity = entities[desc];
                if (++this.state.pos, entity)
                  return entity;
              }
            }
            return this.state.pos = startPos, "&";
          }
          jsxReadWord() {
            let ch;
            const start = this.state.pos;
            do {
              ch = this.input.charCodeAt(++this.state.pos);
            } while (isIdentifierChar2(ch) || 45 === ch);
            return this.finishToken(136, this.input.slice(start, this.state.pos));
          }
          jsxParseIdentifier() {
            const node = this.startNode();
            return this.match(136) ? node.name = this.state.value : tokenIsKeyword(this.state.type) ? node.name = tokenLabelName(this.state.type) : this.unexpected(), this.next(), this.finishNode(node, "JSXIdentifier");
          }
          jsxParseNamespacedName() {
            const startPos = this.state.start, startLoc = this.state.startLoc, name = this.jsxParseIdentifier();
            if (!this.eat(14))
              return name;
            const node = this.startNodeAt(startPos, startLoc);
            return node.namespace = name, node.name = this.jsxParseIdentifier(), this.finishNode(node, "JSXNamespacedName");
          }
          jsxParseElementName() {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            let node = this.jsxParseNamespacedName();
            if ("JSXNamespacedName" === node.type)
              return node;
            for (; this.eat(16); ) {
              const newNode = this.startNodeAt(startPos, startLoc);
              newNode.object = node, newNode.property = this.jsxParseIdentifier(), node = this.finishNode(newNode, "JSXMemberExpression");
            }
            return node;
          }
          jsxParseAttributeValue() {
            let node;
            switch (this.state.type) {
              case 5:
                return node = this.startNode(), this.setContext(types2.brace), this.next(), node = this.jsxParseExpressionContainer(node, types2.j_oTag), "JSXEmptyExpression" === node.expression.type && this.raise(JsxErrors.AttributeIsEmpty, { at: node }), node;
              case 138:
              case 129:
                return this.parseExprAtom();
              default:
                throw this.raise(JsxErrors.UnsupportedJsxValue, { at: this.state.startLoc });
            }
          }
          jsxParseEmptyExpression() {
            const node = this.startNodeAt(this.state.lastTokEndLoc.index, this.state.lastTokEndLoc);
            return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
          }
          jsxParseSpreadChild(node) {
            return this.next(), node.expression = this.parseExpression(), this.setContext(types2.j_oTag), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXSpreadChild");
          }
          jsxParseExpressionContainer(node, previousContext) {
            if (this.match(8))
              node.expression = this.jsxParseEmptyExpression();
            else {
              const expression = this.parseExpression();
              node.expression = expression;
            }
            return this.setContext(previousContext), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXExpressionContainer");
          }
          jsxParseAttribute() {
            const node = this.startNode();
            return this.match(5) ? (this.setContext(types2.brace), this.next(), this.expect(21), node.argument = this.parseMaybeAssignAllowIn(), this.setContext(types2.j_oTag), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXSpreadAttribute")) : (node.name = this.jsxParseNamespacedName(), node.value = this.eat(29) ? this.jsxParseAttributeValue() : null, this.finishNode(node, "JSXAttribute"));
          }
          jsxParseOpeningElementAt(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc);
            return this.eat(139) ? this.finishNode(node, "JSXOpeningFragment") : (node.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(node));
          }
          jsxParseOpeningElementAfterName(node) {
            const attributes = [];
            for (; !this.match(56) && !this.match(139); )
              attributes.push(this.jsxParseAttribute());
            return node.attributes = attributes, node.selfClosing = this.eat(56), this.expect(139), this.finishNode(node, "JSXOpeningElement");
          }
          jsxParseClosingElementAt(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc);
            return this.eat(139) ? this.finishNode(node, "JSXClosingFragment") : (node.name = this.jsxParseElementName(), this.expect(139), this.finishNode(node, "JSXClosingElement"));
          }
          jsxParseElementAt(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc), children = [], openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
            let closingElement = null;
            if (!openingElement.selfClosing) {
              contents:
                for (; ; )
                  switch (this.state.type) {
                    case 138:
                      if (startPos = this.state.start, startLoc = this.state.startLoc, this.next(), this.eat(56)) {
                        closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
                        break contents;
                      }
                      children.push(this.jsxParseElementAt(startPos, startLoc));
                      break;
                    case 137:
                      children.push(this.parseExprAtom());
                      break;
                    case 5: {
                      const node2 = this.startNode();
                      this.setContext(types2.brace), this.next(), this.match(21) ? children.push(this.jsxParseSpreadChild(node2)) : children.push(this.jsxParseExpressionContainer(node2, types2.j_expr));
                      break;
                    }
                    default:
                      throw this.unexpected();
                  }
              isFragment(openingElement) && !isFragment(closingElement) && null !== closingElement ? this.raise(JsxErrors.MissingClosingTagFragment, { at: closingElement }) : !isFragment(openingElement) && isFragment(closingElement) ? this.raise(JsxErrors.MissingClosingTagElement, { at: closingElement, openingTagName: getQualifiedJSXName(openingElement.name) }) : isFragment(openingElement) || isFragment(closingElement) || getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name) && this.raise(JsxErrors.MissingClosingTagElement, { at: closingElement, openingTagName: getQualifiedJSXName(openingElement.name) });
            }
            if (isFragment(openingElement) ? (node.openingFragment = openingElement, node.closingFragment = closingElement) : (node.openingElement = openingElement, node.closingElement = closingElement), node.children = children, this.match(47))
              throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, { at: this.state.startLoc });
            return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
          }
          jsxParseElement() {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            return this.next(), this.jsxParseElementAt(startPos, startLoc);
          }
          setContext(newContext) {
            const { context } = this.state;
            context[context.length - 1] = newContext;
          }
          parseExprAtom(refExpressionErrors) {
            return this.match(137) ? this.parseLiteral(this.state.value, "JSXText") : this.match(138) ? this.jsxParseElement() : this.match(47) && 33 !== this.input.charCodeAt(this.state.pos) ? (this.replaceToken(138), this.jsxParseElement()) : super.parseExprAtom(refExpressionErrors);
          }
          skipSpace() {
            this.curContext().preserveSpace || super.skipSpace();
          }
          getTokenFromCode(code) {
            const context = this.curContext();
            if (context === types2.j_expr)
              return this.jsxReadToken();
            if (context === types2.j_oTag || context === types2.j_cTag) {
              if (isIdentifierStart2(code))
                return this.jsxReadWord();
              if (62 === code)
                return ++this.state.pos, this.finishToken(139);
              if ((34 === code || 39 === code) && context === types2.j_oTag)
                return this.jsxReadString(code);
            }
            return 60 === code && this.state.canStartJSXElement && 33 !== this.input.charCodeAt(this.state.pos + 1) ? (++this.state.pos, this.finishToken(138)) : super.getTokenFromCode(code);
          }
          updateContext(prevType) {
            const { context, type } = this.state;
            if (56 === type && 138 === prevType)
              context.splice(-2, 2, types2.j_cTag), this.state.canStartJSXElement = false;
            else if (138 === type)
              context.push(types2.j_oTag);
            else if (139 === type) {
              const out = context[context.length - 1];
              out === types2.j_oTag && 56 === prevType || out === types2.j_cTag ? (context.pop(), this.state.canStartJSXElement = context[context.length - 1] === types2.j_expr) : (this.setContext(types2.j_expr), this.state.canStartJSXElement = true);
            } else
              this.state.canStartJSXElement = tokenBeforeExprs[type];
          }
        }, flow: (superClass) => class extends superClass {
          constructor(...args) {
            super(...args), this.flowPragma = void 0;
          }
          getScopeHandler() {
            return FlowScopeHandler;
          }
          shouldParseTypes() {
            return this.getPluginOption("flow", "all") || "flow" === this.flowPragma;
          }
          shouldParseEnums() {
            return !!this.getPluginOption("flow", "enums");
          }
          finishToken(type, val) {
            return 129 !== type && 13 !== type && 28 !== type && void 0 === this.flowPragma && (this.flowPragma = null), super.finishToken(type, val);
          }
          addComment(comment) {
            if (void 0 === this.flowPragma) {
              const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
              if (matches)
                if ("flow" === matches[1])
                  this.flowPragma = "flow";
                else {
                  if ("noflow" !== matches[1])
                    throw new Error("Unexpected flow pragma");
                  this.flowPragma = "noflow";
                }
              else
                ;
            }
            return super.addComment(comment);
          }
          flowParseTypeInitialiser(tok) {
            const oldInType = this.state.inType;
            this.state.inType = true, this.expect(tok || 14);
            const type = this.flowParseType();
            return this.state.inType = oldInType, type;
          }
          flowParsePredicate() {
            const node = this.startNode(), moduloLoc = this.state.startLoc;
            return this.next(), this.expectContextual(107), this.state.lastTokStart > moduloLoc.index + 1 && this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, { at: moduloLoc }), this.eat(10) ? (node.value = super.parseExpression(), this.expect(11), this.finishNode(node, "DeclaredPredicate")) : this.finishNode(node, "InferredPredicate");
          }
          flowParseTypeAndPredicateInitialiser() {
            const oldInType = this.state.inType;
            this.state.inType = true, this.expect(14);
            let type = null, predicate = null;
            return this.match(54) ? (this.state.inType = oldInType, predicate = this.flowParsePredicate()) : (type = this.flowParseType(), this.state.inType = oldInType, this.match(54) && (predicate = this.flowParsePredicate())), [type, predicate];
          }
          flowParseDeclareClass(node) {
            return this.next(), this.flowParseInterfaceish(node, true), this.finishNode(node, "DeclareClass");
          }
          flowParseDeclareFunction(node) {
            this.next();
            const id = node.id = this.parseIdentifier(), typeNode = this.startNode(), typeContainer = this.startNode();
            this.match(47) ? typeNode.typeParameters = this.flowParseTypeParameterDeclaration() : typeNode.typeParameters = null, this.expect(10);
            const tmp = this.flowParseFunctionTypeParams();
            return typeNode.params = tmp.params, typeNode.rest = tmp.rest, typeNode.this = tmp._this, this.expect(11), [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation"), id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation"), this.resetEndLocation(id), this.semicolon(), this.scope.declareName(node.id.name, 2048, node.id.loc.start), this.finishNode(node, "DeclareFunction");
          }
          flowParseDeclare(node, insideModule) {
            if (this.match(80))
              return this.flowParseDeclareClass(node);
            if (this.match(68))
              return this.flowParseDeclareFunction(node);
            if (this.match(74))
              return this.flowParseDeclareVariable(node);
            if (this.eatContextual(123))
              return this.match(16) ? this.flowParseDeclareModuleExports(node) : (insideModule && this.raise(FlowErrors.NestedDeclareModule, { at: this.state.lastTokStartLoc }), this.flowParseDeclareModule(node));
            if (this.isContextual(126))
              return this.flowParseDeclareTypeAlias(node);
            if (this.isContextual(127))
              return this.flowParseDeclareOpaqueType(node);
            if (this.isContextual(125))
              return this.flowParseDeclareInterface(node);
            if (this.match(82))
              return this.flowParseDeclareExportDeclaration(node, insideModule);
            throw this.unexpected();
          }
          flowParseDeclareVariable(node) {
            return this.next(), node.id = this.flowParseTypeAnnotatableIdentifier(true), this.scope.declareName(node.id.name, 5, node.id.loc.start), this.semicolon(), this.finishNode(node, "DeclareVariable");
          }
          flowParseDeclareModule(node) {
            this.scope.enter(0), this.match(129) ? node.id = super.parseExprAtom() : node.id = this.parseIdentifier();
            const bodyNode = node.body = this.startNode(), body = bodyNode.body = [];
            for (this.expect(5); !this.match(8); ) {
              let bodyNode2 = this.startNode();
              this.match(83) ? (this.next(), this.isContextual(126) || this.match(87) || this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, { at: this.state.lastTokStartLoc }), super.parseImport(bodyNode2)) : (this.expectContextual(121, FlowErrors.UnsupportedStatementInDeclareModule), bodyNode2 = this.flowParseDeclare(bodyNode2, true)), body.push(bodyNode2);
            }
            this.scope.exit(), this.expect(8), this.finishNode(bodyNode, "BlockStatement");
            let kind = null, hasModuleExport = false;
            return body.forEach((bodyElement) => {
              !function(bodyElement2) {
                return "DeclareExportAllDeclaration" === bodyElement2.type || "DeclareExportDeclaration" === bodyElement2.type && (!bodyElement2.declaration || "TypeAlias" !== bodyElement2.declaration.type && "InterfaceDeclaration" !== bodyElement2.declaration.type);
              }(bodyElement) ? "DeclareModuleExports" === bodyElement.type && (hasModuleExport && this.raise(FlowErrors.DuplicateDeclareModuleExports, { at: bodyElement }), "ES" === kind && this.raise(FlowErrors.AmbiguousDeclareModuleKind, { at: bodyElement }), kind = "CommonJS", hasModuleExport = true) : ("CommonJS" === kind && this.raise(FlowErrors.AmbiguousDeclareModuleKind, { at: bodyElement }), kind = "ES");
            }), node.kind = kind || "CommonJS", this.finishNode(node, "DeclareModule");
          }
          flowParseDeclareExportDeclaration(node, insideModule) {
            if (this.expect(82), this.eat(65))
              return this.match(68) || this.match(80) ? node.declaration = this.flowParseDeclare(this.startNode()) : (node.declaration = this.flowParseType(), this.semicolon()), node.default = true, this.finishNode(node, "DeclareExportDeclaration");
            if (this.match(75) || this.isLet() || (this.isContextual(126) || this.isContextual(125)) && !insideModule) {
              const label = this.state.value;
              throw this.raise(FlowErrors.UnsupportedDeclareExportKind, { at: this.state.startLoc, unsupportedExportKind: label, suggestion: exportSuggestions[label] });
            }
            if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(127))
              return node.declaration = this.flowParseDeclare(this.startNode()), node.default = false, this.finishNode(node, "DeclareExportDeclaration");
            if (this.match(55) || this.match(5) || this.isContextual(125) || this.isContextual(126) || this.isContextual(127))
              return "ExportNamedDeclaration" === (node = this.parseExport(node)).type && (node.type = "ExportDeclaration", node.default = false, delete node.exportKind), node.type = "Declare" + node.type, node;
            throw this.unexpected();
          }
          flowParseDeclareModuleExports(node) {
            return this.next(), this.expectContextual(108), node.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(node, "DeclareModuleExports");
          }
          flowParseDeclareTypeAlias(node) {
            this.next();
            const finished = this.flowParseTypeAlias(node);
            return finished.type = "DeclareTypeAlias", finished;
          }
          flowParseDeclareOpaqueType(node) {
            this.next();
            const finished = this.flowParseOpaqueType(node, true);
            return finished.type = "DeclareOpaqueType", finished;
          }
          flowParseDeclareInterface(node) {
            return this.next(), this.flowParseInterfaceish(node), this.finishNode(node, "DeclareInterface");
          }
          flowParseInterfaceish(node, isClass = false) {
            if (node.id = this.flowParseRestrictedIdentifier(!isClass, true), this.scope.declareName(node.id.name, isClass ? 17 : 9, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.extends = [], node.implements = [], node.mixins = [], this.eat(81))
              do {
                node.extends.push(this.flowParseInterfaceExtends());
              } while (!isClass && this.eat(12));
            if (this.isContextual(114)) {
              this.next();
              do {
                node.mixins.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            }
            if (this.isContextual(110)) {
              this.next();
              do {
                node.implements.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            }
            node.body = this.flowParseObjectType({ allowStatic: isClass, allowExact: false, allowSpread: false, allowProto: isClass, allowInexact: false });
          }
          flowParseInterfaceExtends() {
            const node = this.startNode();
            return node.id = this.flowParseQualifiedTypeIdentifier(), this.match(47) ? node.typeParameters = this.flowParseTypeParameterInstantiation() : node.typeParameters = null, this.finishNode(node, "InterfaceExtends");
          }
          flowParseInterface(node) {
            return this.flowParseInterfaceish(node), this.finishNode(node, "InterfaceDeclaration");
          }
          checkNotUnderscore(word) {
            "_" === word && this.raise(FlowErrors.UnexpectedReservedUnderscore, { at: this.state.startLoc });
          }
          checkReservedType(word, startLoc, declaration) {
            reservedTypes.has(word) && this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, { at: startLoc, reservedType: word });
          }
          flowParseRestrictedIdentifier(liberal, declaration) {
            return this.checkReservedType(this.state.value, this.state.startLoc, declaration), this.parseIdentifier(liberal);
          }
          flowParseTypeAlias(node) {
            return node.id = this.flowParseRestrictedIdentifier(false, true), this.scope.declareName(node.id.name, 9, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.right = this.flowParseTypeInitialiser(29), this.semicolon(), this.finishNode(node, "TypeAlias");
          }
          flowParseOpaqueType(node, declare) {
            return this.expectContextual(126), node.id = this.flowParseRestrictedIdentifier(true, true), this.scope.declareName(node.id.name, 9, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.supertype = null, this.match(14) && (node.supertype = this.flowParseTypeInitialiser(14)), node.impltype = null, declare || (node.impltype = this.flowParseTypeInitialiser(29)), this.semicolon(), this.finishNode(node, "OpaqueType");
          }
          flowParseTypeParameter(requireDefault = false) {
            const nodeStartLoc = this.state.startLoc, node = this.startNode(), variance = this.flowParseVariance(), ident = this.flowParseTypeAnnotatableIdentifier();
            return node.name = ident.name, node.variance = variance, node.bound = ident.typeAnnotation, this.match(29) ? (this.eat(29), node.default = this.flowParseType()) : requireDefault && this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc }), this.finishNode(node, "TypeParameter");
          }
          flowParseTypeParameterDeclaration() {
            const oldInType = this.state.inType, node = this.startNode();
            node.params = [], this.state.inType = true, this.match(47) || this.match(138) ? this.next() : this.unexpected();
            let defaultRequired = false;
            do {
              const typeParameter = this.flowParseTypeParameter(defaultRequired);
              node.params.push(typeParameter), typeParameter.default && (defaultRequired = true), this.match(48) || this.expect(12);
            } while (!this.match(48));
            return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterDeclaration");
          }
          flowParseTypeParameterInstantiation() {
            const node = this.startNode(), oldInType = this.state.inType;
            node.params = [], this.state.inType = true, this.expect(47);
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            for (this.state.noAnonFunctionType = false; !this.match(48); )
              node.params.push(this.flowParseType()), this.match(48) || this.expect(12);
            return this.state.noAnonFunctionType = oldNoAnonFunctionType, this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
          }
          flowParseTypeParameterInstantiationCallOrNew() {
            const node = this.startNode(), oldInType = this.state.inType;
            for (node.params = [], this.state.inType = true, this.expect(47); !this.match(48); )
              node.params.push(this.flowParseTypeOrImplicitInstantiation()), this.match(48) || this.expect(12);
            return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
          }
          flowParseInterfaceType() {
            const node = this.startNode();
            if (this.expectContextual(125), node.extends = [], this.eat(81))
              do {
                node.extends.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            return node.body = this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: false, allowProto: false, allowInexact: false }), this.finishNode(node, "InterfaceTypeAnnotation");
          }
          flowParseObjectPropertyKey() {
            return this.match(130) || this.match(129) ? super.parseExprAtom() : this.parseIdentifier(true);
          }
          flowParseObjectTypeIndexer(node, isStatic, variance) {
            return node.static = isStatic, 14 === this.lookahead().type ? (node.id = this.flowParseObjectPropertyKey(), node.key = this.flowParseTypeInitialiser()) : (node.id = null, node.key = this.flowParseType()), this.expect(3), node.value = this.flowParseTypeInitialiser(), node.variance = variance, this.finishNode(node, "ObjectTypeIndexer");
          }
          flowParseObjectTypeInternalSlot(node, isStatic) {
            return node.static = isStatic, node.id = this.flowParseObjectPropertyKey(), this.expect(3), this.expect(3), this.match(47) || this.match(10) ? (node.method = true, node.optional = false, node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start))) : (node.method = false, this.eat(17) && (node.optional = true), node.value = this.flowParseTypeInitialiser()), this.finishNode(node, "ObjectTypeInternalSlot");
          }
          flowParseObjectTypeMethodish(node) {
            for (node.params = [], node.rest = null, node.typeParameters = null, node.this = null, this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), this.expect(10), this.match(78) && (node.this = this.flowParseFunctionTypeParam(true), node.this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); )
              node.params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
            return this.eat(21) && (node.rest = this.flowParseFunctionTypeParam(false)), this.expect(11), node.returnType = this.flowParseTypeInitialiser(), this.finishNode(node, "FunctionTypeAnnotation");
          }
          flowParseObjectTypeCallProperty(node, isStatic) {
            const valueNode = this.startNode();
            return node.static = isStatic, node.value = this.flowParseObjectTypeMethodish(valueNode), this.finishNode(node, "ObjectTypeCallProperty");
          }
          flowParseObjectType({ allowStatic, allowExact, allowSpread, allowProto, allowInexact }) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            const nodeStart = this.startNode();
            let endDelim, exact;
            nodeStart.callProperties = [], nodeStart.properties = [], nodeStart.indexers = [], nodeStart.internalSlots = [];
            let inexact = false;
            for (allowExact && this.match(6) ? (this.expect(6), endDelim = 9, exact = true) : (this.expect(5), endDelim = 8, exact = false), nodeStart.exact = exact; !this.match(endDelim); ) {
              let isStatic = false, protoStartLoc = null, inexactStartLoc = null;
              const node = this.startNode();
              if (allowProto && this.isContextual(115)) {
                const lookahead2 = this.lookahead();
                14 !== lookahead2.type && 17 !== lookahead2.type && (this.next(), protoStartLoc = this.state.startLoc, allowStatic = false);
              }
              if (allowStatic && this.isContextual(104)) {
                const lookahead2 = this.lookahead();
                14 !== lookahead2.type && 17 !== lookahead2.type && (this.next(), isStatic = true);
              }
              const variance = this.flowParseVariance();
              if (this.eat(0))
                null != protoStartLoc && this.unexpected(protoStartLoc), this.eat(0) ? (variance && this.unexpected(variance.loc.start), nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic))) : nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
              else if (this.match(10) || this.match(47))
                null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
              else {
                let kind = "init";
                if (this.isContextual(98) || this.isContextual(103)) {
                  tokenIsLiteralPropertyName(this.lookahead().type) && (kind = this.state.value, this.next());
                }
                const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, null != allowInexact ? allowInexact : !exact);
                null === propOrInexact ? (inexact = true, inexactStartLoc = this.state.lastTokStartLoc) : nodeStart.properties.push(propOrInexact);
              }
              this.flowObjectTypeSemicolon(), !inexactStartLoc || this.match(8) || this.match(9) || this.raise(FlowErrors.UnexpectedExplicitInexactInObject, { at: inexactStartLoc });
            }
            this.expect(endDelim), allowSpread && (nodeStart.inexact = inexact);
            const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
            return this.state.inType = oldInType, out;
          }
          flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
            if (this.eat(21)) {
              return this.match(12) || this.match(13) || this.match(8) || this.match(9) ? (allowSpread ? allowInexact || this.raise(FlowErrors.InexactInsideExact, { at: this.state.lastTokStartLoc }) : this.raise(FlowErrors.InexactInsideNonObject, { at: this.state.lastTokStartLoc }), variance && this.raise(FlowErrors.InexactVariance, { at: variance }), null) : (allowSpread || this.raise(FlowErrors.UnexpectedSpreadType, { at: this.state.lastTokStartLoc }), null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.raise(FlowErrors.SpreadVariance, { at: variance }), node.argument = this.flowParseType(), this.finishNode(node, "ObjectTypeSpreadProperty"));
            }
            {
              node.key = this.flowParseObjectPropertyKey(), node.static = isStatic, node.proto = null != protoStartLoc, node.kind = kind;
              let optional = false;
              return this.match(47) || this.match(10) ? (node.method = true, null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start)), "get" !== kind && "set" !== kind || this.flowCheckGetterSetterParams(node), !allowSpread && "constructor" === node.key.name && node.value.this && this.raise(FlowErrors.ThisParamBannedInConstructor, { at: node.value.this })) : ("init" !== kind && this.unexpected(), node.method = false, this.eat(17) && (optional = true), node.value = this.flowParseTypeInitialiser(), node.variance = variance), node.optional = optional, this.finishNode(node, "ObjectTypeProperty");
            }
          }
          flowCheckGetterSetterParams(property) {
            const paramCount = "get" === property.kind ? 0 : 1, length = property.value.params.length + (property.value.rest ? 1 : 0);
            property.value.this && this.raise("get" === property.kind ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, { at: property.value.this }), length !== paramCount && this.raise("get" === property.kind ? Errors.BadGetterArity : Errors.BadSetterArity, { at: property }), "set" === property.kind && property.value.rest && this.raise(Errors.BadSetterRestParameter, { at: property });
          }
          flowObjectTypeSemicolon() {
            this.eat(13) || this.eat(12) || this.match(8) || this.match(9) || this.unexpected();
          }
          flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {
            startPos = startPos || this.state.start, startLoc = startLoc || this.state.startLoc;
            let node = id || this.flowParseRestrictedIdentifier(true);
            for (; this.eat(16); ) {
              const node2 = this.startNodeAt(startPos, startLoc);
              node2.qualification = node, node2.id = this.flowParseRestrictedIdentifier(true), node = this.finishNode(node2, "QualifiedTypeIdentifier");
            }
            return node;
          }
          flowParseGenericType(startPos, startLoc, id) {
            const node = this.startNodeAt(startPos, startLoc);
            return node.typeParameters = null, node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id), this.match(47) && (node.typeParameters = this.flowParseTypeParameterInstantiation()), this.finishNode(node, "GenericTypeAnnotation");
          }
          flowParseTypeofType() {
            const node = this.startNode();
            return this.expect(87), node.argument = this.flowParsePrimaryType(), this.finishNode(node, "TypeofTypeAnnotation");
          }
          flowParseTupleType() {
            const node = this.startNode();
            for (node.types = [], this.expect(0); this.state.pos < this.length && !this.match(3) && (node.types.push(this.flowParseType()), !this.match(3)); )
              this.expect(12);
            return this.expect(3), this.finishNode(node, "TupleTypeAnnotation");
          }
          flowParseFunctionTypeParam(first) {
            let name = null, optional = false, typeAnnotation = null;
            const node = this.startNode(), lh = this.lookahead(), isThis = 78 === this.state.type;
            return 14 === lh.type || 17 === lh.type ? (isThis && !first && this.raise(FlowErrors.ThisParamMustBeFirst, { at: node }), name = this.parseIdentifier(isThis), this.eat(17) && (optional = true, isThis && this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node })), typeAnnotation = this.flowParseTypeInitialiser()) : typeAnnotation = this.flowParseType(), node.name = name, node.optional = optional, node.typeAnnotation = typeAnnotation, this.finishNode(node, "FunctionTypeParam");
          }
          reinterpretTypeAsFunctionTypeParam(type) {
            const node = this.startNodeAt(type.start, type.loc.start);
            return node.name = null, node.optional = false, node.typeAnnotation = type, this.finishNode(node, "FunctionTypeParam");
          }
          flowParseFunctionTypeParams(params = []) {
            let rest = null, _this = null;
            for (this.match(78) && (_this = this.flowParseFunctionTypeParam(true), _this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); )
              params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
            return this.eat(21) && (rest = this.flowParseFunctionTypeParam(false)), { params, rest, _this };
          }
          flowIdentToTypeAnnotation(startPos, startLoc, node, id) {
            switch (id.name) {
              case "any":
                return this.finishNode(node, "AnyTypeAnnotation");
              case "bool":
              case "boolean":
                return this.finishNode(node, "BooleanTypeAnnotation");
              case "mixed":
                return this.finishNode(node, "MixedTypeAnnotation");
              case "empty":
                return this.finishNode(node, "EmptyTypeAnnotation");
              case "number":
                return this.finishNode(node, "NumberTypeAnnotation");
              case "string":
                return this.finishNode(node, "StringTypeAnnotation");
              case "symbol":
                return this.finishNode(node, "SymbolTypeAnnotation");
              default:
                return this.checkNotUnderscore(id.name), this.flowParseGenericType(startPos, startLoc, id);
            }
          }
          flowParsePrimaryType() {
            const startPos = this.state.start, startLoc = this.state.startLoc, node = this.startNode();
            let tmp, type, isGroupedType = false;
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            switch (this.state.type) {
              case 5:
                return this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: true, allowProto: false, allowInexact: true });
              case 6:
                return this.flowParseObjectType({ allowStatic: false, allowExact: true, allowSpread: true, allowProto: false, allowInexact: false });
              case 0:
                return this.state.noAnonFunctionType = false, type = this.flowParseTupleType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, type;
              case 47:
                return node.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(10), tmp = this.flowParseFunctionTypeParams(), node.params = tmp.params, node.rest = tmp.rest, node.this = tmp._this, this.expect(11), this.expect(19), node.returnType = this.flowParseType(), this.finishNode(node, "FunctionTypeAnnotation");
              case 10:
                if (this.next(), !this.match(11) && !this.match(21))
                  if (tokenIsIdentifier(this.state.type) || this.match(78)) {
                    const token = this.lookahead().type;
                    isGroupedType = 17 !== token && 14 !== token;
                  } else
                    isGroupedType = true;
                if (isGroupedType) {
                  if (this.state.noAnonFunctionType = false, type = this.flowParseType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && 19 === this.lookahead().type))
                    return this.expect(11), type;
                  this.eat(12);
                }
                return tmp = type ? this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]) : this.flowParseFunctionTypeParams(), node.params = tmp.params, node.rest = tmp.rest, node.this = tmp._this, this.expect(11), this.expect(19), node.returnType = this.flowParseType(), node.typeParameters = null, this.finishNode(node, "FunctionTypeAnnotation");
              case 129:
                return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
              case 85:
              case 86:
                return node.value = this.match(85), this.next(), this.finishNode(node, "BooleanLiteralTypeAnnotation");
              case 53:
                if ("-" === this.state.value) {
                  if (this.next(), this.match(130))
                    return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
                  if (this.match(131))
                    return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
                  throw this.raise(FlowErrors.UnexpectedSubtractionOperand, { at: this.state.startLoc });
                }
                throw this.unexpected();
              case 130:
                return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
              case 131:
                return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
              case 88:
                return this.next(), this.finishNode(node, "VoidTypeAnnotation");
              case 84:
                return this.next(), this.finishNode(node, "NullLiteralTypeAnnotation");
              case 78:
                return this.next(), this.finishNode(node, "ThisTypeAnnotation");
              case 55:
                return this.next(), this.finishNode(node, "ExistsTypeAnnotation");
              case 87:
                return this.flowParseTypeofType();
              default:
                if (tokenIsKeyword(this.state.type)) {
                  const label = tokenLabelName(this.state.type);
                  return this.next(), super.createIdentifier(node, label);
                }
                if (tokenIsIdentifier(this.state.type))
                  return this.isContextual(125) ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());
            }
            throw this.unexpected();
          }
          flowParsePostfixType() {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            let type = this.flowParsePrimaryType(), seenOptionalIndexedAccess = false;
            for (; (this.match(0) || this.match(18)) && !this.canInsertSemicolon(); ) {
              const node = this.startNodeAt(startPos, startLoc), optional = this.eat(18);
              seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional, this.expect(0), !optional && this.match(3) ? (node.elementType = type, this.next(), type = this.finishNode(node, "ArrayTypeAnnotation")) : (node.objectType = type, node.indexType = this.flowParseType(), this.expect(3), seenOptionalIndexedAccess ? (node.optional = optional, type = this.finishNode(node, "OptionalIndexedAccessType")) : type = this.finishNode(node, "IndexedAccessType"));
            }
            return type;
          }
          flowParsePrefixType() {
            const node = this.startNode();
            return this.eat(17) ? (node.typeAnnotation = this.flowParsePrefixType(), this.finishNode(node, "NullableTypeAnnotation")) : this.flowParsePostfixType();
          }
          flowParseAnonFunctionWithoutParens() {
            const param = this.flowParsePrefixType();
            if (!this.state.noAnonFunctionType && this.eat(19)) {
              const node = this.startNodeAt(param.start, param.loc.start);
              return node.params = [this.reinterpretTypeAsFunctionTypeParam(param)], node.rest = null, node.this = null, node.returnType = this.flowParseType(), node.typeParameters = null, this.finishNode(node, "FunctionTypeAnnotation");
            }
            return param;
          }
          flowParseIntersectionType() {
            const node = this.startNode();
            this.eat(45);
            const type = this.flowParseAnonFunctionWithoutParens();
            for (node.types = [type]; this.eat(45); )
              node.types.push(this.flowParseAnonFunctionWithoutParens());
            return 1 === node.types.length ? type : this.finishNode(node, "IntersectionTypeAnnotation");
          }
          flowParseUnionType() {
            const node = this.startNode();
            this.eat(43);
            const type = this.flowParseIntersectionType();
            for (node.types = [type]; this.eat(43); )
              node.types.push(this.flowParseIntersectionType());
            return 1 === node.types.length ? type : this.finishNode(node, "UnionTypeAnnotation");
          }
          flowParseType() {
            const oldInType = this.state.inType;
            this.state.inType = true;
            const type = this.flowParseUnionType();
            return this.state.inType = oldInType, type;
          }
          flowParseTypeOrImplicitInstantiation() {
            if (128 === this.state.type && "_" === this.state.value) {
              const startPos = this.state.start, startLoc = this.state.startLoc, node = this.parseIdentifier();
              return this.flowParseGenericType(startPos, startLoc, node);
            }
            return this.flowParseType();
          }
          flowParseTypeAnnotation() {
            const node = this.startNode();
            return node.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(node, "TypeAnnotation");
          }
          flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
            const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
            return this.match(14) && (ident.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(ident)), ident;
          }
          typeCastToParameter(node) {
            return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
          }
          flowParseVariance() {
            let variance = null;
            return this.match(53) ? (variance = this.startNode(), "+" === this.state.value ? variance.kind = "plus" : variance.kind = "minus", this.next(), this.finishNode(variance, "Variance")) : variance;
          }
          parseFunctionBody(node, allowExpressionBody, isMethod = false) {
            return allowExpressionBody ? this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod)) : super.parseFunctionBody(node, false, isMethod);
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            if (this.match(14)) {
              const typeNode = this.startNode();
              [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
            }
            return super.parseFunctionBodyAndFinish(node, type, isMethod);
          }
          parseStatement(context, topLevel) {
            if (this.state.strict && this.isContextual(125)) {
              if (tokenIsKeywordOrIdentifier(this.lookahead().type)) {
                const node = this.startNode();
                return this.next(), this.flowParseInterface(node);
              }
            } else if (this.shouldParseEnums() && this.isContextual(122)) {
              const node = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(node);
            }
            const stmt = super.parseStatement(context, topLevel);
            return void 0 !== this.flowPragma || this.isValidDirective(stmt) || (this.flowPragma = null), stmt;
          }
          parseExpressionStatement(node, expr) {
            if ("Identifier" === expr.type) {
              if ("declare" === expr.name) {
                if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82))
                  return this.flowParseDeclare(node);
              } else if (tokenIsIdentifier(this.state.type)) {
                if ("interface" === expr.name)
                  return this.flowParseInterface(node);
                if ("type" === expr.name)
                  return this.flowParseTypeAlias(node);
                if ("opaque" === expr.name)
                  return this.flowParseOpaqueType(node, false);
              }
            }
            return super.parseExpressionStatement(node, expr);
          }
          shouldParseExportDeclaration() {
            const { type } = this.state;
            return tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && 122 === type ? !this.state.containsEsc : super.shouldParseExportDeclaration();
          }
          isExportDefaultSpecifier() {
            const { type } = this.state;
            return tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && 122 === type ? this.state.containsEsc : super.isExportDefaultSpecifier();
          }
          parseExportDefaultExpression() {
            if (this.shouldParseEnums() && this.isContextual(122)) {
              const node = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(node);
            }
            return super.parseExportDefaultExpression();
          }
          parseConditional(expr, startPos, startLoc, refExpressionErrors) {
            if (!this.match(17))
              return expr;
            if (this.state.maybeInArrowParameters) {
              const nextCh = this.lookaheadCharCode();
              if (44 === nextCh || 61 === nextCh || 58 === nextCh || 41 === nextCh)
                return this.setOptionalParametersError(refExpressionErrors), expr;
            }
            this.expect(17);
            const state = this.state.clone(), originalNoArrowAt = this.state.noArrowAt, node = this.startNodeAt(startPos, startLoc);
            let { consequent, failed } = this.tryParseConditionalConsequent(), [valid, invalid] = this.getArrowLikeExpressions(consequent);
            if (failed || invalid.length > 0) {
              const noArrowAt = [...originalNoArrowAt];
              if (invalid.length > 0) {
                this.state = state, this.state.noArrowAt = noArrowAt;
                for (let i = 0; i < invalid.length; i++)
                  noArrowAt.push(invalid[i].start);
                ({ consequent, failed } = this.tryParseConditionalConsequent()), [valid, invalid] = this.getArrowLikeExpressions(consequent);
              }
              failed && valid.length > 1 && this.raise(FlowErrors.AmbiguousConditionalArrow, { at: state.startLoc }), failed && 1 === valid.length && (this.state = state, noArrowAt.push(valid[0].start), this.state.noArrowAt = noArrowAt, { consequent, failed } = this.tryParseConditionalConsequent());
            }
            return this.getArrowLikeExpressions(consequent, true), this.state.noArrowAt = originalNoArrowAt, this.expect(14), node.test = expr, node.consequent = consequent, node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(void 0, void 0)), this.finishNode(node, "ConditionalExpression");
          }
          tryParseConditionalConsequent() {
            this.state.noArrowParamsConversionAt.push(this.state.start);
            const consequent = this.parseMaybeAssignAllowIn(), failed = !this.match(14);
            return this.state.noArrowParamsConversionAt.pop(), { consequent, failed };
          }
          getArrowLikeExpressions(node, disallowInvalid) {
            const stack = [node], arrows = [];
            for (; 0 !== stack.length; ) {
              const node2 = stack.pop();
              "ArrowFunctionExpression" === node2.type ? (node2.typeParameters || !node2.returnType ? this.finishArrowValidation(node2) : arrows.push(node2), stack.push(node2.body)) : "ConditionalExpression" === node2.type && (stack.push(node2.consequent), stack.push(node2.alternate));
            }
            return disallowInvalid ? (arrows.forEach((node2) => this.finishArrowValidation(node2)), [arrows, []]) : function(list, test) {
              const list1 = [], list2 = [];
              for (let i = 0; i < list.length; i++)
                (test(list[i], i, list) ? list1 : list2).push(list[i]);
              return [list1, list2];
            }(arrows, (node2) => node2.params.every((param) => this.isAssignable(param, true)));
          }
          finishArrowValidation(node) {
            var _node$extra;
            this.toAssignableList(node.params, null == (_node$extra = node.extra) ? void 0 : _node$extra.trailingCommaLoc, false), this.scope.enter(6), super.checkParams(node, false, true), this.scope.exit();
          }
          forwardNoArrowParamsConversionAt(node, parse4) {
            let result;
            return -1 !== this.state.noArrowParamsConversionAt.indexOf(node.start) ? (this.state.noArrowParamsConversionAt.push(this.state.start), result = parse4(), this.state.noArrowParamsConversionAt.pop()) : result = parse4(), result;
          }
          parseParenItem(node, startPos, startLoc) {
            if (node = super.parseParenItem(node, startPos, startLoc), this.eat(17) && (node.optional = true, this.resetEndLocation(node)), this.match(14)) {
              const typeCastNode = this.startNodeAt(startPos, startLoc);
              return typeCastNode.expression = node, typeCastNode.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(typeCastNode, "TypeCastExpression");
            }
            return node;
          }
          assertModuleNodeAllowed(node) {
            "ImportDeclaration" === node.type && ("type" === node.importKind || "typeof" === node.importKind) || "ExportNamedDeclaration" === node.type && "type" === node.exportKind || "ExportAllDeclaration" === node.type && "type" === node.exportKind || super.assertModuleNodeAllowed(node);
          }
          parseExport(node) {
            const decl = super.parseExport(node);
            return "ExportNamedDeclaration" !== decl.type && "ExportAllDeclaration" !== decl.type || (decl.exportKind = decl.exportKind || "value"), decl;
          }
          parseExportDeclaration(node) {
            if (this.isContextual(126)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.match(5) ? (node.specifiers = this.parseExportSpecifiers(true), super.parseExportFrom(node), null) : this.flowParseTypeAlias(declarationNode);
            }
            if (this.isContextual(127)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseOpaqueType(declarationNode, false);
            }
            if (this.isContextual(125)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseInterface(declarationNode);
            }
            if (this.shouldParseEnums() && this.isContextual(122)) {
              node.exportKind = "value";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(declarationNode);
            }
            return super.parseExportDeclaration(node);
          }
          eatExportStar(node) {
            return !!super.eatExportStar(node) || !(!this.isContextual(126) || 55 !== this.lookahead().type) && (node.exportKind = "type", this.next(), this.next(), true);
          }
          maybeParseExportNamespaceSpecifier(node) {
            const { startLoc } = this.state, hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
            return hasNamespace && "type" === node.exportKind && this.unexpected(startLoc), hasNamespace;
          }
          parseClassId(node, isStatement, optionalId) {
            super.parseClassId(node, isStatement, optionalId), this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration());
          }
          parseClassMember(classBody, member, state) {
            const { startLoc } = this.state;
            if (this.isContextual(121)) {
              if (super.parseClassMemberFromModifier(classBody, member))
                return;
              member.declare = true;
            }
            super.parseClassMember(classBody, member, state), member.declare && ("ClassProperty" !== member.type && "ClassPrivateProperty" !== member.type && "PropertyDefinition" !== member.type ? this.raise(FlowErrors.DeclareClassElement, { at: startLoc }) : member.value && this.raise(FlowErrors.DeclareClassFieldInitializer, { at: member.value }));
          }
          isIterator(word) {
            return "iterator" === word || "asyncIterator" === word;
          }
          readIterator() {
            const word = super.readWord1(), fullWord = "@@" + word;
            this.isIterator(word) && this.state.inType || this.raise(Errors.InvalidIdentifier, { at: this.state.curPosition(), identifierName: fullWord }), this.finishToken(128, fullWord);
          }
          getTokenFromCode(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            return 123 === code && 124 === next ? this.finishOp(6, 2) : !this.state.inType || 62 !== code && 60 !== code ? this.state.inType && 63 === code ? 46 === next ? this.finishOp(18, 2) : this.finishOp(17, 1) : function(current2, next2, next22) {
              return 64 === current2 && 64 === next2 && isIdentifierStart2(next22);
            }(code, next, this.input.charCodeAt(this.state.pos + 2)) ? (this.state.pos += 2, this.readIterator()) : super.getTokenFromCode(code) : this.finishOp(62 === code ? 48 : 47, 1);
          }
          isAssignable(node, isBinding) {
            return "TypeCastExpression" === node.type ? this.isAssignable(node.expression, isBinding) : super.isAssignable(node, isBinding);
          }
          toAssignable(node, isLHS = false) {
            isLHS || "AssignmentExpression" !== node.type || "TypeCastExpression" !== node.left.type || (node.left = this.typeCastToParameter(node.left)), super.toAssignable(node, isLHS);
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            for (let i = 0; i < exprList.length; i++) {
              const expr = exprList[i];
              "TypeCastExpression" === (null == expr ? void 0 : expr.type) && (exprList[i] = this.typeCastToParameter(expr));
            }
            super.toAssignableList(exprList, trailingCommaLoc, isLHS);
          }
          toReferencedList(exprList, isParenthesizedExpr) {
            for (let i = 0; i < exprList.length; i++) {
              var _expr$extra;
              const expr = exprList[i];
              !expr || "TypeCastExpression" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized || !(exprList.length > 1) && isParenthesizedExpr || this.raise(FlowErrors.TypeCastInPattern, { at: expr.typeAnnotation });
            }
            return exprList;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
            return canBePattern && !this.state.maybeInArrowParameters && this.toReferencedList(node.elements), node;
          }
          isValidLVal(type, isParenthesized, binding) {
            return "TypeCastExpression" === type || super.isValidLVal(type, isParenthesized, binding);
          }
          parseClassProperty(node) {
            return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassProperty(node);
          }
          parseClassPrivateProperty(node) {
            return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassPrivateProperty(node);
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod();
          }
          isClassProperty() {
            return this.match(14) || super.isClassProperty();
          }
          isNonstaticConstructor(method) {
            return !this.match(14) && super.isNonstaticConstructor(method);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            if (method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper), method.params && isConstructor) {
              const params = method.params;
              params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });
            } else if ("MethodDefinition" === method.type && isConstructor && method.value.params) {
              const params = method.value.params;
              params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });
            }
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
          }
          parseClassSuper(node) {
            if (super.parseClassSuper(node), node.superClass && this.match(47) && (node.superTypeParameters = this.flowParseTypeParameterInstantiation()), this.isContextual(110)) {
              this.next();
              const implemented = node.implements = [];
              do {
                const node2 = this.startNode();
                node2.id = this.flowParseRestrictedIdentifier(true), this.match(47) ? node2.typeParameters = this.flowParseTypeParameterInstantiation() : node2.typeParameters = null, implemented.push(this.finishNode(node2, "ClassImplements"));
              } while (this.eat(12));
            }
          }
          checkGetterSetterParams(method) {
            super.checkGetterSetterParams(method);
            const params = this.getObjectOrClassMethodParams(method);
            if (params.length > 0) {
              const param = params[0];
              this.isThisParam(param) && "get" === method.kind ? this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param }) : this.isThisParam(param) && this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });
            }
          }
          parsePropertyNamePrefixOperator(node) {
            node.variance = this.flowParseVariance();
          }
          parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            let typeParameters;
            prop.variance && this.unexpected(prop.variance.loc.start), delete prop.variance, this.match(47) && !isAccessor && (typeParameters = this.flowParseTypeParameterDeclaration(), this.match(10) || this.unexpected());
            const result = super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
            return typeParameters && ((result.value || result).typeParameters = typeParameters), result;
          }
          parseAssignableListItemTypes(param) {
            return this.eat(17) && ("Identifier" !== param.type && this.raise(FlowErrors.PatternIsOptional, { at: param }), this.isThisParam(param) && this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param }), param.optional = true), this.match(14) ? param.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(param) && this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param }), this.match(29) && this.isThisParam(param) && this.raise(FlowErrors.ThisParamNoDefault, { at: param }), this.resetEndLocation(param), param;
          }
          parseMaybeDefault(startPos, startLoc, left) {
            const node = super.parseMaybeDefault(startPos, startLoc, left);
            return "AssignmentPattern" === node.type && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(FlowErrors.TypeBeforeInitializer, { at: node.typeAnnotation }), node;
          }
          shouldParseDefaultImport(node) {
            return hasTypeImportKind(node) ? isMaybeDefaultImport(this.state.type) : super.shouldParseDefaultImport(node);
          }
          parseImportSpecifierLocal(node, specifier, type) {
            specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type));
          }
          maybeParseDefaultImportSpecifier(node) {
            node.importKind = "value";
            let kind = null;
            if (this.match(87) ? kind = "typeof" : this.isContextual(126) && (kind = "type"), kind) {
              const lh = this.lookahead(), { type } = lh;
              "type" === kind && 55 === type && this.unexpected(null, lh.type), (isMaybeDefaultImport(type) || 5 === type || 55 === type) && (this.next(), node.importKind = kind);
            }
            return super.maybeParseDefaultImportSpecifier(node);
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
            const firstIdent = specifier.imported;
            let specifierTypeKind = null;
            "Identifier" === firstIdent.type && ("type" === firstIdent.name ? specifierTypeKind = "type" : "typeof" === firstIdent.name && (specifierTypeKind = "typeof"));
            let isBinding = false;
            if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
              const as_ident = this.parseIdentifier(true);
              null === specifierTypeKind || tokenIsKeywordOrIdentifier(this.state.type) ? (specifier.imported = firstIdent, specifier.importKind = null, specifier.local = this.parseIdentifier()) : (specifier.imported = as_ident, specifier.importKind = specifierTypeKind, specifier.local = cloneIdentifier(as_ident));
            } else {
              if (null !== specifierTypeKind && tokenIsKeywordOrIdentifier(this.state.type))
                specifier.imported = this.parseIdentifier(true), specifier.importKind = specifierTypeKind;
              else {
                if (importedIsString)
                  throw this.raise(Errors.ImportBindingIsString, { at: specifier, importName: firstIdent.value });
                specifier.imported = firstIdent, specifier.importKind = null;
              }
              this.eatContextual(93) ? specifier.local = this.parseIdentifier() : (isBinding = true, specifier.local = cloneIdentifier(specifier.imported));
            }
            const specifierIsTypeImport = hasTypeImportKind(specifier);
            return isInTypeOnlyImport && specifierIsTypeImport && this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, { at: specifier }), (isInTypeOnlyImport || specifierIsTypeImport) && this.checkReservedType(specifier.local.name, specifier.local.loc.start, true), !isBinding || isInTypeOnlyImport || specifierIsTypeImport || this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true), this.finishImportSpecifier(specifier, "ImportSpecifier");
          }
          parseBindingAtom() {
            return 78 === this.state.type ? this.parseIdentifier(true) : super.parseBindingAtom();
          }
          parseFunctionParams(node, allowModifiers) {
            const kind = node.kind;
            "get" !== kind && "set" !== kind && this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), super.parseFunctionParams(node, allowModifiers);
          }
          parseVarId(decl, kind) {
            super.parseVarId(decl, kind), this.match(14) && (decl.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(decl.id));
          }
          parseAsyncArrowFromCallExpression(node, call) {
            if (this.match(14)) {
              const oldNoAnonFunctionType = this.state.noAnonFunctionType;
              this.state.noAnonFunctionType = true, node.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = oldNoAnonFunctionType;
            }
            return super.parseAsyncArrowFromCallExpression(node, call);
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            var _jsx;
            let jsx, state = null;
            if (this.hasPlugin("jsx") && (this.match(138) || this.match(47))) {
              if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error)
                return jsx.node;
              const { context } = this.state, currentContext = context[context.length - 1];
              currentContext !== types2.j_oTag && currentContext !== types2.j_expr || context.pop();
            }
            if (null != (_jsx = jsx) && _jsx.error || this.match(47)) {
              var _jsx2, _jsx3;
              let typeParameters;
              state = state || this.state.clone();
              const arrow = this.tryParse((abort) => {
                var _arrowExpression$extr;
                typeParameters = this.flowParseTypeParameterDeclaration();
                const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
                  const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
                  return this.resetStartLocationFromNode(result, typeParameters), result;
                });
                null != (_arrowExpression$extr = arrowExpression2.extra) && _arrowExpression$extr.parenthesized && abort();
                const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
                return "ArrowFunctionExpression" !== expr.type && abort(), expr.typeParameters = typeParameters, this.resetStartLocationFromNode(expr, typeParameters), arrowExpression2;
              }, state);
              let arrowExpression = null;
              if (arrow.node && "ArrowFunctionExpression" === this.maybeUnwrapTypeCastExpression(arrow.node).type) {
                if (!arrow.error && !arrow.aborted)
                  return arrow.node.async && this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, { at: typeParameters }), arrow.node;
                arrowExpression = arrow.node;
              }
              if (null != (_jsx2 = jsx) && _jsx2.node)
                return this.state = jsx.failState, jsx.node;
              if (arrowExpression)
                return this.state = arrow.failState, arrowExpression;
              if (null != (_jsx3 = jsx) && _jsx3.thrown)
                throw jsx.error;
              if (arrow.thrown)
                throw arrow.error;
              throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, { at: typeParameters });
            }
            return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
          }
          parseArrow(node) {
            if (this.match(14)) {
              const result = this.tryParse(() => {
                const oldNoAnonFunctionType = this.state.noAnonFunctionType;
                this.state.noAnonFunctionType = true;
                const typeNode = this.startNode();
                return [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.canInsertSemicolon() && this.unexpected(), this.match(19) || this.unexpected(), typeNode;
              });
              if (result.thrown)
                return null;
              result.error && (this.state = result.failState), node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
            }
            return super.parseArrow(node);
          }
          shouldParseArrow(params) {
            return this.match(14) || super.shouldParseArrow(params);
          }
          setArrowFunctionParameters(node, params) {
            -1 !== this.state.noArrowParamsConversionAt.indexOf(node.start) ? node.params = params : super.setArrowFunctionParameters(node, params);
          }
          checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
            if (!isArrowFunction || -1 === this.state.noArrowParamsConversionAt.indexOf(node.start)) {
              for (let i = 0; i < node.params.length; i++)
                this.isThisParam(node.params[i]) && i > 0 && this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });
              return super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
            }
          }
          parseParenAndDistinguishExpression(canBeArrow) {
            return super.parseParenAndDistinguishExpression(canBeArrow && -1 === this.state.noArrowAt.indexOf(this.state.start));
          }
          parseSubscripts(base, startPos, startLoc, noCalls) {
            if ("Identifier" === base.type && "async" === base.name && -1 !== this.state.noArrowAt.indexOf(startPos)) {
              this.next();
              const node = this.startNodeAt(startPos, startLoc);
              node.callee = base, node.arguments = super.parseCallExpressionArguments(11, false), base = this.finishNode(node, "CallExpression");
            } else if ("Identifier" === base.type && "async" === base.name && this.match(47)) {
              const state = this.state.clone(), arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);
              if (!arrow.error && !arrow.aborted)
                return arrow.node;
              const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);
              if (result.node && !result.error)
                return result.node;
              if (arrow.node)
                return this.state = arrow.failState, arrow.node;
              if (result.node)
                return this.state = result.failState, result.node;
              throw arrow.error || result.error;
            }
            return super.parseSubscripts(base, startPos, startLoc, noCalls);
          }
          parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {
            if (this.match(18) && this.isLookaheadToken_lt()) {
              if (subscriptState.optionalChainMember = true, noCalls)
                return subscriptState.stop = true, base;
              this.next();
              const node = this.startNodeAt(startPos, startLoc);
              return node.callee = base, node.typeArguments = this.flowParseTypeParameterInstantiation(), this.expect(10), node.arguments = this.parseCallExpressionArguments(11, false), node.optional = true, this.finishCallExpression(node, true);
            }
            if (!noCalls && this.shouldParseTypes() && this.match(47)) {
              const node = this.startNodeAt(startPos, startLoc);
              node.callee = base;
              const result = this.tryParse(() => (node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew(), this.expect(10), node.arguments = super.parseCallExpressionArguments(11, false), subscriptState.optionalChainMember && (node.optional = false), this.finishCallExpression(node, subscriptState.optionalChainMember)));
              if (result.node)
                return result.error && (this.state = result.failState), result.node;
            }
            return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);
          }
          parseNewCallee(node) {
            super.parseNewCallee(node);
            let targs = null;
            this.shouldParseTypes() && this.match(47) && (targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node), node.typeArguments = targs;
          }
          parseAsyncArrowWithTypeParameters(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc);
            if (this.parseFunctionParams(node), this.parseArrow(node))
              return super.parseArrowExpression(node, void 0, true);
          }
          readToken_mult_modulo(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (42 === code && 47 === next && this.state.hasFlowComment)
              return this.state.hasFlowComment = false, this.state.pos += 2, void this.nextToken();
            super.readToken_mult_modulo(code);
          }
          readToken_pipe_amp(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            124 !== code || 125 !== next ? super.readToken_pipe_amp(code) : this.finishOp(9, 2);
          }
          parseTopLevel(file, program) {
            const fileNode = super.parseTopLevel(file, program);
            return this.state.hasFlowComment && this.raise(FlowErrors.UnterminatedFlowComment, { at: this.state.curPosition() }), fileNode;
          }
          skipBlockComment() {
            if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
              if (this.state.hasFlowComment)
                throw this.raise(FlowErrors.NestedFlowComment, { at: this.state.startLoc });
              this.hasFlowCommentCompletion();
              const commentSkip = this.skipFlowComment();
              commentSkip && (this.state.pos += commentSkip, this.state.hasFlowComment = true);
            } else {
              if (!this.state.hasFlowComment)
                return super.skipBlockComment();
              {
                const end = this.input.indexOf("*-/", this.state.pos + 2);
                if (-1 === end)
                  throw this.raise(Errors.UnterminatedComment, { at: this.state.curPosition() });
                this.state.pos = end + 2 + 3;
              }
            }
          }
          skipFlowComment() {
            const { pos } = this.state;
            let shiftToFirstNonWhiteSpace = 2;
            for (; [32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace)); )
              shiftToFirstNonWhiteSpace++;
            const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos), ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
            return 58 === ch2 && 58 === ch3 ? shiftToFirstNonWhiteSpace + 2 : "flow-include" === this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) ? shiftToFirstNonWhiteSpace + 12 : 58 === ch2 && 58 !== ch3 && shiftToFirstNonWhiteSpace;
          }
          hasFlowCommentCompletion() {
            if (-1 === this.input.indexOf("*/", this.state.pos))
              throw this.raise(Errors.UnterminatedComment, { at: this.state.curPosition() });
          }
          flowEnumErrorBooleanMemberNotInitialized(loc, { enumName, memberName }) {
            this.raise(FlowErrors.EnumBooleanMemberNotInitialized, { at: loc, memberName, enumName });
          }
          flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
            return this.raise(enumContext.explicitType ? "symbol" === enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType : FlowErrors.EnumInvalidMemberInitializerUnknownType, Object.assign({ at: loc }, enumContext));
          }
          flowEnumErrorNumberMemberNotInitialized(loc, { enumName, memberName }) {
            this.raise(FlowErrors.EnumNumberMemberNotInitialized, { at: loc, enumName, memberName });
          }
          flowEnumErrorStringMemberInconsistentlyInitailized(node, { enumName }) {
            this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, { at: node, enumName });
          }
          flowEnumMemberInit() {
            const startLoc = this.state.startLoc, endOfInit = () => this.match(12) || this.match(8);
            switch (this.state.type) {
              case 130: {
                const literal2 = this.parseNumericLiteral(this.state.value);
                return endOfInit() ? { type: "number", loc: literal2.loc.start, value: literal2 } : { type: "invalid", loc: startLoc };
              }
              case 129: {
                const literal2 = this.parseStringLiteral(this.state.value);
                return endOfInit() ? { type: "string", loc: literal2.loc.start, value: literal2 } : { type: "invalid", loc: startLoc };
              }
              case 85:
              case 86: {
                const literal2 = this.parseBooleanLiteral(this.match(85));
                return endOfInit() ? { type: "boolean", loc: literal2.loc.start, value: literal2 } : { type: "invalid", loc: startLoc };
              }
              default:
                return { type: "invalid", loc: startLoc };
            }
          }
          flowEnumMemberRaw() {
            const loc = this.state.startLoc;
            return { id: this.parseIdentifier(true), init: this.eat(29) ? this.flowEnumMemberInit() : { type: "none", loc } };
          }
          flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
            const { explicitType } = context;
            null !== explicitType && explicitType !== expectedType && this.flowEnumErrorInvalidMemberInitializer(loc, context);
          }
          flowEnumMembers({ enumName, explicitType }) {
            const seenNames = /* @__PURE__ */ new Set(), members = { booleanMembers: [], numberMembers: [], stringMembers: [], defaultedMembers: [] };
            let hasUnknownMembers = false;
            for (; !this.match(8); ) {
              if (this.eat(21)) {
                hasUnknownMembers = true;
                break;
              }
              const memberNode = this.startNode(), { id, init } = this.flowEnumMemberRaw(), memberName = id.name;
              if ("" === memberName)
                continue;
              /^[a-z]/.test(memberName) && this.raise(FlowErrors.EnumInvalidMemberName, { at: id, memberName, suggestion: memberName[0].toUpperCase() + memberName.slice(1), enumName }), seenNames.has(memberName) && this.raise(FlowErrors.EnumDuplicateMemberName, { at: id, memberName, enumName }), seenNames.add(memberName);
              const context = { enumName, explicitType, memberName };
              switch (memberNode.id = id, init.type) {
                case "boolean":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean"), memberNode.init = init.value, members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
                  break;
                case "number":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number"), memberNode.init = init.value, members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
                  break;
                case "string":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string"), memberNode.init = init.value, members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
                  break;
                case "invalid":
                  throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
                case "none":
                  switch (explicitType) {
                    case "boolean":
                      this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                      break;
                    case "number":
                      this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                      break;
                    default:
                      members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
                  }
              }
              this.match(8) || this.expect(12);
            }
            return { members, hasUnknownMembers };
          }
          flowEnumStringMembers(initializedMembers, defaultedMembers, { enumName }) {
            if (0 === initializedMembers.length)
              return defaultedMembers;
            if (0 === defaultedMembers.length)
              return initializedMembers;
            if (defaultedMembers.length > initializedMembers.length) {
              for (const member of initializedMembers)
                this.flowEnumErrorStringMemberInconsistentlyInitailized(member, { enumName });
              return defaultedMembers;
            }
            for (const member of defaultedMembers)
              this.flowEnumErrorStringMemberInconsistentlyInitailized(member, { enumName });
            return initializedMembers;
          }
          flowEnumParseExplicitType({ enumName }) {
            if (!this.eatContextual(101))
              return null;
            if (!tokenIsIdentifier(this.state.type))
              throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, { at: this.state.startLoc, enumName });
            const { value } = this.state;
            return this.next(), "boolean" !== value && "number" !== value && "string" !== value && "symbol" !== value && this.raise(FlowErrors.EnumInvalidExplicitType, { at: this.state.startLoc, enumName, invalidEnumType: value }), value;
          }
          flowEnumBody(node, id) {
            const enumName = id.name, nameLoc = id.loc.start, explicitType = this.flowEnumParseExplicitType({ enumName });
            this.expect(5);
            const { members, hasUnknownMembers } = this.flowEnumMembers({ enumName, explicitType });
            switch (node.hasUnknownMembers = hasUnknownMembers, explicitType) {
              case "boolean":
                return node.explicitType = true, node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
              case "number":
                return node.explicitType = true, node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
              case "string":
                return node.explicitType = true, node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
              case "symbol":
                return node.members = members.defaultedMembers, this.expect(8), this.finishNode(node, "EnumSymbolBody");
              default: {
                const empty2 = () => (node.members = [], this.expect(8), this.finishNode(node, "EnumStringBody"));
                node.explicitType = false;
                const boolsLen = members.booleanMembers.length, numsLen = members.numberMembers.length, strsLen = members.stringMembers.length, defaultedLen = members.defaultedMembers.length;
                if (boolsLen || numsLen || strsLen || defaultedLen) {
                  if (boolsLen || numsLen) {
                    if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
                      for (const member of members.defaultedMembers)
                        this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, { enumName, memberName: member.id.name });
                      return node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
                    }
                    if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
                      for (const member of members.defaultedMembers)
                        this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, { enumName, memberName: member.id.name });
                      return node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
                    }
                    return this.raise(FlowErrors.EnumInconsistentMemberValues, { at: nameLoc, enumName }), empty2();
                  }
                  return node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
                }
                return empty2();
              }
            }
          }
          flowParseEnumDeclaration(node) {
            const id = this.parseIdentifier();
            return node.id = id, node.body = this.flowEnumBody(this.startNode(), id), this.finishNode(node, "EnumDeclaration");
          }
          isLookaheadToken_lt() {
            const next = this.nextTokenStart();
            if (60 === this.input.charCodeAt(next)) {
              const afterNext = this.input.charCodeAt(next + 1);
              return 60 !== afterNext && 61 !== afterNext;
            }
            return false;
          }
          maybeUnwrapTypeCastExpression(node) {
            return "TypeCastExpression" === node.type ? node.expression : node;
          }
        }, typescript: (superClass) => class extends superClass {
          getScopeHandler() {
            return TypeScriptScopeHandler;
          }
          tsIsIdentifier() {
            return tokenIsIdentifier(this.state.type);
          }
          tsTokenCanFollowModifier() {
            return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(134) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
          }
          tsNextTokenCanFollowModifier() {
            return this.next(), this.tsTokenCanFollowModifier();
          }
          tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
            if (!tokenIsIdentifier(this.state.type) && 58 !== this.state.type)
              return;
            const modifier = this.state.value;
            if (-1 !== allowedModifiers.indexOf(modifier)) {
              if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks())
                return;
              if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this)))
                return modifier;
            }
          }
          tsParseModifiers({ modified, allowedModifiers, disallowedModifiers, stopOnStartOfClassStaticBlock, errorTemplate = TSErrors.InvalidModifierOnTypeMember }) {
            const enforceOrder = (loc, modifier, before, after) => {
              modifier === before && modified[after] && this.raise(TSErrors.InvalidModifiersOrder, { at: loc, orderedModifiers: [before, after] });
            }, incompatible = (loc, modifier, mod1, mod2) => {
              (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) && this.raise(TSErrors.IncompatibleModifiers, { at: loc, modifiers: [mod1, mod2] });
            };
            for (; ; ) {
              const { startLoc } = this.state, modifier = this.tsParseModifier(allowedModifiers.concat(null != disallowedModifiers ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
              if (!modifier)
                break;
              tsIsAccessModifier(modifier) ? modified.accessibility ? this.raise(TSErrors.DuplicateAccessibilityModifier, { at: startLoc, modifier }) : (enforceOrder(startLoc, modifier, modifier, "override"), enforceOrder(startLoc, modifier, modifier, "static"), enforceOrder(startLoc, modifier, modifier, "readonly"), modified.accessibility = modifier) : tsIsVarianceAnnotations(modifier) ? (modified[modifier] && this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier }), modified[modifier] = true, enforceOrder(startLoc, modifier, "in", "out")) : (Object.hasOwnProperty.call(modified, modifier) ? this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier }) : (enforceOrder(startLoc, modifier, "static", "readonly"), enforceOrder(startLoc, modifier, "static", "override"), enforceOrder(startLoc, modifier, "override", "readonly"), enforceOrder(startLoc, modifier, "abstract", "override"), incompatible(startLoc, modifier, "declare", "override"), incompatible(startLoc, modifier, "static", "abstract")), modified[modifier] = true), null != disallowedModifiers && disallowedModifiers.includes(modifier) && this.raise(errorTemplate, { at: startLoc, modifier });
            }
          }
          tsIsListTerminator(kind) {
            switch (kind) {
              case "EnumMembers":
              case "TypeMembers":
                return this.match(8);
              case "HeritageClauseElement":
                return this.match(5);
              case "TupleElementTypes":
                return this.match(3);
              case "TypeParametersOrArguments":
                return this.match(48);
            }
            throw new Error("Unreachable");
          }
          tsParseList(kind, parseElement) {
            const result = [];
            for (; !this.tsIsListTerminator(kind); )
              result.push(parseElement());
            return result;
          }
          tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
            return function(x) {
              if (null == x)
                throw new Error(`Unexpected ${x} value.`);
              return x;
            }(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
          }
          tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
            const result = [];
            let trailingCommaPos = -1;
            for (; !this.tsIsListTerminator(kind); ) {
              trailingCommaPos = -1;
              const element = parseElement();
              if (null == element)
                return;
              if (result.push(element), !this.eat(12)) {
                if (this.tsIsListTerminator(kind))
                  break;
                return void (expectSuccess && this.expect(12));
              }
              trailingCommaPos = this.state.lastTokStart;
            }
            return refTrailingCommaPos && (refTrailingCommaPos.value = trailingCommaPos), result;
          }
          tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
            skipFirstToken || (bracket ? this.expect(0) : this.expect(47));
            const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
            return bracket ? this.expect(3) : this.expect(48), result;
          }
          tsParseImportType() {
            const node = this.startNode();
            return this.expect(83), this.expect(10), this.match(129) || this.raise(TSErrors.UnsupportedImportTypeArgument, { at: this.state.startLoc }), node.argument = super.parseExprAtom(), this.expect(11), this.eat(16) && (node.qualifier = this.tsParseEntityName()), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSImportType");
          }
          tsParseEntityName(allowReservedWords = true) {
            let entity = this.parseIdentifier(allowReservedWords);
            for (; this.eat(16); ) {
              const node = this.startNodeAtNode(entity);
              node.left = entity, node.right = this.parseIdentifier(allowReservedWords), entity = this.finishNode(node, "TSQualifiedName");
            }
            return entity;
          }
          tsParseTypeReference() {
            const node = this.startNode();
            return node.typeName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeReference");
          }
          tsParseThisTypePredicate(lhs) {
            this.next();
            const node = this.startNodeAtNode(lhs);
            return node.parameterName = lhs, node.typeAnnotation = this.tsParseTypeAnnotation(false), node.asserts = false, this.finishNode(node, "TSTypePredicate");
          }
          tsParseThisTypeNode() {
            const node = this.startNode();
            return this.next(), this.finishNode(node, "TSThisType");
          }
          tsParseTypeQuery() {
            const node = this.startNode();
            return this.expect(87), this.match(83) ? node.exprName = this.tsParseImportType() : node.exprName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeQuery");
          }
          tsParseInOutModifiers(node) {
            this.tsParseModifiers({ modified: node, allowedModifiers: ["in", "out"], disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: TSErrors.InvalidModifierOnTypeParameter });
          }
          tsParseNoneModifiers(node) {
            this.tsParseModifiers({ modified: node, allowedModifiers: [], disallowedModifiers: ["in", "out"], errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions });
          }
          tsParseTypeParameter(parseModifiers = this.tsParseNoneModifiers.bind(this)) {
            const node = this.startNode();
            return parseModifiers(node), node.name = this.tsParseTypeParameterName(), node.constraint = this.tsEatThenParseType(81), node.default = this.tsEatThenParseType(29), this.finishNode(node, "TSTypeParameter");
          }
          tsTryParseTypeParameters(parseModifiers) {
            if (this.match(47))
              return this.tsParseTypeParameters(parseModifiers);
          }
          tsParseTypeParameters(parseModifiers) {
            const node = this.startNode();
            this.match(47) || this.match(138) ? this.next() : this.unexpected();
            const refTrailingCommaPos = { value: -1 };
            return node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos), 0 === node.params.length && this.raise(TSErrors.EmptyTypeParameters, { at: node }), -1 !== refTrailingCommaPos.value && this.addExtra(node, "trailingComma", refTrailingCommaPos.value), this.finishNode(node, "TSTypeParameterDeclaration");
          }
          tsTryNextParseConstantContext() {
            if (75 !== this.lookahead().type)
              return null;
            this.next();
            const typeReference = this.tsParseTypeReference();
            return typeReference.typeParameters && this.raise(TSErrors.CannotFindName, { at: typeReference.typeName, name: "const" }), typeReference;
          }
          tsFillSignature(returnToken, signature) {
            const returnTokenRequired = 19 === returnToken;
            signature.typeParameters = this.tsTryParseTypeParameters(), this.expect(10), signature.parameters = this.tsParseBindingListForSignature(), (returnTokenRequired || this.match(returnToken)) && (signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken));
          }
          tsParseBindingListForSignature() {
            return super.parseBindingList(11, 41).map((pattern) => ("Identifier" !== pattern.type && "RestElement" !== pattern.type && "ObjectPattern" !== pattern.type && "ArrayPattern" !== pattern.type && this.raise(TSErrors.UnsupportedSignatureParameterKind, { at: pattern, type: pattern.type }), pattern));
          }
          tsParseTypeMemberSemicolon() {
            this.eat(12) || this.isLineTerminator() || this.expect(13);
          }
          tsParseSignatureMember(kind, node) {
            return this.tsFillSignature(14, node), this.tsParseTypeMemberSemicolon(), this.finishNode(node, kind);
          }
          tsIsUnambiguouslyIndexSignature() {
            return this.next(), !!tokenIsIdentifier(this.state.type) && (this.next(), this.match(14));
          }
          tsTryParseIndexSignature(node) {
            if (!this.match(0) || !this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))
              return;
            this.expect(0);
            const id = this.parseIdentifier();
            id.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(id), this.expect(3), node.parameters = [id];
            const type = this.tsTryParseTypeAnnotation();
            return type && (node.typeAnnotation = type), this.tsParseTypeMemberSemicolon(), this.finishNode(node, "TSIndexSignature");
          }
          tsParsePropertyOrMethodSignature(node, readonly) {
            this.eat(17) && (node.optional = true);
            const nodeAny = node;
            if (this.match(10) || this.match(47)) {
              readonly && this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });
              const method = nodeAny;
              method.kind && this.match(47) && this.raise(TSErrors.AccesorCannotHaveTypeParameters, { at: this.state.curPosition() }), this.tsFillSignature(14, method), this.tsParseTypeMemberSemicolon();
              const paramsKey = "parameters", returnTypeKey = "typeAnnotation";
              if ("get" === method.kind)
                method[paramsKey].length > 0 && (this.raise(Errors.BadGetterArity, { at: this.state.curPosition() }), this.isThisParam(method[paramsKey][0]) && this.raise(TSErrors.AccesorCannotDeclareThisParameter, { at: this.state.curPosition() }));
              else if ("set" === method.kind) {
                if (1 !== method[paramsKey].length)
                  this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });
                else {
                  const firstParameter = method[paramsKey][0];
                  this.isThisParam(firstParameter) && this.raise(TSErrors.AccesorCannotDeclareThisParameter, { at: this.state.curPosition() }), "Identifier" === firstParameter.type && firstParameter.optional && this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, { at: this.state.curPosition() }), "RestElement" === firstParameter.type && this.raise(TSErrors.SetAccesorCannotHaveRestParameter, { at: this.state.curPosition() });
                }
                method[returnTypeKey] && this.raise(TSErrors.SetAccesorCannotHaveReturnType, { at: method[returnTypeKey] });
              } else
                method.kind = "method";
              return this.finishNode(method, "TSMethodSignature");
            }
            {
              const property = nodeAny;
              readonly && (property.readonly = true);
              const type = this.tsTryParseTypeAnnotation();
              return type && (property.typeAnnotation = type), this.tsParseTypeMemberSemicolon(), this.finishNode(property, "TSPropertySignature");
            }
          }
          tsParseTypeMember() {
            const node = this.startNode();
            if (this.match(10) || this.match(47))
              return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
            if (this.match(77)) {
              const id = this.startNode();
              return this.next(), this.match(10) || this.match(47) ? this.tsParseSignatureMember("TSConstructSignatureDeclaration", node) : (node.key = this.createIdentifier(id, "new"), this.tsParsePropertyOrMethodSignature(node, false));
            }
            this.tsParseModifiers({ modified: node, allowedModifiers: ["readonly"], disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"] });
            const idx = this.tsTryParseIndexSignature(node);
            return idx || (super.parsePropertyName(node), node.computed || "Identifier" !== node.key.type || "get" !== node.key.name && "set" !== node.key.name || !this.tsTokenCanFollowModifier() || (node.kind = node.key.name, super.parsePropertyName(node)), this.tsParsePropertyOrMethodSignature(node, !!node.readonly));
          }
          tsParseTypeLiteral() {
            const node = this.startNode();
            return node.members = this.tsParseObjectTypeMembers(), this.finishNode(node, "TSTypeLiteral");
          }
          tsParseObjectTypeMembers() {
            this.expect(5);
            const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
            return this.expect(8), members;
          }
          tsIsStartOfMappedType() {
            return this.next(), this.eat(53) ? this.isContextual(118) : (this.isContextual(118) && this.next(), !!this.match(0) && (this.next(), !!this.tsIsIdentifier() && (this.next(), this.match(58))));
          }
          tsParseMappedTypeParameter() {
            const node = this.startNode();
            return node.name = this.tsParseTypeParameterName(), node.constraint = this.tsExpectThenParseType(58), this.finishNode(node, "TSTypeParameter");
          }
          tsParseMappedType() {
            const node = this.startNode();
            return this.expect(5), this.match(53) ? (node.readonly = this.state.value, this.next(), this.expectContextual(118)) : this.eatContextual(118) && (node.readonly = true), this.expect(0), node.typeParameter = this.tsParseMappedTypeParameter(), node.nameType = this.eatContextual(93) ? this.tsParseType() : null, this.expect(3), this.match(53) ? (node.optional = this.state.value, this.next(), this.expect(17)) : this.eat(17) && (node.optional = true), node.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(8), this.finishNode(node, "TSMappedType");
          }
          tsParseTupleType() {
            const node = this.startNode();
            node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
            let seenOptionalElement = false, labeledElements = null;
            return node.elementTypes.forEach((elementNode) => {
              const { type } = elementNode;
              !seenOptionalElement || "TSRestType" === type || "TSOptionalType" === type || "TSNamedTupleMember" === type && elementNode.optional || this.raise(TSErrors.OptionalTypeBeforeRequired, { at: elementNode }), seenOptionalElement || (seenOptionalElement = "TSNamedTupleMember" === type && elementNode.optional || "TSOptionalType" === type);
              let checkType = type;
              "TSRestType" === type && (checkType = (elementNode = elementNode.typeAnnotation).type);
              const isLabeled = "TSNamedTupleMember" === checkType;
              null != labeledElements || (labeledElements = isLabeled), labeledElements !== isLabeled && this.raise(TSErrors.MixedLabeledAndUnlabeledElements, { at: elementNode });
            }), this.finishNode(node, "TSTupleType");
          }
          tsParseTupleElementType() {
            const { start: startPos, startLoc } = this.state, rest = this.eat(21);
            let type = this.tsParseType();
            const optional = this.eat(17);
            if (this.eat(14)) {
              const labeledNode = this.startNodeAtNode(type);
              labeledNode.optional = optional, "TSTypeReference" !== type.type || type.typeParameters || "Identifier" !== type.typeName.type ? (this.raise(TSErrors.InvalidTupleMemberLabel, { at: type }), labeledNode.label = type) : labeledNode.label = type.typeName, labeledNode.elementType = this.tsParseType(), type = this.finishNode(labeledNode, "TSNamedTupleMember");
            } else if (optional) {
              const optionalTypeNode = this.startNodeAtNode(type);
              optionalTypeNode.typeAnnotation = type, type = this.finishNode(optionalTypeNode, "TSOptionalType");
            }
            if (rest) {
              const restNode = this.startNodeAt(startPos, startLoc);
              restNode.typeAnnotation = type, type = this.finishNode(restNode, "TSRestType");
            }
            return type;
          }
          tsParseParenthesizedType() {
            const node = this.startNode();
            return this.expect(10), node.typeAnnotation = this.tsParseType(), this.expect(11), this.finishNode(node, "TSParenthesizedType");
          }
          tsParseFunctionOrConstructorType(type, abstract) {
            const node = this.startNode();
            return "TSConstructorType" === type && (node.abstract = !!abstract, abstract && this.next(), this.next()), this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node)), this.finishNode(node, type);
          }
          tsParseLiteralTypeNode() {
            const node = this.startNode();
            return node.literal = (() => {
              switch (this.state.type) {
                case 130:
                case 131:
                case 129:
                case 85:
                case 86:
                  return super.parseExprAtom();
                default:
                  throw this.unexpected();
              }
            })(), this.finishNode(node, "TSLiteralType");
          }
          tsParseTemplateLiteralType() {
            const node = this.startNode();
            return node.literal = super.parseTemplate(false), this.finishNode(node, "TSLiteralType");
          }
          parseTemplateSubstitution() {
            return this.state.inType ? this.tsParseType() : super.parseTemplateSubstitution();
          }
          tsParseThisTypeOrThisTypePredicate() {
            const thisKeyword = this.tsParseThisTypeNode();
            return this.isContextual(113) && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(thisKeyword) : thisKeyword;
          }
          tsParseNonArrayType() {
            switch (this.state.type) {
              case 129:
              case 130:
              case 131:
              case 85:
              case 86:
                return this.tsParseLiteralTypeNode();
              case 53:
                if ("-" === this.state.value) {
                  const node = this.startNode(), nextToken = this.lookahead();
                  if (130 !== nextToken.type && 131 !== nextToken.type)
                    throw this.unexpected();
                  return node.literal = this.parseMaybeUnary(), this.finishNode(node, "TSLiteralType");
                }
                break;
              case 78:
                return this.tsParseThisTypeOrThisTypePredicate();
              case 87:
                return this.tsParseTypeQuery();
              case 83:
                return this.tsParseImportType();
              case 5:
                return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
              case 0:
                return this.tsParseTupleType();
              case 10:
                return this.tsParseParenthesizedType();
              case 25:
              case 24:
                return this.tsParseTemplateLiteralType();
              default: {
                const { type } = this.state;
                if (tokenIsIdentifier(type) || 88 === type || 84 === type) {
                  const nodeType = 88 === type ? "TSVoidKeyword" : 84 === type ? "TSNullKeyword" : function(value) {
                    switch (value) {
                      case "any":
                        return "TSAnyKeyword";
                      case "boolean":
                        return "TSBooleanKeyword";
                      case "bigint":
                        return "TSBigIntKeyword";
                      case "never":
                        return "TSNeverKeyword";
                      case "number":
                        return "TSNumberKeyword";
                      case "object":
                        return "TSObjectKeyword";
                      case "string":
                        return "TSStringKeyword";
                      case "symbol":
                        return "TSSymbolKeyword";
                      case "undefined":
                        return "TSUndefinedKeyword";
                      case "unknown":
                        return "TSUnknownKeyword";
                      default:
                        return;
                    }
                  }(this.state.value);
                  if (void 0 !== nodeType && 46 !== this.lookaheadCharCode()) {
                    const node = this.startNode();
                    return this.next(), this.finishNode(node, nodeType);
                  }
                  return this.tsParseTypeReference();
                }
              }
            }
            throw this.unexpected();
          }
          tsParseArrayTypeOrHigher() {
            let type = this.tsParseNonArrayType();
            for (; !this.hasPrecedingLineBreak() && this.eat(0); )
              if (this.match(3)) {
                const node = this.startNodeAtNode(type);
                node.elementType = type, this.expect(3), type = this.finishNode(node, "TSArrayType");
              } else {
                const node = this.startNodeAtNode(type);
                node.objectType = type, node.indexType = this.tsParseType(), this.expect(3), type = this.finishNode(node, "TSIndexedAccessType");
              }
            return type;
          }
          tsParseTypeOperator() {
            const node = this.startNode(), operator = this.state.value;
            return this.next(), node.operator = operator, node.typeAnnotation = this.tsParseTypeOperatorOrHigher(), "readonly" === operator && this.tsCheckTypeAnnotationForReadOnly(node), this.finishNode(node, "TSTypeOperator");
          }
          tsCheckTypeAnnotationForReadOnly(node) {
            switch (node.typeAnnotation.type) {
              case "TSTupleType":
              case "TSArrayType":
                return;
              default:
                this.raise(TSErrors.UnexpectedReadonly, { at: node });
            }
          }
          tsParseInferType() {
            const node = this.startNode();
            this.expectContextual(112);
            const typeParameter = this.startNode();
            return typeParameter.name = this.tsParseTypeParameterName(), typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType()), node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter"), this.finishNode(node, "TSInferType");
          }
          tsParseConstraintForInferType() {
            if (this.eat(81)) {
              const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
              if (this.state.inDisallowConditionalTypesContext || !this.match(17))
                return constraint;
            }
          }
          tsParseTypeOperatorOrHigher() {
            var token;
            return (token = this.state.type) >= 117 && token <= 119 && !this.state.containsEsc ? this.tsParseTypeOperator() : this.isContextual(112) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
          }
          tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
            const node = this.startNode(), hasLeadingOperator = this.eat(operator), types3 = [];
            do {
              types3.push(parseConstituentType());
            } while (this.eat(operator));
            return 1 !== types3.length || hasLeadingOperator ? (node.types = types3, this.finishNode(node, kind)) : types3[0];
          }
          tsParseIntersectionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
          }
          tsParseUnionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
          }
          tsIsStartOfFunctionType() {
            return !!this.match(47) || this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
          }
          tsSkipParameterStart() {
            if (tokenIsIdentifier(this.state.type) || this.match(78))
              return this.next(), true;
            if (this.match(5)) {
              const { errors } = this.state, previousErrorCount = errors.length;
              try {
                return this.parseObjectLike(8, true), errors.length === previousErrorCount;
              } catch (_unused) {
                return false;
              }
            }
            if (this.match(0)) {
              this.next();
              const { errors } = this.state, previousErrorCount = errors.length;
              try {
                return super.parseBindingList(3, 93, true), errors.length === previousErrorCount;
              } catch (_unused2) {
                return false;
              }
            }
            return false;
          }
          tsIsUnambiguouslyStartOfFunctionType() {
            if (this.next(), this.match(11) || this.match(21))
              return true;
            if (this.tsSkipParameterStart()) {
              if (this.match(14) || this.match(12) || this.match(17) || this.match(29))
                return true;
              if (this.match(11) && (this.next(), this.match(19)))
                return true;
            }
            return false;
          }
          tsParseTypeOrTypePredicateAnnotation(returnToken) {
            return this.tsInType(() => {
              const t = this.startNode();
              this.expect(returnToken);
              const node = this.startNode(), asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
              if (asserts && this.match(78)) {
                let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
                return "TSThisType" === thisTypePredicate.type ? (node.parameterName = thisTypePredicate, node.asserts = true, node.typeAnnotation = null, thisTypePredicate = this.finishNode(node, "TSTypePredicate")) : (this.resetStartLocationFromNode(thisTypePredicate, node), thisTypePredicate.asserts = true), t.typeAnnotation = thisTypePredicate, this.finishNode(t, "TSTypeAnnotation");
              }
              const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
              if (!typePredicateVariable)
                return asserts ? (node.parameterName = this.parseIdentifier(), node.asserts = asserts, node.typeAnnotation = null, t.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t, "TSTypeAnnotation")) : this.tsParseTypeAnnotation(false, t);
              const type = this.tsParseTypeAnnotation(false);
              return node.parameterName = typePredicateVariable, node.typeAnnotation = type, node.asserts = asserts, t.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t, "TSTypeAnnotation");
            });
          }
          tsTryParseTypeOrTypePredicateAnnotation() {
            return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : void 0;
          }
          tsTryParseTypeAnnotation() {
            return this.match(14) ? this.tsParseTypeAnnotation() : void 0;
          }
          tsTryParseType() {
            return this.tsEatThenParseType(14);
          }
          tsParseTypePredicatePrefix() {
            const id = this.parseIdentifier();
            if (this.isContextual(113) && !this.hasPrecedingLineBreak())
              return this.next(), id;
          }
          tsParseTypePredicateAsserts() {
            if (106 !== this.state.type)
              return false;
            const containsEsc = this.state.containsEsc;
            return this.next(), !(!tokenIsIdentifier(this.state.type) && !this.match(78)) && (containsEsc && this.raise(Errors.InvalidEscapedReservedWord, { at: this.state.lastTokStartLoc, reservedWord: "asserts" }), true);
          }
          tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
            return this.tsInType(() => {
              eatColon && this.expect(14), t.typeAnnotation = this.tsParseType();
            }), this.finishNode(t, "TSTypeAnnotation");
          }
          tsParseType() {
            assert2(this.state.inType);
            const type = this.tsParseNonConditionalType();
            if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81))
              return type;
            const node = this.startNodeAtNode(type);
            return node.checkType = type, node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType()), this.expect(17), node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.expect(14), node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.finishNode(node, "TSConditionalType");
          }
          isAbstractConstructorSignature() {
            return this.isContextual(120) && 77 === this.lookahead().type;
          }
          tsParseNonConditionalType() {
            return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(77) ? this.tsParseFunctionOrConstructorType("TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", true) : this.tsParseUnionTypeOrHigher();
          }
          tsParseTypeAssertion() {
            this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });
            const node = this.startNode(), _const = this.tsTryNextParseConstantContext();
            return node.typeAnnotation = _const || this.tsNextThenParseType(), this.expect(48), node.expression = this.parseMaybeUnary(), this.finishNode(node, "TSTypeAssertion");
          }
          tsParseHeritageClause(token) {
            const originalStartLoc = this.state.startLoc, delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
              const node = this.startNode();
              return node.expression = this.tsParseEntityName(), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSExpressionWithTypeArguments");
            });
            return delimitedList.length || this.raise(TSErrors.EmptyHeritageClauseType, { at: originalStartLoc, token }), delimitedList;
          }
          tsParseInterfaceDeclaration(node, properties = {}) {
            if (this.hasFollowingLineBreak())
              return null;
            this.expectContextual(125), properties.declare && (node.declare = true), tokenIsIdentifier(this.state.type) ? (node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 130)) : (node.id = null, this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc })), node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this)), this.eat(81) && (node.extends = this.tsParseHeritageClause("extends"));
            const body = this.startNode();
            return body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), node.body = this.finishNode(body, "TSInterfaceBody"), this.finishNode(node, "TSInterfaceDeclaration");
          }
          tsParseTypeAliasDeclaration(node) {
            return node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 2), node.typeAnnotation = this.tsInType(() => {
              if (node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this)), this.expect(29), this.isContextual(111) && 16 !== this.lookahead().type) {
                const node2 = this.startNode();
                return this.next(), this.finishNode(node2, "TSIntrinsicKeyword");
              }
              return this.tsParseType();
            }), this.semicolon(), this.finishNode(node, "TSTypeAliasDeclaration");
          }
          tsInNoContext(cb) {
            const oldContext = this.state.context;
            this.state.context = [oldContext[0]];
            try {
              return cb();
            } finally {
              this.state.context = oldContext;
            }
          }
          tsInType(cb) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            try {
              return cb();
            } finally {
              this.state.inType = oldInType;
            }
          }
          tsInDisallowConditionalTypesContext(cb) {
            const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
            this.state.inDisallowConditionalTypesContext = true;
            try {
              return cb();
            } finally {
              this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
            }
          }
          tsInAllowConditionalTypesContext(cb) {
            const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
            this.state.inDisallowConditionalTypesContext = false;
            try {
              return cb();
            } finally {
              this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
            }
          }
          tsEatThenParseType(token) {
            return this.match(token) ? this.tsNextThenParseType() : void 0;
          }
          tsExpectThenParseType(token) {
            return this.tsDoThenParseType(() => this.expect(token));
          }
          tsNextThenParseType() {
            return this.tsDoThenParseType(() => this.next());
          }
          tsDoThenParseType(cb) {
            return this.tsInType(() => (cb(), this.tsParseType()));
          }
          tsParseEnumMember() {
            const node = this.startNode();
            return node.id = this.match(129) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true), this.eat(29) && (node.initializer = super.parseMaybeAssignAllowIn()), this.finishNode(node, "TSEnumMember");
          }
          tsParseEnumDeclaration(node, properties = {}) {
            return properties.const && (node.const = true), properties.declare && (node.declare = true), this.expectContextual(122), node.id = this.parseIdentifier(), this.checkIdentifier(node.id, node.const ? 779 : 267), this.expect(5), node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)), this.expect(8), this.finishNode(node, "TSEnumDeclaration");
          }
          tsParseModuleBlock() {
            const node = this.startNode();
            return this.scope.enter(0), this.expect(5), super.parseBlockOrModuleBlockBody(node.body = [], void 0, true, 8), this.scope.exit(), this.finishNode(node, "TSModuleBlock");
          }
          tsParseModuleOrNamespaceDeclaration(node, nested = false) {
            if (node.id = this.parseIdentifier(), nested || this.checkIdentifier(node.id, 1024), this.eat(16)) {
              const inner = this.startNode();
              this.tsParseModuleOrNamespaceDeclaration(inner, true), node.body = inner;
            } else
              this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit();
            return this.finishNode(node, "TSModuleDeclaration");
          }
          tsParseAmbientExternalModuleDeclaration(node) {
            return this.isContextual(109) ? (node.global = true, node.id = this.parseIdentifier()) : this.match(129) ? node.id = super.parseStringLiteral(this.state.value) : this.unexpected(), this.match(5) ? (this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit()) : this.semicolon(), this.finishNode(node, "TSModuleDeclaration");
          }
          tsParseImportEqualsDeclaration(node, isExport) {
            node.isExport = isExport || false, node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 9), this.expect(29);
            const moduleReference = this.tsParseModuleReference();
            return "type" === node.importKind && "TSExternalModuleReference" !== moduleReference.type && this.raise(TSErrors.ImportAliasHasImportType, { at: moduleReference }), node.moduleReference = moduleReference, this.semicolon(), this.finishNode(node, "TSImportEqualsDeclaration");
          }
          tsIsExternalModuleReference() {
            return this.isContextual(116) && 40 === this.lookaheadCharCode();
          }
          tsParseModuleReference() {
            return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
          }
          tsParseExternalModuleReference() {
            const node = this.startNode();
            if (this.expectContextual(116), this.expect(10), !this.match(129))
              throw this.unexpected();
            return node.expression = super.parseExprAtom(), this.expect(11), this.finishNode(node, "TSExternalModuleReference");
          }
          tsLookAhead(f) {
            const state = this.state.clone(), res = f();
            return this.state = state, res;
          }
          tsTryParseAndCatch(f) {
            const result = this.tryParse((abort) => f() || abort());
            if (!result.aborted && result.node)
              return result.error && (this.state = result.failState), result.node;
          }
          tsTryParse(f) {
            const state = this.state.clone(), result = f();
            return void 0 !== result && false !== result ? result : void (this.state = state);
          }
          tsTryParseDeclare(nany) {
            if (this.isLineTerminator())
              return;
            let kind, starttype = this.state.type;
            return this.isContextual(99) && (starttype = 74, kind = "let"), this.tsInAmbientContext(() => {
              if (68 === starttype)
                return nany.declare = true, super.parseFunctionStatement(nany, false, true);
              if (80 === starttype)
                return nany.declare = true, this.parseClass(nany, true, false);
              if (122 === starttype)
                return this.tsParseEnumDeclaration(nany, { declare: true });
              if (109 === starttype)
                return this.tsParseAmbientExternalModuleDeclaration(nany);
              if (75 === starttype || 74 === starttype)
                return this.match(75) && this.isLookaheadContextual("enum") ? (this.expect(75), this.tsParseEnumDeclaration(nany, { const: true, declare: true })) : (nany.declare = true, this.parseVarStatement(nany, kind || this.state.value, true));
              if (125 === starttype) {
                const result = this.tsParseInterfaceDeclaration(nany, { declare: true });
                if (result)
                  return result;
              }
              return tokenIsIdentifier(starttype) ? this.tsParseDeclaration(nany, this.state.value, true) : void 0;
            });
          }
          tsTryParseExportDeclaration() {
            return this.tsParseDeclaration(this.startNode(), this.state.value, true);
          }
          tsParseExpressionStatement(node, expr) {
            switch (expr.name) {
              case "declare": {
                const declaration = this.tsTryParseDeclare(node);
                if (declaration)
                  return declaration.declare = true, declaration;
                break;
              }
              case "global":
                if (this.match(5)) {
                  this.scope.enter(256), this.prodParam.enter(0);
                  const mod = node;
                  return mod.global = true, mod.id = expr, mod.body = this.tsParseModuleBlock(), this.scope.exit(), this.prodParam.exit(), this.finishNode(mod, "TSModuleDeclaration");
                }
                break;
              default:
                return this.tsParseDeclaration(node, expr.name, false);
            }
          }
          tsParseDeclaration(node, value, next) {
            switch (value) {
              case "abstract":
                if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type)))
                  return this.tsParseAbstractDeclaration(node);
                break;
              case "module":
                if (this.tsCheckLineTerminator(next)) {
                  if (this.match(129))
                    return this.tsParseAmbientExternalModuleDeclaration(node);
                  if (tokenIsIdentifier(this.state.type))
                    return this.tsParseModuleOrNamespaceDeclaration(node);
                }
                break;
              case "namespace":
                if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type))
                  return this.tsParseModuleOrNamespaceDeclaration(node);
                break;
              case "type":
                if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type))
                  return this.tsParseTypeAliasDeclaration(node);
            }
          }
          tsCheckLineTerminator(next) {
            return next ? !this.hasFollowingLineBreak() && (this.next(), true) : !this.isLineTerminator();
          }
          tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {
            if (!this.match(47))
              return;
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            this.state.maybeInArrowParameters = true;
            const res = this.tsTryParseAndCatch(() => {
              const node = this.startNodeAt(startPos, startLoc);
              return node.typeParameters = this.tsParseTypeParameters(), super.parseFunctionParams(node), node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation(), this.expect(19), node;
            });
            return this.state.maybeInArrowParameters = oldMaybeInArrowParameters, res ? super.parseArrowExpression(res, null, true) : void 0;
          }
          tsParseTypeArgumentsInExpression() {
            if (47 === this.reScan_lt())
              return this.tsParseTypeArguments();
          }
          tsParseTypeArguments() {
            const node = this.startNode();
            return node.params = this.tsInType(() => this.tsInNoContext(() => (this.expect(47), this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this))))), 0 === node.params.length && this.raise(TSErrors.EmptyTypeArguments, { at: node }), this.expect(48), this.finishNode(node, "TSTypeParameterInstantiation");
          }
          tsIsDeclarationStart() {
            return (token = this.state.type) >= 120 && token <= 126;
            var token;
          }
          isExportDefaultSpecifier() {
            return !this.tsIsDeclarationStart() && super.isExportDefaultSpecifier();
          }
          parseAssignableListItem(allowModifiers, decorators) {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            let accessibility, readonly = false, override = false;
            if (void 0 !== allowModifiers) {
              const modified = {};
              this.tsParseModifiers({ modified, allowedModifiers: ["public", "private", "protected", "override", "readonly"] }), accessibility = modified.accessibility, override = modified.override, readonly = modified.readonly, false === allowModifiers && (accessibility || readonly || override) && this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });
            }
            const left = this.parseMaybeDefault();
            this.parseAssignableListItemTypes(left);
            const elt = this.parseMaybeDefault(left.start, left.loc.start, left);
            if (accessibility || readonly || override) {
              const pp2 = this.startNodeAt(startPos, startLoc);
              return decorators.length && (pp2.decorators = decorators), accessibility && (pp2.accessibility = accessibility), readonly && (pp2.readonly = readonly), override && (pp2.override = override), "Identifier" !== elt.type && "AssignmentPattern" !== elt.type && this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp2 }), pp2.parameter = elt, this.finishNode(pp2, "TSParameterProperty");
            }
            return decorators.length && (left.decorators = decorators), elt;
          }
          isSimpleParameter(node) {
            return "TSParameterProperty" === node.type && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            this.match(14) && (node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14));
            const bodilessType = "FunctionDeclaration" === type ? "TSDeclareFunction" : "ClassMethod" === type || "ClassPrivateMethod" === type ? "TSDeclareMethod" : void 0;
            return bodilessType && !this.match(5) && this.isLineTerminator() ? this.finishNode(node, bodilessType) : "TSDeclareFunction" === bodilessType && this.state.isAmbientContext && (this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node }), node.declare) ? super.parseFunctionBodyAndFinish(node, bodilessType, isMethod) : super.parseFunctionBodyAndFinish(node, type, isMethod);
          }
          registerFunctionStatementId(node) {
            !node.body && node.id ? this.checkIdentifier(node.id, 1024) : super.registerFunctionStatementId(node);
          }
          tsCheckForInvalidTypeCasts(items) {
            items.forEach((node) => {
              "TSTypeCastExpression" === (null == node ? void 0 : node.type) && this.raise(TSErrors.UnexpectedTypeAnnotation, { at: node.typeAnnotation });
            });
          }
          toReferencedList(exprList, isInParens) {
            return this.tsCheckForInvalidTypeCasts(exprList), exprList;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
            return "ArrayExpression" === node.type && this.tsCheckForInvalidTypeCasts(node.elements), node;
          }
          parseSubscript(base, startPos, startLoc, noCalls, state) {
            if (!this.hasPrecedingLineBreak() && this.match(35)) {
              this.state.canStartJSXElement = false, this.next();
              const nonNullExpression = this.startNodeAt(startPos, startLoc);
              return nonNullExpression.expression = base, this.finishNode(nonNullExpression, "TSNonNullExpression");
            }
            let isOptionalCall = false;
            if (this.match(18) && 60 === this.lookaheadCharCode()) {
              if (noCalls)
                return state.stop = true, base;
              state.optionalChainMember = isOptionalCall = true, this.next();
            }
            if (this.match(47) || this.match(51)) {
              let missingParenErrorLoc;
              const result = this.tsTryParseAndCatch(() => {
                if (!noCalls && this.atPossibleAsyncArrow(base)) {
                  const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);
                  if (asyncArrowFn)
                    return asyncArrowFn;
                }
                const typeArguments = this.tsParseTypeArgumentsInExpression();
                if (!typeArguments)
                  return;
                if (isOptionalCall && !this.match(10))
                  return void (missingParenErrorLoc = this.state.curPosition());
                if (tokenIsTemplate(this.state.type)) {
                  const result2 = super.parseTaggedTemplateExpression(base, startPos, startLoc, state);
                  return result2.typeParameters = typeArguments, result2;
                }
                if (!noCalls && this.eat(10)) {
                  const node2 = this.startNodeAt(startPos, startLoc);
                  return node2.callee = base, node2.arguments = this.parseCallExpressionArguments(11, false), this.tsCheckForInvalidTypeCasts(node2.arguments), node2.typeParameters = typeArguments, state.optionalChainMember && (node2.optional = isOptionalCall), this.finishCallExpression(node2, state.optionalChainMember);
                }
                const tokenType = this.state.type;
                if (48 === tokenType || 10 !== tokenType && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak())
                  return;
                const node = this.startNodeAt(startPos, startLoc);
                return node.expression = base, node.typeParameters = typeArguments, this.finishNode(node, "TSInstantiationExpression");
              });
              if (missingParenErrorLoc && this.unexpected(missingParenErrorLoc, 10), result)
                return "TSInstantiationExpression" === result.type && (this.match(16) || this.match(18) && 40 !== this.lookaheadCharCode()) && this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, { at: this.state.startLoc }), result;
            }
            return super.parseSubscript(base, startPos, startLoc, noCalls, state);
          }
          parseNewCallee(node) {
            var _callee$extra;
            super.parseNewCallee(node);
            const { callee } = node;
            "TSInstantiationExpression" !== callee.type || null != (_callee$extra = callee.extra) && _callee$extra.parenthesized || (node.typeParameters = callee.typeParameters, node.callee = callee.expression);
          }
          parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
            if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(93)) {
              const node = this.startNodeAt(leftStartPos, leftStartLoc);
              node.expression = left;
              const _const = this.tsTryNextParseConstantContext();
              return node.typeAnnotation = _const || this.tsNextThenParseType(), this.finishNode(node, "TSAsExpression"), this.reScan_lt_gt(), this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);
            }
            return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            this.state.isAmbientContext || super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
          checkDuplicateExports() {
          }
          parseImport(node) {
            if (node.importKind = "value", tokenIsIdentifier(this.state.type) || this.match(55) || this.match(5)) {
              let ahead = this.lookahead();
              if (this.isContextual(126) && 12 !== ahead.type && 97 !== ahead.type && 29 !== ahead.type && (node.importKind = "type", this.next(), ahead = this.lookahead()), tokenIsIdentifier(this.state.type) && 29 === ahead.type)
                return this.tsParseImportEqualsDeclaration(node);
            }
            const importNode = super.parseImport(node);
            return "type" === importNode.importKind && importNode.specifiers.length > 1 && "ImportDefaultSpecifier" === importNode.specifiers[0].type && this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, { at: importNode }), importNode;
          }
          parseExport(node) {
            if (this.match(83))
              return this.next(), this.isContextual(126) && 61 !== this.lookaheadCharCode() ? (node.importKind = "type", this.next()) : node.importKind = "value", this.tsParseImportEqualsDeclaration(node, true);
            if (this.eat(29)) {
              const assign = node;
              return assign.expression = super.parseExpression(), this.semicolon(), this.finishNode(assign, "TSExportAssignment");
            }
            if (this.eatContextual(93)) {
              const decl = node;
              return this.expectContextual(124), decl.id = this.parseIdentifier(), this.semicolon(), this.finishNode(decl, "TSNamespaceExportDeclaration");
            }
            return this.isContextual(126) && 5 === this.lookahead().type ? (this.next(), node.exportKind = "type") : node.exportKind = "value", super.parseExport(node);
          }
          isAbstractClass() {
            return this.isContextual(120) && 80 === this.lookahead().type;
          }
          parseExportDefaultExpression() {
            if (this.isAbstractClass()) {
              const cls = this.startNode();
              return this.next(), cls.abstract = true, this.parseClass(cls, true, true);
            }
            if (this.match(125)) {
              const result = this.tsParseInterfaceDeclaration(this.startNode());
              if (result)
                return result;
            }
            return super.parseExportDefaultExpression();
          }
          parseVarStatement(node, kind, allowMissingInitializer = false) {
            const { isAmbientContext } = this.state, declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
            if (!isAmbientContext)
              return declaration;
            for (const { id, init } of declaration.declarations)
              init && ("const" !== kind || id.typeAnnotation ? this.raise(TSErrors.InitializerNotAllowedInAmbientContext, { at: init }) : "StringLiteral" !== init.type && "BooleanLiteral" !== init.type && "NumericLiteral" !== init.type && "BigIntLiteral" !== init.type && ("TemplateLiteral" !== init.type || init.expressions.length > 0) && !isPossiblyLiteralEnum(init) && this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, { at: init }));
            return declaration;
          }
          parseStatementContent(context, topLevel) {
            if (this.match(75) && this.isLookaheadContextual("enum")) {
              const node = this.startNode();
              return this.expect(75), this.tsParseEnumDeclaration(node, { const: true });
            }
            if (this.isContextual(122))
              return this.tsParseEnumDeclaration(this.startNode());
            if (this.isContextual(125)) {
              const result = this.tsParseInterfaceDeclaration(this.startNode());
              if (result)
                return result;
            }
            return super.parseStatementContent(context, topLevel);
          }
          parseAccessModifier() {
            return this.tsParseModifier(["public", "protected", "private"]);
          }
          tsHasSomeModifiers(member, modifiers) {
            return modifiers.some((modifier) => tsIsAccessModifier(modifier) ? member.accessibility === modifier : !!member[modifier]);
          }
          tsIsStartOfStaticBlocks() {
            return this.isContextual(104) && 123 === this.lookaheadCharCode();
          }
          parseClassMember(classBody, member, state) {
            const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
            this.tsParseModifiers({ modified: member, allowedModifiers: modifiers, disallowedModifiers: ["in", "out"], stopOnStartOfClassStaticBlock: true, errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions });
            const callParseClassMemberWithIsStatic = () => {
              this.tsIsStartOfStaticBlocks() ? (this.next(), this.next(), this.tsHasSomeModifiers(member, modifiers) && this.raise(TSErrors.StaticBlockCannotHaveModifier, { at: this.state.curPosition() }), super.parseClassStaticBlock(classBody, member)) : this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
            };
            member.declare ? this.tsInAmbientContext(callParseClassMemberWithIsStatic) : callParseClassMemberWithIsStatic();
          }
          parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
            const idx = this.tsTryParseIndexSignature(member);
            if (idx)
              return classBody.body.push(idx), member.abstract && this.raise(TSErrors.IndexSignatureHasAbstract, { at: member }), member.accessibility && this.raise(TSErrors.IndexSignatureHasAccessibility, { at: member, modifier: member.accessibility }), member.declare && this.raise(TSErrors.IndexSignatureHasDeclare, { at: member }), void (member.override && this.raise(TSErrors.IndexSignatureHasOverride, { at: member }));
            !this.state.inAbstractClass && member.abstract && this.raise(TSErrors.NonAbstractClassHasAbstractMethod, { at: member }), member.override && (state.hadSuperClass || this.raise(TSErrors.OverrideNotInSubClass, { at: member })), super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
          }
          parsePostMemberNameModifiers(methodOrProp) {
            this.eat(17) && (methodOrProp.optional = true), methodOrProp.readonly && this.match(10) && this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp }), methodOrProp.declare && this.match(10) && this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });
          }
          parseExpressionStatement(node, expr) {
            return ("Identifier" === expr.type ? this.tsParseExpressionStatement(node, expr) : void 0) || super.parseExpressionStatement(node, expr);
          }
          shouldParseExportDeclaration() {
            return !!this.tsIsDeclarationStart() || super.shouldParseExportDeclaration();
          }
          parseConditional(expr, startPos, startLoc, refExpressionErrors) {
            if (!this.state.maybeInArrowParameters || !this.match(17))
              return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);
            const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));
            return result.node ? (result.error && (this.state = result.failState), result.node) : (result.error && super.setOptionalParametersError(refExpressionErrors, result.error), expr);
          }
          parseParenItem(node, startPos, startLoc) {
            if (node = super.parseParenItem(node, startPos, startLoc), this.eat(17) && (node.optional = true, this.resetEndLocation(node)), this.match(14)) {
              const typeCastNode = this.startNodeAt(startPos, startLoc);
              return typeCastNode.expression = node, typeCastNode.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(typeCastNode, "TSTypeCastExpression");
            }
            return node;
          }
          parseExportDeclaration(node) {
            if (!this.state.isAmbientContext && this.isContextual(121))
              return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
            const startPos = this.state.start, startLoc = this.state.startLoc, isDeclare = this.eatContextual(121);
            if (isDeclare && (this.isContextual(121) || !this.shouldParseExportDeclaration()))
              throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, { at: this.state.startLoc });
            const declaration = tokenIsIdentifier(this.state.type) && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
            return declaration ? (("TSInterfaceDeclaration" === declaration.type || "TSTypeAliasDeclaration" === declaration.type || isDeclare) && (node.exportKind = "type"), isDeclare && (this.resetStartLocation(declaration, startPos, startLoc), declaration.declare = true), declaration) : null;
          }
          parseClassId(node, isStatement, optionalId, bindingType) {
            if ((!isStatement || optionalId) && this.isContextual(110))
              return;
            super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 139);
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));
            typeParameters && (node.typeParameters = typeParameters);
          }
          parseClassPropertyAnnotation(node) {
            !node.optional && this.eat(35) && (node.definite = true);
            const type = this.tsTryParseTypeAnnotation();
            type && (node.typeAnnotation = type);
          }
          parseClassProperty(node) {
            if (this.parseClassPropertyAnnotation(node), this.state.isAmbientContext && (!node.readonly || node.typeAnnotation) && this.match(29) && this.raise(TSErrors.DeclareClassFieldHasInitializer, { at: this.state.startLoc }), node.abstract && this.match(29)) {
              const { key } = node;
              this.raise(TSErrors.AbstractPropertyHasInitializer, { at: this.state.startLoc, propertyName: "Identifier" !== key.type || node.computed ? `[${this.input.slice(key.start, key.end)}]` : key.name });
            }
            return super.parseClassProperty(node);
          }
          parseClassPrivateProperty(node) {
            return node.abstract && this.raise(TSErrors.PrivateElementHasAbstract, { at: node }), node.accessibility && this.raise(TSErrors.PrivateElementHasAccessibility, { at: node, modifier: node.accessibility }), this.parseClassPropertyAnnotation(node), super.parseClassPrivateProperty(node);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            const typeParameters = this.tsTryParseTypeParameters();
            typeParameters && isConstructor && this.raise(TSErrors.ConstructorHasTypeParameters, { at: typeParameters });
            const { declare = false, kind } = method;
            !declare || "get" !== kind && "set" !== kind || this.raise(TSErrors.DeclareAccessor, { at: method, kind }), typeParameters && (method.typeParameters = typeParameters), super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            const typeParameters = this.tsTryParseTypeParameters();
            typeParameters && (method.typeParameters = typeParameters), super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
          }
          declareClassPrivateMethodInScope(node, kind) {
            "TSDeclareMethod" !== node.type && ("MethodDefinition" !== node.type || node.value.body) && super.declareClassPrivateMethodInScope(node, kind);
          }
          parseClassSuper(node) {
            super.parseClassSuper(node), node.superClass && (this.match(47) || this.match(51)) && (node.superTypeParameters = this.tsParseTypeArgumentsInExpression()), this.eatContextual(110) && (node.implements = this.tsParseHeritageClause("implements"));
          }
          parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            const typeParameters = this.tsTryParseTypeParameters();
            return typeParameters && (prop.typeParameters = typeParameters), super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
          }
          parseFunctionParams(node, allowModifiers) {
            const typeParameters = this.tsTryParseTypeParameters();
            typeParameters && (node.typeParameters = typeParameters), super.parseFunctionParams(node, allowModifiers);
          }
          parseVarId(decl, kind) {
            super.parseVarId(decl, kind), "Identifier" === decl.id.type && !this.hasPrecedingLineBreak() && this.eat(35) && (decl.definite = true);
            const type = this.tsTryParseTypeAnnotation();
            type && (decl.id.typeAnnotation = type, this.resetEndLocation(decl.id));
          }
          parseAsyncArrowFromCallExpression(node, call) {
            return this.match(14) && (node.returnType = this.tsParseTypeAnnotation()), super.parseAsyncArrowFromCallExpression(node, call);
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;
            let state, jsx, typeCast, typeParameters;
            if (this.hasPlugin("jsx") && (this.match(138) || this.match(47))) {
              if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error)
                return jsx.node;
              const { context } = this.state, currentContext = context[context.length - 1];
              currentContext !== types2.j_oTag && currentContext !== types2.j_expr || context.pop();
            }
            if (!(null != (_jsx = jsx) && _jsx.error || this.match(47)))
              return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
            state && state !== this.state || (state = this.state.clone());
            const arrow = this.tryParse((abort) => {
              var _expr$extra, _typeParameters;
              typeParameters = this.tsParseTypeParameters();
              const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
              return ("ArrowFunctionExpression" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized) && abort(), 0 !== (null == (_typeParameters = typeParameters) ? void 0 : _typeParameters.params.length) && this.resetStartLocationFromNode(expr, typeParameters), expr.typeParameters = typeParameters, expr;
            }, state);
            if (!arrow.error && !arrow.aborted)
              return typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
            if (!jsx && (assert2(!this.hasPlugin("jsx")), typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !typeCast.error))
              return typeCast.node;
            if (null != (_jsx2 = jsx) && _jsx2.node)
              return this.state = jsx.failState, jsx.node;
            if (arrow.node)
              return this.state = arrow.failState, typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
            if (null != (_typeCast = typeCast) && _typeCast.node)
              return this.state = typeCast.failState, typeCast.node;
            if (null != (_jsx3 = jsx) && _jsx3.thrown)
              throw jsx.error;
            if (arrow.thrown)
              throw arrow.error;
            if (null != (_typeCast2 = typeCast) && _typeCast2.thrown)
              throw typeCast.error;
            throw (null == (_jsx4 = jsx) ? void 0 : _jsx4.error) || arrow.error || (null == (_typeCast3 = typeCast) ? void 0 : _typeCast3.error);
          }
          reportReservedArrowTypeParam(node) {
            var _node$extra;
            1 !== node.params.length || null != (_node$extra = node.extra) && _node$extra.trailingComma || !this.getPluginOption("typescript", "disallowAmbiguousJSXLike") || this.raise(TSErrors.ReservedArrowTypeParam, { at: node });
          }
          parseMaybeUnary(refExpressionErrors, sawUnary) {
            return !this.hasPlugin("jsx") && this.match(47) ? this.tsParseTypeAssertion() : super.parseMaybeUnary(refExpressionErrors, sawUnary);
          }
          parseArrow(node) {
            if (this.match(14)) {
              const result = this.tryParse((abort) => {
                const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
                return !this.canInsertSemicolon() && this.match(19) || abort(), returnType;
              });
              if (result.aborted)
                return;
              result.thrown || (result.error && (this.state = result.failState), node.returnType = result.node);
            }
            return super.parseArrow(node);
          }
          parseAssignableListItemTypes(param) {
            this.eat(17) && ("Identifier" === param.type || this.state.isAmbientContext || this.state.inType || this.raise(TSErrors.PatternIsOptional, { at: param }), param.optional = true);
            const type = this.tsTryParseTypeAnnotation();
            return type && (param.typeAnnotation = type), this.resetEndLocation(param), param;
          }
          isAssignable(node, isBinding) {
            switch (node.type) {
              case "TSTypeCastExpression":
                return this.isAssignable(node.expression, isBinding);
              case "TSParameterProperty":
                return true;
              default:
                return super.isAssignable(node, isBinding);
            }
          }
          toAssignable(node, isLHS = false) {
            switch (node.type) {
              case "ParenthesizedExpression":
                this.toAssignableParenthesizedExpression(node, isLHS);
                break;
              case "TSAsExpression":
              case "TSNonNullExpression":
              case "TSTypeAssertion":
                isLHS ? this.expressionScope.recordArrowParemeterBindingError(TSErrors.UnexpectedTypeCastInParameter, { at: node }) : this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node }), this.toAssignable(node.expression, isLHS);
                break;
              case "AssignmentExpression":
                isLHS || "TSTypeCastExpression" !== node.left.type || (node.left = this.typeCastToParameter(node.left));
              default:
                super.toAssignable(node, isLHS);
            }
          }
          toAssignableParenthesizedExpression(node, isLHS) {
            switch (node.expression.type) {
              case "TSAsExpression":
              case "TSNonNullExpression":
              case "TSTypeAssertion":
              case "ParenthesizedExpression":
                this.toAssignable(node.expression, isLHS);
                break;
              default:
                super.toAssignable(node, isLHS);
            }
          }
          checkToRestConversion(node, allowPattern) {
            switch (node.type) {
              case "TSAsExpression":
              case "TSTypeAssertion":
              case "TSNonNullExpression":
                this.checkToRestConversion(node.expression, false);
                break;
              default:
                super.checkToRestConversion(node, allowPattern);
            }
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            return object = { TSTypeCastExpression: true, TSParameterProperty: "parameter", TSNonNullExpression: "expression", TSAsExpression: (64 !== binding || !isUnparenthesizedInAssign) && ["expression", true], TSTypeAssertion: (64 !== binding || !isUnparenthesizedInAssign) && ["expression", true] }, key = type, Object.hasOwnProperty.call(object, key) && object[key] || super.isValidLVal(type, isUnparenthesizedInAssign, binding);
            var object, key;
          }
          parseBindingAtom() {
            return 78 === this.state.type ? this.parseIdentifier(true) : super.parseBindingAtom();
          }
          parseMaybeDecoratorArguments(expr) {
            if (this.match(47) || this.match(51)) {
              const typeArguments = this.tsParseTypeArgumentsInExpression();
              if (this.match(10)) {
                const call = super.parseMaybeDecoratorArguments(expr);
                return call.typeParameters = typeArguments, call;
              }
              this.unexpected(null, 10);
            }
            return super.parseMaybeDecoratorArguments(expr);
          }
          checkCommaAfterRest(close) {
            return this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close ? (this.next(), false) : super.checkCommaAfterRest(close);
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod();
          }
          isClassProperty() {
            return this.match(35) || this.match(14) || super.isClassProperty();
          }
          parseMaybeDefault(startPos, startLoc, left) {
            const node = super.parseMaybeDefault(startPos, startLoc, left);
            return "AssignmentPattern" === node.type && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(TSErrors.TypeAnnotationAfterAssign, { at: node.typeAnnotation }), node;
          }
          getTokenFromCode(code) {
            if (this.state.inType) {
              if (62 === code)
                return this.finishOp(48, 1);
              if (60 === code)
                return this.finishOp(47, 1);
            }
            return super.getTokenFromCode(code);
          }
          reScan_lt_gt() {
            const { type } = this.state;
            47 === type ? (this.state.pos -= 1, this.readToken_lt()) : 48 === type && (this.state.pos -= 1, this.readToken_gt());
          }
          reScan_lt() {
            const { type } = this.state;
            return 51 === type ? (this.state.pos -= 2, this.finishOp(47, 1), 47) : type;
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            for (let i = 0; i < exprList.length; i++) {
              const expr = exprList[i];
              "TSTypeCastExpression" === (null == expr ? void 0 : expr.type) && (exprList[i] = this.typeCastToParameter(expr));
            }
            super.toAssignableList(exprList, trailingCommaLoc, isLHS);
          }
          typeCastToParameter(node) {
            return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
          }
          shouldParseArrow(params) {
            return this.match(14) ? params.every((expr) => this.isAssignable(expr, true)) : super.shouldParseArrow(params);
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
          }
          canHaveLeadingDecorator() {
            return super.canHaveLeadingDecorator() || this.isAbstractClass();
          }
          jsxParseOpeningElementAfterName(node) {
            if (this.match(47) || this.match(51)) {
              const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
              typeArguments && (node.typeParameters = typeArguments);
            }
            return super.jsxParseOpeningElementAfterName(node);
          }
          getGetterSetterExpectedParamCount(method) {
            const baseCount = super.getGetterSetterExpectedParamCount(method), firstParam = this.getObjectOrClassMethodParams(method)[0];
            return firstParam && this.isThisParam(firstParam) ? baseCount + 1 : baseCount;
          }
          parseCatchClauseParam() {
            const param = super.parseCatchClauseParam(), type = this.tsTryParseTypeAnnotation();
            return type && (param.typeAnnotation = type, this.resetEndLocation(param)), param;
          }
          tsInAmbientContext(cb) {
            const oldIsAmbientContext = this.state.isAmbientContext;
            this.state.isAmbientContext = true;
            try {
              return cb();
            } finally {
              this.state.isAmbientContext = oldIsAmbientContext;
            }
          }
          parseClass(node, isStatement, optionalId) {
            const oldInAbstractClass = this.state.inAbstractClass;
            this.state.inAbstractClass = !!node.abstract;
            try {
              return super.parseClass(node, isStatement, optionalId);
            } finally {
              this.state.inAbstractClass = oldInAbstractClass;
            }
          }
          tsParseAbstractDeclaration(node) {
            if (this.match(80))
              return node.abstract = true, this.parseClass(node, true, false);
            if (this.isContextual(125)) {
              if (!this.hasFollowingLineBreak())
                return node.abstract = true, this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, { at: node }), this.tsParseInterfaceDeclaration(node);
            } else
              this.unexpected(null, 80);
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
            const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
            if (method.abstract) {
              if (this.hasPlugin("estree") ? !!method.value.body : !!method.body) {
                const { key } = method;
                this.raise(TSErrors.AbstractMethodHasImplementation, { at: method, methodName: "Identifier" !== key.type || method.computed ? `[${this.input.slice(key.start, key.end)}]` : key.name });
              }
            }
            return method;
          }
          tsParseTypeParameterName() {
            return this.parseIdentifier().name;
          }
          shouldParseAsAmbientContext() {
            return !!this.getPluginOption("typescript", "dts");
          }
          parse() {
            return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.parse();
          }
          getExpression() {
            return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.getExpression();
          }
          parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
            return !isString && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport), this.finishNode(node, "ExportSpecifier")) : (node.exportKind = "value", super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
            return !importedIsString && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport), this.finishNode(specifier, "ImportSpecifier")) : (specifier.importKind = "value", super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly));
          }
          parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
            const leftOfAsKey = isImport ? "imported" : "local", rightOfAsKey = isImport ? "local" : "exported";
            let rightOfAs, leftOfAs = node[leftOfAsKey], hasTypeSpecifier = false, canParseAsKeyword = true;
            const loc = leftOfAs.loc.start;
            if (this.isContextual(93)) {
              const firstAs = this.parseIdentifier();
              if (this.isContextual(93)) {
                const secondAs = this.parseIdentifier();
                tokenIsKeywordOrIdentifier(this.state.type) ? (hasTypeSpecifier = true, leftOfAs = firstAs, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName(), canParseAsKeyword = false) : (rightOfAs = secondAs, canParseAsKeyword = false);
              } else
                tokenIsKeywordOrIdentifier(this.state.type) ? (canParseAsKeyword = false, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName()) : (hasTypeSpecifier = true, leftOfAs = firstAs);
            } else
              tokenIsKeywordOrIdentifier(this.state.type) && (hasTypeSpecifier = true, isImport ? (leftOfAs = this.parseIdentifier(true), this.isContextual(93) || this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true)) : leftOfAs = this.parseModuleExportName());
            hasTypeSpecifier && isInTypeOnlyImportExport && this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, { at: loc }), node[leftOfAsKey] = leftOfAs, node[rightOfAsKey] = rightOfAs;
            node[isImport ? "importKind" : "exportKind"] = hasTypeSpecifier ? "type" : "value", canParseAsKeyword && this.eatContextual(93) && (node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName()), node[rightOfAsKey] || (node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey])), isImport && this.checkIdentifier(node[rightOfAsKey], 9);
          }
        }, v8intrinsic: (superClass) => class extends superClass {
          parseV8Intrinsic() {
            if (this.match(54)) {
              const v8IntrinsicStartLoc = this.state.startLoc, node = this.startNode();
              if (this.next(), tokenIsIdentifier(this.state.type)) {
                const name = this.parseIdentifierName(this.state.start), identifier = this.createIdentifier(node, name);
                if (identifier.type = "V8IntrinsicIdentifier", this.match(10))
                  return identifier;
              }
              this.unexpected(v8IntrinsicStartLoc);
            }
          }
          parseExprAtom(refExpressionErrors) {
            return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
          }
        }, placeholders: (superClass) => class extends superClass {
          parsePlaceholder(expectedNode) {
            if (this.match(140)) {
              const node = this.startNode();
              return this.next(), this.assertNoSpace(), node.name = super.parseIdentifier(true), this.assertNoSpace(), this.expect(140), this.finishPlaceholder(node, expectedNode);
            }
          }
          finishPlaceholder(node, expectedNode) {
            const isFinished = !(!node.expectedNode || "Placeholder" !== node.type);
            return node.expectedNode = expectedNode, isFinished ? node : this.finishNode(node, "Placeholder");
          }
          getTokenFromCode(code) {
            return 37 === code && 37 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(140, 2) : super.getTokenFromCode(code);
          }
          parseExprAtom(refExpressionErrors) {
            return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
          }
          parseIdentifier(liberal) {
            return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            void 0 !== word && super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
          parseBindingAtom() {
            return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
          }
          isValidLVal(type, isParenthesized, binding) {
            return "Placeholder" === type || super.isValidLVal(type, isParenthesized, binding);
          }
          toAssignable(node, isLHS) {
            node && "Placeholder" === node.type && "Expression" === node.expectedNode ? node.expectedNode = "Pattern" : super.toAssignable(node, isLHS);
          }
          isLet(context) {
            if (super.isLet(context))
              return true;
            if (!this.isContextual(99))
              return false;
            if (context)
              return false;
            return 140 === this.lookahead().type;
          }
          verifyBreakContinue(node, isBreak) {
            node.label && "Placeholder" === node.label.type || super.verifyBreakContinue(node, isBreak);
          }
          parseExpressionStatement(node, expr) {
            if ("Placeholder" !== expr.type || expr.extra && expr.extra.parenthesized)
              return super.parseExpressionStatement(node, expr);
            if (this.match(14)) {
              const stmt = node;
              return stmt.label = this.finishPlaceholder(expr, "Identifier"), this.next(), stmt.body = super.parseStatement("label"), this.finishNode(stmt, "LabeledStatement");
            }
            return this.semicolon(), node.name = expr.name, this.finishPlaceholder(node, "Statement");
          }
          parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
            return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
          }
          parseFunctionId(requireId) {
            return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
          }
          parseClass(node, isStatement, optionalId) {
            const type = isStatement ? "ClassDeclaration" : "ClassExpression";
            this.next(), this.takeDecorators(node);
            const oldStrict = this.state.strict, placeholder = this.parsePlaceholder("Identifier");
            if (placeholder) {
              if (!(this.match(81) || this.match(140) || this.match(5))) {
                if (optionalId || !isStatement)
                  return node.id = null, node.body = this.finishPlaceholder(placeholder, "ClassBody"), this.finishNode(node, type);
                throw this.raise(PlaceholderErrors.ClassNameIsRequired, { at: this.state.startLoc });
              }
              node.id = placeholder;
            } else
              this.parseClassId(node, isStatement, optionalId);
            return super.parseClassSuper(node), node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, type);
          }
          parseExport(node) {
            const placeholder = this.parsePlaceholder("Identifier");
            if (!placeholder)
              return super.parseExport(node);
            if (!this.isContextual(97) && !this.match(12))
              return node.specifiers = [], node.source = null, node.declaration = this.finishPlaceholder(placeholder, "Declaration"), this.finishNode(node, "ExportNamedDeclaration");
            this.expectPlugin("exportDefaultFrom");
            const specifier = this.startNode();
            return specifier.exported = placeholder, node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], super.parseExport(node);
          }
          isExportDefaultSpecifier() {
            if (this.match(65)) {
              const next = this.nextTokenStart();
              if (this.isUnparsedContextual(next, "from") && this.input.startsWith(tokenLabelName(140), this.nextTokenStartSince(next + 4)))
                return true;
            }
            return super.isExportDefaultSpecifier();
          }
          maybeParseExportDefaultSpecifier(node) {
            return !!(node.specifiers && node.specifiers.length > 0) || super.maybeParseExportDefaultSpecifier(node);
          }
          checkExport(node) {
            const { specifiers } = node;
            null != specifiers && specifiers.length && (node.specifiers = specifiers.filter((node2) => "Placeholder" === node2.exported.type)), super.checkExport(node), node.specifiers = specifiers;
          }
          parseImport(node) {
            const placeholder = this.parsePlaceholder("Identifier");
            if (!placeholder)
              return super.parseImport(node);
            if (node.specifiers = [], !this.isContextual(97) && !this.match(12))
              return node.source = this.finishPlaceholder(placeholder, "StringLiteral"), this.semicolon(), this.finishNode(node, "ImportDeclaration");
            const specifier = this.startNodeAtNode(placeholder);
            if (specifier.local = placeholder, node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier")), this.eat(12)) {
              this.maybeParseStarImportSpecifier(node) || this.parseNamedImportSpecifiers(node);
            }
            return this.expectContextual(97), node.source = this.parseImportSource(), this.semicolon(), this.finishNode(node, "ImportDeclaration");
          }
          parseImportSource() {
            return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
          }
          assertNoSpace() {
            this.state.start > this.state.lastTokEndLoc.index && this.raise(PlaceholderErrors.UnexpectedSpace, { at: this.state.lastTokEndLoc });
          }
        } }, mixinPluginNames = Object.keys(mixinPlugins), defaultOptions2 = { sourceType: "script", sourceFilename: void 0, startColumn: 0, startLine: 1, allowAwaitOutsideFunction: false, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowSuperOutsideMethod: false, allowUndeclaredExports: false, plugins: [], strictMode: null, ranges: false, tokens: false, createParenthesizedExpressions: false, errorRecovery: false, attachComment: true };
        const unwrapParenthesizedExpression = (node) => "ParenthesizedExpression" === node.type ? unwrapParenthesizedExpression(node.expression) : node;
        const loopLabel2 = { kind: "loop" }, switchLabel2 = { kind: "switch" }, loneSurrogate2 = /[\uD800-\uDFFF]/u, keywordRelationalOperator2 = /in(?:stanceof)?/y;
        class Parser3 extends class extends class extends class extends class extends class extends class extends class extends class {
          constructor() {
            this.sawUnambiguousESM = false, this.ambiguousScriptDifferentAst = false;
          }
          hasPlugin(pluginConfig) {
            if ("string" == typeof pluginConfig)
              return this.plugins.has(pluginConfig);
            {
              const [pluginName, pluginOptions] = pluginConfig;
              if (!this.hasPlugin(pluginName))
                return false;
              const actualOptions = this.plugins.get(pluginName);
              for (const key of Object.keys(pluginOptions))
                if ((null == actualOptions ? void 0 : actualOptions[key]) !== pluginOptions[key])
                  return false;
              return true;
            }
          }
          getPluginOption(plugin, name) {
            var _this$plugins$get;
            return null == (_this$plugins$get = this.plugins.get(plugin)) ? void 0 : _this$plugins$get[name];
          }
        } {
          addComment(comment) {
            this.filename && (comment.loc.filename = this.filename), this.state.comments.push(comment);
          }
          processComment(node) {
            const { commentStack } = this.state, commentStackLength = commentStack.length;
            if (0 === commentStackLength)
              return;
            let i = commentStackLength - 1;
            const lastCommentWS = commentStack[i];
            lastCommentWS.start === node.end && (lastCommentWS.leadingNode = node, i--);
            const { start: nodeStart } = node;
            for (; i >= 0; i--) {
              const commentWS = commentStack[i], commentEnd = commentWS.end;
              if (!(commentEnd > nodeStart)) {
                commentEnd === nodeStart && (commentWS.trailingNode = node);
                break;
              }
              commentWS.containingNode = node, this.finalizeComment(commentWS), commentStack.splice(i, 1);
            }
          }
          finalizeComment(commentWS) {
            const { comments } = commentWS;
            if (null !== commentWS.leadingNode || null !== commentWS.trailingNode)
              null !== commentWS.leadingNode && setTrailingComments(commentWS.leadingNode, comments), null !== commentWS.trailingNode && function(node, comments2) {
                void 0 === node.leadingComments ? node.leadingComments = comments2 : node.leadingComments.unshift(...comments2);
              }(commentWS.trailingNode, comments);
            else {
              const { containingNode: node, start: commentStart } = commentWS;
              if (44 === this.input.charCodeAt(commentStart - 1))
                switch (node.type) {
                  case "ObjectExpression":
                  case "ObjectPattern":
                  case "RecordExpression":
                    adjustInnerComments(node, node.properties, commentWS);
                    break;
                  case "CallExpression":
                  case "OptionalCallExpression":
                    adjustInnerComments(node, node.arguments, commentWS);
                    break;
                  case "FunctionDeclaration":
                  case "FunctionExpression":
                  case "ArrowFunctionExpression":
                  case "ObjectMethod":
                  case "ClassMethod":
                  case "ClassPrivateMethod":
                    adjustInnerComments(node, node.params, commentWS);
                    break;
                  case "ArrayExpression":
                  case "ArrayPattern":
                  case "TupleExpression":
                    adjustInnerComments(node, node.elements, commentWS);
                    break;
                  case "ExportNamedDeclaration":
                  case "ImportDeclaration":
                    adjustInnerComments(node, node.specifiers, commentWS);
                    break;
                  default:
                    setInnerComments(node, comments);
                }
              else
                setInnerComments(node, comments);
            }
          }
          finalizeRemainingComments() {
            const { commentStack } = this.state;
            for (let i = commentStack.length - 1; i >= 0; i--)
              this.finalizeComment(commentStack[i]);
            this.state.commentStack = [];
          }
          resetPreviousNodeTrailingComments(node) {
            const { commentStack } = this.state, { length } = commentStack;
            if (0 === length)
              return;
            const commentWS = commentStack[length - 1];
            commentWS.leadingNode === node && (commentWS.leadingNode = null);
          }
          takeSurroundingComments(node, start, end) {
            const { commentStack } = this.state, commentStackLength = commentStack.length;
            if (0 === commentStackLength)
              return;
            let i = commentStackLength - 1;
            for (; i >= 0; i--) {
              const commentWS = commentStack[i], commentEnd = commentWS.end;
              if (commentWS.start === end)
                commentWS.leadingNode = node;
              else if (commentEnd === start)
                commentWS.trailingNode = node;
              else if (commentEnd < start)
                break;
            }
          }
        } {
          constructor(options, input) {
            super(), this.isLookahead = void 0, this.tokens = [], this.errorHandlers_readInt = { invalidDigit: (pos, lineStart, curLine, radix) => !!this.options.errorRecovery && (this.raise(Errors.InvalidDigit, { at: buildPosition(pos, lineStart, curLine), radix }), true), numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence), unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator) }, this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, { invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence), invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint) }), this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: (pos, lineStart, curLine) => {
              this.recordStrictModeErrors(Errors.StrictNumericEscape, { at: buildPosition(pos, lineStart, curLine) });
            }, unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedString, { at: buildPosition(pos - 1, lineStart, curLine) });
            } }), this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape), unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedTemplate, { at: buildPosition(pos, lineStart, curLine) });
            } }), this.state = new State(), this.state.init(options), this.input = input, this.length = input.length, this.isLookahead = false;
          }
          pushToken(token) {
            this.tokens.length = this.state.tokensLength, this.tokens.push(token), ++this.state.tokensLength;
          }
          next() {
            this.checkKeywordEscapes(), this.options.tokens && this.pushToken(new Token3(this.state)), this.state.lastTokStart = this.state.start, this.state.lastTokEndLoc = this.state.endLoc, this.state.lastTokStartLoc = this.state.startLoc, this.nextToken();
          }
          eat(type) {
            return !!this.match(type) && (this.next(), true);
          }
          match(type) {
            return this.state.type === type;
          }
          createLookaheadState(state) {
            return { pos: state.pos, value: null, type: state.type, start: state.start, end: state.end, context: [this.curContext()], inType: state.inType, startLoc: state.startLoc, lastTokEndLoc: state.lastTokEndLoc, curLine: state.curLine, lineStart: state.lineStart, curPosition: state.curPosition };
          }
          lookahead() {
            const old = this.state;
            this.state = this.createLookaheadState(old), this.isLookahead = true, this.nextToken(), this.isLookahead = false;
            const curr = this.state;
            return this.state = old, curr;
          }
          nextTokenStart() {
            return this.nextTokenStartSince(this.state.pos);
          }
          nextTokenStartSince(pos) {
            return skipWhiteSpace2.lastIndex = pos, skipWhiteSpace2.test(this.input) ? skipWhiteSpace2.lastIndex : pos;
          }
          lookaheadCharCode() {
            return this.input.charCodeAt(this.nextTokenStart());
          }
          codePointAtPos(pos) {
            let cp = this.input.charCodeAt(pos);
            if (55296 == (64512 & cp) && ++pos < this.input.length) {
              const trail = this.input.charCodeAt(pos);
              56320 == (64512 & trail) && (cp = 65536 + ((1023 & cp) << 10) + (1023 & trail));
            }
            return cp;
          }
          setStrict(strict) {
            this.state.strict = strict, strict && (this.state.strictErrors.forEach(([toParseError, at2]) => this.raise(toParseError, { at: at2 })), this.state.strictErrors.clear());
          }
          curContext() {
            return this.state.context[this.state.context.length - 1];
          }
          nextToken() {
            this.skipSpace(), this.state.start = this.state.pos, this.isLookahead || (this.state.startLoc = this.state.curPosition()), this.state.pos >= this.length ? this.finishToken(135) : this.getTokenFromCode(this.codePointAtPos(this.state.pos));
          }
          skipBlockComment() {
            let startLoc;
            this.isLookahead || (startLoc = this.state.curPosition());
            const start = this.state.pos, end = this.input.indexOf("*/", start + 2);
            if (-1 === end)
              throw this.raise(Errors.UnterminatedComment, { at: this.state.curPosition() });
            for (this.state.pos = end + 2, lineBreakG2.lastIndex = start + 2; lineBreakG2.test(this.input) && lineBreakG2.lastIndex <= end; )
              ++this.state.curLine, this.state.lineStart = lineBreakG2.lastIndex;
            if (this.isLookahead)
              return;
            const comment = { type: "CommentBlock", value: this.input.slice(start + 2, end), start, end: end + 2, loc: new SourceLocation3(startLoc, this.state.curPosition()) };
            return this.options.tokens && this.pushToken(comment), comment;
          }
          skipLineComment(startSkip) {
            const start = this.state.pos;
            let startLoc;
            this.isLookahead || (startLoc = this.state.curPosition());
            let ch = this.input.charCodeAt(this.state.pos += startSkip);
            if (this.state.pos < this.length)
              for (; !isNewLine2(ch) && ++this.state.pos < this.length; )
                ch = this.input.charCodeAt(this.state.pos);
            if (this.isLookahead)
              return;
            const end = this.state.pos, comment = { type: "CommentLine", value: this.input.slice(start + startSkip, end), start, end, loc: new SourceLocation3(startLoc, this.state.curPosition()) };
            return this.options.tokens && this.pushToken(comment), comment;
          }
          skipSpace() {
            const spaceStart = this.state.pos, comments = [];
            loop:
              for (; this.state.pos < this.length; ) {
                const ch = this.input.charCodeAt(this.state.pos);
                switch (ch) {
                  case 32:
                  case 160:
                  case 9:
                    ++this.state.pos;
                    break;
                  case 13:
                    10 === this.input.charCodeAt(this.state.pos + 1) && ++this.state.pos;
                  case 10:
                  case 8232:
                  case 8233:
                    ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
                    break;
                  case 47:
                    switch (this.input.charCodeAt(this.state.pos + 1)) {
                      case 42: {
                        const comment = this.skipBlockComment();
                        void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                        break;
                      }
                      case 47: {
                        const comment = this.skipLineComment(2);
                        void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                        break;
                      }
                      default:
                        break loop;
                    }
                    break;
                  default:
                    if (isWhitespace(ch))
                      ++this.state.pos;
                    else if (45 !== ch || this.inModule) {
                      if (60 !== ch || this.inModule)
                        break loop;
                      {
                        const pos = this.state.pos;
                        if (33 !== this.input.charCodeAt(pos + 1) || 45 !== this.input.charCodeAt(pos + 2) || 45 !== this.input.charCodeAt(pos + 3))
                          break loop;
                        {
                          const comment = this.skipLineComment(4);
                          void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                        }
                      }
                    } else {
                      const pos = this.state.pos;
                      if (45 !== this.input.charCodeAt(pos + 1) || 62 !== this.input.charCodeAt(pos + 2) || !(0 === spaceStart || this.state.lineStart > spaceStart))
                        break loop;
                      {
                        const comment = this.skipLineComment(3);
                        void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      }
                    }
                }
              }
            if (comments.length > 0) {
              const commentWhitespace = { start: spaceStart, end: this.state.pos, comments, leadingNode: null, trailingNode: null, containingNode: null };
              this.state.commentStack.push(commentWhitespace);
            }
          }
          finishToken(type, val) {
            this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();
            const prevType = this.state.type;
            this.state.type = type, this.state.value = val, this.isLookahead || this.updateContext(prevType);
          }
          replaceToken(type) {
            this.state.type = type, this.updateContext();
          }
          readToken_numberSign() {
            if (0 === this.state.pos && this.readToken_interpreter())
              return;
            const nextPos = this.state.pos + 1, next = this.codePointAtPos(nextPos);
            if (next >= 48 && next <= 57)
              throw this.raise(Errors.UnexpectedDigitAfterHash, { at: this.state.curPosition() });
            if (123 === next || 91 === next && this.hasPlugin("recordAndTuple")) {
              if (this.expectPlugin("recordAndTuple"), "hash" !== this.getPluginOption("recordAndTuple", "syntaxType"))
                throw this.raise(123 === next ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, { at: this.state.curPosition() });
              this.state.pos += 2, 123 === next ? this.finishToken(7) : this.finishToken(1);
            } else
              isIdentifierStart2(next) ? (++this.state.pos, this.finishToken(134, this.readWord1(next))) : 92 === next ? (++this.state.pos, this.finishToken(134, this.readWord1())) : this.finishOp(27, 1);
          }
          readToken_dot() {
            const next = this.input.charCodeAt(this.state.pos + 1);
            next >= 48 && next <= 57 ? this.readNumber(true) : 46 === next && 46 === this.input.charCodeAt(this.state.pos + 2) ? (this.state.pos += 3, this.finishToken(21)) : (++this.state.pos, this.finishToken(16));
          }
          readToken_slash() {
            61 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(31, 2) : this.finishOp(56, 1);
          }
          readToken_interpreter() {
            if (0 !== this.state.pos || this.length < 2)
              return false;
            let ch = this.input.charCodeAt(this.state.pos + 1);
            if (33 !== ch)
              return false;
            const start = this.state.pos;
            for (this.state.pos += 1; !isNewLine2(ch) && ++this.state.pos < this.length; )
              ch = this.input.charCodeAt(this.state.pos);
            const value = this.input.slice(start + 2, this.state.pos);
            return this.finishToken(28, value), true;
          }
          readToken_mult_modulo(code) {
            let type = 42 === code ? 55 : 54, width = 1, next = this.input.charCodeAt(this.state.pos + 1);
            42 === code && 42 === next && (width++, next = this.input.charCodeAt(this.state.pos + 2), type = 57), 61 !== next || this.state.inType || (width++, type = 37 === code ? 33 : 30), this.finishOp(type, width);
          }
          readToken_pipe_amp(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (next !== code) {
              if (124 === code) {
                if (62 === next)
                  return void this.finishOp(39, 2);
                if (this.hasPlugin("recordAndTuple") && 125 === next) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType"))
                    throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, { at: this.state.curPosition() });
                  return this.state.pos += 2, void this.finishToken(9);
                }
                if (this.hasPlugin("recordAndTuple") && 93 === next) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType"))
                    throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, { at: this.state.curPosition() });
                  return this.state.pos += 2, void this.finishToken(4);
                }
              }
              61 !== next ? this.finishOp(124 === code ? 43 : 45, 1) : this.finishOp(30, 2);
            } else
              61 === this.input.charCodeAt(this.state.pos + 2) ? this.finishOp(30, 3) : this.finishOp(124 === code ? 41 : 42, 2);
          }
          readToken_caret() {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (61 !== next || this.state.inType)
              if (94 === next && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "^^" }])) {
                this.finishOp(37, 2);
                if (94 === this.input.codePointAt(this.state.pos))
                  throw this.unexpected();
              } else
                this.finishOp(44, 1);
            else
              this.finishOp(32, 2);
          }
          readToken_atSign() {
            64 === this.input.charCodeAt(this.state.pos + 1) && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "@@" }]) ? this.finishOp(38, 2) : this.finishOp(26, 1);
          }
          readToken_plus_min(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            next !== code ? 61 === next ? this.finishOp(30, 2) : this.finishOp(53, 1) : this.finishOp(34, 2);
          }
          readToken_lt() {
            const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
            if (60 === next)
              return 61 === this.input.charCodeAt(pos + 2) ? void this.finishOp(30, 3) : void this.finishOp(51, 2);
            61 !== next ? this.finishOp(47, 1) : this.finishOp(49, 2);
          }
          readToken_gt() {
            const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
            if (62 === next) {
              const size = 62 === this.input.charCodeAt(pos + 2) ? 3 : 2;
              return 61 === this.input.charCodeAt(pos + size) ? void this.finishOp(30, size + 1) : void this.finishOp(52, size);
            }
            61 !== next ? this.finishOp(48, 1) : this.finishOp(49, 2);
          }
          readToken_eq_excl(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (61 !== next)
              return 61 === code && 62 === next ? (this.state.pos += 2, void this.finishToken(19)) : void this.finishOp(61 === code ? 29 : 35, 1);
            this.finishOp(46, 61 === this.input.charCodeAt(this.state.pos + 2) ? 3 : 2);
          }
          readToken_question() {
            const next = this.input.charCodeAt(this.state.pos + 1), next2 = this.input.charCodeAt(this.state.pos + 2);
            63 === next ? 61 === next2 ? this.finishOp(30, 3) : this.finishOp(40, 2) : 46 !== next || next2 >= 48 && next2 <= 57 ? (++this.state.pos, this.finishToken(17)) : (this.state.pos += 2, this.finishToken(18));
          }
          getTokenFromCode(code) {
            switch (code) {
              case 46:
                return void this.readToken_dot();
              case 40:
                return ++this.state.pos, void this.finishToken(10);
              case 41:
                return ++this.state.pos, void this.finishToken(11);
              case 59:
                return ++this.state.pos, void this.finishToken(13);
              case 44:
                return ++this.state.pos, void this.finishToken(12);
              case 91:
                if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType"))
                    throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, { at: this.state.curPosition() });
                  this.state.pos += 2, this.finishToken(2);
                } else
                  ++this.state.pos, this.finishToken(0);
                return;
              case 93:
                return ++this.state.pos, void this.finishToken(3);
              case 123:
                if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType"))
                    throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, { at: this.state.curPosition() });
                  this.state.pos += 2, this.finishToken(6);
                } else
                  ++this.state.pos, this.finishToken(5);
                return;
              case 125:
                return ++this.state.pos, void this.finishToken(8);
              case 58:
                return void (this.hasPlugin("functionBind") && 58 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(15, 2) : (++this.state.pos, this.finishToken(14)));
              case 63:
                return void this.readToken_question();
              case 96:
                return void this.readTemplateToken();
              case 48: {
                const next = this.input.charCodeAt(this.state.pos + 1);
                if (120 === next || 88 === next)
                  return void this.readRadixNumber(16);
                if (111 === next || 79 === next)
                  return void this.readRadixNumber(8);
                if (98 === next || 66 === next)
                  return void this.readRadixNumber(2);
              }
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
                return void this.readNumber(false);
              case 34:
              case 39:
                return void this.readString(code);
              case 47:
                return void this.readToken_slash();
              case 37:
              case 42:
                return void this.readToken_mult_modulo(code);
              case 124:
              case 38:
                return void this.readToken_pipe_amp(code);
              case 94:
                return void this.readToken_caret();
              case 43:
              case 45:
                return void this.readToken_plus_min(code);
              case 60:
                return void this.readToken_lt();
              case 62:
                return void this.readToken_gt();
              case 61:
              case 33:
                return void this.readToken_eq_excl(code);
              case 126:
                return void this.finishOp(36, 1);
              case 64:
                return void this.readToken_atSign();
              case 35:
                return void this.readToken_numberSign();
              case 92:
                return void this.readWord();
              default:
                if (isIdentifierStart2(code))
                  return void this.readWord(code);
            }
            throw this.raise(Errors.InvalidOrUnexpectedToken, { at: this.state.curPosition(), unexpected: String.fromCodePoint(code) });
          }
          finishOp(type, size) {
            const str = this.input.slice(this.state.pos, this.state.pos + size);
            this.state.pos += size, this.finishToken(type, str);
          }
          readRegexp() {
            const startLoc = this.state.startLoc, start = this.state.start + 1;
            let escaped, inClass, { pos } = this.state;
            for (; ; ++pos) {
              if (pos >= this.length)
                throw this.raise(Errors.UnterminatedRegExp, { at: createPositionWithColumnOffset(startLoc, 1) });
              const ch = this.input.charCodeAt(pos);
              if (isNewLine2(ch))
                throw this.raise(Errors.UnterminatedRegExp, { at: createPositionWithColumnOffset(startLoc, 1) });
              if (escaped)
                escaped = false;
              else {
                if (91 === ch)
                  inClass = true;
                else if (93 === ch && inClass)
                  inClass = false;
                else if (47 === ch && !inClass)
                  break;
                escaped = 92 === ch;
              }
            }
            const content = this.input.slice(start, pos);
            ++pos;
            let mods = "";
            const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
            for (; pos < this.length; ) {
              const cp = this.codePointAtPos(pos), char = String.fromCharCode(cp);
              if (VALID_REGEX_FLAGS.has(cp))
                118 === cp ? (this.expectPlugin("regexpUnicodeSets", nextPos()), mods.includes("u") && this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() })) : 117 === cp && mods.includes("v") && this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() }), mods.includes(char) && this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });
              else {
                if (!isIdentifierChar2(cp) && 92 !== cp)
                  break;
                this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });
              }
              ++pos, mods += char;
            }
            this.state.pos = pos, this.finishToken(133, { pattern: content, flags: mods });
          }
          readInt(radix, len, forceLen = false, allowNumSeparator = true) {
            const { n, pos } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt);
            return this.state.pos = pos, n;
          }
          readRadixNumber(radix) {
            const startLoc = this.state.curPosition();
            let isBigInt = false;
            this.state.pos += 2;
            const val = this.readInt(radix);
            null == val && this.raise(Errors.InvalidDigit, { at: createPositionWithColumnOffset(startLoc, 2), radix });
            const next = this.input.charCodeAt(this.state.pos);
            if (110 === next)
              ++this.state.pos, isBigInt = true;
            else if (109 === next)
              throw this.raise(Errors.InvalidDecimal, { at: startLoc });
            if (isIdentifierStart2(this.codePointAtPos(this.state.pos)))
              throw this.raise(Errors.NumberIdentifier, { at: this.state.curPosition() });
            if (isBigInt) {
              const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, "");
              this.finishToken(131, str);
            } else
              this.finishToken(130, val);
          }
          readNumber(startsWithDot) {
            const start = this.state.pos, startLoc = this.state.curPosition();
            let isFloat = false, isBigInt = false, isDecimal = false, hasExponent = false, isOctal = false;
            startsWithDot || null !== this.readInt(10) || this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });
            const hasLeadingZero = this.state.pos - start >= 2 && 48 === this.input.charCodeAt(start);
            if (hasLeadingZero) {
              const integer = this.input.slice(start, this.state.pos);
              if (this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc }), !this.state.strict) {
                const underscorePos = integer.indexOf("_");
                underscorePos > 0 && this.raise(Errors.ZeroDigitNumericSeparator, { at: createPositionWithColumnOffset(startLoc, underscorePos) });
              }
              isOctal = hasLeadingZero && !/[89]/.test(integer);
            }
            let next = this.input.charCodeAt(this.state.pos);
            if (46 !== next || isOctal || (++this.state.pos, this.readInt(10), isFloat = true, next = this.input.charCodeAt(this.state.pos)), 69 !== next && 101 !== next || isOctal || (next = this.input.charCodeAt(++this.state.pos), 43 !== next && 45 !== next || ++this.state.pos, null === this.readInt(10) && this.raise(Errors.InvalidOrMissingExponent, { at: startLoc }), isFloat = true, hasExponent = true, next = this.input.charCodeAt(this.state.pos)), 110 === next && ((isFloat || hasLeadingZero) && this.raise(Errors.InvalidBigIntLiteral, { at: startLoc }), ++this.state.pos, isBigInt = true), 109 === next && (this.expectPlugin("decimal", this.state.curPosition()), (hasExponent || hasLeadingZero) && this.raise(Errors.InvalidDecimal, { at: startLoc }), ++this.state.pos, isDecimal = true), isIdentifierStart2(this.codePointAtPos(this.state.pos)))
              throw this.raise(Errors.NumberIdentifier, { at: this.state.curPosition() });
            const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
            if (isBigInt)
              return void this.finishToken(131, str);
            if (isDecimal)
              return void this.finishToken(132, str);
            const val = isOctal ? parseInt(str, 8) : parseFloat(str);
            this.finishToken(130, val);
          }
          readCodePoint(throwOnInvalid) {
            const { code, pos } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
            return this.state.pos = pos, code;
          }
          readString(quote) {
            const { str, pos, curLine, lineStart } = readStringContents(34 === quote ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
            this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, this.finishToken(129, str);
          }
          readTemplateContinuation() {
            this.match(8) || this.unexpected(null, 8), this.state.pos--, this.readTemplateToken();
          }
          readTemplateToken() {
            const opening = this.input[this.state.pos], { str, containsInvalid, pos, curLine, lineStart } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
            this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, 96 === this.input.codePointAt(pos) ? this.finishToken(24, containsInvalid ? null : opening + str + "`") : (this.state.pos++, this.finishToken(25, containsInvalid ? null : opening + str + "${"));
          }
          recordStrictModeErrors(toParseError, { at: at2 }) {
            const index2 = at2.index;
            this.state.strict && !this.state.strictErrors.has(index2) ? this.raise(toParseError, { at: at2 }) : this.state.strictErrors.set(index2, [toParseError, at2]);
          }
          readWord1(firstCode) {
            this.state.containsEsc = false;
            let word = "";
            const start = this.state.pos;
            let chunkStart = this.state.pos;
            for (void 0 !== firstCode && (this.state.pos += firstCode <= 65535 ? 1 : 2); this.state.pos < this.length; ) {
              const ch = this.codePointAtPos(this.state.pos);
              if (isIdentifierChar2(ch))
                this.state.pos += ch <= 65535 ? 1 : 2;
              else {
                if (92 !== ch)
                  break;
                {
                  this.state.containsEsc = true, word += this.input.slice(chunkStart, this.state.pos);
                  const escStart = this.state.curPosition(), identifierCheck = this.state.pos === start ? isIdentifierStart2 : isIdentifierChar2;
                  if (117 !== this.input.charCodeAt(++this.state.pos)) {
                    this.raise(Errors.MissingUnicodeEscape, { at: this.state.curPosition() }), chunkStart = this.state.pos - 1;
                    continue;
                  }
                  ++this.state.pos;
                  const esc = this.readCodePoint(true);
                  null !== esc && (identifierCheck(esc) || this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart }), word += String.fromCodePoint(esc)), chunkStart = this.state.pos;
                }
              }
            }
            return word + this.input.slice(chunkStart, this.state.pos);
          }
          readWord(firstCode) {
            const word = this.readWord1(firstCode), type = keywords$12.get(word);
            void 0 !== type ? this.finishToken(type, tokenLabelName(type)) : this.finishToken(128, word);
          }
          checkKeywordEscapes() {
            const { type } = this.state;
            tokenIsKeyword(type) && this.state.containsEsc && this.raise(Errors.InvalidEscapedReservedWord, { at: this.state.startLoc, reservedWord: tokenLabelName(type) });
          }
          raise(toParseError, raiseProperties) {
            const { at: at2 } = raiseProperties, details = _objectWithoutPropertiesLoose(raiseProperties, _excluded), error = toParseError({ loc: at2 instanceof Position3 ? at2 : at2.loc.start, details });
            if (!this.options.errorRecovery)
              throw error;
            return this.isLookahead || this.state.errors.push(error), error;
          }
          raiseOverwrite(toParseError, raiseProperties) {
            const { at: at2 } = raiseProperties, details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2), loc = at2 instanceof Position3 ? at2 : at2.loc.start, pos = loc.index, errors = this.state.errors;
            for (let i = errors.length - 1; i >= 0; i--) {
              const error = errors[i];
              if (error.loc.index === pos)
                return errors[i] = toParseError({ loc, details });
              if (error.loc.index < pos)
                break;
            }
            return this.raise(toParseError, raiseProperties);
          }
          updateContext(prevType) {
          }
          unexpected(loc, type) {
            throw this.raise(Errors.UnexpectedToken, { expected: type ? tokenLabelName(type) : null, at: null != loc ? loc : this.state.startLoc });
          }
          expectPlugin(pluginName, loc) {
            if (this.hasPlugin(pluginName))
              return true;
            throw this.raise(Errors.MissingPlugin, { at: null != loc ? loc : this.state.startLoc, missingPlugin: [pluginName] });
          }
          expectOnePlugin(pluginNames) {
            if (!pluginNames.some((name) => this.hasPlugin(name)))
              throw this.raise(Errors.MissingOneOfPlugins, { at: this.state.startLoc, missingPlugin: pluginNames });
          }
          errorBuilder(error) {
            return (pos, lineStart, curLine) => {
              this.raise(error, { at: buildPosition(pos, lineStart, curLine) });
            };
          }
        } {
          addExtra(node, key, value, enumerable = true) {
            if (!node)
              return;
            const extra = node.extra = node.extra || {};
            enumerable ? extra[key] = value : Object.defineProperty(extra, key, { enumerable, value });
          }
          isContextual(token) {
            return this.state.type === token && !this.state.containsEsc;
          }
          isUnparsedContextual(nameStart, name) {
            const nameEnd = nameStart + name.length;
            if (this.input.slice(nameStart, nameEnd) === name) {
              const nextCh = this.input.charCodeAt(nameEnd);
              return !(isIdentifierChar2(nextCh) || 55296 == (64512 & nextCh));
            }
            return false;
          }
          isLookaheadContextual(name) {
            const next = this.nextTokenStart();
            return this.isUnparsedContextual(next, name);
          }
          eatContextual(token) {
            return !!this.isContextual(token) && (this.next(), true);
          }
          expectContextual(token, toParseError) {
            if (!this.eatContextual(token)) {
              if (null != toParseError)
                throw this.raise(toParseError, { at: this.state.startLoc });
              throw this.unexpected(null, token);
            }
          }
          canInsertSemicolon() {
            return this.match(135) || this.match(8) || this.hasPrecedingLineBreak();
          }
          hasPrecedingLineBreak() {
            return lineBreak2.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
          }
          hasFollowingLineBreak() {
            return skipWhiteSpaceToLineBreak.lastIndex = this.state.end, skipWhiteSpaceToLineBreak.test(this.input);
          }
          isLineTerminator() {
            return this.eat(13) || this.canInsertSemicolon();
          }
          semicolon(allowAsi = true) {
            (allowAsi ? this.isLineTerminator() : this.eat(13)) || this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });
          }
          expect(type, loc) {
            this.eat(type) || this.unexpected(loc, type);
          }
          tryParse(fn, oldState = this.state.clone()) {
            const abortSignal = { node: null };
            try {
              const node = fn((node2 = null) => {
                throw abortSignal.node = node2, abortSignal;
              });
              if (this.state.errors.length > oldState.errors.length) {
                const failState = this.state;
                return this.state = oldState, this.state.tokensLength = failState.tokensLength, { node, error: failState.errors[oldState.errors.length], thrown: false, aborted: false, failState };
              }
              return { node, error: null, thrown: false, aborted: false, failState: null };
            } catch (error) {
              const failState = this.state;
              if (this.state = oldState, error instanceof SyntaxError)
                return { node: null, error, thrown: true, aborted: false, failState };
              if (error === abortSignal)
                return { node: abortSignal.node, error: null, thrown: false, aborted: true, failState };
              throw error;
            }
          }
          checkExpressionErrors(refExpressionErrors, andThrow) {
            if (!refExpressionErrors)
              return false;
            const { shorthandAssignLoc, doubleProtoLoc, privateKeyLoc, optionalParametersLoc } = refExpressionErrors;
            if (!andThrow)
              return !!(shorthandAssignLoc || doubleProtoLoc || optionalParametersLoc || privateKeyLoc);
            null != shorthandAssignLoc && this.raise(Errors.InvalidCoverInitializedName, { at: shorthandAssignLoc }), null != doubleProtoLoc && this.raise(Errors.DuplicateProto, { at: doubleProtoLoc }), null != privateKeyLoc && this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc }), null != optionalParametersLoc && this.unexpected(optionalParametersLoc);
          }
          isLiteralPropertyName() {
            return tokenIsLiteralPropertyName(this.state.type);
          }
          isPrivateName(node) {
            return "PrivateName" === node.type;
          }
          getPrivateNameSV(node) {
            return node.id.name;
          }
          hasPropertyAsPrivateName(node) {
            return ("MemberExpression" === node.type || "OptionalMemberExpression" === node.type) && this.isPrivateName(node.property);
          }
          isOptionalChain(node) {
            return "OptionalMemberExpression" === node.type || "OptionalCallExpression" === node.type;
          }
          isObjectProperty(node) {
            return "ObjectProperty" === node.type;
          }
          isObjectMethod(node) {
            return "ObjectMethod" === node.type;
          }
          initializeScopes(inModule = "module" === this.options.sourceType) {
            const oldLabels = this.state.labels;
            this.state.labels = [];
            const oldExportedIdentifiers = this.exportedIdentifiers;
            this.exportedIdentifiers = /* @__PURE__ */ new Set();
            const oldInModule = this.inModule;
            this.inModule = inModule;
            const oldScope = this.scope, ScopeHandler2 = this.getScopeHandler();
            this.scope = new ScopeHandler2(this, inModule);
            const oldProdParam = this.prodParam;
            this.prodParam = new ProductionParameterHandler();
            const oldClassScope = this.classScope;
            this.classScope = new ClassScopeHandler(this);
            const oldExpressionScope = this.expressionScope;
            return this.expressionScope = new ExpressionScopeHandler(this), () => {
              this.state.labels = oldLabels, this.exportedIdentifiers = oldExportedIdentifiers, this.inModule = oldInModule, this.scope = oldScope, this.prodParam = oldProdParam, this.classScope = oldClassScope, this.expressionScope = oldExpressionScope;
            };
          }
          enterInitialScopes() {
            let paramFlags = 0;
            this.inModule && (paramFlags |= 2), this.scope.enter(1), this.prodParam.enter(paramFlags);
          }
          checkDestructuringPrivate(refExpressionErrors) {
            const { privateKeyLoc } = refExpressionErrors;
            null !== privateKeyLoc && this.expectPlugin("destructuringPrivate", privateKeyLoc);
          }
        } {
          startNode() {
            return new Node3(this, this.state.start, this.state.startLoc);
          }
          startNodeAt(pos, loc) {
            return new Node3(this, pos, loc);
          }
          startNodeAtNode(type) {
            return this.startNodeAt(type.start, type.loc.start);
          }
          finishNode(node, type) {
            return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
          }
          finishNodeAt(node, type, endLoc) {
            return node.type = type, node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index), this.options.attachComment && this.processComment(node), node;
          }
          resetStartLocation(node, start, startLoc) {
            node.start = start, node.loc.start = startLoc, this.options.ranges && (node.range[0] = start);
          }
          resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
            node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index);
          }
          resetStartLocationFromNode(node, locationNode) {
            this.resetStartLocation(node, locationNode.start, locationNode.loc.start);
          }
        } {
          toAssignable(node, isLHS = false) {
            var _node$extra, _node$extra3;
            let parenthesized;
            switch (("ParenthesizedExpression" === node.type || null != (_node$extra = node.extra) && _node$extra.parenthesized) && (parenthesized = unwrapParenthesizedExpression(node), isLHS ? "Identifier" === parenthesized.type ? this.expressionScope.recordArrowParemeterBindingError(Errors.InvalidParenthesizedAssignment, { at: node }) : "MemberExpression" !== parenthesized.type && this.raise(Errors.InvalidParenthesizedAssignment, { at: node }) : this.raise(Errors.InvalidParenthesizedAssignment, { at: node })), node.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                break;
              case "ObjectExpression":
                node.type = "ObjectPattern";
                for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
                  var _node$extra2;
                  const prop = node.properties[i], isLast = i === last;
                  this.toAssignableObjectExpressionProp(prop, isLast, isLHS), isLast && "RestElement" === prop.type && null != (_node$extra2 = node.extra) && _node$extra2.trailingCommaLoc && this.raise(Errors.RestTrailingComma, { at: node.extra.trailingCommaLoc });
                }
                break;
              case "ObjectProperty": {
                const { key, value } = node;
                this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value, isLHS);
                break;
              }
              case "SpreadElement":
                throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
              case "ArrayExpression":
                node.type = "ArrayPattern", this.toAssignableList(node.elements, null == (_node$extra3 = node.extra) ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
                break;
              case "AssignmentExpression":
                "=" !== node.operator && this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end }), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isLHS);
                break;
              case "ParenthesizedExpression":
                this.toAssignable(parenthesized, isLHS);
            }
          }
          toAssignableObjectExpressionProp(prop, isLast, isLHS) {
            if ("ObjectMethod" === prop.type)
              this.raise("get" === prop.kind || "set" === prop.kind ? Errors.PatternHasAccessor : Errors.PatternHasMethod, { at: prop.key });
            else if ("SpreadElement" === prop.type) {
              prop.type = "RestElement";
              const arg = prop.argument;
              this.checkToRestConversion(arg, false), this.toAssignable(arg, isLHS), isLast || this.raise(Errors.RestTrailingComma, { at: prop });
            } else
              this.toAssignable(prop, isLHS);
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            const end = exprList.length - 1;
            for (let i = 0; i <= end; i++) {
              const elt = exprList[i];
              if (elt) {
                if ("SpreadElement" === elt.type) {
                  elt.type = "RestElement";
                  const arg = elt.argument;
                  this.checkToRestConversion(arg, true), this.toAssignable(arg, isLHS);
                } else
                  this.toAssignable(elt, isLHS);
                "RestElement" === elt.type && (i < end ? this.raise(Errors.RestTrailingComma, { at: elt }) : trailingCommaLoc && this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc }));
              }
            }
          }
          isAssignable(node, isBinding) {
            switch (node.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                return true;
              case "ObjectExpression": {
                const last = node.properties.length - 1;
                return node.properties.every((prop, i) => "ObjectMethod" !== prop.type && (i === last || "SpreadElement" !== prop.type) && this.isAssignable(prop));
              }
              case "ObjectProperty":
                return this.isAssignable(node.value);
              case "SpreadElement":
                return this.isAssignable(node.argument);
              case "ArrayExpression":
                return node.elements.every((element) => null === element || this.isAssignable(element));
              case "AssignmentExpression":
                return "=" === node.operator;
              case "ParenthesizedExpression":
                return this.isAssignable(node.expression);
              case "MemberExpression":
              case "OptionalMemberExpression":
                return !isBinding;
              default:
                return false;
            }
          }
          toReferencedList(exprList, isParenthesizedExpr) {
            return exprList;
          }
          toReferencedListDeep(exprList, isParenthesizedExpr) {
            this.toReferencedList(exprList, isParenthesizedExpr);
            for (const expr of exprList)
              "ArrayExpression" === (null == expr ? void 0 : expr.type) && this.toReferencedListDeep(expr.elements);
          }
          parseSpread(refExpressionErrors) {
            const node = this.startNode();
            return this.next(), node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0), this.finishNode(node, "SpreadElement");
          }
          parseRestBinding() {
            const node = this.startNode();
            return this.next(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
          }
          parseBindingAtom() {
            switch (this.state.type) {
              case 0: {
                const node = this.startNode();
                return this.next(), node.elements = this.parseBindingList(3, 93, true), this.finishNode(node, "ArrayPattern");
              }
              case 5:
                return this.parseObjectLike(8, true);
            }
            return this.parseIdentifier();
          }
          parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {
            const elts = [];
            let first = true;
            for (; !this.eat(close); )
              if (first ? first = false : this.expect(12), allowEmpty && this.match(12))
                elts.push(null);
              else {
                if (this.eat(close))
                  break;
                if (this.match(21)) {
                  if (elts.push(this.parseAssignableListItemTypes(this.parseRestBinding())), !this.checkCommaAfterRest(closeCharCode)) {
                    this.expect(close);
                    break;
                  }
                } else {
                  const decorators = [];
                  for (this.match(26) && this.hasPlugin("decorators") && this.raise(Errors.UnsupportedParameterDecorator, { at: this.state.startLoc }); this.match(26); )
                    decorators.push(this.parseDecorator());
                  elts.push(this.parseAssignableListItem(allowModifiers, decorators));
                }
              }
            return elts;
          }
          parseBindingRestProperty(prop) {
            return this.next(), prop.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(prop, "RestElement");
          }
          parseBindingProperty() {
            const prop = this.startNode(), { type, start: startPos, startLoc } = this.state;
            return 21 === type ? this.parseBindingRestProperty(prop) : (134 === type ? (this.expectPlugin("destructuringPrivate", startLoc), this.classScope.usePrivateName(this.state.value, startLoc), prop.key = this.parsePrivateName()) : this.parsePropertyName(prop), prop.method = false, this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false));
          }
          parseAssignableListItem(allowModifiers, decorators) {
            const left = this.parseMaybeDefault();
            this.parseAssignableListItemTypes(left);
            const elt = this.parseMaybeDefault(left.start, left.loc.start, left);
            return decorators.length && (left.decorators = decorators), elt;
          }
          parseAssignableListItemTypes(param) {
            return param;
          }
          parseMaybeDefault(startPos, startLoc, left) {
            var _startLoc, _startPos, _left;
            if (startLoc = null != (_startLoc = startLoc) ? _startLoc : this.state.startLoc, startPos = null != (_startPos = startPos) ? _startPos : this.state.start, left = null != (_left = left) ? _left : this.parseBindingAtom(), !this.eat(29))
              return left;
            const node = this.startNodeAt(startPos, startLoc);
            return node.left = left, node.right = this.parseMaybeAssignAllowIn(), this.finishNode(node, "AssignmentPattern");
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            return object = { AssignmentPattern: "left", RestElement: "argument", ObjectProperty: "value", ParenthesizedExpression: "expression", ArrayPattern: "elements", ObjectPattern: "properties" }, key = type, Object.hasOwnProperty.call(object, key) && object[key];
            var object, key;
          }
          checkLVal(expression, { in: ancestor, binding = 64, checkClashes = false, strictModeChanged = false, allowingSloppyLetBinding = !(8 & binding), hasParenthesizedAncestor = false }) {
            var _expression$extra;
            const type = expression.type;
            if (this.isObjectMethod(expression))
              return;
            if ("MemberExpression" === type)
              return void (64 !== binding && this.raise(Errors.InvalidPropertyBindingPattern, { at: expression }));
            if ("Identifier" === expression.type) {
              this.checkIdentifier(expression, binding, strictModeChanged, allowingSloppyLetBinding);
              const { name } = expression;
              return void (checkClashes && (checkClashes.has(name) ? this.raise(Errors.ParamDupe, { at: expression }) : checkClashes.add(name)));
            }
            const validity = this.isValidLVal(expression.type, !(hasParenthesizedAncestor || null != (_expression$extra = expression.extra) && _expression$extra.parenthesized) && "AssignmentExpression" === ancestor.type, binding);
            if (true === validity)
              return;
            if (false === validity) {
              const ParseErrorClass = 64 === binding ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
              return void this.raise(ParseErrorClass, { at: expression, ancestor: "UpdateExpression" === ancestor.type ? { type: "UpdateExpression", prefix: ancestor.prefix } : { type: ancestor.type } });
            }
            const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, "ParenthesizedExpression" === type], nextAncestor = "ArrayPattern" === expression.type || "ObjectPattern" === expression.type || "ParenthesizedExpression" === expression.type ? expression : ancestor;
            for (const child of [].concat(expression[key]))
              child && this.checkLVal(child, { in: nextAncestor, binding, checkClashes, allowingSloppyLetBinding, strictModeChanged, hasParenthesizedAncestor: isParenthesizedExpression });
          }
          checkIdentifier(at2, bindingType, strictModeChanged = false, allowLetBinding = !(8 & bindingType)) {
            this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at2.name, this.inModule) : isStrictBindOnlyReservedWord(at2.name)) && (64 === bindingType ? this.raise(Errors.StrictEvalArguments, { at: at2, referenceName: at2.name }) : this.raise(Errors.StrictEvalArgumentsBinding, { at: at2, bindingName: at2.name })), allowLetBinding || "let" !== at2.name || this.raise(Errors.LetInLexicalBinding, { at: at2 }), 64 & bindingType || this.declareNameFromIdentifier(at2, bindingType);
          }
          declareNameFromIdentifier(identifier, binding) {
            this.scope.declareName(identifier.name, binding, identifier.loc.start);
          }
          checkToRestConversion(node, allowPattern) {
            switch (node.type) {
              case "ParenthesizedExpression":
                this.checkToRestConversion(node.expression, allowPattern);
                break;
              case "Identifier":
              case "MemberExpression":
                break;
              case "ArrayExpression":
              case "ObjectExpression":
                if (allowPattern)
                  break;
              default:
                this.raise(Errors.InvalidRestAssignmentPattern, { at: node });
            }
          }
          checkCommaAfterRest(close) {
            return !!this.match(12) && (this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, { at: this.state.startLoc }), true);
          }
        } {
          checkProto(prop, isRecord, protoRef, refExpressionErrors) {
            if ("SpreadElement" === prop.type || this.isObjectMethod(prop) || prop.computed || prop.shorthand)
              return;
            const key = prop.key;
            if ("__proto__" === ("Identifier" === key.type ? key.name : key.value)) {
              if (isRecord)
                return void this.raise(Errors.RecordNoProto, { at: key });
              protoRef.used && (refExpressionErrors ? null === refExpressionErrors.doubleProtoLoc && (refExpressionErrors.doubleProtoLoc = key.loc.start) : this.raise(Errors.DuplicateProto, { at: key })), protoRef.used = true;
            }
          }
          shouldExitDescending(expr, potentialArrowAt) {
            return "ArrowFunctionExpression" === expr.type && expr.start === potentialArrowAt;
          }
          getExpression() {
            this.enterInitialScopes(), this.nextToken();
            const expr = this.parseExpression();
            return this.match(135) || this.unexpected(), this.finalizeRemainingComments(), expr.comments = this.state.comments, expr.errors = this.state.errors, this.options.tokens && (expr.tokens = this.tokens), expr;
          }
          parseExpression(disallowIn, refExpressionErrors) {
            return disallowIn ? this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors)) : this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
          }
          parseExpressionBase(refExpressionErrors) {
            const startPos = this.state.start, startLoc = this.state.startLoc, expr = this.parseMaybeAssign(refExpressionErrors);
            if (this.match(12)) {
              const node = this.startNodeAt(startPos, startLoc);
              for (node.expressions = [expr]; this.eat(12); )
                node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
              return this.toReferencedList(node.expressions), this.finishNode(node, "SequenceExpression");
            }
            return expr;
          }
          parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
            return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
          }
          parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
            return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
          }
          setOptionalParametersError(refExpressionErrors, resultError) {
            var _resultError$loc;
            refExpressionErrors.optionalParametersLoc = null != (_resultError$loc = null == resultError ? void 0 : resultError.loc) ? _resultError$loc : this.state.startLoc;
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            if (this.isContextual(105) && this.prodParam.hasYield) {
              let left2 = this.parseYield();
              return afterLeftParse && (left2 = afterLeftParse.call(this, left2, startPos, startLoc)), left2;
            }
            let ownExpressionErrors;
            refExpressionErrors ? ownExpressionErrors = false : (refExpressionErrors = new ExpressionErrors(), ownExpressionErrors = true);
            const { type } = this.state;
            (10 === type || tokenIsIdentifier(type)) && (this.state.potentialArrowAt = this.state.start);
            let left = this.parseMaybeConditional(refExpressionErrors);
            if (afterLeftParse && (left = afterLeftParse.call(this, left, startPos, startLoc)), (token = this.state.type) >= 29 && token <= 33) {
              const node = this.startNodeAt(startPos, startLoc), operator = this.state.value;
              return node.operator = operator, this.match(29) ? (this.toAssignable(left, true), node.left = left, null != refExpressionErrors.doubleProtoLoc && refExpressionErrors.doubleProtoLoc.index >= startPos && (refExpressionErrors.doubleProtoLoc = null), null != refExpressionErrors.shorthandAssignLoc && refExpressionErrors.shorthandAssignLoc.index >= startPos && (refExpressionErrors.shorthandAssignLoc = null), null != refExpressionErrors.privateKeyLoc && refExpressionErrors.privateKeyLoc.index >= startPos && (this.checkDestructuringPrivate(refExpressionErrors), refExpressionErrors.privateKeyLoc = null)) : node.left = left, this.next(), node.right = this.parseMaybeAssign(), this.checkLVal(left, { in: this.finishNode(node, "AssignmentExpression") }), node;
            }
            var token;
            return ownExpressionErrors && this.checkExpressionErrors(refExpressionErrors, true), left;
          }
          parseMaybeConditional(refExpressionErrors) {
            const startPos = this.state.start, startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprOps(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseConditional(expr, startPos, startLoc, refExpressionErrors);
          }
          parseConditional(expr, startPos, startLoc, refExpressionErrors) {
            if (this.eat(17)) {
              const node = this.startNodeAt(startPos, startLoc);
              return node.test = expr, node.consequent = this.parseMaybeAssignAllowIn(), this.expect(14), node.alternate = this.parseMaybeAssign(), this.finishNode(node, "ConditionalExpression");
            }
            return expr;
          }
          parseMaybeUnaryOrPrivate(refExpressionErrors) {
            return this.match(134) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
          }
          parseExprOps(refExpressionErrors) {
            const startPos = this.state.start, startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseExprOp(expr, startPos, startLoc, -1);
          }
          parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
            if (this.isPrivateName(left)) {
              const value = this.getPrivateNameSV(left);
              (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) && this.raise(Errors.PrivateInExpectedIn, { at: left, identifierName: value }), this.classScope.usePrivateName(value, left.loc.start);
            }
            const op = this.state.type;
            if ((token = op) >= 39 && token <= 59 && (this.prodParam.hasIn || !this.match(58))) {
              let prec = tokenOperatorPrecedence(op);
              if (prec > minPrec) {
                if (39 === op) {
                  if (this.expectPlugin("pipelineOperator"), this.state.inFSharpPipelineDirectBody)
                    return left;
                  this.checkPipelineAtInfixOperator(left, leftStartLoc);
                }
                const node = this.startNodeAt(leftStartPos, leftStartLoc);
                node.left = left, node.operator = this.state.value;
                const logical = 41 === op || 42 === op, coalesce = 40 === op;
                if (coalesce && (prec = tokenOperatorPrecedence(42)), this.next(), 39 === op && this.hasPlugin(["pipelineOperator", { proposal: "minimal" }]) && 96 === this.state.type && this.prodParam.hasAwait)
                  throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, { at: this.state.startLoc });
                node.right = this.parseExprOpRightExpr(op, prec);
                const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression"), nextOp = this.state.type;
                if (coalesce && (41 === nextOp || 42 === nextOp) || logical && 40 === nextOp)
                  throw this.raise(Errors.MixingCoalesceWithLogical, { at: this.state.startLoc });
                return this.parseExprOp(finishedNode, leftStartPos, leftStartLoc, minPrec);
              }
            }
            var token;
            return left;
          }
          parseExprOpRightExpr(op, prec) {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            if (39 === op)
              switch (this.getPluginOption("pipelineOperator", "proposal")) {
                case "hack":
                  return this.withTopicBindingContext(() => this.parseHackPipeBody());
                case "smart":
                  return this.withTopicBindingContext(() => {
                    if (this.prodParam.hasYield && this.isContextual(105))
                      throw this.raise(Errors.PipeBodyIsTighter, { at: this.state.startLoc });
                    return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);
                  });
                case "fsharp":
                  return this.withSoloAwaitPermittingContext(() => this.parseFSharpPipelineBody(prec));
              }
            return this.parseExprOpBaseRightExpr(op, prec);
          }
          parseExprOpBaseRightExpr(op, prec) {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, 57 === op ? prec - 1 : prec);
          }
          parseHackPipeBody() {
            var _body$extra;
            const { startLoc } = this.state, body = this.parseMaybeAssign();
            return !UnparenthesizedPipeBodyDescriptions.has(body.type) || null != (_body$extra = body.extra) && _body$extra.parenthesized || this.raise(Errors.PipeUnparenthesizedBody, { at: startLoc, type: body.type }), this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipeTopicUnused, { at: startLoc }), body;
          }
          checkExponentialAfterUnary(node) {
            this.match(57) && this.raise(Errors.UnexpectedTokenUnaryExponentiation, { at: node.argument });
          }
          parseMaybeUnary(refExpressionErrors, sawUnary) {
            const startPos = this.state.start, startLoc = this.state.startLoc, isAwait = this.isContextual(96);
            if (isAwait && this.isAwaitAllowed()) {
              this.next();
              const expr2 = this.parseAwait(startPos, startLoc);
              return sawUnary || this.checkExponentialAfterUnary(expr2), expr2;
            }
            const update = this.match(34), node = this.startNode();
            if (token = this.state.type, tokenPrefixes[token]) {
              node.operator = this.state.value, node.prefix = true, this.match(72) && this.expectPlugin("throwExpressions");
              const isDelete = this.match(89);
              if (this.next(), node.argument = this.parseMaybeUnary(null, true), this.checkExpressionErrors(refExpressionErrors, true), this.state.strict && isDelete) {
                const arg = node.argument;
                "Identifier" === arg.type ? this.raise(Errors.StrictDelete, { at: node }) : this.hasPropertyAsPrivateName(arg) && this.raise(Errors.DeletePrivateField, { at: node });
              }
              if (!update)
                return sawUnary || this.checkExponentialAfterUnary(node), this.finishNode(node, "UnaryExpression");
            }
            var token;
            const expr = this.parseUpdate(node, update, refExpressionErrors);
            if (isAwait) {
              const { type } = this.state;
              if ((this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54)) && !this.isAmbiguousAwait())
                return this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc }), this.parseAwait(startPos, startLoc);
            }
            return expr;
          }
          parseUpdate(node, update, refExpressionErrors) {
            if (update) {
              const updateExpressionNode = node;
              return this.checkLVal(updateExpressionNode.argument, { in: this.finishNode(updateExpressionNode, "UpdateExpression") }), node;
            }
            const startPos = this.state.start, startLoc = this.state.startLoc;
            let expr = this.parseExprSubscripts(refExpressionErrors);
            if (this.checkExpressionErrors(refExpressionErrors, false))
              return expr;
            for (; 34 === this.state.type && !this.canInsertSemicolon(); ) {
              const node2 = this.startNodeAt(startPos, startLoc);
              node2.operator = this.state.value, node2.prefix = false, node2.argument = expr, this.next(), this.checkLVal(expr, { in: expr = this.finishNode(node2, "UpdateExpression") });
            }
            return expr;
          }
          parseExprSubscripts(refExpressionErrors) {
            const startPos = this.state.start, startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprAtom(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseSubscripts(expr, startPos, startLoc);
          }
          parseSubscripts(base, startPos, startLoc, noCalls) {
            const state = { optionalChainMember: false, maybeAsyncArrow: this.atPossibleAsyncArrow(base), stop: false };
            do {
              base = this.parseSubscript(base, startPos, startLoc, noCalls, state), state.maybeAsyncArrow = false;
            } while (!state.stop);
            return base;
          }
          parseSubscript(base, startPos, startLoc, noCalls, state) {
            const { type } = this.state;
            if (!noCalls && 15 === type)
              return this.parseBind(base, startPos, startLoc, noCalls, state);
            if (tokenIsTemplate(type))
              return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);
            let optional = false;
            if (18 === type) {
              if (noCalls && 40 === this.lookaheadCharCode())
                return state.stop = true, base;
              state.optionalChainMember = optional = true, this.next();
            }
            if (!noCalls && this.match(10))
              return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);
            {
              const computed = this.eat(0);
              return computed || optional || this.eat(16) ? this.parseMember(base, startPos, startLoc, state, computed, optional) : (state.stop = true, base);
            }
          }
          parseMember(base, startPos, startLoc, state, computed, optional) {
            const node = this.startNodeAt(startPos, startLoc);
            return node.object = base, node.computed = computed, computed ? (node.property = this.parseExpression(), this.expect(3)) : this.match(134) ? ("Super" === base.type && this.raise(Errors.SuperPrivateField, { at: startLoc }), this.classScope.usePrivateName(this.state.value, this.state.startLoc), node.property = this.parsePrivateName()) : node.property = this.parseIdentifier(true), state.optionalChainMember ? (node.optional = optional, this.finishNode(node, "OptionalMemberExpression")) : this.finishNode(node, "MemberExpression");
          }
          parseBind(base, startPos, startLoc, noCalls, state) {
            const node = this.startNodeAt(startPos, startLoc);
            return node.object = base, this.next(), node.callee = this.parseNoCallExpr(), state.stop = true, this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
          }
          parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            let refExpressionErrors = null;
            this.state.maybeInArrowParameters = true, this.next();
            const node = this.startNodeAt(startPos, startLoc);
            node.callee = base;
            const { maybeAsyncArrow, optionalChainMember } = state;
            maybeAsyncArrow && (this.expressionScope.enter(new ArrowHeadParsingScope(2)), refExpressionErrors = new ExpressionErrors()), optionalChainMember && (node.optional = optional), node.arguments = optional ? this.parseCallExpressionArguments(11) : this.parseCallExpressionArguments(11, "Import" === base.type, "Super" !== base.type, node, refExpressionErrors);
            let finishedNode = this.finishCallExpression(node, optionalChainMember);
            return maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional ? (state.stop = true, this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), finishedNode)) : (maybeAsyncArrow && (this.checkExpressionErrors(refExpressionErrors, true), this.expressionScope.exit()), this.toReferencedArguments(finishedNode)), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, finishedNode;
          }
          toReferencedArguments(node, isParenthesizedExpr) {
            this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
          }
          parseTaggedTemplateExpression(base, startPos, startLoc, state) {
            const node = this.startNodeAt(startPos, startLoc);
            return node.tag = base, node.quasi = this.parseTemplate(true), state.optionalChainMember && this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc }), this.finishNode(node, "TaggedTemplateExpression");
          }
          atPossibleAsyncArrow(base) {
            return "Identifier" === base.type && "async" === base.name && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && base.start === this.state.potentialArrowAt;
          }
          finishCallExpression(node, optional) {
            if ("Import" === node.callee.type)
              if (2 === node.arguments.length && (this.hasPlugin("moduleAttributes") || this.expectPlugin("importAssertions")), 0 === node.arguments.length || node.arguments.length > 2)
                this.raise(Errors.ImportCallArity, { at: node, maxArgumentCount: this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1 });
              else
                for (const arg of node.arguments)
                  "SpreadElement" === arg.type && this.raise(Errors.ImportCallSpreadArgument, { at: arg });
            return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
          }
          parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
            const elts = [];
            let first = true;
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            for (this.state.inFSharpPipelineDirectBody = false; !this.eat(close); ) {
              if (first)
                first = false;
              else if (this.expect(12), this.match(close)) {
                !dynamicImport || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") || this.raise(Errors.ImportCallArgumentTrailingComma, { at: this.state.lastTokStartLoc }), nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
                break;
              }
              elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
            }
            return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, elts;
          }
          shouldParseAsyncArrow() {
            return this.match(19) && !this.canInsertSemicolon();
          }
          parseAsyncArrowFromCallExpression(node, call) {
            var _call$extra;
            return this.resetPreviousNodeTrailingComments(call), this.expect(19), this.parseArrowExpression(node, call.arguments, true, null == (_call$extra = call.extra) ? void 0 : _call$extra.trailingCommaLoc), call.innerComments && setInnerComments(node, call.innerComments), call.callee.trailingComments && setInnerComments(node, call.callee.trailingComments), node;
          }
          parseNoCallExpr() {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
          }
          parseExprAtom(refExpressionErrors) {
            let node;
            const { type } = this.state;
            switch (type) {
              case 79:
                return this.parseSuper();
              case 83:
                return node = this.startNode(), this.next(), this.match(16) ? this.parseImportMetaProperty(node) : (this.match(10) || this.raise(Errors.UnsupportedImport, { at: this.state.lastTokStartLoc }), this.finishNode(node, "Import"));
              case 78:
                return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
              case 90:
                return this.parseDo(this.startNode(), false);
              case 56:
              case 31:
                return this.readRegexp(), this.parseRegExpLiteral(this.state.value);
              case 130:
                return this.parseNumericLiteral(this.state.value);
              case 131:
                return this.parseBigIntLiteral(this.state.value);
              case 132:
                return this.parseDecimalLiteral(this.state.value);
              case 129:
                return this.parseStringLiteral(this.state.value);
              case 84:
                return this.parseNullLiteral();
              case 85:
                return this.parseBooleanLiteral(true);
              case 86:
                return this.parseBooleanLiteral(false);
              case 10: {
                const canBeArrow = this.state.potentialArrowAt === this.state.start;
                return this.parseParenAndDistinguishExpression(canBeArrow);
              }
              case 2:
              case 1:
                return this.parseArrayLike(2 === this.state.type ? 4 : 3, false, true);
              case 0:
                return this.parseArrayLike(3, true, false, refExpressionErrors);
              case 6:
              case 7:
                return this.parseObjectLike(6 === this.state.type ? 9 : 8, false, true);
              case 5:
                return this.parseObjectLike(8, false, false, refExpressionErrors);
              case 68:
                return this.parseFunctionOrFunctionSent();
              case 26:
                this.parseDecorators();
              case 80:
                return node = this.startNode(), this.takeDecorators(node), this.parseClass(node, false);
              case 77:
                return this.parseNewOrNewTarget();
              case 25:
              case 24:
                return this.parseTemplate(false);
              case 15: {
                node = this.startNode(), this.next(), node.object = null;
                const callee = node.callee = this.parseNoCallExpr();
                if ("MemberExpression" === callee.type)
                  return this.finishNode(node, "BindExpression");
                throw this.raise(Errors.UnsupportedBind, { at: callee });
              }
              case 134:
                return this.raise(Errors.PrivateInExpectedIn, { at: this.state.startLoc, identifierName: this.state.value }), this.parsePrivateName();
              case 33:
                return this.parseTopicReferenceThenEqualsSign(54, "%");
              case 32:
                return this.parseTopicReferenceThenEqualsSign(44, "^");
              case 37:
              case 38:
                return this.parseTopicReference("hack");
              case 44:
              case 54:
              case 27: {
                const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
                if (pipeProposal)
                  return this.parseTopicReference(pipeProposal);
                throw this.unexpected();
              }
              case 47: {
                const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
                if (isIdentifierStart2(lookaheadCh) || 62 === lookaheadCh) {
                  this.expectOnePlugin(["jsx", "flow", "typescript"]);
                  break;
                }
                throw this.unexpected();
              }
              default:
                if (tokenIsIdentifier(type)) {
                  if (this.isContextual(123) && 123 === this.lookaheadCharCode() && !this.hasFollowingLineBreak())
                    return this.parseModuleExpression();
                  const canBeArrow = this.state.potentialArrowAt === this.state.start, containsEsc = this.state.containsEsc, id = this.parseIdentifier();
                  if (!containsEsc && "async" === id.name && !this.canInsertSemicolon()) {
                    const { type: type2 } = this.state;
                    if (68 === type2)
                      return this.resetPreviousNodeTrailingComments(id), this.next(), this.parseFunction(this.startNodeAtNode(id), void 0, true);
                    if (tokenIsIdentifier(type2))
                      return 61 === this.lookaheadCharCode() ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id)) : id;
                    if (90 === type2)
                      return this.resetPreviousNodeTrailingComments(id), this.parseDo(this.startNodeAtNode(id), true);
                  }
                  return canBeArrow && this.match(19) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(this.startNodeAtNode(id), [id], false)) : id;
                }
                throw this.unexpected();
            }
          }
          parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
            const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
            if (pipeProposal)
              return this.state.type = topicTokenType, this.state.value = topicTokenValue, this.state.pos--, this.state.end--, this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1), this.parseTopicReference(pipeProposal);
            throw this.unexpected();
          }
          parseTopicReference(pipeProposal) {
            const node = this.startNode(), startLoc = this.state.startLoc, tokenType = this.state.type;
            return this.next(), this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
          }
          finishTopicReference(node, startLoc, pipeProposal, tokenType) {
            if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
              const nodeType = "smart" === pipeProposal ? "PipelinePrimaryTopicReference" : "TopicReference";
              return this.topicReferenceIsAllowedInCurrentContext() || this.raise("smart" === pipeProposal ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, { at: startLoc }), this.registerTopicReference(), this.finishNode(node, nodeType);
            }
            throw this.raise(Errors.PipeTopicUnconfiguredToken, { at: startLoc, token: tokenLabelName(tokenType) });
          }
          testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
            switch (pipeProposal) {
              case "hack":
                return this.hasPlugin(["pipelineOperator", { topicToken: tokenLabelName(tokenType) }]);
              case "smart":
                return 27 === tokenType;
              default:
                throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });
            }
          }
          parseAsyncArrowUnaryFunction(node) {
            this.prodParam.enter(functionFlags2(true, this.prodParam.hasYield));
            const params = [this.parseIdentifier()];
            return this.prodParam.exit(), this.hasPrecedingLineBreak() && this.raise(Errors.LineTerminatorBeforeArrow, { at: this.state.curPosition() }), this.expect(19), this.parseArrowExpression(node, params, true);
          }
          parseDo(node, isAsync) {
            this.expectPlugin("doExpressions"), isAsync && this.expectPlugin("asyncDoExpressions"), node.async = isAsync, this.next();
            const oldLabels = this.state.labels;
            return this.state.labels = [], isAsync ? (this.prodParam.enter(2), node.body = this.parseBlock(), this.prodParam.exit()) : node.body = this.parseBlock(), this.state.labels = oldLabels, this.finishNode(node, "DoExpression");
          }
          parseSuper() {
            const node = this.startNode();
            return this.next(), !this.match(10) || this.scope.allowDirectSuper || this.options.allowSuperOutsideMethod ? this.scope.allowSuper || this.options.allowSuperOutsideMethod || this.raise(Errors.UnexpectedSuper, { at: node }) : this.raise(Errors.SuperNotAllowed, { at: node }), this.match(10) || this.match(0) || this.match(16) || this.raise(Errors.UnsupportedSuper, { at: node }), this.finishNode(node, "Super");
          }
          parsePrivateName() {
            const node = this.startNode(), id = this.startNodeAt(this.state.start + 1, new Position3(this.state.curLine, this.state.start + 1 - this.state.lineStart, this.state.start + 1)), name = this.state.value;
            return this.next(), node.id = this.createIdentifier(id, name), this.finishNode(node, "PrivateName");
          }
          parseFunctionOrFunctionSent() {
            const node = this.startNode();
            if (this.next(), this.prodParam.hasYield && this.match(16)) {
              const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
              return this.next(), this.match(102) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected(), this.parseMetaProperty(node, meta, "sent");
            }
            return this.parseFunction(node);
          }
          parseMetaProperty(node, meta, propertyName) {
            node.meta = meta;
            const containsEsc = this.state.containsEsc;
            return node.property = this.parseIdentifier(true), (node.property.name !== propertyName || containsEsc) && this.raise(Errors.UnsupportedMetaProperty, { at: node.property, target: meta.name, onlyValidPropertyName: propertyName }), this.finishNode(node, "MetaProperty");
          }
          parseImportMetaProperty(node) {
            const id = this.createIdentifier(this.startNodeAtNode(node), "import");
            return this.next(), this.isContextual(100) && (this.inModule || this.raise(Errors.ImportMetaOutsideModule, { at: id }), this.sawUnambiguousESM = true), this.parseMetaProperty(node, id, "meta");
          }
          parseLiteralAtNode(value, type, node) {
            return this.addExtra(node, "rawValue", value), this.addExtra(node, "raw", this.input.slice(node.start, this.state.end)), node.value = value, this.next(), this.finishNode(node, type);
          }
          parseLiteral(value, type) {
            const node = this.startNode();
            return this.parseLiteralAtNode(value, type, node);
          }
          parseStringLiteral(value) {
            return this.parseLiteral(value, "StringLiteral");
          }
          parseNumericLiteral(value) {
            return this.parseLiteral(value, "NumericLiteral");
          }
          parseBigIntLiteral(value) {
            return this.parseLiteral(value, "BigIntLiteral");
          }
          parseDecimalLiteral(value) {
            return this.parseLiteral(value, "DecimalLiteral");
          }
          parseRegExpLiteral(value) {
            const node = this.parseLiteral(value.value, "RegExpLiteral");
            return node.pattern = value.pattern, node.flags = value.flags, node;
          }
          parseBooleanLiteral(value) {
            const node = this.startNode();
            return node.value = value, this.next(), this.finishNode(node, "BooleanLiteral");
          }
          parseNullLiteral() {
            const node = this.startNode();
            return this.next(), this.finishNode(node, "NullLiteral");
          }
          parseParenAndDistinguishExpression(canBeArrow) {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            let val;
            this.next(), this.expressionScope.enter(new ArrowHeadParsingScope(1));
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters, oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.maybeInArrowParameters = true, this.state.inFSharpPipelineDirectBody = false;
            const innerStartPos = this.state.start, innerStartLoc = this.state.startLoc, exprList = [], refExpressionErrors = new ExpressionErrors();
            let spreadStartLoc, optionalCommaStartLoc, first = true;
            for (; !this.match(11); ) {
              if (first)
                first = false;
              else if (this.expect(12, null === refExpressionErrors.optionalParametersLoc ? null : refExpressionErrors.optionalParametersLoc), this.match(11)) {
                optionalCommaStartLoc = this.state.startLoc;
                break;
              }
              if (this.match(21)) {
                const spreadNodeStartPos = this.state.start, spreadNodeStartLoc = this.state.startLoc;
                if (spreadStartLoc = this.state.startLoc, exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc)), !this.checkCommaAfterRest(41))
                  break;
              } else
                exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
            }
            const innerEndLoc = this.state.lastTokEndLoc;
            this.expect(11), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
            let arrowNode = this.startNodeAt(startPos, startLoc);
            return canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode)) ? (this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), this.parseArrowExpression(arrowNode, exprList, false), arrowNode) : (this.expressionScope.exit(), exprList.length || this.unexpected(this.state.lastTokStartLoc), optionalCommaStartLoc && this.unexpected(optionalCommaStartLoc), spreadStartLoc && this.unexpected(spreadStartLoc), this.checkExpressionErrors(refExpressionErrors, true), this.toReferencedListDeep(exprList, true), exprList.length > 1 ? (val = this.startNodeAt(innerStartPos, innerStartLoc), val.expressions = exprList, this.finishNode(val, "SequenceExpression"), this.resetEndLocation(val, innerEndLoc)) : val = exprList[0], this.wrapParenthesis(startPos, startLoc, val));
          }
          wrapParenthesis(startPos, startLoc, expression) {
            if (!this.options.createParenthesizedExpressions)
              return this.addExtra(expression, "parenthesized", true), this.addExtra(expression, "parenStart", startPos), this.takeSurroundingComments(expression, startPos, this.state.lastTokEndLoc.index), expression;
            const parenExpression = this.startNodeAt(startPos, startLoc);
            return parenExpression.expression = expression, this.finishNode(parenExpression, "ParenthesizedExpression");
          }
          shouldParseArrow(params) {
            return !this.canInsertSemicolon();
          }
          parseArrow(node) {
            if (this.eat(19))
              return node;
          }
          parseParenItem(node, startPos, startLoc) {
            return node;
          }
          parseNewOrNewTarget() {
            const node = this.startNode();
            if (this.next(), this.match(16)) {
              const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
              this.next();
              const metaProp = this.parseMetaProperty(node, meta, "target");
              return this.scope.inNonArrowFunction || this.scope.inClass || this.raise(Errors.UnexpectedNewTarget, { at: metaProp }), metaProp;
            }
            return this.parseNew(node);
          }
          parseNew(node) {
            if (this.parseNewCallee(node), this.eat(10)) {
              const args = this.parseExprList(11);
              this.toReferencedList(args), node.arguments = args;
            } else
              node.arguments = [];
            return this.finishNode(node, "NewExpression");
          }
          parseNewCallee(node) {
            node.callee = this.parseNoCallExpr(), "Import" === node.callee.type ? this.raise(Errors.ImportCallNotNewExpression, { at: node.callee }) : this.isOptionalChain(node.callee) ? this.raise(Errors.OptionalChainingNoNew, { at: this.state.lastTokEndLoc }) : this.eat(18) && this.raise(Errors.OptionalChainingNoNew, { at: this.state.startLoc });
          }
          parseTemplateElement(isTagged) {
            const { start, startLoc, end, value } = this.state, elemStart = start + 1, elem = this.startNodeAt(elemStart, createPositionWithColumnOffset(startLoc, 1));
            null === value && (isTagged || this.raise(Errors.InvalidEscapeSequenceTemplate, { at: createPositionWithColumnOffset(startLoc, 2) }));
            const isTail = this.match(24), endOffset = isTail ? -1 : -2, elemEnd = end + endOffset;
            elem.value = { raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"), cooked: null === value ? null : value.slice(1, endOffset) }, elem.tail = isTail, this.next();
            const finishedNode = this.finishNode(elem, "TemplateElement");
            return this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset)), finishedNode;
          }
          parseTemplate(isTagged) {
            const node = this.startNode();
            node.expressions = [];
            let curElt = this.parseTemplateElement(isTagged);
            for (node.quasis = [curElt]; !curElt.tail; )
              node.expressions.push(this.parseTemplateSubstitution()), this.readTemplateContinuation(), node.quasis.push(curElt = this.parseTemplateElement(isTagged));
            return this.finishNode(node, "TemplateLiteral");
          }
          parseTemplateSubstitution() {
            return this.parseExpression();
          }
          parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
            isRecord && this.expectPlugin("recordAndTuple");
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            const propHash = /* @__PURE__ */ Object.create(null);
            let first = true;
            const node = this.startNode();
            for (node.properties = [], this.next(); !this.match(close); ) {
              if (first)
                first = false;
              else if (this.expect(12), this.match(close)) {
                this.addTrailingCommaExtraToNode(node);
                break;
              }
              let prop;
              isPattern ? prop = this.parseBindingProperty() : (prop = this.parsePropertyDefinition(refExpressionErrors), this.checkProto(prop, isRecord, propHash, refExpressionErrors)), isRecord && !this.isObjectProperty(prop) && "SpreadElement" !== prop.type && this.raise(Errors.InvalidRecordProperty, { at: prop }), prop.shorthand && this.addExtra(prop, "shorthand", true), node.properties.push(prop);
            }
            this.next(), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
            let type = "ObjectExpression";
            return isPattern ? type = "ObjectPattern" : isRecord && (type = "RecordExpression"), this.finishNode(node, type);
          }
          addTrailingCommaExtraToNode(node) {
            this.addExtra(node, "trailingComma", this.state.lastTokStart), this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
          }
          maybeAsyncOrAccessorProp(prop) {
            return !prop.computed && "Identifier" === prop.key.type && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
          }
          parsePropertyDefinition(refExpressionErrors) {
            let decorators = [];
            if (this.match(26))
              for (this.hasPlugin("decorators") && this.raise(Errors.UnsupportedPropertyDecorator, { at: this.state.startLoc }); this.match(26); )
                decorators.push(this.parseDecorator());
            const prop = this.startNode();
            let startPos, startLoc, isAsync = false, isAccessor = false;
            if (this.match(21))
              return decorators.length && this.unexpected(), this.parseSpread();
            decorators.length && (prop.decorators = decorators, decorators = []), prop.method = false, refExpressionErrors && (startPos = this.state.start, startLoc = this.state.startLoc);
            let isGenerator = this.eat(55);
            this.parsePropertyNamePrefixOperator(prop);
            const containsEsc = this.state.containsEsc, key = this.parsePropertyName(prop, refExpressionErrors);
            if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
              const keyName = key.name;
              "async" !== keyName || this.hasPrecedingLineBreak() || (isAsync = true, this.resetPreviousNodeTrailingComments(key), isGenerator = this.eat(55), this.parsePropertyName(prop)), "get" !== keyName && "set" !== keyName || (isAccessor = true, this.resetPreviousNodeTrailingComments(key), prop.kind = keyName, this.match(55) && (isGenerator = true, this.raise(Errors.AccessorIsGenerator, { at: this.state.curPosition(), kind: keyName }), this.next()), this.parsePropertyName(prop));
            }
            return this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
          }
          getGetterSetterExpectedParamCount(method) {
            return "get" === method.kind ? 0 : 1;
          }
          getObjectOrClassMethodParams(method) {
            return method.params;
          }
          checkGetterSetterParams(method) {
            var _params;
            const paramCount = this.getGetterSetterExpectedParamCount(method), params = this.getObjectOrClassMethodParams(method);
            params.length !== paramCount && this.raise("get" === method.kind ? Errors.BadGetterArity : Errors.BadSetterArity, { at: method }), "set" === method.kind && "RestElement" === (null == (_params = params[params.length - 1]) ? void 0 : _params.type) && this.raise(Errors.BadSetterRestParameter, { at: method });
          }
          parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
            if (isAccessor) {
              const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
              return this.checkGetterSetterParams(finishedProp), finishedProp;
            }
            if (isAsync || isGenerator || this.match(10))
              return isPattern && this.unexpected(), prop.kind = "method", prop.method = true, this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
          }
          parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
            if (prop.shorthand = false, this.eat(14))
              return prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors), this.finishNode(prop, "ObjectProperty");
            if (!prop.computed && "Identifier" === prop.key.type) {
              if (this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false), isPattern)
                prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));
              else if (this.match(29)) {
                const shorthandAssignLoc = this.state.startLoc;
                null != refExpressionErrors ? null === refExpressionErrors.shorthandAssignLoc && (refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc) : this.raise(Errors.InvalidCoverInitializedName, { at: shorthandAssignLoc }), prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));
              } else
                prop.value = cloneIdentifier(prop.key);
              return prop.shorthand = true, this.finishNode(prop, "ObjectProperty");
            }
          }
          parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
            return node || this.unexpected(), node;
          }
          parsePropertyName(prop, refExpressionErrors) {
            if (this.eat(0))
              prop.computed = true, prop.key = this.parseMaybeAssignAllowIn(), this.expect(3);
            else {
              const { type, value } = this.state;
              let key;
              if (tokenIsKeywordOrIdentifier(type))
                key = this.parseIdentifier(true);
              else
                switch (type) {
                  case 130:
                    key = this.parseNumericLiteral(value);
                    break;
                  case 129:
                    key = this.parseStringLiteral(value);
                    break;
                  case 131:
                    key = this.parseBigIntLiteral(value);
                    break;
                  case 132:
                    key = this.parseDecimalLiteral(value);
                    break;
                  case 134: {
                    const privateKeyLoc = this.state.startLoc;
                    null != refExpressionErrors ? null === refExpressionErrors.privateKeyLoc && (refExpressionErrors.privateKeyLoc = privateKeyLoc) : this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc }), key = this.parsePrivateName();
                    break;
                  }
                  default:
                    throw this.unexpected();
                }
              prop.key = key, 134 !== type && (prop.computed = false);
            }
            return prop.key;
          }
          initFunction(node, isAsync) {
            node.id = null, node.generator = false, node.async = !!isAsync;
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
            this.initFunction(node, isAsync), node.generator = !!isGenerator;
            const allowModifiers = isConstructor;
            this.scope.enter(18 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0)), this.prodParam.enter(functionFlags2(isAsync, node.generator)), this.parseFunctionParams(node, allowModifiers);
            const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
            return this.prodParam.exit(), this.scope.exit(), finishedNode;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            isTuple && this.expectPlugin("recordAndTuple");
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            const node = this.startNode();
            return this.next(), node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
          }
          parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
            this.scope.enter(6);
            let flags = functionFlags2(isAsync, false);
            !this.match(5) && this.prodParam.hasIn && (flags |= 8), this.prodParam.enter(flags), this.initFunction(node, isAsync);
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            return params && (this.state.maybeInArrowParameters = true, this.setArrowFunctionParameters(node, params, trailingCommaLoc)), this.state.maybeInArrowParameters = false, this.parseFunctionBody(node, true), this.prodParam.exit(), this.scope.exit(), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.finishNode(node, "ArrowFunctionExpression");
          }
          setArrowFunctionParameters(node, params, trailingCommaLoc) {
            this.toAssignableList(params, trailingCommaLoc, false), node.params = params;
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            return this.parseFunctionBody(node, false, isMethod), this.finishNode(node, type);
          }
          parseFunctionBody(node, allowExpression, isMethod = false) {
            const isExpression = allowExpression && !this.match(5);
            if (this.expressionScope.enter(newExpressionScope()), isExpression)
              node.body = this.parseMaybeAssign(), this.checkParams(node, false, allowExpression, false);
            else {
              const oldStrict = this.state.strict, oldLabels = this.state.labels;
              this.state.labels = [], this.prodParam.enter(4 | this.prodParam.currentFlags()), node.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
                const nonSimple = !this.isSimpleParamList(node.params);
                hasStrictModeDirective && nonSimple && this.raise(Errors.IllegalLanguageModeDirective, { at: "method" !== node.kind && "constructor" !== node.kind || !node.key ? node : node.key.loc.end });
                const strictModeChanged = !oldStrict && this.state.strict;
                this.checkParams(node, !(this.state.strict || allowExpression || isMethod || nonSimple), allowExpression, strictModeChanged), this.state.strict && node.id && this.checkIdentifier(node.id, 65, strictModeChanged);
              }), this.prodParam.exit(), this.state.labels = oldLabels;
            }
            this.expressionScope.exit();
          }
          isSimpleParameter(node) {
            return "Identifier" === node.type;
          }
          isSimpleParamList(params) {
            for (let i = 0, len = params.length; i < len; i++)
              if (!this.isSimpleParameter(params[i]))
                return false;
            return true;
          }
          checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
            const checkClashes = !allowDuplicates && /* @__PURE__ */ new Set(), formalParameters = { type: "FormalParameters" };
            for (const param of node.params)
              this.checkLVal(param, { in: formalParameters, binding: 5, checkClashes, strictModeChanged });
          }
          parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
            const elts = [];
            let first = true;
            for (; !this.eat(close); ) {
              if (first)
                first = false;
              else if (this.expect(12), this.match(close)) {
                nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
                break;
              }
              elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
            }
            return elts;
          }
          parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
            let elt;
            if (this.match(12))
              allowEmpty || this.raise(Errors.UnexpectedToken, { at: this.state.curPosition(), unexpected: "," }), elt = null;
            else if (this.match(21)) {
              const spreadNodeStartPos = this.state.start, spreadNodeStartLoc = this.state.startLoc;
              elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);
            } else if (this.match(17)) {
              this.expectPlugin("partialApplication"), allowPlaceholder || this.raise(Errors.UnexpectedArgumentPlaceholder, { at: this.state.startLoc });
              const node = this.startNode();
              this.next(), elt = this.finishNode(node, "ArgumentPlaceholder");
            } else
              elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
            return elt;
          }
          parseIdentifier(liberal) {
            const node = this.startNode(), name = this.parseIdentifierName(node.start, liberal);
            return this.createIdentifier(node, name);
          }
          createIdentifier(node, name) {
            return node.name = name, node.loc.identifierName = name, this.finishNode(node, "Identifier");
          }
          parseIdentifierName(pos, liberal) {
            let name;
            const { startLoc, type } = this.state;
            if (!tokenIsKeywordOrIdentifier(type))
              throw this.unexpected();
            name = this.state.value;
            const tokenIsKeyword2 = type <= 92;
            return liberal ? tokenIsKeyword2 && this.replaceToken(128) : this.checkReservedWord(name, startLoc, tokenIsKeyword2, false), this.next(), name;
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            if (word.length > 10)
              return;
            if (!function(word2) {
              return reservedWordLikeSet.has(word2);
            }(word))
              return;
            if ("yield" === word) {
              if (this.prodParam.hasYield)
                return void this.raise(Errors.YieldBindingIdentifier, { at: startLoc });
            } else if ("await" === word) {
              if (this.prodParam.hasAwait)
                return void this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });
              if (this.scope.inStaticBlock)
                return void this.raise(Errors.AwaitBindingIdentifierInStaticBlock, { at: startLoc });
              this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });
            } else if ("arguments" === word && this.scope.inClassAndNotInNonArrowFunction)
              return void this.raise(Errors.ArgumentsInClass, { at: startLoc });
            if (checkKeywords && function(word2) {
              return keywords2.has(word2);
            }(word))
              return void this.raise(Errors.UnexpectedKeyword, { at: startLoc, keyword: word });
            (this.state.strict ? isBinding ? isStrictBindReservedWord : isStrictReservedWord : isReservedWord)(word, this.inModule) && this.raise(Errors.UnexpectedReservedWord, { at: startLoc, reservedWord: word });
          }
          isAwaitAllowed() {
            return !!this.prodParam.hasAwait || !(!this.options.allowAwaitOutsideFunction || this.scope.inFunction);
          }
          parseAwait(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc);
            return this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, { at: node }), this.eat(55) && this.raise(Errors.ObsoleteAwaitStar, { at: node }), this.scope.inFunction || this.options.allowAwaitOutsideFunction || (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst = true : this.sawUnambiguousESM = true), this.state.soloAwait || (node.argument = this.parseMaybeUnary(null, true)), this.finishNode(node, "AwaitExpression");
          }
          isAmbiguousAwait() {
            if (this.hasPrecedingLineBreak())
              return true;
            const { type } = this.state;
            return 53 === type || 10 === type || 0 === type || tokenIsTemplate(type) || 133 === type || 56 === type || this.hasPlugin("v8intrinsic") && 54 === type;
          }
          parseYield() {
            const node = this.startNode();
            this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, { at: node }), this.next();
            let delegating = false, argument = null;
            if (!this.hasPrecedingLineBreak())
              switch (delegating = this.eat(55), this.state.type) {
                case 13:
                case 135:
                case 8:
                case 11:
                case 3:
                case 9:
                case 14:
                case 12:
                  if (!delegating)
                    break;
                default:
                  argument = this.parseMaybeAssign();
              }
            return node.delegate = delegating, node.argument = argument, this.finishNode(node, "YieldExpression");
          }
          checkPipelineAtInfixOperator(left, leftStartLoc) {
            this.hasPlugin(["pipelineOperator", { proposal: "smart" }]) && "SequenceExpression" === left.type && this.raise(Errors.PipelineHeadSequenceExpression, { at: leftStartLoc });
          }
          parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {
            if (this.isSimpleReference(childExpr)) {
              const bodyNode = this.startNodeAt(startPos, startLoc);
              return bodyNode.callee = childExpr, this.finishNode(bodyNode, "PipelineBareFunction");
            }
            {
              const bodyNode = this.startNodeAt(startPos, startLoc);
              return this.checkSmartPipeTopicBodyEarlyErrors(startLoc), bodyNode.expression = childExpr, this.finishNode(bodyNode, "PipelineTopicExpression");
            }
          }
          isSimpleReference(expression) {
            switch (expression.type) {
              case "MemberExpression":
                return !expression.computed && this.isSimpleReference(expression.object);
              case "Identifier":
                return true;
              default:
                return false;
            }
          }
          checkSmartPipeTopicBodyEarlyErrors(startLoc) {
            if (this.match(19))
              throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });
            this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipelineTopicUnused, { at: startLoc });
          }
          withTopicBindingContext(callback) {
            const outerContextTopicState = this.state.topicContext;
            this.state.topicContext = { maxNumOfResolvableTopics: 1, maxTopicIndex: null };
            try {
              return callback();
            } finally {
              this.state.topicContext = outerContextTopicState;
            }
          }
          withSmartMixTopicForbiddingContext(callback) {
            if (!this.hasPlugin(["pipelineOperator", { proposal: "smart" }]))
              return callback();
            {
              const outerContextTopicState = this.state.topicContext;
              this.state.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null };
              try {
                return callback();
              } finally {
                this.state.topicContext = outerContextTopicState;
              }
            }
          }
          withSoloAwaitPermittingContext(callback) {
            const outerContextSoloAwaitState = this.state.soloAwait;
            this.state.soloAwait = true;
            try {
              return callback();
            } finally {
              this.state.soloAwait = outerContextSoloAwaitState;
            }
          }
          allowInAnd(callback) {
            const flags = this.prodParam.currentFlags();
            if (8 & ~flags) {
              this.prodParam.enter(8 | flags);
              try {
                return callback();
              } finally {
                this.prodParam.exit();
              }
            }
            return callback();
          }
          disallowInAnd(callback) {
            const flags = this.prodParam.currentFlags();
            if (8 & flags) {
              this.prodParam.enter(-9 & flags);
              try {
                return callback();
              } finally {
                this.prodParam.exit();
              }
            }
            return callback();
          }
          registerTopicReference() {
            this.state.topicContext.maxTopicIndex = 0;
          }
          topicReferenceIsAllowedInCurrentContext() {
            return this.state.topicContext.maxNumOfResolvableTopics >= 1;
          }
          topicReferenceWasUsedInCurrentContext() {
            return null != this.state.topicContext.maxTopicIndex && this.state.topicContext.maxTopicIndex >= 0;
          }
          parseFSharpPipelineBody(prec) {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            this.state.potentialArrowAt = this.state.start;
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = true;
            const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);
            return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, ret;
          }
          parseModuleExpression() {
            this.expectPlugin("moduleBlocks");
            const node = this.startNode();
            this.next(), this.eat(5);
            const revertScopes = this.initializeScopes(true);
            this.enterInitialScopes();
            const program = this.startNode();
            try {
              node.body = this.parseProgram(program, 8, "module");
            } finally {
              revertScopes();
            }
            return this.eat(8), this.finishNode(node, "ModuleExpression");
          }
          parsePropertyNamePrefixOperator(prop) {
          }
        } {
          parseTopLevel(file, program) {
            return file.program = this.parseProgram(program), file.comments = this.state.comments, this.options.tokens && (file.tokens = function(tokens, input) {
              for (let i = 0; i < tokens.length; i++) {
                const token = tokens[i], { type } = token;
                if ("number" == typeof type) {
                  if (134 === type) {
                    const { loc, start, value, end } = token, hashEndPos = start + 1, hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
                    tokens.splice(i, 1, new Token3({ type: getExportedToken(27), value: "#", start, end: hashEndPos, startLoc: loc.start, endLoc: hashEndLoc }), new Token3({ type: getExportedToken(128), value, start: hashEndPos, end, startLoc: hashEndLoc, endLoc: loc.end })), i++;
                    continue;
                  }
                  if (tokenIsTemplate(type)) {
                    const { loc, start, value, end } = token, backquoteEnd = start + 1, backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
                    let startToken, templateValue, templateElementEnd, templateElementEndLoc, endToken;
                    startToken = 96 === input.charCodeAt(start) ? new Token3({ type: getExportedToken(22), value: "`", start, end: backquoteEnd, startLoc: loc.start, endLoc: backquoteEndLoc }) : new Token3({ type: getExportedToken(8), value: "}", start, end: backquoteEnd, startLoc: loc.start, endLoc: backquoteEndLoc }), 24 === type ? (templateElementEnd = end - 1, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1), templateValue = null === value ? null : value.slice(1, -1), endToken = new Token3({ type: getExportedToken(22), value: "`", start: templateElementEnd, end, startLoc: templateElementEndLoc, endLoc: loc.end })) : (templateElementEnd = end - 2, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2), templateValue = null === value ? null : value.slice(1, -2), endToken = new Token3({ type: getExportedToken(23), value: "${", start: templateElementEnd, end, startLoc: templateElementEndLoc, endLoc: loc.end })), tokens.splice(i, 1, startToken, new Token3({ type: getExportedToken(20), value: templateValue, start: backquoteEnd, end: templateElementEnd, startLoc: backquoteEndLoc, endLoc: templateElementEndLoc }), endToken), i += 2;
                    continue;
                  }
                  token.type = getExportedToken(type);
                }
              }
              return tokens;
            }(this.tokens, this.input)), this.finishNode(file, "File");
          }
          parseProgram(program, end = 135, sourceType = this.options.sourceType) {
            if (program.sourceType = sourceType, program.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(program, true, true, end), this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0)
              for (const [localName, at2] of Array.from(this.scope.undefinedExports))
                this.raise(Errors.ModuleExportUndefined, { at: at2, localName });
            return this.finishNode(program, "Program");
          }
          stmtToDirective(stmt) {
            const directive = stmt;
            directive.type = "Directive", directive.value = directive.expression, delete directive.expression;
            const directiveLiteral = directive.value, expressionValue = directiveLiteral.value, raw = this.input.slice(directiveLiteral.start, directiveLiteral.end), val = directiveLiteral.value = raw.slice(1, -1);
            return this.addExtra(directiveLiteral, "raw", raw), this.addExtra(directiveLiteral, "rawValue", val), this.addExtra(directiveLiteral, "expressionValue", expressionValue), directiveLiteral.type = "DirectiveLiteral", directive;
          }
          parseInterpreterDirective() {
            if (!this.match(28))
              return null;
            const node = this.startNode();
            return node.value = this.state.value, this.next(), this.finishNode(node, "InterpreterDirective");
          }
          isLet(context) {
            return !!this.isContextual(99) && this.isLetKeyword(context);
          }
          isLetKeyword(context) {
            const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
            if (92 === nextCh || 91 === nextCh)
              return true;
            if (context)
              return false;
            if (123 === nextCh)
              return true;
            if (isIdentifierStart2(nextCh)) {
              if (keywordRelationalOperator2.lastIndex = next, keywordRelationalOperator2.test(this.input)) {
                const endCh = this.codePointAtPos(keywordRelationalOperator2.lastIndex);
                if (!isIdentifierChar2(endCh) && 92 !== endCh)
                  return false;
              }
              return true;
            }
            return false;
          }
          parseStatement(context, topLevel) {
            return this.match(26) && this.parseDecorators(true), this.parseStatementContent(context, topLevel);
          }
          parseStatementContent(context, topLevel) {
            let starttype = this.state.type;
            const node = this.startNode();
            let kind;
            switch (this.isLet(context) && (starttype = 74, kind = "let"), starttype) {
              case 60:
                return this.parseBreakContinueStatement(node, true);
              case 63:
                return this.parseBreakContinueStatement(node, false);
              case 64:
                return this.parseDebuggerStatement(node);
              case 90:
                return this.parseDoStatement(node);
              case 91:
                return this.parseForStatement(node);
              case 68:
                if (46 === this.lookaheadCharCode())
                  break;
                return context && (this.state.strict ? this.raise(Errors.StrictFunction, { at: this.state.startLoc }) : "if" !== context && "label" !== context && this.raise(Errors.SloppyFunction, { at: this.state.startLoc })), this.parseFunctionStatement(node, false, !context);
              case 80:
                return context && this.unexpected(), this.parseClass(node, true);
              case 69:
                return this.parseIfStatement(node);
              case 70:
                return this.parseReturnStatement(node);
              case 71:
                return this.parseSwitchStatement(node);
              case 72:
                return this.parseThrowStatement(node);
              case 73:
                return this.parseTryStatement(node);
              case 75:
              case 74:
                return kind = kind || this.state.value, context && "var" !== kind && this.raise(Errors.UnexpectedLexicalDeclaration, { at: this.state.startLoc }), this.parseVarStatement(node, kind);
              case 92:
                return this.parseWhileStatement(node);
              case 76:
                return this.parseWithStatement(node);
              case 5:
                return this.parseBlock();
              case 13:
                return this.parseEmptyStatement(node);
              case 83: {
                const nextTokenCharCode = this.lookaheadCharCode();
                if (40 === nextTokenCharCode || 46 === nextTokenCharCode)
                  break;
              }
              case 82: {
                let result;
                return this.options.allowImportExportEverywhere || topLevel || this.raise(Errors.UnexpectedImportExport, { at: this.state.startLoc }), this.next(), 83 === starttype ? (result = this.parseImport(node), "ImportDeclaration" !== result.type || result.importKind && "value" !== result.importKind || (this.sawUnambiguousESM = true)) : (result = this.parseExport(node), ("ExportNamedDeclaration" !== result.type || result.exportKind && "value" !== result.exportKind) && ("ExportAllDeclaration" !== result.type || result.exportKind && "value" !== result.exportKind) && "ExportDefaultDeclaration" !== result.type || (this.sawUnambiguousESM = true)), this.assertModuleNodeAllowed(result), result;
              }
              default:
                if (this.isAsyncFunction())
                  return context && this.raise(Errors.AsyncFunctionInSingleStatementContext, { at: this.state.startLoc }), this.next(), this.parseFunctionStatement(node, true, !context);
            }
            const maybeName = this.state.value, expr = this.parseExpression();
            return tokenIsIdentifier(starttype) && "Identifier" === expr.type && this.eat(14) ? this.parseLabeledStatement(node, maybeName, expr, context) : this.parseExpressionStatement(node, expr);
          }
          assertModuleNodeAllowed(node) {
            this.options.allowImportExportEverywhere || this.inModule || this.raise(Errors.ImportOutsideModule, { at: node });
          }
          takeDecorators(node) {
            const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
            decorators.length && (node.decorators = decorators, this.resetStartLocationFromNode(node, decorators[0]), this.state.decoratorStack[this.state.decoratorStack.length - 1] = []);
          }
          canHaveLeadingDecorator() {
            return this.match(80);
          }
          parseDecorators(allowExport) {
            const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
            for (; this.match(26); ) {
              const decorator = this.parseDecorator();
              currentContextDecorators.push(decorator);
            }
            if (this.match(82))
              allowExport || this.unexpected(), this.hasPlugin("decorators") && !this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });
            else if (!this.canHaveLeadingDecorator())
              throw this.raise(Errors.UnexpectedLeadingDecorator, { at: this.state.startLoc });
          }
          parseDecorator() {
            this.expectOnePlugin(["decorators", "decorators-legacy"]);
            const node = this.startNode();
            if (this.next(), this.hasPlugin("decorators")) {
              this.state.decoratorStack.push([]);
              const startPos = this.state.start, startLoc = this.state.startLoc;
              let expr;
              if (this.match(10)) {
                const startPos2 = this.state.start, startLoc2 = this.state.startLoc;
                this.next(), expr = this.parseExpression(), this.expect(11), expr = this.wrapParenthesis(startPos2, startLoc2, expr);
              } else
                for (expr = this.parseIdentifier(false); this.eat(16); ) {
                  const node2 = this.startNodeAt(startPos, startLoc);
                  node2.object = expr, node2.property = this.parseIdentifier(true), node2.computed = false, expr = this.finishNode(node2, "MemberExpression");
                }
              node.expression = this.parseMaybeDecoratorArguments(expr), this.state.decoratorStack.pop();
            } else
              node.expression = this.parseExprSubscripts();
            return this.finishNode(node, "Decorator");
          }
          parseMaybeDecoratorArguments(expr) {
            if (this.eat(10)) {
              const node = this.startNodeAtNode(expr);
              return node.callee = expr, node.arguments = this.parseCallExpressionArguments(11, false), this.toReferencedList(node.arguments), this.finishNode(node, "CallExpression");
            }
            return expr;
          }
          parseBreakContinueStatement(node, isBreak) {
            return this.next(), this.isLineTerminator() ? node.label = null : (node.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(node, isBreak), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
          }
          verifyBreakContinue(node, isBreak) {
            let i;
            for (i = 0; i < this.state.labels.length; ++i) {
              const lab = this.state.labels[i];
              if (null == node.label || lab.name === node.label.name) {
                if (null != lab.kind && (isBreak || "loop" === lab.kind))
                  break;
                if (node.label && isBreak)
                  break;
              }
            }
            if (i === this.state.labels.length) {
              const type = isBreak ? "BreakStatement" : "ContinueStatement";
              this.raise(Errors.IllegalBreakContinue, { at: node, type });
            }
          }
          parseDebuggerStatement(node) {
            return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
          }
          parseHeaderExpression() {
            this.expect(10);
            const val = this.parseExpression();
            return this.expect(11), val;
          }
          parseDoStatement(node) {
            return this.next(), this.state.labels.push(loopLabel2), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("do")), this.state.labels.pop(), this.expect(92), node.test = this.parseHeaderExpression(), this.eat(13), this.finishNode(node, "DoWhileStatement");
          }
          parseForStatement(node) {
            this.next(), this.state.labels.push(loopLabel2);
            let awaitAt = null;
            if (this.isAwaitAllowed() && this.eatContextual(96) && (awaitAt = this.state.lastTokStartLoc), this.scope.enter(0), this.expect(10), this.match(13))
              return null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, null);
            const startsWithLet = this.isContextual(99), isLet = startsWithLet && this.isLetKeyword();
            if (this.match(74) || this.match(75) || isLet) {
              const initNode = this.startNode(), kind = isLet ? "let" : this.state.value;
              this.next(), this.parseVar(initNode, true, kind);
              const init2 = this.finishNode(initNode, "VariableDeclaration");
              return (this.match(58) || this.isContextual(101)) && 1 === init2.declarations.length ? this.parseForIn(node, init2, awaitAt) : (null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, init2));
            }
            const startsWithAsync = this.isContextual(95), refExpressionErrors = new ExpressionErrors(), init = this.parseExpression(true, refExpressionErrors), isForOf = this.isContextual(101);
            if (isForOf && (startsWithLet && this.raise(Errors.ForOfLet, { at: init }), null === awaitAt && startsWithAsync && "Identifier" === init.type && this.raise(Errors.ForOfAsync, { at: init })), isForOf || this.match(58)) {
              this.checkDestructuringPrivate(refExpressionErrors), this.toAssignable(init, true);
              const type = isForOf ? "ForOfStatement" : "ForInStatement";
              return this.checkLVal(init, { in: { type } }), this.parseForIn(node, init, awaitAt);
            }
            return this.checkExpressionErrors(refExpressionErrors, true), null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, init);
          }
          parseFunctionStatement(node, isAsync, declarationPosition) {
            return this.next(), this.parseFunction(node, 1 | (declarationPosition ? 0 : 2), isAsync);
          }
          parseIfStatement(node) {
            return this.next(), node.test = this.parseHeaderExpression(), node.consequent = this.parseStatement("if"), node.alternate = this.eat(66) ? this.parseStatement("if") : null, this.finishNode(node, "IfStatement");
          }
          parseReturnStatement(node) {
            return this.prodParam.hasReturn || this.options.allowReturnOutsideFunction || this.raise(Errors.IllegalReturn, { at: this.state.startLoc }), this.next(), this.isLineTerminator() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
          }
          parseSwitchStatement(node) {
            this.next(), node.discriminant = this.parseHeaderExpression();
            const cases = node.cases = [];
            let cur, sawDefault;
            for (this.expect(5), this.state.labels.push(switchLabel2), this.scope.enter(0); !this.match(8); )
              if (this.match(61) || this.match(65)) {
                const isCase = this.match(61);
                cur && this.finishNode(cur, "SwitchCase"), cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raise(Errors.MultipleDefaultsInSwitch, { at: this.state.lastTokStartLoc }), sawDefault = true, cur.test = null), this.expect(14);
              } else
                cur ? cur.consequent.push(this.parseStatement(null)) : this.unexpected();
            return this.scope.exit(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.state.labels.pop(), this.finishNode(node, "SwitchStatement");
          }
          parseThrowStatement(node) {
            return this.next(), this.hasPrecedingLineBreak() && this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc }), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
          }
          parseCatchClauseParam() {
            const param = this.parseBindingAtom(), simple = "Identifier" === param.type;
            return this.scope.enter(simple ? 8 : 0), this.checkLVal(param, { in: { type: "CatchClause" }, binding: 9, allowingSloppyLetBinding: true }), param;
          }
          parseTryStatement(node) {
            if (this.next(), node.block = this.parseBlock(), node.handler = null, this.match(62)) {
              const clause = this.startNode();
              this.next(), this.match(10) ? (this.expect(10), clause.param = this.parseCatchClauseParam(), this.expect(11)) : (clause.param = null, this.scope.enter(0)), clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false)), this.scope.exit(), node.handler = this.finishNode(clause, "CatchClause");
            }
            return node.finalizer = this.eat(67) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(Errors.NoCatchOrFinally, { at: node }), this.finishNode(node, "TryStatement");
          }
          parseVarStatement(node, kind, allowMissingInitializer = false) {
            return this.next(), this.parseVar(node, false, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
          }
          parseWhileStatement(node) {
            return this.next(), node.test = this.parseHeaderExpression(), this.state.labels.push(loopLabel2), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("while")), this.state.labels.pop(), this.finishNode(node, "WhileStatement");
          }
          parseWithStatement(node) {
            return this.state.strict && this.raise(Errors.StrictWith, { at: this.state.startLoc }), this.next(), node.object = this.parseHeaderExpression(), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("with")), this.finishNode(node, "WithStatement");
          }
          parseEmptyStatement(node) {
            return this.next(), this.finishNode(node, "EmptyStatement");
          }
          parseLabeledStatement(node, maybeName, expr, context) {
            for (const label of this.state.labels)
              label.name === maybeName && this.raise(Errors.LabelRedeclaration, { at: expr, labelName: maybeName });
            const kind = (token = this.state.type) >= 90 && token <= 92 ? "loop" : this.match(71) ? "switch" : null;
            var token;
            for (let i = this.state.labels.length - 1; i >= 0; i--) {
              const label = this.state.labels[i];
              if (label.statementStart !== node.start)
                break;
              label.statementStart = this.state.start, label.kind = kind;
            }
            return this.state.labels.push({ name: maybeName, kind, statementStart: this.state.start }), node.body = this.parseStatement(context ? -1 === context.indexOf("label") ? context + "label" : context : "label"), this.state.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
          }
          parseExpressionStatement(node, expr) {
            return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
          }
          parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
            const node = this.startNode();
            return allowDirectives && this.state.strictErrors.clear(), this.expect(5), createNewLexicalScope && this.scope.enter(0), this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse), createNewLexicalScope && this.scope.exit(), this.finishNode(node, "BlockStatement");
          }
          isValidDirective(stmt) {
            return "ExpressionStatement" === stmt.type && "StringLiteral" === stmt.expression.type && !stmt.expression.extra.parenthesized;
          }
          parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
            const body = node.body = [], directives = node.directives = [];
            this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
          }
          parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
            const oldStrict = this.state.strict;
            let hasStrictModeDirective = false, parsedNonDirective = false;
            for (; !this.match(end); ) {
              const stmt = this.parseStatement(null, topLevel);
              if (directives && !parsedNonDirective) {
                if (this.isValidDirective(stmt)) {
                  const directive = this.stmtToDirective(stmt);
                  directives.push(directive), hasStrictModeDirective || "use strict" !== directive.value.value || (hasStrictModeDirective = true, this.setStrict(true));
                  continue;
                }
                parsedNonDirective = true, this.state.strictErrors.clear();
              }
              body.push(stmt);
            }
            afterBlockParse && afterBlockParse.call(this, hasStrictModeDirective), oldStrict || this.setStrict(false), this.next();
          }
          parseFor(node, init) {
            return node.init = init, this.semicolon(false), node.test = this.match(13) ? null : this.parseExpression(), this.semicolon(false), node.update = this.match(11) ? null : this.parseExpression(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for")), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, "ForStatement");
          }
          parseForIn(node, init, awaitAt) {
            const isForIn = this.match(58);
            return this.next(), isForIn ? null !== awaitAt && this.unexpected(awaitAt) : node.await = null !== awaitAt, "VariableDeclaration" !== init.type || null == init.declarations[0].init || isForIn && !this.state.strict && "var" === init.kind && "Identifier" === init.declarations[0].id.type || this.raise(Errors.ForInOfLoopInitializer, { at: init, type: isForIn ? "ForInStatement" : "ForOfStatement" }), "AssignmentPattern" === init.type && this.raise(Errors.InvalidLhs, { at: init, ancestor: { type: "ForStatement" } }), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for")), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
          }
          parseVar(node, isFor, kind, allowMissingInitializer = false) {
            const declarations = node.declarations = [];
            for (node.kind = kind; ; ) {
              const decl = this.startNode();
              if (this.parseVarId(decl, kind), decl.init = this.eat(29) ? isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : null, null !== decl.init || allowMissingInitializer || ("Identifier" === decl.id.type || isFor && (this.match(58) || this.isContextual(101)) ? "const" !== kind || this.match(58) || this.isContextual(101) || this.raise(Errors.DeclarationMissingInitializer, { at: this.state.lastTokEndLoc, kind: "const" }) : this.raise(Errors.DeclarationMissingInitializer, { at: this.state.lastTokEndLoc, kind: "destructuring" })), declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(12))
                break;
            }
            return node;
          }
          parseVarId(decl, kind) {
            decl.id = this.parseBindingAtom(), this.checkLVal(decl.id, { in: { type: "VariableDeclarator" }, binding: "var" === kind ? 5 : 9 });
          }
          parseFunction(node, statement = 0, isAsync = false) {
            const isStatement = 1 & statement, isHangingStatement = 2 & statement, requireId = !(!isStatement || 4 & statement);
            this.initFunction(node, isAsync), this.match(55) && isHangingStatement && this.raise(Errors.GeneratorInSingleStatementContext, { at: this.state.startLoc }), node.generator = this.eat(55), isStatement && (node.id = this.parseFunctionId(requireId));
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            return this.state.maybeInArrowParameters = false, this.scope.enter(2), this.prodParam.enter(functionFlags2(isAsync, node.generator)), isStatement || (node.id = this.parseFunctionId()), this.parseFunctionParams(node, false), this.withSmartMixTopicForbiddingContext(() => {
              this.parseFunctionBodyAndFinish(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
            }), this.prodParam.exit(), this.scope.exit(), isStatement && !isHangingStatement && this.registerFunctionStatementId(node), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, node;
          }
          parseFunctionId(requireId) {
            return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
          }
          parseFunctionParams(node, allowModifiers) {
            this.expect(10), this.expressionScope.enter(new ExpressionScope(3)), node.params = this.parseBindingList(11, 41, false, allowModifiers), this.expressionScope.exit();
          }
          registerFunctionStatementId(node) {
            node.id && this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 9 : 17, node.id.loc.start);
          }
          parseClass(node, isStatement, optionalId) {
            this.next(), this.takeDecorators(node);
            const oldStrict = this.state.strict;
            return this.state.strict = true, this.parseClassId(node, isStatement, optionalId), this.parseClassSuper(node), node.body = this.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
          }
          isClassProperty() {
            return this.match(29) || this.match(13) || this.match(8);
          }
          isClassMethod() {
            return this.match(10);
          }
          isNonstaticConstructor(method) {
            return !(method.computed || method.static || "constructor" !== method.key.name && "constructor" !== method.key.value);
          }
          parseClassBody(hadSuperClass, oldStrict) {
            this.classScope.enter();
            const state = { hadConstructor: false, hadSuperClass };
            let decorators = [];
            const classBody = this.startNode();
            if (classBody.body = [], this.expect(5), this.withSmartMixTopicForbiddingContext(() => {
              for (; !this.match(8); ) {
                if (this.eat(13)) {
                  if (decorators.length > 0)
                    throw this.raise(Errors.DecoratorSemicolon, { at: this.state.lastTokEndLoc });
                  continue;
                }
                if (this.match(26)) {
                  decorators.push(this.parseDecorator());
                  continue;
                }
                const member = this.startNode();
                decorators.length && (member.decorators = decorators, this.resetStartLocationFromNode(member, decorators[0]), decorators = []), this.parseClassMember(classBody, member, state), "constructor" === member.kind && member.decorators && member.decorators.length > 0 && this.raise(Errors.DecoratorConstructor, { at: member });
              }
            }), this.state.strict = oldStrict, this.next(), decorators.length)
              throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });
            return this.classScope.exit(), this.finishNode(classBody, "ClassBody");
          }
          parseClassMemberFromModifier(classBody, member) {
            const key = this.parseIdentifier(true);
            if (this.isClassMethod()) {
              const method = member;
              return method.kind = "method", method.computed = false, method.key = key, method.static = false, this.pushClassMethod(classBody, method, false, false, false, false), true;
            }
            if (this.isClassProperty()) {
              const prop = member;
              return prop.computed = false, prop.key = key, prop.static = false, classBody.body.push(this.parseClassProperty(prop)), true;
            }
            return this.resetPreviousNodeTrailingComments(key), false;
          }
          parseClassMember(classBody, member, state) {
            const isStatic = this.isContextual(104);
            if (isStatic) {
              if (this.parseClassMemberFromModifier(classBody, member))
                return;
              if (this.eat(5))
                return void this.parseClassStaticBlock(classBody, member);
            }
            this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
          }
          parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
            const publicMethod = member, privateMethod = member, publicProp = member, privateProp = member, accessorProp = member, method = publicMethod, publicMember = publicMethod;
            if (member.static = isStatic, this.parsePropertyNamePrefixOperator(member), this.eat(55)) {
              method.kind = "method";
              const isPrivateName = this.match(134);
              return this.parseClassElementName(method), isPrivateName ? void this.pushClassPrivateMethod(classBody, privateMethod, true, false) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsGenerator, { at: publicMethod.key }), void this.pushClassMethod(classBody, publicMethod, true, false, false, false));
            }
            const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc, isPrivate = this.match(134), key = this.parseClassElementName(member), maybeQuestionTokenStartLoc = this.state.startLoc;
            if (this.parsePostMemberNameModifiers(publicMember), this.isClassMethod()) {
              if (method.kind = "method", isPrivate)
                return void this.pushClassPrivateMethod(classBody, privateMethod, false, false);
              const isConstructor = this.isNonstaticConstructor(publicMethod);
              let allowsDirectSuper = false;
              isConstructor && (publicMethod.kind = "constructor", state.hadConstructor && !this.hasPlugin("typescript") && this.raise(Errors.DuplicateConstructor, { at: key }), isConstructor && this.hasPlugin("typescript") && member.override && this.raise(Errors.OverrideOnConstructor, { at: key }), state.hadConstructor = true, allowsDirectSuper = state.hadSuperClass), this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
            } else if (this.isClassProperty())
              isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp);
            else if (isContextual && "async" === key.name && !this.isLineTerminator()) {
              this.resetPreviousNodeTrailingComments(key);
              const isGenerator = this.eat(55);
              publicMember.optional && this.unexpected(maybeQuestionTokenStartLoc), method.kind = "method";
              const isPrivate2 = this.match(134);
              this.parseClassElementName(method), this.parsePostMemberNameModifiers(publicMember), isPrivate2 ? this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key }), this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false));
            } else if (!isContextual || "get" !== key.name && "set" !== key.name || this.match(55) && this.isLineTerminator())
              if (isContextual && "accessor" === key.name && !this.isLineTerminator()) {
                this.expectPlugin("decoratorAutoAccessors"), this.resetPreviousNodeTrailingComments(key);
                const isPrivate2 = this.match(134);
                this.parseClassElementName(publicProp), this.pushClassAccessorProperty(classBody, accessorProp, isPrivate2);
              } else
                this.isLineTerminator() ? isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp) : this.unexpected();
            else {
              this.resetPreviousNodeTrailingComments(key), method.kind = key.name;
              const isPrivate2 = this.match(134);
              this.parseClassElementName(publicMethod), isPrivate2 ? this.pushClassPrivateMethod(classBody, privateMethod, false, false) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key }), this.pushClassMethod(classBody, publicMethod, false, false, false, false)), this.checkGetterSetterParams(publicMethod);
            }
          }
          parseClassElementName(member) {
            const { type, value } = this.state;
            if (128 !== type && 129 !== type || !member.static || "prototype" !== value || this.raise(Errors.StaticPrototype, { at: this.state.startLoc }), 134 === type) {
              "constructor" === value && this.raise(Errors.ConstructorClassPrivateField, { at: this.state.startLoc });
              const key = this.parsePrivateName();
              return member.key = key, key;
            }
            return this.parsePropertyName(member);
          }
          parseClassStaticBlock(classBody, member) {
            var _member$decorators;
            this.scope.enter(208);
            const oldLabels = this.state.labels;
            this.state.labels = [], this.prodParam.enter(0);
            const body = member.body = [];
            this.parseBlockOrModuleBlockBody(body, void 0, false, 8), this.prodParam.exit(), this.scope.exit(), this.state.labels = oldLabels, classBody.body.push(this.finishNode(member, "StaticBlock")), null != (_member$decorators = member.decorators) && _member$decorators.length && this.raise(Errors.DecoratorStaticBlock, { at: member });
          }
          pushClassProperty(classBody, prop) {
            prop.computed || "constructor" !== prop.key.name && "constructor" !== prop.key.value || this.raise(Errors.ConstructorClassField, { at: prop.key }), classBody.body.push(this.parseClassProperty(prop));
          }
          pushClassPrivateProperty(classBody, prop) {
            const node = this.parseClassPrivateProperty(prop);
            classBody.body.push(node), this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
          }
          pushClassAccessorProperty(classBody, prop, isPrivate) {
            if (!isPrivate && !prop.computed) {
              const key = prop.key;
              "constructor" !== key.name && "constructor" !== key.value || this.raise(Errors.ConstructorClassField, { at: key });
            }
            const node = this.parseClassAccessorProperty(prop);
            classBody.body.push(node), isPrivate && this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
            classBody.body.push(node);
            const kind = "get" === node.kind ? node.static ? 6 : 2 : "set" === node.kind ? node.static ? 5 : 1 : 0;
            this.declareClassPrivateMethodInScope(node, kind);
          }
          declareClassPrivateMethodInScope(node, kind) {
            this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
          }
          parsePostMemberNameModifiers(methodOrProp) {
          }
          parseClassPrivateProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassPrivateProperty");
          }
          parseClassProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassProperty");
          }
          parseClassAccessorProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassAccessorProperty");
          }
          parseInitializer(node) {
            this.scope.enter(80), this.expressionScope.enter(newExpressionScope()), this.prodParam.enter(0), node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null, this.expressionScope.exit(), this.prodParam.exit(), this.scope.exit();
          }
          parseClassId(node, isStatement, optionalId, bindingType = 139) {
            if (tokenIsIdentifier(this.state.type))
              node.id = this.parseIdentifier(), isStatement && this.declareNameFromIdentifier(node.id, bindingType);
            else {
              if (!optionalId && isStatement)
                throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });
              node.id = null;
            }
          }
          parseClassSuper(node) {
            node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
          }
          parseExport(node) {
            const hasDefault = this.maybeParseExportDefaultSpecifier(node), parseAfterDefault = !hasDefault || this.eat(12), hasStar = parseAfterDefault && this.eatExportStar(node), hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node), parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12)), isFromRequired = hasDefault || hasStar;
            if (hasStar && !hasNamespace)
              return hasDefault && this.unexpected(), this.parseExportFrom(node, true), this.finishNode(node, "ExportAllDeclaration");
            const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
            if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers)
              throw this.unexpected(null, 5);
            let hasDeclaration;
            if (isFromRequired || hasSpecifiers ? (hasDeclaration = false, this.parseExportFrom(node, isFromRequired)) : hasDeclaration = this.maybeParseExportDeclaration(node), isFromRequired || hasSpecifiers || hasDeclaration)
              return this.checkExport(node, true, false, !!node.source), this.finishNode(node, "ExportNamedDeclaration");
            if (this.eat(65))
              return node.declaration = this.parseExportDefaultExpression(), this.checkExport(node, true, true), this.finishNode(node, "ExportDefaultDeclaration");
            throw this.unexpected(null, 5);
          }
          eatExportStar(node) {
            return this.eat(55);
          }
          maybeParseExportDefaultSpecifier(node) {
            if (this.isExportDefaultSpecifier()) {
              this.expectPlugin("exportDefaultFrom");
              const specifier = this.startNode();
              return specifier.exported = this.parseIdentifier(true), node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], true;
            }
            return false;
          }
          maybeParseExportNamespaceSpecifier(node) {
            if (this.isContextual(93)) {
              node.specifiers || (node.specifiers = []);
              const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);
              return this.next(), specifier.exported = this.parseModuleExportName(), node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier")), true;
            }
            return false;
          }
          maybeParseExportNamedSpecifiers(node) {
            if (this.match(5)) {
              node.specifiers || (node.specifiers = []);
              const isTypeExport = "type" === node.exportKind;
              return node.specifiers.push(...this.parseExportSpecifiers(isTypeExport)), node.source = null, node.declaration = null, this.hasPlugin("importAssertions") && (node.assertions = []), true;
            }
            return false;
          }
          maybeParseExportDeclaration(node) {
            return !!this.shouldParseExportDeclaration() && (node.specifiers = [], node.source = null, this.hasPlugin("importAssertions") && (node.assertions = []), node.declaration = this.parseExportDeclaration(node), true);
          }
          isAsyncFunction() {
            if (!this.isContextual(95))
              return false;
            const next = this.nextTokenStart();
            return !lineBreak2.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, "function");
          }
          parseExportDefaultExpression() {
            const expr = this.startNode(), isAsync = this.isAsyncFunction();
            if (this.match(68) || isAsync)
              return this.next(), isAsync && this.next(), this.parseFunction(expr, 5, isAsync);
            if (this.match(80))
              return this.parseClass(expr, true, true);
            if (this.match(26))
              return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc }), this.parseDecorators(false), this.parseClass(expr, true, true);
            if (this.match(75) || this.match(74) || this.isLet())
              throw this.raise(Errors.UnsupportedDefaultExport, { at: this.state.startLoc });
            const res = this.parseMaybeAssignAllowIn();
            return this.semicolon(), res;
          }
          parseExportDeclaration(node) {
            return this.parseStatement(null);
          }
          isExportDefaultSpecifier() {
            const { type } = this.state;
            if (tokenIsIdentifier(type)) {
              if (95 === type && !this.state.containsEsc || 99 === type)
                return false;
              if ((126 === type || 125 === type) && !this.state.containsEsc) {
                const { type: nextType } = this.lookahead();
                if (tokenIsIdentifier(nextType) && 97 !== nextType || 5 === nextType)
                  return this.expectOnePlugin(["flow", "typescript"]), false;
              }
            } else if (!this.match(65))
              return false;
            const next = this.nextTokenStart(), hasFrom = this.isUnparsedContextual(next, "from");
            if (44 === this.input.charCodeAt(next) || tokenIsIdentifier(this.state.type) && hasFrom)
              return true;
            if (this.match(65) && hasFrom) {
              const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
              return 34 === nextAfterFrom || 39 === nextAfterFrom;
            }
            return false;
          }
          parseExportFrom(node, expect) {
            if (this.eatContextual(97)) {
              node.source = this.parseImportSource(), this.checkExport(node);
              const assertions = this.maybeParseImportAssertions();
              assertions && (node.assertions = assertions, this.checkJSONModuleImport(node));
            } else
              expect && this.unexpected();
            this.semicolon();
          }
          shouldParseExportDeclaration() {
            const { type } = this.state;
            if (26 === type && (this.expectOnePlugin(["decorators", "decorators-legacy"]), this.hasPlugin("decorators"))) {
              if (this.getPluginOption("decorators", "decoratorsBeforeExport"))
                throw this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });
              return true;
            }
            return 74 === type || 75 === type || 68 === type || 80 === type || this.isLet() || this.isAsyncFunction();
          }
          checkExport(node, checkNames, isDefault, isFrom) {
            if (checkNames) {
              if (isDefault) {
                if (this.checkDuplicateExports(node, "default"), this.hasPlugin("exportDefaultFrom")) {
                  var _declaration$extra;
                  const declaration = node.declaration;
                  "Identifier" !== declaration.type || "from" !== declaration.name || declaration.end - declaration.start != 4 || null != (_declaration$extra = declaration.extra) && _declaration$extra.parenthesized || this.raise(Errors.ExportDefaultFromAsIdentifier, { at: declaration });
                }
              } else if (node.specifiers && node.specifiers.length)
                for (const specifier of node.specifiers) {
                  const { exported } = specifier, exportName = "Identifier" === exported.type ? exported.name : exported.value;
                  if (this.checkDuplicateExports(specifier, exportName), !isFrom && specifier.local) {
                    const { local } = specifier;
                    "Identifier" !== local.type ? this.raise(Errors.ExportBindingIsString, { at: specifier, localName: local.value, exportName }) : (this.checkReservedWord(local.name, local.loc.start, true, false), this.scope.checkLocalExport(local));
                  }
                }
              else if (node.declaration) {
                if ("FunctionDeclaration" === node.declaration.type || "ClassDeclaration" === node.declaration.type) {
                  const id = node.declaration.id;
                  if (!id)
                    throw new Error("Assertion failure");
                  this.checkDuplicateExports(node, id.name);
                } else if ("VariableDeclaration" === node.declaration.type)
                  for (const declaration of node.declaration.declarations)
                    this.checkDeclaration(declaration.id);
              }
            }
            if (this.state.decoratorStack[this.state.decoratorStack.length - 1].length)
              throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });
          }
          checkDeclaration(node) {
            if ("Identifier" === node.type)
              this.checkDuplicateExports(node, node.name);
            else if ("ObjectPattern" === node.type)
              for (const prop of node.properties)
                this.checkDeclaration(prop);
            else if ("ArrayPattern" === node.type)
              for (const elem of node.elements)
                elem && this.checkDeclaration(elem);
            else
              "ObjectProperty" === node.type ? this.checkDeclaration(node.value) : "RestElement" === node.type ? this.checkDeclaration(node.argument) : "AssignmentPattern" === node.type && this.checkDeclaration(node.left);
          }
          checkDuplicateExports(node, exportName) {
            this.exportedIdentifiers.has(exportName) && ("default" === exportName ? this.raise(Errors.DuplicateDefaultExport, { at: node }) : this.raise(Errors.DuplicateExport, { at: node, exportName })), this.exportedIdentifiers.add(exportName);
          }
          parseExportSpecifiers(isInTypeExport) {
            const nodes = [];
            let first = true;
            for (this.expect(5); !this.eat(8); ) {
              if (first)
                first = false;
              else if (this.expect(12), this.eat(8))
                break;
              const isMaybeTypeOnly = this.isContextual(126), isString = this.match(129), node = this.startNode();
              node.local = this.parseModuleExportName(), nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
            }
            return nodes;
          }
          parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
            return this.eatContextual(93) ? node.exported = this.parseModuleExportName() : isString ? node.exported = cloneStringLiteral(node.local) : node.exported || (node.exported = cloneIdentifier(node.local)), this.finishNode(node, "ExportSpecifier");
          }
          parseModuleExportName() {
            if (this.match(129)) {
              const result = this.parseStringLiteral(this.state.value), surrogate = result.value.match(loneSurrogate2);
              return surrogate && this.raise(Errors.ModuleExportNameHasLoneSurrogate, { at: result, surrogateCharCode: surrogate[0].charCodeAt(0) }), result;
            }
            return this.parseIdentifier(true);
          }
          isJSONModuleImport(node) {
            return null != node.assertions && node.assertions.some(({ key, value }) => "json" === value.value && ("Identifier" === key.type ? "type" === key.name : "type" === key.value));
          }
          checkJSONModuleImport(node) {
            if (this.isJSONModuleImport(node) && "ExportAllDeclaration" !== node.type) {
              const { specifiers } = node;
              if (null != node.specifiers) {
                const nonDefaultNamedSpecifier = specifiers.find((specifier) => {
                  let imported;
                  if ("ExportSpecifier" === specifier.type ? imported = specifier.local : "ImportSpecifier" === specifier.type && (imported = specifier.imported), void 0 !== imported)
                    return "Identifier" === imported.type ? "default" !== imported.name : "default" !== imported.value;
                });
                void 0 !== nonDefaultNamedSpecifier && this.raise(Errors.ImportJSONBindingNotDefault, { at: nonDefaultNamedSpecifier.loc.start });
              }
            }
          }
          parseImport(node) {
            if (node.specifiers = [], !this.match(129)) {
              const parseNext = !this.maybeParseDefaultImportSpecifier(node) || this.eat(12), hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
              parseNext && !hasStar && this.parseNamedImportSpecifiers(node), this.expectContextual(97);
            }
            node.source = this.parseImportSource();
            const assertions = this.maybeParseImportAssertions();
            if (assertions)
              node.assertions = assertions;
            else {
              const attributes = this.maybeParseModuleAttributes();
              attributes && (node.attributes = attributes);
            }
            return this.checkJSONModuleImport(node), this.semicolon(), this.finishNode(node, "ImportDeclaration");
          }
          parseImportSource() {
            return this.match(129) || this.unexpected(), this.parseExprAtom();
          }
          shouldParseDefaultImport(node) {
            return tokenIsIdentifier(this.state.type);
          }
          parseImportSpecifierLocal(node, specifier, type) {
            specifier.local = this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type));
          }
          finishImportSpecifier(specifier, type) {
            return this.checkLVal(specifier.local, { in: specifier, binding: 9 }), this.finishNode(specifier, type);
          }
          parseAssertEntries() {
            const attrs = [], attrNames = /* @__PURE__ */ new Set();
            do {
              if (this.match(8))
                break;
              const node = this.startNode(), keyName = this.state.value;
              if (attrNames.has(keyName) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, { at: this.state.startLoc, key: keyName }), attrNames.add(keyName), this.match(129) ? node.key = this.parseStringLiteral(keyName) : node.key = this.parseIdentifier(true), this.expect(14), !this.match(129))
                throw this.raise(Errors.ModuleAttributeInvalidValue, { at: this.state.startLoc });
              node.value = this.parseStringLiteral(this.state.value), attrs.push(this.finishNode(node, "ImportAttribute"));
            } while (this.eat(12));
            return attrs;
          }
          maybeParseModuleAttributes() {
            if (!this.match(76) || this.hasPrecedingLineBreak())
              return this.hasPlugin("moduleAttributes") ? [] : null;
            this.expectPlugin("moduleAttributes"), this.next();
            const attrs = [], attributes = /* @__PURE__ */ new Set();
            do {
              const node = this.startNode();
              if (node.key = this.parseIdentifier(true), "type" !== node.key.name && this.raise(Errors.ModuleAttributeDifferentFromType, { at: node.key }), attributes.has(node.key.name) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, { at: node.key, key: node.key.name }), attributes.add(node.key.name), this.expect(14), !this.match(129))
                throw this.raise(Errors.ModuleAttributeInvalidValue, { at: this.state.startLoc });
              node.value = this.parseStringLiteral(this.state.value), this.finishNode(node, "ImportAttribute"), attrs.push(node);
            } while (this.eat(12));
            return attrs;
          }
          maybeParseImportAssertions() {
            if (!this.isContextual(94) || this.hasPrecedingLineBreak())
              return this.hasPlugin("importAssertions") ? [] : null;
            this.expectPlugin("importAssertions"), this.next(), this.eat(5);
            const attrs = this.parseAssertEntries();
            return this.eat(8), attrs;
          }
          maybeParseDefaultImportSpecifier(node) {
            return !!this.shouldParseDefaultImport(node) && (this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier"), true);
          }
          maybeParseStarImportSpecifier(node) {
            if (this.match(55)) {
              const specifier = this.startNode();
              return this.next(), this.expectContextual(93), this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier"), true;
            }
            return false;
          }
          parseNamedImportSpecifiers(node) {
            let first = true;
            for (this.expect(5); !this.eat(8); ) {
              if (first)
                first = false;
              else {
                if (this.eat(14))
                  throw this.raise(Errors.DestructureNamedImport, { at: this.state.startLoc });
                if (this.expect(12), this.eat(8))
                  break;
              }
              const specifier = this.startNode(), importedIsString = this.match(129), isMaybeTypeOnly = this.isContextual(126);
              specifier.imported = this.parseModuleExportName();
              const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, "type" === node.importKind || "typeof" === node.importKind, isMaybeTypeOnly);
              node.specifiers.push(importSpecifier);
            }
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {
            if (this.eatContextual(93))
              specifier.local = this.parseIdentifier();
            else {
              const { imported } = specifier;
              if (importedIsString)
                throw this.raise(Errors.ImportBindingIsString, { at: specifier, importName: imported.value });
              this.checkReservedWord(imported.name, specifier.loc.start, true, true), specifier.local || (specifier.local = cloneIdentifier(imported));
            }
            return this.finishImportSpecifier(specifier, "ImportSpecifier");
          }
          isThisParam(param) {
            return "Identifier" === param.type && "this" === param.name;
          }
        } {
          constructor(options, input) {
            super(options = function(opts) {
              const options2 = {};
              for (const key of Object.keys(defaultOptions2))
                options2[key] = opts && null != opts[key] ? opts[key] : defaultOptions2[key];
              return options2;
            }(options), input), this.options = options, this.initializeScopes(), this.plugins = function(plugins) {
              const pluginMap = /* @__PURE__ */ new Map();
              for (const plugin of plugins) {
                const [name, options2] = Array.isArray(plugin) ? plugin : [plugin, {}];
                pluginMap.has(name) || pluginMap.set(name, options2 || {});
              }
              return pluginMap;
            }(this.options.plugins), this.filename = options.sourceFilename;
          }
          getScopeHandler() {
            return ScopeHandler;
          }
          parse() {
            this.enterInitialScopes();
            const file = this.startNode(), program = this.startNode();
            return this.nextToken(), file.errors = null, this.parseTopLevel(file, program), file.errors = this.state.errors, file;
          }
        }
        const tokTypes = function(internalTokenTypes) {
          const tokenTypes2 = {};
          for (const typeName of Object.keys(internalTokenTypes))
            tokenTypes2[typeName] = getExportedToken(internalTokenTypes[typeName]);
          return tokenTypes2;
        }(tt);
        function getParser(options, input) {
          let cls = Parser3;
          return null != options && options.plugins && (!function(plugins) {
            if (hasPlugin(plugins, "decorators")) {
              if (hasPlugin(plugins, "decorators-legacy"))
                throw new Error("Cannot use the decorators and decorators-legacy plugin together");
              const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");
              if (null == decoratorsBeforeExport)
                throw new Error("The 'decorators' plugin requires a 'decoratorsBeforeExport' option, whose value must be a boolean. If you are migrating from Babylon/Babel 6 or want to use the old decorators proposal, you should use the 'decorators-legacy' plugin instead of 'decorators'.");
              if ("boolean" != typeof decoratorsBeforeExport)
                throw new Error("'decoratorsBeforeExport' must be a boolean.");
            }
            if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript"))
              throw new Error("Cannot combine flow and typescript plugins.");
            if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic"))
              throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
            if (hasPlugin(plugins, "pipelineOperator")) {
              const proposal = getPluginOption(plugins, "pipelineOperator", "proposal");
              if (!PIPELINE_PROPOSALS.includes(proposal)) {
                const proposalList = PIPELINE_PROPOSALS.map((p) => `"${p}"`).join(", ");
                throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
              }
              const tupleSyntaxIsHash = hasPlugin(plugins, ["recordAndTuple", { syntaxType: "hash" }]);
              if ("hack" === proposal) {
                if (hasPlugin(plugins, "placeholders"))
                  throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
                if (hasPlugin(plugins, "v8intrinsic"))
                  throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
                const topicToken = getPluginOption(plugins, "pipelineOperator", "topicToken");
                if (!TOPIC_TOKENS.includes(topicToken)) {
                  const tokenList = TOPIC_TOKENS.map((t) => `"${t}"`).join(", ");
                  throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
                }
                if ("#" === topicToken && tupleSyntaxIsHash)
                  throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
              } else if ("smart" === proposal && tupleSyntaxIsHash)
                throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
            }
            if (hasPlugin(plugins, "moduleAttributes")) {
              if (hasPlugin(plugins, "importAssertions"))
                throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");
              if ("may-2020" !== getPluginOption(plugins, "moduleAttributes", "version"))
                throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
            }
            if (hasPlugin(plugins, "recordAndTuple") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, "recordAndTuple", "syntaxType")))
              throw new Error("'recordAndTuple' requires 'syntaxType' option whose value should be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p) => `'${p}'`).join(", "));
            if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
              const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
              throw error.missingPlugins = "doExpressions", error;
            }
          }(options.plugins), cls = function(pluginsFromOptions) {
            const pluginList = mixinPluginNames.filter((name) => hasPlugin(pluginsFromOptions, name)), key = pluginList.join("/");
            let cls2 = parserClassCache[key];
            if (!cls2) {
              cls2 = Parser3;
              for (const plugin of pluginList)
                cls2 = mixinPlugins[plugin](cls2);
              parserClassCache[key] = cls2;
            }
            return cls2;
          }(options.plugins)), new cls(options, input);
        }
        const parserClassCache = {};
        exports2.parse = function(input, options) {
          var _options;
          if ("unambiguous" !== (null == (_options = options) ? void 0 : _options.sourceType))
            return getParser(options, input).parse();
          options = Object.assign({}, options);
          try {
            options.sourceType = "module";
            const parser = getParser(options, input), ast = parser.parse();
            if (parser.sawUnambiguousESM)
              return ast;
            if (parser.ambiguousScriptDifferentAst)
              try {
                return options.sourceType = "script", getParser(options, input).parse();
              } catch (_unused) {
              }
            else
              ast.program.sourceType = "script";
            return ast;
          } catch (moduleError) {
            try {
              return options.sourceType = "script", getParser(options, input).parse();
            } catch (_unused2) {
            }
            throw moduleError;
          }
        }, exports2.parseExpression = function(input, options) {
          const parser = getParser(options, input);
          return parser.options.strictMode && (parser.state.strict = true), parser.getExpression();
        }, exports2.tokTypes = tokTypes;
      }, "./node_modules/.pnpm/@babel+parser@7.19.1/node_modules/@babel/parser/lib/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        function _objectWithoutPropertiesLoose(source, excluded) {
          if (null == source)
            return {};
          var key, i, target = {}, sourceKeys = Object.keys(source);
          for (i = 0; i < sourceKeys.length; i++)
            key = sourceKeys[i], excluded.indexOf(key) >= 0 || (target[key] = source[key]);
          return target;
        }
        Object.defineProperty(exports2, "__esModule", { value: true });
        class Position3 {
          constructor(line, col, index2) {
            this.line = void 0, this.column = void 0, this.index = void 0, this.line = line, this.column = col, this.index = index2;
          }
        }
        class SourceLocation3 {
          constructor(start, end) {
            this.start = void 0, this.end = void 0, this.filename = void 0, this.identifierName = void 0, this.start = start, this.end = end;
          }
        }
        function createPositionWithColumnOffset(position, columnOffset) {
          const { line, column, index: index2 } = position;
          return new Position3(line, column + columnOffset, index2 + columnOffset);
        }
        var ParseErrorCode_SyntaxError = "BABEL_PARSER_SYNTAX_ERROR", ParseErrorCode_SourceTypeModuleError = "BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED";
        const reflect = (keys, last = keys.length - 1) => ({ get() {
          return keys.reduce((object, key) => object[key], this);
        }, set(value) {
          keys.reduce((item, key, i) => i === last ? item[key] = value : item[key], this);
        } });
        var ModuleErrors = { ImportMetaOutsideModule: { message: `import.meta may appear only with 'sourceType: "module"'`, code: ParseErrorCode_SourceTypeModuleError }, ImportOutsideModule: { message: `'import' and 'export' may appear only with 'sourceType: "module"'`, code: ParseErrorCode_SourceTypeModuleError } };
        const NodeDescriptions = { ArrayPattern: "array destructuring pattern", AssignmentExpression: "assignment expression", AssignmentPattern: "assignment expression", ArrowFunctionExpression: "arrow function expression", ConditionalExpression: "conditional expression", CatchClause: "catch clause", ForOfStatement: "for-of statement", ForInStatement: "for-in statement", ForStatement: "for-loop", FormalParameters: "function parameter list", Identifier: "identifier", ImportSpecifier: "import specifier", ImportDefaultSpecifier: "import default specifier", ImportNamespaceSpecifier: "import namespace specifier", ObjectPattern: "object destructuring pattern", ParenthesizedExpression: "parenthesized expression", RestElement: "rest element", UpdateExpression: { true: "prefix operation", false: "postfix operation" }, VariableDeclarator: "variable declaration", YieldExpression: "yield expression" }, toNodeDescription = ({ type, prefix }) => "UpdateExpression" === type ? NodeDescriptions.UpdateExpression[String(prefix)] : NodeDescriptions[type];
        var StandardErrors = { AccessorIsGenerator: ({ kind }) => `A ${kind}ter cannot be a generator.`, ArgumentsInClass: "'arguments' is only allowed in functions and class methods.", AsyncFunctionInSingleStatementContext: "Async functions can only be declared at the top level or inside a block.", AwaitBindingIdentifier: "Can not use 'await' as identifier inside an async function.", AwaitBindingIdentifierInStaticBlock: "Can not use 'await' as identifier inside a static block.", AwaitExpressionFormalParameter: "'await' is not allowed in async function parameters.", AwaitNotInAsyncContext: "'await' is only allowed within async functions and at the top levels of modules.", AwaitNotInAsyncFunction: "'await' is only allowed within async functions.", BadGetterArity: "A 'get' accesor must not have any formal parameters.", BadSetterArity: "A 'set' accesor must have exactly one formal parameter.", BadSetterRestParameter: "A 'set' accesor function argument must not be a rest parameter.", ConstructorClassField: "Classes may not have a field named 'constructor'.", ConstructorClassPrivateField: "Classes may not have a private field named '#constructor'.", ConstructorIsAccessor: "Class constructor may not be an accessor.", ConstructorIsAsync: "Constructor can't be an async function.", ConstructorIsGenerator: "Constructor can't be a generator.", DeclarationMissingInitializer: ({ kind }) => `Missing initializer in ${kind} declaration.`, DecoratorArgumentsOutsideParentheses: "Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.", DecoratorBeforeExport: "Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.", DecoratorConstructor: "Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?", DecoratorExportClass: "Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.", DecoratorSemicolon: "Decorators must not be followed by a semicolon.", DecoratorStaticBlock: "Decorators can't be used with a static block.", DeletePrivateField: "Deleting a private field is not allowed.", DestructureNamedImport: "ES2015 named imports do not destructure. Use another statement for destructuring after the import.", DuplicateConstructor: "Duplicate constructor in the same class.", DuplicateDefaultExport: "Only one default export allowed per module.", DuplicateExport: ({ exportName }) => `\`${exportName}\` has already been exported. Exported identifiers must be unique.`, DuplicateProto: "Redefinition of __proto__ property.", DuplicateRegExpFlags: "Duplicate regular expression flag.", ElementAfterRest: "Rest element must be last element.", EscapedCharNotAnIdentifier: "Invalid Unicode escape.", ExportBindingIsString: ({ localName, exportName }) => `A string literal cannot be used as an exported binding without \`from\`.
- Did you mean \`export { '${localName}' as '${exportName}' } from 'some-module'\`?`, ExportDefaultFromAsIdentifier: "'from' is not allowed as an identifier after 'export default'.", ForInOfLoopInitializer: ({ type }) => `'${"ForInStatement" === type ? "for-in" : "for-of"}' loop variable declaration may not have an initializer.`, ForOfAsync: "The left-hand side of a for-of loop may not be 'async'.", ForOfLet: "The left-hand side of a for-of loop may not start with 'let'.", GeneratorInSingleStatementContext: "Generators can only be declared at the top level or inside a block.", IllegalBreakContinue: ({ type }) => `Unsyntactic ${"BreakStatement" === type ? "break" : "continue"}.`, IllegalLanguageModeDirective: "Illegal 'use strict' directive in function with non-simple parameter list.", IllegalReturn: "'return' outside of function.", ImportBindingIsString: ({ importName: importName2 }) => `A string literal cannot be used as an imported binding.
- Did you mean \`import { "${importName2}" as foo }\`?`, ImportCallArgumentTrailingComma: "Trailing comma is disallowed inside import(...) arguments.", ImportCallArity: ({ maxArgumentCount }) => `\`import()\` requires exactly ${1 === maxArgumentCount ? "one argument" : "one or two arguments"}.`, ImportCallNotNewExpression: "Cannot use new with import(...).", ImportCallSpreadArgument: "`...` is not allowed in `import()`.", ImportJSONBindingNotDefault: "A JSON module can only be imported with `default`.", IncompatibleRegExpUVFlags: "The 'u' and 'v' regular expression flags cannot be enabled at the same time.", InvalidBigIntLiteral: "Invalid BigIntLiteral.", InvalidCodePoint: "Code point out of bounds.", InvalidCoverInitializedName: "Invalid shorthand property initializer.", InvalidDecimal: "Invalid decimal.", InvalidDigit: ({ radix }) => `Expected number in radix ${radix}.`, InvalidEscapeSequence: "Bad character escape sequence.", InvalidEscapeSequenceTemplate: "Invalid escape sequence in template.", InvalidEscapedReservedWord: ({ reservedWord }) => `Escape sequence in keyword ${reservedWord}.`, InvalidIdentifier: ({ identifierName }) => `Invalid identifier ${identifierName}.`, InvalidLhs: ({ ancestor }) => `Invalid left-hand side in ${toNodeDescription(ancestor)}.`, InvalidLhsBinding: ({ ancestor }) => `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`, InvalidNumber: "Invalid number.", InvalidOrMissingExponent: "Floating-point numbers require a valid exponent after the 'e'.", InvalidOrUnexpectedToken: ({ unexpected }) => `Unexpected character '${unexpected}'.`, InvalidParenthesizedAssignment: "Invalid parenthesized assignment pattern.", InvalidPrivateFieldResolution: ({ identifierName }) => `Private name #${identifierName} is not defined.`, InvalidPropertyBindingPattern: "Binding member expression.", InvalidRecordProperty: "Only properties and spread elements are allowed in record definitions.", InvalidRestAssignmentPattern: "Invalid rest operator's argument.", LabelRedeclaration: ({ labelName }) => `Label '${labelName}' is already declared.`, LetInLexicalBinding: "'let' is not allowed to be used as a name in 'let' or 'const' declarations.", LineTerminatorBeforeArrow: "No line break is allowed before '=>'.", MalformedRegExpFlags: "Invalid regular expression flag.", MissingClassName: "A class name is required.", MissingEqInAssignment: "Only '=' operator can be used for specifying default value.", MissingSemicolon: "Missing semicolon.", MissingPlugin: ({ missingPlugin }) => `This experimental syntax requires enabling the parser plugin: ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`, MissingOneOfPlugins: ({ missingPlugin }) => `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin.map((name) => JSON.stringify(name)).join(", ")}.`, MissingUnicodeEscape: "Expecting Unicode escape sequence \\uXXXX.", MixingCoalesceWithLogical: "Nullish coalescing operator(??) requires parens when mixing with logical operators.", ModuleAttributeDifferentFromType: "The only accepted module attribute is `type`.", ModuleAttributeInvalidValue: "Only string literals are allowed as module attribute values.", ModuleAttributesWithDuplicateKeys: ({ key }) => `Duplicate key "${key}" is not allowed in module attributes.`, ModuleExportNameHasLoneSurrogate: ({ surrogateCharCode }) => `An export name cannot include a lone surrogate, found '\\u${surrogateCharCode.toString(16)}'.`, ModuleExportUndefined: ({ localName }) => `Export '${localName}' is not defined.`, MultipleDefaultsInSwitch: "Multiple default clauses.", NewlineAfterThrow: "Illegal newline after throw.", NoCatchOrFinally: "Missing catch or finally clause.", NumberIdentifier: "Identifier directly after number.", NumericSeparatorInEscapeSequence: "Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.", ObsoleteAwaitStar: "'await*' has been removed from the async functions proposal. Use Promise.all() instead.", OptionalChainingNoNew: "Constructors in/after an Optional Chain are not allowed.", OptionalChainingNoTemplate: "Tagged Template Literals are not allowed in optionalChain.", OverrideOnConstructor: "'override' modifier cannot appear on a constructor declaration.", ParamDupe: "Argument name clash.", PatternHasAccessor: "Object pattern can't contain getter or setter.", PatternHasMethod: "Object pattern can't contain methods.", PrivateInExpectedIn: ({ identifierName }) => `Private names are only allowed in property accesses (\`obj.#${identifierName}\`) or in \`in\` expressions (\`#${identifierName} in obj\`).`, PrivateNameRedeclaration: ({ identifierName }) => `Duplicate private name #${identifierName}.`, RecordExpressionBarIncorrectEndSyntaxType: "Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionBarIncorrectStartSyntaxType: "Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", RecordExpressionHashIncorrectStartSyntaxType: "Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", RecordNoProto: "'__proto__' is not allowed in Record expressions.", RestTrailingComma: "Unexpected trailing comma after rest element.", SloppyFunction: "In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.", StaticPrototype: "Classes may not have static property named prototype.", SuperNotAllowed: "`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?", SuperPrivateField: "Private fields can't be accessed on super.", TrailingDecorator: "Decorators must be attached to a class element.", TupleExpressionBarIncorrectEndSyntaxType: "Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionBarIncorrectStartSyntaxType: "Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.", TupleExpressionHashIncorrectStartSyntaxType: "Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.", UnexpectedArgumentPlaceholder: "Unexpected argument placeholder.", UnexpectedAwaitAfterPipelineBody: 'Unexpected "await" after pipeline body; await must have parentheses in minimal proposal.', UnexpectedDigitAfterHash: "Unexpected digit after hash token.", UnexpectedImportExport: "'import' and 'export' may only appear at the top level.", UnexpectedKeyword: ({ keyword }) => `Unexpected keyword '${keyword}'.`, UnexpectedLeadingDecorator: "Leading decorators must be attached to a class declaration.", UnexpectedLexicalDeclaration: "Lexical declaration cannot appear in a single-statement context.", UnexpectedNewTarget: "`new.target` can only be used in functions or class properties.", UnexpectedNumericSeparator: "A numeric separator is only allowed between two digits.", UnexpectedPrivateField: "Unexpected private name.", UnexpectedReservedWord: ({ reservedWord }) => `Unexpected reserved word '${reservedWord}'.`, UnexpectedSuper: "'super' is only allowed in object methods and classes.", UnexpectedToken: ({ expected, unexpected }) => `Unexpected token${unexpected ? ` '${unexpected}'.` : ""}${expected ? `, expected "${expected}"` : ""}`, UnexpectedTokenUnaryExponentiation: "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.", UnsupportedBind: "Binding should be performed on object property.", UnsupportedDecoratorExport: "A decorated export must export a class declaration.", UnsupportedDefaultExport: "Only expressions, functions or classes are allowed as the `default` export.", UnsupportedImport: "`import` can only be used in `import()` or `import.meta`.", UnsupportedMetaProperty: ({ target, onlyValidPropertyName }) => `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`, UnsupportedParameterDecorator: "Decorators cannot be used to decorate parameters.", UnsupportedPropertyDecorator: "Decorators cannot be used to decorate object literal properties.", UnsupportedSuper: "'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).", UnterminatedComment: "Unterminated comment.", UnterminatedRegExp: "Unterminated regular expression.", UnterminatedString: "Unterminated string constant.", UnterminatedTemplate: "Unterminated template.", VarRedeclaration: ({ identifierName }) => `Identifier '${identifierName}' has already been declared.`, YieldBindingIdentifier: "Can not use 'yield' as identifier inside a generator.", YieldInParameter: "Yield expression is not allowed in formal parameters.", ZeroDigitNumericSeparator: "Numeric separator can not be used after leading 0." };
        const UnparenthesizedPipeBodyDescriptions = /* @__PURE__ */ new Set(["ArrowFunctionExpression", "AssignmentExpression", "ConditionalExpression", "YieldExpression"]);
        var PipelineOperatorErrors = { PipeBodyIsTighter: "Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.", PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.', PipeTopicUnbound: "Topic reference is unbound; it must be inside a pipe body.", PipeTopicUnconfiguredToken: ({ token }) => `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { "proposal": "hack", "topicToken": "${token}" }.`, PipeTopicUnused: "Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.", PipeUnparenthesizedBody: ({ type }) => `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({ type })}; please wrap it in parentheses.`, PipelineBodyNoArrow: 'Unexpected arrow "=>" after pipeline body; arrow function in pipeline body must be parenthesized.', PipelineBodySequenceExpression: "Pipeline body may not be a comma-separated sequence expression.", PipelineHeadSequenceExpression: "Pipeline head should not be a comma-separated sequence expression.", PipelineTopicUnused: "Pipeline is in topic style but does not use topic reference.", PrimaryTopicNotAllowed: "Topic reference was used in a lexical context without topic binding.", PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a "proposal": "hack" or "smart" option.' };
        const _excluded$1 = ["toMessage"], _excluded2$1 = ["message"];
        function toParseErrorConstructor(_ref) {
          let { toMessage } = _ref, properties = _objectWithoutPropertiesLoose(_ref, _excluded$1);
          return function constructor({ loc, details }) {
            return ((constructor2, properties2, descriptors) => Object.keys(descriptors).map((key) => [key, descriptors[key]]).filter(([, descriptor]) => !!descriptor).map(([key, descriptor]) => [key, "function" == typeof descriptor ? { value: descriptor, enumerable: false } : "string" == typeof descriptor.reflect ? Object.assign({}, descriptor, reflect(descriptor.reflect.split("."))) : descriptor]).reduce((instance, [key, descriptor]) => Object.defineProperty(instance, key, Object.assign({ configurable: true }, descriptor)), Object.assign(new constructor2(), properties2)))(SyntaxError, Object.assign({}, properties, { loc }), { clone(overrides = {}) {
              const loc2 = overrides.loc || {};
              return constructor({ loc: new Position3("line" in loc2 ? loc2.line : this.loc.line, "column" in loc2 ? loc2.column : this.loc.column, "index" in loc2 ? loc2.index : this.loc.index), details: Object.assign({}, this.details, overrides.details) });
            }, details: { value: details, enumerable: false }, message: { get() {
              return `${toMessage(this.details)} (${this.loc.line}:${this.loc.column})`;
            }, set(value) {
              Object.defineProperty(this, "message", { value });
            } }, pos: { reflect: "loc.index", enumerable: true }, missingPlugin: "missingPlugin" in details && { reflect: "details.missingPlugin", enumerable: true } });
          };
        }
        function ParseErrorEnum(argument, syntaxPlugin) {
          if (Array.isArray(argument))
            return (parseErrorTemplates) => ParseErrorEnum(parseErrorTemplates, argument[0]);
          const ParseErrorConstructors = {};
          for (const reasonCode of Object.keys(argument)) {
            const template = argument[reasonCode], _ref2 = "string" == typeof template ? { message: () => template } : "function" == typeof template ? { message: template } : template, { message } = _ref2, rest = _objectWithoutPropertiesLoose(_ref2, _excluded2$1), toMessage = "string" == typeof message ? () => message : message;
            ParseErrorConstructors[reasonCode] = toParseErrorConstructor(Object.assign({ code: ParseErrorCode_SyntaxError, reasonCode, toMessage }, syntaxPlugin ? { syntaxPlugin } : {}, rest));
          }
          return ParseErrorConstructors;
        }
        const Errors = Object.assign({}, ParseErrorEnum(ModuleErrors), ParseErrorEnum(StandardErrors), ParseErrorEnum({ StrictDelete: "Deleting local variable in strict mode.", StrictEvalArguments: ({ referenceName }) => `Assigning to '${referenceName}' in strict mode.`, StrictEvalArgumentsBinding: ({ bindingName }) => `Binding '${bindingName}' in strict mode.`, StrictFunction: "In strict mode code, functions can only be declared at top level or inside a block.", StrictNumericEscape: "The only valid numeric escape in strict mode is '\\0'.", StrictOctalLiteral: "Legacy octal literals are not allowed in strict mode.", StrictWith: "'with' in strict mode." }), ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors)), { defineProperty } = Object, toUnenumerable = (object, key) => defineProperty(object, key, { enumerable: false, value: object[key] });
        function toESTreeLocation(node) {
          return node.loc.start && toUnenumerable(node.loc.start, "index"), node.loc.end && toUnenumerable(node.loc.end, "index"), node;
        }
        class TokContext3 {
          constructor(token, preserveSpace) {
            this.token = void 0, this.preserveSpace = void 0, this.token = token, this.preserveSpace = !!preserveSpace;
          }
        }
        const types2 = { brace: new TokContext3("{"), j_oTag: new TokContext3("<tag"), j_cTag: new TokContext3("</tag"), j_expr: new TokContext3("<tag>...</tag>", true) };
        types2.template = new TokContext3("`", true);
        class ExportedTokenType {
          constructor(label, conf = {}) {
            this.label = void 0, this.keyword = void 0, this.beforeExpr = void 0, this.startsExpr = void 0, this.rightAssociative = void 0, this.isLoop = void 0, this.isAssign = void 0, this.prefix = void 0, this.postfix = void 0, this.binop = void 0, this.label = label, this.keyword = conf.keyword, this.beforeExpr = !!conf.beforeExpr, this.startsExpr = !!conf.startsExpr, this.rightAssociative = !!conf.rightAssociative, this.isLoop = !!conf.isLoop, this.isAssign = !!conf.isAssign, this.prefix = !!conf.prefix, this.postfix = !!conf.postfix, this.binop = null != conf.binop ? conf.binop : null, this.updateContext = null;
          }
        }
        const keywords$12 = /* @__PURE__ */ new Map();
        function createKeyword(name, options = {}) {
          options.keyword = name;
          const token = createToken(name, options);
          return keywords$12.set(name, token), token;
        }
        function createBinop(name, binop2) {
          return createToken(name, { beforeExpr: true, binop: binop2 });
        }
        let tokenTypeCounter = -1;
        const tokenTypes = [], tokenLabels = [], tokenBinops = [], tokenBeforeExprs = [], tokenStartsExprs = [], tokenPrefixes = [];
        function createToken(name, options = {}) {
          var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;
          return ++tokenTypeCounter, tokenLabels.push(name), tokenBinops.push(null != (_options$binop = options.binop) ? _options$binop : -1), tokenBeforeExprs.push(null != (_options$beforeExpr = options.beforeExpr) && _options$beforeExpr), tokenStartsExprs.push(null != (_options$startsExpr = options.startsExpr) && _options$startsExpr), tokenPrefixes.push(null != (_options$prefix = options.prefix) && _options$prefix), tokenTypes.push(new ExportedTokenType(name, options)), tokenTypeCounter;
        }
        function createKeywordLike(name, options = {}) {
          var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;
          return ++tokenTypeCounter, keywords$12.set(name, tokenTypeCounter), tokenLabels.push(name), tokenBinops.push(null != (_options$binop2 = options.binop) ? _options$binop2 : -1), tokenBeforeExprs.push(null != (_options$beforeExpr2 = options.beforeExpr) && _options$beforeExpr2), tokenStartsExprs.push(null != (_options$startsExpr2 = options.startsExpr) && _options$startsExpr2), tokenPrefixes.push(null != (_options$prefix2 = options.prefix) && _options$prefix2), tokenTypes.push(new ExportedTokenType("name", options)), tokenTypeCounter;
        }
        const tt = { bracketL: createToken("[", { beforeExpr: true, startsExpr: true }), bracketHashL: createToken("#[", { beforeExpr: true, startsExpr: true }), bracketBarL: createToken("[|", { beforeExpr: true, startsExpr: true }), bracketR: createToken("]"), bracketBarR: createToken("|]"), braceL: createToken("{", { beforeExpr: true, startsExpr: true }), braceBarL: createToken("{|", { beforeExpr: true, startsExpr: true }), braceHashL: createToken("#{", { beforeExpr: true, startsExpr: true }), braceR: createToken("}"), braceBarR: createToken("|}"), parenL: createToken("(", { beforeExpr: true, startsExpr: true }), parenR: createToken(")"), comma: createToken(",", { beforeExpr: true }), semi: createToken(";", { beforeExpr: true }), colon: createToken(":", { beforeExpr: true }), doubleColon: createToken("::", { beforeExpr: true }), dot: createToken("."), question: createToken("?", { beforeExpr: true }), questionDot: createToken("?."), arrow: createToken("=>", { beforeExpr: true }), template: createToken("template"), ellipsis: createToken("...", { beforeExpr: true }), backQuote: createToken("`", { startsExpr: true }), dollarBraceL: createToken("${", { beforeExpr: true, startsExpr: true }), templateTail: createToken("...`", { startsExpr: true }), templateNonTail: createToken("...${", { beforeExpr: true, startsExpr: true }), at: createToken("@"), hash: createToken("#", { startsExpr: true }), interpreterDirective: createToken("#!..."), eq: createToken("=", { beforeExpr: true, isAssign: true }), assign: createToken("_=", { beforeExpr: true, isAssign: true }), slashAssign: createToken("_=", { beforeExpr: true, isAssign: true }), xorAssign: createToken("_=", { beforeExpr: true, isAssign: true }), moduloAssign: createToken("_=", { beforeExpr: true, isAssign: true }), incDec: createToken("++/--", { prefix: true, postfix: true, startsExpr: true }), bang: createToken("!", { beforeExpr: true, prefix: true, startsExpr: true }), tilde: createToken("~", { beforeExpr: true, prefix: true, startsExpr: true }), doubleCaret: createToken("^^", { startsExpr: true }), doubleAt: createToken("@@", { startsExpr: true }), pipeline: createBinop("|>", 0), nullishCoalescing: createBinop("??", 1), logicalOR: createBinop("||", 1), logicalAND: createBinop("&&", 2), bitwiseOR: createBinop("|", 3), bitwiseXOR: createBinop("^", 4), bitwiseAND: createBinop("&", 5), equality: createBinop("==/!=/===/!==", 6), lt: createBinop("</>/<=/>=", 7), gt: createBinop("</>/<=/>=", 7), relational: createBinop("</>/<=/>=", 7), bitShift: createBinop("<</>>/>>>", 8), bitShiftL: createBinop("<</>>/>>>", 8), bitShiftR: createBinop("<</>>/>>>", 8), plusMin: createToken("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }), modulo: createToken("%", { binop: 10, startsExpr: true }), star: createToken("*", { binop: 10 }), slash: createBinop("/", 10), exponent: createToken("**", { beforeExpr: true, binop: 11, rightAssociative: true }), _in: createKeyword("in", { beforeExpr: true, binop: 7 }), _instanceof: createKeyword("instanceof", { beforeExpr: true, binop: 7 }), _break: createKeyword("break"), _case: createKeyword("case", { beforeExpr: true }), _catch: createKeyword("catch"), _continue: createKeyword("continue"), _debugger: createKeyword("debugger"), _default: createKeyword("default", { beforeExpr: true }), _else: createKeyword("else", { beforeExpr: true }), _finally: createKeyword("finally"), _function: createKeyword("function", { startsExpr: true }), _if: createKeyword("if"), _return: createKeyword("return", { beforeExpr: true }), _switch: createKeyword("switch"), _throw: createKeyword("throw", { beforeExpr: true, prefix: true, startsExpr: true }), _try: createKeyword("try"), _var: createKeyword("var"), _const: createKeyword("const"), _with: createKeyword("with"), _new: createKeyword("new", { beforeExpr: true, startsExpr: true }), _this: createKeyword("this", { startsExpr: true }), _super: createKeyword("super", { startsExpr: true }), _class: createKeyword("class", { startsExpr: true }), _extends: createKeyword("extends", { beforeExpr: true }), _export: createKeyword("export"), _import: createKeyword("import", { startsExpr: true }), _null: createKeyword("null", { startsExpr: true }), _true: createKeyword("true", { startsExpr: true }), _false: createKeyword("false", { startsExpr: true }), _typeof: createKeyword("typeof", { beforeExpr: true, prefix: true, startsExpr: true }), _void: createKeyword("void", { beforeExpr: true, prefix: true, startsExpr: true }), _delete: createKeyword("delete", { beforeExpr: true, prefix: true, startsExpr: true }), _do: createKeyword("do", { isLoop: true, beforeExpr: true }), _for: createKeyword("for", { isLoop: true }), _while: createKeyword("while", { isLoop: true }), _as: createKeywordLike("as", { startsExpr: true }), _assert: createKeywordLike("assert", { startsExpr: true }), _async: createKeywordLike("async", { startsExpr: true }), _await: createKeywordLike("await", { startsExpr: true }), _from: createKeywordLike("from", { startsExpr: true }), _get: createKeywordLike("get", { startsExpr: true }), _let: createKeywordLike("let", { startsExpr: true }), _meta: createKeywordLike("meta", { startsExpr: true }), _of: createKeywordLike("of", { startsExpr: true }), _sent: createKeywordLike("sent", { startsExpr: true }), _set: createKeywordLike("set", { startsExpr: true }), _static: createKeywordLike("static", { startsExpr: true }), _yield: createKeywordLike("yield", { startsExpr: true }), _asserts: createKeywordLike("asserts", { startsExpr: true }), _checks: createKeywordLike("checks", { startsExpr: true }), _exports: createKeywordLike("exports", { startsExpr: true }), _global: createKeywordLike("global", { startsExpr: true }), _implements: createKeywordLike("implements", { startsExpr: true }), _intrinsic: createKeywordLike("intrinsic", { startsExpr: true }), _infer: createKeywordLike("infer", { startsExpr: true }), _is: createKeywordLike("is", { startsExpr: true }), _mixins: createKeywordLike("mixins", { startsExpr: true }), _proto: createKeywordLike("proto", { startsExpr: true }), _require: createKeywordLike("require", { startsExpr: true }), _keyof: createKeywordLike("keyof", { startsExpr: true }), _readonly: createKeywordLike("readonly", { startsExpr: true }), _unique: createKeywordLike("unique", { startsExpr: true }), _abstract: createKeywordLike("abstract", { startsExpr: true }), _declare: createKeywordLike("declare", { startsExpr: true }), _enum: createKeywordLike("enum", { startsExpr: true }), _module: createKeywordLike("module", { startsExpr: true }), _namespace: createKeywordLike("namespace", { startsExpr: true }), _interface: createKeywordLike("interface", { startsExpr: true }), _type: createKeywordLike("type", { startsExpr: true }), _opaque: createKeywordLike("opaque", { startsExpr: true }), name: createToken("name", { startsExpr: true }), string: createToken("string", { startsExpr: true }), num: createToken("num", { startsExpr: true }), bigint: createToken("bigint", { startsExpr: true }), decimal: createToken("decimal", { startsExpr: true }), regexp: createToken("regexp", { startsExpr: true }), privateName: createToken("#name", { startsExpr: true }), eof: createToken("eof"), jsxName: createToken("jsxName"), jsxText: createToken("jsxText", { beforeExpr: true }), jsxTagStart: createToken("jsxTagStart", { startsExpr: true }), jsxTagEnd: createToken("jsxTagEnd"), placeholder: createToken("%%", { startsExpr: true }) };
        function tokenIsIdentifier(token) {
          return token >= 93 && token <= 128;
        }
        function tokenIsKeywordOrIdentifier(token) {
          return token >= 58 && token <= 128;
        }
        function tokenIsLiteralPropertyName(token) {
          return token >= 58 && token <= 132;
        }
        function tokenCanStartExpression(token) {
          return tokenStartsExprs[token];
        }
        function tokenIsFlowInterfaceOrTypeOrOpaque(token) {
          return token >= 125 && token <= 127;
        }
        function tokenIsKeyword(token) {
          return token >= 58 && token <= 92;
        }
        function tokenLabelName(token) {
          return tokenLabels[token];
        }
        function tokenOperatorPrecedence(token) {
          return tokenBinops[token];
        }
        function tokenIsTemplate(token) {
          return token >= 24 && token <= 25;
        }
        function getExportedToken(token) {
          return tokenTypes[token];
        }
        tokenTypes[8].updateContext = (context) => {
          context.pop();
        }, tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = (context) => {
          context.push(types2.brace);
        }, tokenTypes[22].updateContext = (context) => {
          context[context.length - 1] === types2.template ? context.pop() : context.push(types2.template);
        }, tokenTypes[138].updateContext = (context) => {
          context.push(types2.j_expr, types2.j_oTag);
        };
        let nonASCIIidentifierStartChars2 = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC", nonASCIIidentifierChars2 = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0CF3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECE\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
        const nonASCIIidentifierStart2 = new RegExp("[" + nonASCIIidentifierStartChars2 + "]"), nonASCIIidentifier2 = new RegExp("[" + nonASCIIidentifierStartChars2 + nonASCIIidentifierChars2 + "]");
        nonASCIIidentifierStartChars2 = nonASCIIidentifierChars2 = null;
        const astralIdentifierStartCodes2 = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 20, 1, 64, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 16, 0, 2, 12, 2, 33, 125, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1071, 18, 5, 4026, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 16, 0, 30, 2, 3, 0, 15, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 7, 5, 262, 61, 147, 44, 11, 6, 17, 0, 322, 29, 19, 43, 485, 27, 757, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4153, 7, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938, 6, 4191], astralIdentifierCodes2 = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 81, 2, 71, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 3, 0, 158, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 10, 1, 2, 0, 49, 6, 4, 4, 14, 9, 5351, 0, 7, 14, 13835, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 101, 0, 161, 6, 10, 9, 357, 0, 62, 13, 499, 13, 983, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
        function isInAstralSet2(code, set) {
          let pos = 65536;
          for (let i = 0, length = set.length; i < length; i += 2) {
            if (pos += set[i], pos > code)
              return false;
            if (pos += set[i + 1], pos >= code)
              return true;
          }
          return false;
        }
        function isIdentifierStart2(code) {
          return code < 65 ? 36 === code : code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifierStart2.test(String.fromCharCode(code)) : isInAstralSet2(code, astralIdentifierStartCodes2)));
        }
        function isIdentifierChar2(code) {
          return code < 48 ? 36 === code : code < 58 || !(code < 65) && (code <= 90 || (code < 97 ? 95 === code : code <= 122 || (code <= 65535 ? code >= 170 && nonASCIIidentifier2.test(String.fromCharCode(code)) : isInAstralSet2(code, astralIdentifierStartCodes2) || isInAstralSet2(code, astralIdentifierCodes2))));
        }
        const reservedWords_strict = ["implements", "interface", "let", "package", "private", "protected", "public", "static", "yield"], reservedWords_strictBind = ["eval", "arguments"], keywords2 = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete"]), reservedWordsStrictSet = new Set(reservedWords_strict), reservedWordsStrictBindSet = new Set(reservedWords_strictBind);
        function isReservedWord(word, inModule) {
          return inModule && "await" === word || "enum" === word;
        }
        function isStrictReservedWord(word, inModule) {
          return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);
        }
        function isStrictBindOnlyReservedWord(word) {
          return reservedWordsStrictBindSet.has(word);
        }
        function isStrictBindReservedWord(word, inModule) {
          return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);
        }
        const reservedWordLikeSet = /* @__PURE__ */ new Set(["break", "case", "catch", "continue", "debugger", "default", "do", "else", "finally", "for", "function", "if", "return", "switch", "throw", "try", "var", "const", "while", "with", "new", "this", "super", "class", "extends", "export", "import", "null", "true", "false", "in", "instanceof", "typeof", "void", "delete", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "eval", "arguments", "enum", "await"]);
        class Scope3 {
          constructor(flags) {
            this.var = /* @__PURE__ */ new Set(), this.lexical = /* @__PURE__ */ new Set(), this.functions = /* @__PURE__ */ new Set(), this.flags = flags;
          }
        }
        class ScopeHandler {
          constructor(parser, inModule) {
            this.parser = void 0, this.scopeStack = [], this.inModule = void 0, this.undefinedExports = /* @__PURE__ */ new Map(), this.parser = parser, this.inModule = inModule;
          }
          get inFunction() {
            return (2 & this.currentVarScopeFlags()) > 0;
          }
          get allowSuper() {
            return (16 & this.currentThisScopeFlags()) > 0;
          }
          get allowDirectSuper() {
            return (32 & this.currentThisScopeFlags()) > 0;
          }
          get inClass() {
            return (64 & this.currentThisScopeFlags()) > 0;
          }
          get inClassAndNotInNonArrowFunction() {
            const flags = this.currentThisScopeFlags();
            return (64 & flags) > 0 && 0 == (2 & flags);
          }
          get inStaticBlock() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];
              if (128 & flags)
                return true;
              if (323 & flags)
                return false;
            }
          }
          get inNonArrowFunction() {
            return (2 & this.currentThisScopeFlags()) > 0;
          }
          get treatFunctionsAsVar() {
            return this.treatFunctionsAsVarInScope(this.currentScope());
          }
          createScope(flags) {
            return new Scope3(flags);
          }
          enter(flags) {
            this.scopeStack.push(this.createScope(flags));
          }
          exit() {
            return this.scopeStack.pop().flags;
          }
          treatFunctionsAsVarInScope(scope) {
            return !!(130 & scope.flags || !this.parser.inModule && 1 & scope.flags);
          }
          declareName(name, bindingType, loc) {
            let scope = this.currentScope();
            if (8 & bindingType || 16 & bindingType)
              this.checkRedeclarationInScope(scope, name, bindingType, loc), 16 & bindingType ? scope.functions.add(name) : scope.lexical.add(name), 8 & bindingType && this.maybeExportDefined(scope, name);
            else if (4 & bindingType)
              for (let i = this.scopeStack.length - 1; i >= 0 && (scope = this.scopeStack[i], this.checkRedeclarationInScope(scope, name, bindingType, loc), scope.var.add(name), this.maybeExportDefined(scope, name), !(259 & scope.flags)); --i)
                ;
            this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
          }
          maybeExportDefined(scope, name) {
            this.parser.inModule && 1 & scope.flags && this.undefinedExports.delete(name);
          }
          checkRedeclarationInScope(scope, name, bindingType, loc) {
            this.isRedeclaredInScope(scope, name, bindingType) && this.parser.raise(Errors.VarRedeclaration, { at: loc, identifierName: name });
          }
          isRedeclaredInScope(scope, name, bindingType) {
            return !!(1 & bindingType) && (8 & bindingType ? scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name) : 16 & bindingType ? scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name) : scope.lexical.has(name) && !(8 & scope.flags && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name));
          }
          checkLocalExport(id) {
            const { name } = id, topLevelScope = this.scopeStack[0];
            topLevelScope.lexical.has(name) || topLevelScope.var.has(name) || topLevelScope.functions.has(name) || this.undefinedExports.set(name, id.loc.start);
          }
          currentScope() {
            return this.scopeStack[this.scopeStack.length - 1];
          }
          currentVarScopeFlags() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];
              if (259 & flags)
                return flags;
            }
          }
          currentThisScopeFlags() {
            for (let i = this.scopeStack.length - 1; ; i--) {
              const { flags } = this.scopeStack[i];
              if (323 & flags && !(4 & flags))
                return flags;
            }
          }
        }
        class FlowScope extends Scope3 {
          constructor(...args) {
            super(...args), this.declareFunctions = /* @__PURE__ */ new Set();
          }
        }
        class FlowScopeHandler extends ScopeHandler {
          createScope(flags) {
            return new FlowScope(flags);
          }
          declareName(name, bindingType, loc) {
            const scope = this.currentScope();
            if (2048 & bindingType)
              return this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name), void scope.declareFunctions.add(name);
            super.declareName(name, bindingType, loc);
          }
          isRedeclaredInScope(scope, name, bindingType) {
            return !!super.isRedeclaredInScope(scope, name, bindingType) || !!(2048 & bindingType) && (!scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name)));
          }
          checkLocalExport(id) {
            this.scopeStack[0].declareFunctions.has(id.name) || super.checkLocalExport(id);
          }
        }
        function setTrailingComments(node, comments) {
          void 0 === node.trailingComments ? node.trailingComments = comments : node.trailingComments.unshift(...comments);
        }
        function setInnerComments(node, comments) {
          void 0 === node.innerComments ? node.innerComments = comments : node.innerComments.unshift(...comments);
        }
        function adjustInnerComments(node, elements, commentWS) {
          let lastElement = null, i = elements.length;
          for (; null === lastElement && i > 0; )
            lastElement = elements[--i];
          null === lastElement || lastElement.start > commentWS.start ? setInnerComments(node, commentWS.comments) : setTrailingComments(lastElement, commentWS.comments);
        }
        const lineBreak2 = /\r\n?|[\n\u2028\u2029]/, lineBreakG2 = new RegExp(lineBreak2.source, "g");
        function isNewLine2(code) {
          switch (code) {
            case 10:
            case 13:
            case 8232:
            case 8233:
              return true;
            default:
              return false;
          }
        }
        const skipWhiteSpace2 = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g, skipWhiteSpaceToLineBreak = new RegExp("(?=(" + /(?:[^\S\n\r\u2028\u2029]|\/\/.*|\/\*.*?\*\/)*/y.source + "))\\1" + /(?=[\n\r\u2028\u2029]|\/\*(?!.*?\*\/)|$)/.source, "y");
        function isWhitespace(code) {
          switch (code) {
            case 9:
            case 11:
            case 12:
            case 32:
            case 160:
            case 5760:
            case 8192:
            case 8193:
            case 8194:
            case 8195:
            case 8196:
            case 8197:
            case 8198:
            case 8199:
            case 8200:
            case 8201:
            case 8202:
            case 8239:
            case 8287:
            case 12288:
            case 65279:
              return true;
            default:
              return false;
          }
        }
        class State {
          constructor() {
            this.strict = void 0, this.curLine = void 0, this.lineStart = void 0, this.startLoc = void 0, this.endLoc = void 0, this.errors = [], this.potentialArrowAt = -1, this.noArrowAt = [], this.noArrowParamsConversionAt = [], this.maybeInArrowParameters = false, this.inType = false, this.noAnonFunctionType = false, this.hasFlowComment = false, this.isAmbientContext = false, this.inAbstractClass = false, this.inDisallowConditionalTypesContext = false, this.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null }, this.soloAwait = false, this.inFSharpPipelineDirectBody = false, this.labels = [], this.decoratorStack = [[]], this.comments = [], this.commentStack = [], this.pos = 0, this.type = 135, this.value = null, this.start = 0, this.end = 0, this.lastTokEndLoc = null, this.lastTokStartLoc = null, this.lastTokStart = 0, this.context = [types2.brace], this.canStartJSXElement = true, this.containsEsc = false, this.strictErrors = /* @__PURE__ */ new Map(), this.tokensLength = 0;
          }
          init({ strictMode, sourceType, startLine, startColumn }) {
            this.strict = false !== strictMode && (true === strictMode || "module" === sourceType), this.curLine = startLine, this.lineStart = -startColumn, this.startLoc = this.endLoc = new Position3(startLine, startColumn, 0);
          }
          curPosition() {
            return new Position3(this.curLine, this.pos - this.lineStart, this.pos);
          }
          clone(skipArrays) {
            const state = new State(), keys = Object.keys(this);
            for (let i = 0, length = keys.length; i < length; i++) {
              const key = keys[i];
              let val = this[key];
              !skipArrays && Array.isArray(val) && (val = val.slice()), state[key] = val;
            }
            return state;
          }
        }
        var _isDigit = function(code) {
          return code >= 48 && code <= 57;
        };
        const forbiddenNumericSeparatorSiblings = { decBinOct: /* @__PURE__ */ new Set([46, 66, 69, 79, 95, 98, 101, 111]), hex: /* @__PURE__ */ new Set([46, 88, 95, 120]) }, isAllowedNumericSeparatorSibling = { bin: (ch) => 48 === ch || 49 === ch, oct: (ch) => ch >= 48 && ch <= 55, dec: (ch) => ch >= 48 && ch <= 57, hex: (ch) => ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102 };
        function readStringContents(type, input, pos, lineStart, curLine, errors) {
          const initialPos = pos, initialLineStart = lineStart, initialCurLine = curLine;
          let out = "", containsInvalid = false, chunkStart = pos;
          const { length } = input;
          for (; ; ) {
            if (pos >= length) {
              errors.unterminated(initialPos, initialLineStart, initialCurLine), out += input.slice(chunkStart, pos);
              break;
            }
            const ch = input.charCodeAt(pos);
            if (isStringEnd(type, ch, input, pos)) {
              out += input.slice(chunkStart, pos);
              break;
            }
            if (92 === ch) {
              let escaped;
              out += input.slice(chunkStart, pos), { ch: escaped, pos, lineStart, curLine } = readEscapedChar(input, pos, lineStart, curLine, "template" === type, errors), null === escaped ? containsInvalid = true : out += escaped, chunkStart = pos;
            } else
              8232 === ch || 8233 === ch ? (++curLine, lineStart = ++pos) : 10 === ch || 13 === ch ? "template" === type ? (out += input.slice(chunkStart, pos) + "\n", ++pos, 13 === ch && 10 === input.charCodeAt(pos) && ++pos, ++curLine, chunkStart = lineStart = pos) : errors.unterminated(initialPos, initialLineStart, initialCurLine) : ++pos;
          }
          return { pos, str: out, containsInvalid, lineStart, curLine };
        }
        function isStringEnd(type, ch, input, pos) {
          return "template" === type ? 96 === ch || 36 === ch && 123 === input.charCodeAt(pos + 1) : ch === ("double" === type ? 34 : 39);
        }
        function readEscapedChar(input, pos, lineStart, curLine, inTemplate, errors) {
          const throwOnInvalid = !inTemplate;
          pos++;
          const res = (ch2) => ({ pos, ch: ch2, lineStart, curLine }), ch = input.charCodeAt(pos++);
          switch (ch) {
            case 110:
              return res("\n");
            case 114:
              return res("\r");
            case 120: {
              let code;
              return { code, pos } = readHexChar(input, pos, lineStart, curLine, 2, false, throwOnInvalid, errors), res(null === code ? null : String.fromCharCode(code));
            }
            case 117: {
              let code;
              return { code, pos } = readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors), res(null === code ? null : String.fromCodePoint(code));
            }
            case 116:
              return res("	");
            case 98:
              return res("\b");
            case 118:
              return res("\v");
            case 102:
              return res("\f");
            case 13:
              10 === input.charCodeAt(pos) && ++pos;
            case 10:
              lineStart = pos, ++curLine;
            case 8232:
            case 8233:
              return res("");
            case 56:
            case 57:
              if (inTemplate)
                return res(null);
              errors.strictNumericEscape(pos - 1, lineStart, curLine);
            default:
              if (ch >= 48 && ch <= 55) {
                const startPos = pos - 1;
                let octalStr = input.slice(startPos, pos + 2).match(/^[0-7]+/)[0], octal = parseInt(octalStr, 8);
                octal > 255 && (octalStr = octalStr.slice(0, -1), octal = parseInt(octalStr, 8)), pos += octalStr.length - 1;
                const next = input.charCodeAt(pos);
                if ("0" !== octalStr || 56 === next || 57 === next) {
                  if (inTemplate)
                    return res(null);
                  errors.strictNumericEscape(startPos, lineStart, curLine);
                }
                return res(String.fromCharCode(octal));
              }
              return res(String.fromCharCode(ch));
          }
        }
        function readHexChar(input, pos, lineStart, curLine, len, forceLen, throwOnInvalid, errors) {
          const initialPos = pos;
          let n;
          return { n, pos } = readInt(input, pos, lineStart, curLine, 16, len, forceLen, false, errors), null === n && (throwOnInvalid ? errors.invalidEscapeSequence(initialPos, lineStart, curLine) : pos = initialPos - 1), { code: n, pos };
        }
        function readInt(input, pos, lineStart, curLine, radix, len, forceLen, allowNumSeparator, errors) {
          const start = pos, forbiddenSiblings = 16 === radix ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct, isAllowedSibling = 16 === radix ? isAllowedNumericSeparatorSibling.hex : 10 === radix ? isAllowedNumericSeparatorSibling.dec : 8 === radix ? isAllowedNumericSeparatorSibling.oct : isAllowedNumericSeparatorSibling.bin;
          let invalid = false, total = 0;
          for (let i = 0, e = null == len ? 1 / 0 : len; i < e; ++i) {
            const code = input.charCodeAt(pos);
            let val;
            if (95 !== code || "bail" === allowNumSeparator) {
              if (val = code >= 97 ? code - 97 + 10 : code >= 65 ? code - 65 + 10 : _isDigit(code) ? code - 48 : 1 / 0, val >= radix)
                if (val <= 9 && errors.invalidDigit(pos, lineStart, curLine, radix))
                  val = 0;
                else {
                  if (!forceLen)
                    break;
                  val = 0, invalid = true;
                }
              ++pos, total = total * radix + val;
            } else {
              const prev = input.charCodeAt(pos - 1), next = input.charCodeAt(pos + 1);
              allowNumSeparator ? (Number.isNaN(next) || !isAllowedSibling(next) || forbiddenSiblings.has(prev) || forbiddenSiblings.has(next)) && errors.unexpectedNumericSeparator(pos, lineStart, curLine) : errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine), ++pos;
            }
          }
          return pos === start || null != len && pos - start !== len || invalid ? { n: null, pos } : { n: total, pos };
        }
        function readCodePoint(input, pos, lineStart, curLine, throwOnInvalid, errors) {
          let code;
          if (123 === input.charCodeAt(pos)) {
            if (++pos, { code, pos } = readHexChar(input, pos, lineStart, curLine, input.indexOf("}", pos) - pos, true, throwOnInvalid, errors), ++pos, null !== code && code > 1114111) {
              if (!throwOnInvalid)
                return { code: null, pos };
              errors.invalidCodePoint(pos, lineStart, curLine);
            }
          } else
            ({ code, pos } = readHexChar(input, pos, lineStart, curLine, 4, false, throwOnInvalid, errors));
          return { code, pos };
        }
        const _excluded = ["at"], _excluded2 = ["at"];
        function buildPosition(pos, lineStart, curLine) {
          return new Position3(curLine, pos - lineStart, pos);
        }
        const VALID_REGEX_FLAGS = /* @__PURE__ */ new Set([103, 109, 115, 105, 121, 117, 100, 118]);
        class Token3 {
          constructor(state) {
            this.type = state.type, this.value = state.value, this.start = state.start, this.end = state.end, this.loc = new SourceLocation3(state.startLoc, state.endLoc);
          }
        }
        class ClassScope {
          constructor() {
            this.privateNames = /* @__PURE__ */ new Set(), this.loneAccessors = /* @__PURE__ */ new Map(), this.undefinedPrivateNames = /* @__PURE__ */ new Map();
          }
        }
        class ClassScopeHandler {
          constructor(parser) {
            this.parser = void 0, this.stack = [], this.undefinedPrivateNames = /* @__PURE__ */ new Map(), this.parser = parser;
          }
          current() {
            return this.stack[this.stack.length - 1];
          }
          enter() {
            this.stack.push(new ClassScope());
          }
          exit() {
            const oldClassScope = this.stack.pop(), current2 = this.current();
            for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames))
              current2 ? current2.undefinedPrivateNames.has(name) || current2.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, { at: loc, identifierName: name });
          }
          declarePrivateName(name, elementType, loc) {
            const { privateNames, loneAccessors, undefinedPrivateNames } = this.current();
            let redefined = privateNames.has(name);
            if (3 & elementType) {
              const accessor = redefined && loneAccessors.get(name);
              if (accessor) {
                const oldStatic = 4 & accessor, newStatic = 4 & elementType;
                redefined = (3 & accessor) === (3 & elementType) || oldStatic !== newStatic, redefined || loneAccessors.delete(name);
              } else
                redefined || loneAccessors.set(name, elementType);
            }
            redefined && this.parser.raise(Errors.PrivateNameRedeclaration, { at: loc, identifierName: name }), privateNames.add(name), undefinedPrivateNames.delete(name);
          }
          usePrivateName(name, loc) {
            let classScope;
            for (classScope of this.stack)
              if (classScope.privateNames.has(name))
                return;
            classScope ? classScope.undefinedPrivateNames.set(name, loc) : this.parser.raise(Errors.InvalidPrivateFieldResolution, { at: loc, identifierName: name });
          }
        }
        class ExpressionScope {
          constructor(type = 0) {
            this.type = void 0, this.type = type;
          }
          canBeArrowParameterDeclaration() {
            return 2 === this.type || 1 === this.type;
          }
          isCertainlyParameterDeclaration() {
            return 3 === this.type;
          }
        }
        class ArrowHeadParsingScope extends ExpressionScope {
          constructor(type) {
            super(type), this.declarationErrors = /* @__PURE__ */ new Map();
          }
          recordDeclarationError(ParsingErrorClass, { at: at2 }) {
            const index2 = at2.index;
            this.declarationErrors.set(index2, [ParsingErrorClass, at2]);
          }
          clearDeclarationError(index2) {
            this.declarationErrors.delete(index2);
          }
          iterateErrors(iterator) {
            this.declarationErrors.forEach(iterator);
          }
        }
        class ExpressionScopeHandler {
          constructor(parser) {
            this.parser = void 0, this.stack = [new ExpressionScope()], this.parser = parser;
          }
          enter(scope) {
            this.stack.push(scope);
          }
          exit() {
            this.stack.pop();
          }
          recordParameterInitializerError(toParseError, { at: node }) {
            const origin = { at: node.loc.start }, { stack } = this;
            let i = stack.length - 1, scope = stack[i];
            for (; !scope.isCertainlyParameterDeclaration(); ) {
              if (!scope.canBeArrowParameterDeclaration())
                return;
              scope.recordDeclarationError(toParseError, origin), scope = stack[--i];
            }
            this.parser.raise(toParseError, origin);
          }
          recordArrowParemeterBindingError(error, { at: node }) {
            const { stack } = this, scope = stack[stack.length - 1], origin = { at: node.loc.start };
            if (scope.isCertainlyParameterDeclaration())
              this.parser.raise(error, origin);
            else {
              if (!scope.canBeArrowParameterDeclaration())
                return;
              scope.recordDeclarationError(error, origin);
            }
          }
          recordAsyncArrowParametersError({ at: at2 }) {
            const { stack } = this;
            let i = stack.length - 1, scope = stack[i];
            for (; scope.canBeArrowParameterDeclaration(); )
              2 === scope.type && scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at: at2 }), scope = stack[--i];
          }
          validateAsPattern() {
            const { stack } = this, currentScope = stack[stack.length - 1];
            currentScope.canBeArrowParameterDeclaration() && currentScope.iterateErrors(([toParseError, loc]) => {
              this.parser.raise(toParseError, { at: loc });
              let i = stack.length - 2, scope = stack[i];
              for (; scope.canBeArrowParameterDeclaration(); )
                scope.clearDeclarationError(loc.index), scope = stack[--i];
            });
          }
        }
        function newExpressionScope() {
          return new ExpressionScope();
        }
        class ProductionParameterHandler {
          constructor() {
            this.stacks = [];
          }
          enter(flags) {
            this.stacks.push(flags);
          }
          exit() {
            this.stacks.pop();
          }
          currentFlags() {
            return this.stacks[this.stacks.length - 1];
          }
          get hasAwait() {
            return (2 & this.currentFlags()) > 0;
          }
          get hasYield() {
            return (1 & this.currentFlags()) > 0;
          }
          get hasReturn() {
            return (4 & this.currentFlags()) > 0;
          }
          get hasIn() {
            return (8 & this.currentFlags()) > 0;
          }
        }
        function functionFlags2(isAsync, isGenerator) {
          return (isAsync ? 2 : 0) | (isGenerator ? 1 : 0);
        }
        class ExpressionErrors {
          constructor() {
            this.shorthandAssignLoc = null, this.doubleProtoLoc = null, this.privateKeyLoc = null, this.optionalParametersLoc = null;
          }
        }
        class Node3 {
          constructor(parser, pos, loc) {
            this.type = "", this.start = pos, this.end = 0, this.loc = new SourceLocation3(loc), null != parser && parser.options.ranges && (this.range = [pos, 0]), null != parser && parser.filename && (this.loc.filename = parser.filename);
          }
        }
        const NodePrototype = Node3.prototype;
        function cloneIdentifier(node) {
          const { type, start, end, loc, range, extra, name } = node, cloned = Object.create(NodePrototype);
          return cloned.type = type, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, cloned.extra = extra, cloned.name = name, "Placeholder" === type && (cloned.expectedNode = node.expectedNode), cloned;
        }
        function cloneStringLiteral(node) {
          const { type, start, end, loc, range, extra } = node;
          if ("Placeholder" === type)
            return function(node2) {
              return cloneIdentifier(node2);
            }(node);
          const cloned = Object.create(NodePrototype);
          return cloned.type = type, cloned.start = start, cloned.end = end, cloned.loc = loc, cloned.range = range, void 0 !== node.raw ? cloned.raw = node.raw : cloned.extra = extra, cloned.value = node.value, cloned;
        }
        NodePrototype.__clone = function() {
          const newNode = new Node3(void 0, this.start, this.loc.start), keys = Object.keys(this);
          for (let i = 0, length = keys.length; i < length; i++) {
            const key = keys[i];
            "leadingComments" !== key && "trailingComments" !== key && "innerComments" !== key && (newNode[key] = this[key]);
          }
          return newNode;
        };
        const reservedTypes = /* @__PURE__ */ new Set(["_", "any", "bool", "boolean", "empty", "extends", "false", "interface", "mixed", "null", "number", "static", "string", "true", "typeof", "void"]), FlowErrors = ParseErrorEnum`flow`({ AmbiguousConditionalArrow: "Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.", AmbiguousDeclareModuleKind: "Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.", AssignReservedType: ({ reservedType }) => `Cannot overwrite reserved type ${reservedType}.`, DeclareClassElement: "The `declare` modifier can only appear on class fields.", DeclareClassFieldInitializer: "Initializers are not allowed in fields with the `declare` modifier.", DuplicateDeclareModuleExports: "Duplicate `declare module.exports` statement.", EnumBooleanMemberNotInitialized: ({ memberName, enumName }) => `Boolean enum members need to be initialized. Use either \`${memberName} = true,\` or \`${memberName} = false,\` in enum \`${enumName}\`.`, EnumDuplicateMemberName: ({ memberName, enumName }) => `Enum member names need to be unique, but the name \`${memberName}\` has already been used before in enum \`${enumName}\`.`, EnumInconsistentMemberValues: ({ enumName }) => `Enum \`${enumName}\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`, EnumInvalidExplicitType: ({ invalidEnumType, enumName }) => `Enum type \`${invalidEnumType}\` is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`, EnumInvalidExplicitTypeUnknownSupplied: ({ enumName }) => `Supplied enum type is not valid. Use one of \`boolean\`, \`number\`, \`string\`, or \`symbol\` in enum \`${enumName}\`.`, EnumInvalidMemberInitializerPrimaryType: ({ enumName, memberName, explicitType }) => `Enum \`${enumName}\` has type \`${explicitType}\`, so the initializer of \`${memberName}\` needs to be a ${explicitType} literal.`, EnumInvalidMemberInitializerSymbolType: ({ enumName, memberName }) => `Symbol enum members cannot be initialized. Use \`${memberName},\` in enum \`${enumName}\`.`, EnumInvalidMemberInitializerUnknownType: ({ enumName, memberName }) => `The enum member initializer for \`${memberName}\` needs to be a literal (either a boolean, number, or string) in enum \`${enumName}\`.`, EnumInvalidMemberName: ({ enumName, memberName, suggestion }) => `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \`${memberName}\`, consider using \`${suggestion}\`, in enum \`${enumName}\`.`, EnumNumberMemberNotInitialized: ({ enumName, memberName }) => `Number enum members need to be initialized, e.g. \`${memberName} = 1\` in enum \`${enumName}\`.`, EnumStringMemberInconsistentlyInitailized: ({ enumName }) => `String enum members need to consistently either all use initializers, or use no initializers, in enum \`${enumName}\`.`, GetterMayNotHaveThisParam: "A getter cannot have a `this` parameter.", ImportTypeShorthandOnlyInPureImport: "The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.", InexactInsideExact: "Explicit inexact syntax cannot appear inside an explicit exact object type.", InexactInsideNonObject: "Explicit inexact syntax cannot appear in class or interface definitions.", InexactVariance: "Explicit inexact syntax cannot have variance.", InvalidNonTypeImportInDeclareModule: "Imports within a `declare module` body must always be `import type` or `import typeof`.", MissingTypeParamDefault: "Type parameter declaration needs a default, since a preceding type parameter declaration has a default.", NestedDeclareModule: "`declare module` cannot be used inside another `declare module`.", NestedFlowComment: "Cannot have a flow comment inside another flow comment.", PatternIsOptional: Object.assign({ message: "A binding pattern parameter cannot be optional in an implementation signature." }, { reasonCode: "OptionalBindingPattern" }), SetterMayNotHaveThisParam: "A setter cannot have a `this` parameter.", SpreadVariance: "Spread properties cannot have variance.", ThisParamAnnotationRequired: "A type annotation is required for the `this` parameter.", ThisParamBannedInConstructor: "Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.", ThisParamMayNotBeOptional: "The `this` parameter cannot be optional.", ThisParamMustBeFirst: "The `this` parameter must be the first function parameter.", ThisParamNoDefault: "The `this` parameter may not have a default value.", TypeBeforeInitializer: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeCastInPattern: "The type cast expression is expected to be wrapped with parenthesis.", UnexpectedExplicitInexactInObject: "Explicit inexact syntax must appear at the end of an inexact object.", UnexpectedReservedType: ({ reservedType }) => `Unexpected reserved type ${reservedType}.`, UnexpectedReservedUnderscore: "`_` is only allowed as a type argument to call or new.", UnexpectedSpaceBetweenModuloChecks: "Spaces between `%` and `checks` are not allowed here.", UnexpectedSpreadType: "Spread operator cannot appear in class or interface definitions.", UnexpectedSubtractionOperand: 'Unexpected token, expected "number" or "bigint".', UnexpectedTokenAfterTypeParameter: "Expected an arrow function after this type parameter declaration.", UnexpectedTypeParameterBeforeAsyncArrowFunction: "Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.", UnsupportedDeclareExportKind: ({ unsupportedExportKind, suggestion }) => `\`declare export ${unsupportedExportKind}\` is not supported. Use \`${suggestion}\` instead.`, UnsupportedStatementInDeclareModule: "Only declares and type imports are allowed inside declare module.", UnterminatedFlowComment: "Unterminated flow-comment." });
        function hasTypeImportKind(node) {
          return "type" === node.importKind || "typeof" === node.importKind;
        }
        function isMaybeDefaultImport(type) {
          return tokenIsKeywordOrIdentifier(type) && 97 !== type;
        }
        const exportSuggestions = { const: "declare export var", let: "declare export var", type: "export type", interface: "export interface" };
        const FLOW_PRAGMA_REGEX = /\*?\s*@((?:no)?flow)\b/;
        const entities = { __proto__: null, quot: '"', amp: "&", apos: "'", lt: "<", gt: ">", nbsp: "\xA0", iexcl: "\xA1", cent: "\xA2", pound: "\xA3", curren: "\xA4", yen: "\xA5", brvbar: "\xA6", sect: "\xA7", uml: "\xA8", copy: "\xA9", ordf: "\xAA", laquo: "\xAB", not: "\xAC", shy: "\xAD", reg: "\xAE", macr: "\xAF", deg: "\xB0", plusmn: "\xB1", sup2: "\xB2", sup3: "\xB3", acute: "\xB4", micro: "\xB5", para: "\xB6", middot: "\xB7", cedil: "\xB8", sup1: "\xB9", ordm: "\xBA", raquo: "\xBB", frac14: "\xBC", frac12: "\xBD", frac34: "\xBE", iquest: "\xBF", Agrave: "\xC0", Aacute: "\xC1", Acirc: "\xC2", Atilde: "\xC3", Auml: "\xC4", Aring: "\xC5", AElig: "\xC6", Ccedil: "\xC7", Egrave: "\xC8", Eacute: "\xC9", Ecirc: "\xCA", Euml: "\xCB", Igrave: "\xCC", Iacute: "\xCD", Icirc: "\xCE", Iuml: "\xCF", ETH: "\xD0", Ntilde: "\xD1", Ograve: "\xD2", Oacute: "\xD3", Ocirc: "\xD4", Otilde: "\xD5", Ouml: "\xD6", times: "\xD7", Oslash: "\xD8", Ugrave: "\xD9", Uacute: "\xDA", Ucirc: "\xDB", Uuml: "\xDC", Yacute: "\xDD", THORN: "\xDE", szlig: "\xDF", agrave: "\xE0", aacute: "\xE1", acirc: "\xE2", atilde: "\xE3", auml: "\xE4", aring: "\xE5", aelig: "\xE6", ccedil: "\xE7", egrave: "\xE8", eacute: "\xE9", ecirc: "\xEA", euml: "\xEB", igrave: "\xEC", iacute: "\xED", icirc: "\xEE", iuml: "\xEF", eth: "\xF0", ntilde: "\xF1", ograve: "\xF2", oacute: "\xF3", ocirc: "\xF4", otilde: "\xF5", ouml: "\xF6", divide: "\xF7", oslash: "\xF8", ugrave: "\xF9", uacute: "\xFA", ucirc: "\xFB", uuml: "\xFC", yacute: "\xFD", thorn: "\xFE", yuml: "\xFF", OElig: "\u0152", oelig: "\u0153", Scaron: "\u0160", scaron: "\u0161", Yuml: "\u0178", fnof: "\u0192", circ: "\u02C6", tilde: "\u02DC", Alpha: "\u0391", Beta: "\u0392", Gamma: "\u0393", Delta: "\u0394", Epsilon: "\u0395", Zeta: "\u0396", Eta: "\u0397", Theta: "\u0398", Iota: "\u0399", Kappa: "\u039A", Lambda: "\u039B", Mu: "\u039C", Nu: "\u039D", Xi: "\u039E", Omicron: "\u039F", Pi: "\u03A0", Rho: "\u03A1", Sigma: "\u03A3", Tau: "\u03A4", Upsilon: "\u03A5", Phi: "\u03A6", Chi: "\u03A7", Psi: "\u03A8", Omega: "\u03A9", alpha: "\u03B1", beta: "\u03B2", gamma: "\u03B3", delta: "\u03B4", epsilon: "\u03B5", zeta: "\u03B6", eta: "\u03B7", theta: "\u03B8", iota: "\u03B9", kappa: "\u03BA", lambda: "\u03BB", mu: "\u03BC", nu: "\u03BD", xi: "\u03BE", omicron: "\u03BF", pi: "\u03C0", rho: "\u03C1", sigmaf: "\u03C2", sigma: "\u03C3", tau: "\u03C4", upsilon: "\u03C5", phi: "\u03C6", chi: "\u03C7", psi: "\u03C8", omega: "\u03C9", thetasym: "\u03D1", upsih: "\u03D2", piv: "\u03D6", ensp: "\u2002", emsp: "\u2003", thinsp: "\u2009", zwnj: "\u200C", zwj: "\u200D", lrm: "\u200E", rlm: "\u200F", ndash: "\u2013", mdash: "\u2014", lsquo: "\u2018", rsquo: "\u2019", sbquo: "\u201A", ldquo: "\u201C", rdquo: "\u201D", bdquo: "\u201E", dagger: "\u2020", Dagger: "\u2021", bull: "\u2022", hellip: "\u2026", permil: "\u2030", prime: "\u2032", Prime: "\u2033", lsaquo: "\u2039", rsaquo: "\u203A", oline: "\u203E", frasl: "\u2044", euro: "\u20AC", image: "\u2111", weierp: "\u2118", real: "\u211C", trade: "\u2122", alefsym: "\u2135", larr: "\u2190", uarr: "\u2191", rarr: "\u2192", darr: "\u2193", harr: "\u2194", crarr: "\u21B5", lArr: "\u21D0", uArr: "\u21D1", rArr: "\u21D2", dArr: "\u21D3", hArr: "\u21D4", forall: "\u2200", part: "\u2202", exist: "\u2203", empty: "\u2205", nabla: "\u2207", isin: "\u2208", notin: "\u2209", ni: "\u220B", prod: "\u220F", sum: "\u2211", minus: "\u2212", lowast: "\u2217", radic: "\u221A", prop: "\u221D", infin: "\u221E", ang: "\u2220", and: "\u2227", or: "\u2228", cap: "\u2229", cup: "\u222A", int: "\u222B", there4: "\u2234", sim: "\u223C", cong: "\u2245", asymp: "\u2248", ne: "\u2260", equiv: "\u2261", le: "\u2264", ge: "\u2265", sub: "\u2282", sup: "\u2283", nsub: "\u2284", sube: "\u2286", supe: "\u2287", oplus: "\u2295", otimes: "\u2297", perp: "\u22A5", sdot: "\u22C5", lceil: "\u2308", rceil: "\u2309", lfloor: "\u230A", rfloor: "\u230B", lang: "\u2329", rang: "\u232A", loz: "\u25CA", spades: "\u2660", clubs: "\u2663", hearts: "\u2665", diams: "\u2666" }, JsxErrors = ParseErrorEnum`jsx`({ AttributeIsEmpty: "JSX attributes must only be assigned a non-empty expression.", MissingClosingTagElement: ({ openingTagName }) => `Expected corresponding JSX closing tag for <${openingTagName}>.`, MissingClosingTagFragment: "Expected corresponding JSX closing tag for <>.", UnexpectedSequenceExpression: "Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?", UnexpectedToken: ({ unexpected, HTMLEntity }) => `Unexpected token \`${unexpected}\`. Did you mean \`${HTMLEntity}\` or \`{'${unexpected}'}\`?`, UnsupportedJsxValue: "JSX value should be either an expression or a quoted JSX text.", UnterminatedJsxContent: "Unterminated JSX contents.", UnwrappedAdjacentJSXElements: "Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?" });
        function isFragment(object) {
          return !!object && ("JSXOpeningFragment" === object.type || "JSXClosingFragment" === object.type);
        }
        function getQualifiedJSXName(object) {
          if ("JSXIdentifier" === object.type)
            return object.name;
          if ("JSXNamespacedName" === object.type)
            return object.namespace.name + ":" + object.name.name;
          if ("JSXMemberExpression" === object.type)
            return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
          throw new Error("Node had unexpected type: " + object.type);
        }
        class TypeScriptScope extends Scope3 {
          constructor(...args) {
            super(...args), this.types = /* @__PURE__ */ new Set(), this.enums = /* @__PURE__ */ new Set(), this.constEnums = /* @__PURE__ */ new Set(), this.classes = /* @__PURE__ */ new Set(), this.exportOnlyBindings = /* @__PURE__ */ new Set();
          }
        }
        class TypeScriptScopeHandler extends ScopeHandler {
          constructor(...args) {
            super(...args), this.importsStack = [];
          }
          createScope(flags) {
            return this.importsStack.push(/* @__PURE__ */ new Set()), new TypeScriptScope(flags);
          }
          enter(flags) {
            256 == flags && this.importsStack.push(/* @__PURE__ */ new Set()), super.enter(flags);
          }
          exit() {
            const flags = super.exit();
            return 256 == flags && this.importsStack.pop(), flags;
          }
          hasImport(name, allowShadow) {
            const len = this.importsStack.length;
            if (this.importsStack[len - 1].has(name))
              return true;
            if (!allowShadow && len > 1) {
              for (let i = 0; i < len - 1; i++)
                if (this.importsStack[i].has(name))
                  return true;
            }
            return false;
          }
          declareName(name, bindingType, loc) {
            if (4096 & bindingType)
              return this.hasImport(name, true) && this.parser.raise(Errors.VarRedeclaration, { at: loc, identifierName: name }), void this.importsStack[this.importsStack.length - 1].add(name);
            const scope = this.currentScope();
            if (1024 & bindingType)
              return this.maybeExportDefined(scope, name), void scope.exportOnlyBindings.add(name);
            super.declareName(name, bindingType, loc), 2 & bindingType && (1 & bindingType || (this.checkRedeclarationInScope(scope, name, bindingType, loc), this.maybeExportDefined(scope, name)), scope.types.add(name)), 256 & bindingType && scope.enums.add(name), 512 & bindingType && scope.constEnums.add(name), 128 & bindingType && scope.classes.add(name);
          }
          isRedeclaredInScope(scope, name, bindingType) {
            if (scope.enums.has(name)) {
              if (256 & bindingType) {
                return !!(512 & bindingType) !== scope.constEnums.has(name);
              }
              return true;
            }
            return 128 & bindingType && scope.classes.has(name) ? !!scope.lexical.has(name) && !!(1 & bindingType) : !!(2 & bindingType && scope.types.has(name)) || super.isRedeclaredInScope(scope, name, bindingType);
          }
          checkLocalExport(id) {
            const topLevelScope = this.scopeStack[0], { name } = id;
            topLevelScope.types.has(name) || topLevelScope.exportOnlyBindings.has(name) || this.hasImport(name) || super.checkLocalExport(id);
          }
        }
        function assert2(x) {
          if (!x)
            throw new Error("Assert fail");
        }
        const TSErrors = ParseErrorEnum`typescript`({ AbstractMethodHasImplementation: ({ methodName }) => `Method '${methodName}' cannot have an implementation because it is marked abstract.`, AbstractPropertyHasInitializer: ({ propertyName }) => `Property '${propertyName}' cannot have an initializer because it is marked abstract.`, AccesorCannotDeclareThisParameter: "'get' and 'set' accessors cannot declare 'this' parameters.", AccesorCannotHaveTypeParameters: "An accessor cannot have type parameters.", CannotFindName: ({ name }) => `Cannot find name '${name}'.`, ClassMethodHasDeclare: "Class methods cannot have the 'declare' modifier.", ClassMethodHasReadonly: "Class methods cannot have the 'readonly' modifier.", ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference: "A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.", ConstructorHasTypeParameters: "Type parameters cannot appear on a constructor declaration.", DeclareAccessor: ({ kind }) => `'declare' is not allowed in ${kind}ters.`, DeclareClassFieldHasInitializer: "Initializers are not allowed in ambient contexts.", DeclareFunctionHasImplementation: "An implementation cannot be declared in ambient contexts.", DuplicateAccessibilityModifier: ({ modifier }) => "Accessibility modifier already seen.", DuplicateModifier: ({ modifier }) => `Duplicate modifier: '${modifier}'.`, EmptyHeritageClauseType: ({ token }) => `'${token}' list cannot be empty.`, EmptyTypeArguments: "Type argument list cannot be empty.", EmptyTypeParameters: "Type parameter list cannot be empty.", ExpectedAmbientAfterExportDeclare: "'export declare' must be followed by an ambient declaration.", ImportAliasHasImportType: "An import alias can not use 'import type'.", IncompatibleModifiers: ({ modifiers }) => `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`, IndexSignatureHasAbstract: "Index signatures cannot have the 'abstract' modifier.", IndexSignatureHasAccessibility: ({ modifier }) => `Index signatures cannot have an accessibility modifier ('${modifier}').`, IndexSignatureHasDeclare: "Index signatures cannot have the 'declare' modifier.", IndexSignatureHasOverride: "'override' modifier cannot appear on an index signature.", IndexSignatureHasStatic: "Index signatures cannot have the 'static' modifier.", InitializerNotAllowedInAmbientContext: "Initializers are not allowed in ambient contexts.", InvalidModifierOnTypeMember: ({ modifier }) => `'${modifier}' modifier cannot appear on a type member.`, InvalidModifierOnTypeParameter: ({ modifier }) => `'${modifier}' modifier cannot appear on a type parameter.`, InvalidModifierOnTypeParameterPositions: ({ modifier }) => `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`, InvalidModifiersOrder: ({ orderedModifiers }) => `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`, InvalidPropertyAccessAfterInstantiationExpression: "Invalid property access after an instantiation expression. You can either wrap the instantiation expression in parentheses, or delete the type arguments.", InvalidTupleMemberLabel: "Tuple members must be labeled with a simple identifier.", MissingInterfaceName: "'interface' declarations must be followed by an identifier.", MixedLabeledAndUnlabeledElements: "Tuple members must all have names or all not have names.", NonAbstractClassHasAbstractMethod: "Abstract methods can only appear within an abstract class.", NonClassMethodPropertyHasAbstractModifer: "'abstract' modifier can only appear on a class, method, or property declaration.", OptionalTypeBeforeRequired: "A required element cannot follow an optional element.", OverrideNotInSubClass: "This member cannot have an 'override' modifier because its containing class does not extend another class.", PatternIsOptional: "A binding pattern parameter cannot be optional in an implementation signature.", PrivateElementHasAbstract: "Private elements cannot have the 'abstract' modifier.", PrivateElementHasAccessibility: ({ modifier }) => `Private elements cannot have an accessibility modifier ('${modifier}').`, ReadonlyForMethodSignature: "'readonly' modifier can only appear on a property declaration or index signature.", ReservedArrowTypeParam: "This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.", ReservedTypeAssertion: "This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.", SetAccesorCannotHaveOptionalParameter: "A 'set' accessor cannot have an optional parameter.", SetAccesorCannotHaveRestParameter: "A 'set' accessor cannot have rest parameter.", SetAccesorCannotHaveReturnType: "A 'set' accessor cannot have a return type annotation.", SingleTypeParameterWithoutTrailingComma: ({ typeParameterName }) => `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`, StaticBlockCannotHaveModifier: "Static class blocks cannot have any modifier.", TypeAnnotationAfterAssign: "Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.", TypeImportCannotSpecifyDefaultAndNamed: "A type-only import can specify a default import or named bindings, but not both.", TypeModifierIsUsedInTypeExports: "The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.", TypeModifierIsUsedInTypeImports: "The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.", UnexpectedParameterModifier: "A parameter property is only allowed in a constructor implementation.", UnexpectedReadonly: "'readonly' type modifier is only permitted on array and tuple literal types.", UnexpectedTypeAnnotation: "Did not expect a type annotation here.", UnexpectedTypeCastInParameter: "Unexpected type cast in parameter position.", UnsupportedImportTypeArgument: "Argument in a type import must be a string literal.", UnsupportedParameterPropertyKind: "A parameter property may not be declared using a binding pattern.", UnsupportedSignatureParameterKind: ({ type }) => `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.` });
        function tsIsAccessModifier(modifier) {
          return "private" === modifier || "public" === modifier || "protected" === modifier;
        }
        function tsIsVarianceAnnotations(modifier) {
          return "in" === modifier || "out" === modifier;
        }
        function isPossiblyLiteralEnum(expression) {
          if ("MemberExpression" !== expression.type)
            return false;
          const { computed, property } = expression;
          return (!computed || "StringLiteral" === property.type || !("TemplateLiteral" !== property.type || property.expressions.length > 0)) && isUncomputedMemberExpressionChain(expression.object);
        }
        function isUncomputedMemberExpressionChain(expression) {
          return "Identifier" === expression.type || "MemberExpression" === expression.type && (!expression.computed && isUncomputedMemberExpressionChain(expression.object));
        }
        const PlaceholderErrors = ParseErrorEnum`placeholders`({ ClassNameIsRequired: "A class name is required.", UnexpectedSpace: "Unexpected space in placeholder." });
        function hasPlugin(plugins, expectedConfig) {
          const [expectedName, expectedOptions] = "string" == typeof expectedConfig ? [expectedConfig, {}] : expectedConfig, expectedKeys = Object.keys(expectedOptions), expectedOptionsIsEmpty = 0 === expectedKeys.length;
          return plugins.some((p) => {
            if ("string" == typeof p)
              return expectedOptionsIsEmpty && p === expectedName;
            {
              const [pluginName, pluginOptions] = p;
              if (pluginName !== expectedName)
                return false;
              for (const key of expectedKeys)
                if (pluginOptions[key] !== expectedOptions[key])
                  return false;
              return true;
            }
          });
        }
        function getPluginOption(plugins, name, option) {
          const plugin = plugins.find((plugin2) => Array.isArray(plugin2) ? plugin2[0] === name : plugin2 === name);
          return plugin && Array.isArray(plugin) && plugin.length > 1 ? plugin[1][option] : null;
        }
        const PIPELINE_PROPOSALS = ["minimal", "fsharp", "hack", "smart"], TOPIC_TOKENS = ["^^", "@@", "^", "%", "#"], RECORD_AND_TUPLE_SYNTAX_TYPES = ["hash", "bar"];
        const mixinPlugins = { estree: (superClass) => class extends superClass {
          parse() {
            const file = toESTreeLocation(super.parse());
            return this.options.tokens && (file.tokens = file.tokens.map(toESTreeLocation)), file;
          }
          parseRegExpLiteral({ pattern, flags }) {
            let regex = null;
            try {
              regex = new RegExp(pattern, flags);
            } catch (e) {
            }
            const node = this.estreeParseLiteral(regex);
            return node.regex = { pattern, flags }, node;
          }
          parseBigIntLiteral(value) {
            let bigInt;
            try {
              bigInt = BigInt(value);
            } catch (_unused) {
              bigInt = null;
            }
            const node = this.estreeParseLiteral(bigInt);
            return node.bigint = String(node.value || value), node;
          }
          parseDecimalLiteral(value) {
            const node = this.estreeParseLiteral(null);
            return node.decimal = String(node.value || value), node;
          }
          estreeParseLiteral(value) {
            return this.parseLiteral(value, "Literal");
          }
          parseStringLiteral(value) {
            return this.estreeParseLiteral(value);
          }
          parseNumericLiteral(value) {
            return this.estreeParseLiteral(value);
          }
          parseNullLiteral() {
            return this.estreeParseLiteral(null);
          }
          parseBooleanLiteral(value) {
            return this.estreeParseLiteral(value);
          }
          directiveToStmt(directive) {
            const expression = directive.value;
            delete directive.value, expression.type = "Literal", expression.raw = expression.extra.raw, expression.value = expression.extra.expressionValue;
            const stmt = directive;
            return stmt.type = "ExpressionStatement", stmt.expression = expression, stmt.directive = expression.extra.rawValue, delete expression.extra, stmt;
          }
          initFunction(node, isAsync) {
            super.initFunction(node, isAsync), node.expression = false;
          }
          checkDeclaration(node) {
            null != node && this.isObjectProperty(node) ? this.checkDeclaration(node.value) : super.checkDeclaration(node);
          }
          getObjectOrClassMethodParams(method) {
            return method.value.params;
          }
          isValidDirective(stmt) {
            var _stmt$expression$extr;
            return "ExpressionStatement" === stmt.type && "Literal" === stmt.expression.type && "string" == typeof stmt.expression.value && !(null != (_stmt$expression$extr = stmt.expression.extra) && _stmt$expression$extr.parenthesized);
          }
          parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
            super.parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse);
            const directiveStatements = node.directives.map((d) => this.directiveToStmt(d));
            node.body = directiveStatements.concat(node.body), delete node.directives;
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true), method.typeParameters && (method.value.typeParameters = method.typeParameters, delete method.typeParameters), classBody.body.push(method);
          }
          parsePrivateName() {
            const node = super.parsePrivateName();
            return this.getPluginOption("estree", "classFeatures") ? this.convertPrivateNameToPrivateIdentifier(node) : node;
          }
          convertPrivateNameToPrivateIdentifier(node) {
            const name = super.getPrivateNameSV(node);
            return delete node.id, node.name = name, node.type = "PrivateIdentifier", node;
          }
          isPrivateName(node) {
            return this.getPluginOption("estree", "classFeatures") ? "PrivateIdentifier" === node.type : super.isPrivateName(node);
          }
          getPrivateNameSV(node) {
            return this.getPluginOption("estree", "classFeatures") ? node.name : super.getPrivateNameSV(node);
          }
          parseLiteral(value, type) {
            const node = super.parseLiteral(value, type);
            return node.raw = node.extra.raw, delete node.extra, node;
          }
          parseFunctionBody(node, allowExpression, isMethod = false) {
            super.parseFunctionBody(node, allowExpression, isMethod), node.expression = "BlockStatement" !== node.body.type;
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
            let funcNode = this.startNode();
            return funcNode.kind = node.kind, funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope), funcNode.type = "FunctionExpression", delete funcNode.kind, node.value = funcNode, "ClassPrivateMethod" === type && (node.computed = false), this.finishNode(node, "MethodDefinition");
          }
          parseClassProperty(...args) {
            const propertyNode = super.parseClassProperty(...args);
            return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode) : propertyNode;
          }
          parseClassPrivateProperty(...args) {
            const propertyNode = super.parseClassPrivateProperty(...args);
            return this.getPluginOption("estree", "classFeatures") ? (propertyNode.type = "PropertyDefinition", propertyNode.computed = false, propertyNode) : propertyNode;
          }
          parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
            const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);
            return node && (node.type = "Property", "method" === node.kind && (node.kind = "init"), node.shorthand = false), node;
          }
          parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
            const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
            return node && (node.kind = "init", node.type = "Property"), node;
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            return "Property" === type ? "value" : super.isValidLVal(type, isUnparenthesizedInAssign, binding);
          }
          isAssignable(node, isBinding) {
            return null != node && this.isObjectProperty(node) ? this.isAssignable(node.value, isBinding) : super.isAssignable(node, isBinding);
          }
          toAssignable(node, isLHS = false) {
            if (null != node && this.isObjectProperty(node)) {
              const { key, value } = node;
              this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value, isLHS);
            } else
              super.toAssignable(node, isLHS);
          }
          toAssignableObjectExpressionProp(prop, isLast, isLHS) {
            "get" === prop.kind || "set" === prop.kind ? this.raise(Errors.PatternHasAccessor, { at: prop.key }) : prop.method ? this.raise(Errors.PatternHasMethod, { at: prop.key }) : super.toAssignableObjectExpressionProp(prop, isLast, isLHS);
          }
          finishCallExpression(unfinished, optional) {
            const node = super.finishCallExpression(unfinished, optional);
            if ("Import" === node.callee.type) {
              var _node$arguments$;
              if (node.type = "ImportExpression", node.source = node.arguments[0], this.hasPlugin("importAssertions"))
                node.attributes = null != (_node$arguments$ = node.arguments[1]) ? _node$arguments$ : null;
              delete node.arguments, delete node.callee;
            }
            return node;
          }
          toReferencedArguments(node) {
            "ImportExpression" !== node.type && super.toReferencedArguments(node);
          }
          parseExport(unfinished) {
            const node = super.parseExport(unfinished);
            switch (node.type) {
              case "ExportAllDeclaration":
                node.exported = null;
                break;
              case "ExportNamedDeclaration":
                1 === node.specifiers.length && "ExportNamespaceSpecifier" === node.specifiers[0].type && (node.type = "ExportAllDeclaration", node.exported = node.specifiers[0].exported, delete node.specifiers);
            }
            return node;
          }
          parseSubscript(base, startPos, startLoc, noCalls, state) {
            const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);
            if (state.optionalChainMember) {
              if ("OptionalMemberExpression" !== node.type && "OptionalCallExpression" !== node.type || (node.type = node.type.substring(8)), state.stop) {
                const chain = this.startNodeAtNode(node);
                return chain.expression = node, this.finishNode(chain, "ChainExpression");
              }
            } else
              "MemberExpression" !== node.type && "CallExpression" !== node.type || (node.optional = false);
            return node;
          }
          hasPropertyAsPrivateName(node) {
            return "ChainExpression" === node.type && (node = node.expression), super.hasPropertyAsPrivateName(node);
          }
          isOptionalChain(node) {
            return "ChainExpression" === node.type;
          }
          isObjectProperty(node) {
            return "Property" === node.type && "init" === node.kind && !node.method;
          }
          isObjectMethod(node) {
            return node.method || "get" === node.kind || "set" === node.kind;
          }
          finishNodeAt(node, type, endLoc) {
            return toESTreeLocation(super.finishNodeAt(node, type, endLoc));
          }
          resetStartLocation(node, start, startLoc) {
            super.resetStartLocation(node, start, startLoc), toESTreeLocation(node);
          }
          resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
            super.resetEndLocation(node, endLoc), toESTreeLocation(node);
          }
        }, jsx: (superClass) => class extends superClass {
          jsxReadToken() {
            let out = "", chunkStart = this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.length)
                throw this.raise(JsxErrors.UnterminatedJsxContent, { at: this.state.startLoc });
              const ch = this.input.charCodeAt(this.state.pos);
              switch (ch) {
                case 60:
                case 123:
                  return this.state.pos === this.state.start ? 60 === ch && this.state.canStartJSXElement ? (++this.state.pos, this.finishToken(138)) : super.getTokenFromCode(ch) : (out += this.input.slice(chunkStart, this.state.pos), this.finishToken(137, out));
                case 38:
                  out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos;
                  break;
                default:
                  isNewLine2(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(true), chunkStart = this.state.pos) : ++this.state.pos;
              }
            }
          }
          jsxReadNewLine(normalizeCRLF) {
            const ch = this.input.charCodeAt(this.state.pos);
            let out;
            return ++this.state.pos, 13 === ch && 10 === this.input.charCodeAt(this.state.pos) ? (++this.state.pos, out = normalizeCRLF ? "\n" : "\r\n") : out = String.fromCharCode(ch), ++this.state.curLine, this.state.lineStart = this.state.pos, out;
          }
          jsxReadString(quote) {
            let out = "", chunkStart = ++this.state.pos;
            for (; ; ) {
              if (this.state.pos >= this.length)
                throw this.raise(Errors.UnterminatedString, { at: this.state.startLoc });
              const ch = this.input.charCodeAt(this.state.pos);
              if (ch === quote)
                break;
              38 === ch ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadEntity(), chunkStart = this.state.pos) : isNewLine2(ch) ? (out += this.input.slice(chunkStart, this.state.pos), out += this.jsxReadNewLine(false), chunkStart = this.state.pos) : ++this.state.pos;
            }
            return out += this.input.slice(chunkStart, this.state.pos++), this.finishToken(129, out);
          }
          jsxReadEntity() {
            const startPos = ++this.state.pos;
            if (35 === this.codePointAtPos(this.state.pos)) {
              ++this.state.pos;
              let radix = 10;
              120 === this.codePointAtPos(this.state.pos) && (radix = 16, ++this.state.pos);
              const codePoint = this.readInt(radix, void 0, false, "bail");
              if (null !== codePoint && 59 === this.codePointAtPos(this.state.pos))
                return ++this.state.pos, String.fromCodePoint(codePoint);
            } else {
              let count = 0, semi = false;
              for (; count++ < 10 && this.state.pos < this.length && !(semi = 59 == this.codePointAtPos(this.state.pos)); )
                ++this.state.pos;
              if (semi) {
                const desc = this.input.slice(startPos, this.state.pos), entity = entities[desc];
                if (++this.state.pos, entity)
                  return entity;
              }
            }
            return this.state.pos = startPos, "&";
          }
          jsxReadWord() {
            let ch;
            const start = this.state.pos;
            do {
              ch = this.input.charCodeAt(++this.state.pos);
            } while (isIdentifierChar2(ch) || 45 === ch);
            return this.finishToken(136, this.input.slice(start, this.state.pos));
          }
          jsxParseIdentifier() {
            const node = this.startNode();
            return this.match(136) ? node.name = this.state.value : tokenIsKeyword(this.state.type) ? node.name = tokenLabelName(this.state.type) : this.unexpected(), this.next(), this.finishNode(node, "JSXIdentifier");
          }
          jsxParseNamespacedName() {
            const startPos = this.state.start, startLoc = this.state.startLoc, name = this.jsxParseIdentifier();
            if (!this.eat(14))
              return name;
            const node = this.startNodeAt(startPos, startLoc);
            return node.namespace = name, node.name = this.jsxParseIdentifier(), this.finishNode(node, "JSXNamespacedName");
          }
          jsxParseElementName() {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            let node = this.jsxParseNamespacedName();
            if ("JSXNamespacedName" === node.type)
              return node;
            for (; this.eat(16); ) {
              const newNode = this.startNodeAt(startPos, startLoc);
              newNode.object = node, newNode.property = this.jsxParseIdentifier(), node = this.finishNode(newNode, "JSXMemberExpression");
            }
            return node;
          }
          jsxParseAttributeValue() {
            let node;
            switch (this.state.type) {
              case 5:
                return node = this.startNode(), this.setContext(types2.brace), this.next(), node = this.jsxParseExpressionContainer(node, types2.j_oTag), "JSXEmptyExpression" === node.expression.type && this.raise(JsxErrors.AttributeIsEmpty, { at: node }), node;
              case 138:
              case 129:
                return this.parseExprAtom();
              default:
                throw this.raise(JsxErrors.UnsupportedJsxValue, { at: this.state.startLoc });
            }
          }
          jsxParseEmptyExpression() {
            const node = this.startNodeAt(this.state.lastTokEndLoc.index, this.state.lastTokEndLoc);
            return this.finishNodeAt(node, "JSXEmptyExpression", this.state.startLoc);
          }
          jsxParseSpreadChild(node) {
            return this.next(), node.expression = this.parseExpression(), this.setContext(types2.j_oTag), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXSpreadChild");
          }
          jsxParseExpressionContainer(node, previousContext) {
            if (this.match(8))
              node.expression = this.jsxParseEmptyExpression();
            else {
              const expression = this.parseExpression();
              node.expression = expression;
            }
            return this.setContext(previousContext), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXExpressionContainer");
          }
          jsxParseAttribute() {
            const node = this.startNode();
            return this.match(5) ? (this.setContext(types2.brace), this.next(), this.expect(21), node.argument = this.parseMaybeAssignAllowIn(), this.setContext(types2.j_oTag), this.state.canStartJSXElement = true, this.expect(8), this.finishNode(node, "JSXSpreadAttribute")) : (node.name = this.jsxParseNamespacedName(), node.value = this.eat(29) ? this.jsxParseAttributeValue() : null, this.finishNode(node, "JSXAttribute"));
          }
          jsxParseOpeningElementAt(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc);
            return this.eat(139) ? this.finishNode(node, "JSXOpeningFragment") : (node.name = this.jsxParseElementName(), this.jsxParseOpeningElementAfterName(node));
          }
          jsxParseOpeningElementAfterName(node) {
            const attributes = [];
            for (; !this.match(56) && !this.match(139); )
              attributes.push(this.jsxParseAttribute());
            return node.attributes = attributes, node.selfClosing = this.eat(56), this.expect(139), this.finishNode(node, "JSXOpeningElement");
          }
          jsxParseClosingElementAt(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc);
            return this.eat(139) ? this.finishNode(node, "JSXClosingFragment") : (node.name = this.jsxParseElementName(), this.expect(139), this.finishNode(node, "JSXClosingElement"));
          }
          jsxParseElementAt(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc), children = [], openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
            let closingElement = null;
            if (!openingElement.selfClosing) {
              contents:
                for (; ; )
                  switch (this.state.type) {
                    case 138:
                      if (startPos = this.state.start, startLoc = this.state.startLoc, this.next(), this.eat(56)) {
                        closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
                        break contents;
                      }
                      children.push(this.jsxParseElementAt(startPos, startLoc));
                      break;
                    case 137:
                      children.push(this.parseExprAtom());
                      break;
                    case 5: {
                      const node2 = this.startNode();
                      this.setContext(types2.brace), this.next(), this.match(21) ? children.push(this.jsxParseSpreadChild(node2)) : children.push(this.jsxParseExpressionContainer(node2, types2.j_expr));
                      break;
                    }
                    default:
                      throw this.unexpected();
                  }
              isFragment(openingElement) && !isFragment(closingElement) && null !== closingElement ? this.raise(JsxErrors.MissingClosingTagFragment, { at: closingElement }) : !isFragment(openingElement) && isFragment(closingElement) ? this.raise(JsxErrors.MissingClosingTagElement, { at: closingElement, openingTagName: getQualifiedJSXName(openingElement.name) }) : isFragment(openingElement) || isFragment(closingElement) || getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name) && this.raise(JsxErrors.MissingClosingTagElement, { at: closingElement, openingTagName: getQualifiedJSXName(openingElement.name) });
            }
            if (isFragment(openingElement) ? (node.openingFragment = openingElement, node.closingFragment = closingElement) : (node.openingElement = openingElement, node.closingElement = closingElement), node.children = children, this.match(47))
              throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, { at: this.state.startLoc });
            return isFragment(openingElement) ? this.finishNode(node, "JSXFragment") : this.finishNode(node, "JSXElement");
          }
          jsxParseElement() {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            return this.next(), this.jsxParseElementAt(startPos, startLoc);
          }
          setContext(newContext) {
            const { context } = this.state;
            context[context.length - 1] = newContext;
          }
          parseExprAtom(refExpressionErrors) {
            return this.match(137) ? this.parseLiteral(this.state.value, "JSXText") : this.match(138) ? this.jsxParseElement() : this.match(47) && 33 !== this.input.charCodeAt(this.state.pos) ? (this.replaceToken(138), this.jsxParseElement()) : super.parseExprAtom(refExpressionErrors);
          }
          skipSpace() {
            this.curContext().preserveSpace || super.skipSpace();
          }
          getTokenFromCode(code) {
            const context = this.curContext();
            if (context === types2.j_expr)
              return this.jsxReadToken();
            if (context === types2.j_oTag || context === types2.j_cTag) {
              if (isIdentifierStart2(code))
                return this.jsxReadWord();
              if (62 === code)
                return ++this.state.pos, this.finishToken(139);
              if ((34 === code || 39 === code) && context === types2.j_oTag)
                return this.jsxReadString(code);
            }
            return 60 === code && this.state.canStartJSXElement && 33 !== this.input.charCodeAt(this.state.pos + 1) ? (++this.state.pos, this.finishToken(138)) : super.getTokenFromCode(code);
          }
          updateContext(prevType) {
            const { context, type } = this.state;
            if (56 === type && 138 === prevType)
              context.splice(-2, 2, types2.j_cTag), this.state.canStartJSXElement = false;
            else if (138 === type)
              context.push(types2.j_oTag);
            else if (139 === type) {
              const out = context[context.length - 1];
              out === types2.j_oTag && 56 === prevType || out === types2.j_cTag ? (context.pop(), this.state.canStartJSXElement = context[context.length - 1] === types2.j_expr) : (this.setContext(types2.j_expr), this.state.canStartJSXElement = true);
            } else
              this.state.canStartJSXElement = tokenBeforeExprs[type];
          }
        }, flow: (superClass) => class extends superClass {
          constructor(...args) {
            super(...args), this.flowPragma = void 0;
          }
          getScopeHandler() {
            return FlowScopeHandler;
          }
          shouldParseTypes() {
            return this.getPluginOption("flow", "all") || "flow" === this.flowPragma;
          }
          shouldParseEnums() {
            return !!this.getPluginOption("flow", "enums");
          }
          finishToken(type, val) {
            return 129 !== type && 13 !== type && 28 !== type && void 0 === this.flowPragma && (this.flowPragma = null), super.finishToken(type, val);
          }
          addComment(comment) {
            if (void 0 === this.flowPragma) {
              const matches = FLOW_PRAGMA_REGEX.exec(comment.value);
              if (matches)
                if ("flow" === matches[1])
                  this.flowPragma = "flow";
                else {
                  if ("noflow" !== matches[1])
                    throw new Error("Unexpected flow pragma");
                  this.flowPragma = "noflow";
                }
              else
                ;
            }
            return super.addComment(comment);
          }
          flowParseTypeInitialiser(tok) {
            const oldInType = this.state.inType;
            this.state.inType = true, this.expect(tok || 14);
            const type = this.flowParseType();
            return this.state.inType = oldInType, type;
          }
          flowParsePredicate() {
            const node = this.startNode(), moduloLoc = this.state.startLoc;
            return this.next(), this.expectContextual(107), this.state.lastTokStart > moduloLoc.index + 1 && this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, { at: moduloLoc }), this.eat(10) ? (node.value = super.parseExpression(), this.expect(11), this.finishNode(node, "DeclaredPredicate")) : this.finishNode(node, "InferredPredicate");
          }
          flowParseTypeAndPredicateInitialiser() {
            const oldInType = this.state.inType;
            this.state.inType = true, this.expect(14);
            let type = null, predicate = null;
            return this.match(54) ? (this.state.inType = oldInType, predicate = this.flowParsePredicate()) : (type = this.flowParseType(), this.state.inType = oldInType, this.match(54) && (predicate = this.flowParsePredicate())), [type, predicate];
          }
          flowParseDeclareClass(node) {
            return this.next(), this.flowParseInterfaceish(node, true), this.finishNode(node, "DeclareClass");
          }
          flowParseDeclareFunction(node) {
            this.next();
            const id = node.id = this.parseIdentifier(), typeNode = this.startNode(), typeContainer = this.startNode();
            this.match(47) ? typeNode.typeParameters = this.flowParseTypeParameterDeclaration() : typeNode.typeParameters = null, this.expect(10);
            const tmp = this.flowParseFunctionTypeParams();
            return typeNode.params = tmp.params, typeNode.rest = tmp.rest, typeNode.this = tmp._this, this.expect(11), [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation"), id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation"), this.resetEndLocation(id), this.semicolon(), this.scope.declareName(node.id.name, 2048, node.id.loc.start), this.finishNode(node, "DeclareFunction");
          }
          flowParseDeclare(node, insideModule) {
            if (this.match(80))
              return this.flowParseDeclareClass(node);
            if (this.match(68))
              return this.flowParseDeclareFunction(node);
            if (this.match(74))
              return this.flowParseDeclareVariable(node);
            if (this.eatContextual(123))
              return this.match(16) ? this.flowParseDeclareModuleExports(node) : (insideModule && this.raise(FlowErrors.NestedDeclareModule, { at: this.state.lastTokStartLoc }), this.flowParseDeclareModule(node));
            if (this.isContextual(126))
              return this.flowParseDeclareTypeAlias(node);
            if (this.isContextual(127))
              return this.flowParseDeclareOpaqueType(node);
            if (this.isContextual(125))
              return this.flowParseDeclareInterface(node);
            if (this.match(82))
              return this.flowParseDeclareExportDeclaration(node, insideModule);
            throw this.unexpected();
          }
          flowParseDeclareVariable(node) {
            return this.next(), node.id = this.flowParseTypeAnnotatableIdentifier(true), this.scope.declareName(node.id.name, 5, node.id.loc.start), this.semicolon(), this.finishNode(node, "DeclareVariable");
          }
          flowParseDeclareModule(node) {
            this.scope.enter(0), this.match(129) ? node.id = super.parseExprAtom() : node.id = this.parseIdentifier();
            const bodyNode = node.body = this.startNode(), body = bodyNode.body = [];
            for (this.expect(5); !this.match(8); ) {
              let bodyNode2 = this.startNode();
              this.match(83) ? (this.next(), this.isContextual(126) || this.match(87) || this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, { at: this.state.lastTokStartLoc }), super.parseImport(bodyNode2)) : (this.expectContextual(121, FlowErrors.UnsupportedStatementInDeclareModule), bodyNode2 = this.flowParseDeclare(bodyNode2, true)), body.push(bodyNode2);
            }
            this.scope.exit(), this.expect(8), this.finishNode(bodyNode, "BlockStatement");
            let kind = null, hasModuleExport = false;
            return body.forEach((bodyElement) => {
              !function(bodyElement2) {
                return "DeclareExportAllDeclaration" === bodyElement2.type || "DeclareExportDeclaration" === bodyElement2.type && (!bodyElement2.declaration || "TypeAlias" !== bodyElement2.declaration.type && "InterfaceDeclaration" !== bodyElement2.declaration.type);
              }(bodyElement) ? "DeclareModuleExports" === bodyElement.type && (hasModuleExport && this.raise(FlowErrors.DuplicateDeclareModuleExports, { at: bodyElement }), "ES" === kind && this.raise(FlowErrors.AmbiguousDeclareModuleKind, { at: bodyElement }), kind = "CommonJS", hasModuleExport = true) : ("CommonJS" === kind && this.raise(FlowErrors.AmbiguousDeclareModuleKind, { at: bodyElement }), kind = "ES");
            }), node.kind = kind || "CommonJS", this.finishNode(node, "DeclareModule");
          }
          flowParseDeclareExportDeclaration(node, insideModule) {
            if (this.expect(82), this.eat(65))
              return this.match(68) || this.match(80) ? node.declaration = this.flowParseDeclare(this.startNode()) : (node.declaration = this.flowParseType(), this.semicolon()), node.default = true, this.finishNode(node, "DeclareExportDeclaration");
            if (this.match(75) || this.isLet() || (this.isContextual(126) || this.isContextual(125)) && !insideModule) {
              const label = this.state.value;
              throw this.raise(FlowErrors.UnsupportedDeclareExportKind, { at: this.state.startLoc, unsupportedExportKind: label, suggestion: exportSuggestions[label] });
            }
            if (this.match(74) || this.match(68) || this.match(80) || this.isContextual(127))
              return node.declaration = this.flowParseDeclare(this.startNode()), node.default = false, this.finishNode(node, "DeclareExportDeclaration");
            if (this.match(55) || this.match(5) || this.isContextual(125) || this.isContextual(126) || this.isContextual(127))
              return "ExportNamedDeclaration" === (node = this.parseExport(node)).type && (node.type = "ExportDeclaration", node.default = false, delete node.exportKind), node.type = "Declare" + node.type, node;
            throw this.unexpected();
          }
          flowParseDeclareModuleExports(node) {
            return this.next(), this.expectContextual(108), node.typeAnnotation = this.flowParseTypeAnnotation(), this.semicolon(), this.finishNode(node, "DeclareModuleExports");
          }
          flowParseDeclareTypeAlias(node) {
            this.next();
            const finished = this.flowParseTypeAlias(node);
            return finished.type = "DeclareTypeAlias", finished;
          }
          flowParseDeclareOpaqueType(node) {
            this.next();
            const finished = this.flowParseOpaqueType(node, true);
            return finished.type = "DeclareOpaqueType", finished;
          }
          flowParseDeclareInterface(node) {
            return this.next(), this.flowParseInterfaceish(node), this.finishNode(node, "DeclareInterface");
          }
          flowParseInterfaceish(node, isClass = false) {
            if (node.id = this.flowParseRestrictedIdentifier(!isClass, true), this.scope.declareName(node.id.name, isClass ? 17 : 9, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.extends = [], node.implements = [], node.mixins = [], this.eat(81))
              do {
                node.extends.push(this.flowParseInterfaceExtends());
              } while (!isClass && this.eat(12));
            if (this.isContextual(114)) {
              this.next();
              do {
                node.mixins.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            }
            if (this.isContextual(110)) {
              this.next();
              do {
                node.implements.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            }
            node.body = this.flowParseObjectType({ allowStatic: isClass, allowExact: false, allowSpread: false, allowProto: isClass, allowInexact: false });
          }
          flowParseInterfaceExtends() {
            const node = this.startNode();
            return node.id = this.flowParseQualifiedTypeIdentifier(), this.match(47) ? node.typeParameters = this.flowParseTypeParameterInstantiation() : node.typeParameters = null, this.finishNode(node, "InterfaceExtends");
          }
          flowParseInterface(node) {
            return this.flowParseInterfaceish(node), this.finishNode(node, "InterfaceDeclaration");
          }
          checkNotUnderscore(word) {
            "_" === word && this.raise(FlowErrors.UnexpectedReservedUnderscore, { at: this.state.startLoc });
          }
          checkReservedType(word, startLoc, declaration) {
            reservedTypes.has(word) && this.raise(declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, { at: startLoc, reservedType: word });
          }
          flowParseRestrictedIdentifier(liberal, declaration) {
            return this.checkReservedType(this.state.value, this.state.startLoc, declaration), this.parseIdentifier(liberal);
          }
          flowParseTypeAlias(node) {
            return node.id = this.flowParseRestrictedIdentifier(false, true), this.scope.declareName(node.id.name, 9, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.right = this.flowParseTypeInitialiser(29), this.semicolon(), this.finishNode(node, "TypeAlias");
          }
          flowParseOpaqueType(node, declare) {
            return this.expectContextual(126), node.id = this.flowParseRestrictedIdentifier(true, true), this.scope.declareName(node.id.name, 9, node.id.loc.start), this.match(47) ? node.typeParameters = this.flowParseTypeParameterDeclaration() : node.typeParameters = null, node.supertype = null, this.match(14) && (node.supertype = this.flowParseTypeInitialiser(14)), node.impltype = null, declare || (node.impltype = this.flowParseTypeInitialiser(29)), this.semicolon(), this.finishNode(node, "OpaqueType");
          }
          flowParseTypeParameter(requireDefault = false) {
            const nodeStartLoc = this.state.startLoc, node = this.startNode(), variance = this.flowParseVariance(), ident = this.flowParseTypeAnnotatableIdentifier();
            return node.name = ident.name, node.variance = variance, node.bound = ident.typeAnnotation, this.match(29) ? (this.eat(29), node.default = this.flowParseType()) : requireDefault && this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc }), this.finishNode(node, "TypeParameter");
          }
          flowParseTypeParameterDeclaration() {
            const oldInType = this.state.inType, node = this.startNode();
            node.params = [], this.state.inType = true, this.match(47) || this.match(138) ? this.next() : this.unexpected();
            let defaultRequired = false;
            do {
              const typeParameter = this.flowParseTypeParameter(defaultRequired);
              node.params.push(typeParameter), typeParameter.default && (defaultRequired = true), this.match(48) || this.expect(12);
            } while (!this.match(48));
            return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterDeclaration");
          }
          flowParseTypeParameterInstantiation() {
            const node = this.startNode(), oldInType = this.state.inType;
            node.params = [], this.state.inType = true, this.expect(47);
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            for (this.state.noAnonFunctionType = false; !this.match(48); )
              node.params.push(this.flowParseType()), this.match(48) || this.expect(12);
            return this.state.noAnonFunctionType = oldNoAnonFunctionType, this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
          }
          flowParseTypeParameterInstantiationCallOrNew() {
            const node = this.startNode(), oldInType = this.state.inType;
            for (node.params = [], this.state.inType = true, this.expect(47); !this.match(48); )
              node.params.push(this.flowParseTypeOrImplicitInstantiation()), this.match(48) || this.expect(12);
            return this.expect(48), this.state.inType = oldInType, this.finishNode(node, "TypeParameterInstantiation");
          }
          flowParseInterfaceType() {
            const node = this.startNode();
            if (this.expectContextual(125), node.extends = [], this.eat(81))
              do {
                node.extends.push(this.flowParseInterfaceExtends());
              } while (this.eat(12));
            return node.body = this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: false, allowProto: false, allowInexact: false }), this.finishNode(node, "InterfaceTypeAnnotation");
          }
          flowParseObjectPropertyKey() {
            return this.match(130) || this.match(129) ? super.parseExprAtom() : this.parseIdentifier(true);
          }
          flowParseObjectTypeIndexer(node, isStatic, variance) {
            return node.static = isStatic, 14 === this.lookahead().type ? (node.id = this.flowParseObjectPropertyKey(), node.key = this.flowParseTypeInitialiser()) : (node.id = null, node.key = this.flowParseType()), this.expect(3), node.value = this.flowParseTypeInitialiser(), node.variance = variance, this.finishNode(node, "ObjectTypeIndexer");
          }
          flowParseObjectTypeInternalSlot(node, isStatic) {
            return node.static = isStatic, node.id = this.flowParseObjectPropertyKey(), this.expect(3), this.expect(3), this.match(47) || this.match(10) ? (node.method = true, node.optional = false, node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start))) : (node.method = false, this.eat(17) && (node.optional = true), node.value = this.flowParseTypeInitialiser()), this.finishNode(node, "ObjectTypeInternalSlot");
          }
          flowParseObjectTypeMethodish(node) {
            for (node.params = [], node.rest = null, node.typeParameters = null, node.this = null, this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), this.expect(10), this.match(78) && (node.this = this.flowParseFunctionTypeParam(true), node.this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); )
              node.params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
            return this.eat(21) && (node.rest = this.flowParseFunctionTypeParam(false)), this.expect(11), node.returnType = this.flowParseTypeInitialiser(), this.finishNode(node, "FunctionTypeAnnotation");
          }
          flowParseObjectTypeCallProperty(node, isStatic) {
            const valueNode = this.startNode();
            return node.static = isStatic, node.value = this.flowParseObjectTypeMethodish(valueNode), this.finishNode(node, "ObjectTypeCallProperty");
          }
          flowParseObjectType({ allowStatic, allowExact, allowSpread, allowProto, allowInexact }) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            const nodeStart = this.startNode();
            let endDelim, exact;
            nodeStart.callProperties = [], nodeStart.properties = [], nodeStart.indexers = [], nodeStart.internalSlots = [];
            let inexact = false;
            for (allowExact && this.match(6) ? (this.expect(6), endDelim = 9, exact = true) : (this.expect(5), endDelim = 8, exact = false), nodeStart.exact = exact; !this.match(endDelim); ) {
              let isStatic = false, protoStartLoc = null, inexactStartLoc = null;
              const node = this.startNode();
              if (allowProto && this.isContextual(115)) {
                const lookahead2 = this.lookahead();
                14 !== lookahead2.type && 17 !== lookahead2.type && (this.next(), protoStartLoc = this.state.startLoc, allowStatic = false);
              }
              if (allowStatic && this.isContextual(104)) {
                const lookahead2 = this.lookahead();
                14 !== lookahead2.type && 17 !== lookahead2.type && (this.next(), isStatic = true);
              }
              const variance = this.flowParseVariance();
              if (this.eat(0))
                null != protoStartLoc && this.unexpected(protoStartLoc), this.eat(0) ? (variance && this.unexpected(variance.loc.start), nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic))) : nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));
              else if (this.match(10) || this.match(47))
                null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));
              else {
                let kind = "init";
                if (this.isContextual(98) || this.isContextual(103)) {
                  tokenIsLiteralPropertyName(this.lookahead().type) && (kind = this.state.value, this.next());
                }
                const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, null != allowInexact ? allowInexact : !exact);
                null === propOrInexact ? (inexact = true, inexactStartLoc = this.state.lastTokStartLoc) : nodeStart.properties.push(propOrInexact);
              }
              this.flowObjectTypeSemicolon(), !inexactStartLoc || this.match(8) || this.match(9) || this.raise(FlowErrors.UnexpectedExplicitInexactInObject, { at: inexactStartLoc });
            }
            this.expect(endDelim), allowSpread && (nodeStart.inexact = inexact);
            const out = this.finishNode(nodeStart, "ObjectTypeAnnotation");
            return this.state.inType = oldInType, out;
          }
          flowParseObjectTypeProperty(node, isStatic, protoStartLoc, variance, kind, allowSpread, allowInexact) {
            if (this.eat(21)) {
              return this.match(12) || this.match(13) || this.match(8) || this.match(9) ? (allowSpread ? allowInexact || this.raise(FlowErrors.InexactInsideExact, { at: this.state.lastTokStartLoc }) : this.raise(FlowErrors.InexactInsideNonObject, { at: this.state.lastTokStartLoc }), variance && this.raise(FlowErrors.InexactVariance, { at: variance }), null) : (allowSpread || this.raise(FlowErrors.UnexpectedSpreadType, { at: this.state.lastTokStartLoc }), null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.raise(FlowErrors.SpreadVariance, { at: variance }), node.argument = this.flowParseType(), this.finishNode(node, "ObjectTypeSpreadProperty"));
            }
            {
              node.key = this.flowParseObjectPropertyKey(), node.static = isStatic, node.proto = null != protoStartLoc, node.kind = kind;
              let optional = false;
              return this.match(47) || this.match(10) ? (node.method = true, null != protoStartLoc && this.unexpected(protoStartLoc), variance && this.unexpected(variance.loc.start), node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start)), "get" !== kind && "set" !== kind || this.flowCheckGetterSetterParams(node), !allowSpread && "constructor" === node.key.name && node.value.this && this.raise(FlowErrors.ThisParamBannedInConstructor, { at: node.value.this })) : ("init" !== kind && this.unexpected(), node.method = false, this.eat(17) && (optional = true), node.value = this.flowParseTypeInitialiser(), node.variance = variance), node.optional = optional, this.finishNode(node, "ObjectTypeProperty");
            }
          }
          flowCheckGetterSetterParams(property) {
            const paramCount = "get" === property.kind ? 0 : 1, length = property.value.params.length + (property.value.rest ? 1 : 0);
            property.value.this && this.raise("get" === property.kind ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam, { at: property.value.this }), length !== paramCount && this.raise("get" === property.kind ? Errors.BadGetterArity : Errors.BadSetterArity, { at: property }), "set" === property.kind && property.value.rest && this.raise(Errors.BadSetterRestParameter, { at: property });
          }
          flowObjectTypeSemicolon() {
            this.eat(13) || this.eat(12) || this.match(8) || this.match(9) || this.unexpected();
          }
          flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {
            startPos = startPos || this.state.start, startLoc = startLoc || this.state.startLoc;
            let node = id || this.flowParseRestrictedIdentifier(true);
            for (; this.eat(16); ) {
              const node2 = this.startNodeAt(startPos, startLoc);
              node2.qualification = node, node2.id = this.flowParseRestrictedIdentifier(true), node = this.finishNode(node2, "QualifiedTypeIdentifier");
            }
            return node;
          }
          flowParseGenericType(startPos, startLoc, id) {
            const node = this.startNodeAt(startPos, startLoc);
            return node.typeParameters = null, node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id), this.match(47) && (node.typeParameters = this.flowParseTypeParameterInstantiation()), this.finishNode(node, "GenericTypeAnnotation");
          }
          flowParseTypeofType() {
            const node = this.startNode();
            return this.expect(87), node.argument = this.flowParsePrimaryType(), this.finishNode(node, "TypeofTypeAnnotation");
          }
          flowParseTupleType() {
            const node = this.startNode();
            for (node.types = [], this.expect(0); this.state.pos < this.length && !this.match(3) && (node.types.push(this.flowParseType()), !this.match(3)); )
              this.expect(12);
            return this.expect(3), this.finishNode(node, "TupleTypeAnnotation");
          }
          flowParseFunctionTypeParam(first) {
            let name = null, optional = false, typeAnnotation = null;
            const node = this.startNode(), lh = this.lookahead(), isThis = 78 === this.state.type;
            return 14 === lh.type || 17 === lh.type ? (isThis && !first && this.raise(FlowErrors.ThisParamMustBeFirst, { at: node }), name = this.parseIdentifier(isThis), this.eat(17) && (optional = true, isThis && this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node })), typeAnnotation = this.flowParseTypeInitialiser()) : typeAnnotation = this.flowParseType(), node.name = name, node.optional = optional, node.typeAnnotation = typeAnnotation, this.finishNode(node, "FunctionTypeParam");
          }
          reinterpretTypeAsFunctionTypeParam(type) {
            const node = this.startNodeAt(type.start, type.loc.start);
            return node.name = null, node.optional = false, node.typeAnnotation = type, this.finishNode(node, "FunctionTypeParam");
          }
          flowParseFunctionTypeParams(params = []) {
            let rest = null, _this = null;
            for (this.match(78) && (_this = this.flowParseFunctionTypeParam(true), _this.name = null, this.match(11) || this.expect(12)); !this.match(11) && !this.match(21); )
              params.push(this.flowParseFunctionTypeParam(false)), this.match(11) || this.expect(12);
            return this.eat(21) && (rest = this.flowParseFunctionTypeParam(false)), { params, rest, _this };
          }
          flowIdentToTypeAnnotation(startPos, startLoc, node, id) {
            switch (id.name) {
              case "any":
                return this.finishNode(node, "AnyTypeAnnotation");
              case "bool":
              case "boolean":
                return this.finishNode(node, "BooleanTypeAnnotation");
              case "mixed":
                return this.finishNode(node, "MixedTypeAnnotation");
              case "empty":
                return this.finishNode(node, "EmptyTypeAnnotation");
              case "number":
                return this.finishNode(node, "NumberTypeAnnotation");
              case "string":
                return this.finishNode(node, "StringTypeAnnotation");
              case "symbol":
                return this.finishNode(node, "SymbolTypeAnnotation");
              default:
                return this.checkNotUnderscore(id.name), this.flowParseGenericType(startPos, startLoc, id);
            }
          }
          flowParsePrimaryType() {
            const startPos = this.state.start, startLoc = this.state.startLoc, node = this.startNode();
            let tmp, type, isGroupedType = false;
            const oldNoAnonFunctionType = this.state.noAnonFunctionType;
            switch (this.state.type) {
              case 5:
                return this.flowParseObjectType({ allowStatic: false, allowExact: false, allowSpread: true, allowProto: false, allowInexact: true });
              case 6:
                return this.flowParseObjectType({ allowStatic: false, allowExact: true, allowSpread: true, allowProto: false, allowInexact: false });
              case 0:
                return this.state.noAnonFunctionType = false, type = this.flowParseTupleType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, type;
              case 47:
                return node.typeParameters = this.flowParseTypeParameterDeclaration(), this.expect(10), tmp = this.flowParseFunctionTypeParams(), node.params = tmp.params, node.rest = tmp.rest, node.this = tmp._this, this.expect(11), this.expect(19), node.returnType = this.flowParseType(), this.finishNode(node, "FunctionTypeAnnotation");
              case 10:
                if (this.next(), !this.match(11) && !this.match(21))
                  if (tokenIsIdentifier(this.state.type) || this.match(78)) {
                    const token = this.lookahead().type;
                    isGroupedType = 17 !== token && 14 !== token;
                  } else
                    isGroupedType = true;
                if (isGroupedType) {
                  if (this.state.noAnonFunctionType = false, type = this.flowParseType(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && 19 === this.lookahead().type))
                    return this.expect(11), type;
                  this.eat(12);
                }
                return tmp = type ? this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]) : this.flowParseFunctionTypeParams(), node.params = tmp.params, node.rest = tmp.rest, node.this = tmp._this, this.expect(11), this.expect(19), node.returnType = this.flowParseType(), node.typeParameters = null, this.finishNode(node, "FunctionTypeAnnotation");
              case 129:
                return this.parseLiteral(this.state.value, "StringLiteralTypeAnnotation");
              case 85:
              case 86:
                return node.value = this.match(85), this.next(), this.finishNode(node, "BooleanLiteralTypeAnnotation");
              case 53:
                if ("-" === this.state.value) {
                  if (this.next(), this.match(130))
                    return this.parseLiteralAtNode(-this.state.value, "NumberLiteralTypeAnnotation", node);
                  if (this.match(131))
                    return this.parseLiteralAtNode(-this.state.value, "BigIntLiteralTypeAnnotation", node);
                  throw this.raise(FlowErrors.UnexpectedSubtractionOperand, { at: this.state.startLoc });
                }
                throw this.unexpected();
              case 130:
                return this.parseLiteral(this.state.value, "NumberLiteralTypeAnnotation");
              case 131:
                return this.parseLiteral(this.state.value, "BigIntLiteralTypeAnnotation");
              case 88:
                return this.next(), this.finishNode(node, "VoidTypeAnnotation");
              case 84:
                return this.next(), this.finishNode(node, "NullLiteralTypeAnnotation");
              case 78:
                return this.next(), this.finishNode(node, "ThisTypeAnnotation");
              case 55:
                return this.next(), this.finishNode(node, "ExistsTypeAnnotation");
              case 87:
                return this.flowParseTypeofType();
              default:
                if (tokenIsKeyword(this.state.type)) {
                  const label = tokenLabelName(this.state.type);
                  return this.next(), super.createIdentifier(node, label);
                }
                if (tokenIsIdentifier(this.state.type))
                  return this.isContextual(125) ? this.flowParseInterfaceType() : this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());
            }
            throw this.unexpected();
          }
          flowParsePostfixType() {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            let type = this.flowParsePrimaryType(), seenOptionalIndexedAccess = false;
            for (; (this.match(0) || this.match(18)) && !this.canInsertSemicolon(); ) {
              const node = this.startNodeAt(startPos, startLoc), optional = this.eat(18);
              seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional, this.expect(0), !optional && this.match(3) ? (node.elementType = type, this.next(), type = this.finishNode(node, "ArrayTypeAnnotation")) : (node.objectType = type, node.indexType = this.flowParseType(), this.expect(3), seenOptionalIndexedAccess ? (node.optional = optional, type = this.finishNode(node, "OptionalIndexedAccessType")) : type = this.finishNode(node, "IndexedAccessType"));
            }
            return type;
          }
          flowParsePrefixType() {
            const node = this.startNode();
            return this.eat(17) ? (node.typeAnnotation = this.flowParsePrefixType(), this.finishNode(node, "NullableTypeAnnotation")) : this.flowParsePostfixType();
          }
          flowParseAnonFunctionWithoutParens() {
            const param = this.flowParsePrefixType();
            if (!this.state.noAnonFunctionType && this.eat(19)) {
              const node = this.startNodeAt(param.start, param.loc.start);
              return node.params = [this.reinterpretTypeAsFunctionTypeParam(param)], node.rest = null, node.this = null, node.returnType = this.flowParseType(), node.typeParameters = null, this.finishNode(node, "FunctionTypeAnnotation");
            }
            return param;
          }
          flowParseIntersectionType() {
            const node = this.startNode();
            this.eat(45);
            const type = this.flowParseAnonFunctionWithoutParens();
            for (node.types = [type]; this.eat(45); )
              node.types.push(this.flowParseAnonFunctionWithoutParens());
            return 1 === node.types.length ? type : this.finishNode(node, "IntersectionTypeAnnotation");
          }
          flowParseUnionType() {
            const node = this.startNode();
            this.eat(43);
            const type = this.flowParseIntersectionType();
            for (node.types = [type]; this.eat(43); )
              node.types.push(this.flowParseIntersectionType());
            return 1 === node.types.length ? type : this.finishNode(node, "UnionTypeAnnotation");
          }
          flowParseType() {
            const oldInType = this.state.inType;
            this.state.inType = true;
            const type = this.flowParseUnionType();
            return this.state.inType = oldInType, type;
          }
          flowParseTypeOrImplicitInstantiation() {
            if (128 === this.state.type && "_" === this.state.value) {
              const startPos = this.state.start, startLoc = this.state.startLoc, node = this.parseIdentifier();
              return this.flowParseGenericType(startPos, startLoc, node);
            }
            return this.flowParseType();
          }
          flowParseTypeAnnotation() {
            const node = this.startNode();
            return node.typeAnnotation = this.flowParseTypeInitialiser(), this.finishNode(node, "TypeAnnotation");
          }
          flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {
            const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();
            return this.match(14) && (ident.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(ident)), ident;
          }
          typeCastToParameter(node) {
            return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
          }
          flowParseVariance() {
            let variance = null;
            return this.match(53) ? (variance = this.startNode(), "+" === this.state.value ? variance.kind = "plus" : variance.kind = "minus", this.next(), this.finishNode(variance, "Variance")) : variance;
          }
          parseFunctionBody(node, allowExpressionBody, isMethod = false) {
            return allowExpressionBody ? this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod)) : super.parseFunctionBody(node, false, isMethod);
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            if (this.match(14)) {
              const typeNode = this.startNode();
              [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, "TypeAnnotation") : null;
            }
            return super.parseFunctionBodyAndFinish(node, type, isMethod);
          }
          parseStatement(context, topLevel) {
            if (this.state.strict && this.isContextual(125)) {
              if (tokenIsKeywordOrIdentifier(this.lookahead().type)) {
                const node = this.startNode();
                return this.next(), this.flowParseInterface(node);
              }
            } else if (this.shouldParseEnums() && this.isContextual(122)) {
              const node = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(node);
            }
            const stmt = super.parseStatement(context, topLevel);
            return void 0 !== this.flowPragma || this.isValidDirective(stmt) || (this.flowPragma = null), stmt;
          }
          parseExpressionStatement(node, expr) {
            if ("Identifier" === expr.type) {
              if ("declare" === expr.name) {
                if (this.match(80) || tokenIsIdentifier(this.state.type) || this.match(68) || this.match(74) || this.match(82))
                  return this.flowParseDeclare(node);
              } else if (tokenIsIdentifier(this.state.type)) {
                if ("interface" === expr.name)
                  return this.flowParseInterface(node);
                if ("type" === expr.name)
                  return this.flowParseTypeAlias(node);
                if ("opaque" === expr.name)
                  return this.flowParseOpaqueType(node, false);
              }
            }
            return super.parseExpressionStatement(node, expr);
          }
          shouldParseExportDeclaration() {
            const { type } = this.state;
            return tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && 122 === type ? !this.state.containsEsc : super.shouldParseExportDeclaration();
          }
          isExportDefaultSpecifier() {
            const { type } = this.state;
            return tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && 122 === type ? this.state.containsEsc : super.isExportDefaultSpecifier();
          }
          parseExportDefaultExpression() {
            if (this.shouldParseEnums() && this.isContextual(122)) {
              const node = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(node);
            }
            return super.parseExportDefaultExpression();
          }
          parseConditional(expr, startPos, startLoc, refExpressionErrors) {
            if (!this.match(17))
              return expr;
            if (this.state.maybeInArrowParameters) {
              const nextCh = this.lookaheadCharCode();
              if (44 === nextCh || 61 === nextCh || 58 === nextCh || 41 === nextCh)
                return this.setOptionalParametersError(refExpressionErrors), expr;
            }
            this.expect(17);
            const state = this.state.clone(), originalNoArrowAt = this.state.noArrowAt, node = this.startNodeAt(startPos, startLoc);
            let { consequent, failed } = this.tryParseConditionalConsequent(), [valid, invalid] = this.getArrowLikeExpressions(consequent);
            if (failed || invalid.length > 0) {
              const noArrowAt = [...originalNoArrowAt];
              if (invalid.length > 0) {
                this.state = state, this.state.noArrowAt = noArrowAt;
                for (let i = 0; i < invalid.length; i++)
                  noArrowAt.push(invalid[i].start);
                ({ consequent, failed } = this.tryParseConditionalConsequent()), [valid, invalid] = this.getArrowLikeExpressions(consequent);
              }
              failed && valid.length > 1 && this.raise(FlowErrors.AmbiguousConditionalArrow, { at: state.startLoc }), failed && 1 === valid.length && (this.state = state, noArrowAt.push(valid[0].start), this.state.noArrowAt = noArrowAt, { consequent, failed } = this.tryParseConditionalConsequent());
            }
            return this.getArrowLikeExpressions(consequent, true), this.state.noArrowAt = originalNoArrowAt, this.expect(14), node.test = expr, node.consequent = consequent, node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(void 0, void 0)), this.finishNode(node, "ConditionalExpression");
          }
          tryParseConditionalConsequent() {
            this.state.noArrowParamsConversionAt.push(this.state.start);
            const consequent = this.parseMaybeAssignAllowIn(), failed = !this.match(14);
            return this.state.noArrowParamsConversionAt.pop(), { consequent, failed };
          }
          getArrowLikeExpressions(node, disallowInvalid) {
            const stack = [node], arrows = [];
            for (; 0 !== stack.length; ) {
              const node2 = stack.pop();
              "ArrowFunctionExpression" === node2.type ? (node2.typeParameters || !node2.returnType ? this.finishArrowValidation(node2) : arrows.push(node2), stack.push(node2.body)) : "ConditionalExpression" === node2.type && (stack.push(node2.consequent), stack.push(node2.alternate));
            }
            return disallowInvalid ? (arrows.forEach((node2) => this.finishArrowValidation(node2)), [arrows, []]) : function(list, test) {
              const list1 = [], list2 = [];
              for (let i = 0; i < list.length; i++)
                (test(list[i], i, list) ? list1 : list2).push(list[i]);
              return [list1, list2];
            }(arrows, (node2) => node2.params.every((param) => this.isAssignable(param, true)));
          }
          finishArrowValidation(node) {
            var _node$extra;
            this.toAssignableList(node.params, null == (_node$extra = node.extra) ? void 0 : _node$extra.trailingCommaLoc, false), this.scope.enter(6), super.checkParams(node, false, true), this.scope.exit();
          }
          forwardNoArrowParamsConversionAt(node, parse4) {
            let result;
            return -1 !== this.state.noArrowParamsConversionAt.indexOf(node.start) ? (this.state.noArrowParamsConversionAt.push(this.state.start), result = parse4(), this.state.noArrowParamsConversionAt.pop()) : result = parse4(), result;
          }
          parseParenItem(node, startPos, startLoc) {
            if (node = super.parseParenItem(node, startPos, startLoc), this.eat(17) && (node.optional = true, this.resetEndLocation(node)), this.match(14)) {
              const typeCastNode = this.startNodeAt(startPos, startLoc);
              return typeCastNode.expression = node, typeCastNode.typeAnnotation = this.flowParseTypeAnnotation(), this.finishNode(typeCastNode, "TypeCastExpression");
            }
            return node;
          }
          assertModuleNodeAllowed(node) {
            "ImportDeclaration" === node.type && ("type" === node.importKind || "typeof" === node.importKind) || "ExportNamedDeclaration" === node.type && "type" === node.exportKind || "ExportAllDeclaration" === node.type && "type" === node.exportKind || super.assertModuleNodeAllowed(node);
          }
          parseExport(node) {
            const decl = super.parseExport(node);
            return "ExportNamedDeclaration" !== decl.type && "ExportAllDeclaration" !== decl.type || (decl.exportKind = decl.exportKind || "value"), decl;
          }
          parseExportDeclaration(node) {
            if (this.isContextual(126)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.match(5) ? (node.specifiers = this.parseExportSpecifiers(true), super.parseExportFrom(node), null) : this.flowParseTypeAlias(declarationNode);
            }
            if (this.isContextual(127)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseOpaqueType(declarationNode, false);
            }
            if (this.isContextual(125)) {
              node.exportKind = "type";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseInterface(declarationNode);
            }
            if (this.shouldParseEnums() && this.isContextual(122)) {
              node.exportKind = "value";
              const declarationNode = this.startNode();
              return this.next(), this.flowParseEnumDeclaration(declarationNode);
            }
            return super.parseExportDeclaration(node);
          }
          eatExportStar(node) {
            return !!super.eatExportStar(node) || !(!this.isContextual(126) || 55 !== this.lookahead().type) && (node.exportKind = "type", this.next(), this.next(), true);
          }
          maybeParseExportNamespaceSpecifier(node) {
            const { startLoc } = this.state, hasNamespace = super.maybeParseExportNamespaceSpecifier(node);
            return hasNamespace && "type" === node.exportKind && this.unexpected(startLoc), hasNamespace;
          }
          parseClassId(node, isStatement, optionalId) {
            super.parseClassId(node, isStatement, optionalId), this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration());
          }
          parseClassMember(classBody, member, state) {
            const { startLoc } = this.state;
            if (this.isContextual(121)) {
              if (super.parseClassMemberFromModifier(classBody, member))
                return;
              member.declare = true;
            }
            super.parseClassMember(classBody, member, state), member.declare && ("ClassProperty" !== member.type && "ClassPrivateProperty" !== member.type && "PropertyDefinition" !== member.type ? this.raise(FlowErrors.DeclareClassElement, { at: startLoc }) : member.value && this.raise(FlowErrors.DeclareClassFieldInitializer, { at: member.value }));
          }
          isIterator(word) {
            return "iterator" === word || "asyncIterator" === word;
          }
          readIterator() {
            const word = super.readWord1(), fullWord = "@@" + word;
            this.isIterator(word) && this.state.inType || this.raise(Errors.InvalidIdentifier, { at: this.state.curPosition(), identifierName: fullWord }), this.finishToken(128, fullWord);
          }
          getTokenFromCode(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            return 123 === code && 124 === next ? this.finishOp(6, 2) : !this.state.inType || 62 !== code && 60 !== code ? this.state.inType && 63 === code ? 46 === next ? this.finishOp(18, 2) : this.finishOp(17, 1) : function(current2, next2, next22) {
              return 64 === current2 && 64 === next2 && isIdentifierStart2(next22);
            }(code, next, this.input.charCodeAt(this.state.pos + 2)) ? (this.state.pos += 2, this.readIterator()) : super.getTokenFromCode(code) : this.finishOp(62 === code ? 48 : 47, 1);
          }
          isAssignable(node, isBinding) {
            return "TypeCastExpression" === node.type ? this.isAssignable(node.expression, isBinding) : super.isAssignable(node, isBinding);
          }
          toAssignable(node, isLHS = false) {
            isLHS || "AssignmentExpression" !== node.type || "TypeCastExpression" !== node.left.type || (node.left = this.typeCastToParameter(node.left)), super.toAssignable(node, isLHS);
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            for (let i = 0; i < exprList.length; i++) {
              const expr = exprList[i];
              "TypeCastExpression" === (null == expr ? void 0 : expr.type) && (exprList[i] = this.typeCastToParameter(expr));
            }
            super.toAssignableList(exprList, trailingCommaLoc, isLHS);
          }
          toReferencedList(exprList, isParenthesizedExpr) {
            for (let i = 0; i < exprList.length; i++) {
              var _expr$extra;
              const expr = exprList[i];
              !expr || "TypeCastExpression" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized || !(exprList.length > 1) && isParenthesizedExpr || this.raise(FlowErrors.TypeCastInPattern, { at: expr.typeAnnotation });
            }
            return exprList;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
            return canBePattern && !this.state.maybeInArrowParameters && this.toReferencedList(node.elements), node;
          }
          isValidLVal(type, isParenthesized, binding) {
            return "TypeCastExpression" === type || super.isValidLVal(type, isParenthesized, binding);
          }
          parseClassProperty(node) {
            return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassProperty(node);
          }
          parseClassPrivateProperty(node) {
            return this.match(14) && (node.typeAnnotation = this.flowParseTypeAnnotation()), super.parseClassPrivateProperty(node);
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod();
          }
          isClassProperty() {
            return this.match(14) || super.isClassProperty();
          }
          isNonstaticConstructor(method) {
            return !this.match(14) && super.isNonstaticConstructor(method);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            if (method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper), method.params && isConstructor) {
              const params = method.params;
              params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });
            } else if ("MethodDefinition" === method.type && isConstructor && method.value.params) {
              const params = method.value.params;
              params.length > 0 && this.isThisParam(params[0]) && this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });
            }
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            method.variance && this.unexpected(method.variance.loc.start), delete method.variance, this.match(47) && (method.typeParameters = this.flowParseTypeParameterDeclaration()), super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
          }
          parseClassSuper(node) {
            if (super.parseClassSuper(node), node.superClass && this.match(47) && (node.superTypeParameters = this.flowParseTypeParameterInstantiation()), this.isContextual(110)) {
              this.next();
              const implemented = node.implements = [];
              do {
                const node2 = this.startNode();
                node2.id = this.flowParseRestrictedIdentifier(true), this.match(47) ? node2.typeParameters = this.flowParseTypeParameterInstantiation() : node2.typeParameters = null, implemented.push(this.finishNode(node2, "ClassImplements"));
              } while (this.eat(12));
            }
          }
          checkGetterSetterParams(method) {
            super.checkGetterSetterParams(method);
            const params = this.getObjectOrClassMethodParams(method);
            if (params.length > 0) {
              const param = params[0];
              this.isThisParam(param) && "get" === method.kind ? this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param }) : this.isThisParam(param) && this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });
            }
          }
          parsePropertyNamePrefixOperator(node) {
            node.variance = this.flowParseVariance();
          }
          parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            let typeParameters;
            prop.variance && this.unexpected(prop.variance.loc.start), delete prop.variance, this.match(47) && !isAccessor && (typeParameters = this.flowParseTypeParameterDeclaration(), this.match(10) || this.unexpected());
            const result = super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
            return typeParameters && ((result.value || result).typeParameters = typeParameters), result;
          }
          parseAssignableListItemTypes(param) {
            return this.eat(17) && ("Identifier" !== param.type && this.raise(FlowErrors.PatternIsOptional, { at: param }), this.isThisParam(param) && this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param }), param.optional = true), this.match(14) ? param.typeAnnotation = this.flowParseTypeAnnotation() : this.isThisParam(param) && this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param }), this.match(29) && this.isThisParam(param) && this.raise(FlowErrors.ThisParamNoDefault, { at: param }), this.resetEndLocation(param), param;
          }
          parseMaybeDefault(startPos, startLoc, left) {
            const node = super.parseMaybeDefault(startPos, startLoc, left);
            return "AssignmentPattern" === node.type && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(FlowErrors.TypeBeforeInitializer, { at: node.typeAnnotation }), node;
          }
          shouldParseDefaultImport(node) {
            return hasTypeImportKind(node) ? isMaybeDefaultImport(this.state.type) : super.shouldParseDefaultImport(node);
          }
          parseImportSpecifierLocal(node, specifier, type) {
            specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type));
          }
          maybeParseDefaultImportSpecifier(node) {
            node.importKind = "value";
            let kind = null;
            if (this.match(87) ? kind = "typeof" : this.isContextual(126) && (kind = "type"), kind) {
              const lh = this.lookahead(), { type } = lh;
              "type" === kind && 55 === type && this.unexpected(null, lh.type), (isMaybeDefaultImport(type) || 5 === type || 55 === type) && (this.next(), node.importKind = kind);
            }
            return super.maybeParseDefaultImportSpecifier(node);
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            const firstIdent = specifier.imported;
            let specifierTypeKind = null;
            "Identifier" === firstIdent.type && ("type" === firstIdent.name ? specifierTypeKind = "type" : "typeof" === firstIdent.name && (specifierTypeKind = "typeof"));
            let isBinding = false;
            if (this.isContextual(93) && !this.isLookaheadContextual("as")) {
              const as_ident = this.parseIdentifier(true);
              null === specifierTypeKind || tokenIsKeywordOrIdentifier(this.state.type) ? (specifier.imported = firstIdent, specifier.importKind = null, specifier.local = this.parseIdentifier()) : (specifier.imported = as_ident, specifier.importKind = specifierTypeKind, specifier.local = cloneIdentifier(as_ident));
            } else {
              if (null !== specifierTypeKind && tokenIsKeywordOrIdentifier(this.state.type))
                specifier.imported = this.parseIdentifier(true), specifier.importKind = specifierTypeKind;
              else {
                if (importedIsString)
                  throw this.raise(Errors.ImportBindingIsString, { at: specifier, importName: firstIdent.value });
                specifier.imported = firstIdent, specifier.importKind = null;
              }
              this.eatContextual(93) ? specifier.local = this.parseIdentifier() : (isBinding = true, specifier.local = cloneIdentifier(specifier.imported));
            }
            const specifierIsTypeImport = hasTypeImportKind(specifier);
            return isInTypeOnlyImport && specifierIsTypeImport && this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, { at: specifier }), (isInTypeOnlyImport || specifierIsTypeImport) && this.checkReservedType(specifier.local.name, specifier.local.loc.start, true), !isBinding || isInTypeOnlyImport || specifierIsTypeImport || this.checkReservedWord(specifier.local.name, specifier.loc.start, true, true), this.finishImportSpecifier(specifier, "ImportSpecifier");
          }
          parseBindingAtom() {
            return 78 === this.state.type ? this.parseIdentifier(true) : super.parseBindingAtom();
          }
          parseFunctionParams(node, allowModifiers) {
            const kind = node.kind;
            "get" !== kind && "set" !== kind && this.match(47) && (node.typeParameters = this.flowParseTypeParameterDeclaration()), super.parseFunctionParams(node, allowModifiers);
          }
          parseVarId(decl, kind) {
            super.parseVarId(decl, kind), this.match(14) && (decl.id.typeAnnotation = this.flowParseTypeAnnotation(), this.resetEndLocation(decl.id));
          }
          parseAsyncArrowFromCallExpression(node, call) {
            if (this.match(14)) {
              const oldNoAnonFunctionType = this.state.noAnonFunctionType;
              this.state.noAnonFunctionType = true, node.returnType = this.flowParseTypeAnnotation(), this.state.noAnonFunctionType = oldNoAnonFunctionType;
            }
            return super.parseAsyncArrowFromCallExpression(node, call);
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            var _jsx;
            let jsx, state = null;
            if (this.hasPlugin("jsx") && (this.match(138) || this.match(47))) {
              if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error)
                return jsx.node;
              const { context } = this.state, currentContext = context[context.length - 1];
              currentContext !== types2.j_oTag && currentContext !== types2.j_expr || context.pop();
            }
            if (null != (_jsx = jsx) && _jsx.error || this.match(47)) {
              var _jsx2, _jsx3;
              let typeParameters;
              state = state || this.state.clone();
              const arrow = this.tryParse((abort) => {
                var _arrowExpression$extr;
                typeParameters = this.flowParseTypeParameterDeclaration();
                const arrowExpression2 = this.forwardNoArrowParamsConversionAt(typeParameters, () => {
                  const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
                  return this.resetStartLocationFromNode(result, typeParameters), result;
                });
                null != (_arrowExpression$extr = arrowExpression2.extra) && _arrowExpression$extr.parenthesized && abort();
                const expr = this.maybeUnwrapTypeCastExpression(arrowExpression2);
                return "ArrowFunctionExpression" !== expr.type && abort(), expr.typeParameters = typeParameters, this.resetStartLocationFromNode(expr, typeParameters), arrowExpression2;
              }, state);
              let arrowExpression = null;
              if (arrow.node && "ArrowFunctionExpression" === this.maybeUnwrapTypeCastExpression(arrow.node).type) {
                if (!arrow.error && !arrow.aborted)
                  return arrow.node.async && this.raise(FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction, { at: typeParameters }), arrow.node;
                arrowExpression = arrow.node;
              }
              if (null != (_jsx2 = jsx) && _jsx2.node)
                return this.state = jsx.failState, jsx.node;
              if (arrowExpression)
                return this.state = arrow.failState, arrowExpression;
              if (null != (_jsx3 = jsx) && _jsx3.thrown)
                throw jsx.error;
              if (arrow.thrown)
                throw arrow.error;
              throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, { at: typeParameters });
            }
            return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
          }
          parseArrow(node) {
            if (this.match(14)) {
              const result = this.tryParse(() => {
                const oldNoAnonFunctionType = this.state.noAnonFunctionType;
                this.state.noAnonFunctionType = true;
                const typeNode = this.startNode();
                return [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser(), this.state.noAnonFunctionType = oldNoAnonFunctionType, this.canInsertSemicolon() && this.unexpected(), this.match(19) || this.unexpected(), typeNode;
              });
              if (result.thrown)
                return null;
              result.error && (this.state = result.failState), node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, "TypeAnnotation") : null;
            }
            return super.parseArrow(node);
          }
          shouldParseArrow(params) {
            return this.match(14) || super.shouldParseArrow(params);
          }
          setArrowFunctionParameters(node, params) {
            -1 !== this.state.noArrowParamsConversionAt.indexOf(node.start) ? node.params = params : super.setArrowFunctionParameters(node, params);
          }
          checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
            if (!isArrowFunction || -1 === this.state.noArrowParamsConversionAt.indexOf(node.start)) {
              for (let i = 0; i < node.params.length; i++)
                this.isThisParam(node.params[i]) && i > 0 && this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });
              return super.checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged);
            }
          }
          parseParenAndDistinguishExpression(canBeArrow) {
            return super.parseParenAndDistinguishExpression(canBeArrow && -1 === this.state.noArrowAt.indexOf(this.state.start));
          }
          parseSubscripts(base, startPos, startLoc, noCalls) {
            if ("Identifier" === base.type && "async" === base.name && -1 !== this.state.noArrowAt.indexOf(startPos)) {
              this.next();
              const node = this.startNodeAt(startPos, startLoc);
              node.callee = base, node.arguments = super.parseCallExpressionArguments(11, false), base = this.finishNode(node, "CallExpression");
            } else if ("Identifier" === base.type && "async" === base.name && this.match(47)) {
              const state = this.state.clone(), arrow = this.tryParse((abort) => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);
              if (!arrow.error && !arrow.aborted)
                return arrow.node;
              const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);
              if (result.node && !result.error)
                return result.node;
              if (arrow.node)
                return this.state = arrow.failState, arrow.node;
              if (result.node)
                return this.state = result.failState, result.node;
              throw arrow.error || result.error;
            }
            return super.parseSubscripts(base, startPos, startLoc, noCalls);
          }
          parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {
            if (this.match(18) && this.isLookaheadToken_lt()) {
              if (subscriptState.optionalChainMember = true, noCalls)
                return subscriptState.stop = true, base;
              this.next();
              const node = this.startNodeAt(startPos, startLoc);
              return node.callee = base, node.typeArguments = this.flowParseTypeParameterInstantiation(), this.expect(10), node.arguments = this.parseCallExpressionArguments(11, false), node.optional = true, this.finishCallExpression(node, true);
            }
            if (!noCalls && this.shouldParseTypes() && this.match(47)) {
              const node = this.startNodeAt(startPos, startLoc);
              node.callee = base;
              const result = this.tryParse(() => (node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew(), this.expect(10), node.arguments = super.parseCallExpressionArguments(11, false), subscriptState.optionalChainMember && (node.optional = false), this.finishCallExpression(node, subscriptState.optionalChainMember)));
              if (result.node)
                return result.error && (this.state = result.failState), result.node;
            }
            return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);
          }
          parseNewCallee(node) {
            super.parseNewCallee(node);
            let targs = null;
            this.shouldParseTypes() && this.match(47) && (targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node), node.typeArguments = targs;
          }
          parseAsyncArrowWithTypeParameters(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc);
            if (this.parseFunctionParams(node), this.parseArrow(node))
              return super.parseArrowExpression(node, void 0, true);
          }
          readToken_mult_modulo(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (42 === code && 47 === next && this.state.hasFlowComment)
              return this.state.hasFlowComment = false, this.state.pos += 2, void this.nextToken();
            super.readToken_mult_modulo(code);
          }
          readToken_pipe_amp(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            124 !== code || 125 !== next ? super.readToken_pipe_amp(code) : this.finishOp(9, 2);
          }
          parseTopLevel(file, program) {
            const fileNode = super.parseTopLevel(file, program);
            return this.state.hasFlowComment && this.raise(FlowErrors.UnterminatedFlowComment, { at: this.state.curPosition() }), fileNode;
          }
          skipBlockComment() {
            if (this.hasPlugin("flowComments") && this.skipFlowComment()) {
              if (this.state.hasFlowComment)
                throw this.raise(FlowErrors.NestedFlowComment, { at: this.state.startLoc });
              this.hasFlowCommentCompletion();
              const commentSkip = this.skipFlowComment();
              commentSkip && (this.state.pos += commentSkip, this.state.hasFlowComment = true);
            } else {
              if (!this.state.hasFlowComment)
                return super.skipBlockComment();
              {
                const end = this.input.indexOf("*-/", this.state.pos + 2);
                if (-1 === end)
                  throw this.raise(Errors.UnterminatedComment, { at: this.state.curPosition() });
                this.state.pos = end + 2 + 3;
              }
            }
          }
          skipFlowComment() {
            const { pos } = this.state;
            let shiftToFirstNonWhiteSpace = 2;
            for (; [32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace)); )
              shiftToFirstNonWhiteSpace++;
            const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos), ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);
            return 58 === ch2 && 58 === ch3 ? shiftToFirstNonWhiteSpace + 2 : "flow-include" === this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) ? shiftToFirstNonWhiteSpace + 12 : 58 === ch2 && 58 !== ch3 && shiftToFirstNonWhiteSpace;
          }
          hasFlowCommentCompletion() {
            if (-1 === this.input.indexOf("*/", this.state.pos))
              throw this.raise(Errors.UnterminatedComment, { at: this.state.curPosition() });
          }
          flowEnumErrorBooleanMemberNotInitialized(loc, { enumName, memberName }) {
            this.raise(FlowErrors.EnumBooleanMemberNotInitialized, { at: loc, memberName, enumName });
          }
          flowEnumErrorInvalidMemberInitializer(loc, enumContext) {
            return this.raise(enumContext.explicitType ? "symbol" === enumContext.explicitType ? FlowErrors.EnumInvalidMemberInitializerSymbolType : FlowErrors.EnumInvalidMemberInitializerPrimaryType : FlowErrors.EnumInvalidMemberInitializerUnknownType, Object.assign({ at: loc }, enumContext));
          }
          flowEnumErrorNumberMemberNotInitialized(loc, { enumName, memberName }) {
            this.raise(FlowErrors.EnumNumberMemberNotInitialized, { at: loc, enumName, memberName });
          }
          flowEnumErrorStringMemberInconsistentlyInitailized(node, { enumName }) {
            this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, { at: node, enumName });
          }
          flowEnumMemberInit() {
            const startLoc = this.state.startLoc, endOfInit = () => this.match(12) || this.match(8);
            switch (this.state.type) {
              case 130: {
                const literal2 = this.parseNumericLiteral(this.state.value);
                return endOfInit() ? { type: "number", loc: literal2.loc.start, value: literal2 } : { type: "invalid", loc: startLoc };
              }
              case 129: {
                const literal2 = this.parseStringLiteral(this.state.value);
                return endOfInit() ? { type: "string", loc: literal2.loc.start, value: literal2 } : { type: "invalid", loc: startLoc };
              }
              case 85:
              case 86: {
                const literal2 = this.parseBooleanLiteral(this.match(85));
                return endOfInit() ? { type: "boolean", loc: literal2.loc.start, value: literal2 } : { type: "invalid", loc: startLoc };
              }
              default:
                return { type: "invalid", loc: startLoc };
            }
          }
          flowEnumMemberRaw() {
            const loc = this.state.startLoc;
            return { id: this.parseIdentifier(true), init: this.eat(29) ? this.flowEnumMemberInit() : { type: "none", loc } };
          }
          flowEnumCheckExplicitTypeMismatch(loc, context, expectedType) {
            const { explicitType } = context;
            null !== explicitType && explicitType !== expectedType && this.flowEnumErrorInvalidMemberInitializer(loc, context);
          }
          flowEnumMembers({ enumName, explicitType }) {
            const seenNames = /* @__PURE__ */ new Set(), members = { booleanMembers: [], numberMembers: [], stringMembers: [], defaultedMembers: [] };
            let hasUnknownMembers = false;
            for (; !this.match(8); ) {
              if (this.eat(21)) {
                hasUnknownMembers = true;
                break;
              }
              const memberNode = this.startNode(), { id, init } = this.flowEnumMemberRaw(), memberName = id.name;
              if ("" === memberName)
                continue;
              /^[a-z]/.test(memberName) && this.raise(FlowErrors.EnumInvalidMemberName, { at: id, memberName, suggestion: memberName[0].toUpperCase() + memberName.slice(1), enumName }), seenNames.has(memberName) && this.raise(FlowErrors.EnumDuplicateMemberName, { at: id, memberName, enumName }), seenNames.add(memberName);
              const context = { enumName, explicitType, memberName };
              switch (memberNode.id = id, init.type) {
                case "boolean":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "boolean"), memberNode.init = init.value, members.booleanMembers.push(this.finishNode(memberNode, "EnumBooleanMember"));
                  break;
                case "number":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "number"), memberNode.init = init.value, members.numberMembers.push(this.finishNode(memberNode, "EnumNumberMember"));
                  break;
                case "string":
                  this.flowEnumCheckExplicitTypeMismatch(init.loc, context, "string"), memberNode.init = init.value, members.stringMembers.push(this.finishNode(memberNode, "EnumStringMember"));
                  break;
                case "invalid":
                  throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);
                case "none":
                  switch (explicitType) {
                    case "boolean":
                      this.flowEnumErrorBooleanMemberNotInitialized(init.loc, context);
                      break;
                    case "number":
                      this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);
                      break;
                    default:
                      members.defaultedMembers.push(this.finishNode(memberNode, "EnumDefaultedMember"));
                  }
              }
              this.match(8) || this.expect(12);
            }
            return { members, hasUnknownMembers };
          }
          flowEnumStringMembers(initializedMembers, defaultedMembers, { enumName }) {
            if (0 === initializedMembers.length)
              return defaultedMembers;
            if (0 === defaultedMembers.length)
              return initializedMembers;
            if (defaultedMembers.length > initializedMembers.length) {
              for (const member of initializedMembers)
                this.flowEnumErrorStringMemberInconsistentlyInitailized(member, { enumName });
              return defaultedMembers;
            }
            for (const member of defaultedMembers)
              this.flowEnumErrorStringMemberInconsistentlyInitailized(member, { enumName });
            return initializedMembers;
          }
          flowEnumParseExplicitType({ enumName }) {
            if (!this.eatContextual(101))
              return null;
            if (!tokenIsIdentifier(this.state.type))
              throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, { at: this.state.startLoc, enumName });
            const { value } = this.state;
            return this.next(), "boolean" !== value && "number" !== value && "string" !== value && "symbol" !== value && this.raise(FlowErrors.EnumInvalidExplicitType, { at: this.state.startLoc, enumName, invalidEnumType: value }), value;
          }
          flowEnumBody(node, id) {
            const enumName = id.name, nameLoc = id.loc.start, explicitType = this.flowEnumParseExplicitType({ enumName });
            this.expect(5);
            const { members, hasUnknownMembers } = this.flowEnumMembers({ enumName, explicitType });
            switch (node.hasUnknownMembers = hasUnknownMembers, explicitType) {
              case "boolean":
                return node.explicitType = true, node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
              case "number":
                return node.explicitType = true, node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
              case "string":
                return node.explicitType = true, node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
              case "symbol":
                return node.members = members.defaultedMembers, this.expect(8), this.finishNode(node, "EnumSymbolBody");
              default: {
                const empty2 = () => (node.members = [], this.expect(8), this.finishNode(node, "EnumStringBody"));
                node.explicitType = false;
                const boolsLen = members.booleanMembers.length, numsLen = members.numberMembers.length, strsLen = members.stringMembers.length, defaultedLen = members.defaultedMembers.length;
                if (boolsLen || numsLen || strsLen || defaultedLen) {
                  if (boolsLen || numsLen) {
                    if (!numsLen && !strsLen && boolsLen >= defaultedLen) {
                      for (const member of members.defaultedMembers)
                        this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, { enumName, memberName: member.id.name });
                      return node.members = members.booleanMembers, this.expect(8), this.finishNode(node, "EnumBooleanBody");
                    }
                    if (!boolsLen && !strsLen && numsLen >= defaultedLen) {
                      for (const member of members.defaultedMembers)
                        this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, { enumName, memberName: member.id.name });
                      return node.members = members.numberMembers, this.expect(8), this.finishNode(node, "EnumNumberBody");
                    }
                    return this.raise(FlowErrors.EnumInconsistentMemberValues, { at: nameLoc, enumName }), empty2();
                  }
                  return node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, { enumName }), this.expect(8), this.finishNode(node, "EnumStringBody");
                }
                return empty2();
              }
            }
          }
          flowParseEnumDeclaration(node) {
            const id = this.parseIdentifier();
            return node.id = id, node.body = this.flowEnumBody(this.startNode(), id), this.finishNode(node, "EnumDeclaration");
          }
          isLookaheadToken_lt() {
            const next = this.nextTokenStart();
            if (60 === this.input.charCodeAt(next)) {
              const afterNext = this.input.charCodeAt(next + 1);
              return 60 !== afterNext && 61 !== afterNext;
            }
            return false;
          }
          maybeUnwrapTypeCastExpression(node) {
            return "TypeCastExpression" === node.type ? node.expression : node;
          }
        }, typescript: (superClass) => class extends superClass {
          getScopeHandler() {
            return TypeScriptScopeHandler;
          }
          tsIsIdentifier() {
            return tokenIsIdentifier(this.state.type);
          }
          tsTokenCanFollowModifier() {
            return (this.match(0) || this.match(5) || this.match(55) || this.match(21) || this.match(134) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();
          }
          tsNextTokenCanFollowModifier() {
            return this.next(), this.tsTokenCanFollowModifier();
          }
          tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {
            if (!tokenIsIdentifier(this.state.type) && 58 !== this.state.type)
              return;
            const modifier = this.state.value;
            if (-1 !== allowedModifiers.indexOf(modifier)) {
              if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks())
                return;
              if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this)))
                return modifier;
            }
          }
          tsParseModifiers({ modified, allowedModifiers, disallowedModifiers, stopOnStartOfClassStaticBlock, errorTemplate = TSErrors.InvalidModifierOnTypeMember }) {
            const enforceOrder = (loc, modifier, before, after) => {
              modifier === before && modified[after] && this.raise(TSErrors.InvalidModifiersOrder, { at: loc, orderedModifiers: [before, after] });
            }, incompatible = (loc, modifier, mod1, mod2) => {
              (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) && this.raise(TSErrors.IncompatibleModifiers, { at: loc, modifiers: [mod1, mod2] });
            };
            for (; ; ) {
              const { startLoc } = this.state, modifier = this.tsParseModifier(allowedModifiers.concat(null != disallowedModifiers ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);
              if (!modifier)
                break;
              tsIsAccessModifier(modifier) ? modified.accessibility ? this.raise(TSErrors.DuplicateAccessibilityModifier, { at: startLoc, modifier }) : (enforceOrder(startLoc, modifier, modifier, "override"), enforceOrder(startLoc, modifier, modifier, "static"), enforceOrder(startLoc, modifier, modifier, "readonly"), modified.accessibility = modifier) : tsIsVarianceAnnotations(modifier) ? (modified[modifier] && this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier }), modified[modifier] = true, enforceOrder(startLoc, modifier, "in", "out")) : (Object.hasOwnProperty.call(modified, modifier) ? this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier }) : (enforceOrder(startLoc, modifier, "static", "readonly"), enforceOrder(startLoc, modifier, "static", "override"), enforceOrder(startLoc, modifier, "override", "readonly"), enforceOrder(startLoc, modifier, "abstract", "override"), incompatible(startLoc, modifier, "declare", "override"), incompatible(startLoc, modifier, "static", "abstract")), modified[modifier] = true), null != disallowedModifiers && disallowedModifiers.includes(modifier) && this.raise(errorTemplate, { at: startLoc, modifier });
            }
          }
          tsIsListTerminator(kind) {
            switch (kind) {
              case "EnumMembers":
              case "TypeMembers":
                return this.match(8);
              case "HeritageClauseElement":
                return this.match(5);
              case "TupleElementTypes":
                return this.match(3);
              case "TypeParametersOrArguments":
                return this.match(48);
            }
            throw new Error("Unreachable");
          }
          tsParseList(kind, parseElement) {
            const result = [];
            for (; !this.tsIsListTerminator(kind); )
              result.push(parseElement());
            return result;
          }
          tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {
            return function(x) {
              if (null == x)
                throw new Error(`Unexpected ${x} value.`);
              return x;
            }(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));
          }
          tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {
            const result = [];
            let trailingCommaPos = -1;
            for (; !this.tsIsListTerminator(kind); ) {
              trailingCommaPos = -1;
              const element = parseElement();
              if (null == element)
                return;
              if (result.push(element), !this.eat(12)) {
                if (this.tsIsListTerminator(kind))
                  break;
                return void (expectSuccess && this.expect(12));
              }
              trailingCommaPos = this.state.lastTokStart;
            }
            return refTrailingCommaPos && (refTrailingCommaPos.value = trailingCommaPos), result;
          }
          tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {
            skipFirstToken || (bracket ? this.expect(0) : this.expect(47));
            const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);
            return bracket ? this.expect(3) : this.expect(48), result;
          }
          tsParseImportType() {
            const node = this.startNode();
            return this.expect(83), this.expect(10), this.match(129) || this.raise(TSErrors.UnsupportedImportTypeArgument, { at: this.state.startLoc }), node.argument = super.parseExprAtom(), this.expect(11), this.eat(16) && (node.qualifier = this.tsParseEntityName()), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSImportType");
          }
          tsParseEntityName(allowReservedWords = true) {
            let entity = this.parseIdentifier(allowReservedWords);
            for (; this.eat(16); ) {
              const node = this.startNodeAtNode(entity);
              node.left = entity, node.right = this.parseIdentifier(allowReservedWords), entity = this.finishNode(node, "TSQualifiedName");
            }
            return entity;
          }
          tsParseTypeReference() {
            const node = this.startNode();
            return node.typeName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeReference");
          }
          tsParseThisTypePredicate(lhs) {
            this.next();
            const node = this.startNodeAtNode(lhs);
            return node.parameterName = lhs, node.typeAnnotation = this.tsParseTypeAnnotation(false), node.asserts = false, this.finishNode(node, "TSTypePredicate");
          }
          tsParseThisTypeNode() {
            const node = this.startNode();
            return this.next(), this.finishNode(node, "TSThisType");
          }
          tsParseTypeQuery() {
            const node = this.startNode();
            return this.expect(87), this.match(83) ? node.exprName = this.tsParseImportType() : node.exprName = this.tsParseEntityName(), !this.hasPrecedingLineBreak() && this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSTypeQuery");
          }
          tsParseInOutModifiers(node) {
            this.tsParseModifiers({ modified: node, allowedModifiers: ["in", "out"], disallowedModifiers: ["public", "private", "protected", "readonly", "declare", "abstract", "override"], errorTemplate: TSErrors.InvalidModifierOnTypeParameter });
          }
          tsParseNoneModifiers(node) {
            this.tsParseModifiers({ modified: node, allowedModifiers: [], disallowedModifiers: ["in", "out"], errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions });
          }
          tsParseTypeParameter(parseModifiers = this.tsParseNoneModifiers.bind(this)) {
            const node = this.startNode();
            return parseModifiers(node), node.name = this.tsParseTypeParameterName(), node.constraint = this.tsEatThenParseType(81), node.default = this.tsEatThenParseType(29), this.finishNode(node, "TSTypeParameter");
          }
          tsTryParseTypeParameters(parseModifiers) {
            if (this.match(47))
              return this.tsParseTypeParameters(parseModifiers);
          }
          tsParseTypeParameters(parseModifiers) {
            const node = this.startNode();
            this.match(47) || this.match(138) ? this.next() : this.unexpected();
            const refTrailingCommaPos = { value: -1 };
            return node.params = this.tsParseBracketedList("TypeParametersOrArguments", this.tsParseTypeParameter.bind(this, parseModifiers), false, true, refTrailingCommaPos), 0 === node.params.length && this.raise(TSErrors.EmptyTypeParameters, { at: node }), -1 !== refTrailingCommaPos.value && this.addExtra(node, "trailingComma", refTrailingCommaPos.value), this.finishNode(node, "TSTypeParameterDeclaration");
          }
          tsTryNextParseConstantContext() {
            if (75 !== this.lookahead().type)
              return null;
            this.next();
            const typeReference = this.tsParseTypeReference();
            return typeReference.typeParameters && this.raise(TSErrors.CannotFindName, { at: typeReference.typeName, name: "const" }), typeReference;
          }
          tsFillSignature(returnToken, signature) {
            const returnTokenRequired = 19 === returnToken;
            signature.typeParameters = this.tsTryParseTypeParameters(), this.expect(10), signature.parameters = this.tsParseBindingListForSignature(), (returnTokenRequired || this.match(returnToken)) && (signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken));
          }
          tsParseBindingListForSignature() {
            return super.parseBindingList(11, 41).map((pattern) => ("Identifier" !== pattern.type && "RestElement" !== pattern.type && "ObjectPattern" !== pattern.type && "ArrayPattern" !== pattern.type && this.raise(TSErrors.UnsupportedSignatureParameterKind, { at: pattern, type: pattern.type }), pattern));
          }
          tsParseTypeMemberSemicolon() {
            this.eat(12) || this.isLineTerminator() || this.expect(13);
          }
          tsParseSignatureMember(kind, node) {
            return this.tsFillSignature(14, node), this.tsParseTypeMemberSemicolon(), this.finishNode(node, kind);
          }
          tsIsUnambiguouslyIndexSignature() {
            return this.next(), !!tokenIsIdentifier(this.state.type) && (this.next(), this.match(14));
          }
          tsTryParseIndexSignature(node) {
            if (!this.match(0) || !this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))
              return;
            this.expect(0);
            const id = this.parseIdentifier();
            id.typeAnnotation = this.tsParseTypeAnnotation(), this.resetEndLocation(id), this.expect(3), node.parameters = [id];
            const type = this.tsTryParseTypeAnnotation();
            return type && (node.typeAnnotation = type), this.tsParseTypeMemberSemicolon(), this.finishNode(node, "TSIndexSignature");
          }
          tsParsePropertyOrMethodSignature(node, readonly) {
            this.eat(17) && (node.optional = true);
            const nodeAny = node;
            if (this.match(10) || this.match(47)) {
              readonly && this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });
              const method = nodeAny;
              method.kind && this.match(47) && this.raise(TSErrors.AccesorCannotHaveTypeParameters, { at: this.state.curPosition() }), this.tsFillSignature(14, method), this.tsParseTypeMemberSemicolon();
              const paramsKey = "parameters", returnTypeKey = "typeAnnotation";
              if ("get" === method.kind)
                method[paramsKey].length > 0 && (this.raise(Errors.BadGetterArity, { at: this.state.curPosition() }), this.isThisParam(method[paramsKey][0]) && this.raise(TSErrors.AccesorCannotDeclareThisParameter, { at: this.state.curPosition() }));
              else if ("set" === method.kind) {
                if (1 !== method[paramsKey].length)
                  this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });
                else {
                  const firstParameter = method[paramsKey][0];
                  this.isThisParam(firstParameter) && this.raise(TSErrors.AccesorCannotDeclareThisParameter, { at: this.state.curPosition() }), "Identifier" === firstParameter.type && firstParameter.optional && this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, { at: this.state.curPosition() }), "RestElement" === firstParameter.type && this.raise(TSErrors.SetAccesorCannotHaveRestParameter, { at: this.state.curPosition() });
                }
                method[returnTypeKey] && this.raise(TSErrors.SetAccesorCannotHaveReturnType, { at: method[returnTypeKey] });
              } else
                method.kind = "method";
              return this.finishNode(method, "TSMethodSignature");
            }
            {
              const property = nodeAny;
              readonly && (property.readonly = true);
              const type = this.tsTryParseTypeAnnotation();
              return type && (property.typeAnnotation = type), this.tsParseTypeMemberSemicolon(), this.finishNode(property, "TSPropertySignature");
            }
          }
          tsParseTypeMember() {
            const node = this.startNode();
            if (this.match(10) || this.match(47))
              return this.tsParseSignatureMember("TSCallSignatureDeclaration", node);
            if (this.match(77)) {
              const id = this.startNode();
              return this.next(), this.match(10) || this.match(47) ? this.tsParseSignatureMember("TSConstructSignatureDeclaration", node) : (node.key = this.createIdentifier(id, "new"), this.tsParsePropertyOrMethodSignature(node, false));
            }
            this.tsParseModifiers({ modified: node, allowedModifiers: ["readonly"], disallowedModifiers: ["declare", "abstract", "private", "protected", "public", "static", "override"] });
            const idx = this.tsTryParseIndexSignature(node);
            return idx || (super.parsePropertyName(node), node.computed || "Identifier" !== node.key.type || "get" !== node.key.name && "set" !== node.key.name || !this.tsTokenCanFollowModifier() || (node.kind = node.key.name, super.parsePropertyName(node)), this.tsParsePropertyOrMethodSignature(node, !!node.readonly));
          }
          tsParseTypeLiteral() {
            const node = this.startNode();
            return node.members = this.tsParseObjectTypeMembers(), this.finishNode(node, "TSTypeLiteral");
          }
          tsParseObjectTypeMembers() {
            this.expect(5);
            const members = this.tsParseList("TypeMembers", this.tsParseTypeMember.bind(this));
            return this.expect(8), members;
          }
          tsIsStartOfMappedType() {
            return this.next(), this.eat(53) ? this.isContextual(118) : (this.isContextual(118) && this.next(), !!this.match(0) && (this.next(), !!this.tsIsIdentifier() && (this.next(), this.match(58))));
          }
          tsParseMappedTypeParameter() {
            const node = this.startNode();
            return node.name = this.tsParseTypeParameterName(), node.constraint = this.tsExpectThenParseType(58), this.finishNode(node, "TSTypeParameter");
          }
          tsParseMappedType() {
            const node = this.startNode();
            return this.expect(5), this.match(53) ? (node.readonly = this.state.value, this.next(), this.expectContextual(118)) : this.eatContextual(118) && (node.readonly = true), this.expect(0), node.typeParameter = this.tsParseMappedTypeParameter(), node.nameType = this.eatContextual(93) ? this.tsParseType() : null, this.expect(3), this.match(53) ? (node.optional = this.state.value, this.next(), this.expect(17)) : this.eat(17) && (node.optional = true), node.typeAnnotation = this.tsTryParseType(), this.semicolon(), this.expect(8), this.finishNode(node, "TSMappedType");
          }
          tsParseTupleType() {
            const node = this.startNode();
            node.elementTypes = this.tsParseBracketedList("TupleElementTypes", this.tsParseTupleElementType.bind(this), true, false);
            let seenOptionalElement = false, labeledElements = null;
            return node.elementTypes.forEach((elementNode) => {
              const { type } = elementNode;
              !seenOptionalElement || "TSRestType" === type || "TSOptionalType" === type || "TSNamedTupleMember" === type && elementNode.optional || this.raise(TSErrors.OptionalTypeBeforeRequired, { at: elementNode }), seenOptionalElement || (seenOptionalElement = "TSNamedTupleMember" === type && elementNode.optional || "TSOptionalType" === type);
              let checkType = type;
              "TSRestType" === type && (checkType = (elementNode = elementNode.typeAnnotation).type);
              const isLabeled = "TSNamedTupleMember" === checkType;
              null != labeledElements || (labeledElements = isLabeled), labeledElements !== isLabeled && this.raise(TSErrors.MixedLabeledAndUnlabeledElements, { at: elementNode });
            }), this.finishNode(node, "TSTupleType");
          }
          tsParseTupleElementType() {
            const { start: startPos, startLoc } = this.state, rest = this.eat(21);
            let type = this.tsParseType();
            const optional = this.eat(17);
            if (this.eat(14)) {
              const labeledNode = this.startNodeAtNode(type);
              labeledNode.optional = optional, "TSTypeReference" !== type.type || type.typeParameters || "Identifier" !== type.typeName.type ? (this.raise(TSErrors.InvalidTupleMemberLabel, { at: type }), labeledNode.label = type) : labeledNode.label = type.typeName, labeledNode.elementType = this.tsParseType(), type = this.finishNode(labeledNode, "TSNamedTupleMember");
            } else if (optional) {
              const optionalTypeNode = this.startNodeAtNode(type);
              optionalTypeNode.typeAnnotation = type, type = this.finishNode(optionalTypeNode, "TSOptionalType");
            }
            if (rest) {
              const restNode = this.startNodeAt(startPos, startLoc);
              restNode.typeAnnotation = type, type = this.finishNode(restNode, "TSRestType");
            }
            return type;
          }
          tsParseParenthesizedType() {
            const node = this.startNode();
            return this.expect(10), node.typeAnnotation = this.tsParseType(), this.expect(11), this.finishNode(node, "TSParenthesizedType");
          }
          tsParseFunctionOrConstructorType(type, abstract) {
            const node = this.startNode();
            return "TSConstructorType" === type && (node.abstract = !!abstract, abstract && this.next(), this.next()), this.tsInAllowConditionalTypesContext(() => this.tsFillSignature(19, node)), this.finishNode(node, type);
          }
          tsParseLiteralTypeNode() {
            const node = this.startNode();
            return node.literal = (() => {
              switch (this.state.type) {
                case 130:
                case 131:
                case 129:
                case 85:
                case 86:
                  return super.parseExprAtom();
                default:
                  throw this.unexpected();
              }
            })(), this.finishNode(node, "TSLiteralType");
          }
          tsParseTemplateLiteralType() {
            const node = this.startNode();
            return node.literal = super.parseTemplate(false), this.finishNode(node, "TSLiteralType");
          }
          parseTemplateSubstitution() {
            return this.state.inType ? this.tsParseType() : super.parseTemplateSubstitution();
          }
          tsParseThisTypeOrThisTypePredicate() {
            const thisKeyword = this.tsParseThisTypeNode();
            return this.isContextual(113) && !this.hasPrecedingLineBreak() ? this.tsParseThisTypePredicate(thisKeyword) : thisKeyword;
          }
          tsParseNonArrayType() {
            switch (this.state.type) {
              case 129:
              case 130:
              case 131:
              case 85:
              case 86:
                return this.tsParseLiteralTypeNode();
              case 53:
                if ("-" === this.state.value) {
                  const node = this.startNode(), nextToken = this.lookahead();
                  if (130 !== nextToken.type && 131 !== nextToken.type)
                    throw this.unexpected();
                  return node.literal = this.parseMaybeUnary(), this.finishNode(node, "TSLiteralType");
                }
                break;
              case 78:
                return this.tsParseThisTypeOrThisTypePredicate();
              case 87:
                return this.tsParseTypeQuery();
              case 83:
                return this.tsParseImportType();
              case 5:
                return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();
              case 0:
                return this.tsParseTupleType();
              case 10:
                return this.tsParseParenthesizedType();
              case 25:
              case 24:
                return this.tsParseTemplateLiteralType();
              default: {
                const { type } = this.state;
                if (tokenIsIdentifier(type) || 88 === type || 84 === type) {
                  const nodeType = 88 === type ? "TSVoidKeyword" : 84 === type ? "TSNullKeyword" : function(value) {
                    switch (value) {
                      case "any":
                        return "TSAnyKeyword";
                      case "boolean":
                        return "TSBooleanKeyword";
                      case "bigint":
                        return "TSBigIntKeyword";
                      case "never":
                        return "TSNeverKeyword";
                      case "number":
                        return "TSNumberKeyword";
                      case "object":
                        return "TSObjectKeyword";
                      case "string":
                        return "TSStringKeyword";
                      case "symbol":
                        return "TSSymbolKeyword";
                      case "undefined":
                        return "TSUndefinedKeyword";
                      case "unknown":
                        return "TSUnknownKeyword";
                      default:
                        return;
                    }
                  }(this.state.value);
                  if (void 0 !== nodeType && 46 !== this.lookaheadCharCode()) {
                    const node = this.startNode();
                    return this.next(), this.finishNode(node, nodeType);
                  }
                  return this.tsParseTypeReference();
                }
              }
            }
            throw this.unexpected();
          }
          tsParseArrayTypeOrHigher() {
            let type = this.tsParseNonArrayType();
            for (; !this.hasPrecedingLineBreak() && this.eat(0); )
              if (this.match(3)) {
                const node = this.startNodeAtNode(type);
                node.elementType = type, this.expect(3), type = this.finishNode(node, "TSArrayType");
              } else {
                const node = this.startNodeAtNode(type);
                node.objectType = type, node.indexType = this.tsParseType(), this.expect(3), type = this.finishNode(node, "TSIndexedAccessType");
              }
            return type;
          }
          tsParseTypeOperator() {
            const node = this.startNode(), operator = this.state.value;
            return this.next(), node.operator = operator, node.typeAnnotation = this.tsParseTypeOperatorOrHigher(), "readonly" === operator && this.tsCheckTypeAnnotationForReadOnly(node), this.finishNode(node, "TSTypeOperator");
          }
          tsCheckTypeAnnotationForReadOnly(node) {
            switch (node.typeAnnotation.type) {
              case "TSTupleType":
              case "TSArrayType":
                return;
              default:
                this.raise(TSErrors.UnexpectedReadonly, { at: node });
            }
          }
          tsParseInferType() {
            const node = this.startNode();
            this.expectContextual(112);
            const typeParameter = this.startNode();
            return typeParameter.name = this.tsParseTypeParameterName(), typeParameter.constraint = this.tsTryParse(() => this.tsParseConstraintForInferType()), node.typeParameter = this.finishNode(typeParameter, "TSTypeParameter"), this.finishNode(node, "TSInferType");
          }
          tsParseConstraintForInferType() {
            if (this.eat(81)) {
              const constraint = this.tsInDisallowConditionalTypesContext(() => this.tsParseType());
              if (this.state.inDisallowConditionalTypesContext || !this.match(17))
                return constraint;
            }
          }
          tsParseTypeOperatorOrHigher() {
            var token;
            return (token = this.state.type) >= 117 && token <= 119 && !this.state.containsEsc ? this.tsParseTypeOperator() : this.isContextual(112) ? this.tsParseInferType() : this.tsInAllowConditionalTypesContext(() => this.tsParseArrayTypeOrHigher());
          }
          tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {
            const node = this.startNode(), hasLeadingOperator = this.eat(operator), types3 = [];
            do {
              types3.push(parseConstituentType());
            } while (this.eat(operator));
            return 1 !== types3.length || hasLeadingOperator ? (node.types = types3, this.finishNode(node, kind)) : types3[0];
          }
          tsParseIntersectionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSIntersectionType", this.tsParseTypeOperatorOrHigher.bind(this), 45);
          }
          tsParseUnionTypeOrHigher() {
            return this.tsParseUnionOrIntersectionType("TSUnionType", this.tsParseIntersectionTypeOrHigher.bind(this), 43);
          }
          tsIsStartOfFunctionType() {
            return !!this.match(47) || this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));
          }
          tsSkipParameterStart() {
            if (tokenIsIdentifier(this.state.type) || this.match(78))
              return this.next(), true;
            if (this.match(5)) {
              const { errors } = this.state, previousErrorCount = errors.length;
              try {
                return this.parseObjectLike(8, true), errors.length === previousErrorCount;
              } catch (_unused) {
                return false;
              }
            }
            if (this.match(0)) {
              this.next();
              const { errors } = this.state, previousErrorCount = errors.length;
              try {
                return super.parseBindingList(3, 93, true), errors.length === previousErrorCount;
              } catch (_unused2) {
                return false;
              }
            }
            return false;
          }
          tsIsUnambiguouslyStartOfFunctionType() {
            if (this.next(), this.match(11) || this.match(21))
              return true;
            if (this.tsSkipParameterStart()) {
              if (this.match(14) || this.match(12) || this.match(17) || this.match(29))
                return true;
              if (this.match(11) && (this.next(), this.match(19)))
                return true;
            }
            return false;
          }
          tsParseTypeOrTypePredicateAnnotation(returnToken) {
            return this.tsInType(() => {
              const t = this.startNode();
              this.expect(returnToken);
              const node = this.startNode(), asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));
              if (asserts && this.match(78)) {
                let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();
                return "TSThisType" === thisTypePredicate.type ? (node.parameterName = thisTypePredicate, node.asserts = true, node.typeAnnotation = null, thisTypePredicate = this.finishNode(node, "TSTypePredicate")) : (this.resetStartLocationFromNode(thisTypePredicate, node), thisTypePredicate.asserts = true), t.typeAnnotation = thisTypePredicate, this.finishNode(t, "TSTypeAnnotation");
              }
              const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));
              if (!typePredicateVariable)
                return asserts ? (node.parameterName = this.parseIdentifier(), node.asserts = asserts, node.typeAnnotation = null, t.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t, "TSTypeAnnotation")) : this.tsParseTypeAnnotation(false, t);
              const type = this.tsParseTypeAnnotation(false);
              return node.parameterName = typePredicateVariable, node.typeAnnotation = type, node.asserts = asserts, t.typeAnnotation = this.finishNode(node, "TSTypePredicate"), this.finishNode(t, "TSTypeAnnotation");
            });
          }
          tsTryParseTypeOrTypePredicateAnnotation() {
            return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : void 0;
          }
          tsTryParseTypeAnnotation() {
            return this.match(14) ? this.tsParseTypeAnnotation() : void 0;
          }
          tsTryParseType() {
            return this.tsEatThenParseType(14);
          }
          tsParseTypePredicatePrefix() {
            const id = this.parseIdentifier();
            if (this.isContextual(113) && !this.hasPrecedingLineBreak())
              return this.next(), id;
          }
          tsParseTypePredicateAsserts() {
            if (106 !== this.state.type)
              return false;
            const containsEsc = this.state.containsEsc;
            return this.next(), !(!tokenIsIdentifier(this.state.type) && !this.match(78)) && (containsEsc && this.raise(Errors.InvalidEscapedReservedWord, { at: this.state.lastTokStartLoc, reservedWord: "asserts" }), true);
          }
          tsParseTypeAnnotation(eatColon = true, t = this.startNode()) {
            return this.tsInType(() => {
              eatColon && this.expect(14), t.typeAnnotation = this.tsParseType();
            }), this.finishNode(t, "TSTypeAnnotation");
          }
          tsParseType() {
            assert2(this.state.inType);
            const type = this.tsParseNonConditionalType();
            if (this.state.inDisallowConditionalTypesContext || this.hasPrecedingLineBreak() || !this.eat(81))
              return type;
            const node = this.startNodeAtNode(type);
            return node.checkType = type, node.extendsType = this.tsInDisallowConditionalTypesContext(() => this.tsParseNonConditionalType()), this.expect(17), node.trueType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.expect(14), node.falseType = this.tsInAllowConditionalTypesContext(() => this.tsParseType()), this.finishNode(node, "TSConditionalType");
          }
          isAbstractConstructorSignature() {
            return this.isContextual(120) && 77 === this.lookahead().type;
          }
          tsParseNonConditionalType() {
            return this.tsIsStartOfFunctionType() ? this.tsParseFunctionOrConstructorType("TSFunctionType") : this.match(77) ? this.tsParseFunctionOrConstructorType("TSConstructorType") : this.isAbstractConstructorSignature() ? this.tsParseFunctionOrConstructorType("TSConstructorType", true) : this.tsParseUnionTypeOrHigher();
          }
          tsParseTypeAssertion() {
            this.getPluginOption("typescript", "disallowAmbiguousJSXLike") && this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });
            const node = this.startNode(), _const = this.tsTryNextParseConstantContext();
            return node.typeAnnotation = _const || this.tsNextThenParseType(), this.expect(48), node.expression = this.parseMaybeUnary(), this.finishNode(node, "TSTypeAssertion");
          }
          tsParseHeritageClause(token) {
            const originalStartLoc = this.state.startLoc, delimitedList = this.tsParseDelimitedList("HeritageClauseElement", () => {
              const node = this.startNode();
              return node.expression = this.tsParseEntityName(), this.match(47) && (node.typeParameters = this.tsParseTypeArguments()), this.finishNode(node, "TSExpressionWithTypeArguments");
            });
            return delimitedList.length || this.raise(TSErrors.EmptyHeritageClauseType, { at: originalStartLoc, token }), delimitedList;
          }
          tsParseInterfaceDeclaration(node, properties = {}) {
            if (this.hasFollowingLineBreak())
              return null;
            this.expectContextual(125), properties.declare && (node.declare = true), tokenIsIdentifier(this.state.type) ? (node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 130)) : (node.id = null, this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc })), node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this)), this.eat(81) && (node.extends = this.tsParseHeritageClause("extends"));
            const body = this.startNode();
            return body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this)), node.body = this.finishNode(body, "TSInterfaceBody"), this.finishNode(node, "TSInterfaceDeclaration");
          }
          tsParseTypeAliasDeclaration(node) {
            return node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 2), node.typeAnnotation = this.tsInType(() => {
              if (node.typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this)), this.expect(29), this.isContextual(111) && 16 !== this.lookahead().type) {
                const node2 = this.startNode();
                return this.next(), this.finishNode(node2, "TSIntrinsicKeyword");
              }
              return this.tsParseType();
            }), this.semicolon(), this.finishNode(node, "TSTypeAliasDeclaration");
          }
          tsInNoContext(cb) {
            const oldContext = this.state.context;
            this.state.context = [oldContext[0]];
            try {
              return cb();
            } finally {
              this.state.context = oldContext;
            }
          }
          tsInType(cb) {
            const oldInType = this.state.inType;
            this.state.inType = true;
            try {
              return cb();
            } finally {
              this.state.inType = oldInType;
            }
          }
          tsInDisallowConditionalTypesContext(cb) {
            const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
            this.state.inDisallowConditionalTypesContext = true;
            try {
              return cb();
            } finally {
              this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
            }
          }
          tsInAllowConditionalTypesContext(cb) {
            const oldInDisallowConditionalTypesContext = this.state.inDisallowConditionalTypesContext;
            this.state.inDisallowConditionalTypesContext = false;
            try {
              return cb();
            } finally {
              this.state.inDisallowConditionalTypesContext = oldInDisallowConditionalTypesContext;
            }
          }
          tsEatThenParseType(token) {
            return this.match(token) ? this.tsNextThenParseType() : void 0;
          }
          tsExpectThenParseType(token) {
            return this.tsDoThenParseType(() => this.expect(token));
          }
          tsNextThenParseType() {
            return this.tsDoThenParseType(() => this.next());
          }
          tsDoThenParseType(cb) {
            return this.tsInType(() => (cb(), this.tsParseType()));
          }
          tsParseEnumMember() {
            const node = this.startNode();
            return node.id = this.match(129) ? super.parseStringLiteral(this.state.value) : this.parseIdentifier(true), this.eat(29) && (node.initializer = super.parseMaybeAssignAllowIn()), this.finishNode(node, "TSEnumMember");
          }
          tsParseEnumDeclaration(node, properties = {}) {
            return properties.const && (node.const = true), properties.declare && (node.declare = true), this.expectContextual(122), node.id = this.parseIdentifier(), this.checkIdentifier(node.id, node.const ? 779 : 267), this.expect(5), node.members = this.tsParseDelimitedList("EnumMembers", this.tsParseEnumMember.bind(this)), this.expect(8), this.finishNode(node, "TSEnumDeclaration");
          }
          tsParseModuleBlock() {
            const node = this.startNode();
            return this.scope.enter(0), this.expect(5), super.parseBlockOrModuleBlockBody(node.body = [], void 0, true, 8), this.scope.exit(), this.finishNode(node, "TSModuleBlock");
          }
          tsParseModuleOrNamespaceDeclaration(node, nested = false) {
            if (node.id = this.parseIdentifier(), nested || this.checkIdentifier(node.id, 1024), this.eat(16)) {
              const inner = this.startNode();
              this.tsParseModuleOrNamespaceDeclaration(inner, true), node.body = inner;
            } else
              this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit();
            return this.finishNode(node, "TSModuleDeclaration");
          }
          tsParseAmbientExternalModuleDeclaration(node) {
            return this.isContextual(109) ? (node.global = true, node.id = this.parseIdentifier()) : this.match(129) ? node.id = super.parseStringLiteral(this.state.value) : this.unexpected(), this.match(5) ? (this.scope.enter(256), this.prodParam.enter(0), node.body = this.tsParseModuleBlock(), this.prodParam.exit(), this.scope.exit()) : this.semicolon(), this.finishNode(node, "TSModuleDeclaration");
          }
          tsParseImportEqualsDeclaration(node, isExport) {
            node.isExport = isExport || false, node.id = this.parseIdentifier(), this.checkIdentifier(node.id, 9), this.expect(29);
            const moduleReference = this.tsParseModuleReference();
            return "type" === node.importKind && "TSExternalModuleReference" !== moduleReference.type && this.raise(TSErrors.ImportAliasHasImportType, { at: moduleReference }), node.moduleReference = moduleReference, this.semicolon(), this.finishNode(node, "TSImportEqualsDeclaration");
          }
          tsIsExternalModuleReference() {
            return this.isContextual(116) && 40 === this.lookaheadCharCode();
          }
          tsParseModuleReference() {
            return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);
          }
          tsParseExternalModuleReference() {
            const node = this.startNode();
            if (this.expectContextual(116), this.expect(10), !this.match(129))
              throw this.unexpected();
            return node.expression = super.parseExprAtom(), this.expect(11), this.finishNode(node, "TSExternalModuleReference");
          }
          tsLookAhead(f) {
            const state = this.state.clone(), res = f();
            return this.state = state, res;
          }
          tsTryParseAndCatch(f) {
            const result = this.tryParse((abort) => f() || abort());
            if (!result.aborted && result.node)
              return result.error && (this.state = result.failState), result.node;
          }
          tsTryParse(f) {
            const state = this.state.clone(), result = f();
            return void 0 !== result && false !== result ? result : void (this.state = state);
          }
          tsTryParseDeclare(nany) {
            if (this.isLineTerminator())
              return;
            let kind, starttype = this.state.type;
            return this.isContextual(99) && (starttype = 74, kind = "let"), this.tsInAmbientContext(() => {
              if (68 === starttype)
                return nany.declare = true, super.parseFunctionStatement(nany, false, true);
              if (80 === starttype)
                return nany.declare = true, this.parseClass(nany, true, false);
              if (122 === starttype)
                return this.tsParseEnumDeclaration(nany, { declare: true });
              if (109 === starttype)
                return this.tsParseAmbientExternalModuleDeclaration(nany);
              if (75 === starttype || 74 === starttype)
                return this.match(75) && this.isLookaheadContextual("enum") ? (this.expect(75), this.tsParseEnumDeclaration(nany, { const: true, declare: true })) : (nany.declare = true, this.parseVarStatement(nany, kind || this.state.value, true));
              if (125 === starttype) {
                const result = this.tsParseInterfaceDeclaration(nany, { declare: true });
                if (result)
                  return result;
              }
              return tokenIsIdentifier(starttype) ? this.tsParseDeclaration(nany, this.state.value, true) : void 0;
            });
          }
          tsTryParseExportDeclaration() {
            return this.tsParseDeclaration(this.startNode(), this.state.value, true);
          }
          tsParseExpressionStatement(node, expr) {
            switch (expr.name) {
              case "declare": {
                const declaration = this.tsTryParseDeclare(node);
                if (declaration)
                  return declaration.declare = true, declaration;
                break;
              }
              case "global":
                if (this.match(5)) {
                  this.scope.enter(256), this.prodParam.enter(0);
                  const mod = node;
                  return mod.global = true, mod.id = expr, mod.body = this.tsParseModuleBlock(), this.scope.exit(), this.prodParam.exit(), this.finishNode(mod, "TSModuleDeclaration");
                }
                break;
              default:
                return this.tsParseDeclaration(node, expr.name, false);
            }
          }
          tsParseDeclaration(node, value, next) {
            switch (value) {
              case "abstract":
                if (this.tsCheckLineTerminator(next) && (this.match(80) || tokenIsIdentifier(this.state.type)))
                  return this.tsParseAbstractDeclaration(node);
                break;
              case "module":
                if (this.tsCheckLineTerminator(next)) {
                  if (this.match(129))
                    return this.tsParseAmbientExternalModuleDeclaration(node);
                  if (tokenIsIdentifier(this.state.type))
                    return this.tsParseModuleOrNamespaceDeclaration(node);
                }
                break;
              case "namespace":
                if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type))
                  return this.tsParseModuleOrNamespaceDeclaration(node);
                break;
              case "type":
                if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type))
                  return this.tsParseTypeAliasDeclaration(node);
            }
          }
          tsCheckLineTerminator(next) {
            return next ? !this.hasFollowingLineBreak() && (this.next(), true) : !this.isLineTerminator();
          }
          tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {
            if (!this.match(47))
              return;
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            this.state.maybeInArrowParameters = true;
            const res = this.tsTryParseAndCatch(() => {
              const node = this.startNodeAt(startPos, startLoc);
              return node.typeParameters = this.tsParseTypeParameters(), super.parseFunctionParams(node), node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation(), this.expect(19), node;
            });
            return this.state.maybeInArrowParameters = oldMaybeInArrowParameters, res ? super.parseArrowExpression(res, null, true) : void 0;
          }
          tsParseTypeArgumentsInExpression() {
            if (47 === this.reScan_lt())
              return this.tsParseTypeArguments();
          }
          tsParseTypeArguments() {
            const node = this.startNode();
            return node.params = this.tsInType(() => this.tsInNoContext(() => (this.expect(47), this.tsParseDelimitedList("TypeParametersOrArguments", this.tsParseType.bind(this))))), 0 === node.params.length && this.raise(TSErrors.EmptyTypeArguments, { at: node }), this.expect(48), this.finishNode(node, "TSTypeParameterInstantiation");
          }
          tsIsDeclarationStart() {
            return (token = this.state.type) >= 120 && token <= 126;
            var token;
          }
          isExportDefaultSpecifier() {
            return !this.tsIsDeclarationStart() && super.isExportDefaultSpecifier();
          }
          parseAssignableListItem(allowModifiers, decorators) {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            let accessibility, readonly = false, override = false;
            if (void 0 !== allowModifiers) {
              const modified = {};
              this.tsParseModifiers({ modified, allowedModifiers: ["public", "private", "protected", "override", "readonly"] }), accessibility = modified.accessibility, override = modified.override, readonly = modified.readonly, false === allowModifiers && (accessibility || readonly || override) && this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });
            }
            const left = this.parseMaybeDefault();
            this.parseAssignableListItemTypes(left);
            const elt = this.parseMaybeDefault(left.start, left.loc.start, left);
            if (accessibility || readonly || override) {
              const pp2 = this.startNodeAt(startPos, startLoc);
              return decorators.length && (pp2.decorators = decorators), accessibility && (pp2.accessibility = accessibility), readonly && (pp2.readonly = readonly), override && (pp2.override = override), "Identifier" !== elt.type && "AssignmentPattern" !== elt.type && this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp2 }), pp2.parameter = elt, this.finishNode(pp2, "TSParameterProperty");
            }
            return decorators.length && (left.decorators = decorators), elt;
          }
          isSimpleParameter(node) {
            return "TSParameterProperty" === node.type && super.isSimpleParameter(node.parameter) || super.isSimpleParameter(node);
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            this.match(14) && (node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14));
            const bodilessType = "FunctionDeclaration" === type ? "TSDeclareFunction" : "ClassMethod" === type || "ClassPrivateMethod" === type ? "TSDeclareMethod" : void 0;
            return bodilessType && !this.match(5) && this.isLineTerminator() ? this.finishNode(node, bodilessType) : "TSDeclareFunction" === bodilessType && this.state.isAmbientContext && (this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node }), node.declare) ? super.parseFunctionBodyAndFinish(node, bodilessType, isMethod) : super.parseFunctionBodyAndFinish(node, type, isMethod);
          }
          registerFunctionStatementId(node) {
            !node.body && node.id ? this.checkIdentifier(node.id, 1024) : super.registerFunctionStatementId(node);
          }
          tsCheckForInvalidTypeCasts(items) {
            items.forEach((node) => {
              "TSTypeCastExpression" === (null == node ? void 0 : node.type) && this.raise(TSErrors.UnexpectedTypeAnnotation, { at: node.typeAnnotation });
            });
          }
          toReferencedList(exprList, isInParens) {
            return this.tsCheckForInvalidTypeCasts(exprList), exprList;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);
            return "ArrayExpression" === node.type && this.tsCheckForInvalidTypeCasts(node.elements), node;
          }
          parseSubscript(base, startPos, startLoc, noCalls, state) {
            if (!this.hasPrecedingLineBreak() && this.match(35)) {
              this.state.canStartJSXElement = false, this.next();
              const nonNullExpression = this.startNodeAt(startPos, startLoc);
              return nonNullExpression.expression = base, this.finishNode(nonNullExpression, "TSNonNullExpression");
            }
            let isOptionalCall = false;
            if (this.match(18) && 60 === this.lookaheadCharCode()) {
              if (noCalls)
                return state.stop = true, base;
              state.optionalChainMember = isOptionalCall = true, this.next();
            }
            if (this.match(47) || this.match(51)) {
              let missingParenErrorLoc;
              const result = this.tsTryParseAndCatch(() => {
                if (!noCalls && this.atPossibleAsyncArrow(base)) {
                  const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);
                  if (asyncArrowFn)
                    return asyncArrowFn;
                }
                const typeArguments = this.tsParseTypeArgumentsInExpression();
                if (!typeArguments)
                  return;
                if (isOptionalCall && !this.match(10))
                  return void (missingParenErrorLoc = this.state.curPosition());
                if (tokenIsTemplate(this.state.type)) {
                  const result2 = super.parseTaggedTemplateExpression(base, startPos, startLoc, state);
                  return result2.typeParameters = typeArguments, result2;
                }
                if (!noCalls && this.eat(10)) {
                  const node2 = this.startNodeAt(startPos, startLoc);
                  return node2.callee = base, node2.arguments = this.parseCallExpressionArguments(11, false), this.tsCheckForInvalidTypeCasts(node2.arguments), node2.typeParameters = typeArguments, state.optionalChainMember && (node2.optional = isOptionalCall), this.finishCallExpression(node2, state.optionalChainMember);
                }
                const tokenType = this.state.type;
                if (48 === tokenType || 52 === tokenType || 10 !== tokenType && tokenCanStartExpression(tokenType) && !this.hasPrecedingLineBreak())
                  return;
                const node = this.startNodeAt(startPos, startLoc);
                return node.expression = base, node.typeParameters = typeArguments, this.finishNode(node, "TSInstantiationExpression");
              });
              if (missingParenErrorLoc && this.unexpected(missingParenErrorLoc, 10), result)
                return "TSInstantiationExpression" === result.type && (this.match(16) || this.match(18) && 40 !== this.lookaheadCharCode()) && this.raise(TSErrors.InvalidPropertyAccessAfterInstantiationExpression, { at: this.state.startLoc }), result;
            }
            return super.parseSubscript(base, startPos, startLoc, noCalls, state);
          }
          parseNewCallee(node) {
            var _callee$extra;
            super.parseNewCallee(node);
            const { callee } = node;
            "TSInstantiationExpression" !== callee.type || null != (_callee$extra = callee.extra) && _callee$extra.parenthesized || (node.typeParameters = callee.typeParameters, node.callee = callee.expression);
          }
          parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
            if (tokenOperatorPrecedence(58) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(93)) {
              const node = this.startNodeAt(leftStartPos, leftStartLoc);
              node.expression = left;
              const _const = this.tsTryNextParseConstantContext();
              return node.typeAnnotation = _const || this.tsNextThenParseType(), this.finishNode(node, "TSAsExpression"), this.reScan_lt_gt(), this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);
            }
            return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            this.state.isAmbientContext || super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
          checkDuplicateExports() {
          }
          parseImport(node) {
            if (node.importKind = "value", tokenIsIdentifier(this.state.type) || this.match(55) || this.match(5)) {
              let ahead = this.lookahead();
              if (this.isContextual(126) && 12 !== ahead.type && 97 !== ahead.type && 29 !== ahead.type && (node.importKind = "type", this.next(), ahead = this.lookahead()), tokenIsIdentifier(this.state.type) && 29 === ahead.type)
                return this.tsParseImportEqualsDeclaration(node);
            }
            const importNode = super.parseImport(node);
            return "type" === importNode.importKind && importNode.specifiers.length > 1 && "ImportDefaultSpecifier" === importNode.specifiers[0].type && this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, { at: importNode }), importNode;
          }
          parseExport(node) {
            if (this.match(83))
              return this.next(), this.isContextual(126) && 61 !== this.lookaheadCharCode() ? (node.importKind = "type", this.next()) : node.importKind = "value", this.tsParseImportEqualsDeclaration(node, true);
            if (this.eat(29)) {
              const assign = node;
              return assign.expression = super.parseExpression(), this.semicolon(), this.finishNode(assign, "TSExportAssignment");
            }
            if (this.eatContextual(93)) {
              const decl = node;
              return this.expectContextual(124), decl.id = this.parseIdentifier(), this.semicolon(), this.finishNode(decl, "TSNamespaceExportDeclaration");
            }
            return this.isContextual(126) && 5 === this.lookahead().type ? (this.next(), node.exportKind = "type") : node.exportKind = "value", super.parseExport(node);
          }
          isAbstractClass() {
            return this.isContextual(120) && 80 === this.lookahead().type;
          }
          parseExportDefaultExpression() {
            if (this.isAbstractClass()) {
              const cls = this.startNode();
              return this.next(), cls.abstract = true, this.parseClass(cls, true, true);
            }
            if (this.match(125)) {
              const result = this.tsParseInterfaceDeclaration(this.startNode());
              if (result)
                return result;
            }
            return super.parseExportDefaultExpression();
          }
          parseVarStatement(node, kind, allowMissingInitializer = false) {
            const { isAmbientContext } = this.state, declaration = super.parseVarStatement(node, kind, allowMissingInitializer || isAmbientContext);
            if (!isAmbientContext)
              return declaration;
            for (const { id, init } of declaration.declarations)
              init && ("const" !== kind || id.typeAnnotation ? this.raise(TSErrors.InitializerNotAllowedInAmbientContext, { at: init }) : "StringLiteral" !== init.type && "BooleanLiteral" !== init.type && "NumericLiteral" !== init.type && "BigIntLiteral" !== init.type && ("TemplateLiteral" !== init.type || init.expressions.length > 0) && !isPossiblyLiteralEnum(init) && this.raise(TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference, { at: init }));
            return declaration;
          }
          parseStatementContent(context, topLevel) {
            if (this.match(75) && this.isLookaheadContextual("enum")) {
              const node = this.startNode();
              return this.expect(75), this.tsParseEnumDeclaration(node, { const: true });
            }
            if (this.isContextual(122))
              return this.tsParseEnumDeclaration(this.startNode());
            if (this.isContextual(125)) {
              const result = this.tsParseInterfaceDeclaration(this.startNode());
              if (result)
                return result;
            }
            return super.parseStatementContent(context, topLevel);
          }
          parseAccessModifier() {
            return this.tsParseModifier(["public", "protected", "private"]);
          }
          tsHasSomeModifiers(member, modifiers) {
            return modifiers.some((modifier) => tsIsAccessModifier(modifier) ? member.accessibility === modifier : !!member[modifier]);
          }
          tsIsStartOfStaticBlocks() {
            return this.isContextual(104) && 123 === this.lookaheadCharCode();
          }
          parseClassMember(classBody, member, state) {
            const modifiers = ["declare", "private", "public", "protected", "override", "abstract", "readonly", "static"];
            this.tsParseModifiers({ modified: member, allowedModifiers: modifiers, disallowedModifiers: ["in", "out"], stopOnStartOfClassStaticBlock: true, errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions });
            const callParseClassMemberWithIsStatic = () => {
              this.tsIsStartOfStaticBlocks() ? (this.next(), this.next(), this.tsHasSomeModifiers(member, modifiers) && this.raise(TSErrors.StaticBlockCannotHaveModifier, { at: this.state.curPosition() }), super.parseClassStaticBlock(classBody, member)) : this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);
            };
            member.declare ? this.tsInAmbientContext(callParseClassMemberWithIsStatic) : callParseClassMemberWithIsStatic();
          }
          parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
            const idx = this.tsTryParseIndexSignature(member);
            if (idx)
              return classBody.body.push(idx), member.abstract && this.raise(TSErrors.IndexSignatureHasAbstract, { at: member }), member.accessibility && this.raise(TSErrors.IndexSignatureHasAccessibility, { at: member, modifier: member.accessibility }), member.declare && this.raise(TSErrors.IndexSignatureHasDeclare, { at: member }), void (member.override && this.raise(TSErrors.IndexSignatureHasOverride, { at: member }));
            !this.state.inAbstractClass && member.abstract && this.raise(TSErrors.NonAbstractClassHasAbstractMethod, { at: member }), member.override && (state.hadSuperClass || this.raise(TSErrors.OverrideNotInSubClass, { at: member })), super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
          }
          parsePostMemberNameModifiers(methodOrProp) {
            this.eat(17) && (methodOrProp.optional = true), methodOrProp.readonly && this.match(10) && this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp }), methodOrProp.declare && this.match(10) && this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });
          }
          parseExpressionStatement(node, expr) {
            return ("Identifier" === expr.type ? this.tsParseExpressionStatement(node, expr) : void 0) || super.parseExpressionStatement(node, expr);
          }
          shouldParseExportDeclaration() {
            return !!this.tsIsDeclarationStart() || super.shouldParseExportDeclaration();
          }
          parseConditional(expr, startPos, startLoc, refExpressionErrors) {
            if (!this.state.maybeInArrowParameters || !this.match(17))
              return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);
            const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));
            return result.node ? (result.error && (this.state = result.failState), result.node) : (result.error && super.setOptionalParametersError(refExpressionErrors, result.error), expr);
          }
          parseParenItem(node, startPos, startLoc) {
            if (node = super.parseParenItem(node, startPos, startLoc), this.eat(17) && (node.optional = true, this.resetEndLocation(node)), this.match(14)) {
              const typeCastNode = this.startNodeAt(startPos, startLoc);
              return typeCastNode.expression = node, typeCastNode.typeAnnotation = this.tsParseTypeAnnotation(), this.finishNode(typeCastNode, "TSTypeCastExpression");
            }
            return node;
          }
          parseExportDeclaration(node) {
            if (!this.state.isAmbientContext && this.isContextual(121))
              return this.tsInAmbientContext(() => this.parseExportDeclaration(node));
            const startPos = this.state.start, startLoc = this.state.startLoc, isDeclare = this.eatContextual(121);
            if (isDeclare && (this.isContextual(121) || !this.shouldParseExportDeclaration()))
              throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, { at: this.state.startLoc });
            const declaration = tokenIsIdentifier(this.state.type) && this.tsTryParseExportDeclaration() || super.parseExportDeclaration(node);
            return declaration ? (("TSInterfaceDeclaration" === declaration.type || "TSTypeAliasDeclaration" === declaration.type || isDeclare) && (node.exportKind = "type"), isDeclare && (this.resetStartLocation(declaration, startPos, startLoc), declaration.declare = true), declaration) : null;
          }
          parseClassId(node, isStatement, optionalId, bindingType) {
            if ((!isStatement || optionalId) && this.isContextual(110))
              return;
            super.parseClassId(node, isStatement, optionalId, node.declare ? 1024 : 139);
            const typeParameters = this.tsTryParseTypeParameters(this.tsParseInOutModifiers.bind(this));
            typeParameters && (node.typeParameters = typeParameters);
          }
          parseClassPropertyAnnotation(node) {
            !node.optional && this.eat(35) && (node.definite = true);
            const type = this.tsTryParseTypeAnnotation();
            type && (node.typeAnnotation = type);
          }
          parseClassProperty(node) {
            if (this.parseClassPropertyAnnotation(node), this.state.isAmbientContext && (!node.readonly || node.typeAnnotation) && this.match(29) && this.raise(TSErrors.DeclareClassFieldHasInitializer, { at: this.state.startLoc }), node.abstract && this.match(29)) {
              const { key } = node;
              this.raise(TSErrors.AbstractPropertyHasInitializer, { at: this.state.startLoc, propertyName: "Identifier" !== key.type || node.computed ? `[${this.input.slice(key.start, key.end)}]` : key.name });
            }
            return super.parseClassProperty(node);
          }
          parseClassPrivateProperty(node) {
            return node.abstract && this.raise(TSErrors.PrivateElementHasAbstract, { at: node }), node.accessibility && this.raise(TSErrors.PrivateElementHasAccessibility, { at: node, modifier: node.accessibility }), this.parseClassPropertyAnnotation(node), super.parseClassPrivateProperty(node);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            const typeParameters = this.tsTryParseTypeParameters();
            typeParameters && isConstructor && this.raise(TSErrors.ConstructorHasTypeParameters, { at: typeParameters });
            const { declare = false, kind } = method;
            !declare || "get" !== kind && "set" !== kind || this.raise(TSErrors.DeclareAccessor, { at: method, kind }), typeParameters && (method.typeParameters = typeParameters), super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            const typeParameters = this.tsTryParseTypeParameters();
            typeParameters && (method.typeParameters = typeParameters), super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);
          }
          declareClassPrivateMethodInScope(node, kind) {
            "TSDeclareMethod" !== node.type && ("MethodDefinition" !== node.type || node.value.body) && super.declareClassPrivateMethodInScope(node, kind);
          }
          parseClassSuper(node) {
            super.parseClassSuper(node), node.superClass && (this.match(47) || this.match(51)) && (node.superTypeParameters = this.tsParseTypeArgumentsInExpression()), this.eatContextual(110) && (node.implements = this.tsParseHeritageClause("implements"));
          }
          parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            const typeParameters = this.tsTryParseTypeParameters();
            return typeParameters && (prop.typeParameters = typeParameters), super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);
          }
          parseFunctionParams(node, allowModifiers) {
            const typeParameters = this.tsTryParseTypeParameters();
            typeParameters && (node.typeParameters = typeParameters), super.parseFunctionParams(node, allowModifiers);
          }
          parseVarId(decl, kind) {
            super.parseVarId(decl, kind), "Identifier" === decl.id.type && !this.hasPrecedingLineBreak() && this.eat(35) && (decl.definite = true);
            const type = this.tsTryParseTypeAnnotation();
            type && (decl.id.typeAnnotation = type, this.resetEndLocation(decl.id));
          }
          parseAsyncArrowFromCallExpression(node, call) {
            return this.match(14) && (node.returnType = this.tsParseTypeAnnotation()), super.parseAsyncArrowFromCallExpression(node, call);
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;
            let state, jsx, typeCast, typeParameters;
            if (this.hasPlugin("jsx") && (this.match(138) || this.match(47))) {
              if (state = this.state.clone(), jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !jsx.error)
                return jsx.node;
              const { context } = this.state, currentContext = context[context.length - 1];
              currentContext !== types2.j_oTag && currentContext !== types2.j_expr || context.pop();
            }
            if (!(null != (_jsx = jsx) && _jsx.error || this.match(47)))
              return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
            state && state !== this.state || (state = this.state.clone());
            const arrow = this.tryParse((abort) => {
              var _expr$extra, _typeParameters;
              typeParameters = this.tsParseTypeParameters();
              const expr = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);
              return ("ArrowFunctionExpression" !== expr.type || null != (_expr$extra = expr.extra) && _expr$extra.parenthesized) && abort(), 0 !== (null == (_typeParameters = typeParameters) ? void 0 : _typeParameters.params.length) && this.resetStartLocationFromNode(expr, typeParameters), expr.typeParameters = typeParameters, expr;
            }, state);
            if (!arrow.error && !arrow.aborted)
              return typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
            if (!jsx && (assert2(!this.hasPlugin("jsx")), typeCast = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state), !typeCast.error))
              return typeCast.node;
            if (null != (_jsx2 = jsx) && _jsx2.node)
              return this.state = jsx.failState, jsx.node;
            if (arrow.node)
              return this.state = arrow.failState, typeParameters && this.reportReservedArrowTypeParam(typeParameters), arrow.node;
            if (null != (_typeCast = typeCast) && _typeCast.node)
              return this.state = typeCast.failState, typeCast.node;
            if (null != (_jsx3 = jsx) && _jsx3.thrown)
              throw jsx.error;
            if (arrow.thrown)
              throw arrow.error;
            if (null != (_typeCast2 = typeCast) && _typeCast2.thrown)
              throw typeCast.error;
            throw (null == (_jsx4 = jsx) ? void 0 : _jsx4.error) || arrow.error || (null == (_typeCast3 = typeCast) ? void 0 : _typeCast3.error);
          }
          reportReservedArrowTypeParam(node) {
            var _node$extra;
            1 !== node.params.length || null != (_node$extra = node.extra) && _node$extra.trailingComma || !this.getPluginOption("typescript", "disallowAmbiguousJSXLike") || this.raise(TSErrors.ReservedArrowTypeParam, { at: node });
          }
          parseMaybeUnary(refExpressionErrors, sawUnary) {
            return !this.hasPlugin("jsx") && this.match(47) ? this.tsParseTypeAssertion() : super.parseMaybeUnary(refExpressionErrors, sawUnary);
          }
          parseArrow(node) {
            if (this.match(14)) {
              const result = this.tryParse((abort) => {
                const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);
                return !this.canInsertSemicolon() && this.match(19) || abort(), returnType;
              });
              if (result.aborted)
                return;
              result.thrown || (result.error && (this.state = result.failState), node.returnType = result.node);
            }
            return super.parseArrow(node);
          }
          parseAssignableListItemTypes(param) {
            this.eat(17) && ("Identifier" === param.type || this.state.isAmbientContext || this.state.inType || this.raise(TSErrors.PatternIsOptional, { at: param }), param.optional = true);
            const type = this.tsTryParseTypeAnnotation();
            return type && (param.typeAnnotation = type), this.resetEndLocation(param), param;
          }
          isAssignable(node, isBinding) {
            switch (node.type) {
              case "TSTypeCastExpression":
                return this.isAssignable(node.expression, isBinding);
              case "TSParameterProperty":
                return true;
              default:
                return super.isAssignable(node, isBinding);
            }
          }
          toAssignable(node, isLHS = false) {
            switch (node.type) {
              case "ParenthesizedExpression":
                this.toAssignableParenthesizedExpression(node, isLHS);
                break;
              case "TSAsExpression":
              case "TSNonNullExpression":
              case "TSTypeAssertion":
                isLHS ? this.expressionScope.recordArrowParemeterBindingError(TSErrors.UnexpectedTypeCastInParameter, { at: node }) : this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node }), this.toAssignable(node.expression, isLHS);
                break;
              case "AssignmentExpression":
                isLHS || "TSTypeCastExpression" !== node.left.type || (node.left = this.typeCastToParameter(node.left));
              default:
                super.toAssignable(node, isLHS);
            }
          }
          toAssignableParenthesizedExpression(node, isLHS) {
            switch (node.expression.type) {
              case "TSAsExpression":
              case "TSNonNullExpression":
              case "TSTypeAssertion":
              case "ParenthesizedExpression":
                this.toAssignable(node.expression, isLHS);
                break;
              default:
                super.toAssignable(node, isLHS);
            }
          }
          checkToRestConversion(node, allowPattern) {
            switch (node.type) {
              case "TSAsExpression":
              case "TSTypeAssertion":
              case "TSNonNullExpression":
                this.checkToRestConversion(node.expression, false);
                break;
              default:
                super.checkToRestConversion(node, allowPattern);
            }
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            return object = { TSTypeCastExpression: true, TSParameterProperty: "parameter", TSNonNullExpression: "expression", TSAsExpression: (64 !== binding || !isUnparenthesizedInAssign) && ["expression", true], TSTypeAssertion: (64 !== binding || !isUnparenthesizedInAssign) && ["expression", true] }, key = type, Object.hasOwnProperty.call(object, key) && object[key] || super.isValidLVal(type, isUnparenthesizedInAssign, binding);
            var object, key;
          }
          parseBindingAtom() {
            return 78 === this.state.type ? this.parseIdentifier(true) : super.parseBindingAtom();
          }
          parseMaybeDecoratorArguments(expr) {
            if (this.match(47) || this.match(51)) {
              const typeArguments = this.tsParseTypeArgumentsInExpression();
              if (this.match(10)) {
                const call = super.parseMaybeDecoratorArguments(expr);
                return call.typeParameters = typeArguments, call;
              }
              this.unexpected(null, 10);
            }
            return super.parseMaybeDecoratorArguments(expr);
          }
          checkCommaAfterRest(close) {
            return this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close ? (this.next(), false) : super.checkCommaAfterRest(close);
          }
          isClassMethod() {
            return this.match(47) || super.isClassMethod();
          }
          isClassProperty() {
            return this.match(35) || this.match(14) || super.isClassProperty();
          }
          parseMaybeDefault(startPos, startLoc, left) {
            const node = super.parseMaybeDefault(startPos, startLoc, left);
            return "AssignmentPattern" === node.type && node.typeAnnotation && node.right.start < node.typeAnnotation.start && this.raise(TSErrors.TypeAnnotationAfterAssign, { at: node.typeAnnotation }), node;
          }
          getTokenFromCode(code) {
            if (this.state.inType) {
              if (62 === code)
                return this.finishOp(48, 1);
              if (60 === code)
                return this.finishOp(47, 1);
            }
            return super.getTokenFromCode(code);
          }
          reScan_lt_gt() {
            const { type } = this.state;
            47 === type ? (this.state.pos -= 1, this.readToken_lt()) : 48 === type && (this.state.pos -= 1, this.readToken_gt());
          }
          reScan_lt() {
            const { type } = this.state;
            return 51 === type ? (this.state.pos -= 2, this.finishOp(47, 1), 47) : type;
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            for (let i = 0; i < exprList.length; i++) {
              const expr = exprList[i];
              "TSTypeCastExpression" === (null == expr ? void 0 : expr.type) && (exprList[i] = this.typeCastToParameter(expr));
            }
            super.toAssignableList(exprList, trailingCommaLoc, isLHS);
          }
          typeCastToParameter(node) {
            return node.expression.typeAnnotation = node.typeAnnotation, this.resetEndLocation(node.expression, node.typeAnnotation.loc.end), node.expression;
          }
          shouldParseArrow(params) {
            return this.match(14) ? params.every((expr) => this.isAssignable(expr, true)) : super.shouldParseArrow(params);
          }
          shouldParseAsyncArrow() {
            return this.match(14) || super.shouldParseAsyncArrow();
          }
          canHaveLeadingDecorator() {
            return super.canHaveLeadingDecorator() || this.isAbstractClass();
          }
          jsxParseOpeningElementAfterName(node) {
            if (this.match(47) || this.match(51)) {
              const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArgumentsInExpression());
              typeArguments && (node.typeParameters = typeArguments);
            }
            return super.jsxParseOpeningElementAfterName(node);
          }
          getGetterSetterExpectedParamCount(method) {
            const baseCount = super.getGetterSetterExpectedParamCount(method), firstParam = this.getObjectOrClassMethodParams(method)[0];
            return firstParam && this.isThisParam(firstParam) ? baseCount + 1 : baseCount;
          }
          parseCatchClauseParam() {
            const param = super.parseCatchClauseParam(), type = this.tsTryParseTypeAnnotation();
            return type && (param.typeAnnotation = type, this.resetEndLocation(param)), param;
          }
          tsInAmbientContext(cb) {
            const oldIsAmbientContext = this.state.isAmbientContext;
            this.state.isAmbientContext = true;
            try {
              return cb();
            } finally {
              this.state.isAmbientContext = oldIsAmbientContext;
            }
          }
          parseClass(node, isStatement, optionalId) {
            const oldInAbstractClass = this.state.inAbstractClass;
            this.state.inAbstractClass = !!node.abstract;
            try {
              return super.parseClass(node, isStatement, optionalId);
            } finally {
              this.state.inAbstractClass = oldInAbstractClass;
            }
          }
          tsParseAbstractDeclaration(node) {
            if (this.match(80))
              return node.abstract = true, this.parseClass(node, true, false);
            if (this.isContextual(125)) {
              if (!this.hasFollowingLineBreak())
                return node.abstract = true, this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, { at: node }), this.tsParseInterfaceDeclaration(node);
            } else
              this.unexpected(null, 80);
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope) {
            const method = super.parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);
            if (method.abstract) {
              if (this.hasPlugin("estree") ? !!method.value.body : !!method.body) {
                const { key } = method;
                this.raise(TSErrors.AbstractMethodHasImplementation, { at: method, methodName: "Identifier" !== key.type || method.computed ? `[${this.input.slice(key.start, key.end)}]` : key.name });
              }
            }
            return method;
          }
          tsParseTypeParameterName() {
            return this.parseIdentifier().name;
          }
          shouldParseAsAmbientContext() {
            return !!this.getPluginOption("typescript", "dts");
          }
          parse() {
            return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.parse();
          }
          getExpression() {
            return this.shouldParseAsAmbientContext() && (this.state.isAmbientContext = true), super.getExpression();
          }
          parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
            return !isString && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport), this.finishNode(node, "ExportSpecifier")) : (node.exportKind = "value", super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            return !importedIsString && isMaybeTypeOnly ? (this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport), this.finishNode(specifier, "ImportSpecifier")) : (specifier.importKind = "value", super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, isInTypeOnlyImport ? 4098 : 4096));
          }
          parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {
            const leftOfAsKey = isImport ? "imported" : "local", rightOfAsKey = isImport ? "local" : "exported";
            let rightOfAs, leftOfAs = node[leftOfAsKey], hasTypeSpecifier = false, canParseAsKeyword = true;
            const loc = leftOfAs.loc.start;
            if (this.isContextual(93)) {
              const firstAs = this.parseIdentifier();
              if (this.isContextual(93)) {
                const secondAs = this.parseIdentifier();
                tokenIsKeywordOrIdentifier(this.state.type) ? (hasTypeSpecifier = true, leftOfAs = firstAs, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName(), canParseAsKeyword = false) : (rightOfAs = secondAs, canParseAsKeyword = false);
              } else
                tokenIsKeywordOrIdentifier(this.state.type) ? (canParseAsKeyword = false, rightOfAs = isImport ? this.parseIdentifier() : this.parseModuleExportName()) : (hasTypeSpecifier = true, leftOfAs = firstAs);
            } else
              tokenIsKeywordOrIdentifier(this.state.type) && (hasTypeSpecifier = true, isImport ? (leftOfAs = this.parseIdentifier(true), this.isContextual(93) || this.checkReservedWord(leftOfAs.name, leftOfAs.loc.start, true, true)) : leftOfAs = this.parseModuleExportName());
            hasTypeSpecifier && isInTypeOnlyImportExport && this.raise(isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports, { at: loc }), node[leftOfAsKey] = leftOfAs, node[rightOfAsKey] = rightOfAs;
            node[isImport ? "importKind" : "exportKind"] = hasTypeSpecifier ? "type" : "value", canParseAsKeyword && this.eatContextual(93) && (node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName()), node[rightOfAsKey] || (node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey])), isImport && this.checkIdentifier(node[rightOfAsKey], hasTypeSpecifier ? 4098 : 4096);
          }
        }, v8intrinsic: (superClass) => class extends superClass {
          parseV8Intrinsic() {
            if (this.match(54)) {
              const v8IntrinsicStartLoc = this.state.startLoc, node = this.startNode();
              if (this.next(), tokenIsIdentifier(this.state.type)) {
                const name = this.parseIdentifierName(this.state.start), identifier = this.createIdentifier(node, name);
                if (identifier.type = "V8IntrinsicIdentifier", this.match(10))
                  return identifier;
              }
              this.unexpected(v8IntrinsicStartLoc);
            }
          }
          parseExprAtom(refExpressionErrors) {
            return this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors);
          }
        }, placeholders: (superClass) => class extends superClass {
          parsePlaceholder(expectedNode) {
            if (this.match(140)) {
              const node = this.startNode();
              return this.next(), this.assertNoSpace(), node.name = super.parseIdentifier(true), this.assertNoSpace(), this.expect(140), this.finishPlaceholder(node, expectedNode);
            }
          }
          finishPlaceholder(node, expectedNode) {
            const isFinished = !(!node.expectedNode || "Placeholder" !== node.type);
            return node.expectedNode = expectedNode, isFinished ? node : this.finishNode(node, "Placeholder");
          }
          getTokenFromCode(code) {
            return 37 === code && 37 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(140, 2) : super.getTokenFromCode(code);
          }
          parseExprAtom(refExpressionErrors) {
            return this.parsePlaceholder("Expression") || super.parseExprAtom(refExpressionErrors);
          }
          parseIdentifier(liberal) {
            return this.parsePlaceholder("Identifier") || super.parseIdentifier(liberal);
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            void 0 !== word && super.checkReservedWord(word, startLoc, checkKeywords, isBinding);
          }
          parseBindingAtom() {
            return this.parsePlaceholder("Pattern") || super.parseBindingAtom();
          }
          isValidLVal(type, isParenthesized, binding) {
            return "Placeholder" === type || super.isValidLVal(type, isParenthesized, binding);
          }
          toAssignable(node, isLHS) {
            node && "Placeholder" === node.type && "Expression" === node.expectedNode ? node.expectedNode = "Pattern" : super.toAssignable(node, isLHS);
          }
          isLet(context) {
            if (super.isLet(context))
              return true;
            if (!this.isContextual(99))
              return false;
            if (context)
              return false;
            return 140 === this.lookahead().type;
          }
          verifyBreakContinue(node, isBreak) {
            node.label && "Placeholder" === node.label.type || super.verifyBreakContinue(node, isBreak);
          }
          parseExpressionStatement(node, expr) {
            if ("Placeholder" !== expr.type || expr.extra && expr.extra.parenthesized)
              return super.parseExpressionStatement(node, expr);
            if (this.match(14)) {
              const stmt = node;
              return stmt.label = this.finishPlaceholder(expr, "Identifier"), this.next(), stmt.body = super.parseStatement("label"), this.finishNode(stmt, "LabeledStatement");
            }
            return this.semicolon(), node.name = expr.name, this.finishPlaceholder(node, "Statement");
          }
          parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse) {
            return this.parsePlaceholder("BlockStatement") || super.parseBlock(allowDirectives, createNewLexicalScope, afterBlockParse);
          }
          parseFunctionId(requireId) {
            return this.parsePlaceholder("Identifier") || super.parseFunctionId(requireId);
          }
          parseClass(node, isStatement, optionalId) {
            const type = isStatement ? "ClassDeclaration" : "ClassExpression";
            this.next(), this.takeDecorators(node);
            const oldStrict = this.state.strict, placeholder = this.parsePlaceholder("Identifier");
            if (placeholder) {
              if (!(this.match(81) || this.match(140) || this.match(5))) {
                if (optionalId || !isStatement)
                  return node.id = null, node.body = this.finishPlaceholder(placeholder, "ClassBody"), this.finishNode(node, type);
                throw this.raise(PlaceholderErrors.ClassNameIsRequired, { at: this.state.startLoc });
              }
              node.id = placeholder;
            } else
              this.parseClassId(node, isStatement, optionalId);
            return super.parseClassSuper(node), node.body = this.parsePlaceholder("ClassBody") || super.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, type);
          }
          parseExport(node) {
            const placeholder = this.parsePlaceholder("Identifier");
            if (!placeholder)
              return super.parseExport(node);
            if (!this.isContextual(97) && !this.match(12))
              return node.specifiers = [], node.source = null, node.declaration = this.finishPlaceholder(placeholder, "Declaration"), this.finishNode(node, "ExportNamedDeclaration");
            this.expectPlugin("exportDefaultFrom");
            const specifier = this.startNode();
            return specifier.exported = placeholder, node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], super.parseExport(node);
          }
          isExportDefaultSpecifier() {
            if (this.match(65)) {
              const next = this.nextTokenStart();
              if (this.isUnparsedContextual(next, "from") && this.input.startsWith(tokenLabelName(140), this.nextTokenStartSince(next + 4)))
                return true;
            }
            return super.isExportDefaultSpecifier();
          }
          maybeParseExportDefaultSpecifier(node) {
            return !!(node.specifiers && node.specifiers.length > 0) || super.maybeParseExportDefaultSpecifier(node);
          }
          checkExport(node) {
            const { specifiers } = node;
            null != specifiers && specifiers.length && (node.specifiers = specifiers.filter((node2) => "Placeholder" === node2.exported.type)), super.checkExport(node), node.specifiers = specifiers;
          }
          parseImport(node) {
            const placeholder = this.parsePlaceholder("Identifier");
            if (!placeholder)
              return super.parseImport(node);
            if (node.specifiers = [], !this.isContextual(97) && !this.match(12))
              return node.source = this.finishPlaceholder(placeholder, "StringLiteral"), this.semicolon(), this.finishNode(node, "ImportDeclaration");
            const specifier = this.startNodeAtNode(placeholder);
            if (specifier.local = placeholder, node.specifiers.push(this.finishNode(specifier, "ImportDefaultSpecifier")), this.eat(12)) {
              this.maybeParseStarImportSpecifier(node) || this.parseNamedImportSpecifiers(node);
            }
            return this.expectContextual(97), node.source = this.parseImportSource(), this.semicolon(), this.finishNode(node, "ImportDeclaration");
          }
          parseImportSource() {
            return this.parsePlaceholder("StringLiteral") || super.parseImportSource();
          }
          assertNoSpace() {
            this.state.start > this.state.lastTokEndLoc.index && this.raise(PlaceholderErrors.UnexpectedSpace, { at: this.state.lastTokEndLoc });
          }
        } }, mixinPluginNames = Object.keys(mixinPlugins), defaultOptions2 = { sourceType: "script", sourceFilename: void 0, startColumn: 0, startLine: 1, allowAwaitOutsideFunction: false, allowReturnOutsideFunction: false, allowImportExportEverywhere: false, allowSuperOutsideMethod: false, allowUndeclaredExports: false, plugins: [], strictMode: null, ranges: false, tokens: false, createParenthesizedExpressions: false, errorRecovery: false, attachComment: true };
        const unwrapParenthesizedExpression = (node) => "ParenthesizedExpression" === node.type ? unwrapParenthesizedExpression(node.expression) : node;
        const loopLabel2 = { kind: "loop" }, switchLabel2 = { kind: "switch" }, loneSurrogate2 = /[\uD800-\uDFFF]/u, keywordRelationalOperator2 = /in(?:stanceof)?/y;
        class Parser3 extends class extends class extends class extends class extends class extends class extends class extends class {
          constructor() {
            this.sawUnambiguousESM = false, this.ambiguousScriptDifferentAst = false;
          }
          hasPlugin(pluginConfig) {
            if ("string" == typeof pluginConfig)
              return this.plugins.has(pluginConfig);
            {
              const [pluginName, pluginOptions] = pluginConfig;
              if (!this.hasPlugin(pluginName))
                return false;
              const actualOptions = this.plugins.get(pluginName);
              for (const key of Object.keys(pluginOptions))
                if ((null == actualOptions ? void 0 : actualOptions[key]) !== pluginOptions[key])
                  return false;
              return true;
            }
          }
          getPluginOption(plugin, name) {
            var _this$plugins$get;
            return null == (_this$plugins$get = this.plugins.get(plugin)) ? void 0 : _this$plugins$get[name];
          }
        } {
          addComment(comment) {
            this.filename && (comment.loc.filename = this.filename), this.state.comments.push(comment);
          }
          processComment(node) {
            const { commentStack } = this.state, commentStackLength = commentStack.length;
            if (0 === commentStackLength)
              return;
            let i = commentStackLength - 1;
            const lastCommentWS = commentStack[i];
            lastCommentWS.start === node.end && (lastCommentWS.leadingNode = node, i--);
            const { start: nodeStart } = node;
            for (; i >= 0; i--) {
              const commentWS = commentStack[i], commentEnd = commentWS.end;
              if (!(commentEnd > nodeStart)) {
                commentEnd === nodeStart && (commentWS.trailingNode = node);
                break;
              }
              commentWS.containingNode = node, this.finalizeComment(commentWS), commentStack.splice(i, 1);
            }
          }
          finalizeComment(commentWS) {
            const { comments } = commentWS;
            if (null !== commentWS.leadingNode || null !== commentWS.trailingNode)
              null !== commentWS.leadingNode && setTrailingComments(commentWS.leadingNode, comments), null !== commentWS.trailingNode && function(node, comments2) {
                void 0 === node.leadingComments ? node.leadingComments = comments2 : node.leadingComments.unshift(...comments2);
              }(commentWS.trailingNode, comments);
            else {
              const { containingNode: node, start: commentStart } = commentWS;
              if (44 === this.input.charCodeAt(commentStart - 1))
                switch (node.type) {
                  case "ObjectExpression":
                  case "ObjectPattern":
                  case "RecordExpression":
                    adjustInnerComments(node, node.properties, commentWS);
                    break;
                  case "CallExpression":
                  case "OptionalCallExpression":
                    adjustInnerComments(node, node.arguments, commentWS);
                    break;
                  case "FunctionDeclaration":
                  case "FunctionExpression":
                  case "ArrowFunctionExpression":
                  case "ObjectMethod":
                  case "ClassMethod":
                  case "ClassPrivateMethod":
                    adjustInnerComments(node, node.params, commentWS);
                    break;
                  case "ArrayExpression":
                  case "ArrayPattern":
                  case "TupleExpression":
                    adjustInnerComments(node, node.elements, commentWS);
                    break;
                  case "ExportNamedDeclaration":
                  case "ImportDeclaration":
                    adjustInnerComments(node, node.specifiers, commentWS);
                    break;
                  default:
                    setInnerComments(node, comments);
                }
              else
                setInnerComments(node, comments);
            }
          }
          finalizeRemainingComments() {
            const { commentStack } = this.state;
            for (let i = commentStack.length - 1; i >= 0; i--)
              this.finalizeComment(commentStack[i]);
            this.state.commentStack = [];
          }
          resetPreviousNodeTrailingComments(node) {
            const { commentStack } = this.state, { length } = commentStack;
            if (0 === length)
              return;
            const commentWS = commentStack[length - 1];
            commentWS.leadingNode === node && (commentWS.leadingNode = null);
          }
          takeSurroundingComments(node, start, end) {
            const { commentStack } = this.state, commentStackLength = commentStack.length;
            if (0 === commentStackLength)
              return;
            let i = commentStackLength - 1;
            for (; i >= 0; i--) {
              const commentWS = commentStack[i], commentEnd = commentWS.end;
              if (commentWS.start === end)
                commentWS.leadingNode = node;
              else if (commentEnd === start)
                commentWS.trailingNode = node;
              else if (commentEnd < start)
                break;
            }
          }
        } {
          constructor(options, input) {
            super(), this.isLookahead = void 0, this.tokens = [], this.errorHandlers_readInt = { invalidDigit: (pos, lineStart, curLine, radix) => !!this.options.errorRecovery && (this.raise(Errors.InvalidDigit, { at: buildPosition(pos, lineStart, curLine), radix }), true), numericSeparatorInEscapeSequence: this.errorBuilder(Errors.NumericSeparatorInEscapeSequence), unexpectedNumericSeparator: this.errorBuilder(Errors.UnexpectedNumericSeparator) }, this.errorHandlers_readCodePoint = Object.assign({}, this.errorHandlers_readInt, { invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence), invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint) }), this.errorHandlers_readStringContents_string = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: (pos, lineStart, curLine) => {
              this.recordStrictModeErrors(Errors.StrictNumericEscape, { at: buildPosition(pos, lineStart, curLine) });
            }, unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedString, { at: buildPosition(pos - 1, lineStart, curLine) });
            } }), this.errorHandlers_readStringContents_template = Object.assign({}, this.errorHandlers_readCodePoint, { strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape), unterminated: (pos, lineStart, curLine) => {
              throw this.raise(Errors.UnterminatedTemplate, { at: buildPosition(pos, lineStart, curLine) });
            } }), this.state = new State(), this.state.init(options), this.input = input, this.length = input.length, this.isLookahead = false;
          }
          pushToken(token) {
            this.tokens.length = this.state.tokensLength, this.tokens.push(token), ++this.state.tokensLength;
          }
          next() {
            this.checkKeywordEscapes(), this.options.tokens && this.pushToken(new Token3(this.state)), this.state.lastTokStart = this.state.start, this.state.lastTokEndLoc = this.state.endLoc, this.state.lastTokStartLoc = this.state.startLoc, this.nextToken();
          }
          eat(type) {
            return !!this.match(type) && (this.next(), true);
          }
          match(type) {
            return this.state.type === type;
          }
          createLookaheadState(state) {
            return { pos: state.pos, value: null, type: state.type, start: state.start, end: state.end, context: [this.curContext()], inType: state.inType, startLoc: state.startLoc, lastTokEndLoc: state.lastTokEndLoc, curLine: state.curLine, lineStart: state.lineStart, curPosition: state.curPosition };
          }
          lookahead() {
            const old = this.state;
            this.state = this.createLookaheadState(old), this.isLookahead = true, this.nextToken(), this.isLookahead = false;
            const curr = this.state;
            return this.state = old, curr;
          }
          nextTokenStart() {
            return this.nextTokenStartSince(this.state.pos);
          }
          nextTokenStartSince(pos) {
            return skipWhiteSpace2.lastIndex = pos, skipWhiteSpace2.test(this.input) ? skipWhiteSpace2.lastIndex : pos;
          }
          lookaheadCharCode() {
            return this.input.charCodeAt(this.nextTokenStart());
          }
          codePointAtPos(pos) {
            let cp = this.input.charCodeAt(pos);
            if (55296 == (64512 & cp) && ++pos < this.input.length) {
              const trail = this.input.charCodeAt(pos);
              56320 == (64512 & trail) && (cp = 65536 + ((1023 & cp) << 10) + (1023 & trail));
            }
            return cp;
          }
          setStrict(strict) {
            this.state.strict = strict, strict && (this.state.strictErrors.forEach(([toParseError, at2]) => this.raise(toParseError, { at: at2 })), this.state.strictErrors.clear());
          }
          curContext() {
            return this.state.context[this.state.context.length - 1];
          }
          nextToken() {
            this.skipSpace(), this.state.start = this.state.pos, this.isLookahead || (this.state.startLoc = this.state.curPosition()), this.state.pos >= this.length ? this.finishToken(135) : this.getTokenFromCode(this.codePointAtPos(this.state.pos));
          }
          skipBlockComment() {
            let startLoc;
            this.isLookahead || (startLoc = this.state.curPosition());
            const start = this.state.pos, end = this.input.indexOf("*/", start + 2);
            if (-1 === end)
              throw this.raise(Errors.UnterminatedComment, { at: this.state.curPosition() });
            for (this.state.pos = end + 2, lineBreakG2.lastIndex = start + 2; lineBreakG2.test(this.input) && lineBreakG2.lastIndex <= end; )
              ++this.state.curLine, this.state.lineStart = lineBreakG2.lastIndex;
            if (this.isLookahead)
              return;
            const comment = { type: "CommentBlock", value: this.input.slice(start + 2, end), start, end: end + 2, loc: new SourceLocation3(startLoc, this.state.curPosition()) };
            return this.options.tokens && this.pushToken(comment), comment;
          }
          skipLineComment(startSkip) {
            const start = this.state.pos;
            let startLoc;
            this.isLookahead || (startLoc = this.state.curPosition());
            let ch = this.input.charCodeAt(this.state.pos += startSkip);
            if (this.state.pos < this.length)
              for (; !isNewLine2(ch) && ++this.state.pos < this.length; )
                ch = this.input.charCodeAt(this.state.pos);
            if (this.isLookahead)
              return;
            const end = this.state.pos, comment = { type: "CommentLine", value: this.input.slice(start + startSkip, end), start, end, loc: new SourceLocation3(startLoc, this.state.curPosition()) };
            return this.options.tokens && this.pushToken(comment), comment;
          }
          skipSpace() {
            const spaceStart = this.state.pos, comments = [];
            loop:
              for (; this.state.pos < this.length; ) {
                const ch = this.input.charCodeAt(this.state.pos);
                switch (ch) {
                  case 32:
                  case 160:
                  case 9:
                    ++this.state.pos;
                    break;
                  case 13:
                    10 === this.input.charCodeAt(this.state.pos + 1) && ++this.state.pos;
                  case 10:
                  case 8232:
                  case 8233:
                    ++this.state.pos, ++this.state.curLine, this.state.lineStart = this.state.pos;
                    break;
                  case 47:
                    switch (this.input.charCodeAt(this.state.pos + 1)) {
                      case 42: {
                        const comment = this.skipBlockComment();
                        void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                        break;
                      }
                      case 47: {
                        const comment = this.skipLineComment(2);
                        void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                        break;
                      }
                      default:
                        break loop;
                    }
                    break;
                  default:
                    if (isWhitespace(ch))
                      ++this.state.pos;
                    else if (45 !== ch || this.inModule) {
                      if (60 !== ch || this.inModule)
                        break loop;
                      {
                        const pos = this.state.pos;
                        if (33 !== this.input.charCodeAt(pos + 1) || 45 !== this.input.charCodeAt(pos + 2) || 45 !== this.input.charCodeAt(pos + 3))
                          break loop;
                        {
                          const comment = this.skipLineComment(4);
                          void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                        }
                      }
                    } else {
                      const pos = this.state.pos;
                      if (45 !== this.input.charCodeAt(pos + 1) || 62 !== this.input.charCodeAt(pos + 2) || !(0 === spaceStart || this.state.lineStart > spaceStart))
                        break loop;
                      {
                        const comment = this.skipLineComment(3);
                        void 0 !== comment && (this.addComment(comment), this.options.attachComment && comments.push(comment));
                      }
                    }
                }
              }
            if (comments.length > 0) {
              const commentWhitespace = { start: spaceStart, end: this.state.pos, comments, leadingNode: null, trailingNode: null, containingNode: null };
              this.state.commentStack.push(commentWhitespace);
            }
          }
          finishToken(type, val) {
            this.state.end = this.state.pos, this.state.endLoc = this.state.curPosition();
            const prevType = this.state.type;
            this.state.type = type, this.state.value = val, this.isLookahead || this.updateContext(prevType);
          }
          replaceToken(type) {
            this.state.type = type, this.updateContext();
          }
          readToken_numberSign() {
            if (0 === this.state.pos && this.readToken_interpreter())
              return;
            const nextPos = this.state.pos + 1, next = this.codePointAtPos(nextPos);
            if (next >= 48 && next <= 57)
              throw this.raise(Errors.UnexpectedDigitAfterHash, { at: this.state.curPosition() });
            if (123 === next || 91 === next && this.hasPlugin("recordAndTuple")) {
              if (this.expectPlugin("recordAndTuple"), "bar" === this.getPluginOption("recordAndTuple", "syntaxType"))
                throw this.raise(123 === next ? Errors.RecordExpressionHashIncorrectStartSyntaxType : Errors.TupleExpressionHashIncorrectStartSyntaxType, { at: this.state.curPosition() });
              this.state.pos += 2, 123 === next ? this.finishToken(7) : this.finishToken(1);
            } else
              isIdentifierStart2(next) ? (++this.state.pos, this.finishToken(134, this.readWord1(next))) : 92 === next ? (++this.state.pos, this.finishToken(134, this.readWord1())) : this.finishOp(27, 1);
          }
          readToken_dot() {
            const next = this.input.charCodeAt(this.state.pos + 1);
            next >= 48 && next <= 57 ? this.readNumber(true) : 46 === next && 46 === this.input.charCodeAt(this.state.pos + 2) ? (this.state.pos += 3, this.finishToken(21)) : (++this.state.pos, this.finishToken(16));
          }
          readToken_slash() {
            61 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(31, 2) : this.finishOp(56, 1);
          }
          readToken_interpreter() {
            if (0 !== this.state.pos || this.length < 2)
              return false;
            let ch = this.input.charCodeAt(this.state.pos + 1);
            if (33 !== ch)
              return false;
            const start = this.state.pos;
            for (this.state.pos += 1; !isNewLine2(ch) && ++this.state.pos < this.length; )
              ch = this.input.charCodeAt(this.state.pos);
            const value = this.input.slice(start + 2, this.state.pos);
            return this.finishToken(28, value), true;
          }
          readToken_mult_modulo(code) {
            let type = 42 === code ? 55 : 54, width = 1, next = this.input.charCodeAt(this.state.pos + 1);
            42 === code && 42 === next && (width++, next = this.input.charCodeAt(this.state.pos + 2), type = 57), 61 !== next || this.state.inType || (width++, type = 37 === code ? 33 : 30), this.finishOp(type, width);
          }
          readToken_pipe_amp(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (next !== code) {
              if (124 === code) {
                if (62 === next)
                  return void this.finishOp(39, 2);
                if (this.hasPlugin("recordAndTuple") && 125 === next) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType"))
                    throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, { at: this.state.curPosition() });
                  return this.state.pos += 2, void this.finishToken(9);
                }
                if (this.hasPlugin("recordAndTuple") && 93 === next) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType"))
                    throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, { at: this.state.curPosition() });
                  return this.state.pos += 2, void this.finishToken(4);
                }
              }
              61 !== next ? this.finishOp(124 === code ? 43 : 45, 1) : this.finishOp(30, 2);
            } else
              61 === this.input.charCodeAt(this.state.pos + 2) ? this.finishOp(30, 3) : this.finishOp(124 === code ? 41 : 42, 2);
          }
          readToken_caret() {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (61 !== next || this.state.inType)
              if (94 === next && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "^^" }])) {
                this.finishOp(37, 2);
                if (94 === this.input.codePointAt(this.state.pos))
                  throw this.unexpected();
              } else
                this.finishOp(44, 1);
            else
              this.finishOp(32, 2);
          }
          readToken_atSign() {
            64 === this.input.charCodeAt(this.state.pos + 1) && this.hasPlugin(["pipelineOperator", { proposal: "hack", topicToken: "@@" }]) ? this.finishOp(38, 2) : this.finishOp(26, 1);
          }
          readToken_plus_min(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            next !== code ? 61 === next ? this.finishOp(30, 2) : this.finishOp(53, 1) : this.finishOp(34, 2);
          }
          readToken_lt() {
            const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
            if (60 === next)
              return 61 === this.input.charCodeAt(pos + 2) ? void this.finishOp(30, 3) : void this.finishOp(51, 2);
            61 !== next ? this.finishOp(47, 1) : this.finishOp(49, 2);
          }
          readToken_gt() {
            const { pos } = this.state, next = this.input.charCodeAt(pos + 1);
            if (62 === next) {
              const size = 62 === this.input.charCodeAt(pos + 2) ? 3 : 2;
              return 61 === this.input.charCodeAt(pos + size) ? void this.finishOp(30, size + 1) : void this.finishOp(52, size);
            }
            61 !== next ? this.finishOp(48, 1) : this.finishOp(49, 2);
          }
          readToken_eq_excl(code) {
            const next = this.input.charCodeAt(this.state.pos + 1);
            if (61 !== next)
              return 61 === code && 62 === next ? (this.state.pos += 2, void this.finishToken(19)) : void this.finishOp(61 === code ? 29 : 35, 1);
            this.finishOp(46, 61 === this.input.charCodeAt(this.state.pos + 2) ? 3 : 2);
          }
          readToken_question() {
            const next = this.input.charCodeAt(this.state.pos + 1), next2 = this.input.charCodeAt(this.state.pos + 2);
            63 === next ? 61 === next2 ? this.finishOp(30, 3) : this.finishOp(40, 2) : 46 !== next || next2 >= 48 && next2 <= 57 ? (++this.state.pos, this.finishToken(17)) : (this.state.pos += 2, this.finishToken(18));
          }
          getTokenFromCode(code) {
            switch (code) {
              case 46:
                return void this.readToken_dot();
              case 40:
                return ++this.state.pos, void this.finishToken(10);
              case 41:
                return ++this.state.pos, void this.finishToken(11);
              case 59:
                return ++this.state.pos, void this.finishToken(13);
              case 44:
                return ++this.state.pos, void this.finishToken(12);
              case 91:
                if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType"))
                    throw this.raise(Errors.TupleExpressionBarIncorrectStartSyntaxType, { at: this.state.curPosition() });
                  this.state.pos += 2, this.finishToken(2);
                } else
                  ++this.state.pos, this.finishToken(0);
                return;
              case 93:
                return ++this.state.pos, void this.finishToken(3);
              case 123:
                if (this.hasPlugin("recordAndTuple") && 124 === this.input.charCodeAt(this.state.pos + 1)) {
                  if ("bar" !== this.getPluginOption("recordAndTuple", "syntaxType"))
                    throw this.raise(Errors.RecordExpressionBarIncorrectStartSyntaxType, { at: this.state.curPosition() });
                  this.state.pos += 2, this.finishToken(6);
                } else
                  ++this.state.pos, this.finishToken(5);
                return;
              case 125:
                return ++this.state.pos, void this.finishToken(8);
              case 58:
                return void (this.hasPlugin("functionBind") && 58 === this.input.charCodeAt(this.state.pos + 1) ? this.finishOp(15, 2) : (++this.state.pos, this.finishToken(14)));
              case 63:
                return void this.readToken_question();
              case 96:
                return void this.readTemplateToken();
              case 48: {
                const next = this.input.charCodeAt(this.state.pos + 1);
                if (120 === next || 88 === next)
                  return void this.readRadixNumber(16);
                if (111 === next || 79 === next)
                  return void this.readRadixNumber(8);
                if (98 === next || 66 === next)
                  return void this.readRadixNumber(2);
              }
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
                return void this.readNumber(false);
              case 34:
              case 39:
                return void this.readString(code);
              case 47:
                return void this.readToken_slash();
              case 37:
              case 42:
                return void this.readToken_mult_modulo(code);
              case 124:
              case 38:
                return void this.readToken_pipe_amp(code);
              case 94:
                return void this.readToken_caret();
              case 43:
              case 45:
                return void this.readToken_plus_min(code);
              case 60:
                return void this.readToken_lt();
              case 62:
                return void this.readToken_gt();
              case 61:
              case 33:
                return void this.readToken_eq_excl(code);
              case 126:
                return void this.finishOp(36, 1);
              case 64:
                return void this.readToken_atSign();
              case 35:
                return void this.readToken_numberSign();
              case 92:
                return void this.readWord();
              default:
                if (isIdentifierStart2(code))
                  return void this.readWord(code);
            }
            throw this.raise(Errors.InvalidOrUnexpectedToken, { at: this.state.curPosition(), unexpected: String.fromCodePoint(code) });
          }
          finishOp(type, size) {
            const str = this.input.slice(this.state.pos, this.state.pos + size);
            this.state.pos += size, this.finishToken(type, str);
          }
          readRegexp() {
            const startLoc = this.state.startLoc, start = this.state.start + 1;
            let escaped, inClass, { pos } = this.state;
            for (; ; ++pos) {
              if (pos >= this.length)
                throw this.raise(Errors.UnterminatedRegExp, { at: createPositionWithColumnOffset(startLoc, 1) });
              const ch = this.input.charCodeAt(pos);
              if (isNewLine2(ch))
                throw this.raise(Errors.UnterminatedRegExp, { at: createPositionWithColumnOffset(startLoc, 1) });
              if (escaped)
                escaped = false;
              else {
                if (91 === ch)
                  inClass = true;
                else if (93 === ch && inClass)
                  inClass = false;
                else if (47 === ch && !inClass)
                  break;
                escaped = 92 === ch;
              }
            }
            const content = this.input.slice(start, pos);
            ++pos;
            let mods = "";
            const nextPos = () => createPositionWithColumnOffset(startLoc, pos + 2 - start);
            for (; pos < this.length; ) {
              const cp = this.codePointAtPos(pos), char = String.fromCharCode(cp);
              if (VALID_REGEX_FLAGS.has(cp))
                118 === cp ? (this.expectPlugin("regexpUnicodeSets", nextPos()), mods.includes("u") && this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() })) : 117 === cp && mods.includes("v") && this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() }), mods.includes(char) && this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });
              else {
                if (!isIdentifierChar2(cp) && 92 !== cp)
                  break;
                this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });
              }
              ++pos, mods += char;
            }
            this.state.pos = pos, this.finishToken(133, { pattern: content, flags: mods });
          }
          readInt(radix, len, forceLen = false, allowNumSeparator = true) {
            const { n, pos } = readInt(this.input, this.state.pos, this.state.lineStart, this.state.curLine, radix, len, forceLen, allowNumSeparator, this.errorHandlers_readInt);
            return this.state.pos = pos, n;
          }
          readRadixNumber(radix) {
            const startLoc = this.state.curPosition();
            let isBigInt = false;
            this.state.pos += 2;
            const val = this.readInt(radix);
            null == val && this.raise(Errors.InvalidDigit, { at: createPositionWithColumnOffset(startLoc, 2), radix });
            const next = this.input.charCodeAt(this.state.pos);
            if (110 === next)
              ++this.state.pos, isBigInt = true;
            else if (109 === next)
              throw this.raise(Errors.InvalidDecimal, { at: startLoc });
            if (isIdentifierStart2(this.codePointAtPos(this.state.pos)))
              throw this.raise(Errors.NumberIdentifier, { at: this.state.curPosition() });
            if (isBigInt) {
              const str = this.input.slice(startLoc.index, this.state.pos).replace(/[_n]/g, "");
              this.finishToken(131, str);
            } else
              this.finishToken(130, val);
          }
          readNumber(startsWithDot) {
            const start = this.state.pos, startLoc = this.state.curPosition();
            let isFloat = false, isBigInt = false, isDecimal = false, hasExponent = false, isOctal = false;
            startsWithDot || null !== this.readInt(10) || this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });
            const hasLeadingZero = this.state.pos - start >= 2 && 48 === this.input.charCodeAt(start);
            if (hasLeadingZero) {
              const integer = this.input.slice(start, this.state.pos);
              if (this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc }), !this.state.strict) {
                const underscorePos = integer.indexOf("_");
                underscorePos > 0 && this.raise(Errors.ZeroDigitNumericSeparator, { at: createPositionWithColumnOffset(startLoc, underscorePos) });
              }
              isOctal = hasLeadingZero && !/[89]/.test(integer);
            }
            let next = this.input.charCodeAt(this.state.pos);
            if (46 !== next || isOctal || (++this.state.pos, this.readInt(10), isFloat = true, next = this.input.charCodeAt(this.state.pos)), 69 !== next && 101 !== next || isOctal || (next = this.input.charCodeAt(++this.state.pos), 43 !== next && 45 !== next || ++this.state.pos, null === this.readInt(10) && this.raise(Errors.InvalidOrMissingExponent, { at: startLoc }), isFloat = true, hasExponent = true, next = this.input.charCodeAt(this.state.pos)), 110 === next && ((isFloat || hasLeadingZero) && this.raise(Errors.InvalidBigIntLiteral, { at: startLoc }), ++this.state.pos, isBigInt = true), 109 === next && (this.expectPlugin("decimal", this.state.curPosition()), (hasExponent || hasLeadingZero) && this.raise(Errors.InvalidDecimal, { at: startLoc }), ++this.state.pos, isDecimal = true), isIdentifierStart2(this.codePointAtPos(this.state.pos)))
              throw this.raise(Errors.NumberIdentifier, { at: this.state.curPosition() });
            const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, "");
            if (isBigInt)
              return void this.finishToken(131, str);
            if (isDecimal)
              return void this.finishToken(132, str);
            const val = isOctal ? parseInt(str, 8) : parseFloat(str);
            this.finishToken(130, val);
          }
          readCodePoint(throwOnInvalid) {
            const { code, pos } = readCodePoint(this.input, this.state.pos, this.state.lineStart, this.state.curLine, throwOnInvalid, this.errorHandlers_readCodePoint);
            return this.state.pos = pos, code;
          }
          readString(quote) {
            const { str, pos, curLine, lineStart } = readStringContents(34 === quote ? "double" : "single", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_string);
            this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, this.finishToken(129, str);
          }
          readTemplateContinuation() {
            this.match(8) || this.unexpected(null, 8), this.state.pos--, this.readTemplateToken();
          }
          readTemplateToken() {
            const opening = this.input[this.state.pos], { str, containsInvalid, pos, curLine, lineStart } = readStringContents("template", this.input, this.state.pos + 1, this.state.lineStart, this.state.curLine, this.errorHandlers_readStringContents_template);
            this.state.pos = pos + 1, this.state.lineStart = lineStart, this.state.curLine = curLine, 96 === this.input.codePointAt(pos) ? this.finishToken(24, containsInvalid ? null : opening + str + "`") : (this.state.pos++, this.finishToken(25, containsInvalid ? null : opening + str + "${"));
          }
          recordStrictModeErrors(toParseError, { at: at2 }) {
            const index2 = at2.index;
            this.state.strict && !this.state.strictErrors.has(index2) ? this.raise(toParseError, { at: at2 }) : this.state.strictErrors.set(index2, [toParseError, at2]);
          }
          readWord1(firstCode) {
            this.state.containsEsc = false;
            let word = "";
            const start = this.state.pos;
            let chunkStart = this.state.pos;
            for (void 0 !== firstCode && (this.state.pos += firstCode <= 65535 ? 1 : 2); this.state.pos < this.length; ) {
              const ch = this.codePointAtPos(this.state.pos);
              if (isIdentifierChar2(ch))
                this.state.pos += ch <= 65535 ? 1 : 2;
              else {
                if (92 !== ch)
                  break;
                {
                  this.state.containsEsc = true, word += this.input.slice(chunkStart, this.state.pos);
                  const escStart = this.state.curPosition(), identifierCheck = this.state.pos === start ? isIdentifierStart2 : isIdentifierChar2;
                  if (117 !== this.input.charCodeAt(++this.state.pos)) {
                    this.raise(Errors.MissingUnicodeEscape, { at: this.state.curPosition() }), chunkStart = this.state.pos - 1;
                    continue;
                  }
                  ++this.state.pos;
                  const esc = this.readCodePoint(true);
                  null !== esc && (identifierCheck(esc) || this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart }), word += String.fromCodePoint(esc)), chunkStart = this.state.pos;
                }
              }
            }
            return word + this.input.slice(chunkStart, this.state.pos);
          }
          readWord(firstCode) {
            const word = this.readWord1(firstCode), type = keywords$12.get(word);
            void 0 !== type ? this.finishToken(type, tokenLabelName(type)) : this.finishToken(128, word);
          }
          checkKeywordEscapes() {
            const { type } = this.state;
            tokenIsKeyword(type) && this.state.containsEsc && this.raise(Errors.InvalidEscapedReservedWord, { at: this.state.startLoc, reservedWord: tokenLabelName(type) });
          }
          raise(toParseError, raiseProperties) {
            const { at: at2 } = raiseProperties, details = _objectWithoutPropertiesLoose(raiseProperties, _excluded), error = toParseError({ loc: at2 instanceof Position3 ? at2 : at2.loc.start, details });
            if (!this.options.errorRecovery)
              throw error;
            return this.isLookahead || this.state.errors.push(error), error;
          }
          raiseOverwrite(toParseError, raiseProperties) {
            const { at: at2 } = raiseProperties, details = _objectWithoutPropertiesLoose(raiseProperties, _excluded2), loc = at2 instanceof Position3 ? at2 : at2.loc.start, pos = loc.index, errors = this.state.errors;
            for (let i = errors.length - 1; i >= 0; i--) {
              const error = errors[i];
              if (error.loc.index === pos)
                return errors[i] = toParseError({ loc, details });
              if (error.loc.index < pos)
                break;
            }
            return this.raise(toParseError, raiseProperties);
          }
          updateContext(prevType) {
          }
          unexpected(loc, type) {
            throw this.raise(Errors.UnexpectedToken, { expected: type ? tokenLabelName(type) : null, at: null != loc ? loc : this.state.startLoc });
          }
          expectPlugin(pluginName, loc) {
            if (this.hasPlugin(pluginName))
              return true;
            throw this.raise(Errors.MissingPlugin, { at: null != loc ? loc : this.state.startLoc, missingPlugin: [pluginName] });
          }
          expectOnePlugin(pluginNames) {
            if (!pluginNames.some((name) => this.hasPlugin(name)))
              throw this.raise(Errors.MissingOneOfPlugins, { at: this.state.startLoc, missingPlugin: pluginNames });
          }
          errorBuilder(error) {
            return (pos, lineStart, curLine) => {
              this.raise(error, { at: buildPosition(pos, lineStart, curLine) });
            };
          }
        } {
          addExtra(node, key, value, enumerable = true) {
            if (!node)
              return;
            const extra = node.extra = node.extra || {};
            enumerable ? extra[key] = value : Object.defineProperty(extra, key, { enumerable, value });
          }
          isContextual(token) {
            return this.state.type === token && !this.state.containsEsc;
          }
          isUnparsedContextual(nameStart, name) {
            const nameEnd = nameStart + name.length;
            if (this.input.slice(nameStart, nameEnd) === name) {
              const nextCh = this.input.charCodeAt(nameEnd);
              return !(isIdentifierChar2(nextCh) || 55296 == (64512 & nextCh));
            }
            return false;
          }
          isLookaheadContextual(name) {
            const next = this.nextTokenStart();
            return this.isUnparsedContextual(next, name);
          }
          eatContextual(token) {
            return !!this.isContextual(token) && (this.next(), true);
          }
          expectContextual(token, toParseError) {
            if (!this.eatContextual(token)) {
              if (null != toParseError)
                throw this.raise(toParseError, { at: this.state.startLoc });
              throw this.unexpected(null, token);
            }
          }
          canInsertSemicolon() {
            return this.match(135) || this.match(8) || this.hasPrecedingLineBreak();
          }
          hasPrecedingLineBreak() {
            return lineBreak2.test(this.input.slice(this.state.lastTokEndLoc.index, this.state.start));
          }
          hasFollowingLineBreak() {
            return skipWhiteSpaceToLineBreak.lastIndex = this.state.end, skipWhiteSpaceToLineBreak.test(this.input);
          }
          isLineTerminator() {
            return this.eat(13) || this.canInsertSemicolon();
          }
          semicolon(allowAsi = true) {
            (allowAsi ? this.isLineTerminator() : this.eat(13)) || this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });
          }
          expect(type, loc) {
            this.eat(type) || this.unexpected(loc, type);
          }
          tryParse(fn, oldState = this.state.clone()) {
            const abortSignal = { node: null };
            try {
              const node = fn((node2 = null) => {
                throw abortSignal.node = node2, abortSignal;
              });
              if (this.state.errors.length > oldState.errors.length) {
                const failState = this.state;
                return this.state = oldState, this.state.tokensLength = failState.tokensLength, { node, error: failState.errors[oldState.errors.length], thrown: false, aborted: false, failState };
              }
              return { node, error: null, thrown: false, aborted: false, failState: null };
            } catch (error) {
              const failState = this.state;
              if (this.state = oldState, error instanceof SyntaxError)
                return { node: null, error, thrown: true, aborted: false, failState };
              if (error === abortSignal)
                return { node: abortSignal.node, error: null, thrown: false, aborted: true, failState };
              throw error;
            }
          }
          checkExpressionErrors(refExpressionErrors, andThrow) {
            if (!refExpressionErrors)
              return false;
            const { shorthandAssignLoc, doubleProtoLoc, privateKeyLoc, optionalParametersLoc } = refExpressionErrors;
            if (!andThrow)
              return !!(shorthandAssignLoc || doubleProtoLoc || optionalParametersLoc || privateKeyLoc);
            null != shorthandAssignLoc && this.raise(Errors.InvalidCoverInitializedName, { at: shorthandAssignLoc }), null != doubleProtoLoc && this.raise(Errors.DuplicateProto, { at: doubleProtoLoc }), null != privateKeyLoc && this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc }), null != optionalParametersLoc && this.unexpected(optionalParametersLoc);
          }
          isLiteralPropertyName() {
            return tokenIsLiteralPropertyName(this.state.type);
          }
          isPrivateName(node) {
            return "PrivateName" === node.type;
          }
          getPrivateNameSV(node) {
            return node.id.name;
          }
          hasPropertyAsPrivateName(node) {
            return ("MemberExpression" === node.type || "OptionalMemberExpression" === node.type) && this.isPrivateName(node.property);
          }
          isOptionalChain(node) {
            return "OptionalMemberExpression" === node.type || "OptionalCallExpression" === node.type;
          }
          isObjectProperty(node) {
            return "ObjectProperty" === node.type;
          }
          isObjectMethod(node) {
            return "ObjectMethod" === node.type;
          }
          initializeScopes(inModule = "module" === this.options.sourceType) {
            const oldLabels = this.state.labels;
            this.state.labels = [];
            const oldExportedIdentifiers = this.exportedIdentifiers;
            this.exportedIdentifiers = /* @__PURE__ */ new Set();
            const oldInModule = this.inModule;
            this.inModule = inModule;
            const oldScope = this.scope, ScopeHandler2 = this.getScopeHandler();
            this.scope = new ScopeHandler2(this, inModule);
            const oldProdParam = this.prodParam;
            this.prodParam = new ProductionParameterHandler();
            const oldClassScope = this.classScope;
            this.classScope = new ClassScopeHandler(this);
            const oldExpressionScope = this.expressionScope;
            return this.expressionScope = new ExpressionScopeHandler(this), () => {
              this.state.labels = oldLabels, this.exportedIdentifiers = oldExportedIdentifiers, this.inModule = oldInModule, this.scope = oldScope, this.prodParam = oldProdParam, this.classScope = oldClassScope, this.expressionScope = oldExpressionScope;
            };
          }
          enterInitialScopes() {
            let paramFlags = 0;
            this.inModule && (paramFlags |= 2), this.scope.enter(1), this.prodParam.enter(paramFlags);
          }
          checkDestructuringPrivate(refExpressionErrors) {
            const { privateKeyLoc } = refExpressionErrors;
            null !== privateKeyLoc && this.expectPlugin("destructuringPrivate", privateKeyLoc);
          }
        } {
          startNode() {
            return new Node3(this, this.state.start, this.state.startLoc);
          }
          startNodeAt(pos, loc) {
            return new Node3(this, pos, loc);
          }
          startNodeAtNode(type) {
            return this.startNodeAt(type.start, type.loc.start);
          }
          finishNode(node, type) {
            return this.finishNodeAt(node, type, this.state.lastTokEndLoc);
          }
          finishNodeAt(node, type, endLoc) {
            return node.type = type, node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index), this.options.attachComment && this.processComment(node), node;
          }
          resetStartLocation(node, start, startLoc) {
            node.start = start, node.loc.start = startLoc, this.options.ranges && (node.range[0] = start);
          }
          resetEndLocation(node, endLoc = this.state.lastTokEndLoc) {
            node.end = endLoc.index, node.loc.end = endLoc, this.options.ranges && (node.range[1] = endLoc.index);
          }
          resetStartLocationFromNode(node, locationNode) {
            this.resetStartLocation(node, locationNode.start, locationNode.loc.start);
          }
        } {
          toAssignable(node, isLHS = false) {
            var _node$extra, _node$extra3;
            let parenthesized;
            switch (("ParenthesizedExpression" === node.type || null != (_node$extra = node.extra) && _node$extra.parenthesized) && (parenthesized = unwrapParenthesizedExpression(node), isLHS ? "Identifier" === parenthesized.type ? this.expressionScope.recordArrowParemeterBindingError(Errors.InvalidParenthesizedAssignment, { at: node }) : "MemberExpression" !== parenthesized.type && this.raise(Errors.InvalidParenthesizedAssignment, { at: node }) : this.raise(Errors.InvalidParenthesizedAssignment, { at: node })), node.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                break;
              case "ObjectExpression":
                node.type = "ObjectPattern";
                for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {
                  var _node$extra2;
                  const prop = node.properties[i], isLast = i === last;
                  this.toAssignableObjectExpressionProp(prop, isLast, isLHS), isLast && "RestElement" === prop.type && null != (_node$extra2 = node.extra) && _node$extra2.trailingCommaLoc && this.raise(Errors.RestTrailingComma, { at: node.extra.trailingCommaLoc });
                }
                break;
              case "ObjectProperty": {
                const { key, value } = node;
                this.isPrivateName(key) && this.classScope.usePrivateName(this.getPrivateNameSV(key), key.loc.start), this.toAssignable(value, isLHS);
                break;
              }
              case "SpreadElement":
                throw new Error("Internal @babel/parser error (this is a bug, please report it). SpreadElement should be converted by .toAssignable's caller.");
              case "ArrayExpression":
                node.type = "ArrayPattern", this.toAssignableList(node.elements, null == (_node$extra3 = node.extra) ? void 0 : _node$extra3.trailingCommaLoc, isLHS);
                break;
              case "AssignmentExpression":
                "=" !== node.operator && this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end }), node.type = "AssignmentPattern", delete node.operator, this.toAssignable(node.left, isLHS);
                break;
              case "ParenthesizedExpression":
                this.toAssignable(parenthesized, isLHS);
            }
          }
          toAssignableObjectExpressionProp(prop, isLast, isLHS) {
            if ("ObjectMethod" === prop.type)
              this.raise("get" === prop.kind || "set" === prop.kind ? Errors.PatternHasAccessor : Errors.PatternHasMethod, { at: prop.key });
            else if ("SpreadElement" === prop.type) {
              prop.type = "RestElement";
              const arg = prop.argument;
              this.checkToRestConversion(arg, false), this.toAssignable(arg, isLHS), isLast || this.raise(Errors.RestTrailingComma, { at: prop });
            } else
              this.toAssignable(prop, isLHS);
          }
          toAssignableList(exprList, trailingCommaLoc, isLHS) {
            const end = exprList.length - 1;
            for (let i = 0; i <= end; i++) {
              const elt = exprList[i];
              if (elt) {
                if ("SpreadElement" === elt.type) {
                  elt.type = "RestElement";
                  const arg = elt.argument;
                  this.checkToRestConversion(arg, true), this.toAssignable(arg, isLHS);
                } else
                  this.toAssignable(elt, isLHS);
                "RestElement" === elt.type && (i < end ? this.raise(Errors.RestTrailingComma, { at: elt }) : trailingCommaLoc && this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc }));
              }
            }
          }
          isAssignable(node, isBinding) {
            switch (node.type) {
              case "Identifier":
              case "ObjectPattern":
              case "ArrayPattern":
              case "AssignmentPattern":
              case "RestElement":
                return true;
              case "ObjectExpression": {
                const last = node.properties.length - 1;
                return node.properties.every((prop, i) => "ObjectMethod" !== prop.type && (i === last || "SpreadElement" !== prop.type) && this.isAssignable(prop));
              }
              case "ObjectProperty":
                return this.isAssignable(node.value);
              case "SpreadElement":
                return this.isAssignable(node.argument);
              case "ArrayExpression":
                return node.elements.every((element) => null === element || this.isAssignable(element));
              case "AssignmentExpression":
                return "=" === node.operator;
              case "ParenthesizedExpression":
                return this.isAssignable(node.expression);
              case "MemberExpression":
              case "OptionalMemberExpression":
                return !isBinding;
              default:
                return false;
            }
          }
          toReferencedList(exprList, isParenthesizedExpr) {
            return exprList;
          }
          toReferencedListDeep(exprList, isParenthesizedExpr) {
            this.toReferencedList(exprList, isParenthesizedExpr);
            for (const expr of exprList)
              "ArrayExpression" === (null == expr ? void 0 : expr.type) && this.toReferencedListDeep(expr.elements);
          }
          parseSpread(refExpressionErrors) {
            const node = this.startNode();
            return this.next(), node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, void 0), this.finishNode(node, "SpreadElement");
          }
          parseRestBinding() {
            const node = this.startNode();
            return this.next(), node.argument = this.parseBindingAtom(), this.finishNode(node, "RestElement");
          }
          parseBindingAtom() {
            switch (this.state.type) {
              case 0: {
                const node = this.startNode();
                return this.next(), node.elements = this.parseBindingList(3, 93, true), this.finishNode(node, "ArrayPattern");
              }
              case 5:
                return this.parseObjectLike(8, true);
            }
            return this.parseIdentifier();
          }
          parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {
            const elts = [];
            let first = true;
            for (; !this.eat(close); )
              if (first ? first = false : this.expect(12), allowEmpty && this.match(12))
                elts.push(null);
              else {
                if (this.eat(close))
                  break;
                if (this.match(21)) {
                  if (elts.push(this.parseAssignableListItemTypes(this.parseRestBinding())), !this.checkCommaAfterRest(closeCharCode)) {
                    this.expect(close);
                    break;
                  }
                } else {
                  const decorators = [];
                  for (this.match(26) && this.hasPlugin("decorators") && this.raise(Errors.UnsupportedParameterDecorator, { at: this.state.startLoc }); this.match(26); )
                    decorators.push(this.parseDecorator());
                  elts.push(this.parseAssignableListItem(allowModifiers, decorators));
                }
              }
            return elts;
          }
          parseBindingRestProperty(prop) {
            return this.next(), prop.argument = this.parseIdentifier(), this.checkCommaAfterRest(125), this.finishNode(prop, "RestElement");
          }
          parseBindingProperty() {
            const prop = this.startNode(), { type, start: startPos, startLoc } = this.state;
            return 21 === type ? this.parseBindingRestProperty(prop) : (134 === type ? (this.expectPlugin("destructuringPrivate", startLoc), this.classScope.usePrivateName(this.state.value, startLoc), prop.key = this.parsePrivateName()) : this.parsePropertyName(prop), prop.method = false, this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false));
          }
          parseAssignableListItem(allowModifiers, decorators) {
            const left = this.parseMaybeDefault();
            this.parseAssignableListItemTypes(left);
            const elt = this.parseMaybeDefault(left.start, left.loc.start, left);
            return decorators.length && (left.decorators = decorators), elt;
          }
          parseAssignableListItemTypes(param) {
            return param;
          }
          parseMaybeDefault(startPos, startLoc, left) {
            var _startLoc, _startPos, _left;
            if (startLoc = null != (_startLoc = startLoc) ? _startLoc : this.state.startLoc, startPos = null != (_startPos = startPos) ? _startPos : this.state.start, left = null != (_left = left) ? _left : this.parseBindingAtom(), !this.eat(29))
              return left;
            const node = this.startNodeAt(startPos, startLoc);
            return node.left = left, node.right = this.parseMaybeAssignAllowIn(), this.finishNode(node, "AssignmentPattern");
          }
          isValidLVal(type, isUnparenthesizedInAssign, binding) {
            return object = { AssignmentPattern: "left", RestElement: "argument", ObjectProperty: "value", ParenthesizedExpression: "expression", ArrayPattern: "elements", ObjectPattern: "properties" }, key = type, Object.hasOwnProperty.call(object, key) && object[key];
            var object, key;
          }
          checkLVal(expression, { in: ancestor, binding = 64, checkClashes = false, strictModeChanged = false, allowingSloppyLetBinding = !(8 & binding), hasParenthesizedAncestor = false }) {
            var _expression$extra;
            const type = expression.type;
            if (this.isObjectMethod(expression))
              return;
            if ("MemberExpression" === type)
              return void (64 !== binding && this.raise(Errors.InvalidPropertyBindingPattern, { at: expression }));
            if ("Identifier" === expression.type) {
              this.checkIdentifier(expression, binding, strictModeChanged, allowingSloppyLetBinding);
              const { name } = expression;
              return void (checkClashes && (checkClashes.has(name) ? this.raise(Errors.ParamDupe, { at: expression }) : checkClashes.add(name)));
            }
            const validity = this.isValidLVal(expression.type, !(hasParenthesizedAncestor || null != (_expression$extra = expression.extra) && _expression$extra.parenthesized) && "AssignmentExpression" === ancestor.type, binding);
            if (true === validity)
              return;
            if (false === validity) {
              const ParseErrorClass = 64 === binding ? Errors.InvalidLhs : Errors.InvalidLhsBinding;
              return void this.raise(ParseErrorClass, { at: expression, ancestor: "UpdateExpression" === ancestor.type ? { type: "UpdateExpression", prefix: ancestor.prefix } : { type: ancestor.type } });
            }
            const [key, isParenthesizedExpression] = Array.isArray(validity) ? validity : [validity, "ParenthesizedExpression" === type], nextAncestor = "ArrayPattern" === expression.type || "ObjectPattern" === expression.type || "ParenthesizedExpression" === expression.type ? expression : ancestor;
            for (const child of [].concat(expression[key]))
              child && this.checkLVal(child, { in: nextAncestor, binding, checkClashes, allowingSloppyLetBinding, strictModeChanged, hasParenthesizedAncestor: isParenthesizedExpression });
          }
          checkIdentifier(at2, bindingType, strictModeChanged = false, allowLetBinding = !(8 & bindingType)) {
            this.state.strict && (strictModeChanged ? isStrictBindReservedWord(at2.name, this.inModule) : isStrictBindOnlyReservedWord(at2.name)) && (64 === bindingType ? this.raise(Errors.StrictEvalArguments, { at: at2, referenceName: at2.name }) : this.raise(Errors.StrictEvalArgumentsBinding, { at: at2, bindingName: at2.name })), allowLetBinding || "let" !== at2.name || this.raise(Errors.LetInLexicalBinding, { at: at2 }), 64 & bindingType || this.declareNameFromIdentifier(at2, bindingType);
          }
          declareNameFromIdentifier(identifier, binding) {
            this.scope.declareName(identifier.name, binding, identifier.loc.start);
          }
          checkToRestConversion(node, allowPattern) {
            switch (node.type) {
              case "ParenthesizedExpression":
                this.checkToRestConversion(node.expression, allowPattern);
                break;
              case "Identifier":
              case "MemberExpression":
                break;
              case "ArrayExpression":
              case "ObjectExpression":
                if (allowPattern)
                  break;
              default:
                this.raise(Errors.InvalidRestAssignmentPattern, { at: node });
            }
          }
          checkCommaAfterRest(close) {
            return !!this.match(12) && (this.raise(this.lookaheadCharCode() === close ? Errors.RestTrailingComma : Errors.ElementAfterRest, { at: this.state.startLoc }), true);
          }
        } {
          checkProto(prop, isRecord, protoRef, refExpressionErrors) {
            if ("SpreadElement" === prop.type || this.isObjectMethod(prop) || prop.computed || prop.shorthand)
              return;
            const key = prop.key;
            if ("__proto__" === ("Identifier" === key.type ? key.name : key.value)) {
              if (isRecord)
                return void this.raise(Errors.RecordNoProto, { at: key });
              protoRef.used && (refExpressionErrors ? null === refExpressionErrors.doubleProtoLoc && (refExpressionErrors.doubleProtoLoc = key.loc.start) : this.raise(Errors.DuplicateProto, { at: key })), protoRef.used = true;
            }
          }
          shouldExitDescending(expr, potentialArrowAt) {
            return "ArrowFunctionExpression" === expr.type && expr.start === potentialArrowAt;
          }
          getExpression() {
            this.enterInitialScopes(), this.nextToken();
            const expr = this.parseExpression();
            return this.match(135) || this.unexpected(), this.finalizeRemainingComments(), expr.comments = this.state.comments, expr.errors = this.state.errors, this.options.tokens && (expr.tokens = this.tokens), expr;
          }
          parseExpression(disallowIn, refExpressionErrors) {
            return disallowIn ? this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors)) : this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));
          }
          parseExpressionBase(refExpressionErrors) {
            const startPos = this.state.start, startLoc = this.state.startLoc, expr = this.parseMaybeAssign(refExpressionErrors);
            if (this.match(12)) {
              const node = this.startNodeAt(startPos, startLoc);
              for (node.expressions = [expr]; this.eat(12); )
                node.expressions.push(this.parseMaybeAssign(refExpressionErrors));
              return this.toReferencedList(node.expressions), this.finishNode(node, "SequenceExpression");
            }
            return expr;
          }
          parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {
            return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
          }
          parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {
            return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));
          }
          setOptionalParametersError(refExpressionErrors, resultError) {
            var _resultError$loc;
            refExpressionErrors.optionalParametersLoc = null != (_resultError$loc = null == resultError ? void 0 : resultError.loc) ? _resultError$loc : this.state.startLoc;
          }
          parseMaybeAssign(refExpressionErrors, afterLeftParse) {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            if (this.isContextual(105) && this.prodParam.hasYield) {
              let left2 = this.parseYield();
              return afterLeftParse && (left2 = afterLeftParse.call(this, left2, startPos, startLoc)), left2;
            }
            let ownExpressionErrors;
            refExpressionErrors ? ownExpressionErrors = false : (refExpressionErrors = new ExpressionErrors(), ownExpressionErrors = true);
            const { type } = this.state;
            (10 === type || tokenIsIdentifier(type)) && (this.state.potentialArrowAt = this.state.start);
            let left = this.parseMaybeConditional(refExpressionErrors);
            if (afterLeftParse && (left = afterLeftParse.call(this, left, startPos, startLoc)), (token = this.state.type) >= 29 && token <= 33) {
              const node = this.startNodeAt(startPos, startLoc), operator = this.state.value;
              return node.operator = operator, this.match(29) ? (this.toAssignable(left, true), node.left = left, null != refExpressionErrors.doubleProtoLoc && refExpressionErrors.doubleProtoLoc.index >= startPos && (refExpressionErrors.doubleProtoLoc = null), null != refExpressionErrors.shorthandAssignLoc && refExpressionErrors.shorthandAssignLoc.index >= startPos && (refExpressionErrors.shorthandAssignLoc = null), null != refExpressionErrors.privateKeyLoc && refExpressionErrors.privateKeyLoc.index >= startPos && (this.checkDestructuringPrivate(refExpressionErrors), refExpressionErrors.privateKeyLoc = null)) : node.left = left, this.next(), node.right = this.parseMaybeAssign(), this.checkLVal(left, { in: this.finishNode(node, "AssignmentExpression") }), node;
            }
            var token;
            return ownExpressionErrors && this.checkExpressionErrors(refExpressionErrors, true), left;
          }
          parseMaybeConditional(refExpressionErrors) {
            const startPos = this.state.start, startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprOps(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseConditional(expr, startPos, startLoc, refExpressionErrors);
          }
          parseConditional(expr, startPos, startLoc, refExpressionErrors) {
            if (this.eat(17)) {
              const node = this.startNodeAt(startPos, startLoc);
              return node.test = expr, node.consequent = this.parseMaybeAssignAllowIn(), this.expect(14), node.alternate = this.parseMaybeAssign(), this.finishNode(node, "ConditionalExpression");
            }
            return expr;
          }
          parseMaybeUnaryOrPrivate(refExpressionErrors) {
            return this.match(134) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);
          }
          parseExprOps(refExpressionErrors) {
            const startPos = this.state.start, startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseExprOp(expr, startPos, startLoc, -1);
          }
          parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {
            if (this.isPrivateName(left)) {
              const value = this.getPrivateNameSV(left);
              (minPrec >= tokenOperatorPrecedence(58) || !this.prodParam.hasIn || !this.match(58)) && this.raise(Errors.PrivateInExpectedIn, { at: left, identifierName: value }), this.classScope.usePrivateName(value, left.loc.start);
            }
            const op = this.state.type;
            if ((token = op) >= 39 && token <= 59 && (this.prodParam.hasIn || !this.match(58))) {
              let prec = tokenOperatorPrecedence(op);
              if (prec > minPrec) {
                if (39 === op) {
                  if (this.expectPlugin("pipelineOperator"), this.state.inFSharpPipelineDirectBody)
                    return left;
                  this.checkPipelineAtInfixOperator(left, leftStartLoc);
                }
                const node = this.startNodeAt(leftStartPos, leftStartLoc);
                node.left = left, node.operator = this.state.value;
                const logical = 41 === op || 42 === op, coalesce = 40 === op;
                if (coalesce && (prec = tokenOperatorPrecedence(42)), this.next(), 39 === op && this.hasPlugin(["pipelineOperator", { proposal: "minimal" }]) && 96 === this.state.type && this.prodParam.hasAwait)
                  throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, { at: this.state.startLoc });
                node.right = this.parseExprOpRightExpr(op, prec);
                const finishedNode = this.finishNode(node, logical || coalesce ? "LogicalExpression" : "BinaryExpression"), nextOp = this.state.type;
                if (coalesce && (41 === nextOp || 42 === nextOp) || logical && 40 === nextOp)
                  throw this.raise(Errors.MixingCoalesceWithLogical, { at: this.state.startLoc });
                return this.parseExprOp(finishedNode, leftStartPos, leftStartLoc, minPrec);
              }
            }
            var token;
            return left;
          }
          parseExprOpRightExpr(op, prec) {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            if (39 === op)
              switch (this.getPluginOption("pipelineOperator", "proposal")) {
                case "hack":
                  return this.withTopicBindingContext(() => this.parseHackPipeBody());
                case "smart":
                  return this.withTopicBindingContext(() => {
                    if (this.prodParam.hasYield && this.isContextual(105))
                      throw this.raise(Errors.PipeBodyIsTighter, { at: this.state.startLoc });
                    return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);
                  });
                case "fsharp":
                  return this.withSoloAwaitPermittingContext(() => this.parseFSharpPipelineBody(prec));
              }
            return this.parseExprOpBaseRightExpr(op, prec);
          }
          parseExprOpBaseRightExpr(op, prec) {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, 57 === op ? prec - 1 : prec);
          }
          parseHackPipeBody() {
            var _body$extra;
            const { startLoc } = this.state, body = this.parseMaybeAssign();
            return !UnparenthesizedPipeBodyDescriptions.has(body.type) || null != (_body$extra = body.extra) && _body$extra.parenthesized || this.raise(Errors.PipeUnparenthesizedBody, { at: startLoc, type: body.type }), this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipeTopicUnused, { at: startLoc }), body;
          }
          checkExponentialAfterUnary(node) {
            this.match(57) && this.raise(Errors.UnexpectedTokenUnaryExponentiation, { at: node.argument });
          }
          parseMaybeUnary(refExpressionErrors, sawUnary) {
            const startPos = this.state.start, startLoc = this.state.startLoc, isAwait = this.isContextual(96);
            if (isAwait && this.isAwaitAllowed()) {
              this.next();
              const expr2 = this.parseAwait(startPos, startLoc);
              return sawUnary || this.checkExponentialAfterUnary(expr2), expr2;
            }
            const update = this.match(34), node = this.startNode();
            if (token = this.state.type, tokenPrefixes[token]) {
              node.operator = this.state.value, node.prefix = true, this.match(72) && this.expectPlugin("throwExpressions");
              const isDelete = this.match(89);
              if (this.next(), node.argument = this.parseMaybeUnary(null, true), this.checkExpressionErrors(refExpressionErrors, true), this.state.strict && isDelete) {
                const arg = node.argument;
                "Identifier" === arg.type ? this.raise(Errors.StrictDelete, { at: node }) : this.hasPropertyAsPrivateName(arg) && this.raise(Errors.DeletePrivateField, { at: node });
              }
              if (!update)
                return sawUnary || this.checkExponentialAfterUnary(node), this.finishNode(node, "UnaryExpression");
            }
            var token;
            const expr = this.parseUpdate(node, update, refExpressionErrors);
            if (isAwait) {
              const { type } = this.state;
              if ((this.hasPlugin("v8intrinsic") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(54)) && !this.isAmbiguousAwait())
                return this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc }), this.parseAwait(startPos, startLoc);
            }
            return expr;
          }
          parseUpdate(node, update, refExpressionErrors) {
            if (update) {
              const updateExpressionNode = node;
              return this.checkLVal(updateExpressionNode.argument, { in: this.finishNode(updateExpressionNode, "UpdateExpression") }), node;
            }
            const startPos = this.state.start, startLoc = this.state.startLoc;
            let expr = this.parseExprSubscripts(refExpressionErrors);
            if (this.checkExpressionErrors(refExpressionErrors, false))
              return expr;
            for (; 34 === this.state.type && !this.canInsertSemicolon(); ) {
              const node2 = this.startNodeAt(startPos, startLoc);
              node2.operator = this.state.value, node2.prefix = false, node2.argument = expr, this.next(), this.checkLVal(expr, { in: expr = this.finishNode(node2, "UpdateExpression") });
            }
            return expr;
          }
          parseExprSubscripts(refExpressionErrors) {
            const startPos = this.state.start, startLoc = this.state.startLoc, potentialArrowAt = this.state.potentialArrowAt, expr = this.parseExprAtom(refExpressionErrors);
            return this.shouldExitDescending(expr, potentialArrowAt) ? expr : this.parseSubscripts(expr, startPos, startLoc);
          }
          parseSubscripts(base, startPos, startLoc, noCalls) {
            const state = { optionalChainMember: false, maybeAsyncArrow: this.atPossibleAsyncArrow(base), stop: false };
            do {
              base = this.parseSubscript(base, startPos, startLoc, noCalls, state), state.maybeAsyncArrow = false;
            } while (!state.stop);
            return base;
          }
          parseSubscript(base, startPos, startLoc, noCalls, state) {
            const { type } = this.state;
            if (!noCalls && 15 === type)
              return this.parseBind(base, startPos, startLoc, noCalls, state);
            if (tokenIsTemplate(type))
              return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);
            let optional = false;
            if (18 === type) {
              if (noCalls && 40 === this.lookaheadCharCode())
                return state.stop = true, base;
              state.optionalChainMember = optional = true, this.next();
            }
            if (!noCalls && this.match(10))
              return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);
            {
              const computed = this.eat(0);
              return computed || optional || this.eat(16) ? this.parseMember(base, startPos, startLoc, state, computed, optional) : (state.stop = true, base);
            }
          }
          parseMember(base, startPos, startLoc, state, computed, optional) {
            const node = this.startNodeAt(startPos, startLoc);
            return node.object = base, node.computed = computed, computed ? (node.property = this.parseExpression(), this.expect(3)) : this.match(134) ? ("Super" === base.type && this.raise(Errors.SuperPrivateField, { at: startLoc }), this.classScope.usePrivateName(this.state.value, this.state.startLoc), node.property = this.parsePrivateName()) : node.property = this.parseIdentifier(true), state.optionalChainMember ? (node.optional = optional, this.finishNode(node, "OptionalMemberExpression")) : this.finishNode(node, "MemberExpression");
          }
          parseBind(base, startPos, startLoc, noCalls, state) {
            const node = this.startNodeAt(startPos, startLoc);
            return node.object = base, this.next(), node.callee = this.parseNoCallExpr(), state.stop = true, this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
          }
          parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            let refExpressionErrors = null;
            this.state.maybeInArrowParameters = true, this.next();
            const node = this.startNodeAt(startPos, startLoc);
            node.callee = base;
            const { maybeAsyncArrow, optionalChainMember } = state;
            maybeAsyncArrow && (this.expressionScope.enter(new ArrowHeadParsingScope(2)), refExpressionErrors = new ExpressionErrors()), optionalChainMember && (node.optional = optional), node.arguments = optional ? this.parseCallExpressionArguments(11) : this.parseCallExpressionArguments(11, "Import" === base.type, "Super" !== base.type, node, refExpressionErrors);
            let finishedNode = this.finishCallExpression(node, optionalChainMember);
            return maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional ? (state.stop = true, this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), finishedNode = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), finishedNode)) : (maybeAsyncArrow && (this.checkExpressionErrors(refExpressionErrors, true), this.expressionScope.exit()), this.toReferencedArguments(finishedNode)), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, finishedNode;
          }
          toReferencedArguments(node, isParenthesizedExpr) {
            this.toReferencedListDeep(node.arguments, isParenthesizedExpr);
          }
          parseTaggedTemplateExpression(base, startPos, startLoc, state) {
            const node = this.startNodeAt(startPos, startLoc);
            return node.tag = base, node.quasi = this.parseTemplate(true), state.optionalChainMember && this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc }), this.finishNode(node, "TaggedTemplateExpression");
          }
          atPossibleAsyncArrow(base) {
            return "Identifier" === base.type && "async" === base.name && this.state.lastTokEndLoc.index === base.end && !this.canInsertSemicolon() && base.end - base.start == 5 && base.start === this.state.potentialArrowAt;
          }
          finishCallExpression(node, optional) {
            if ("Import" === node.callee.type)
              if (2 === node.arguments.length && (this.hasPlugin("moduleAttributes") || this.expectPlugin("importAssertions")), 0 === node.arguments.length || node.arguments.length > 2)
                this.raise(Errors.ImportCallArity, { at: node, maxArgumentCount: this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") ? 2 : 1 });
              else
                for (const arg of node.arguments)
                  "SpreadElement" === arg.type && this.raise(Errors.ImportCallSpreadArgument, { at: arg });
            return this.finishNode(node, optional ? "OptionalCallExpression" : "CallExpression");
          }
          parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {
            const elts = [];
            let first = true;
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            for (this.state.inFSharpPipelineDirectBody = false; !this.eat(close); ) {
              if (first)
                first = false;
              else if (this.expect(12), this.match(close)) {
                !dynamicImport || this.hasPlugin("importAssertions") || this.hasPlugin("moduleAttributes") || this.raise(Errors.ImportCallArgumentTrailingComma, { at: this.state.lastTokStartLoc }), nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
                break;
              }
              elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));
            }
            return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, elts;
          }
          shouldParseAsyncArrow() {
            return this.match(19) && !this.canInsertSemicolon();
          }
          parseAsyncArrowFromCallExpression(node, call) {
            var _call$extra;
            return this.resetPreviousNodeTrailingComments(call), this.expect(19), this.parseArrowExpression(node, call.arguments, true, null == (_call$extra = call.extra) ? void 0 : _call$extra.trailingCommaLoc), call.innerComments && setInnerComments(node, call.innerComments), call.callee.trailingComments && setInnerComments(node, call.callee.trailingComments), node;
          }
          parseNoCallExpr() {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
          }
          parseExprAtom(refExpressionErrors) {
            let node;
            const { type } = this.state;
            switch (type) {
              case 79:
                return this.parseSuper();
              case 83:
                return node = this.startNode(), this.next(), this.match(16) ? this.parseImportMetaProperty(node) : (this.match(10) || this.raise(Errors.UnsupportedImport, { at: this.state.lastTokStartLoc }), this.finishNode(node, "Import"));
              case 78:
                return node = this.startNode(), this.next(), this.finishNode(node, "ThisExpression");
              case 90:
                return this.parseDo(this.startNode(), false);
              case 56:
              case 31:
                return this.readRegexp(), this.parseRegExpLiteral(this.state.value);
              case 130:
                return this.parseNumericLiteral(this.state.value);
              case 131:
                return this.parseBigIntLiteral(this.state.value);
              case 132:
                return this.parseDecimalLiteral(this.state.value);
              case 129:
                return this.parseStringLiteral(this.state.value);
              case 84:
                return this.parseNullLiteral();
              case 85:
                return this.parseBooleanLiteral(true);
              case 86:
                return this.parseBooleanLiteral(false);
              case 10: {
                const canBeArrow = this.state.potentialArrowAt === this.state.start;
                return this.parseParenAndDistinguishExpression(canBeArrow);
              }
              case 2:
              case 1:
                return this.parseArrayLike(2 === this.state.type ? 4 : 3, false, true);
              case 0:
                return this.parseArrayLike(3, true, false, refExpressionErrors);
              case 6:
              case 7:
                return this.parseObjectLike(6 === this.state.type ? 9 : 8, false, true);
              case 5:
                return this.parseObjectLike(8, false, false, refExpressionErrors);
              case 68:
                return this.parseFunctionOrFunctionSent();
              case 26:
                this.parseDecorators();
              case 80:
                return node = this.startNode(), this.takeDecorators(node), this.parseClass(node, false);
              case 77:
                return this.parseNewOrNewTarget();
              case 25:
              case 24:
                return this.parseTemplate(false);
              case 15: {
                node = this.startNode(), this.next(), node.object = null;
                const callee = node.callee = this.parseNoCallExpr();
                if ("MemberExpression" === callee.type)
                  return this.finishNode(node, "BindExpression");
                throw this.raise(Errors.UnsupportedBind, { at: callee });
              }
              case 134:
                return this.raise(Errors.PrivateInExpectedIn, { at: this.state.startLoc, identifierName: this.state.value }), this.parsePrivateName();
              case 33:
                return this.parseTopicReferenceThenEqualsSign(54, "%");
              case 32:
                return this.parseTopicReferenceThenEqualsSign(44, "^");
              case 37:
              case 38:
                return this.parseTopicReference("hack");
              case 44:
              case 54:
              case 27: {
                const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
                if (pipeProposal)
                  return this.parseTopicReference(pipeProposal);
                throw this.unexpected();
              }
              case 47: {
                const lookaheadCh = this.input.codePointAt(this.nextTokenStart());
                if (isIdentifierStart2(lookaheadCh) || 62 === lookaheadCh) {
                  this.expectOnePlugin(["jsx", "flow", "typescript"]);
                  break;
                }
                throw this.unexpected();
              }
              default:
                if (tokenIsIdentifier(type)) {
                  if (this.isContextual(123) && 123 === this.lookaheadCharCode() && !this.hasFollowingLineBreak())
                    return this.parseModuleExpression();
                  const canBeArrow = this.state.potentialArrowAt === this.state.start, containsEsc = this.state.containsEsc, id = this.parseIdentifier();
                  if (!containsEsc && "async" === id.name && !this.canInsertSemicolon()) {
                    const { type: type2 } = this.state;
                    if (68 === type2)
                      return this.resetPreviousNodeTrailingComments(id), this.next(), this.parseFunction(this.startNodeAtNode(id), void 0, true);
                    if (tokenIsIdentifier(type2))
                      return 61 === this.lookaheadCharCode() ? this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id)) : id;
                    if (90 === type2)
                      return this.resetPreviousNodeTrailingComments(id), this.parseDo(this.startNodeAtNode(id), true);
                  }
                  return canBeArrow && this.match(19) && !this.canInsertSemicolon() ? (this.next(), this.parseArrowExpression(this.startNodeAtNode(id), [id], false)) : id;
                }
                throw this.unexpected();
            }
          }
          parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {
            const pipeProposal = this.getPluginOption("pipelineOperator", "proposal");
            if (pipeProposal)
              return this.state.type = topicTokenType, this.state.value = topicTokenValue, this.state.pos--, this.state.end--, this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1), this.parseTopicReference(pipeProposal);
            throw this.unexpected();
          }
          parseTopicReference(pipeProposal) {
            const node = this.startNode(), startLoc = this.state.startLoc, tokenType = this.state.type;
            return this.next(), this.finishTopicReference(node, startLoc, pipeProposal, tokenType);
          }
          finishTopicReference(node, startLoc, pipeProposal, tokenType) {
            if (this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)) {
              const nodeType = "smart" === pipeProposal ? "PipelinePrimaryTopicReference" : "TopicReference";
              return this.topicReferenceIsAllowedInCurrentContext() || this.raise("smart" === pipeProposal ? Errors.PrimaryTopicNotAllowed : Errors.PipeTopicUnbound, { at: startLoc }), this.registerTopicReference(), this.finishNode(node, nodeType);
            }
            throw this.raise(Errors.PipeTopicUnconfiguredToken, { at: startLoc, token: tokenLabelName(tokenType) });
          }
          testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType) {
            switch (pipeProposal) {
              case "hack":
                return this.hasPlugin(["pipelineOperator", { topicToken: tokenLabelName(tokenType) }]);
              case "smart":
                return 27 === tokenType;
              default:
                throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });
            }
          }
          parseAsyncArrowUnaryFunction(node) {
            this.prodParam.enter(functionFlags2(true, this.prodParam.hasYield));
            const params = [this.parseIdentifier()];
            return this.prodParam.exit(), this.hasPrecedingLineBreak() && this.raise(Errors.LineTerminatorBeforeArrow, { at: this.state.curPosition() }), this.expect(19), this.parseArrowExpression(node, params, true);
          }
          parseDo(node, isAsync) {
            this.expectPlugin("doExpressions"), isAsync && this.expectPlugin("asyncDoExpressions"), node.async = isAsync, this.next();
            const oldLabels = this.state.labels;
            return this.state.labels = [], isAsync ? (this.prodParam.enter(2), node.body = this.parseBlock(), this.prodParam.exit()) : node.body = this.parseBlock(), this.state.labels = oldLabels, this.finishNode(node, "DoExpression");
          }
          parseSuper() {
            const node = this.startNode();
            return this.next(), !this.match(10) || this.scope.allowDirectSuper || this.options.allowSuperOutsideMethod ? this.scope.allowSuper || this.options.allowSuperOutsideMethod || this.raise(Errors.UnexpectedSuper, { at: node }) : this.raise(Errors.SuperNotAllowed, { at: node }), this.match(10) || this.match(0) || this.match(16) || this.raise(Errors.UnsupportedSuper, { at: node }), this.finishNode(node, "Super");
          }
          parsePrivateName() {
            const node = this.startNode(), id = this.startNodeAt(this.state.start + 1, new Position3(this.state.curLine, this.state.start + 1 - this.state.lineStart, this.state.start + 1)), name = this.state.value;
            return this.next(), node.id = this.createIdentifier(id, name), this.finishNode(node, "PrivateName");
          }
          parseFunctionOrFunctionSent() {
            const node = this.startNode();
            if (this.next(), this.prodParam.hasYield && this.match(16)) {
              const meta = this.createIdentifier(this.startNodeAtNode(node), "function");
              return this.next(), this.match(102) ? this.expectPlugin("functionSent") : this.hasPlugin("functionSent") || this.unexpected(), this.parseMetaProperty(node, meta, "sent");
            }
            return this.parseFunction(node);
          }
          parseMetaProperty(node, meta, propertyName) {
            node.meta = meta;
            const containsEsc = this.state.containsEsc;
            return node.property = this.parseIdentifier(true), (node.property.name !== propertyName || containsEsc) && this.raise(Errors.UnsupportedMetaProperty, { at: node.property, target: meta.name, onlyValidPropertyName: propertyName }), this.finishNode(node, "MetaProperty");
          }
          parseImportMetaProperty(node) {
            const id = this.createIdentifier(this.startNodeAtNode(node), "import");
            return this.next(), this.isContextual(100) && (this.inModule || this.raise(Errors.ImportMetaOutsideModule, { at: id }), this.sawUnambiguousESM = true), this.parseMetaProperty(node, id, "meta");
          }
          parseLiteralAtNode(value, type, node) {
            return this.addExtra(node, "rawValue", value), this.addExtra(node, "raw", this.input.slice(node.start, this.state.end)), node.value = value, this.next(), this.finishNode(node, type);
          }
          parseLiteral(value, type) {
            const node = this.startNode();
            return this.parseLiteralAtNode(value, type, node);
          }
          parseStringLiteral(value) {
            return this.parseLiteral(value, "StringLiteral");
          }
          parseNumericLiteral(value) {
            return this.parseLiteral(value, "NumericLiteral");
          }
          parseBigIntLiteral(value) {
            return this.parseLiteral(value, "BigIntLiteral");
          }
          parseDecimalLiteral(value) {
            return this.parseLiteral(value, "DecimalLiteral");
          }
          parseRegExpLiteral(value) {
            const node = this.parseLiteral(value.value, "RegExpLiteral");
            return node.pattern = value.pattern, node.flags = value.flags, node;
          }
          parseBooleanLiteral(value) {
            const node = this.startNode();
            return node.value = value, this.next(), this.finishNode(node, "BooleanLiteral");
          }
          parseNullLiteral() {
            const node = this.startNode();
            return this.next(), this.finishNode(node, "NullLiteral");
          }
          parseParenAndDistinguishExpression(canBeArrow) {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            let val;
            this.next(), this.expressionScope.enter(new ArrowHeadParsingScope(1));
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters, oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.maybeInArrowParameters = true, this.state.inFSharpPipelineDirectBody = false;
            const innerStartPos = this.state.start, innerStartLoc = this.state.startLoc, exprList = [], refExpressionErrors = new ExpressionErrors();
            let spreadStartLoc, optionalCommaStartLoc, first = true;
            for (; !this.match(11); ) {
              if (first)
                first = false;
              else if (this.expect(12, null === refExpressionErrors.optionalParametersLoc ? null : refExpressionErrors.optionalParametersLoc), this.match(11)) {
                optionalCommaStartLoc = this.state.startLoc;
                break;
              }
              if (this.match(21)) {
                const spreadNodeStartPos = this.state.start, spreadNodeStartLoc = this.state.startLoc;
                if (spreadStartLoc = this.state.startLoc, exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc)), !this.checkCommaAfterRest(41))
                  break;
              } else
                exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));
            }
            const innerEndLoc = this.state.lastTokEndLoc;
            this.expect(11), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
            let arrowNode = this.startNodeAt(startPos, startLoc);
            return canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode)) ? (this.checkDestructuringPrivate(refExpressionErrors), this.expressionScope.validateAsPattern(), this.expressionScope.exit(), this.parseArrowExpression(arrowNode, exprList, false), arrowNode) : (this.expressionScope.exit(), exprList.length || this.unexpected(this.state.lastTokStartLoc), optionalCommaStartLoc && this.unexpected(optionalCommaStartLoc), spreadStartLoc && this.unexpected(spreadStartLoc), this.checkExpressionErrors(refExpressionErrors, true), this.toReferencedListDeep(exprList, true), exprList.length > 1 ? (val = this.startNodeAt(innerStartPos, innerStartLoc), val.expressions = exprList, this.finishNode(val, "SequenceExpression"), this.resetEndLocation(val, innerEndLoc)) : val = exprList[0], this.wrapParenthesis(startPos, startLoc, val));
          }
          wrapParenthesis(startPos, startLoc, expression) {
            if (!this.options.createParenthesizedExpressions)
              return this.addExtra(expression, "parenthesized", true), this.addExtra(expression, "parenStart", startPos), this.takeSurroundingComments(expression, startPos, this.state.lastTokEndLoc.index), expression;
            const parenExpression = this.startNodeAt(startPos, startLoc);
            return parenExpression.expression = expression, this.finishNode(parenExpression, "ParenthesizedExpression");
          }
          shouldParseArrow(params) {
            return !this.canInsertSemicolon();
          }
          parseArrow(node) {
            if (this.eat(19))
              return node;
          }
          parseParenItem(node, startPos, startLoc) {
            return node;
          }
          parseNewOrNewTarget() {
            const node = this.startNode();
            if (this.next(), this.match(16)) {
              const meta = this.createIdentifier(this.startNodeAtNode(node), "new");
              this.next();
              const metaProp = this.parseMetaProperty(node, meta, "target");
              return this.scope.inNonArrowFunction || this.scope.inClass || this.raise(Errors.UnexpectedNewTarget, { at: metaProp }), metaProp;
            }
            return this.parseNew(node);
          }
          parseNew(node) {
            if (this.parseNewCallee(node), this.eat(10)) {
              const args = this.parseExprList(11);
              this.toReferencedList(args), node.arguments = args;
            } else
              node.arguments = [];
            return this.finishNode(node, "NewExpression");
          }
          parseNewCallee(node) {
            node.callee = this.parseNoCallExpr(), "Import" === node.callee.type ? this.raise(Errors.ImportCallNotNewExpression, { at: node.callee }) : this.isOptionalChain(node.callee) ? this.raise(Errors.OptionalChainingNoNew, { at: this.state.lastTokEndLoc }) : this.eat(18) && this.raise(Errors.OptionalChainingNoNew, { at: this.state.startLoc });
          }
          parseTemplateElement(isTagged) {
            const { start, startLoc, end, value } = this.state, elemStart = start + 1, elem = this.startNodeAt(elemStart, createPositionWithColumnOffset(startLoc, 1));
            null === value && (isTagged || this.raise(Errors.InvalidEscapeSequenceTemplate, { at: createPositionWithColumnOffset(startLoc, 2) }));
            const isTail = this.match(24), endOffset = isTail ? -1 : -2, elemEnd = end + endOffset;
            elem.value = { raw: this.input.slice(elemStart, elemEnd).replace(/\r\n?/g, "\n"), cooked: null === value ? null : value.slice(1, endOffset) }, elem.tail = isTail, this.next();
            const finishedNode = this.finishNode(elem, "TemplateElement");
            return this.resetEndLocation(finishedNode, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset)), finishedNode;
          }
          parseTemplate(isTagged) {
            const node = this.startNode();
            node.expressions = [];
            let curElt = this.parseTemplateElement(isTagged);
            for (node.quasis = [curElt]; !curElt.tail; )
              node.expressions.push(this.parseTemplateSubstitution()), this.readTemplateContinuation(), node.quasis.push(curElt = this.parseTemplateElement(isTagged));
            return this.finishNode(node, "TemplateLiteral");
          }
          parseTemplateSubstitution() {
            return this.parseExpression();
          }
          parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {
            isRecord && this.expectPlugin("recordAndTuple");
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            const propHash = /* @__PURE__ */ Object.create(null);
            let first = true;
            const node = this.startNode();
            for (node.properties = [], this.next(); !this.match(close); ) {
              if (first)
                first = false;
              else if (this.expect(12), this.match(close)) {
                this.addTrailingCommaExtraToNode(node);
                break;
              }
              let prop;
              isPattern ? prop = this.parseBindingProperty() : (prop = this.parsePropertyDefinition(refExpressionErrors), this.checkProto(prop, isRecord, propHash, refExpressionErrors)), isRecord && !this.isObjectProperty(prop) && "SpreadElement" !== prop.type && this.raise(Errors.InvalidRecordProperty, { at: prop }), prop.shorthand && this.addExtra(prop, "shorthand", true), node.properties.push(prop);
            }
            this.next(), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;
            let type = "ObjectExpression";
            return isPattern ? type = "ObjectPattern" : isRecord && (type = "RecordExpression"), this.finishNode(node, type);
          }
          addTrailingCommaExtraToNode(node) {
            this.addExtra(node, "trailingComma", this.state.lastTokStart), this.addExtra(node, "trailingCommaLoc", this.state.lastTokStartLoc, false);
          }
          maybeAsyncOrAccessorProp(prop) {
            return !prop.computed && "Identifier" === prop.key.type && (this.isLiteralPropertyName() || this.match(0) || this.match(55));
          }
          parsePropertyDefinition(refExpressionErrors) {
            let decorators = [];
            if (this.match(26))
              for (this.hasPlugin("decorators") && this.raise(Errors.UnsupportedPropertyDecorator, { at: this.state.startLoc }); this.match(26); )
                decorators.push(this.parseDecorator());
            const prop = this.startNode();
            let startPos, startLoc, isAsync = false, isAccessor = false;
            if (this.match(21))
              return decorators.length && this.unexpected(), this.parseSpread();
            decorators.length && (prop.decorators = decorators, decorators = []), prop.method = false, refExpressionErrors && (startPos = this.state.start, startLoc = this.state.startLoc);
            let isGenerator = this.eat(55);
            this.parsePropertyNamePrefixOperator(prop);
            const containsEsc = this.state.containsEsc, key = this.parsePropertyName(prop, refExpressionErrors);
            if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {
              const keyName = key.name;
              "async" !== keyName || this.hasPrecedingLineBreak() || (isAsync = true, this.resetPreviousNodeTrailingComments(key), isGenerator = this.eat(55), this.parsePropertyName(prop)), "get" !== keyName && "set" !== keyName || (isAccessor = true, this.resetPreviousNodeTrailingComments(key), prop.kind = keyName, this.match(55) && (isGenerator = true, this.raise(Errors.AccessorIsGenerator, { at: this.state.curPosition(), kind: keyName }), this.next()), this.parsePropertyName(prop));
            }
            return this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);
          }
          getGetterSetterExpectedParamCount(method) {
            return "get" === method.kind ? 0 : 1;
          }
          getObjectOrClassMethodParams(method) {
            return method.params;
          }
          checkGetterSetterParams(method) {
            var _params;
            const paramCount = this.getGetterSetterExpectedParamCount(method), params = this.getObjectOrClassMethodParams(method);
            params.length !== paramCount && this.raise("get" === method.kind ? Errors.BadGetterArity : Errors.BadSetterArity, { at: method }), "set" === method.kind && "RestElement" === (null == (_params = params[params.length - 1]) ? void 0 : _params.type) && this.raise(Errors.BadSetterRestParameter, { at: method });
          }
          parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {
            if (isAccessor) {
              const finishedProp = this.parseMethod(prop, isGenerator, false, false, false, "ObjectMethod");
              return this.checkGetterSetterParams(finishedProp), finishedProp;
            }
            if (isAsync || isGenerator || this.match(10))
              return isPattern && this.unexpected(), prop.kind = "method", prop.method = true, this.parseMethod(prop, isGenerator, isAsync, false, false, "ObjectMethod");
          }
          parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {
            if (prop.shorthand = false, this.eat(14))
              return prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors), this.finishNode(prop, "ObjectProperty");
            if (!prop.computed && "Identifier" === prop.key.type) {
              if (this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false), isPattern)
                prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));
              else if (this.match(29)) {
                const shorthandAssignLoc = this.state.startLoc;
                null != refExpressionErrors ? null === refExpressionErrors.shorthandAssignLoc && (refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc) : this.raise(Errors.InvalidCoverInitializedName, { at: shorthandAssignLoc }), prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));
              } else
                prop.value = cloneIdentifier(prop.key);
              return prop.shorthand = true, this.finishNode(prop, "ObjectProperty");
            }
          }
          parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {
            const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);
            return node || this.unexpected(), node;
          }
          parsePropertyName(prop, refExpressionErrors) {
            if (this.eat(0))
              prop.computed = true, prop.key = this.parseMaybeAssignAllowIn(), this.expect(3);
            else {
              const { type, value } = this.state;
              let key;
              if (tokenIsKeywordOrIdentifier(type))
                key = this.parseIdentifier(true);
              else
                switch (type) {
                  case 130:
                    key = this.parseNumericLiteral(value);
                    break;
                  case 129:
                    key = this.parseStringLiteral(value);
                    break;
                  case 131:
                    key = this.parseBigIntLiteral(value);
                    break;
                  case 132:
                    key = this.parseDecimalLiteral(value);
                    break;
                  case 134: {
                    const privateKeyLoc = this.state.startLoc;
                    null != refExpressionErrors ? null === refExpressionErrors.privateKeyLoc && (refExpressionErrors.privateKeyLoc = privateKeyLoc) : this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc }), key = this.parsePrivateName();
                    break;
                  }
                  default:
                    throw this.unexpected();
                }
              prop.key = key, 134 !== type && (prop.computed = false);
            }
            return prop.key;
          }
          initFunction(node, isAsync) {
            node.id = null, node.generator = false, node.async = !!isAsync;
          }
          parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope = false) {
            this.initFunction(node, isAsync), node.generator = !!isGenerator;
            const allowModifiers = isConstructor;
            this.scope.enter(18 | (inClassScope ? 64 : 0) | (allowDirectSuper ? 32 : 0)), this.prodParam.enter(functionFlags2(isAsync, node.generator)), this.parseFunctionParams(node, allowModifiers);
            const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);
            return this.prodParam.exit(), this.scope.exit(), finishedNode;
          }
          parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {
            isTuple && this.expectPlugin("recordAndTuple");
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = false;
            const node = this.startNode();
            return this.next(), node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node), this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, this.finishNode(node, isTuple ? "TupleExpression" : "ArrayExpression");
          }
          parseArrowExpression(node, params, isAsync, trailingCommaLoc) {
            this.scope.enter(6);
            let flags = functionFlags2(isAsync, false);
            !this.match(5) && this.prodParam.hasIn && (flags |= 8), this.prodParam.enter(flags), this.initFunction(node, isAsync);
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            return params && (this.state.maybeInArrowParameters = true, this.setArrowFunctionParameters(node, params, trailingCommaLoc)), this.state.maybeInArrowParameters = false, this.parseFunctionBody(node, true), this.prodParam.exit(), this.scope.exit(), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, this.finishNode(node, "ArrowFunctionExpression");
          }
          setArrowFunctionParameters(node, params, trailingCommaLoc) {
            this.toAssignableList(params, trailingCommaLoc, false), node.params = params;
          }
          parseFunctionBodyAndFinish(node, type, isMethod = false) {
            return this.parseFunctionBody(node, false, isMethod), this.finishNode(node, type);
          }
          parseFunctionBody(node, allowExpression, isMethod = false) {
            const isExpression = allowExpression && !this.match(5);
            if (this.expressionScope.enter(newExpressionScope()), isExpression)
              node.body = this.parseMaybeAssign(), this.checkParams(node, false, allowExpression, false);
            else {
              const oldStrict = this.state.strict, oldLabels = this.state.labels;
              this.state.labels = [], this.prodParam.enter(4 | this.prodParam.currentFlags()), node.body = this.parseBlock(true, false, (hasStrictModeDirective) => {
                const nonSimple = !this.isSimpleParamList(node.params);
                hasStrictModeDirective && nonSimple && this.raise(Errors.IllegalLanguageModeDirective, { at: "method" !== node.kind && "constructor" !== node.kind || !node.key ? node : node.key.loc.end });
                const strictModeChanged = !oldStrict && this.state.strict;
                this.checkParams(node, !(this.state.strict || allowExpression || isMethod || nonSimple), allowExpression, strictModeChanged), this.state.strict && node.id && this.checkIdentifier(node.id, 65, strictModeChanged);
              }), this.prodParam.exit(), this.state.labels = oldLabels;
            }
            this.expressionScope.exit();
          }
          isSimpleParameter(node) {
            return "Identifier" === node.type;
          }
          isSimpleParamList(params) {
            for (let i = 0, len = params.length; i < len; i++)
              if (!this.isSimpleParameter(params[i]))
                return false;
            return true;
          }
          checkParams(node, allowDuplicates, isArrowFunction, strictModeChanged = true) {
            const checkClashes = !allowDuplicates && /* @__PURE__ */ new Set(), formalParameters = { type: "FormalParameters" };
            for (const param of node.params)
              this.checkLVal(param, { in: formalParameters, binding: 5, checkClashes, strictModeChanged });
          }
          parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {
            const elts = [];
            let first = true;
            for (; !this.eat(close); ) {
              if (first)
                first = false;
              else if (this.expect(12), this.match(close)) {
                nodeForExtra && this.addTrailingCommaExtraToNode(nodeForExtra), this.next();
                break;
              }
              elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));
            }
            return elts;
          }
          parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {
            let elt;
            if (this.match(12))
              allowEmpty || this.raise(Errors.UnexpectedToken, { at: this.state.curPosition(), unexpected: "," }), elt = null;
            else if (this.match(21)) {
              const spreadNodeStartPos = this.state.start, spreadNodeStartLoc = this.state.startLoc;
              elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);
            } else if (this.match(17)) {
              this.expectPlugin("partialApplication"), allowPlaceholder || this.raise(Errors.UnexpectedArgumentPlaceholder, { at: this.state.startLoc });
              const node = this.startNode();
              this.next(), elt = this.finishNode(node, "ArgumentPlaceholder");
            } else
              elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);
            return elt;
          }
          parseIdentifier(liberal) {
            const node = this.startNode(), name = this.parseIdentifierName(node.start, liberal);
            return this.createIdentifier(node, name);
          }
          createIdentifier(node, name) {
            return node.name = name, node.loc.identifierName = name, this.finishNode(node, "Identifier");
          }
          parseIdentifierName(pos, liberal) {
            let name;
            const { startLoc, type } = this.state;
            if (!tokenIsKeywordOrIdentifier(type))
              throw this.unexpected();
            name = this.state.value;
            const tokenIsKeyword2 = type <= 92;
            return liberal ? tokenIsKeyword2 && this.replaceToken(128) : this.checkReservedWord(name, startLoc, tokenIsKeyword2, false), this.next(), name;
          }
          checkReservedWord(word, startLoc, checkKeywords, isBinding) {
            if (word.length > 10)
              return;
            if (!function(word2) {
              return reservedWordLikeSet.has(word2);
            }(word))
              return;
            if ("yield" === word) {
              if (this.prodParam.hasYield)
                return void this.raise(Errors.YieldBindingIdentifier, { at: startLoc });
            } else if ("await" === word) {
              if (this.prodParam.hasAwait)
                return void this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });
              if (this.scope.inStaticBlock)
                return void this.raise(Errors.AwaitBindingIdentifierInStaticBlock, { at: startLoc });
              this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });
            } else if ("arguments" === word && this.scope.inClassAndNotInNonArrowFunction)
              return void this.raise(Errors.ArgumentsInClass, { at: startLoc });
            if (checkKeywords && function(word2) {
              return keywords2.has(word2);
            }(word))
              return void this.raise(Errors.UnexpectedKeyword, { at: startLoc, keyword: word });
            (this.state.strict ? isBinding ? isStrictBindReservedWord : isStrictReservedWord : isReservedWord)(word, this.inModule) && this.raise(Errors.UnexpectedReservedWord, { at: startLoc, reservedWord: word });
          }
          isAwaitAllowed() {
            return !!this.prodParam.hasAwait || !(!this.options.allowAwaitOutsideFunction || this.scope.inFunction);
          }
          parseAwait(startPos, startLoc) {
            const node = this.startNodeAt(startPos, startLoc);
            return this.expressionScope.recordParameterInitializerError(Errors.AwaitExpressionFormalParameter, { at: node }), this.eat(55) && this.raise(Errors.ObsoleteAwaitStar, { at: node }), this.scope.inFunction || this.options.allowAwaitOutsideFunction || (this.isAmbiguousAwait() ? this.ambiguousScriptDifferentAst = true : this.sawUnambiguousESM = true), this.state.soloAwait || (node.argument = this.parseMaybeUnary(null, true)), this.finishNode(node, "AwaitExpression");
          }
          isAmbiguousAwait() {
            if (this.hasPrecedingLineBreak())
              return true;
            const { type } = this.state;
            return 53 === type || 10 === type || 0 === type || tokenIsTemplate(type) || 133 === type || 56 === type || this.hasPlugin("v8intrinsic") && 54 === type;
          }
          parseYield() {
            const node = this.startNode();
            this.expressionScope.recordParameterInitializerError(Errors.YieldInParameter, { at: node }), this.next();
            let delegating = false, argument = null;
            if (!this.hasPrecedingLineBreak())
              switch (delegating = this.eat(55), this.state.type) {
                case 13:
                case 135:
                case 8:
                case 11:
                case 3:
                case 9:
                case 14:
                case 12:
                  if (!delegating)
                    break;
                default:
                  argument = this.parseMaybeAssign();
              }
            return node.delegate = delegating, node.argument = argument, this.finishNode(node, "YieldExpression");
          }
          checkPipelineAtInfixOperator(left, leftStartLoc) {
            this.hasPlugin(["pipelineOperator", { proposal: "smart" }]) && "SequenceExpression" === left.type && this.raise(Errors.PipelineHeadSequenceExpression, { at: leftStartLoc });
          }
          parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {
            if (this.isSimpleReference(childExpr)) {
              const bodyNode = this.startNodeAt(startPos, startLoc);
              return bodyNode.callee = childExpr, this.finishNode(bodyNode, "PipelineBareFunction");
            }
            {
              const bodyNode = this.startNodeAt(startPos, startLoc);
              return this.checkSmartPipeTopicBodyEarlyErrors(startLoc), bodyNode.expression = childExpr, this.finishNode(bodyNode, "PipelineTopicExpression");
            }
          }
          isSimpleReference(expression) {
            switch (expression.type) {
              case "MemberExpression":
                return !expression.computed && this.isSimpleReference(expression.object);
              case "Identifier":
                return true;
              default:
                return false;
            }
          }
          checkSmartPipeTopicBodyEarlyErrors(startLoc) {
            if (this.match(19))
              throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });
            this.topicReferenceWasUsedInCurrentContext() || this.raise(Errors.PipelineTopicUnused, { at: startLoc });
          }
          withTopicBindingContext(callback) {
            const outerContextTopicState = this.state.topicContext;
            this.state.topicContext = { maxNumOfResolvableTopics: 1, maxTopicIndex: null };
            try {
              return callback();
            } finally {
              this.state.topicContext = outerContextTopicState;
            }
          }
          withSmartMixTopicForbiddingContext(callback) {
            if (!this.hasPlugin(["pipelineOperator", { proposal: "smart" }]))
              return callback();
            {
              const outerContextTopicState = this.state.topicContext;
              this.state.topicContext = { maxNumOfResolvableTopics: 0, maxTopicIndex: null };
              try {
                return callback();
              } finally {
                this.state.topicContext = outerContextTopicState;
              }
            }
          }
          withSoloAwaitPermittingContext(callback) {
            const outerContextSoloAwaitState = this.state.soloAwait;
            this.state.soloAwait = true;
            try {
              return callback();
            } finally {
              this.state.soloAwait = outerContextSoloAwaitState;
            }
          }
          allowInAnd(callback) {
            const flags = this.prodParam.currentFlags();
            if (8 & ~flags) {
              this.prodParam.enter(8 | flags);
              try {
                return callback();
              } finally {
                this.prodParam.exit();
              }
            }
            return callback();
          }
          disallowInAnd(callback) {
            const flags = this.prodParam.currentFlags();
            if (8 & flags) {
              this.prodParam.enter(-9 & flags);
              try {
                return callback();
              } finally {
                this.prodParam.exit();
              }
            }
            return callback();
          }
          registerTopicReference() {
            this.state.topicContext.maxTopicIndex = 0;
          }
          topicReferenceIsAllowedInCurrentContext() {
            return this.state.topicContext.maxNumOfResolvableTopics >= 1;
          }
          topicReferenceWasUsedInCurrentContext() {
            return null != this.state.topicContext.maxTopicIndex && this.state.topicContext.maxTopicIndex >= 0;
          }
          parseFSharpPipelineBody(prec) {
            const startPos = this.state.start, startLoc = this.state.startLoc;
            this.state.potentialArrowAt = this.state.start;
            const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;
            this.state.inFSharpPipelineDirectBody = true;
            const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);
            return this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody, ret;
          }
          parseModuleExpression() {
            this.expectPlugin("moduleBlocks");
            const node = this.startNode();
            this.next(), this.eat(5);
            const revertScopes = this.initializeScopes(true);
            this.enterInitialScopes();
            const program = this.startNode();
            try {
              node.body = this.parseProgram(program, 8, "module");
            } finally {
              revertScopes();
            }
            return this.eat(8), this.finishNode(node, "ModuleExpression");
          }
          parsePropertyNamePrefixOperator(prop) {
          }
        } {
          parseTopLevel(file, program) {
            return file.program = this.parseProgram(program), file.comments = this.state.comments, this.options.tokens && (file.tokens = function(tokens, input) {
              for (let i = 0; i < tokens.length; i++) {
                const token = tokens[i], { type } = token;
                if ("number" == typeof type) {
                  if (134 === type) {
                    const { loc, start, value, end } = token, hashEndPos = start + 1, hashEndLoc = createPositionWithColumnOffset(loc.start, 1);
                    tokens.splice(i, 1, new Token3({ type: getExportedToken(27), value: "#", start, end: hashEndPos, startLoc: loc.start, endLoc: hashEndLoc }), new Token3({ type: getExportedToken(128), value, start: hashEndPos, end, startLoc: hashEndLoc, endLoc: loc.end })), i++;
                    continue;
                  }
                  if (tokenIsTemplate(type)) {
                    const { loc, start, value, end } = token, backquoteEnd = start + 1, backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);
                    let startToken, templateValue, templateElementEnd, templateElementEndLoc, endToken;
                    startToken = 96 === input.charCodeAt(start) ? new Token3({ type: getExportedToken(22), value: "`", start, end: backquoteEnd, startLoc: loc.start, endLoc: backquoteEndLoc }) : new Token3({ type: getExportedToken(8), value: "}", start, end: backquoteEnd, startLoc: loc.start, endLoc: backquoteEndLoc }), 24 === type ? (templateElementEnd = end - 1, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1), templateValue = null === value ? null : value.slice(1, -1), endToken = new Token3({ type: getExportedToken(22), value: "`", start: templateElementEnd, end, startLoc: templateElementEndLoc, endLoc: loc.end })) : (templateElementEnd = end - 2, templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2), templateValue = null === value ? null : value.slice(1, -2), endToken = new Token3({ type: getExportedToken(23), value: "${", start: templateElementEnd, end, startLoc: templateElementEndLoc, endLoc: loc.end })), tokens.splice(i, 1, startToken, new Token3({ type: getExportedToken(20), value: templateValue, start: backquoteEnd, end: templateElementEnd, startLoc: backquoteEndLoc, endLoc: templateElementEndLoc }), endToken), i += 2;
                    continue;
                  }
                  token.type = getExportedToken(type);
                }
              }
              return tokens;
            }(this.tokens, this.input)), this.finishNode(file, "File");
          }
          parseProgram(program, end = 135, sourceType = this.options.sourceType) {
            if (program.sourceType = sourceType, program.interpreter = this.parseInterpreterDirective(), this.parseBlockBody(program, true, true, end), this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0)
              for (const [localName, at2] of Array.from(this.scope.undefinedExports))
                this.raise(Errors.ModuleExportUndefined, { at: at2, localName });
            return this.finishNode(program, "Program");
          }
          stmtToDirective(stmt) {
            const directive = stmt;
            directive.type = "Directive", directive.value = directive.expression, delete directive.expression;
            const directiveLiteral = directive.value, expressionValue = directiveLiteral.value, raw = this.input.slice(directiveLiteral.start, directiveLiteral.end), val = directiveLiteral.value = raw.slice(1, -1);
            return this.addExtra(directiveLiteral, "raw", raw), this.addExtra(directiveLiteral, "rawValue", val), this.addExtra(directiveLiteral, "expressionValue", expressionValue), directiveLiteral.type = "DirectiveLiteral", directive;
          }
          parseInterpreterDirective() {
            if (!this.match(28))
              return null;
            const node = this.startNode();
            return node.value = this.state.value, this.next(), this.finishNode(node, "InterpreterDirective");
          }
          isLet(context) {
            return !!this.isContextual(99) && this.isLetKeyword(context);
          }
          isLetKeyword(context) {
            const next = this.nextTokenStart(), nextCh = this.codePointAtPos(next);
            if (92 === nextCh || 91 === nextCh)
              return true;
            if (context)
              return false;
            if (123 === nextCh)
              return true;
            if (isIdentifierStart2(nextCh)) {
              if (keywordRelationalOperator2.lastIndex = next, keywordRelationalOperator2.test(this.input)) {
                const endCh = this.codePointAtPos(keywordRelationalOperator2.lastIndex);
                if (!isIdentifierChar2(endCh) && 92 !== endCh)
                  return false;
              }
              return true;
            }
            return false;
          }
          parseStatement(context, topLevel) {
            return this.match(26) && this.parseDecorators(true), this.parseStatementContent(context, topLevel);
          }
          parseStatementContent(context, topLevel) {
            let starttype = this.state.type;
            const node = this.startNode();
            let kind;
            switch (this.isLet(context) && (starttype = 74, kind = "let"), starttype) {
              case 60:
                return this.parseBreakContinueStatement(node, true);
              case 63:
                return this.parseBreakContinueStatement(node, false);
              case 64:
                return this.parseDebuggerStatement(node);
              case 90:
                return this.parseDoStatement(node);
              case 91:
                return this.parseForStatement(node);
              case 68:
                if (46 === this.lookaheadCharCode())
                  break;
                return context && (this.state.strict ? this.raise(Errors.StrictFunction, { at: this.state.startLoc }) : "if" !== context && "label" !== context && this.raise(Errors.SloppyFunction, { at: this.state.startLoc })), this.parseFunctionStatement(node, false, !context);
              case 80:
                return context && this.unexpected(), this.parseClass(node, true);
              case 69:
                return this.parseIfStatement(node);
              case 70:
                return this.parseReturnStatement(node);
              case 71:
                return this.parseSwitchStatement(node);
              case 72:
                return this.parseThrowStatement(node);
              case 73:
                return this.parseTryStatement(node);
              case 75:
              case 74:
                return kind = kind || this.state.value, context && "var" !== kind && this.raise(Errors.UnexpectedLexicalDeclaration, { at: this.state.startLoc }), this.parseVarStatement(node, kind);
              case 92:
                return this.parseWhileStatement(node);
              case 76:
                return this.parseWithStatement(node);
              case 5:
                return this.parseBlock();
              case 13:
                return this.parseEmptyStatement(node);
              case 83: {
                const nextTokenCharCode = this.lookaheadCharCode();
                if (40 === nextTokenCharCode || 46 === nextTokenCharCode)
                  break;
              }
              case 82: {
                let result;
                return this.options.allowImportExportEverywhere || topLevel || this.raise(Errors.UnexpectedImportExport, { at: this.state.startLoc }), this.next(), 83 === starttype ? (result = this.parseImport(node), "ImportDeclaration" !== result.type || result.importKind && "value" !== result.importKind || (this.sawUnambiguousESM = true)) : (result = this.parseExport(node), ("ExportNamedDeclaration" !== result.type || result.exportKind && "value" !== result.exportKind) && ("ExportAllDeclaration" !== result.type || result.exportKind && "value" !== result.exportKind) && "ExportDefaultDeclaration" !== result.type || (this.sawUnambiguousESM = true)), this.assertModuleNodeAllowed(result), result;
              }
              default:
                if (this.isAsyncFunction())
                  return context && this.raise(Errors.AsyncFunctionInSingleStatementContext, { at: this.state.startLoc }), this.next(), this.parseFunctionStatement(node, true, !context);
            }
            const maybeName = this.state.value, expr = this.parseExpression();
            return tokenIsIdentifier(starttype) && "Identifier" === expr.type && this.eat(14) ? this.parseLabeledStatement(node, maybeName, expr, context) : this.parseExpressionStatement(node, expr);
          }
          assertModuleNodeAllowed(node) {
            this.options.allowImportExportEverywhere || this.inModule || this.raise(Errors.ImportOutsideModule, { at: node });
          }
          takeDecorators(node) {
            const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
            decorators.length && (node.decorators = decorators, this.resetStartLocationFromNode(node, decorators[0]), this.state.decoratorStack[this.state.decoratorStack.length - 1] = []);
          }
          canHaveLeadingDecorator() {
            return this.match(80);
          }
          parseDecorators(allowExport) {
            const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];
            for (; this.match(26); ) {
              const decorator = this.parseDecorator();
              currentContextDecorators.push(decorator);
            }
            if (this.match(82))
              allowExport || this.unexpected(), this.hasPlugin("decorators") && !this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });
            else if (!this.canHaveLeadingDecorator())
              throw this.raise(Errors.UnexpectedLeadingDecorator, { at: this.state.startLoc });
          }
          parseDecorator() {
            this.expectOnePlugin(["decorators", "decorators-legacy"]);
            const node = this.startNode();
            if (this.next(), this.hasPlugin("decorators")) {
              this.state.decoratorStack.push([]);
              const startPos = this.state.start, startLoc = this.state.startLoc;
              let expr;
              if (this.match(10)) {
                const startPos2 = this.state.start, startLoc2 = this.state.startLoc;
                this.next(), expr = this.parseExpression(), this.expect(11), expr = this.wrapParenthesis(startPos2, startLoc2, expr);
                const paramsStartLoc = this.state.startLoc;
                node.expression = this.parseMaybeDecoratorArguments(expr), false === this.getPluginOption("decorators", "allowCallParenthesized") && node.expression !== expr && this.raise(Errors.DecoratorArgumentsOutsideParentheses, { at: paramsStartLoc });
              } else {
                for (expr = this.parseIdentifier(false); this.eat(16); ) {
                  const node2 = this.startNodeAt(startPos, startLoc);
                  node2.object = expr, this.match(134) ? (this.classScope.usePrivateName(this.state.value, this.state.startLoc), node2.property = this.parsePrivateName()) : node2.property = this.parseIdentifier(true), node2.computed = false, expr = this.finishNode(node2, "MemberExpression");
                }
                node.expression = this.parseMaybeDecoratorArguments(expr);
              }
              this.state.decoratorStack.pop();
            } else
              node.expression = this.parseExprSubscripts();
            return this.finishNode(node, "Decorator");
          }
          parseMaybeDecoratorArguments(expr) {
            if (this.eat(10)) {
              const node = this.startNodeAtNode(expr);
              return node.callee = expr, node.arguments = this.parseCallExpressionArguments(11, false), this.toReferencedList(node.arguments), this.finishNode(node, "CallExpression");
            }
            return expr;
          }
          parseBreakContinueStatement(node, isBreak) {
            return this.next(), this.isLineTerminator() ? node.label = null : (node.label = this.parseIdentifier(), this.semicolon()), this.verifyBreakContinue(node, isBreak), this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
          }
          verifyBreakContinue(node, isBreak) {
            let i;
            for (i = 0; i < this.state.labels.length; ++i) {
              const lab = this.state.labels[i];
              if (null == node.label || lab.name === node.label.name) {
                if (null != lab.kind && (isBreak || "loop" === lab.kind))
                  break;
                if (node.label && isBreak)
                  break;
              }
            }
            if (i === this.state.labels.length) {
              const type = isBreak ? "BreakStatement" : "ContinueStatement";
              this.raise(Errors.IllegalBreakContinue, { at: node, type });
            }
          }
          parseDebuggerStatement(node) {
            return this.next(), this.semicolon(), this.finishNode(node, "DebuggerStatement");
          }
          parseHeaderExpression() {
            this.expect(10);
            const val = this.parseExpression();
            return this.expect(11), val;
          }
          parseDoStatement(node) {
            return this.next(), this.state.labels.push(loopLabel2), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("do")), this.state.labels.pop(), this.expect(92), node.test = this.parseHeaderExpression(), this.eat(13), this.finishNode(node, "DoWhileStatement");
          }
          parseForStatement(node) {
            this.next(), this.state.labels.push(loopLabel2);
            let awaitAt = null;
            if (this.isAwaitAllowed() && this.eatContextual(96) && (awaitAt = this.state.lastTokStartLoc), this.scope.enter(0), this.expect(10), this.match(13))
              return null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, null);
            const startsWithLet = this.isContextual(99), isLet = startsWithLet && this.isLetKeyword();
            if (this.match(74) || this.match(75) || isLet) {
              const initNode = this.startNode(), kind = isLet ? "let" : this.state.value;
              this.next(), this.parseVar(initNode, true, kind);
              const init2 = this.finishNode(initNode, "VariableDeclaration");
              return (this.match(58) || this.isContextual(101)) && 1 === init2.declarations.length ? this.parseForIn(node, init2, awaitAt) : (null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, init2));
            }
            const startsWithAsync = this.isContextual(95), refExpressionErrors = new ExpressionErrors(), init = this.parseExpression(true, refExpressionErrors), isForOf = this.isContextual(101);
            if (isForOf && (startsWithLet && this.raise(Errors.ForOfLet, { at: init }), null === awaitAt && startsWithAsync && "Identifier" === init.type && this.raise(Errors.ForOfAsync, { at: init })), isForOf || this.match(58)) {
              this.checkDestructuringPrivate(refExpressionErrors), this.toAssignable(init, true);
              const type = isForOf ? "ForOfStatement" : "ForInStatement";
              return this.checkLVal(init, { in: { type } }), this.parseForIn(node, init, awaitAt);
            }
            return this.checkExpressionErrors(refExpressionErrors, true), null !== awaitAt && this.unexpected(awaitAt), this.parseFor(node, init);
          }
          parseFunctionStatement(node, isAsync, declarationPosition) {
            return this.next(), this.parseFunction(node, 1 | (declarationPosition ? 0 : 2), isAsync);
          }
          parseIfStatement(node) {
            return this.next(), node.test = this.parseHeaderExpression(), node.consequent = this.parseStatement("if"), node.alternate = this.eat(66) ? this.parseStatement("if") : null, this.finishNode(node, "IfStatement");
          }
          parseReturnStatement(node) {
            return this.prodParam.hasReturn || this.options.allowReturnOutsideFunction || this.raise(Errors.IllegalReturn, { at: this.state.startLoc }), this.next(), this.isLineTerminator() ? node.argument = null : (node.argument = this.parseExpression(), this.semicolon()), this.finishNode(node, "ReturnStatement");
          }
          parseSwitchStatement(node) {
            this.next(), node.discriminant = this.parseHeaderExpression();
            const cases = node.cases = [];
            let cur, sawDefault;
            for (this.expect(5), this.state.labels.push(switchLabel2), this.scope.enter(0); !this.match(8); )
              if (this.match(61) || this.match(65)) {
                const isCase = this.match(61);
                cur && this.finishNode(cur, "SwitchCase"), cases.push(cur = this.startNode()), cur.consequent = [], this.next(), isCase ? cur.test = this.parseExpression() : (sawDefault && this.raise(Errors.MultipleDefaultsInSwitch, { at: this.state.lastTokStartLoc }), sawDefault = true, cur.test = null), this.expect(14);
              } else
                cur ? cur.consequent.push(this.parseStatement(null)) : this.unexpected();
            return this.scope.exit(), cur && this.finishNode(cur, "SwitchCase"), this.next(), this.state.labels.pop(), this.finishNode(node, "SwitchStatement");
          }
          parseThrowStatement(node) {
            return this.next(), this.hasPrecedingLineBreak() && this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc }), node.argument = this.parseExpression(), this.semicolon(), this.finishNode(node, "ThrowStatement");
          }
          parseCatchClauseParam() {
            const param = this.parseBindingAtom(), simple = "Identifier" === param.type;
            return this.scope.enter(simple ? 8 : 0), this.checkLVal(param, { in: { type: "CatchClause" }, binding: 9, allowingSloppyLetBinding: true }), param;
          }
          parseTryStatement(node) {
            if (this.next(), node.block = this.parseBlock(), node.handler = null, this.match(62)) {
              const clause = this.startNode();
              this.next(), this.match(10) ? (this.expect(10), clause.param = this.parseCatchClauseParam(), this.expect(11)) : (clause.param = null, this.scope.enter(0)), clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false)), this.scope.exit(), node.handler = this.finishNode(clause, "CatchClause");
            }
            return node.finalizer = this.eat(67) ? this.parseBlock() : null, node.handler || node.finalizer || this.raise(Errors.NoCatchOrFinally, { at: node }), this.finishNode(node, "TryStatement");
          }
          parseVarStatement(node, kind, allowMissingInitializer = false) {
            return this.next(), this.parseVar(node, false, kind, allowMissingInitializer), this.semicolon(), this.finishNode(node, "VariableDeclaration");
          }
          parseWhileStatement(node) {
            return this.next(), node.test = this.parseHeaderExpression(), this.state.labels.push(loopLabel2), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("while")), this.state.labels.pop(), this.finishNode(node, "WhileStatement");
          }
          parseWithStatement(node) {
            return this.state.strict && this.raise(Errors.StrictWith, { at: this.state.startLoc }), this.next(), node.object = this.parseHeaderExpression(), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("with")), this.finishNode(node, "WithStatement");
          }
          parseEmptyStatement(node) {
            return this.next(), this.finishNode(node, "EmptyStatement");
          }
          parseLabeledStatement(node, maybeName, expr, context) {
            for (const label of this.state.labels)
              label.name === maybeName && this.raise(Errors.LabelRedeclaration, { at: expr, labelName: maybeName });
            const kind = (token = this.state.type) >= 90 && token <= 92 ? "loop" : this.match(71) ? "switch" : null;
            var token;
            for (let i = this.state.labels.length - 1; i >= 0; i--) {
              const label = this.state.labels[i];
              if (label.statementStart !== node.start)
                break;
              label.statementStart = this.state.start, label.kind = kind;
            }
            return this.state.labels.push({ name: maybeName, kind, statementStart: this.state.start }), node.body = this.parseStatement(context ? -1 === context.indexOf("label") ? context + "label" : context : "label"), this.state.labels.pop(), node.label = expr, this.finishNode(node, "LabeledStatement");
          }
          parseExpressionStatement(node, expr) {
            return node.expression = expr, this.semicolon(), this.finishNode(node, "ExpressionStatement");
          }
          parseBlock(allowDirectives = false, createNewLexicalScope = true, afterBlockParse) {
            const node = this.startNode();
            return allowDirectives && this.state.strictErrors.clear(), this.expect(5), createNewLexicalScope && this.scope.enter(0), this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse), createNewLexicalScope && this.scope.exit(), this.finishNode(node, "BlockStatement");
          }
          isValidDirective(stmt) {
            return "ExpressionStatement" === stmt.type && "StringLiteral" === stmt.expression.type && !stmt.expression.extra.parenthesized;
          }
          parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {
            const body = node.body = [], directives = node.directives = [];
            this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : void 0, topLevel, end, afterBlockParse);
          }
          parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {
            const oldStrict = this.state.strict;
            let hasStrictModeDirective = false, parsedNonDirective = false;
            for (; !this.match(end); ) {
              const stmt = this.parseStatement(null, topLevel);
              if (directives && !parsedNonDirective) {
                if (this.isValidDirective(stmt)) {
                  const directive = this.stmtToDirective(stmt);
                  directives.push(directive), hasStrictModeDirective || "use strict" !== directive.value.value || (hasStrictModeDirective = true, this.setStrict(true));
                  continue;
                }
                parsedNonDirective = true, this.state.strictErrors.clear();
              }
              body.push(stmt);
            }
            afterBlockParse && afterBlockParse.call(this, hasStrictModeDirective), oldStrict || this.setStrict(false), this.next();
          }
          parseFor(node, init) {
            return node.init = init, this.semicolon(false), node.test = this.match(13) ? null : this.parseExpression(), this.semicolon(false), node.update = this.match(11) ? null : this.parseExpression(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for")), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, "ForStatement");
          }
          parseForIn(node, init, awaitAt) {
            const isForIn = this.match(58);
            return this.next(), isForIn ? null !== awaitAt && this.unexpected(awaitAt) : node.await = null !== awaitAt, "VariableDeclaration" !== init.type || null == init.declarations[0].init || isForIn && !this.state.strict && "var" === init.kind && "Identifier" === init.declarations[0].id.type || this.raise(Errors.ForInOfLoopInitializer, { at: init, type: isForIn ? "ForInStatement" : "ForOfStatement" }), "AssignmentPattern" === init.type && this.raise(Errors.InvalidLhs, { at: init, ancestor: { type: "ForStatement" } }), node.left = init, node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn(), this.expect(11), node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement("for")), this.scope.exit(), this.state.labels.pop(), this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
          }
          parseVar(node, isFor, kind, allowMissingInitializer = false) {
            const declarations = node.declarations = [];
            for (node.kind = kind; ; ) {
              const decl = this.startNode();
              if (this.parseVarId(decl, kind), decl.init = this.eat(29) ? isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn() : null, null !== decl.init || allowMissingInitializer || ("Identifier" === decl.id.type || isFor && (this.match(58) || this.isContextual(101)) ? "const" !== kind || this.match(58) || this.isContextual(101) || this.raise(Errors.DeclarationMissingInitializer, { at: this.state.lastTokEndLoc, kind: "const" }) : this.raise(Errors.DeclarationMissingInitializer, { at: this.state.lastTokEndLoc, kind: "destructuring" })), declarations.push(this.finishNode(decl, "VariableDeclarator")), !this.eat(12))
                break;
            }
            return node;
          }
          parseVarId(decl, kind) {
            decl.id = this.parseBindingAtom(), this.checkLVal(decl.id, { in: { type: "VariableDeclarator" }, binding: "var" === kind ? 5 : 9 });
          }
          parseFunction(node, statement = 0, isAsync = false) {
            const isStatement = 1 & statement, isHangingStatement = 2 & statement, requireId = !(!isStatement || 4 & statement);
            this.initFunction(node, isAsync), this.match(55) && isHangingStatement && this.raise(Errors.GeneratorInSingleStatementContext, { at: this.state.startLoc }), node.generator = this.eat(55), isStatement && (node.id = this.parseFunctionId(requireId));
            const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;
            return this.state.maybeInArrowParameters = false, this.scope.enter(2), this.prodParam.enter(functionFlags2(isAsync, node.generator)), isStatement || (node.id = this.parseFunctionId()), this.parseFunctionParams(node, false), this.withSmartMixTopicForbiddingContext(() => {
              this.parseFunctionBodyAndFinish(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
            }), this.prodParam.exit(), this.scope.exit(), isStatement && !isHangingStatement && this.registerFunctionStatementId(node), this.state.maybeInArrowParameters = oldMaybeInArrowParameters, node;
          }
          parseFunctionId(requireId) {
            return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;
          }
          parseFunctionParams(node, allowModifiers) {
            this.expect(10), this.expressionScope.enter(new ExpressionScope(3)), node.params = this.parseBindingList(11, 41, false, allowModifiers), this.expressionScope.exit();
          }
          registerFunctionStatementId(node) {
            node.id && this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? 5 : 9 : 17, node.id.loc.start);
          }
          parseClass(node, isStatement, optionalId) {
            this.next(), this.takeDecorators(node);
            const oldStrict = this.state.strict;
            return this.state.strict = true, this.parseClassId(node, isStatement, optionalId), this.parseClassSuper(node), node.body = this.parseClassBody(!!node.superClass, oldStrict), this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
          }
          isClassProperty() {
            return this.match(29) || this.match(13) || this.match(8);
          }
          isClassMethod() {
            return this.match(10);
          }
          isNonstaticConstructor(method) {
            return !(method.computed || method.static || "constructor" !== method.key.name && "constructor" !== method.key.value);
          }
          parseClassBody(hadSuperClass, oldStrict) {
            this.classScope.enter();
            const state = { hadConstructor: false, hadSuperClass };
            let decorators = [];
            const classBody = this.startNode();
            if (classBody.body = [], this.expect(5), this.withSmartMixTopicForbiddingContext(() => {
              for (; !this.match(8); ) {
                if (this.eat(13)) {
                  if (decorators.length > 0)
                    throw this.raise(Errors.DecoratorSemicolon, { at: this.state.lastTokEndLoc });
                  continue;
                }
                if (this.match(26)) {
                  decorators.push(this.parseDecorator());
                  continue;
                }
                const member = this.startNode();
                decorators.length && (member.decorators = decorators, this.resetStartLocationFromNode(member, decorators[0]), decorators = []), this.parseClassMember(classBody, member, state), "constructor" === member.kind && member.decorators && member.decorators.length > 0 && this.raise(Errors.DecoratorConstructor, { at: member });
              }
            }), this.state.strict = oldStrict, this.next(), decorators.length)
              throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });
            return this.classScope.exit(), this.finishNode(classBody, "ClassBody");
          }
          parseClassMemberFromModifier(classBody, member) {
            const key = this.parseIdentifier(true);
            if (this.isClassMethod()) {
              const method = member;
              return method.kind = "method", method.computed = false, method.key = key, method.static = false, this.pushClassMethod(classBody, method, false, false, false, false), true;
            }
            if (this.isClassProperty()) {
              const prop = member;
              return prop.computed = false, prop.key = key, prop.static = false, classBody.body.push(this.parseClassProperty(prop)), true;
            }
            return this.resetPreviousNodeTrailingComments(key), false;
          }
          parseClassMember(classBody, member, state) {
            const isStatic = this.isContextual(104);
            if (isStatic) {
              if (this.parseClassMemberFromModifier(classBody, member))
                return;
              if (this.eat(5))
                return void this.parseClassStaticBlock(classBody, member);
            }
            this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);
          }
          parseClassMemberWithIsStatic(classBody, member, state, isStatic) {
            const publicMethod = member, privateMethod = member, publicProp = member, privateProp = member, accessorProp = member, method = publicMethod, publicMember = publicMethod;
            if (member.static = isStatic, this.parsePropertyNamePrefixOperator(member), this.eat(55)) {
              method.kind = "method";
              const isPrivateName = this.match(134);
              return this.parseClassElementName(method), isPrivateName ? void this.pushClassPrivateMethod(classBody, privateMethod, true, false) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsGenerator, { at: publicMethod.key }), void this.pushClassMethod(classBody, publicMethod, true, false, false, false));
            }
            const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc, isPrivate = this.match(134), key = this.parseClassElementName(member), maybeQuestionTokenStartLoc = this.state.startLoc;
            if (this.parsePostMemberNameModifiers(publicMember), this.isClassMethod()) {
              if (method.kind = "method", isPrivate)
                return void this.pushClassPrivateMethod(classBody, privateMethod, false, false);
              const isConstructor = this.isNonstaticConstructor(publicMethod);
              let allowsDirectSuper = false;
              isConstructor && (publicMethod.kind = "constructor", state.hadConstructor && !this.hasPlugin("typescript") && this.raise(Errors.DuplicateConstructor, { at: key }), isConstructor && this.hasPlugin("typescript") && member.override && this.raise(Errors.OverrideOnConstructor, { at: key }), state.hadConstructor = true, allowsDirectSuper = state.hadSuperClass), this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);
            } else if (this.isClassProperty())
              isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp);
            else if (isContextual && "async" === key.name && !this.isLineTerminator()) {
              this.resetPreviousNodeTrailingComments(key);
              const isGenerator = this.eat(55);
              publicMember.optional && this.unexpected(maybeQuestionTokenStartLoc), method.kind = "method";
              const isPrivate2 = this.match(134);
              this.parseClassElementName(method), this.parsePostMemberNameModifiers(publicMember), isPrivate2 ? this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key }), this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false));
            } else if (!isContextual || "get" !== key.name && "set" !== key.name || this.match(55) && this.isLineTerminator())
              if (isContextual && "accessor" === key.name && !this.isLineTerminator()) {
                this.expectPlugin("decoratorAutoAccessors"), this.resetPreviousNodeTrailingComments(key);
                const isPrivate2 = this.match(134);
                this.parseClassElementName(publicProp), this.pushClassAccessorProperty(classBody, accessorProp, isPrivate2);
              } else
                this.isLineTerminator() ? isPrivate ? this.pushClassPrivateProperty(classBody, privateProp) : this.pushClassProperty(classBody, publicProp) : this.unexpected();
            else {
              this.resetPreviousNodeTrailingComments(key), method.kind = key.name;
              const isPrivate2 = this.match(134);
              this.parseClassElementName(publicMethod), isPrivate2 ? this.pushClassPrivateMethod(classBody, privateMethod, false, false) : (this.isNonstaticConstructor(publicMethod) && this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key }), this.pushClassMethod(classBody, publicMethod, false, false, false, false)), this.checkGetterSetterParams(publicMethod);
            }
          }
          parseClassElementName(member) {
            const { type, value } = this.state;
            if (128 !== type && 129 !== type || !member.static || "prototype" !== value || this.raise(Errors.StaticPrototype, { at: this.state.startLoc }), 134 === type) {
              "constructor" === value && this.raise(Errors.ConstructorClassPrivateField, { at: this.state.startLoc });
              const key = this.parsePrivateName();
              return member.key = key, key;
            }
            return this.parsePropertyName(member);
          }
          parseClassStaticBlock(classBody, member) {
            var _member$decorators;
            this.scope.enter(208);
            const oldLabels = this.state.labels;
            this.state.labels = [], this.prodParam.enter(0);
            const body = member.body = [];
            this.parseBlockOrModuleBlockBody(body, void 0, false, 8), this.prodParam.exit(), this.scope.exit(), this.state.labels = oldLabels, classBody.body.push(this.finishNode(member, "StaticBlock")), null != (_member$decorators = member.decorators) && _member$decorators.length && this.raise(Errors.DecoratorStaticBlock, { at: member });
          }
          pushClassProperty(classBody, prop) {
            prop.computed || "constructor" !== prop.key.name && "constructor" !== prop.key.value || this.raise(Errors.ConstructorClassField, { at: prop.key }), classBody.body.push(this.parseClassProperty(prop));
          }
          pushClassPrivateProperty(classBody, prop) {
            const node = this.parseClassPrivateProperty(prop);
            classBody.body.push(node), this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
          }
          pushClassAccessorProperty(classBody, prop, isPrivate) {
            if (!isPrivate && !prop.computed) {
              const key = prop.key;
              "constructor" !== key.name && "constructor" !== key.value || this.raise(Errors.ConstructorClassField, { at: key });
            }
            const node = this.parseClassAccessorProperty(prop);
            classBody.body.push(node), isPrivate && this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), 0, node.key.loc.start);
          }
          pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {
            classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, "ClassMethod", true));
          }
          pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {
            const node = this.parseMethod(method, isGenerator, isAsync, false, false, "ClassPrivateMethod", true);
            classBody.body.push(node);
            const kind = "get" === node.kind ? node.static ? 6 : 2 : "set" === node.kind ? node.static ? 5 : 1 : 0;
            this.declareClassPrivateMethodInScope(node, kind);
          }
          declareClassPrivateMethodInScope(node, kind) {
            this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.loc.start);
          }
          parsePostMemberNameModifiers(methodOrProp) {
          }
          parseClassPrivateProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassPrivateProperty");
          }
          parseClassProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassProperty");
          }
          parseClassAccessorProperty(node) {
            return this.parseInitializer(node), this.semicolon(), this.finishNode(node, "ClassAccessorProperty");
          }
          parseInitializer(node) {
            this.scope.enter(80), this.expressionScope.enter(newExpressionScope()), this.prodParam.enter(0), node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null, this.expressionScope.exit(), this.prodParam.exit(), this.scope.exit();
          }
          parseClassId(node, isStatement, optionalId, bindingType = 139) {
            if (tokenIsIdentifier(this.state.type))
              node.id = this.parseIdentifier(), isStatement && this.declareNameFromIdentifier(node.id, bindingType);
            else {
              if (!optionalId && isStatement)
                throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });
              node.id = null;
            }
          }
          parseClassSuper(node) {
            node.superClass = this.eat(81) ? this.parseExprSubscripts() : null;
          }
          parseExport(node) {
            const hasDefault = this.maybeParseExportDefaultSpecifier(node), parseAfterDefault = !hasDefault || this.eat(12), hasStar = parseAfterDefault && this.eatExportStar(node), hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node), parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12)), isFromRequired = hasDefault || hasStar;
            if (hasStar && !hasNamespace)
              return hasDefault && this.unexpected(), this.parseExportFrom(node, true), this.finishNode(node, "ExportAllDeclaration");
            const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);
            if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers)
              throw this.unexpected(null, 5);
            let hasDeclaration;
            if (isFromRequired || hasSpecifiers ? (hasDeclaration = false, this.parseExportFrom(node, isFromRequired)) : hasDeclaration = this.maybeParseExportDeclaration(node), isFromRequired || hasSpecifiers || hasDeclaration)
              return this.checkExport(node, true, false, !!node.source), this.finishNode(node, "ExportNamedDeclaration");
            if (this.eat(65))
              return node.declaration = this.parseExportDefaultExpression(), this.checkExport(node, true, true), this.finishNode(node, "ExportDefaultDeclaration");
            throw this.unexpected(null, 5);
          }
          eatExportStar(node) {
            return this.eat(55);
          }
          maybeParseExportDefaultSpecifier(node) {
            if (this.isExportDefaultSpecifier()) {
              this.expectPlugin("exportDefaultFrom");
              const specifier = this.startNode();
              return specifier.exported = this.parseIdentifier(true), node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")], true;
            }
            return false;
          }
          maybeParseExportNamespaceSpecifier(node) {
            if (this.isContextual(93)) {
              node.specifiers || (node.specifiers = []);
              const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);
              return this.next(), specifier.exported = this.parseModuleExportName(), node.specifiers.push(this.finishNode(specifier, "ExportNamespaceSpecifier")), true;
            }
            return false;
          }
          maybeParseExportNamedSpecifiers(node) {
            if (this.match(5)) {
              node.specifiers || (node.specifiers = []);
              const isTypeExport = "type" === node.exportKind;
              return node.specifiers.push(...this.parseExportSpecifiers(isTypeExport)), node.source = null, node.declaration = null, this.hasPlugin("importAssertions") && (node.assertions = []), true;
            }
            return false;
          }
          maybeParseExportDeclaration(node) {
            return !!this.shouldParseExportDeclaration() && (node.specifiers = [], node.source = null, this.hasPlugin("importAssertions") && (node.assertions = []), node.declaration = this.parseExportDeclaration(node), true);
          }
          isAsyncFunction() {
            if (!this.isContextual(95))
              return false;
            const next = this.nextTokenStart();
            return !lineBreak2.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, "function");
          }
          parseExportDefaultExpression() {
            const expr = this.startNode(), isAsync = this.isAsyncFunction();
            if (this.match(68) || isAsync)
              return this.next(), isAsync && this.next(), this.parseFunction(expr, 5, isAsync);
            if (this.match(80))
              return this.parseClass(expr, true, true);
            if (this.match(26))
              return this.hasPlugin("decorators") && this.getPluginOption("decorators", "decoratorsBeforeExport") && this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc }), this.parseDecorators(false), this.parseClass(expr, true, true);
            if (this.match(75) || this.match(74) || this.isLet())
              throw this.raise(Errors.UnsupportedDefaultExport, { at: this.state.startLoc });
            const res = this.parseMaybeAssignAllowIn();
            return this.semicolon(), res;
          }
          parseExportDeclaration(node) {
            return this.parseStatement(null);
          }
          isExportDefaultSpecifier() {
            const { type } = this.state;
            if (tokenIsIdentifier(type)) {
              if (95 === type && !this.state.containsEsc || 99 === type)
                return false;
              if ((126 === type || 125 === type) && !this.state.containsEsc) {
                const { type: nextType } = this.lookahead();
                if (tokenIsIdentifier(nextType) && 97 !== nextType || 5 === nextType)
                  return this.expectOnePlugin(["flow", "typescript"]), false;
              }
            } else if (!this.match(65))
              return false;
            const next = this.nextTokenStart(), hasFrom = this.isUnparsedContextual(next, "from");
            if (44 === this.input.charCodeAt(next) || tokenIsIdentifier(this.state.type) && hasFrom)
              return true;
            if (this.match(65) && hasFrom) {
              const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));
              return 34 === nextAfterFrom || 39 === nextAfterFrom;
            }
            return false;
          }
          parseExportFrom(node, expect) {
            if (this.eatContextual(97)) {
              node.source = this.parseImportSource(), this.checkExport(node);
              const assertions = this.maybeParseImportAssertions();
              assertions && (node.assertions = assertions, this.checkJSONModuleImport(node));
            } else
              expect && this.unexpected();
            this.semicolon();
          }
          shouldParseExportDeclaration() {
            const { type } = this.state;
            if (26 === type && (this.expectOnePlugin(["decorators", "decorators-legacy"]), this.hasPlugin("decorators"))) {
              if (this.getPluginOption("decorators", "decoratorsBeforeExport"))
                throw this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });
              return true;
            }
            return 74 === type || 75 === type || 68 === type || 80 === type || this.isLet() || this.isAsyncFunction();
          }
          checkExport(node, checkNames, isDefault, isFrom) {
            if (checkNames) {
              if (isDefault) {
                if (this.checkDuplicateExports(node, "default"), this.hasPlugin("exportDefaultFrom")) {
                  var _declaration$extra;
                  const declaration = node.declaration;
                  "Identifier" !== declaration.type || "from" !== declaration.name || declaration.end - declaration.start != 4 || null != (_declaration$extra = declaration.extra) && _declaration$extra.parenthesized || this.raise(Errors.ExportDefaultFromAsIdentifier, { at: declaration });
                }
              } else if (node.specifiers && node.specifiers.length)
                for (const specifier of node.specifiers) {
                  const { exported } = specifier, exportName = "Identifier" === exported.type ? exported.name : exported.value;
                  if (this.checkDuplicateExports(specifier, exportName), !isFrom && specifier.local) {
                    const { local } = specifier;
                    "Identifier" !== local.type ? this.raise(Errors.ExportBindingIsString, { at: specifier, localName: local.value, exportName }) : (this.checkReservedWord(local.name, local.loc.start, true, false), this.scope.checkLocalExport(local));
                  }
                }
              else if (node.declaration) {
                if ("FunctionDeclaration" === node.declaration.type || "ClassDeclaration" === node.declaration.type) {
                  const id = node.declaration.id;
                  if (!id)
                    throw new Error("Assertion failure");
                  this.checkDuplicateExports(node, id.name);
                } else if ("VariableDeclaration" === node.declaration.type)
                  for (const declaration of node.declaration.declarations)
                    this.checkDeclaration(declaration.id);
              }
            }
            if (this.state.decoratorStack[this.state.decoratorStack.length - 1].length)
              throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });
          }
          checkDeclaration(node) {
            if ("Identifier" === node.type)
              this.checkDuplicateExports(node, node.name);
            else if ("ObjectPattern" === node.type)
              for (const prop of node.properties)
                this.checkDeclaration(prop);
            else if ("ArrayPattern" === node.type)
              for (const elem of node.elements)
                elem && this.checkDeclaration(elem);
            else
              "ObjectProperty" === node.type ? this.checkDeclaration(node.value) : "RestElement" === node.type ? this.checkDeclaration(node.argument) : "AssignmentPattern" === node.type && this.checkDeclaration(node.left);
          }
          checkDuplicateExports(node, exportName) {
            this.exportedIdentifiers.has(exportName) && ("default" === exportName ? this.raise(Errors.DuplicateDefaultExport, { at: node }) : this.raise(Errors.DuplicateExport, { at: node, exportName })), this.exportedIdentifiers.add(exportName);
          }
          parseExportSpecifiers(isInTypeExport) {
            const nodes = [];
            let first = true;
            for (this.expect(5); !this.eat(8); ) {
              if (first)
                first = false;
              else if (this.expect(12), this.eat(8))
                break;
              const isMaybeTypeOnly = this.isContextual(126), isString = this.match(129), node = this.startNode();
              node.local = this.parseModuleExportName(), nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));
            }
            return nodes;
          }
          parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {
            return this.eatContextual(93) ? node.exported = this.parseModuleExportName() : isString ? node.exported = cloneStringLiteral(node.local) : node.exported || (node.exported = cloneIdentifier(node.local)), this.finishNode(node, "ExportSpecifier");
          }
          parseModuleExportName() {
            if (this.match(129)) {
              const result = this.parseStringLiteral(this.state.value), surrogate = result.value.match(loneSurrogate2);
              return surrogate && this.raise(Errors.ModuleExportNameHasLoneSurrogate, { at: result, surrogateCharCode: surrogate[0].charCodeAt(0) }), result;
            }
            return this.parseIdentifier(true);
          }
          isJSONModuleImport(node) {
            return null != node.assertions && node.assertions.some(({ key, value }) => "json" === value.value && ("Identifier" === key.type ? "type" === key.name : "type" === key.value));
          }
          checkJSONModuleImport(node) {
            if (this.isJSONModuleImport(node) && "ExportAllDeclaration" !== node.type) {
              const { specifiers } = node;
              if (null != specifiers) {
                const nonDefaultNamedSpecifier = specifiers.find((specifier) => {
                  let imported;
                  if ("ExportSpecifier" === specifier.type ? imported = specifier.local : "ImportSpecifier" === specifier.type && (imported = specifier.imported), void 0 !== imported)
                    return "Identifier" === imported.type ? "default" !== imported.name : "default" !== imported.value;
                });
                void 0 !== nonDefaultNamedSpecifier && this.raise(Errors.ImportJSONBindingNotDefault, { at: nonDefaultNamedSpecifier.loc.start });
              }
            }
          }
          parseImport(node) {
            if (node.specifiers = [], !this.match(129)) {
              const parseNext = !this.maybeParseDefaultImportSpecifier(node) || this.eat(12), hasStar = parseNext && this.maybeParseStarImportSpecifier(node);
              parseNext && !hasStar && this.parseNamedImportSpecifiers(node), this.expectContextual(97);
            }
            node.source = this.parseImportSource();
            const assertions = this.maybeParseImportAssertions();
            if (assertions)
              node.assertions = assertions;
            else {
              const attributes = this.maybeParseModuleAttributes();
              attributes && (node.attributes = attributes);
            }
            return this.checkJSONModuleImport(node), this.semicolon(), this.finishNode(node, "ImportDeclaration");
          }
          parseImportSource() {
            return this.match(129) || this.unexpected(), this.parseExprAtom();
          }
          shouldParseDefaultImport(node) {
            return tokenIsIdentifier(this.state.type);
          }
          parseImportSpecifierLocal(node, specifier, type) {
            specifier.local = this.parseIdentifier(), node.specifiers.push(this.finishImportSpecifier(specifier, type));
          }
          finishImportSpecifier(specifier, type, bindingType = 9) {
            return this.checkLVal(specifier.local, { in: specifier, binding: bindingType }), this.finishNode(specifier, type);
          }
          parseAssertEntries() {
            const attrs = [], attrNames = /* @__PURE__ */ new Set();
            do {
              if (this.match(8))
                break;
              const node = this.startNode(), keyName = this.state.value;
              if (attrNames.has(keyName) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, { at: this.state.startLoc, key: keyName }), attrNames.add(keyName), this.match(129) ? node.key = this.parseStringLiteral(keyName) : node.key = this.parseIdentifier(true), this.expect(14), !this.match(129))
                throw this.raise(Errors.ModuleAttributeInvalidValue, { at: this.state.startLoc });
              node.value = this.parseStringLiteral(this.state.value), attrs.push(this.finishNode(node, "ImportAttribute"));
            } while (this.eat(12));
            return attrs;
          }
          maybeParseModuleAttributes() {
            if (!this.match(76) || this.hasPrecedingLineBreak())
              return this.hasPlugin("moduleAttributes") ? [] : null;
            this.expectPlugin("moduleAttributes"), this.next();
            const attrs = [], attributes = /* @__PURE__ */ new Set();
            do {
              const node = this.startNode();
              if (node.key = this.parseIdentifier(true), "type" !== node.key.name && this.raise(Errors.ModuleAttributeDifferentFromType, { at: node.key }), attributes.has(node.key.name) && this.raise(Errors.ModuleAttributesWithDuplicateKeys, { at: node.key, key: node.key.name }), attributes.add(node.key.name), this.expect(14), !this.match(129))
                throw this.raise(Errors.ModuleAttributeInvalidValue, { at: this.state.startLoc });
              node.value = this.parseStringLiteral(this.state.value), this.finishNode(node, "ImportAttribute"), attrs.push(node);
            } while (this.eat(12));
            return attrs;
          }
          maybeParseImportAssertions() {
            if (!this.isContextual(94) || this.hasPrecedingLineBreak())
              return this.hasPlugin("importAssertions") ? [] : null;
            this.expectPlugin("importAssertions"), this.next(), this.eat(5);
            const attrs = this.parseAssertEntries();
            return this.eat(8), attrs;
          }
          maybeParseDefaultImportSpecifier(node) {
            return !!this.shouldParseDefaultImport(node) && (this.parseImportSpecifierLocal(node, this.startNode(), "ImportDefaultSpecifier"), true);
          }
          maybeParseStarImportSpecifier(node) {
            if (this.match(55)) {
              const specifier = this.startNode();
              return this.next(), this.expectContextual(93), this.parseImportSpecifierLocal(node, specifier, "ImportNamespaceSpecifier"), true;
            }
            return false;
          }
          parseNamedImportSpecifiers(node) {
            let first = true;
            for (this.expect(5); !this.eat(8); ) {
              if (first)
                first = false;
              else {
                if (this.eat(14))
                  throw this.raise(Errors.DestructureNamedImport, { at: this.state.startLoc });
                if (this.expect(12), this.eat(8))
                  break;
              }
              const specifier = this.startNode(), importedIsString = this.match(129), isMaybeTypeOnly = this.isContextual(126);
              specifier.imported = this.parseModuleExportName();
              const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, "type" === node.importKind || "typeof" === node.importKind, isMaybeTypeOnly, void 0);
              node.specifiers.push(importSpecifier);
            }
          }
          parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly, bindingType) {
            if (this.eatContextual(93))
              specifier.local = this.parseIdentifier();
            else {
              const { imported } = specifier;
              if (importedIsString)
                throw this.raise(Errors.ImportBindingIsString, { at: specifier, importName: imported.value });
              this.checkReservedWord(imported.name, specifier.loc.start, true, true), specifier.local || (specifier.local = cloneIdentifier(imported));
            }
            return this.finishImportSpecifier(specifier, "ImportSpecifier", bindingType);
          }
          isThisParam(param) {
            return "Identifier" === param.type && "this" === param.name;
          }
        } {
          constructor(options, input) {
            super(options = function(opts) {
              const options2 = {};
              for (const key of Object.keys(defaultOptions2))
                options2[key] = opts && null != opts[key] ? opts[key] : defaultOptions2[key];
              return options2;
            }(options), input), this.options = options, this.initializeScopes(), this.plugins = function(plugins) {
              const pluginMap = /* @__PURE__ */ new Map();
              for (const plugin of plugins) {
                const [name, options2] = Array.isArray(plugin) ? plugin : [plugin, {}];
                pluginMap.has(name) || pluginMap.set(name, options2 || {});
              }
              return pluginMap;
            }(this.options.plugins), this.filename = options.sourceFilename;
          }
          getScopeHandler() {
            return ScopeHandler;
          }
          parse() {
            this.enterInitialScopes();
            const file = this.startNode(), program = this.startNode();
            return this.nextToken(), file.errors = null, this.parseTopLevel(file, program), file.errors = this.state.errors, file;
          }
        }
        const tokTypes = function(internalTokenTypes) {
          const tokenTypes2 = {};
          for (const typeName of Object.keys(internalTokenTypes))
            tokenTypes2[typeName] = getExportedToken(internalTokenTypes[typeName]);
          return tokenTypes2;
        }(tt);
        function getParser(options, input) {
          let cls = Parser3;
          return null != options && options.plugins && (!function(plugins) {
            if (hasPlugin(plugins, "decorators")) {
              if (hasPlugin(plugins, "decorators-legacy"))
                throw new Error("Cannot use the decorators and decorators-legacy plugin together");
              const decoratorsBeforeExport = getPluginOption(plugins, "decorators", "decoratorsBeforeExport");
              if (null != decoratorsBeforeExport && "boolean" != typeof decoratorsBeforeExport)
                throw new Error("'decoratorsBeforeExport' must be a boolean.");
              const allowCallParenthesized = getPluginOption(plugins, "decorators", "allowCallParenthesized");
              if (null != allowCallParenthesized && "boolean" != typeof allowCallParenthesized)
                throw new Error("'allowCallParenthesized' must be a boolean.");
            }
            if (hasPlugin(plugins, "flow") && hasPlugin(plugins, "typescript"))
              throw new Error("Cannot combine flow and typescript plugins.");
            if (hasPlugin(plugins, "placeholders") && hasPlugin(plugins, "v8intrinsic"))
              throw new Error("Cannot combine placeholders and v8intrinsic plugins.");
            if (hasPlugin(plugins, "pipelineOperator")) {
              const proposal = getPluginOption(plugins, "pipelineOperator", "proposal");
              if (!PIPELINE_PROPOSALS.includes(proposal)) {
                const proposalList = PIPELINE_PROPOSALS.map((p) => `"${p}"`).join(", ");
                throw new Error(`"pipelineOperator" requires "proposal" option whose value must be one of: ${proposalList}.`);
              }
              const tupleSyntaxIsHash = hasPlugin(plugins, ["recordAndTuple", { syntaxType: "hash" }]);
              if ("hack" === proposal) {
                if (hasPlugin(plugins, "placeholders"))
                  throw new Error("Cannot combine placeholders plugin and Hack-style pipes.");
                if (hasPlugin(plugins, "v8intrinsic"))
                  throw new Error("Cannot combine v8intrinsic plugin and Hack-style pipes.");
                const topicToken = getPluginOption(plugins, "pipelineOperator", "topicToken");
                if (!TOPIC_TOKENS.includes(topicToken)) {
                  const tokenList = TOPIC_TOKENS.map((t) => `"${t}"`).join(", ");
                  throw new Error(`"pipelineOperator" in "proposal": "hack" mode also requires a "topicToken" option whose value must be one of: ${tokenList}.`);
                }
                if ("#" === topicToken && tupleSyntaxIsHash)
                  throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "hack", topicToken: "#" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
              } else if ("smart" === proposal && tupleSyntaxIsHash)
                throw new Error('Plugin conflict between `["pipelineOperator", { proposal: "smart" }]` and `["recordAndtuple", { syntaxType: "hash"}]`.');
            }
            if (hasPlugin(plugins, "moduleAttributes")) {
              if (hasPlugin(plugins, "importAssertions"))
                throw new Error("Cannot combine importAssertions and moduleAttributes plugins.");
              if ("may-2020" !== getPluginOption(plugins, "moduleAttributes", "version"))
                throw new Error("The 'moduleAttributes' plugin requires a 'version' option, representing the last proposal update. Currently, the only supported value is 'may-2020'.");
            }
            if (hasPlugin(plugins, "recordAndTuple") && null != getPluginOption(plugins, "recordAndTuple", "syntaxType") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, "recordAndTuple", "syntaxType")))
              throw new Error("The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: " + RECORD_AND_TUPLE_SYNTAX_TYPES.map((p) => `'${p}'`).join(", "));
            if (hasPlugin(plugins, "asyncDoExpressions") && !hasPlugin(plugins, "doExpressions")) {
              const error = new Error("'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.");
              throw error.missingPlugins = "doExpressions", error;
            }
          }(options.plugins), cls = function(pluginsFromOptions) {
            const pluginList = mixinPluginNames.filter((name) => hasPlugin(pluginsFromOptions, name)), key = pluginList.join("/");
            let cls2 = parserClassCache[key];
            if (!cls2) {
              cls2 = Parser3;
              for (const plugin of pluginList)
                cls2 = mixinPlugins[plugin](cls2);
              parserClassCache[key] = cls2;
            }
            return cls2;
          }(options.plugins)), new cls(options, input);
        }
        const parserClassCache = {};
        exports2.parse = function(input, options) {
          var _options;
          if ("unambiguous" !== (null == (_options = options) ? void 0 : _options.sourceType))
            return getParser(options, input).parse();
          options = Object.assign({}, options);
          try {
            options.sourceType = "module";
            const parser = getParser(options, input), ast = parser.parse();
            if (parser.sawUnambiguousESM)
              return ast;
            if (parser.ambiguousScriptDifferentAst)
              try {
                return options.sourceType = "script", getParser(options, input).parse();
              } catch (_unused) {
              }
            else
              ast.program.sourceType = "script";
            return ast;
          } catch (moduleError) {
            try {
              return options.sourceType = "script", getParser(options, input).parse();
            } catch (_unused2) {
            }
            throw moduleError;
          }
        }, exports2.parseExpression = function(input, options) {
          const parser = getParser(options, input);
          return parser.options.strictMode && (parser.state.strict = true), parser.getExpression();
        }, exports2.tokTypes = tokTypes;
      }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-proposal-decorators/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.19.0/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxDecorators = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.19.0_@babel+core@7.19.1/node_modules/@babel/plugin-syntax-decorators/lib/index.js"), _helperCreateClassFeaturesPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"), _transformerLegacy = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js"), _transformer = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-proposal-decorators/lib/transformer-2022-03.js"), _default = (0, _helperPluginUtils.declare)((api, options) => {
          api.assertVersion(7);
          var { legacy } = options;
          const { version: version2 } = options;
          return legacy || "legacy" === version2 ? { name: "proposal-decorators", inherits: _pluginSyntaxDecorators.default, visitor: _transformerLegacy.default } : "2021-12" === version2 || "2022-03" === version2 ? (0, _transformer.default)(api, options, version2) : (0, _helperCreateClassFeaturesPlugin.createClassFeaturePlugin)({ name: "proposal-decorators", api, feature: _helperCreateClassFeaturesPlugin.FEATURES.decorators, inherits: _pluginSyntaxDecorators.default });
        });
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-proposal-decorators/lib/transformer-2022-03.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function({ assertVersion, assumption }, { loose }, version2) {
          var _assumption;
          assertVersion("2021-12" === version2 ? "^7.16.0" : "^7.19.0");
          const VISITED = /* @__PURE__ */ new WeakSet(), constantSuper = null != (_assumption = assumption("constantSuper")) ? _assumption : loose;
          return { name: "proposal-decorators", inherits: _pluginSyntaxDecorators.default, visitor: { "ExportNamedDeclaration|ExportDefaultDeclaration"(path3) {
            var _declaration$decorato;
            const { declaration } = path3.node;
            "ClassDeclaration" === (null == declaration ? void 0 : declaration.type) && (null == (_declaration$decorato = declaration.decorators) ? void 0 : _declaration$decorato.length) > 0 && (0, _helperSplitExportDeclaration.default)(path3);
          }, Class(path3, state) {
            if (VISITED.has(path3))
              return;
            const newPath = function(path4, state2, constantSuper2, version3) {
              const body = path4.get("body.body"), classDecorators = path4.node.decorators;
              let hasElementDecorators = false;
              const generateClassPrivateUid = function(classPath) {
                let generator;
                return () => (generator || (generator = function(classPath2) {
                  const currentPrivateId = [], privateNames = /* @__PURE__ */ new Set();
                  return classPath2.traverse({ PrivateName(path5) {
                    privateNames.add(path5.node.id.name);
                  } }), () => {
                    let reifiedId;
                    do {
                      incrementId(currentPrivateId), reifiedId = String.fromCharCode(...currentPrivateId);
                    } while (privateNames.has(reifiedId));
                    return _core.types.privateName(_core.types.identifier(reifiedId));
                  };
                }(classPath)), generator());
              }(path4);
              for (const element of body)
                if (isClassDecoratableElementPath(element)) {
                  if (element.node.decorators && element.node.decorators.length > 0)
                    hasElementDecorators = true;
                  else if ("ClassAccessorProperty" === element.node.type) {
                    const { key, value, static: isStatic, computed } = element.node, newId = generateClassPrivateUid(), newField = generateClassProperty(newId, value ? _core.types.cloneNode(value) : void 0, isStatic), [newPath2] = element.replaceWith(newField);
                    addProxyAccessorsFor(newPath2, key, newId, computed);
                  }
                }
              if (!classDecorators && !hasElementDecorators)
                return;
              const elementDecoratorInfo = [];
              let firstFieldPath, constructorPath, requiresProtoInit = false, requiresStaticInit = false;
              const decoratedPrivateMethods = /* @__PURE__ */ new Set();
              let protoInitLocal, staticInitLocal, classInitLocal, classLocal;
              const assignments = [], scopeParent = path4.scope.parent, memoiseExpression = (expression, hint) => {
                const localEvaluatedId = scopeParent.generateDeclaredUidIdentifier(hint);
                return assignments.push(_core.types.assignmentExpression("=", localEvaluatedId, expression)), _core.types.cloneNode(localEvaluatedId);
              };
              if (classDecorators) {
                classInitLocal = scopeParent.generateDeclaredUidIdentifier("initClass");
                const [localId, classPath] = function(path5) {
                  if ("ClassDeclaration" === path5.type) {
                    const varId = path5.scope.generateUidIdentifierBasedOnNode(path5.node.id), classId = _core.types.identifier(path5.node.id.name);
                    return path5.scope.rename(classId.name, varId.name), path5.insertBefore(_core.types.variableDeclaration("let", [_core.types.variableDeclarator(varId)])), path5.get("id").replaceWith(classId), [_core.types.cloneNode(varId), path5];
                  }
                  {
                    let className, varId;
                    path5.node.id ? (className = path5.node.id.name, varId = path5.scope.parent.generateDeclaredUidIdentifier(className), path5.scope.rename(className, varId.name)) : "VariableDeclarator" === path5.parentPath.node.type && "Identifier" === path5.parentPath.node.id.type ? (className = path5.parentPath.node.id.name, varId = path5.scope.parent.generateDeclaredUidIdentifier(className)) : varId = path5.scope.parent.generateDeclaredUidIdentifier("decorated_class");
                    const newClassExpr = _core.types.classExpression(className && _core.types.identifier(className), path5.node.superClass, path5.node.body), [newPath2] = path5.replaceWith(_core.types.sequenceExpression([newClassExpr, varId]));
                    return [_core.types.cloneNode(varId), newPath2.get("expressions.0")];
                  }
                }(path4);
                classLocal = localId, (path4 = classPath).node.decorators = null;
                for (const classDecorator of classDecorators)
                  scopeParent.isStatic(classDecorator.expression) || (classDecorator.expression = memoiseExpression(classDecorator.expression, "dec"));
              } else
                path4.node.id || (path4.node.id = path4.scope.generateUidIdentifier("Class")), classLocal = _core.types.cloneNode(path4.node.id);
              if (hasElementDecorators)
                for (const element of body) {
                  if (!isClassDecoratableElementPath(element))
                    continue;
                  const { node } = element, decorators = element.get("decorators"), hasDecorators = Array.isArray(decorators) && decorators.length > 0;
                  if (hasDecorators)
                    for (const decoratorPath of decorators)
                      scopeParent.isStatic(decoratorPath.node.expression) || (decoratorPath.node.expression = memoiseExpression(decoratorPath.node.expression, "dec"));
                  const isComputed = "computed" in element.node && true === element.node.computed;
                  isComputed && (scopeParent.isStatic(node.key) || (node.key = memoiseExpression(node.key, "computedKey")));
                  const kind = getElementKind(element), { key } = node, isPrivate = "PrivateName" === key.type, isStatic = !!element.node.static;
                  let name = "computedKey";
                  if (isPrivate ? name = key.id.name : isComputed || "Identifier" !== key.type || (name = key.name), element.isClassMethod({ kind: "constructor" }) && (constructorPath = element), hasDecorators) {
                    let locals2, privateMethods, nameExpr;
                    if (1 === kind) {
                      const { value } = element.node, params = [_core.types.thisExpression()];
                      value && params.push(_core.types.cloneNode(value));
                      const newId = generateClassPrivateUid(), newFieldInitId = element.scope.parent.generateDeclaredUidIdentifier(`init_${name}`), newField = generateClassProperty(newId, _core.types.callExpression(_core.types.cloneNode(newFieldInitId), params), isStatic), [newPath2] = element.replaceWith(newField);
                      if (isPrivate) {
                        privateMethods = extractProxyAccessorsFor(newId);
                        const getId = newPath2.scope.parent.generateDeclaredUidIdentifier(`get_${name}`), setId = newPath2.scope.parent.generateDeclaredUidIdentifier(`set_${name}`);
                        addCallAccessorsFor(newPath2, key, getId, setId), locals2 = [newFieldInitId, getId, setId];
                      } else
                        addProxyAccessorsFor(newPath2, key, newId, isComputed), locals2 = newFieldInitId;
                    } else if (0 === kind) {
                      const initId = element.scope.parent.generateDeclaredUidIdentifier(`init_${name}`), valuePath = element.get("value");
                      valuePath.replaceWith(_core.types.callExpression(_core.types.cloneNode(initId), [_core.types.thisExpression(), valuePath.node].filter((v) => v))), locals2 = initId, isPrivate && (privateMethods = extractProxyAccessorsFor(key));
                    } else if (isPrivate) {
                      locals2 = element.scope.parent.generateDeclaredUidIdentifier(`call_${name}`);
                      new _helperReplaceSupers.default({ constantSuper: constantSuper2, methodPath: element, objectRef: classLocal, superRef: path4.node.superClass, file: state2.file, refToPreserve: classLocal }).replace();
                      const { params, body: body2, async: isAsync } = element.node;
                      if (privateMethods = _core.types.functionExpression(void 0, params.filter(isNotTsParameter), body2, isAsync), 3 === kind || 4 === kind)
                        movePrivateAccessor(element, _core.types.cloneNode(key), _core.types.cloneNode(locals2), isStatic);
                      else {
                        const node2 = element.node;
                        path4.node.body.body.unshift(_core.types.classPrivateProperty(key, _core.types.cloneNode(locals2), [], node2.static)), decoratedPrivateMethods.add(key.id.name), element.remove();
                      }
                    }
                    nameExpr = isComputed ? _core.types.cloneNode(key) : "PrivateName" === key.type ? _core.types.stringLiteral(key.id.name) : "Identifier" === key.type ? _core.types.stringLiteral(key.name) : _core.types.cloneNode(key), elementDecoratorInfo.push({ kind, decorators: decorators.map((d) => d.node.expression), name: nameExpr, isStatic, privateMethods, locals: locals2 }), 0 !== kind && (isStatic ? requiresStaticInit = true : requiresProtoInit = true), element.node && (element.node.decorators = null), firstFieldPath || 0 !== kind && 1 !== kind || (firstFieldPath = element);
                  }
                }
              const elementDecorations = (info = elementDecoratorInfo, _core.types.arrayExpression(filteredOrderedDecoratorInfo(info).map((el) => {
                const decs = el.decorators.length > 1 ? _core.types.arrayExpression(el.decorators) : el.decorators[0], kind = el.isStatic ? el.kind + 5 : el.kind, decInfo = [decs, _core.types.numericLiteral(kind), el.name], { privateMethods } = el;
                return Array.isArray(privateMethods) ? decInfo.push(...privateMethods) : privateMethods && decInfo.push(privateMethods), _core.types.arrayExpression(decInfo);
              }))), classDecorations = _core.types.arrayExpression((classDecorators || []).map((d) => d.expression)), locals = function(decorationInfo) {
                const localIds = [];
                for (const el of filteredOrderedDecoratorInfo(decorationInfo)) {
                  const { locals: locals2 } = el;
                  Array.isArray(locals2) ? localIds.push(...locals2) : void 0 !== locals2 && localIds.push(locals2);
                }
                return localIds;
              }(elementDecoratorInfo);
              var info;
              if (requiresProtoInit) {
                protoInitLocal = scopeParent.generateDeclaredUidIdentifier("initProto"), locals.push(protoInitLocal);
                const protoInitCall = _core.types.callExpression(_core.types.cloneNode(protoInitLocal), [_core.types.thisExpression()]);
                if (firstFieldPath) {
                  const value = firstFieldPath.get("value"), body2 = [protoInitCall];
                  value.node && body2.push(value.node), value.replaceWith(_core.types.sequenceExpression(body2));
                } else if (constructorPath)
                  path4.node.superClass ? path4.traverse({ CallExpression: { exit(path5) {
                    path5.get("callee").isSuper() && (path5.replaceWith(_core.types.callExpression(_core.types.cloneNode(protoInitLocal), [path5.node])), path5.skip());
                  } } }) : constructorPath.node.body.body.unshift(_core.types.expressionStatement(protoInitCall));
                else {
                  const body2 = [_core.types.expressionStatement(protoInitCall)];
                  path4.node.superClass && body2.unshift(_core.types.expressionStatement(_core.types.callExpression(_core.types.super(), [_core.types.spreadElement(_core.types.identifier("args"))]))), path4.node.body.body.unshift(_core.types.classMethod("constructor", _core.types.identifier("constructor"), [_core.types.restElement(_core.types.identifier("args"))], _core.types.blockStatement(body2)));
                }
              }
              requiresStaticInit && (staticInitLocal = scopeParent.generateDeclaredUidIdentifier("initStatic"), locals.push(staticInitLocal));
              decoratedPrivateMethods.size > 0 && path4.traverse({ PrivateName(path5) {
                if (!decoratedPrivateMethods.has(path5.node.id.name))
                  return;
                const parentPath = path5.parentPath, parentParentPath = parentPath.parentPath;
                if ("AssignmentExpression" === parentParentPath.node.type && parentParentPath.node.left === parentPath.node || "UpdateExpression" === parentParentPath.node.type || "RestElement" === parentParentPath.node.type || "ArrayPattern" === parentParentPath.node.type || "ObjectProperty" === parentParentPath.node.type && parentParentPath.node.value === parentPath.node && "ObjectPattern" === parentParentPath.parentPath.type || "ForOfStatement" === parentParentPath.node.type && parentParentPath.node.left === parentPath.node)
                  throw path5.buildCodeFrameError(`Decorated private methods are not updatable, but "#${path5.node.id.name}" is updated via this expression.`);
              } });
              let classInitInjected = false;
              const classInitCall = classInitLocal && _core.types.callExpression(_core.types.cloneNode(classInitLocal), []), originalClass = path4.node;
              if (classDecorators) {
                locals.push(classLocal, classInitLocal);
                const statics = [];
                let staticBlocks = [];
                if (path4.get("body.body").forEach((element) => {
                  if (element.isStaticBlock())
                    return staticBlocks.push(element.node), void element.remove();
                  const isProperty = element.isClassProperty() || element.isClassPrivateProperty();
                  if ((isProperty || element.isClassPrivateMethod()) && element.node.static) {
                    if (isProperty && staticBlocks.length > 0) {
                      const allValues = staticBlocks.map(staticBlockToIIFE);
                      element.node.value && allValues.push(element.node.value), element.node.value = 0 === (exprs = allValues).length ? _core.types.unaryExpression("void", _core.types.numericLiteral(0)) : 1 === exprs.length ? exprs[0] : _core.types.sequenceExpression(exprs), staticBlocks = [];
                    }
                    element.node.static = false, statics.push(element.node), element.remove();
                  }
                  var exprs;
                }), statics.length > 0 || staticBlocks.length > 0) {
                  const staticsClass = _core.template.expression.ast`
        class extends ${state2.addHelper("identity")} {}
      `;
                  staticsClass.body.body = [_core.types.staticBlock([_core.types.toStatement(path4.node, false)]), ...statics];
                  const constructorBody = [], newExpr = _core.types.newExpression(staticsClass, []);
                  staticBlocks.length > 0 && constructorBody.push(...staticBlocks.map(staticBlockToIIFE)), classInitCall && (classInitInjected = true, constructorBody.push(classInitCall)), constructorBody.length > 0 ? (constructorBody.unshift(_core.types.callExpression(_core.types.super(), [_core.types.cloneNode(classLocal)])), staticsClass.body.body.push(_core.types.classMethod("constructor", _core.types.identifier("constructor"), [], _core.types.blockStatement([_core.types.expressionStatement(_core.types.sequenceExpression(constructorBody))])))) : newExpr.arguments.push(_core.types.cloneNode(classLocal)), path4.replaceWith(newExpr);
                }
              }
              !classInitInjected && classInitCall && path4.node.body.body.push(_core.types.staticBlock([_core.types.expressionStatement(classInitCall)]));
              return originalClass.body.body.unshift(_core.types.staticBlock([_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.arrayPattern(locals), _core.types.callExpression(state2.addHelper("2021-12" === version3 ? "applyDecs" : "applyDecs2203"), [_core.types.thisExpression(), elementDecorations, classDecorations]))), requiresStaticInit && _core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(staticInitLocal), [_core.types.thisExpression()]))].filter(Boolean))), path4.insertBefore(assignments.map((expr) => _core.types.expressionStatement(expr))), path4.scope.crawl(), path4;
            }(path3, state, constantSuper, version2);
            newPath && VISITED.add(newPath);
          } } };
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js"), _pluginSyntaxDecorators = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.19.0_@babel+core@7.19.1/node_modules/@babel/plugin-syntax-decorators/lib/index.js"), _helperReplaceSupers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-replace-supers@7.19.1/node_modules/@babel/helper-replace-supers/lib/index.js"), _helperSplitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js");
        function incrementId(id, idx = id.length - 1) {
          if (-1 === idx)
            return void id.unshift(65);
          const current2 = id[idx];
          90 === current2 ? id[idx] = 97 : 122 === current2 ? (id[idx] = 65, incrementId(id, idx - 1)) : id[idx] = current2 + 1;
        }
        function generateClassProperty(key, value, isStatic) {
          return "PrivateName" === key.type ? _core.types.classPrivateProperty(key, value, void 0, isStatic) : _core.types.classProperty(key, value, void 0, void 0, isStatic);
        }
        function addProxyAccessorsFor(element, originalKey, targetKey, isComputed = false) {
          const { static: isStatic } = element.node, getterBody = _core.types.blockStatement([_core.types.returnStatement(_core.types.memberExpression(_core.types.thisExpression(), _core.types.cloneNode(targetKey)))]), setterBody = _core.types.blockStatement([_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.thisExpression(), _core.types.cloneNode(targetKey)), _core.types.identifier("v")))]);
          let getter, setter;
          "PrivateName" === originalKey.type ? (getter = _core.types.classPrivateMethod("get", _core.types.cloneNode(originalKey), [], getterBody, isStatic), setter = _core.types.classPrivateMethod("set", _core.types.cloneNode(originalKey), [_core.types.identifier("v")], setterBody, isStatic)) : (getter = _core.types.classMethod("get", _core.types.cloneNode(originalKey), [], getterBody, isComputed, isStatic), setter = _core.types.classMethod("set", _core.types.cloneNode(originalKey), [_core.types.identifier("v")], setterBody, isComputed, isStatic)), element.insertAfter(setter), element.insertAfter(getter);
        }
        function extractProxyAccessorsFor(targetKey) {
          return [_core.types.functionExpression(void 0, [], _core.types.blockStatement([_core.types.returnStatement(_core.types.memberExpression(_core.types.thisExpression(), _core.types.cloneNode(targetKey)))])), _core.types.functionExpression(void 0, [_core.types.identifier("value")], _core.types.blockStatement([_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(_core.types.thisExpression(), _core.types.cloneNode(targetKey)), _core.types.identifier("value")))]))];
        }
        function getElementKind(element) {
          switch (element.node.type) {
            case "ClassProperty":
            case "ClassPrivateProperty":
              return 0;
            case "ClassAccessorProperty":
              return 1;
            case "ClassMethod":
            case "ClassPrivateMethod":
              return "get" === element.node.kind ? 3 : "set" === element.node.kind ? 4 : 2;
          }
        }
        function isDecoratorInfo(info) {
          return "decorators" in info;
        }
        function filteredOrderedDecoratorInfo(info) {
          const filtered = info.filter(isDecoratorInfo);
          return [...filtered.filter((el) => el.isStatic && el.kind >= 1 && el.kind <= 4), ...filtered.filter((el) => !el.isStatic && el.kind >= 1 && el.kind <= 4), ...filtered.filter((el) => el.isStatic && 0 === el.kind), ...filtered.filter((el) => !el.isStatic && 0 === el.kind)];
        }
        function addCallAccessorsFor(element, key, getId, setId) {
          element.insertAfter(_core.types.classPrivateMethod("get", _core.types.cloneNode(key), [], _core.types.blockStatement([_core.types.returnStatement(_core.types.callExpression(_core.types.cloneNode(getId), [_core.types.thisExpression()]))]))), element.insertAfter(_core.types.classPrivateMethod("set", _core.types.cloneNode(key), [_core.types.identifier("v")], _core.types.blockStatement([_core.types.expressionStatement(_core.types.callExpression(_core.types.cloneNode(setId), [_core.types.thisExpression(), _core.types.identifier("v")]))])));
        }
        function isNotTsParameter(node) {
          return "TSParameterProperty" !== node.type;
        }
        function movePrivateAccessor(element, key, methodLocalVar, isStatic) {
          let params, block;
          "set" === element.node.kind ? (params = [_core.types.identifier("v")], block = [_core.types.expressionStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression(), _core.types.identifier("v")]))]) : (params = [], block = [_core.types.returnStatement(_core.types.callExpression(methodLocalVar, [_core.types.thisExpression()]))]), element.replaceWith(_core.types.classPrivateMethod(element.node.kind, _core.types.cloneNode(key), params, _core.types.blockStatement(block), isStatic));
        }
        function isClassDecoratableElementPath(path3) {
          const { type } = path3;
          return "TSDeclareMethod" !== type && "TSIndexSignature" !== type && "StaticBlock" !== type;
        }
        function staticBlockToIIFE(block) {
          return _core.types.callExpression(_core.types.arrowFunctionExpression([], _core.types.blockStatement(block.body)), []);
        }
      }, "./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-proposal-decorators/lib/transformer-legacy.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js");
        const buildClassDecorator = _core.template.statement("\n  DECORATOR(CLASS_REF = INNER) || CLASS_REF;\n"), buildClassPrototype = (0, _core.template)("\n  CLASS_REF.prototype;\n"), buildGetDescriptor = (0, _core.template)("\n    Object.getOwnPropertyDescriptor(TARGET, PROPERTY);\n"), buildGetObjectInitializer = (0, _core.template)("\n    (TEMP = Object.getOwnPropertyDescriptor(TARGET, PROPERTY), (TEMP = TEMP ? TEMP.value : undefined), {\n        enumerable: true,\n        configurable: true,\n        writable: true,\n        initializer: function(){\n            return TEMP;\n        }\n    })\n"), WARNING_CALLS = /* @__PURE__ */ new WeakSet();
        function applyEnsureOrdering(path3) {
          const identDecorators = (path3.isClass() ? [path3, ...path3.get("body.body")] : path3.get("properties")).reduce((acc, prop) => acc.concat(prop.node.decorators || []), []).filter((decorator) => !_core.types.isIdentifier(decorator.expression));
          if (0 !== identDecorators.length)
            return _core.types.sequenceExpression(identDecorators.map((decorator) => {
              const expression = decorator.expression, id = decorator.expression = path3.scope.generateDeclaredUidIdentifier("dec");
              return _core.types.assignmentExpression("=", id, expression);
            }).concat([path3.node]));
        }
        function hasClassDecorators(classNode) {
          return !(!classNode.decorators || !classNode.decorators.length);
        }
        function hasMethodDecorators(body) {
          return body.some((node) => {
            var _node$decorators;
            return null == (_node$decorators = node.decorators) ? void 0 : _node$decorators.length;
          });
        }
        function applyTargetDecorators(path3, state, decoratedProps) {
          const name = path3.scope.generateDeclaredUidIdentifier(path3.isClass() ? "class" : "obj"), exprs = decoratedProps.reduce(function(acc, node) {
            let decorators = [];
            if (null != node.decorators && (decorators = node.decorators, node.decorators = null), 0 === decorators.length)
              return acc;
            if (node.computed)
              throw path3.buildCodeFrameError("Computed method/property decorators are not yet supported.");
            const property = _core.types.isLiteral(node.key) ? node.key : _core.types.stringLiteral(node.key.name), target = path3.isClass() && !node.static ? buildClassPrototype({ CLASS_REF: name }).expression : name;
            if (_core.types.isClassProperty(node, { static: false })) {
              const descriptor = path3.scope.generateDeclaredUidIdentifier("descriptor"), initializer = node.value ? _core.types.functionExpression(null, [], _core.types.blockStatement([_core.types.returnStatement(node.value)])) : _core.types.nullLiteral();
              node.value = _core.types.callExpression(state.addHelper("initializerWarningHelper"), [descriptor, _core.types.thisExpression()]), WARNING_CALLS.add(node.value), acc.push(_core.types.assignmentExpression("=", _core.types.cloneNode(descriptor), _core.types.callExpression(state.addHelper("applyDecoratedDescriptor"), [_core.types.cloneNode(target), _core.types.cloneNode(property), _core.types.arrayExpression(decorators.map((dec) => _core.types.cloneNode(dec.expression))), _core.types.objectExpression([_core.types.objectProperty(_core.types.identifier("configurable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("enumerable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("writable"), _core.types.booleanLiteral(true)), _core.types.objectProperty(_core.types.identifier("initializer"), initializer)])])));
            } else
              acc.push(_core.types.callExpression(state.addHelper("applyDecoratedDescriptor"), [_core.types.cloneNode(target), _core.types.cloneNode(property), _core.types.arrayExpression(decorators.map((dec) => _core.types.cloneNode(dec.expression))), _core.types.isObjectProperty(node) || _core.types.isClassProperty(node, { static: true }) ? buildGetObjectInitializer({ TEMP: path3.scope.generateDeclaredUidIdentifier("init"), TARGET: _core.types.cloneNode(target), PROPERTY: _core.types.cloneNode(property) }).expression : buildGetDescriptor({ TARGET: _core.types.cloneNode(target), PROPERTY: _core.types.cloneNode(property) }).expression, _core.types.cloneNode(target)]));
            return acc;
          }, []);
          return _core.types.sequenceExpression([_core.types.assignmentExpression("=", _core.types.cloneNode(name), path3.node), _core.types.sequenceExpression(exprs), _core.types.cloneNode(name)]);
        }
        function decoratedClassToExpression({ node, scope }) {
          if (!hasClassDecorators(node) && !hasMethodDecorators(node.body.body))
            return;
          const ref2 = node.id ? _core.types.cloneNode(node.id) : scope.generateUidIdentifier("class");
          return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(ref2, _core.types.toExpression(node))]);
        }
        var _default = { ExportDefaultDeclaration(path3) {
          const decl = path3.get("declaration");
          if (!decl.isClassDeclaration())
            return;
          const replacement = decoratedClassToExpression(decl);
          if (replacement) {
            const [varDeclPath] = path3.replaceWithMultiple([replacement, _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(replacement.declarations[0].id), _core.types.identifier("default"))])]);
            decl.node.id || path3.scope.registerDeclaration(varDeclPath);
          }
        }, ClassDeclaration(path3) {
          const replacement = decoratedClassToExpression(path3);
          replacement && path3.replaceWith(replacement);
        }, ClassExpression(path3, state) {
          const decoratedClass = applyEnsureOrdering(path3) || function(classPath) {
            if (!hasClassDecorators(classPath.node))
              return;
            const decorators = classPath.node.decorators || [];
            classPath.node.decorators = null;
            const name = classPath.scope.generateDeclaredUidIdentifier("class");
            return decorators.map((dec) => dec.expression).reverse().reduce(function(acc, decorator) {
              return buildClassDecorator({ CLASS_REF: _core.types.cloneNode(name), DECORATOR: _core.types.cloneNode(decorator), INNER: acc }).expression;
            }, classPath.node);
          }(path3) || function(path4, state2) {
            if (hasMethodDecorators(path4.node.body.body))
              return applyTargetDecorators(path4, state2, path4.node.body.body);
          }(path3, state);
          decoratedClass && path3.replaceWith(decoratedClass);
        }, ObjectExpression(path3, state) {
          const decoratedObject = applyEnsureOrdering(path3) || function(path4, state2) {
            if (hasMethodDecorators(path4.node.properties))
              return applyTargetDecorators(path4, state2, path4.node.properties.filter((prop) => "SpreadElement" !== prop.type));
          }(path3, state);
          decoratedObject && path3.replaceWith(decoratedObject);
        }, AssignmentExpression(path3, state) {
          WARNING_CALLS.has(path3.node.right) && path3.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"), [_core.types.cloneNode(path3.get("left.object").node), _core.types.stringLiteral(path3.get("left.property").node.name || path3.get("left.property").node.value), _core.types.cloneNode(path3.get("right.arguments")[0].node), _core.types.cloneNode(path3.get("right.arguments")[1].node)]));
        }, CallExpression(path3, state) {
          3 === path3.node.arguments.length && WARNING_CALLS.has(path3.node.arguments[2]) && path3.node.callee.name === state.addHelper("defineProperty").name && path3.replaceWith(_core.types.callExpression(state.addHelper("initializerDefineProperty"), [_core.types.cloneNode(path3.get("arguments")[0].node), _core.types.cloneNode(path3.get("arguments")[1].node), _core.types.cloneNode(path3.get("arguments.2.arguments")[0].node), _core.types.cloneNode(path3.get("arguments.2.arguments")[1].node)]));
        } };
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-proposal-export-namespace-from@7.18.9_@babel+core@7.19.1/node_modules/@babel/plugin-proposal-export-namespace-from/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.19.0/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxExportNamespaceFrom = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-export-namespace-from@7.8.3_@babel+core@7.19.1/node_modules/@babel/plugin-syntax-export-namespace-from/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js"), _default = (0, _helperPluginUtils.declare)((api) => (api.assertVersion(7), { name: "proposal-export-namespace-from", inherits: _pluginSyntaxExportNamespaceFrom.default, visitor: { ExportNamedDeclaration(path3) {
          var _exported$name;
          const { node, scope } = path3, { specifiers } = node, index2 = _core.types.isExportDefaultSpecifier(specifiers[0]) ? 1 : 0;
          if (!_core.types.isExportNamespaceSpecifier(specifiers[index2]))
            return;
          const nodes = [];
          1 === index2 && nodes.push(_core.types.exportNamedDeclaration(null, [specifiers.shift()], node.source));
          const specifier = specifiers.shift(), { exported } = specifier, uid = scope.generateUidIdentifier(null != (_exported$name = exported.name) ? _exported$name : exported.value);
          nodes.push(_core.types.importDeclaration([_core.types.importNamespaceSpecifier(uid)], _core.types.cloneNode(node.source)), _core.types.exportNamedDeclaration(null, [_core.types.exportSpecifier(_core.types.cloneNode(uid), exported)])), node.specifiers.length >= 1 && nodes.push(node);
          const [importDeclaration] = path3.replaceWithMultiple(nodes);
          path3.scope.registerDeclaration(importDeclaration);
        } } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-proposal-nullish-coalescing-operator@7.18.6_@babel+core@7.19.1/node_modules/@babel/plugin-proposal-nullish-coalescing-operator/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.18.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxNullishCoalescingOperator = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-nullish-coalescing-operator@7.8.3_@babel+core@7.19.1/node_modules/@babel/plugin-syntax-nullish-coalescing-operator/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js"), _default = (0, _helperPluginUtils.declare)((api, { loose = false }) => {
          var _api$assumption;
          api.assertVersion(7);
          const noDocumentAll = null != (_api$assumption = api.assumption("noDocumentAll")) ? _api$assumption : loose;
          return { name: "proposal-nullish-coalescing-operator", inherits: _pluginSyntaxNullishCoalescingOperator.default, visitor: { LogicalExpression(path3) {
            const { node, scope } = path3;
            if ("??" !== node.operator)
              return;
            let ref2, assignment;
            if (scope.isStatic(node.left))
              ref2 = node.left, assignment = _core.types.cloneNode(node.left);
            else {
              if (scope.path.isPattern())
                return void path3.replaceWith(_core.template.statement.ast`(() => ${path3.node})()`);
              ref2 = scope.generateUidIdentifierBasedOnNode(node.left), scope.push({ id: _core.types.cloneNode(ref2) }), assignment = _core.types.assignmentExpression("=", ref2, node.left);
            }
            path3.replaceWith(_core.types.conditionalExpression(noDocumentAll ? _core.types.binaryExpression("!=", assignment, _core.types.nullLiteral()) : _core.types.logicalExpression("&&", _core.types.binaryExpression("!==", assignment, _core.types.nullLiteral()), _core.types.binaryExpression("!==", _core.types.cloneNode(ref2), scope.buildUndefinedNode())), _core.types.cloneNode(ref2), node.right));
          } } };
        });
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-proposal-optional-chaining@7.18.9_@babel+core@7.19.1/node_modules/@babel/plugin-proposal-optional-chaining/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.18.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), syntaxOptionalChaining = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-optional-chaining@7.8.3_@babel+core@7.19.1/node_modules/@babel/plugin-syntax-optional-chaining/lib/index.js"), core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js"), helperSkipTransparentExpressionWrappers = __webpack_require__2("./node_modules/.pnpm/@babel+helper-skip-transparent-expression-wrappers@7.18.9/node_modules/@babel/helper-skip-transparent-expression-wrappers/lib/index.js");
        function _interopDefaultLegacy(e) {
          return e && "object" == typeof e && "default" in e ? e : { default: e };
        }
        var syntaxOptionalChaining__default = _interopDefaultLegacy(syntaxOptionalChaining);
        function willPathCastToBoolean(path3) {
          const maybeWrapped = findOutermostTransparentParent(path3), { node, parentPath } = maybeWrapped;
          if (parentPath.isLogicalExpression()) {
            const { operator, right } = parentPath.node;
            if ("&&" === operator || "||" === operator || "??" === operator && node === right)
              return willPathCastToBoolean(parentPath);
          }
          if (parentPath.isSequenceExpression()) {
            const { expressions } = parentPath.node;
            return expressions[expressions.length - 1] !== node || willPathCastToBoolean(parentPath);
          }
          return parentPath.isConditional({ test: node }) || parentPath.isUnaryExpression({ operator: "!" }) || parentPath.isLoop({ test: node });
        }
        function findOutermostTransparentParent(path3) {
          let maybeWrapped = path3;
          return path3.findParent((p) => {
            if (!helperSkipTransparentExpressionWrappers.isTransparentExprWrapper(p.node))
              return true;
            maybeWrapped = p;
          }), maybeWrapped;
        }
        const { ast } = core.template.expression;
        function isSimpleMemberExpression(expression) {
          return expression = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(expression), core.types.isIdentifier(expression) || core.types.isSuper(expression) || core.types.isMemberExpression(expression) && !expression.computed && isSimpleMemberExpression(expression.object);
        }
        function transform(path3, { pureGetters, noDocumentAll }) {
          const { scope } = path3, maybeWrapped = findOutermostTransparentParent(path3), { parentPath } = maybeWrapped, willReplacementCastToBoolean = willPathCastToBoolean(maybeWrapped);
          let isDeleteOperation = false;
          const parentIsCall = parentPath.isCallExpression({ callee: maybeWrapped.node }) && path3.isOptionalMemberExpression(), optionals = [];
          let optionalPath = path3;
          if (scope.path.isPattern() && function(path4) {
            let optionalPath2 = path4;
            const { scope: scope2 } = path4;
            for (; optionalPath2.isOptionalMemberExpression() || optionalPath2.isOptionalCallExpression(); ) {
              const { node } = optionalPath2, childPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath2.isOptionalMemberExpression() ? optionalPath2.get("object") : optionalPath2.get("callee"));
              if (node.optional)
                return !scope2.isStatic(childPath.node);
              optionalPath2 = childPath;
            }
          }(optionalPath))
            return void path3.replaceWith(core.template.ast`(() => ${path3.node})()`);
          for (; optionalPath.isOptionalMemberExpression() || optionalPath.isOptionalCallExpression(); ) {
            const { node } = optionalPath;
            node.optional && optionals.push(node), optionalPath.isOptionalMemberExpression() ? (optionalPath.node.type = "MemberExpression", optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("object"))) : optionalPath.isOptionalCallExpression() && (optionalPath.node.type = "CallExpression", optionalPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(optionalPath.get("callee")));
          }
          let replacementPath = path3;
          parentPath.isUnaryExpression({ operator: "delete" }) && (replacementPath = parentPath, isDeleteOperation = true);
          for (let i = optionals.length - 1; i >= 0; i--) {
            const node = optionals[i], isCall = core.types.isCallExpression(node), chainWithTypes = isCall ? node.callee : node.object, chain = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(chainWithTypes);
            let ref2, check;
            if (isCall && core.types.isIdentifier(chain, { name: "eval" }) ? (check = ref2 = chain, node.callee = core.types.sequenceExpression([core.types.numericLiteral(0), ref2])) : pureGetters && isCall && isSimpleMemberExpression(chain) ? check = ref2 = node.callee : (ref2 = scope.maybeGenerateMemoised(chain), ref2 ? (check = core.types.assignmentExpression("=", core.types.cloneNode(ref2), chainWithTypes), isCall ? node.callee = ref2 : node.object = ref2) : check = ref2 = chainWithTypes), isCall && core.types.isMemberExpression(chain))
              if (pureGetters && isSimpleMemberExpression(chain))
                node.callee = chainWithTypes;
              else {
                const { object } = chain;
                let context;
                if (core.types.isSuper(object))
                  context = core.types.thisExpression();
                else {
                  const memoized = scope.maybeGenerateMemoised(object);
                  memoized ? (context = memoized, chain.object = core.types.assignmentExpression("=", memoized, object)) : context = object;
                }
                node.arguments.unshift(core.types.cloneNode(context)), node.callee = core.types.memberExpression(node.callee, core.types.identifier("call"));
              }
            let replacement = replacementPath.node;
            if (0 === i && parentIsCall) {
              var _baseRef;
              const object = helperSkipTransparentExpressionWrappers.skipTransparentExprWrapperNodes(replacement.object);
              let baseRef;
              pureGetters && isSimpleMemberExpression(object) || (baseRef = scope.maybeGenerateMemoised(object), baseRef && (replacement.object = core.types.assignmentExpression("=", baseRef, object))), replacement = core.types.callExpression(core.types.memberExpression(replacement, core.types.identifier("bind")), [core.types.cloneNode(null != (_baseRef = baseRef) ? _baseRef : object)]);
            }
            if (willReplacementCastToBoolean) {
              const nonNullishCheck = noDocumentAll ? ast`${core.types.cloneNode(check)} != null` : ast`
            ${core.types.cloneNode(check)} !== null && ${core.types.cloneNode(ref2)} !== void 0`;
              replacementPath.replaceWith(core.types.logicalExpression("&&", nonNullishCheck, replacement)), replacementPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(replacementPath.get("right"));
            } else {
              const nullishCheck = noDocumentAll ? ast`${core.types.cloneNode(check)} == null` : ast`
            ${core.types.cloneNode(check)} === null || ${core.types.cloneNode(ref2)} === void 0`, returnValue = isDeleteOperation ? ast`true` : ast`void 0`;
              replacementPath.replaceWith(core.types.conditionalExpression(nullishCheck, returnValue, replacement)), replacementPath = helperSkipTransparentExpressionWrappers.skipTransparentExprWrappers(replacementPath.get("alternate"));
            }
          }
        }
        var index2 = helperPluginUtils.declare((api, options) => {
          var _api$assumption, _api$assumption2;
          api.assertVersion(7);
          const { loose = false } = options, noDocumentAll = null != (_api$assumption = api.assumption("noDocumentAll")) ? _api$assumption : loose, pureGetters = null != (_api$assumption2 = api.assumption("pureGetters")) ? _api$assumption2 : loose;
          return { name: "proposal-optional-chaining", inherits: syntaxOptionalChaining__default.default.default, visitor: { "OptionalCallExpression|OptionalMemberExpression"(path3) {
            transform(path3, { noDocumentAll, pureGetters });
          } } };
        });
        exports2.default = index2, exports2.transform = transform;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-decorators@7.19.0_@babel+core@7.19.1/node_modules/@babel/plugin-syntax-decorators/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.19.0/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api, options) => {
          api.assertVersion(7);
          let { version: version2 } = options;
          {
            const { legacy } = options;
            if (void 0 !== legacy) {
              if ("boolean" != typeof legacy)
                throw new Error(".legacy must be a boolean.");
              if (void 0 !== version2)
                throw new Error("You can either use the .legacy or the .version option, not both.");
            }
            if (void 0 === version2)
              version2 = legacy ? "legacy" : "2018-09";
            else if ("2022-03" !== version2 && "2021-12" !== version2 && "2018-09" !== version2 && "legacy" !== version2)
              throw new Error("Unsupported decorators version: " + version2);
            var { decoratorsBeforeExport } = options;
            if (void 0 === decoratorsBeforeExport) {
              if ("2021-12" === version2 || "2022-03" === version2)
                decoratorsBeforeExport = false;
              else if ("2018-09" === version2)
                throw new Error("The decorators plugin, when .version is '2018-09' or not specified, requires a 'decoratorsBeforeExport' option, whose value must be a boolean.");
            } else {
              if ("legacy" === version2 || "2022-03" === version2)
                throw new Error(`'decoratorsBeforeExport' can't be used with ${version2} decorators.`);
              if ("boolean" != typeof decoratorsBeforeExport)
                throw new Error("'decoratorsBeforeExport' must be a boolean.");
            }
          }
          return { name: "syntax-decorators", manipulateOptions({ generatorOpts }, parserOpts) {
            "legacy" === version2 ? parserOpts.plugins.push("decorators-legacy") : "2022-03" === version2 ? parserOpts.plugins.push(["decorators", { decoratorsBeforeExport: false, allowCallParenthesized: false }], "decoratorAutoAccessors") : "2021-12" === version2 ? (parserOpts.plugins.push(["decorators", { decoratorsBeforeExport }], "decoratorAutoAccessors"), generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport) : "2018-09" === version2 && (parserOpts.plugins.push(["decorators", { decoratorsBeforeExport }]), generatorOpts.decoratorsBeforeExport = decoratorsBeforeExport);
          } };
        });
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.18.6_@babel+core@7.19.1/node_modules/@babel/plugin-syntax-typescript/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        function removePlugin(plugins, name) {
          const indices = [];
          plugins.forEach((plugin, i) => {
            (Array.isArray(plugin) ? plugin[0] : plugin) === name && indices.unshift(i);
          });
          for (const i of indices)
            plugins.splice(i, 1);
        }
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.19.0/node_modules/@babel/helper-plugin-utils/lib/index.js").declare)((api, { isTSX, disallowAmbiguousJSXLike }) => (api.assertVersion(7), { name: "syntax-typescript", manipulateOptions(opts, parserOpts) {
          const { plugins } = parserOpts;
          removePlugin(plugins, "flow"), removePlugin(plugins, "jsx"), plugins.push(["typescript", { disallowAmbiguousJSXLike }], "classProperties"), plugins.push("objectRestSpread"), isTSX && plugins.push("jsx");
        } }));
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.18.6_@babel+core@7.19.1/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.18.9/node_modules/@babel/helper-plugin-utils/lib/index.js"), _helperModuleTransforms = __webpack_require__2("./node_modules/.pnpm/@babel+helper-module-transforms@7.18.9/node_modules/@babel/helper-module-transforms/lib/index.js"), _helperSimpleAccess = __webpack_require__2("./node_modules/.pnpm/@babel+helper-simple-access@7.18.6/node_modules/@babel/helper-simple-access/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js"), _utils = __webpack_require__2("./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/utils.js"), _default = (0, _helperPluginUtils.declare)((api, options) => {
          var _api$assumption, _api$assumption2, _api$assumption3;
          api.assertVersion(7);
          const transformImportCall = (0, _utils.createDynamicImportTransform)(api), { strictNamespace = false, mjsStrictNamespace = strictNamespace, allowTopLevelThis, strict, strictMode, noInterop, importInterop, lazy = false, allowCommonJSExports = true, loose = false } = options, constantReexports = null != (_api$assumption = api.assumption("constantReexports")) ? _api$assumption : loose, enumerableModuleMeta = null != (_api$assumption2 = api.assumption("enumerableModuleMeta")) ? _api$assumption2 : loose, noIncompleteNsImportDetection = null != (_api$assumption3 = api.assumption("noIncompleteNsImportDetection")) && _api$assumption3;
          if (!("boolean" == typeof lazy || "function" == typeof lazy || Array.isArray(lazy) && lazy.every((item) => "string" == typeof item)))
            throw new Error(".lazy must be a boolean, array of strings, or a function");
          if ("boolean" != typeof strictNamespace)
            throw new Error(".strictNamespace must be a boolean, or undefined");
          if ("boolean" != typeof mjsStrictNamespace)
            throw new Error(".mjsStrictNamespace must be a boolean, or undefined");
          const getAssertion = (localName) => _core.template.expression.ast`
    (function(){
      throw new Error(
        "The CommonJS '" + "${localName}" + "' variable is not available in ES6 modules." +
        "Consider setting setting sourceType:script or sourceType:unambiguous in your " +
        "Babel config for this file.");
    })()
  `, moduleExportsVisitor = { ReferencedIdentifier(path3) {
            const localName = path3.node.name;
            if ("module" !== localName && "exports" !== localName)
              return;
            const localBinding = path3.scope.getBinding(localName);
            this.scope.getBinding(localName) !== localBinding || path3.parentPath.isObjectProperty({ value: path3.node }) && path3.parentPath.parentPath.isObjectPattern() || path3.parentPath.isAssignmentExpression({ left: path3.node }) || path3.isAssignmentExpression({ left: path3.node }) || path3.replaceWith(getAssertion(localName));
          }, UpdateExpression(path3) {
            const arg = path3.get("argument");
            if (!arg.isIdentifier())
              return;
            const localName = arg.node.name;
            if ("module" !== localName && "exports" !== localName)
              return;
            const localBinding = path3.scope.getBinding(localName);
            this.scope.getBinding(localName) === localBinding && path3.replaceWith(_core.types.assignmentExpression(path3.node.operator[0] + "=", arg.node, getAssertion(localName)));
          }, AssignmentExpression(path3) {
            const left = path3.get("left");
            if (left.isIdentifier()) {
              const localName = left.node.name;
              if ("module" !== localName && "exports" !== localName)
                return;
              const localBinding = path3.scope.getBinding(localName);
              if (this.scope.getBinding(localName) !== localBinding)
                return;
              const right = path3.get("right");
              right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
            } else if (left.isPattern()) {
              const ids = left.getOuterBindingIdentifiers(), localName = Object.keys(ids).filter((localName2) => ("module" === localName2 || "exports" === localName2) && this.scope.getBinding(localName2) === path3.scope.getBinding(localName2))[0];
              if (localName) {
                const right = path3.get("right");
                right.replaceWith(_core.types.sequenceExpression([right.node, getAssertion(localName)]));
              }
            }
          } };
          return { name: "transform-modules-commonjs", pre() {
            this.file.set("@babel/plugin-transform-modules-*", "commonjs");
          }, visitor: { CallExpression(path3) {
            if (!this.file.has("@babel/plugin-proposal-dynamic-import"))
              return;
            if (!path3.get("callee").isImport())
              return;
            let { scope } = path3;
            do {
              scope.rename("require");
            } while (scope = scope.parent);
            transformImportCall(this, path3.get("callee"));
          }, Program: { exit(path3, state) {
            if (!(0, _helperModuleTransforms.isModule)(path3))
              return;
            path3.scope.rename("exports"), path3.scope.rename("module"), path3.scope.rename("require"), path3.scope.rename("__filename"), path3.scope.rename("__dirname"), allowCommonJSExports || ((0, _helperSimpleAccess.default)(path3, /* @__PURE__ */ new Set(["module", "exports"]), false), path3.traverse(moduleExportsVisitor, { scope: path3.scope }));
            let moduleName = (0, _helperModuleTransforms.getModuleName)(this.file.opts, options);
            moduleName && (moduleName = _core.types.stringLiteral(moduleName));
            const { meta, headers } = (0, _helperModuleTransforms.rewriteModuleStatementsAndPrepareHeader)(path3, { exportName: "exports", constantReexports, enumerableModuleMeta, strict, strictMode, allowTopLevelThis, noInterop, importInterop, lazy, esNamespaceOnly: "string" == typeof state.filename && /\.mjs$/.test(state.filename) ? mjsStrictNamespace : strictNamespace, noIncompleteNsImportDetection, filename: this.file.opts.filename });
            for (const [source, metadata] of meta.source) {
              const loadExpr = _core.types.callExpression(_core.types.identifier("require"), [_core.types.stringLiteral(source)]);
              let header;
              if ((0, _helperModuleTransforms.isSideEffectImport)(metadata)) {
                if (metadata.lazy)
                  throw new Error("Assertion failure");
                header = _core.types.expressionStatement(loadExpr);
              } else {
                const init = (0, _helperModuleTransforms.wrapInterop)(path3, loadExpr, metadata.interop) || loadExpr;
                header = metadata.lazy ? _core.template.statement.ast`
                  function ${metadata.name}() {
                    const data = ${init};
                    ${metadata.name} = function(){ return data; };
                    return data;
                  }
                ` : _core.template.statement.ast`
                  var ${metadata.name} = ${init};
                `;
              }
              header.loc = metadata.loc, headers.push(header), headers.push(...(0, _helperModuleTransforms.buildNamespaceInitStatements)(meta, metadata, constantReexports));
            }
            (0, _helperModuleTransforms.ensureStatementsHoisted)(headers), path3.unshiftContainer("body", headers), path3.get("body").forEach((path4) => {
              -1 !== headers.indexOf(path4.node) && path4.isVariableDeclaration() && path4.scope.registerDeclaration(path4);
            });
          } } } };
        });
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path3, t) {
          const { name } = path3.node.id, parentIsExport = path3.parentPath.isExportNamedDeclaration();
          let isExported = parentIsExport;
          !isExported && t.isProgram(path3.parent) && (isExported = path3.parent.body.some((stmt) => t.isExportNamedDeclaration(stmt) && "type" !== stmt.exportKind && !stmt.source && stmt.specifiers.some((spec) => t.isExportSpecifier(spec) && "type" !== spec.exportKind && spec.local.name === name)));
          const entries = (0, _enum.translateEnumValues)(path3, t);
          if (isExported) {
            const obj = t.objectExpression(entries.map(([name2, value]) => t.objectProperty(t.isValidIdentifier(name2) ? t.identifier(name2) : t.stringLiteral(name2), value)));
            return void (path3.scope.hasOwnBinding(name) ? (parentIsExport ? path3.parentPath : path3).replaceWith(t.expressionStatement(t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("assign")), [path3.node.id, obj]))) : (path3.replaceWith(t.variableDeclaration("var", [t.variableDeclarator(path3.node.id, obj)])), path3.scope.registerDeclaration(path3)));
          }
          const entriesMap = new Map(entries);
          path3.scope.path.traverse({ Scope(path4) {
            path4.scope.hasOwnBinding(name) && path4.skip();
          }, MemberExpression(path4) {
            if (!t.isIdentifier(path4.node.object, { name }))
              return;
            let key;
            if (path4.node.computed) {
              if (!t.isStringLiteral(path4.node.property))
                return;
              key = path4.node.property.value;
            } else {
              if (!t.isIdentifier(path4.node.property))
                return;
              key = path4.node.property.name;
            }
            entriesMap.has(key) && path4.replaceWith(t.cloneNode(entriesMap.get(key)));
          } }), path3.remove();
        };
        var _enum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-transform-typescript/lib/enum.js");
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-transform-typescript/lib/enum.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path3, t) {
          const { node } = path3;
          if (node.declare)
            return void path3.remove();
          const name = node.id.name, fill = function(path4, t2, id) {
            const assignments = translateEnumValues(path4, t2).map(([memberName, memberValue]) => {
              return isString = t2.isStringLiteral(memberValue), options = { ENUM: t2.cloneNode(id), NAME: memberName, VALUE: memberValue }, (isString ? buildStringAssignment : buildNumericAssignment)(options);
              var isString, options;
            });
            return buildEnumWrapper({ ID: t2.cloneNode(id), ASSIGNMENTS: assignments });
          }(path3, t, node.id);
          switch (path3.parent.type) {
            case "BlockStatement":
            case "ExportNamedDeclaration":
            case "Program":
              if (path3.insertAfter(fill), function seen(parentPath) {
                if (parentPath.isExportDeclaration())
                  return seen(parentPath.parentPath);
                return !!parentPath.getData(name) || (parentPath.setData(name, true), false);
              }(path3.parentPath))
                path3.remove();
              else {
                const isGlobal = t.isProgram(path3.parent);
                path3.scope.registerDeclaration(path3.replaceWith(function(id, t2, kind) {
                  return t2.variableDeclaration(kind, [t2.variableDeclarator(id)]);
                }(node.id, t, isGlobal ? "var" : "let"))[0]);
              }
              break;
            default:
              throw new Error(`Unexpected enum parent '${path3.parent.type}`);
          }
        }, exports2.translateEnumValues = translateEnumValues;
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js"), _assert = __webpack_require__2("assert");
        const buildEnumWrapper = (0, _core.template)("\n  (function (ID) {\n    ASSIGNMENTS;\n  })(ID || (ID = {}));\n"), buildStringAssignment = (0, _core.template)('\n  ENUM["NAME"] = VALUE;\n'), buildNumericAssignment = (0, _core.template)('\n  ENUM[ENUM["NAME"] = VALUE] = "NAME";\n');
        function ReferencedIdentifier(expr, state) {
          const { seen, path: path3, t } = state, name = expr.node.name;
          seen.has(name) && !expr.scope.hasOwnBinding(name) && (expr.replaceWith(t.memberExpression(t.cloneNode(path3.node.id), t.cloneNode(expr.node))), expr.skip());
        }
        const enumSelfReferenceVisitor = { ReferencedIdentifier };
        function translateEnumValues(path3, t) {
          const seen = /* @__PURE__ */ new Map();
          let lastName, constValue = -1;
          return path3.get("members").map((memberPath) => {
            const member = memberPath.node, name = t.isIdentifier(member.id) ? member.id.name : member.id.value, initializer = member.initializer;
            let value;
            if (initializer)
              if (constValue = function(expr, seen2) {
                return evalConstant(expr);
                function evalConstant(expr2) {
                  switch (expr2.type) {
                    case "StringLiteral":
                      return expr2.value;
                    case "UnaryExpression":
                      return evalUnaryExpression(expr2);
                    case "BinaryExpression":
                      return evalBinaryExpression(expr2);
                    case "NumericLiteral":
                      return expr2.value;
                    case "ParenthesizedExpression":
                      return evalConstant(expr2.expression);
                    case "Identifier":
                      return seen2.get(expr2.name);
                    case "TemplateLiteral":
                      if (1 === expr2.quasis.length)
                        return expr2.quasis[0].value.cooked;
                    default:
                      return;
                  }
                }
                function evalUnaryExpression({ argument, operator }) {
                  const value2 = evalConstant(argument);
                  if (void 0 !== value2)
                    switch (operator) {
                      case "+":
                        return value2;
                      case "-":
                        return -value2;
                      case "~":
                        return ~value2;
                      default:
                        return;
                    }
                }
                function evalBinaryExpression(expr2) {
                  const left = evalConstant(expr2.left);
                  if (void 0 === left)
                    return;
                  const right = evalConstant(expr2.right);
                  if (void 0 !== right)
                    switch (expr2.operator) {
                      case "|":
                        return left | right;
                      case "&":
                        return left & right;
                      case ">>":
                        return left >> right;
                      case ">>>":
                        return left >>> right;
                      case "<<":
                        return left << right;
                      case "^":
                        return left ^ right;
                      case "*":
                        return left * right;
                      case "/":
                        return left / right;
                      case "+":
                        return left + right;
                      case "-":
                        return left - right;
                      case "%":
                        return left % right;
                      default:
                        return;
                    }
                }
              }(initializer, seen), void 0 !== constValue)
                seen.set(name, constValue), "number" == typeof constValue ? value = t.numericLiteral(constValue) : (_assert("string" == typeof constValue), value = t.stringLiteral(constValue));
              else {
                const initializerPath = memberPath.get("initializer");
                initializerPath.isReferencedIdentifier() ? ReferencedIdentifier(initializerPath, { t, seen, path: path3 }) : initializerPath.traverse(enumSelfReferenceVisitor, { t, seen, path: path3 }), value = initializerPath.node, seen.set(name, void 0);
              }
            else if ("number" == typeof constValue)
              constValue += 1, value = t.numericLiteral(constValue), seen.set(name, constValue);
            else {
              if ("string" == typeof constValue)
                throw path3.buildCodeFrameError("Enum member must have initializer.");
              {
                const lastRef = t.memberExpression(t.cloneNode(path3.node.id), t.stringLiteral(lastName), true);
                value = t.binaryExpression("+", t.numericLiteral(1), lastRef), seen.set(name, void 0);
              }
            }
            return lastName = name, [name, value];
          });
        }
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-transform-typescript/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperPluginUtils = __webpack_require__2("./node_modules/.pnpm/@babel+helper-plugin-utils@7.19.0/node_modules/@babel/helper-plugin-utils/lib/index.js"), _pluginSyntaxTypescript = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-syntax-typescript@7.18.6_@babel+core@7.19.1/node_modules/@babel/plugin-syntax-typescript/lib/index.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js"), _helperCreateClassFeaturesPlugin = __webpack_require__2("./node_modules/.pnpm/@babel+helper-create-class-features-plugin@7.19.0_@babel+core@7.19.1/node_modules/@babel/helper-create-class-features-plugin/lib/index.js"), _constEnum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-transform-typescript/lib/const-enum.js"), _enum = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-transform-typescript/lib/enum.js"), _namespace = __webpack_require__2("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-transform-typescript/lib/namespace.js");
        function isInType(path3) {
          switch (path3.parent.type) {
            case "TSTypeReference":
            case "TSExpressionWithTypeArguments":
            case "TSTypeQuery":
              return true;
            case "TSQualifiedName":
              return "TSImportEqualsDeclaration" !== path3.parentPath.findParent((path4) => "TSQualifiedName" !== path4.type).type;
            case "ExportSpecifier":
              return "type" === path3.parentPath.parent.exportKind;
            default:
              return false;
          }
        }
        const GLOBAL_TYPES = /* @__PURE__ */ new WeakMap(), NEEDS_EXPLICIT_ESM = /* @__PURE__ */ new WeakMap(), PARSED_PARAMS = /* @__PURE__ */ new WeakSet();
        function isGlobalType({ scope }, name) {
          return !scope.hasBinding(name) && (!!GLOBAL_TYPES.get(scope).has(name) || (console.warn(`The exported identifier "${name}" is not declared in Babel's scope tracker
as a JavaScript value binding, and "@babel/plugin-transform-typescript"
never encountered it as a TypeScript type declaration.
It will be treated as a JavaScript value.

This problem is likely caused by another plugin injecting
"${name}" without registering it in the scope tracker. If you are the author
 of that plugin, please use "scope.registerDeclaration(declarationPath)".`), false));
        }
        function registerGlobalType(programScope, name) {
          GLOBAL_TYPES.get(programScope).add(name);
        }
        var _default = (0, _helperPluginUtils.declare)((api, opts) => {
          api.assertVersion(7);
          const JSX_PRAGMA_REGEX = /\*?\s*@jsx((?:Frag)?)\s+([^\s]+)/, { allowNamespaces = true, jsxPragma = "React.createElement", jsxPragmaFrag = "React.Fragment", onlyRemoveTypeImports = false, optimizeConstEnums = false } = opts;
          var { allowDeclareFields = false } = opts;
          const classMemberVisitors = { field(path3) {
            const { node } = path3;
            if (!allowDeclareFields && node.declare)
              throw path3.buildCodeFrameError("The 'declare' modifier is only allowed when the 'allowDeclareFields' option of @babel/plugin-transform-typescript or @babel/preset-typescript is enabled.");
            if (node.declare) {
              if (node.value)
                throw path3.buildCodeFrameError("Fields with the 'declare' modifier cannot be initialized here, but only in the constructor");
              node.decorators || path3.remove();
            } else if (node.definite) {
              if (node.value)
                throw path3.buildCodeFrameError("Definitely assigned fields cannot be initialized here, but only in the constructor");
              allowDeclareFields || node.decorators || _core.types.isClassPrivateProperty(node) || path3.remove();
            } else
              allowDeclareFields || node.value || node.decorators || _core.types.isClassPrivateProperty(node) || path3.remove();
            node.accessibility && (node.accessibility = null), node.abstract && (node.abstract = null), node.readonly && (node.readonly = null), node.optional && (node.optional = null), node.typeAnnotation && (node.typeAnnotation = null), node.definite && (node.definite = null), node.declare && (node.declare = null), node.override && (node.override = null);
          }, method({ node }) {
            node.accessibility && (node.accessibility = null), node.abstract && (node.abstract = null), node.optional && (node.optional = null), node.override && (node.override = null);
          }, constructor(path3, classPath) {
            path3.node.accessibility && (path3.node.accessibility = null);
            const assigns = [], { scope } = path3;
            for (const paramPath of path3.get("params")) {
              const param = paramPath.node;
              if ("TSParameterProperty" === param.type) {
                const parameter = param.parameter;
                if (PARSED_PARAMS.has(parameter))
                  continue;
                let id;
                if (PARSED_PARAMS.add(parameter), _core.types.isIdentifier(parameter))
                  id = parameter;
                else {
                  if (!_core.types.isAssignmentPattern(parameter) || !_core.types.isIdentifier(parameter.left))
                    throw paramPath.buildCodeFrameError("Parameter properties can not be destructuring patterns.");
                  id = parameter.left;
                }
                assigns.push(_core.template.statement.ast`
          this.${_core.types.cloneNode(id)} = ${_core.types.cloneNode(id)}`), paramPath.replaceWith(paramPath.get("parameter")), scope.registerBinding("param", paramPath);
              }
            }
            (0, _helperCreateClassFeaturesPlugin.injectInitialization)(classPath, path3, assigns);
          } };
          return { name: "transform-typescript", inherits: _pluginSyntaxTypescript.default, visitor: { Pattern: visitPattern, Identifier: visitPattern, RestElement: visitPattern, Program: { enter(path3, state) {
            const { file } = state;
            let fileJsxPragma = null, fileJsxPragmaFrag = null;
            const programScope = path3.scope;
            if (GLOBAL_TYPES.has(programScope) || GLOBAL_TYPES.set(programScope, /* @__PURE__ */ new Set()), file.ast.comments)
              for (const comment of file.ast.comments) {
                const jsxMatches = JSX_PRAGMA_REGEX.exec(comment.value);
                jsxMatches && (jsxMatches[1] ? fileJsxPragmaFrag = jsxMatches[2] : fileJsxPragma = jsxMatches[2]);
              }
            let pragmaImportName = fileJsxPragma || jsxPragma;
            pragmaImportName && ([pragmaImportName] = pragmaImportName.split("."));
            let pragmaFragImportName = fileJsxPragmaFrag || jsxPragmaFrag;
            pragmaFragImportName && ([pragmaFragImportName] = pragmaFragImportName.split("."));
            for (let stmt of path3.get("body"))
              if (stmt.isImportDeclaration()) {
                if (NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), "type" === stmt.node.importKind) {
                  for (const specifier of stmt.node.specifiers)
                    registerGlobalType(programScope, specifier.local.name);
                  stmt.remove();
                  continue;
                }
                const importsToRemove = /* @__PURE__ */ new Set(), specifiersLength = stmt.node.specifiers.length, isAllSpecifiersElided = () => specifiersLength > 0 && specifiersLength === importsToRemove.size;
                for (const specifier of stmt.node.specifiers)
                  if ("ImportSpecifier" === specifier.type && "type" === specifier.importKind) {
                    registerGlobalType(programScope, specifier.local.name);
                    const binding = stmt.scope.getBinding(specifier.local.name);
                    binding && importsToRemove.add(binding.path);
                  }
                if (onlyRemoveTypeImports)
                  NEEDS_EXPLICIT_ESM.set(path3.node, false);
                else {
                  if (0 === stmt.node.specifiers.length) {
                    NEEDS_EXPLICIT_ESM.set(path3.node, false);
                    continue;
                  }
                  for (const specifier of stmt.node.specifiers) {
                    const binding = stmt.scope.getBinding(specifier.local.name);
                    binding && !importsToRemove.has(binding.path) && (isImportTypeOnly({ binding, programPath: path3, pragmaImportName, pragmaFragImportName }) ? importsToRemove.add(binding.path) : NEEDS_EXPLICIT_ESM.set(path3.node, false));
                  }
                }
                if (isAllSpecifiersElided())
                  stmt.remove();
                else
                  for (const importPath of importsToRemove)
                    importPath.remove();
              } else if (stmt.isExportDeclaration() && (stmt = stmt.get("declaration")), stmt.isVariableDeclaration({ declare: true }))
                for (const name of Object.keys(stmt.getBindingIdentifiers()))
                  registerGlobalType(programScope, name);
              else
                (stmt.isTSTypeAliasDeclaration() || stmt.isTSDeclareFunction() && stmt.get("id").isIdentifier() || stmt.isTSInterfaceDeclaration() || stmt.isClassDeclaration({ declare: true }) || stmt.isTSEnumDeclaration({ declare: true }) || stmt.isTSModuleDeclaration({ declare: true }) && stmt.get("id").isIdentifier()) && registerGlobalType(programScope, stmt.node.id.name);
          }, exit(path3) {
            "module" === path3.node.sourceType && NEEDS_EXPLICIT_ESM.get(path3.node) && path3.pushContainer("body", _core.types.exportNamedDeclaration());
          } }, ExportNamedDeclaration(path3, state) {
            NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), "type" !== path3.node.exportKind ? path3.node.source && path3.node.specifiers.length > 0 && path3.node.specifiers.every((specifier) => "ExportSpecifier" === specifier.type && "type" === specifier.exportKind) || !path3.node.source && path3.node.specifiers.length > 0 && path3.node.specifiers.every((specifier) => _core.types.isExportSpecifier(specifier) && isGlobalType(path3, specifier.local.name)) ? path3.remove() : NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false) : path3.remove();
          }, ExportSpecifier(path3) {
            (!path3.parent.source && isGlobalType(path3, path3.node.local.name) || "type" === path3.node.exportKind) && path3.remove();
          }, ExportDefaultDeclaration(path3, state) {
            NEEDS_EXPLICIT_ESM.has(state.file.ast.program) || NEEDS_EXPLICIT_ESM.set(state.file.ast.program, true), _core.types.isIdentifier(path3.node.declaration) && isGlobalType(path3, path3.node.declaration.name) ? path3.remove() : NEEDS_EXPLICIT_ESM.set(state.file.ast.program, false);
          }, TSDeclareFunction(path3) {
            path3.remove();
          }, TSDeclareMethod(path3) {
            path3.remove();
          }, VariableDeclaration(path3) {
            path3.node.declare && path3.remove();
          }, VariableDeclarator({ node }) {
            node.definite && (node.definite = null);
          }, TSIndexSignature(path3) {
            path3.remove();
          }, ClassDeclaration(path3) {
            const { node } = path3;
            node.declare && path3.remove();
          }, Class(path3) {
            const { node } = path3;
            node.typeParameters && (node.typeParameters = null), node.superTypeParameters && (node.superTypeParameters = null), node.implements && (node.implements = null), node.abstract && (node.abstract = null), path3.get("body.body").forEach((child) => {
              child.isClassMethod() || child.isClassPrivateMethod() ? "constructor" === child.node.kind ? classMemberVisitors.constructor(child, path3) : classMemberVisitors.method(child) : (child.isClassProperty() || child.isClassPrivateProperty()) && classMemberVisitors.field(child);
            });
          }, Function(path3) {
            const { node } = path3;
            node.typeParameters && (node.typeParameters = null), node.returnType && (node.returnType = null);
            const params = node.params;
            params.length > 0 && _core.types.isIdentifier(params[0], { name: "this" }) && params.shift();
          }, TSModuleDeclaration(path3) {
            (0, _namespace.default)(path3, allowNamespaces);
          }, TSInterfaceDeclaration(path3) {
            path3.remove();
          }, TSTypeAliasDeclaration(path3) {
            path3.remove();
          }, TSEnumDeclaration(path3) {
            optimizeConstEnums && path3.node.const ? (0, _constEnum.default)(path3, _core.types) : (0, _enum.default)(path3, _core.types);
          }, TSImportEqualsDeclaration(path3) {
            if (_core.types.isTSExternalModuleReference(path3.node.moduleReference))
              throw path3.buildCodeFrameError(`\`import ${path3.node.id.name} = require('${path3.node.moduleReference.expression.value}')\` is not supported by @babel/plugin-transform-typescript
Please consider using \`import ${path3.node.id.name} from '${path3.node.moduleReference.expression.value}';\` alongside Typescript's --allowSyntheticDefaultImports option.`);
            path3.replaceWith(_core.types.variableDeclaration("var", [_core.types.variableDeclarator(path3.node.id, entityNameToExpr(path3.node.moduleReference))]));
          }, TSExportAssignment(path3) {
            throw path3.buildCodeFrameError("`export =` is not supported by @babel/plugin-transform-typescript\nPlease consider using `export <value>;`.");
          }, TSTypeAssertion(path3) {
            path3.replaceWith(path3.node.expression);
          }, TSAsExpression(path3) {
            let { node } = path3;
            do {
              node = node.expression;
            } while (_core.types.isTSAsExpression(node));
            path3.replaceWith(node);
          }, [api.types.tsInstantiationExpression ? "TSNonNullExpression|TSInstantiationExpression" : "TSNonNullExpression"](path3) {
            path3.replaceWith(path3.node.expression);
          }, CallExpression(path3) {
            path3.node.typeParameters = null;
          }, OptionalCallExpression(path3) {
            path3.node.typeParameters = null;
          }, NewExpression(path3) {
            path3.node.typeParameters = null;
          }, JSXOpeningElement(path3) {
            path3.node.typeParameters = null;
          }, TaggedTemplateExpression(path3) {
            path3.node.typeParameters = null;
          } } };
          function entityNameToExpr(node) {
            return _core.types.isTSQualifiedName(node) ? _core.types.memberExpression(entityNameToExpr(node.left), node.right) : node;
          }
          function visitPattern({ node }) {
            node.typeAnnotation && (node.typeAnnotation = null), _core.types.isIdentifier(node) && node.optional && (node.optional = null);
          }
          function isImportTypeOnly({ binding, programPath, pragmaImportName, pragmaFragImportName }) {
            for (const path3 of binding.referencePaths)
              if (!isInType(path3))
                return false;
            if (binding.identifier.name !== pragmaImportName && binding.identifier.name !== pragmaFragImportName)
              return true;
            let sourceFileHasJsx = false;
            return programPath.traverse({ "JSXElement|JSXFragment"(path3) {
              sourceFileHasJsx = true, path3.stop();
            } }), !sourceFileHasJsx;
          }
        });
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+plugin-transform-typescript@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-transform-typescript/lib/namespace.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(path3, allowNamespaces) {
          if (path3.node.declare || "StringLiteral" === path3.node.id.type)
            return void path3.remove();
          if (!allowNamespaces)
            throw path3.get("id").buildCodeFrameError("Namespace not marked type-only declare. Non-declarative namespaces are only supported experimentally in Babel. To enable and review caveats see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
          const name = path3.node.id.name, value = handleNested(path3, _core.types.cloneNode(path3.node, true)), bound = path3.scope.hasOwnBinding(name);
          "ExportNamedDeclaration" === path3.parent.type ? bound ? path3.parentPath.replaceWith(value) : (path3.parentPath.insertAfter(value), path3.replaceWith(getDeclaration(name)), path3.scope.registerDeclaration(path3.parentPath)) : bound ? path3.replaceWith(value) : path3.scope.registerDeclaration(path3.replaceWithMultiple([getDeclaration(name), value])[0]);
        };
        var _core = __webpack_require__2("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js");
        function getDeclaration(name) {
          return _core.types.variableDeclaration("let", [_core.types.variableDeclarator(_core.types.identifier(name))]);
        }
        function getMemberExpression(name, itemName) {
          return _core.types.memberExpression(_core.types.identifier(name), _core.types.identifier(itemName));
        }
        function handleVariableDeclaration(node, name, hub) {
          if ("const" !== node.kind)
            throw hub.file.buildCodeFrameError(node, "Namespaces exporting non-const are not supported by Babel. Change to const or see: https://babeljs.io/docs/en/babel-plugin-transform-typescript");
          const { declarations } = node;
          if (declarations.every((declarator) => _core.types.isIdentifier(declarator.id))) {
            for (const declarator of declarations)
              declarator.init && (declarator.init = _core.types.assignmentExpression("=", getMemberExpression(name, declarator.id.name), declarator.init));
            return [node];
          }
          const bindingIdentifiers = _core.types.getBindingIdentifiers(node), assignments = [];
          for (const idName in bindingIdentifiers)
            assignments.push(_core.types.assignmentExpression("=", getMemberExpression(name, idName), _core.types.cloneNode(bindingIdentifiers[idName])));
          return [node, _core.types.expressionStatement(_core.types.sequenceExpression(assignments))];
        }
        function buildNestedAmbiendModuleError(path3, node) {
          throw path3.hub.buildError(node, "Ambient modules cannot be nested in other modules or namespaces.", Error);
        }
        function handleNested(path3, node, parentExport) {
          const names = /* @__PURE__ */ new Set(), realName = node.id;
          _core.types.assertIdentifier(realName);
          const name = path3.scope.generateUid(realName.name), namespaceTopLevel = _core.types.isTSModuleBlock(node.body) ? node.body.body : [_core.types.exportNamedDeclaration(node.body)];
          for (let i = 0; i < namespaceTopLevel.length; i++) {
            const subNode = namespaceTopLevel[i];
            switch (subNode.type) {
              case "TSModuleDeclaration": {
                if (!_core.types.isIdentifier(subNode.id))
                  throw buildNestedAmbiendModuleError(path3, subNode);
                const transformed = handleNested(path3, subNode), moduleName = subNode.id.name;
                names.has(moduleName) ? namespaceTopLevel[i] = transformed : (names.add(moduleName), namespaceTopLevel.splice(i++, 1, getDeclaration(moduleName), transformed));
                continue;
              }
              case "TSEnumDeclaration":
              case "FunctionDeclaration":
              case "ClassDeclaration":
                names.add(subNode.id.name);
                continue;
              case "VariableDeclaration":
                for (const name2 in _core.types.getBindingIdentifiers(subNode))
                  names.add(name2);
                continue;
              default:
                continue;
              case "ExportNamedDeclaration":
            }
            switch (subNode.declaration.type) {
              case "TSEnumDeclaration":
              case "FunctionDeclaration":
              case "ClassDeclaration": {
                if (subNode.declaration.declare)
                  continue;
                const itemName = subNode.declaration.id.name;
                names.add(itemName), namespaceTopLevel.splice(i++, 1, subNode.declaration, _core.types.expressionStatement(_core.types.assignmentExpression("=", getMemberExpression(name, itemName), _core.types.identifier(itemName))));
                break;
              }
              case "VariableDeclaration": {
                const nodes = handleVariableDeclaration(subNode.declaration, name, path3.hub);
                namespaceTopLevel.splice(i, nodes.length, ...nodes), i += nodes.length - 1;
                break;
              }
              case "TSModuleDeclaration": {
                if (!_core.types.isIdentifier(subNode.declaration.id))
                  throw buildNestedAmbiendModuleError(path3, subNode.declaration);
                const transformed = handleNested(path3, subNode.declaration, _core.types.identifier(name)), moduleName = subNode.declaration.id.name;
                names.has(moduleName) ? namespaceTopLevel[i] = transformed : (names.add(moduleName), namespaceTopLevel.splice(i++, 1, getDeclaration(moduleName), transformed));
              }
            }
          }
          let fallthroughValue = _core.types.objectExpression([]);
          if (parentExport) {
            const memberExpr = _core.types.memberExpression(parentExport, realName);
            fallthroughValue = _core.template.expression.ast`
      ${_core.types.cloneNode(memberExpr)} ||
        (${_core.types.cloneNode(memberExpr)} = ${fallthroughValue})
    `;
          }
          return _core.template.statement.ast`
    (function (${_core.types.identifier(name)}) {
      ${namespaceTopLevel}
    })(${realName} || (${_core.types.cloneNode(realName)} = ${fallthroughValue}));
  `;
        }
      }, "./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/builder.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function createTemplateBuilder(formatter, defaultOpts) {
          const templateFnCache = /* @__PURE__ */ new WeakMap(), templateAstCache = /* @__PURE__ */ new WeakMap(), cachedOpts = defaultOpts || (0, _options.validate)(null);
          return Object.assign((tpl, ...args) => {
            if ("string" == typeof tpl) {
              if (args.length > 1)
                throw new Error("Unexpected extra params.");
              return extendedTrace((0, _string.default)(formatter, tpl, (0, _options.merge)(cachedOpts, (0, _options.validate)(args[0]))));
            }
            if (Array.isArray(tpl)) {
              let builder = templateFnCache.get(tpl);
              return builder || (builder = (0, _literal.default)(formatter, tpl, cachedOpts), templateFnCache.set(tpl, builder)), extendedTrace(builder(args));
            }
            if ("object" == typeof tpl && tpl) {
              if (args.length > 0)
                throw new Error("Unexpected extra params.");
              return createTemplateBuilder(formatter, (0, _options.merge)(cachedOpts, (0, _options.validate)(tpl)));
            }
            throw new Error("Unexpected template param " + typeof tpl);
          }, { ast: (tpl, ...args) => {
            if ("string" == typeof tpl) {
              if (args.length > 1)
                throw new Error("Unexpected extra params.");
              return (0, _string.default)(formatter, tpl, (0, _options.merge)((0, _options.merge)(cachedOpts, (0, _options.validate)(args[0])), NO_PLACEHOLDER))();
            }
            if (Array.isArray(tpl)) {
              let builder = templateAstCache.get(tpl);
              return builder || (builder = (0, _literal.default)(formatter, tpl, (0, _options.merge)(cachedOpts, NO_PLACEHOLDER)), templateAstCache.set(tpl, builder)), builder(args)();
            }
            throw new Error("Unexpected template param " + typeof tpl);
          } });
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/options.js"), _string = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/string.js"), _literal = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/literal.js");
        const NO_PLACEHOLDER = (0, _options.validate)({ placeholderPattern: false });
        function extendedTrace(fn) {
          let rootStack = "";
          try {
            throw new Error();
          } catch (error) {
            error.stack && (rootStack = error.stack.split("\n").slice(3).join("\n"));
          }
          return (arg) => {
            try {
              return fn(arg);
            } catch (err) {
              throw err.stack += `
    =============
${rootStack}`, err;
            }
          };
        }
      }, "./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/formatters.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.statements = exports2.statement = exports2.smart = exports2.program = exports2.expression = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { assertExpressionStatement } = _t;
        function makeStatementFormatter(fn) {
          return { code: (str) => `/* @babel/template */;
${str}`, validate: () => {
          }, unwrap: (ast) => fn(ast.program.body.slice(1)) };
        }
        const smart = makeStatementFormatter((body) => body.length > 1 ? body : body[0]);
        exports2.smart = smart;
        const statements = makeStatementFormatter((body) => body);
        exports2.statements = statements;
        const statement = makeStatementFormatter((body) => {
          if (0 === body.length)
            throw new Error("Found nothing to return.");
          if (body.length > 1)
            throw new Error("Found multiple statements but wanted one");
          return body[0];
        });
        exports2.statement = statement;
        const expression = { code: (str) => `(
${str}
)`, validate: (ast) => {
          if (ast.program.body.length > 1)
            throw new Error("Found multiple statements but wanted one");
          if (0 === expression.unwrap(ast).start)
            throw new Error("Parse result included parens.");
        }, unwrap: ({ program }) => {
          const [stmt] = program.body;
          return assertExpressionStatement(stmt), stmt.expression;
        } };
        exports2.expression = expression;
        exports2.program = { code: (str) => str, validate: () => {
        }, unwrap: (ast) => ast.program };
      }, "./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.statements = exports2.statement = exports2.smart = exports2.program = exports2.expression = exports2.default = void 0;
        var formatters = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/formatters.js"), _builder = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/builder.js");
        const smart = (0, _builder.default)(formatters.smart);
        exports2.smart = smart;
        const statement = (0, _builder.default)(formatters.statement);
        exports2.statement = statement;
        const statements = (0, _builder.default)(formatters.statements);
        exports2.statements = statements;
        const expression = (0, _builder.default)(formatters.expression);
        exports2.expression = expression;
        const program = (0, _builder.default)(formatters.program);
        exports2.program = program;
        var _default = Object.assign(smart.bind(void 0), { smart, statement, statements, expression, program, ast: smart.ast });
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/literal.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(formatter, tpl, opts) {
          const { metadata, names } = function(formatter2, tpl2, opts2) {
            let names2, nameSet, metadata2, prefix = "";
            do {
              prefix += "$";
              const result = buildTemplateCode(tpl2, prefix);
              names2 = result.names, nameSet = new Set(names2), metadata2 = (0, _parse.default)(formatter2, formatter2.code(result.code), { parser: opts2.parser, placeholderWhitelist: new Set(result.names.concat(opts2.placeholderWhitelist ? Array.from(opts2.placeholderWhitelist) : [])), placeholderPattern: opts2.placeholderPattern, preserveComments: opts2.preserveComments, syntacticPlaceholders: opts2.syntacticPlaceholders });
            } while (metadata2.placeholders.some((placeholder) => placeholder.isDuplicate && nameSet.has(placeholder.name)));
            return { metadata: metadata2, names: names2 };
          }(formatter, tpl, opts);
          return (arg) => {
            const defaultReplacements = {};
            return arg.forEach((replacement, i) => {
              defaultReplacements[names[i]] = replacement;
            }), (arg2) => {
              const replacements = (0, _options.normalizeReplacements)(arg2);
              return replacements && Object.keys(replacements).forEach((key) => {
                if (Object.prototype.hasOwnProperty.call(defaultReplacements, key))
                  throw new Error("Unexpected replacement overlap.");
              }), formatter.unwrap((0, _populate.default)(metadata, replacements ? Object.assign(replacements, defaultReplacements) : defaultReplacements));
            };
          };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/options.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/parse.js"), _populate = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/populate.js");
        function buildTemplateCode(tpl, prefix) {
          const names = [];
          let code = tpl[0];
          for (let i = 1; i < tpl.length; i++) {
            const value = `${prefix}${i - 1}`;
            names.push(value), code += value + tpl[i];
          }
          return { names, code };
        }
      }, "./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/options.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.merge = function(a, b) {
          const { placeholderWhitelist = a.placeholderWhitelist, placeholderPattern = a.placeholderPattern, preserveComments = a.preserveComments, syntacticPlaceholders = a.syntacticPlaceholders } = b;
          return { parser: Object.assign({}, a.parser, b.parser), placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders };
        }, exports2.normalizeReplacements = function(replacements) {
          if (Array.isArray(replacements))
            return replacements.reduce((acc, replacement, i) => (acc["$" + i] = replacement, acc), {});
          if ("object" == typeof replacements || null == replacements)
            return replacements || void 0;
          throw new Error("Template replacements must be an array, object, null, or undefined");
        }, exports2.validate = function(opts) {
          if (null != opts && "object" != typeof opts)
            throw new Error("Unknown template options.");
          const _ref = opts || {}, { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = _ref, parser = function(source, excluded) {
            if (null == source)
              return {};
            var key, i, target = {}, sourceKeys = Object.keys(source);
            for (i = 0; i < sourceKeys.length; i++)
              key = sourceKeys[i], excluded.indexOf(key) >= 0 || (target[key] = source[key]);
            return target;
          }(_ref, _excluded);
          if (null != placeholderWhitelist && !(placeholderWhitelist instanceof Set))
            throw new Error("'.placeholderWhitelist' must be a Set, null, or undefined");
          if (null != placeholderPattern && !(placeholderPattern instanceof RegExp) && false !== placeholderPattern)
            throw new Error("'.placeholderPattern' must be a RegExp, false, null, or undefined");
          if (null != preserveComments && "boolean" != typeof preserveComments)
            throw new Error("'.preserveComments' must be a boolean, null, or undefined");
          if (null != syntacticPlaceholders && "boolean" != typeof syntacticPlaceholders)
            throw new Error("'.syntacticPlaceholders' must be a boolean, null, or undefined");
          if (true === syntacticPlaceholders && (null != placeholderWhitelist || null != placeholderPattern))
            throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
          return { parser, placeholderWhitelist: placeholderWhitelist || void 0, placeholderPattern: null == placeholderPattern ? void 0 : placeholderPattern, preserveComments: null == preserveComments ? void 0 : preserveComments, syntacticPlaceholders: null == syntacticPlaceholders ? void 0 : syntacticPlaceholders };
        };
        const _excluded = ["placeholderWhitelist", "placeholderPattern", "preserveComments", "syntacticPlaceholders"];
      }, "./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/parse.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(formatter, code, opts) {
          const { placeholderWhitelist, placeholderPattern, preserveComments, syntacticPlaceholders } = opts, ast = function(code2, parserOpts, syntacticPlaceholders2) {
            const plugins = (parserOpts.plugins || []).slice();
            false !== syntacticPlaceholders2 && plugins.push("placeholders");
            parserOpts = Object.assign({ allowReturnOutsideFunction: true, allowSuperOutsideMethod: true, sourceType: "module" }, parserOpts, { plugins });
            try {
              return (0, _parser.parse)(code2, parserOpts);
            } catch (err) {
              const loc = err.loc;
              throw loc && (err.message += "\n" + (0, _codeFrame.codeFrameColumns)(code2, { start: loc }), err.code = "BABEL_TEMPLATE_PARSE_ERROR"), err;
            }
          }(code, opts.parser, syntacticPlaceholders);
          removePropertiesDeep(ast, { preserveComments }), formatter.validate(ast);
          const syntactic = { placeholders: [], placeholderNames: /* @__PURE__ */ new Set() }, legacy = { placeholders: [], placeholderNames: /* @__PURE__ */ new Set() }, isLegacyRef = { value: void 0 };
          return traverse(ast, placeholderVisitorHandler, { syntactic, legacy, isLegacyRef, placeholderWhitelist, placeholderPattern, syntacticPlaceholders }), Object.assign({ ast }, isLegacyRef.value ? legacy : syntactic);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.18.13/node_modules/@babel/parser/lib/index.js"), _codeFrame = __webpack_require__2("./stubs/babel_codeframe.js");
        const { isCallExpression, isExpressionStatement, isFunction, isIdentifier, isJSXIdentifier, isNewExpression, isPlaceholder, isStatement, isStringLiteral, removePropertiesDeep, traverse } = _t, PATTERN = /^[_$A-Z0-9]+$/;
        function placeholderVisitorHandler(node, ancestors, state) {
          var _state$placeholderWhi;
          let name;
          if (isPlaceholder(node)) {
            if (false === state.syntacticPlaceholders)
              throw new Error("%%foo%%-style placeholders can't be used when '.syntacticPlaceholders' is false.");
            name = node.name.name, state.isLegacyRef.value = false;
          } else {
            if (false === state.isLegacyRef.value || state.syntacticPlaceholders)
              return;
            if (isIdentifier(node) || isJSXIdentifier(node))
              name = node.name, state.isLegacyRef.value = true;
            else {
              if (!isStringLiteral(node))
                return;
              name = node.value, state.isLegacyRef.value = true;
            }
          }
          if (!state.isLegacyRef.value && (null != state.placeholderPattern || null != state.placeholderWhitelist))
            throw new Error("'.placeholderWhitelist' and '.placeholderPattern' aren't compatible with '.syntacticPlaceholders: true'");
          if (state.isLegacyRef.value && (false === state.placeholderPattern || !(state.placeholderPattern || PATTERN).test(name)) && (null == (_state$placeholderWhi = state.placeholderWhitelist) || !_state$placeholderWhi.has(name)))
            return;
          ancestors = ancestors.slice();
          const { node: parent, key } = ancestors[ancestors.length - 1];
          let type;
          isStringLiteral(node) || isPlaceholder(node, { expectedNode: "StringLiteral" }) ? type = "string" : isNewExpression(parent) && "arguments" === key || isCallExpression(parent) && "arguments" === key || isFunction(parent) && "params" === key ? type = "param" : isExpressionStatement(parent) && !isPlaceholder(node) ? (type = "statement", ancestors = ancestors.slice(0, -1)) : type = isStatement(node) && isPlaceholder(node) ? "statement" : "other";
          const { placeholders, placeholderNames } = state.isLegacyRef.value ? state.legacy : state.syntactic;
          placeholders.push({ name, type, resolve: (ast) => function(ast2, ancestors2) {
            let parent2 = ast2;
            for (let i = 0; i < ancestors2.length - 1; i++) {
              const { key: key3, index: index3 } = ancestors2[i];
              parent2 = void 0 === index3 ? parent2[key3] : parent2[key3][index3];
            }
            const { key: key2, index: index2 } = ancestors2[ancestors2.length - 1];
            return { parent: parent2, key: key2, index: index2 };
          }(ast, ancestors), isDuplicate: placeholderNames.has(name) }), placeholderNames.add(name);
        }
      }, "./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/populate.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(metadata, replacements) {
          const ast = cloneNode(metadata.ast);
          replacements && (metadata.placeholders.forEach((placeholder) => {
            if (!Object.prototype.hasOwnProperty.call(replacements, placeholder.name)) {
              const placeholderName = placeholder.name;
              throw new Error(`Error: No substitution given for "${placeholderName}". If this is not meant to be a
            placeholder you may want to consider passing one of the following options to @babel/template:
            - { placeholderPattern: false, placeholderWhitelist: new Set(['${placeholderName}'])}
            - { placeholderPattern: /^${placeholderName}$/ }`);
            }
          }), Object.keys(replacements).forEach((key) => {
            if (!metadata.placeholderNames.has(key))
              throw new Error(`Unknown substitution "${key}" given`);
          }));
          return metadata.placeholders.slice().reverse().forEach((placeholder) => {
            try {
              !function(placeholder2, ast2, replacement) {
                placeholder2.isDuplicate && (Array.isArray(replacement) ? replacement = replacement.map((node) => cloneNode(node)) : "object" == typeof replacement && (replacement = cloneNode(replacement)));
                const { parent, key, index: index2 } = placeholder2.resolve(ast2);
                if ("string" === placeholder2.type) {
                  if ("string" == typeof replacement && (replacement = stringLiteral(replacement)), !replacement || !isStringLiteral(replacement))
                    throw new Error("Expected string substitution");
                } else if ("statement" === placeholder2.type)
                  void 0 === index2 ? replacement ? Array.isArray(replacement) ? replacement = blockStatement(replacement) : "string" == typeof replacement ? replacement = expressionStatement(identifier(replacement)) : isStatement(replacement) || (replacement = expressionStatement(replacement)) : replacement = emptyStatement() : replacement && !Array.isArray(replacement) && ("string" == typeof replacement && (replacement = identifier(replacement)), isStatement(replacement) || (replacement = expressionStatement(replacement)));
                else if ("param" === placeholder2.type) {
                  if ("string" == typeof replacement && (replacement = identifier(replacement)), void 0 === index2)
                    throw new Error("Assertion failure.");
                } else if ("string" == typeof replacement && (replacement = identifier(replacement)), Array.isArray(replacement))
                  throw new Error("Cannot replace single expression with an array.");
                if (void 0 === index2)
                  validate(parent, key, replacement), parent[key] = replacement;
                else {
                  const items = parent[key].slice();
                  "statement" === placeholder2.type || "param" === placeholder2.type ? null == replacement ? items.splice(index2, 1) : Array.isArray(replacement) ? items.splice(index2, 1, ...replacement) : items[index2] = replacement : items[index2] = replacement, validate(parent, key, items), parent[key] = items;
                }
              }(placeholder, ast, replacements && replacements[placeholder.name] || null);
            } catch (e) {
              throw e.message = `@babel/template placeholder "${placeholder.name}": ${e.message}`, e;
            }
          }), ast;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { blockStatement, cloneNode, emptyStatement, expressionStatement, identifier, isStatement, isStringLiteral, stringLiteral, validate } = _t;
      }, "./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/string.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(formatter, code, opts) {
          let metadata;
          return code = formatter.code(code), (arg) => {
            const replacements = (0, _options.normalizeReplacements)(arg);
            return metadata || (metadata = (0, _parse.default)(formatter, code, opts)), formatter.unwrap((0, _populate.default)(metadata, replacements));
          };
        };
        var _options = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/options.js"), _parse = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/parse.js"), _populate = __webpack_require__2("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/populate.js");
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/cache.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.clear = function() {
          clearPath(), clearScope();
        }, exports2.clearPath = clearPath, exports2.clearScope = clearScope, exports2.scope = exports2.path = void 0;
        let path3 = /* @__PURE__ */ new WeakMap();
        exports2.path = path3;
        let scope = /* @__PURE__ */ new WeakMap();
        function clearPath() {
          exports2.path = path3 = /* @__PURE__ */ new WeakMap();
        }
        function clearScope() {
          exports2.scope = scope = /* @__PURE__ */ new WeakMap();
        }
        exports2.scope = scope;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/context.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _path = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
        exports2.default = class {
          constructor(scope, opts, state, parentPath) {
            this.queue = null, this.priorityQueue = null, this.parentPath = parentPath, this.scope = scope, this.state = state, this.opts = opts;
          }
          shouldVisit(node) {
            const opts = this.opts;
            if (opts.enter || opts.exit)
              return true;
            if (opts[node.type])
              return true;
            const keys = VISITOR_KEYS[node.type];
            if (null == keys || !keys.length)
              return false;
            for (const key of keys)
              if (node[key])
                return true;
            return false;
          }
          create(node, container, key, listKey) {
            return _path.default.get({ parentPath: this.parentPath, parent: node, container, key, listKey });
          }
          maybeQueue(path3, notPriority) {
            this.queue && (notPriority ? this.queue.push(path3) : this.priorityQueue.push(path3));
          }
          visitMultiple(container, parent, listKey) {
            if (0 === container.length)
              return false;
            const queue = [];
            for (let key = 0; key < container.length; key++) {
              const node = container[key];
              node && this.shouldVisit(node) && queue.push(this.create(parent, container, key, listKey));
            }
            return this.visitQueue(queue);
          }
          visitSingle(node, key) {
            return !!this.shouldVisit(node[key]) && this.visitQueue([this.create(node, node, key)]);
          }
          visitQueue(queue) {
            this.queue = queue, this.priorityQueue = [];
            const visited = /* @__PURE__ */ new WeakSet();
            let stop = false;
            for (const path3 of queue) {
              if (path3.resync(), 0 !== path3.contexts.length && path3.contexts[path3.contexts.length - 1] === this || path3.pushContext(this), null === path3.key)
                continue;
              const { node } = path3;
              if (!visited.has(node)) {
                if (node && visited.add(node), path3.visit()) {
                  stop = true;
                  break;
                }
                if (this.priorityQueue.length && (stop = this.visitQueue(this.priorityQueue), this.priorityQueue = [], this.queue = queue, stop))
                  break;
              }
            }
            for (const path3 of queue)
              path3.popContext();
            return this.queue = null, stop;
          }
          visit(node, key) {
            const nodes = node[key];
            return !!nodes && (Array.isArray(nodes) ? this.visitMultiple(nodes, node, key) : this.visitSingle(node, key));
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/hub.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        exports2.default = class {
          getCode() {
          }
          getScope() {
          }
          addHelper() {
            throw new Error("Helpers are not supported by the default hub.");
          }
          buildError(node, msg, Error2 = TypeError) {
            return new Error2(msg);
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "Hub", { enumerable: true, get: function() {
          return _hub.default;
        } }), Object.defineProperty(exports2, "NodePath", { enumerable: true, get: function() {
          return _path.default;
        } }), Object.defineProperty(exports2, "Scope", { enumerable: true, get: function() {
          return _scope.default;
        } }), exports2.visitors = exports2.default = void 0;
        var visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/visitors.js");
        exports2.visitors = visitors;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/cache.js"), _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/traverse-node.js"), _path = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/index.js"), _scope = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/scope/index.js"), _hub = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/hub.js");
        const { VISITOR_KEYS, removeProperties, traverseFast } = _t;
        function traverse(parent, opts = {}, scope, state, parentPath) {
          if (parent) {
            if (!opts.noScope && !scope && "Program" !== parent.type && "File" !== parent.type)
              throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${parent.type} node without passing scope and parentPath.`);
            VISITOR_KEYS[parent.type] && (visitors.explode(opts), (0, _traverseNode.traverseNode)(parent, opts, scope, state, parentPath));
          }
        }
        var _default = traverse;
        function hasDenylistedType(path3, state) {
          path3.node.type === state.type && (state.has = true, path3.stop());
        }
        exports2.default = _default, traverse.visitors = visitors, traverse.verify = visitors.verify, traverse.explode = visitors.explode, traverse.cheap = function(node, enter) {
          return traverseFast(node, enter);
        }, traverse.node = function(node, opts, scope, state, path3, skipKeys) {
          (0, _traverseNode.traverseNode)(node, opts, scope, state, path3, skipKeys);
        }, traverse.clearNode = function(node, opts) {
          removeProperties(node, opts), cache.path.delete(node);
        }, traverse.removeProperties = function(tree, opts) {
          return traverseFast(tree, traverse.clearNode, opts), tree;
        }, traverse.hasType = function(tree, type, denylistTypes) {
          if (null != denylistTypes && denylistTypes.includes(tree.type))
            return false;
          if (tree.type === type)
            return true;
          const state = { has: false, type };
          return traverse(tree, { noScope: true, denylist: denylistTypes, enter: hasDenylistedType }, null, state), state.has;
        }, traverse.cache = cache;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/ancestry.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.find = function(callback) {
          let path3 = this;
          do {
            if (callback(path3))
              return path3;
          } while (path3 = path3.parentPath);
          return null;
        }, exports2.findParent = function(callback) {
          let path3 = this;
          for (; path3 = path3.parentPath; )
            if (callback(path3))
              return path3;
          return null;
        }, exports2.getAncestry = function() {
          let path3 = this;
          const paths = [];
          do {
            paths.push(path3);
          } while (path3 = path3.parentPath);
          return paths;
        }, exports2.getDeepestCommonAncestorFrom = function(paths, filter) {
          if (!paths.length)
            return this;
          if (1 === paths.length)
            return paths[0];
          let lastCommonIndex, lastCommon, minDepth = 1 / 0;
          const ancestries = paths.map((path3) => {
            const ancestry = [];
            do {
              ancestry.unshift(path3);
            } while ((path3 = path3.parentPath) && path3 !== this);
            return ancestry.length < minDepth && (minDepth = ancestry.length), ancestry;
          }), first = ancestries[0];
          depthLoop:
            for (let i = 0; i < minDepth; i++) {
              const shouldMatch = first[i];
              for (const ancestry of ancestries)
                if (ancestry[i] !== shouldMatch)
                  break depthLoop;
              lastCommonIndex = i, lastCommon = shouldMatch;
            }
          if (lastCommon)
            return filter ? filter(lastCommon, lastCommonIndex, ancestries) : lastCommon;
          throw new Error("Couldn't find intersection");
        }, exports2.getEarliestCommonAncestorFrom = function(paths) {
          return this.getDeepestCommonAncestorFrom(paths, function(deepest, i, ancestries) {
            let earliest;
            const keys = VISITOR_KEYS[deepest.type];
            for (const ancestry of ancestries) {
              const path3 = ancestry[i + 1];
              if (!earliest) {
                earliest = path3;
                continue;
              }
              if (path3.listKey && earliest.listKey === path3.listKey && path3.key < earliest.key) {
                earliest = path3;
                continue;
              }
              keys.indexOf(earliest.parentKey) > keys.indexOf(path3.parentKey) && (earliest = path3);
            }
            return earliest;
          });
        }, exports2.getFunctionParent = function() {
          return this.findParent((p) => p.isFunction());
        }, exports2.getStatementParent = function() {
          let path3 = this;
          do {
            if (!path3.parentPath || Array.isArray(path3.container) && path3.isStatement())
              break;
            path3 = path3.parentPath;
          } while (path3);
          if (path3 && (path3.isProgram() || path3.isFile()))
            throw new Error("File/Program node, we can't possibly find a statement parent to this");
          return path3;
        }, exports2.inType = function(...candidateTypes) {
          let path3 = this;
          for (; path3; ) {
            for (const type of candidateTypes)
              if (path3.node.type === type)
                return true;
            path3 = path3.parentPath;
          }
          return false;
        }, exports2.isAncestor = function(maybeDescendant) {
          return maybeDescendant.isDescendant(this);
        }, exports2.isDescendant = function(maybeAncestor) {
          return !!this.findParent((parent) => parent === maybeAncestor);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/comments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.addComment = function(type, content, line) {
          _addComment(this.node, type, content, line);
        }, exports2.addComments = function(type, comments) {
          _addComments(this.node, type, comments);
        }, exports2.shareCommentsWithSiblings = function() {
          if ("string" == typeof this.key)
            return;
          const node = this.node;
          if (!node)
            return;
          const trailing = node.trailingComments, leading = node.leadingComments;
          if (!trailing && !leading)
            return;
          const prev = this.getSibling(this.key - 1), next = this.getSibling(this.key + 1), hasPrev = Boolean(prev.node), hasNext = Boolean(next.node);
          hasPrev && !hasNext ? prev.addComments("trailing", trailing) : hasNext && !hasPrev && next.addComments("leading", leading);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { addComment: _addComment, addComments: _addComments } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/context.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._call = function(fns) {
          if (!fns)
            return false;
          for (const fn of fns) {
            if (!fn)
              continue;
            const node = this.node;
            if (!node)
              return true;
            const ret = fn.call(this.state, this, this.state);
            if (ret && "object" == typeof ret && "function" == typeof ret.then)
              throw new Error("You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
            if (ret)
              throw new Error(`Unexpected return value from visitor method ${fn}`);
            if (this.node !== node)
              return true;
            if (this._traverseFlags > 0)
              return true;
          }
          return false;
        }, exports2._getQueueContexts = function() {
          let path3 = this, contexts = this.contexts;
          for (; !contexts.length && (path3 = path3.parentPath, path3); )
            contexts = path3.contexts;
          return contexts;
        }, exports2._resyncKey = function() {
          if (!this.container)
            return;
          if (this.node === this.container[this.key])
            return;
          if (Array.isArray(this.container)) {
            for (let i = 0; i < this.container.length; i++)
              if (this.container[i] === this.node)
                return this.setKey(i);
          } else
            for (const key of Object.keys(this.container))
              if (this.container[key] === this.node)
                return this.setKey(key);
          this.key = null;
        }, exports2._resyncList = function() {
          if (!this.parent || !this.inList)
            return;
          const newContainer = this.parent[this.listKey];
          if (this.container === newContainer)
            return;
          this.container = newContainer || null;
        }, exports2._resyncParent = function() {
          this.parentPath && (this.parent = this.parentPath.node);
        }, exports2._resyncRemoved = function() {
          null != this.key && this.container && this.container[this.key] === this.node || this._markRemoved();
        }, exports2.call = function(key) {
          const opts = this.opts;
          if (this.debug(key), this.node && this._call(opts[key]))
            return true;
          if (this.node)
            return this._call(opts[this.node.type] && opts[this.node.type][key]);
          return false;
        }, exports2.isBlacklisted = exports2.isDenylisted = function() {
          var _this$opts$denylist;
          const denylist = null != (_this$opts$denylist = this.opts.denylist) ? _this$opts$denylist : this.opts.blacklist;
          return denylist && denylist.indexOf(this.node.type) > -1;
        }, exports2.popContext = function() {
          this.contexts.pop(), this.contexts.length > 0 ? this.setContext(this.contexts[this.contexts.length - 1]) : this.setContext(void 0);
        }, exports2.pushContext = function(context) {
          this.contexts.push(context), this.setContext(context);
        }, exports2.requeue = function(pathToQueue = this) {
          if (pathToQueue.removed)
            return;
          const contexts = this.contexts;
          for (const context of contexts)
            context.maybeQueue(pathToQueue);
        }, exports2.resync = function() {
          if (this.removed)
            return;
          this._resyncParent(), this._resyncList(), this._resyncKey();
        }, exports2.setContext = function(context) {
          null != this.skipKeys && (this.skipKeys = {});
          this._traverseFlags = 0, context && (this.context = context, this.state = context.state, this.opts = context.opts);
          return this.setScope(), this;
        }, exports2.setKey = function(key) {
          var _this$node;
          this.key = key, this.node = this.container[this.key], this.type = null == (_this$node = this.node) ? void 0 : _this$node.type;
        }, exports2.setScope = function() {
          if (this.opts && this.opts.noScope)
            return;
          let target, path3 = this.parentPath;
          "key" !== this.key && "decorators" !== this.listKey || !path3.isMethod() || (path3 = path3.parentPath);
          for (; path3 && !target; ) {
            if (path3.opts && path3.opts.noScope)
              return;
            target = path3.scope, path3 = path3.parentPath;
          }
          this.scope = this.getScope(target), this.scope && this.scope.init();
        }, exports2.setup = function(parentPath, container, listKey, key) {
          this.listKey = listKey, this.container = container, this.parentPath = parentPath || this.parentPath, this.setKey(key);
        }, exports2.skip = function() {
          this.shouldSkip = true;
        }, exports2.skipKey = function(key) {
          null == this.skipKeys && (this.skipKeys = {});
          this.skipKeys[key] = true;
        }, exports2.stop = function() {
          this._traverseFlags |= _index.SHOULD_SKIP | _index.SHOULD_STOP;
        }, exports2.visit = function() {
          if (!this.node)
            return false;
          if (this.isDenylisted())
            return false;
          if (this.opts.shouldSkip && this.opts.shouldSkip(this))
            return false;
          const currentContext = this.context;
          if (this.shouldSkip || this.call("enter"))
            return this.debug("Skip..."), this.shouldStop;
          return restoreContext(this, currentContext), this.debug("Recursing into..."), this.shouldStop = (0, _traverseNode.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys), restoreContext(this, currentContext), this.call("exit"), this.shouldStop;
        };
        var _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/traverse-node.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/index.js");
        function restoreContext(path3, context) {
          path3.context !== context && (path3.context = context, path3.state = context.state, path3.opts = context.opts);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/conversion.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.arrowFunctionToExpression = function({ allowInsertArrow = true, specCompliant = false, noNewArrows = !specCompliant } = {}) {
          if (!this.isArrowFunctionExpression())
            throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
          const { thisBinding, fnPath: fn } = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow);
          if (fn.ensureBlock(), function(path3, type) {
            path3.node.type = type;
          }(fn, "FunctionExpression"), !noNewArrows) {
            const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier("arrowCheckId");
            return checkBinding && fn.parentPath.scope.push({ id: checkBinding, init: objectExpression([]) }), fn.get("body").unshiftContainer("body", expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"), [thisExpression(), identifier(checkBinding ? checkBinding.name : thisBinding)]))), fn.replaceWith(callExpression(memberExpression((0, _helperFunctionName.default)(this, true) || fn.node, identifier("bind")), [checkBinding ? identifier(checkBinding.name) : thisExpression()])), fn.get("callee.object");
          }
          return fn;
        }, exports2.arrowFunctionToShadowed = function() {
          if (!this.isArrowFunctionExpression())
            return;
          this.arrowFunctionToExpression();
        }, exports2.ensureBlock = function() {
          const body = this.get("body"), bodyNode = body.node;
          if (Array.isArray(body))
            throw new Error("Can't convert array path to a block statement");
          if (!bodyNode)
            throw new Error("Can't convert node without a body");
          if (body.isBlockStatement())
            return bodyNode;
          const statements = [];
          let key, listKey, stringPath = "body";
          body.isStatement() ? (listKey = "body", key = 0, statements.push(body.node)) : (stringPath += ".body.0", this.isFunction() ? (key = "argument", statements.push(returnStatement(body.node))) : (key = "expression", statements.push(expressionStatement(body.node))));
          this.node.body = blockStatement(statements);
          const parentPath = this.get(stringPath);
          return body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key), this.node;
        }, exports2.toComputedKey = function() {
          let key;
          if (this.isMemberExpression())
            key = this.node.property;
          else {
            if (!this.isProperty() && !this.isMethod())
              throw new ReferenceError("todo");
            key = this.node.key;
          }
          this.node.computed || isIdentifier(key) && (key = stringLiteral(key.name));
          return key;
        }, exports2.unwrapFunctionEnvironment = function() {
          if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration())
            throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
          hoistFunctionEnvironment(this);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"), _helperFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-function-name@7.19.0/node_modules/@babel/helper-function-name/lib/index.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/visitors.js");
        const { arrowFunctionExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, conditionalExpression, expressionStatement, identifier, isIdentifier, jsxIdentifier, logicalExpression, LOGICAL_OPERATORS, memberExpression, metaProperty, numericLiteral, objectExpression, restElement, returnStatement, sequenceExpression, spreadElement, stringLiteral, super: _super, thisExpression, toExpression, unaryExpression } = _t;
        const getSuperCallsVisitor = (0, _visitors.merge)([{ CallExpression(child, { allSuperCalls }) {
          child.get("callee").isSuper() && allSuperCalls.push(child);
        } }, _helperEnvironmentVisitor.default]);
        function hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true) {
          let arrowParent, thisEnvFn = fnPath.findParent((p) => p.isArrowFunctionExpression() ? (null != arrowParent || (arrowParent = p), false) : p.isFunction() || p.isProgram() || p.isClassProperty({ static: false }) || p.isClassPrivateProperty({ static: false }));
          const inConstructor = thisEnvFn.isClassMethod({ kind: "constructor" });
          if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty())
            if (arrowParent)
              thisEnvFn = arrowParent;
            else {
              if (!allowInsertArrow)
                throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");
              fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), [])), thisEnvFn = fnPath.get("callee"), fnPath = thisEnvFn.get("body");
            }
          const { thisPaths, argumentsPaths, newTargetPaths, superProps, superCalls } = function(fnPath2) {
            const thisPaths2 = [], argumentsPaths2 = [], newTargetPaths2 = [], superProps2 = [], superCalls2 = [];
            return fnPath2.traverse(getScopeInformationVisitor, { thisPaths: thisPaths2, argumentsPaths: argumentsPaths2, newTargetPaths: newTargetPaths2, superProps: superProps2, superCalls: superCalls2 }), { thisPaths: thisPaths2, argumentsPaths: argumentsPaths2, newTargetPaths: newTargetPaths2, superProps: superProps2, superCalls: superCalls2 };
          }(fnPath);
          if (inConstructor && superCalls.length > 0) {
            if (!allowInsertArrow)
              throw superCalls[0].buildCodeFrameError("Unable to handle nested super() usage in arrow");
            const allSuperCalls = [];
            thisEnvFn.traverse(getSuperCallsVisitor, { allSuperCalls });
            const superBinding = function(thisEnvFn2) {
              return getBinding(thisEnvFn2, "supercall", () => {
                const argsBinding = thisEnvFn2.scope.generateUidIdentifier("args");
                return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));
              });
            }(thisEnvFn);
            allSuperCalls.forEach((superCall) => {
              const callee = identifier(superBinding);
              callee.loc = superCall.node.callee.loc, superCall.get("callee").replaceWith(callee);
            });
          }
          if (argumentsPaths.length > 0) {
            const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
              const args = () => identifier("arguments");
              return thisEnvFn.scope.path.isProgram() ? conditionalExpression(binaryExpression("===", unaryExpression("typeof", args()), stringLiteral("undefined")), thisEnvFn.scope.buildUndefinedNode(), args()) : args();
            });
            argumentsPaths.forEach((argumentsChild) => {
              const argsRef = identifier(argumentsBinding);
              argsRef.loc = argumentsChild.node.loc, argumentsChild.replaceWith(argsRef);
            });
          }
          if (newTargetPaths.length > 0) {
            const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier("new"), identifier("target")));
            newTargetPaths.forEach((targetChild) => {
              const targetRef = identifier(newTargetBinding);
              targetRef.loc = targetChild.node.loc, targetChild.replaceWith(targetRef);
            });
          }
          if (superProps.length > 0) {
            if (!allowInsertArrow)
              throw superProps[0].buildCodeFrameError("Unable to handle nested super.prop usage");
            superProps.reduce((acc, superProp) => acc.concat(function(superProp2) {
              if (superProp2.parentPath.isAssignmentExpression() && "=" !== superProp2.parentPath.node.operator) {
                const assignmentPath = superProp2.parentPath, op = assignmentPath.node.operator.slice(0, -1), value = assignmentPath.node.right, isLogicalAssignment = function(op2) {
                  return LOGICAL_OPERATORS.includes(op2);
                }(op);
                if (superProp2.node.computed) {
                  const tmp = superProp2.scope.generateDeclaredUidIdentifier("tmp"), object = superProp2.node.object, property = superProp2.node.property;
                  assignmentPath.get("left").replaceWith(memberExpression(object, assignmentExpression("=", tmp, property), true)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(tmp.name), true), value));
                } else {
                  const object = superProp2.node.object, property = superProp2.node.property;
                  assignmentPath.get("left").replaceWith(memberExpression(object, property)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(property.name)), value));
                }
                return isLogicalAssignment ? assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right)) : assignmentPath.node.operator = "=", [assignmentPath.get("left"), assignmentPath.get("right").get("left")];
              }
              if (superProp2.parentPath.isUpdateExpression()) {
                const updateExpr = superProp2.parentPath, tmp = superProp2.scope.generateDeclaredUidIdentifier("tmp"), computedKey = superProp2.node.computed ? superProp2.scope.generateDeclaredUidIdentifier("prop") : null, parts = [assignmentExpression("=", tmp, memberExpression(superProp2.node.object, computedKey ? assignmentExpression("=", computedKey, superProp2.node.property) : superProp2.node.property, superProp2.node.computed)), assignmentExpression("=", memberExpression(superProp2.node.object, computedKey ? identifier(computedKey.name) : superProp2.node.property, superProp2.node.computed), binaryExpression(superProp2.parentPath.node.operator[0], identifier(tmp.name), numericLiteral(1)))];
                superProp2.parentPath.node.prefix || parts.push(identifier(tmp.name)), updateExpr.replaceWith(sequenceExpression(parts));
                return [updateExpr.get("expressions.0.right"), updateExpr.get("expressions.1.left")];
              }
              return [superProp2];
              function rightExpression(op, left, right) {
                return "=" === op ? assignmentExpression("=", left, right) : binaryExpression(op, left, right);
              }
            }(superProp)), []).forEach((superProp) => {
              const key = superProp.node.computed ? "" : superProp.get("property").node.name, superParentPath = superProp.parentPath, isAssignment = superParentPath.isAssignmentExpression({ left: superProp.node }), isCall = superParentPath.isCallExpression({ callee: superProp.node }), superBinding = function(thisEnvFn2, isAssignment2, propName) {
                return getBinding(thisEnvFn2, `superprop_${isAssignment2 ? "set" : "get"}:${propName || ""}`, () => {
                  const argsList = [];
                  let fnBody;
                  if (propName)
                    fnBody = memberExpression(_super(), identifier(propName));
                  else {
                    const method = thisEnvFn2.scope.generateUidIdentifier("prop");
                    argsList.unshift(method), fnBody = memberExpression(_super(), identifier(method.name), true);
                  }
                  if (isAssignment2) {
                    const valueIdent = thisEnvFn2.scope.generateUidIdentifier("value");
                    argsList.push(valueIdent), fnBody = assignmentExpression("=", fnBody, identifier(valueIdent.name));
                  }
                  return arrowFunctionExpression(argsList, fnBody);
                });
              }(thisEnvFn, isAssignment, key), args = [];
              if (superProp.node.computed && args.push(superProp.get("property").node), isAssignment) {
                const value = superParentPath.node.right;
                args.push(value);
              }
              const call = callExpression(identifier(superBinding), args);
              isCall ? (superParentPath.unshiftContainer("arguments", thisExpression()), superProp.replaceWith(memberExpression(call, identifier("call"))), thisPaths.push(superParentPath.get("arguments.0"))) : isAssignment ? superParentPath.replaceWith(call) : superProp.replaceWith(call);
            });
          }
          let thisBinding;
          return (thisPaths.length > 0 || !noNewArrows) && (thisBinding = function(thisEnvFn2, inConstructor2) {
            return getBinding(thisEnvFn2, "this", (thisBinding2) => {
              if (!inConstructor2 || !hasSuperClass(thisEnvFn2))
                return thisExpression();
              thisEnvFn2.traverse(assignSuperThisVisitor, { supers: /* @__PURE__ */ new WeakSet(), thisBinding: thisBinding2 });
            });
          }(thisEnvFn, inConstructor), (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) && (thisPaths.forEach((thisChild) => {
            const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);
            thisRef.loc = thisChild.node.loc, thisChild.replaceWith(thisRef);
          }), noNewArrows || (thisBinding = null))), { thisBinding, fnPath };
        }
        function hasSuperClass(thisEnvFn) {
          return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
        }
        const assignSuperThisVisitor = (0, _visitors.merge)([{ CallExpression(child, { supers, thisBinding }) {
          child.get("callee").isSuper() && (supers.has(child.node) || (supers.add(child.node), child.replaceWithMultiple([child.node, assignmentExpression("=", identifier(thisBinding), identifier("this"))])));
        } }, _helperEnvironmentVisitor.default]);
        function getBinding(thisEnvFn, key, init) {
          const cacheKey = "binding:" + key;
          let data2 = thisEnvFn.getData(cacheKey);
          if (!data2) {
            const id = thisEnvFn.scope.generateUidIdentifier(key);
            data2 = id.name, thisEnvFn.setData(cacheKey, data2), thisEnvFn.scope.push({ id, init: init(data2) });
          }
          return data2;
        }
        const getScopeInformationVisitor = (0, _visitors.merge)([{ ThisExpression(child, { thisPaths }) {
          thisPaths.push(child);
        }, JSXIdentifier(child, { thisPaths }) {
          "this" === child.node.name && (child.parentPath.isJSXMemberExpression({ object: child.node }) || child.parentPath.isJSXOpeningElement({ name: child.node })) && thisPaths.push(child);
        }, CallExpression(child, { superCalls }) {
          child.get("callee").isSuper() && superCalls.push(child);
        }, MemberExpression(child, { superProps }) {
          child.get("object").isSuper() && superProps.push(child);
        }, Identifier(child, { argumentsPaths }) {
          if (!child.isReferencedIdentifier({ name: "arguments" }))
            return;
          let curr = child.scope;
          do {
            if (curr.hasOwnBinding("arguments"))
              return void curr.rename("arguments");
            if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression())
              break;
          } while (curr = curr.parent);
          argumentsPaths.push(child);
        }, MetaProperty(child, { newTargetPaths }) {
          child.get("meta").isIdentifier({ name: "new" }) && child.get("property").isIdentifier({ name: "target" }) && newTargetPaths.push(child);
        } }, _helperEnvironmentVisitor.default]);
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/evaluation.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.evaluate = function() {
          const state = { confident: true, deoptPath: null, seen: /* @__PURE__ */ new Map() };
          let value = evaluateCached(this, state);
          state.confident || (value = void 0);
          return { confident: state.confident, deopt: state.deoptPath, value };
        }, exports2.evaluateTruthy = function() {
          const res = this.evaluate();
          if (res.confident)
            return !!res.value;
        };
        const VALID_CALLEES = ["String", "Number", "Math"], INVALID_METHODS = ["random"];
        function isValidCallee(val) {
          return VALID_CALLEES.includes(val);
        }
        function deopt(path3, state) {
          state.confident && (state.deoptPath = path3, state.confident = false);
        }
        function evaluateCached(path3, state) {
          const { node } = path3, { seen } = state;
          if (seen.has(node)) {
            const existing = seen.get(node);
            return existing.resolved ? existing.value : void deopt(path3, state);
          }
          {
            const item = { resolved: false };
            seen.set(node, item);
            const val = function(path4, state2) {
              if (!state2.confident)
                return;
              if (path4.isSequenceExpression()) {
                const exprs = path4.get("expressions");
                return evaluateCached(exprs[exprs.length - 1], state2);
              }
              if (path4.isStringLiteral() || path4.isNumericLiteral() || path4.isBooleanLiteral())
                return path4.node.value;
              if (path4.isNullLiteral())
                return null;
              if (path4.isTemplateLiteral())
                return evaluateQuasis(path4, path4.node.quasis, state2);
              if (path4.isTaggedTemplateExpression() && path4.get("tag").isMemberExpression()) {
                const object = path4.get("tag.object"), { node: { name } } = object, property = path4.get("tag.property");
                if (object.isIdentifier() && "String" === name && !path4.scope.getBinding(name) && property.isIdentifier() && "raw" === property.node.name)
                  return evaluateQuasis(path4, path4.node.quasi.quasis, state2, true);
              }
              if (path4.isConditionalExpression()) {
                const testResult = evaluateCached(path4.get("test"), state2);
                if (!state2.confident)
                  return;
                return evaluateCached(testResult ? path4.get("consequent") : path4.get("alternate"), state2);
              }
              if (path4.isExpressionWrapper())
                return evaluateCached(path4.get("expression"), state2);
              if (path4.isMemberExpression() && !path4.parentPath.isCallExpression({ callee: path4.node })) {
                const property = path4.get("property"), object = path4.get("object");
                if (object.isLiteral() && property.isIdentifier()) {
                  const value = object.node.value, type = typeof value;
                  if ("number" === type || "string" === type)
                    return value[property.node.name];
                }
              }
              if (path4.isReferencedIdentifier()) {
                const binding = path4.scope.getBinding(path4.node.name);
                if (binding && binding.constantViolations.length > 0)
                  return deopt(binding.path, state2);
                if (binding && path4.node.start < binding.path.node.end)
                  return deopt(binding.path, state2);
                if (null != binding && binding.hasValue)
                  return binding.value;
                {
                  if ("undefined" === path4.node.name)
                    return binding ? deopt(binding.path, state2) : void 0;
                  if ("Infinity" === path4.node.name)
                    return binding ? deopt(binding.path, state2) : 1 / 0;
                  if ("NaN" === path4.node.name)
                    return binding ? deopt(binding.path, state2) : NaN;
                  const resolved = path4.resolve();
                  return resolved === path4 ? deopt(path4, state2) : evaluateCached(resolved, state2);
                }
              }
              if (path4.isUnaryExpression({ prefix: true })) {
                if ("void" === path4.node.operator)
                  return;
                const argument = path4.get("argument");
                if ("typeof" === path4.node.operator && (argument.isFunction() || argument.isClass()))
                  return "function";
                const arg = evaluateCached(argument, state2);
                if (!state2.confident)
                  return;
                switch (path4.node.operator) {
                  case "!":
                    return !arg;
                  case "+":
                    return +arg;
                  case "-":
                    return -arg;
                  case "~":
                    return ~arg;
                  case "typeof":
                    return typeof arg;
                }
              }
              if (path4.isArrayExpression()) {
                const arr = [], elems = path4.get("elements");
                for (const elem of elems) {
                  const elemValue = elem.evaluate();
                  if (!elemValue.confident)
                    return deopt(elemValue.deopt, state2);
                  arr.push(elemValue.value);
                }
                return arr;
              }
              if (path4.isObjectExpression()) {
                const obj = {}, props = path4.get("properties");
                for (const prop of props) {
                  if (prop.isObjectMethod() || prop.isSpreadElement())
                    return deopt(prop, state2);
                  const keyPath = prop.get("key");
                  let key;
                  if (prop.node.computed) {
                    if (key = keyPath.evaluate(), !key.confident)
                      return deopt(key.deopt, state2);
                    key = key.value;
                  } else
                    key = keyPath.isIdentifier() ? keyPath.node.name : keyPath.node.value;
                  let value = prop.get("value").evaluate();
                  if (!value.confident)
                    return deopt(value.deopt, state2);
                  value = value.value, obj[key] = value;
                }
                return obj;
              }
              if (path4.isLogicalExpression()) {
                const wasConfident = state2.confident, left = evaluateCached(path4.get("left"), state2), leftConfident = state2.confident;
                state2.confident = wasConfident;
                const right = evaluateCached(path4.get("right"), state2), rightConfident = state2.confident;
                switch (path4.node.operator) {
                  case "||":
                    if (state2.confident = leftConfident && (!!left || rightConfident), !state2.confident)
                      return;
                    return left || right;
                  case "&&":
                    if (state2.confident = leftConfident && (!left || rightConfident), !state2.confident)
                      return;
                    return left && right;
                  case "??":
                    if (state2.confident = leftConfident && (null != left || rightConfident), !state2.confident)
                      return;
                    return null != left ? left : right;
                }
              }
              if (path4.isBinaryExpression()) {
                const left = evaluateCached(path4.get("left"), state2);
                if (!state2.confident)
                  return;
                const right = evaluateCached(path4.get("right"), state2);
                if (!state2.confident)
                  return;
                switch (path4.node.operator) {
                  case "-":
                    return left - right;
                  case "+":
                    return left + right;
                  case "/":
                    return left / right;
                  case "*":
                    return left * right;
                  case "%":
                    return left % right;
                  case "**":
                    return Math.pow(left, right);
                  case "<":
                    return left < right;
                  case ">":
                    return left > right;
                  case "<=":
                    return left <= right;
                  case ">=":
                    return left >= right;
                  case "==":
                    return left == right;
                  case "!=":
                    return left != right;
                  case "===":
                    return left === right;
                  case "!==":
                    return left !== right;
                  case "|":
                    return left | right;
                  case "&":
                    return left & right;
                  case "^":
                    return left ^ right;
                  case "<<":
                    return left << right;
                  case ">>":
                    return left >> right;
                  case ">>>":
                    return left >>> right;
                }
              }
              if (path4.isCallExpression()) {
                const callee = path4.get("callee");
                let context, func;
                if (callee.isIdentifier() && !path4.scope.getBinding(callee.node.name) && isValidCallee(callee.node.name) && (func = global[callee.node.name]), callee.isMemberExpression()) {
                  const object = callee.get("object"), property = callee.get("property");
                  if (object.isIdentifier() && property.isIdentifier() && isValidCallee(object.node.name) && !function(val2) {
                    return INVALID_METHODS.includes(val2);
                  }(property.node.name) && (context = global[object.node.name], func = context[property.node.name]), object.isLiteral() && property.isIdentifier()) {
                    const type = typeof object.node.value;
                    "string" !== type && "number" !== type || (context = object.node.value, func = context[property.node.name]);
                  }
                }
                if (func) {
                  const args = path4.get("arguments").map((arg) => evaluateCached(arg, state2));
                  if (!state2.confident)
                    return;
                  return func.apply(context, args);
                }
              }
              deopt(path4, state2);
            }(path3, state);
            return state.confident && (item.resolved = true, item.value = val), val;
          }
        }
        function evaluateQuasis(path3, quasis, state, raw = false) {
          let str = "", i = 0;
          const exprs = path3.get("expressions");
          for (const elem of quasis) {
            if (!state.confident)
              break;
            str += raw ? elem.value.raw : elem.value.cooked;
            const expr = exprs[i++];
            expr && (str += String(evaluateCached(expr, state)));
          }
          if (state.confident)
            return str;
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/family.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._getKey = function(key, context) {
          const node = this.node, container = node[key];
          return Array.isArray(container) ? container.map((_, i) => _index.default.get({ listKey: key, parentPath: this, parent: node, container, key: i }).setContext(context)) : _index.default.get({ parentPath: this, parent: node, container: node, key }).setContext(context);
        }, exports2._getPattern = function(parts, context) {
          let path3 = this;
          for (const part of parts)
            path3 = "." === part ? path3.parentPath : Array.isArray(path3) ? path3[part] : path3.get(part, context);
          return path3;
        }, exports2.get = function(key, context = true) {
          true === context && (context = this.context);
          const parts = key.split(".");
          return 1 === parts.length ? this._getKey(key, context) : this._getPattern(parts, context);
        }, exports2.getAllNextSiblings = function() {
          let _key = this.key, sibling = this.getSibling(++_key);
          const siblings = [];
          for (; sibling.node; )
            siblings.push(sibling), sibling = this.getSibling(++_key);
          return siblings;
        }, exports2.getAllPrevSiblings = function() {
          let _key = this.key, sibling = this.getSibling(--_key);
          const siblings = [];
          for (; sibling.node; )
            siblings.push(sibling), sibling = this.getSibling(--_key);
          return siblings;
        }, exports2.getBindingIdentifierPaths = function(duplicates = false, outerOnly = false) {
          const search = [this], ids = /* @__PURE__ */ Object.create(null);
          for (; search.length; ) {
            const id = search.shift();
            if (!id)
              continue;
            if (!id.node)
              continue;
            const keys = _getBindingIdentifiers.keys[id.node.type];
            if (id.isIdentifier())
              if (duplicates) {
                (ids[id.node.name] = ids[id.node.name] || []).push(id);
              } else
                ids[id.node.name] = id;
            else if (id.isExportDeclaration()) {
              const declaration = id.get("declaration");
              isDeclaration(declaration) && search.push(declaration);
            } else {
              if (outerOnly) {
                if (id.isFunctionDeclaration()) {
                  search.push(id.get("id"));
                  continue;
                }
                if (id.isFunctionExpression())
                  continue;
              }
              if (keys)
                for (let i = 0; i < keys.length; i++) {
                  const key = keys[i], child = id.get(key);
                  Array.isArray(child) ? search.push(...child) : child.node && search.push(child);
                }
            }
          }
          return ids;
        }, exports2.getBindingIdentifiers = function(duplicates) {
          return _getBindingIdentifiers(this.node, duplicates);
        }, exports2.getCompletionRecords = function() {
          return _getCompletionRecords(this, { canHaveBreak: false, shouldPopulateBreak: false, inCaseClause: false }).map((r2) => r2.path);
        }, exports2.getNextSibling = function() {
          return this.getSibling(this.key + 1);
        }, exports2.getOpposite = function() {
          if ("left" === this.key)
            return this.getSibling("right");
          if ("right" === this.key)
            return this.getSibling("left");
          return null;
        }, exports2.getOuterBindingIdentifierPaths = function(duplicates = false) {
          return this.getBindingIdentifierPaths(duplicates, true);
        }, exports2.getOuterBindingIdentifiers = function(duplicates) {
          return _getOuterBindingIdentifiers(this.node, duplicates);
        }, exports2.getPrevSibling = function() {
          return this.getSibling(this.key - 1);
        }, exports2.getSibling = function(key) {
          return _index.default.get({ parentPath: this.parentPath, parent: this.parent, container: this.container, listKey: this.listKey, key }).setContext(this.context);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { getBindingIdentifiers: _getBindingIdentifiers, getOuterBindingIdentifiers: _getOuterBindingIdentifiers, isDeclaration, numericLiteral, unaryExpression } = _t;
        function addCompletionRecords(path3, records, context) {
          return path3 && records.push(..._getCompletionRecords(path3, context)), records;
        }
        function normalCompletionToBreak(completions) {
          completions.forEach((c) => {
            c.type = 1;
          });
        }
        function replaceBreakStatementInBreakCompletion(completions, reachable) {
          completions.forEach((c) => {
            c.path.isBreakStatement({ label: null }) && (reachable ? c.path.replaceWith(unaryExpression("void", numericLiteral(0))) : c.path.remove());
          });
        }
        function getStatementListCompletion(paths, context) {
          const completions = [];
          if (context.canHaveBreak) {
            let lastNormalCompletions = [];
            for (let i = 0; i < paths.length; i++) {
              const path3 = paths[i], newContext = Object.assign({}, context, { inCaseClause: false });
              path3.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak) ? newContext.shouldPopulateBreak = true : newContext.shouldPopulateBreak = false;
              const statementCompletions = _getCompletionRecords(path3, newContext);
              if (statementCompletions.length > 0 && statementCompletions.every((c) => 1 === c.type)) {
                lastNormalCompletions.length > 0 && statementCompletions.every((c) => c.path.isBreakStatement({ label: null })) ? (normalCompletionToBreak(lastNormalCompletions), completions.push(...lastNormalCompletions), lastNormalCompletions.some((c) => c.path.isDeclaration()) && (completions.push(...statementCompletions), replaceBreakStatementInBreakCompletion(statementCompletions, true)), replaceBreakStatementInBreakCompletion(statementCompletions, false)) : (completions.push(...statementCompletions), context.shouldPopulateBreak || replaceBreakStatementInBreakCompletion(statementCompletions, true));
                break;
              }
              if (i === paths.length - 1)
                completions.push(...statementCompletions);
              else {
                lastNormalCompletions = [];
                for (let i2 = 0; i2 < statementCompletions.length; i2++) {
                  const c = statementCompletions[i2];
                  1 === c.type && completions.push(c), 0 === c.type && lastNormalCompletions.push(c);
                }
              }
            }
          } else if (paths.length)
            for (let i = paths.length - 1; i >= 0; i--) {
              const pathCompletions = _getCompletionRecords(paths[i], context);
              if (pathCompletions.length > 1 || 1 === pathCompletions.length && !pathCompletions[0].path.isVariableDeclaration()) {
                completions.push(...pathCompletions);
                break;
              }
            }
          return completions;
        }
        function _getCompletionRecords(path3, context) {
          let records = [];
          if (path3.isIfStatement())
            records = addCompletionRecords(path3.get("consequent"), records, context), records = addCompletionRecords(path3.get("alternate"), records, context);
          else {
            if (path3.isDoExpression() || path3.isFor() || path3.isWhile() || path3.isLabeledStatement())
              return addCompletionRecords(path3.get("body"), records, context);
            if (path3.isProgram() || path3.isBlockStatement())
              return getStatementListCompletion(path3.get("body"), context);
            if (path3.isFunction())
              return _getCompletionRecords(path3.get("body"), context);
            if (path3.isTryStatement())
              records = addCompletionRecords(path3.get("block"), records, context), records = addCompletionRecords(path3.get("handler"), records, context);
            else {
              if (path3.isCatchClause())
                return addCompletionRecords(path3.get("body"), records, context);
              if (path3.isSwitchStatement())
                return function(cases, records2, context2) {
                  let lastNormalCompletions = [];
                  for (let i = 0; i < cases.length; i++) {
                    const caseCompletions = _getCompletionRecords(cases[i], context2), normalCompletions = [], breakCompletions = [];
                    for (const c of caseCompletions)
                      0 === c.type && normalCompletions.push(c), 1 === c.type && breakCompletions.push(c);
                    normalCompletions.length && (lastNormalCompletions = normalCompletions), records2.push(...breakCompletions);
                  }
                  return records2.push(...lastNormalCompletions), records2;
                }(path3.get("cases"), records, context);
              if (path3.isSwitchCase())
                return getStatementListCompletion(path3.get("consequent"), { canHaveBreak: true, shouldPopulateBreak: false, inCaseClause: true });
              path3.isBreakStatement() ? records.push(function(path4) {
                return { type: 1, path: path4 };
              }(path3)) : records.push(function(path4) {
                return { type: 0, path: path4 };
              }(path3));
            }
          }
          return records;
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = exports2.SHOULD_STOP = exports2.SHOULD_SKIP = exports2.REMOVED = void 0;
        var virtualTypes = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), _debug = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/index.js"), _scope = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/scope/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), t = _t, _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/cache.js"), _generator = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/index.js"), NodePath_ancestry = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/ancestry.js"), NodePath_inference = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/inference/index.js"), NodePath_replacement = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/replacement.js"), NodePath_evaluation = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/evaluation.js"), NodePath_conversion = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/conversion.js"), NodePath_introspection = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/introspection.js"), NodePath_context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/context.js"), NodePath_removal = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/removal.js"), NodePath_modification = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/modification.js"), NodePath_family = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/family.js"), NodePath_comments = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/comments.js"), NodePath_virtual_types_validator = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js");
        const { validate } = _t, debug = _debug("babel");
        exports2.REMOVED = 1;
        exports2.SHOULD_STOP = 2;
        exports2.SHOULD_SKIP = 4;
        class NodePath {
          constructor(hub, parent) {
            this.contexts = [], this.state = null, this.opts = null, this._traverseFlags = 0, this.skipKeys = null, this.parentPath = null, this.container = null, this.listKey = null, this.key = null, this.node = null, this.type = null, this.parent = parent, this.hub = hub, this.data = null, this.context = null, this.scope = null;
          }
          static get({ hub, parentPath, parent, container, listKey, key }) {
            if (!hub && parentPath && (hub = parentPath.hub), !parent)
              throw new Error("To get a node path the parent needs to exist");
            const targetNode = container[key];
            let paths = _cache.path.get(parent);
            paths || (paths = /* @__PURE__ */ new Map(), _cache.path.set(parent, paths));
            let path3 = paths.get(targetNode);
            return path3 || (path3 = new NodePath(hub, parent), targetNode && paths.set(targetNode, path3)), path3.setup(parentPath, container, listKey, key), path3;
          }
          getScope(scope) {
            return this.isScope() ? new _scope.default(this) : scope;
          }
          setData(key, val) {
            return null == this.data && (this.data = /* @__PURE__ */ Object.create(null)), this.data[key] = val;
          }
          getData(key, def) {
            null == this.data && (this.data = /* @__PURE__ */ Object.create(null));
            let val = this.data[key];
            return void 0 === val && void 0 !== def && (val = this.data[key] = def), val;
          }
          hasNode() {
            return null != this.node;
          }
          buildCodeFrameError(msg, Error2 = SyntaxError) {
            return this.hub.buildError(this.node, msg, Error2);
          }
          traverse(visitor, state) {
            (0, _index.default)(this.node, visitor, this.scope, state, this);
          }
          set(key, node) {
            validate(this.node, key, node), this.node[key] = node;
          }
          getPathLocation() {
            const parts = [];
            let path3 = this;
            do {
              let key = path3.key;
              path3.inList && (key = `${path3.listKey}[${key}]`), parts.unshift(key);
            } while (path3 = path3.parentPath);
            return parts.join(".");
          }
          debug(message) {
            debug.enabled && debug(`${this.getPathLocation()} ${this.type}: ${message}`);
          }
          toString() {
            return (0, _generator.default)(this.node).code;
          }
          get inList() {
            return !!this.listKey;
          }
          set inList(inList) {
            inList || (this.listKey = null);
          }
          get parentKey() {
            return this.listKey || this.key;
          }
          get shouldSkip() {
            return !!(4 & this._traverseFlags);
          }
          set shouldSkip(v) {
            v ? this._traverseFlags |= 4 : this._traverseFlags &= -5;
          }
          get shouldStop() {
            return !!(2 & this._traverseFlags);
          }
          set shouldStop(v) {
            v ? this._traverseFlags |= 2 : this._traverseFlags &= -3;
          }
          get removed() {
            return !!(1 & this._traverseFlags);
          }
          set removed(v) {
            v ? this._traverseFlags |= 1 : this._traverseFlags &= -2;
          }
        }
        Object.assign(NodePath.prototype, NodePath_ancestry, NodePath_inference, NodePath_replacement, NodePath_evaluation, NodePath_conversion, NodePath_introspection, NodePath_context, NodePath_removal, NodePath_modification, NodePath_family, NodePath_comments), NodePath.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo;
        for (const type of t.TYPES) {
          const typeKey = `is${type}`, fn = t[typeKey];
          NodePath.prototype[typeKey] = function(opts) {
            return fn(this.node, opts);
          }, NodePath.prototype[`assert${type}`] = function(opts) {
            if (!fn(this.node, opts))
              throw new TypeError(`Expected node path of type ${type}`);
          };
        }
        Object.assign(NodePath.prototype, NodePath_virtual_types_validator);
        for (const type of Object.keys(virtualTypes))
          "_" !== type[0] && (t.TYPES.includes(type) || t.TYPES.push(type));
        var _default = NodePath;
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/inference/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._getTypeAnnotation = function() {
          const node = this.node;
          if (!node) {
            if ("init" === this.key && this.parentPath.isVariableDeclarator()) {
              const declar = this.parentPath.parentPath, declarParent = declar.parentPath;
              return "left" === declar.key && declarParent.isForInStatement() ? stringTypeAnnotation() : "left" === declar.key && declarParent.isForOfStatement() ? anyTypeAnnotation() : voidTypeAnnotation();
            }
            return;
          }
          if (node.typeAnnotation)
            return node.typeAnnotation;
          if (typeAnnotationInferringNodes.has(node))
            return;
          typeAnnotationInferringNodes.add(node);
          try {
            var _inferer;
            let inferer = inferers[node.type];
            if (inferer)
              return inferer.call(this, node);
            if (inferer = inferers[this.parentPath.type], null != (_inferer = inferer) && _inferer.validParent)
              return this.parentPath.getTypeAnnotation();
          } finally {
            typeAnnotationInferringNodes.delete(node);
          }
        }, exports2.baseTypeStrictlyMatches = function(rightArg) {
          const left = this.getTypeAnnotation(), right = rightArg.getTypeAnnotation();
          if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left))
            return right.type === left.type;
          return false;
        }, exports2.couldBeBaseType = function(name) {
          const type = this.getTypeAnnotation();
          if (isAnyTypeAnnotation(type))
            return true;
          if (isUnionTypeAnnotation(type)) {
            for (const type2 of type.types)
              if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true))
                return true;
            return false;
          }
          return _isBaseType(name, type, true);
        }, exports2.getTypeAnnotation = function() {
          let type = this.getData("typeAnnotation");
          if (null != type)
            return type;
          type = this._getTypeAnnotation() || anyTypeAnnotation(), (isTypeAnnotation(type) || isTSTypeAnnotation(type)) && (type = type.typeAnnotation);
          return this.setData("typeAnnotation", type), type;
        }, exports2.isBaseType = function(baseName, soft) {
          return _isBaseType(baseName, this.getTypeAnnotation(), soft);
        }, exports2.isGenericType = function(genericName) {
          const type = this.getTypeAnnotation();
          if ("Array" === genericName && (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type)))
            return true;
          return isGenericTypeAnnotation(type) && isIdentifier(type.id, { name: genericName }) || isTSTypeReference(type) && isIdentifier(type.typeName, { name: genericName });
        };
        var inferers = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/inference/inferers.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { anyTypeAnnotation, isAnyTypeAnnotation, isArrayTypeAnnotation, isBooleanTypeAnnotation, isEmptyTypeAnnotation, isFlowBaseAnnotation, isGenericTypeAnnotation, isIdentifier, isMixedTypeAnnotation, isNumberTypeAnnotation, isStringTypeAnnotation, isTSArrayType, isTSTypeAnnotation, isTSTypeReference, isTupleTypeAnnotation, isTypeAnnotation, isUnionTypeAnnotation, isVoidTypeAnnotation, stringTypeAnnotation, voidTypeAnnotation } = _t;
        const typeAnnotationInferringNodes = /* @__PURE__ */ new WeakSet();
        function _isBaseType(baseName, type, soft) {
          if ("string" === baseName)
            return isStringTypeAnnotation(type);
          if ("number" === baseName)
            return isNumberTypeAnnotation(type);
          if ("boolean" === baseName)
            return isBooleanTypeAnnotation(type);
          if ("any" === baseName)
            return isAnyTypeAnnotation(type);
          if ("mixed" === baseName)
            return isMixedTypeAnnotation(type);
          if ("empty" === baseName)
            return isEmptyTypeAnnotation(type);
          if ("void" === baseName)
            return isVoidTypeAnnotation(type);
          if (soft)
            return false;
          throw new Error(`Unknown base type ${baseName}`);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          if (!this.isReferenced())
            return;
          const binding = this.scope.getBinding(node.name);
          if (binding)
            return binding.identifier.typeAnnotation ? binding.identifier.typeAnnotation : function(binding2, path3, name) {
              const types2 = [], functionConstantViolations = [];
              let constantViolations = getConstantViolationsBefore(binding2, path3, functionConstantViolations);
              const testType = getConditionalAnnotation(binding2, path3, name);
              if (testType) {
                const testConstantViolations = getConstantViolationsBefore(binding2, testType.ifStatement);
                constantViolations = constantViolations.filter((path4) => testConstantViolations.indexOf(path4) < 0), types2.push(testType.typeAnnotation);
              }
              if (constantViolations.length) {
                constantViolations.push(...functionConstantViolations);
                for (const violation of constantViolations)
                  types2.push(violation.getTypeAnnotation());
              }
              if (!types2.length)
                return;
              return (0, _util.createUnionType)(types2);
            }(binding, this, node.name);
          if ("undefined" === node.name)
            return voidTypeAnnotation();
          if ("NaN" === node.name || "Infinity" === node.name)
            return numberTypeAnnotation();
          node.name;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/inference/util.js");
        const { BOOLEAN_NUMBER_BINARY_OPERATORS, createTypeAnnotationBasedOnTypeof, numberTypeAnnotation, voidTypeAnnotation } = _t;
        function getConstantViolationsBefore(binding, path3, functions) {
          const violations = binding.constantViolations.slice();
          return violations.unshift(binding.path), violations.filter((violation) => {
            const status = (violation = violation.resolve())._guessExecutionStatusRelativeTo(path3);
            return functions && "unknown" === status && functions.push(violation), "before" === status;
          });
        }
        function inferAnnotationFromBinaryExpression(name, path3) {
          const operator = path3.node.operator, right = path3.get("right").resolve(), left = path3.get("left").resolve();
          let target, typeofPath, typePath;
          if (left.isIdentifier({ name }) ? target = right : right.isIdentifier({ name }) && (target = left), target)
            return "===" === operator ? target.getTypeAnnotation() : BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0 ? numberTypeAnnotation() : void 0;
          if ("===" !== operator && "==" !== operator)
            return;
          if (left.isUnaryExpression({ operator: "typeof" }) ? (typeofPath = left, typePath = right) : right.isUnaryExpression({ operator: "typeof" }) && (typeofPath = right, typePath = left), !typeofPath)
            return;
          if (!typeofPath.get("argument").isIdentifier({ name }))
            return;
          if (typePath = typePath.resolve(), !typePath.isLiteral())
            return;
          const typeValue = typePath.node.value;
          return "string" == typeof typeValue ? createTypeAnnotationBasedOnTypeof(typeValue) : void 0;
        }
        function getConditionalAnnotation(binding, path3, name) {
          const ifStatement = function(binding2, path4, name2) {
            let parentPath;
            for (; parentPath = path4.parentPath; ) {
              if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
                if ("test" === path4.key)
                  return;
                return parentPath;
              }
              if (parentPath.isFunction() && parentPath.parentPath.scope.getBinding(name2) !== binding2)
                return;
              path4 = parentPath;
            }
          }(binding, path3, name);
          if (!ifStatement)
            return;
          const paths = [ifStatement.get("test")], types2 = [];
          for (let i = 0; i < paths.length; i++) {
            const path4 = paths[i];
            if (path4.isLogicalExpression())
              "&&" === path4.node.operator && (paths.push(path4.get("left")), paths.push(path4.get("right")));
            else if (path4.isBinaryExpression()) {
              const type = inferAnnotationFromBinaryExpression(name, path4);
              type && types2.push(type);
            }
          }
          return types2.length ? { typeAnnotation: (0, _util.createUnionType)(types2), ifStatement } : getConditionalAnnotation(binding, ifStatement, name);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/inference/inferers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArrayExpression = ArrayExpression, exports2.AssignmentExpression = function() {
          return this.get("right").getTypeAnnotation();
        }, exports2.BinaryExpression = function(node) {
          const operator = node.operator;
          if (NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0)
            return numberTypeAnnotation();
          if (BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0)
            return booleanTypeAnnotation();
          if ("+" === operator) {
            const right = this.get("right"), left = this.get("left");
            return left.isBaseType("number") && right.isBaseType("number") ? numberTypeAnnotation() : left.isBaseType("string") || right.isBaseType("string") ? stringTypeAnnotation() : unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);
          }
        }, exports2.BooleanLiteral = function() {
          return booleanTypeAnnotation();
        }, exports2.CallExpression = function() {
          const { callee } = this.node;
          if (isObjectKeys(callee))
            return arrayTypeAnnotation(stringTypeAnnotation());
          if (isArrayFrom(callee) || isObjectValues(callee) || isIdentifier(callee, { name: "Array" }))
            return arrayTypeAnnotation(anyTypeAnnotation());
          if (isObjectEntries(callee))
            return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));
          return resolveCall(this.get("callee"));
        }, exports2.ConditionalExpression = function() {
          const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
          return (0, _util.createUnionType)(argumentTypes);
        }, exports2.ClassDeclaration = exports2.ClassExpression = exports2.FunctionDeclaration = exports2.ArrowFunctionExpression = exports2.FunctionExpression = function() {
          return genericTypeAnnotation(identifier("Function"));
        }, Object.defineProperty(exports2, "Identifier", { enumerable: true, get: function() {
          return _infererReference.default;
        } }), exports2.LogicalExpression = function() {
          const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
          return (0, _util.createUnionType)(argumentTypes);
        }, exports2.NewExpression = function(node) {
          if ("Identifier" === node.callee.type)
            return genericTypeAnnotation(node.callee);
        }, exports2.NullLiteral = function() {
          return nullLiteralTypeAnnotation();
        }, exports2.NumericLiteral = function() {
          return numberTypeAnnotation();
        }, exports2.ObjectExpression = function() {
          return genericTypeAnnotation(identifier("Object"));
        }, exports2.ParenthesizedExpression = function() {
          return this.get("expression").getTypeAnnotation();
        }, exports2.RegExpLiteral = function() {
          return genericTypeAnnotation(identifier("RegExp"));
        }, exports2.RestElement = RestElement, exports2.SequenceExpression = function() {
          return this.get("expressions").pop().getTypeAnnotation();
        }, exports2.StringLiteral = function() {
          return stringTypeAnnotation();
        }, exports2.TSAsExpression = TSAsExpression, exports2.TSNonNullExpression = function() {
          return this.get("expression").getTypeAnnotation();
        }, exports2.TaggedTemplateExpression = function() {
          return resolveCall(this.get("tag"));
        }, exports2.TemplateLiteral = function() {
          return stringTypeAnnotation();
        }, exports2.TypeCastExpression = TypeCastExpression, exports2.UnaryExpression = function(node) {
          const operator = node.operator;
          if ("void" === operator)
            return voidTypeAnnotation();
          if (NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0)
            return numberTypeAnnotation();
          if (STRING_UNARY_OPERATORS.indexOf(operator) >= 0)
            return stringTypeAnnotation();
          if (BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0)
            return booleanTypeAnnotation();
        }, exports2.UpdateExpression = function(node) {
          const operator = node.operator;
          if ("++" === operator || "--" === operator)
            return numberTypeAnnotation();
        }, exports2.VariableDeclarator = function() {
          if (!this.get("id").isIdentifier())
            return;
          return this.get("init").getTypeAnnotation();
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _infererReference = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/inference/util.js");
        const { BOOLEAN_BINARY_OPERATORS, BOOLEAN_UNARY_OPERATORS, NUMBER_BINARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS, anyTypeAnnotation, arrayTypeAnnotation, booleanTypeAnnotation, buildMatchMemberExpression, genericTypeAnnotation, identifier, nullLiteralTypeAnnotation, numberTypeAnnotation, stringTypeAnnotation, tupleTypeAnnotation, unionTypeAnnotation, voidTypeAnnotation, isIdentifier } = _t;
        function TypeCastExpression(node) {
          return node.typeAnnotation;
        }
        function TSAsExpression(node) {
          return node.typeAnnotation;
        }
        function ArrayExpression() {
          return genericTypeAnnotation(identifier("Array"));
        }
        function RestElement() {
          return ArrayExpression();
        }
        TypeCastExpression.validParent = true, TSAsExpression.validParent = true, RestElement.validParent = true;
        const isArrayFrom = buildMatchMemberExpression("Array.from"), isObjectKeys = buildMatchMemberExpression("Object.keys"), isObjectValues = buildMatchMemberExpression("Object.values"), isObjectEntries = buildMatchMemberExpression("Object.entries");
        function resolveCall(callee) {
          if ((callee = callee.resolve()).isFunction()) {
            const { node } = callee;
            if (node.async)
              return node.generator ? genericTypeAnnotation(identifier("AsyncIterator")) : genericTypeAnnotation(identifier("Promise"));
            if (node.generator)
              return genericTypeAnnotation(identifier("Iterator"));
            if (callee.node.returnType)
              return callee.node.returnType;
          }
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/inference/util.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createUnionType = function(types2) {
          if (isFlowType(types2[0]))
            return createFlowUnionType ? createFlowUnionType(types2) : createUnionTypeAnnotation(types2);
          if (createTSUnionType)
            return createTSUnionType(types2);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { createFlowUnionType, createTSUnionType, createUnionTypeAnnotation, isFlowType, isTSType } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/introspection.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._guessExecutionStatusRelativeTo = function(target) {
          return _guessExecutionStatusRelativeToCached(this, target, /* @__PURE__ */ new Map());
        }, exports2._resolve = function(dangerous, resolved) {
          if (resolved && resolved.indexOf(this) >= 0)
            return;
          if ((resolved = resolved || []).push(this), this.isVariableDeclarator()) {
            if (this.get("id").isIdentifier())
              return this.get("init").resolve(dangerous, resolved);
          } else if (this.isReferencedIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            if (!binding)
              return;
            if (!binding.constant)
              return;
            if ("module" === binding.kind)
              return;
            if (binding.path !== this) {
              const ret = binding.path.resolve(dangerous, resolved);
              if (this.find((parent) => parent.node === ret.node))
                return;
              return ret;
            }
          } else {
            if (this.isTypeCastExpression())
              return this.get("expression").resolve(dangerous, resolved);
            if (dangerous && this.isMemberExpression()) {
              const targetKey = this.toComputedKey();
              if (!isLiteral(targetKey))
                return;
              const targetName = targetKey.value, target = this.get("object").resolve(dangerous, resolved);
              if (target.isObjectExpression()) {
                const props = target.get("properties");
                for (const prop of props) {
                  if (!prop.isProperty())
                    continue;
                  const key = prop.get("key");
                  let match = prop.isnt("computed") && key.isIdentifier({ name: targetName });
                  if (match = match || key.isLiteral({ value: targetName }), match)
                    return prop.get("value").resolve(dangerous, resolved);
                }
              } else if (target.isArrayExpression() && !isNaN(+targetName)) {
                const elem = target.get("elements")[targetName];
                if (elem)
                  return elem.resolve(dangerous, resolved);
              }
            }
          }
        }, exports2.canHaveVariableDeclarationOrExpression = function() {
          return ("init" === this.key || "left" === this.key) && this.parentPath.isFor();
        }, exports2.canSwapBetweenExpressionAndStatement = function(replacement) {
          if ("body" !== this.key || !this.parentPath.isArrowFunctionExpression())
            return false;
          if (this.isExpression())
            return isBlockStatement(replacement);
          if (this.isBlockStatement())
            return isExpression(replacement);
          return false;
        }, exports2.equals = function(key, value) {
          return this.node[key] === value;
        }, exports2.getSource = function() {
          const node = this.node;
          if (node.end) {
            const code = this.hub.getCode();
            if (code)
              return code.slice(node.start, node.end);
          }
          return "";
        }, exports2.has = has, exports2.is = void 0, exports2.isCompletionRecord = function(allowInsideFunction) {
          let path3 = this, first = true;
          do {
            const { type, container } = path3;
            if (!first && (path3.isFunction() || "StaticBlock" === type))
              return !!allowInsideFunction;
            if (first = false, Array.isArray(container) && path3.key !== container.length - 1)
              return false;
          } while ((path3 = path3.parentPath) && !path3.isProgram() && !path3.isDoExpression());
          return true;
        }, exports2.isConstantExpression = function() {
          if (this.isIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            return !!binding && binding.constant;
          }
          if (this.isLiteral())
            return !this.isRegExpLiteral() && (!this.isTemplateLiteral() || this.get("expressions").every((expression) => expression.isConstantExpression()));
          if (this.isUnaryExpression())
            return "void" === this.node.operator && this.get("argument").isConstantExpression();
          if (this.isBinaryExpression())
            return this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
          return false;
        }, exports2.isInStrictMode = function() {
          const start = this.isProgram() ? this : this.parentPath;
          return !!start.find((path3) => {
            if (path3.isProgram({ sourceType: "module" }))
              return true;
            if (path3.isClass())
              return true;
            if (path3.isArrowFunctionExpression() && !path3.get("body").isBlockStatement())
              return false;
            let body;
            if (path3.isFunction())
              body = path3.node.body;
            else {
              if (!path3.isProgram())
                return false;
              body = path3.node;
            }
            for (const directive of body.directives)
              if ("use strict" === directive.value.value)
                return true;
          });
        }, exports2.isNodeType = function(type) {
          return isType(this.type, type);
        }, exports2.isStatementOrBlock = function() {
          return !this.parentPath.isLabeledStatement() && !isBlockStatement(this.container) && STATEMENT_OR_BLOCK_KEYS.includes(this.key);
        }, exports2.isStatic = function() {
          return this.scope.isStatic(this.node);
        }, exports2.isnt = function(key) {
          return !this.has(key);
        }, exports2.matchesPattern = function(pattern, allowPartial) {
          return _matchesPattern(this.node, pattern, allowPartial);
        }, exports2.referencesImport = function(moduleSource, importName2) {
          if (!this.isReferencedIdentifier()) {
            if (this.isJSXMemberExpression() && this.node.property.name === importName2 || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, { value: importName2 }) : this.node.property.name === importName2)) {
              const object = this.get("object");
              return object.isReferencedIdentifier() && object.referencesImport(moduleSource, "*");
            }
            return false;
          }
          const binding = this.scope.getBinding(this.node.name);
          if (!binding || "module" !== binding.kind)
            return false;
          const path3 = binding.path, parent = path3.parentPath;
          if (!parent.isImportDeclaration())
            return false;
          if (parent.node.source.value !== moduleSource)
            return false;
          if (!importName2)
            return true;
          if (path3.isImportDefaultSpecifier() && "default" === importName2)
            return true;
          if (path3.isImportNamespaceSpecifier() && "*" === importName2)
            return true;
          if (path3.isImportSpecifier() && isIdentifier(path3.node.imported, { name: importName2 }))
            return true;
          return false;
        }, exports2.resolve = function(dangerous, resolved) {
          return this._resolve(dangerous, resolved) || this;
        }, exports2.willIMaybeExecuteBefore = function(target) {
          return "after" !== this._guessExecutionStatusRelativeTo(target);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { STATEMENT_OR_BLOCK_KEYS, VISITOR_KEYS, isBlockStatement, isExpression, isIdentifier, isLiteral, isStringLiteral, isType, matchesPattern: _matchesPattern } = _t;
        function has(key) {
          const val = this.node && this.node[key];
          return val && Array.isArray(val) ? !!val.length : !!val;
        }
        const is = has;
        function getOuterFunction(path3) {
          return (path3.scope.getFunctionParent() || path3.scope.getProgramParent()).path;
        }
        function isExecutionUncertain(type, key) {
          switch (type) {
            case "LogicalExpression":
            case "AssignmentPattern":
              return "right" === key;
            case "ConditionalExpression":
            case "IfStatement":
              return "consequent" === key || "alternate" === key;
            case "WhileStatement":
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForOfStatement":
              return "body" === key;
            case "ForStatement":
              return "body" === key || "update" === key;
            case "SwitchStatement":
              return "cases" === key;
            case "TryStatement":
              return "handler" === key;
            case "OptionalMemberExpression":
              return "property" === key;
            case "OptionalCallExpression":
              return "arguments" === key;
            default:
              return false;
          }
        }
        function isExecutionUncertainInList(paths, maxIndex) {
          for (let i = 0; i < maxIndex; i++) {
            const path3 = paths[i];
            if (isExecutionUncertain(path3.parent.type, path3.parentKey))
              return true;
          }
          return false;
        }
        function _guessExecutionStatusRelativeToCached(base, target, cache) {
          const funcParent = { this: getOuterFunction(base), target: getOuterFunction(target) };
          if (funcParent.target.node !== funcParent.this.node)
            return function(base2, target2, cache2) {
              let nodeMap = cache2.get(base2.node);
              if (nodeMap) {
                if (nodeMap.has(target2.node))
                  return nodeMap.get(target2.node);
              } else
                cache2.set(base2.node, nodeMap = /* @__PURE__ */ new Map());
              const result = function(base3, target3, cache3) {
                if (!target3.isFunctionDeclaration() || target3.parentPath.isExportDeclaration())
                  return "unknown";
                const binding = target3.scope.getBinding(target3.node.id.name);
                if (!binding.references)
                  return "before";
                const referencePaths = binding.referencePaths;
                let allStatus;
                for (const path3 of referencePaths) {
                  if (!!!path3.find((path4) => path4.node === target3.node)) {
                    if ("callee" !== path3.key || !path3.parentPath.isCallExpression())
                      return "unknown";
                    if (!executionOrderCheckedNodes.has(path3.node)) {
                      executionOrderCheckedNodes.add(path3.node);
                      try {
                        const status = _guessExecutionStatusRelativeToCached(base3, path3, cache3);
                        if (allStatus && allStatus !== status)
                          return "unknown";
                        allStatus = status;
                      } finally {
                        executionOrderCheckedNodes.delete(path3.node);
                      }
                    }
                  }
                }
                return allStatus;
              }(base2, target2, cache2);
              return nodeMap.set(target2.node, result), result;
            }(base, funcParent.target, cache);
          const paths = { target: target.getAncestry(), this: base.getAncestry() };
          if (paths.target.indexOf(base) >= 0)
            return "after";
          if (paths.this.indexOf(target) >= 0)
            return "before";
          let commonPath;
          const commonIndex = { target: 0, this: 0 };
          for (; !commonPath && commonIndex.this < paths.this.length; ) {
            const path3 = paths.this[commonIndex.this];
            commonIndex.target = paths.target.indexOf(path3), commonIndex.target >= 0 ? commonPath = path3 : commonIndex.this++;
          }
          if (!commonPath)
            throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
          if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1))
            return "unknown";
          const divergence = { this: paths.this[commonIndex.this - 1], target: paths.target[commonIndex.target - 1] };
          if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container)
            return divergence.target.key > divergence.this.key ? "before" : "after";
          const keys = VISITOR_KEYS[commonPath.type], keyPosition_this = keys.indexOf(divergence.this.parentKey);
          return keys.indexOf(divergence.target.parentKey) > keyPosition_this ? "before" : "after";
        }
        exports2.is = is;
        const executionOrderCheckedNodes = /* @__PURE__ */ new Set();
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/lib/hoister.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _t2 = _t;
        const { react } = _t, { cloneNode, jsxExpressionContainer, variableDeclaration, variableDeclarator } = _t2, referenceVisitor = { ReferencedIdentifier(path3, state) {
          if (path3.isJSXIdentifier() && react.isCompatTag(path3.node.name) && !path3.parentPath.isJSXMemberExpression())
            return;
          if ("this" === path3.node.name) {
            let scope = path3.scope;
            do {
              if (scope.path.isFunction() && !scope.path.isArrowFunctionExpression())
                break;
            } while (scope = scope.parent);
            scope && state.breakOnScopePaths.push(scope.path);
          }
          const binding = path3.scope.getBinding(path3.node.name);
          if (binding) {
            for (const violation of binding.constantViolations)
              if (violation.scope !== binding.path.scope)
                return state.mutableBinding = true, void path3.stop();
            binding === state.scope.getBinding(path3.node.name) && (state.bindings[path3.node.name] = binding);
          }
        } };
        exports2.default = class {
          constructor(path3, scope) {
            this.breakOnScopePaths = void 0, this.bindings = void 0, this.mutableBinding = void 0, this.scopes = void 0, this.scope = void 0, this.path = void 0, this.attachAfter = void 0, this.breakOnScopePaths = [], this.bindings = {}, this.mutableBinding = false, this.scopes = [], this.scope = scope, this.path = path3, this.attachAfter = false;
          }
          isCompatibleScope(scope) {
            for (const key of Object.keys(this.bindings)) {
              const binding = this.bindings[key];
              if (!scope.bindingIdentifierEquals(key, binding.identifier))
                return false;
            }
            return true;
          }
          getCompatibleScopes() {
            let scope = this.path.scope;
            do {
              if (!this.isCompatibleScope(scope))
                break;
              if (this.scopes.push(scope), this.breakOnScopePaths.indexOf(scope.path) >= 0)
                break;
            } while (scope = scope.parent);
          }
          getAttachmentPath() {
            let path3 = this._getAttachmentPath();
            if (!path3)
              return;
            let targetScope = path3.scope;
            if (targetScope.path === path3 && (targetScope = path3.scope.parent), targetScope.path.isProgram() || targetScope.path.isFunction())
              for (const name of Object.keys(this.bindings)) {
                if (!targetScope.hasOwnBinding(name))
                  continue;
                const binding = this.bindings[name];
                if ("param" === binding.kind || "params" === binding.path.parentKey)
                  continue;
                if (this.getAttachmentParentForPath(binding.path).key >= path3.key) {
                  this.attachAfter = true, path3 = binding.path;
                  for (const violationPath of binding.constantViolations)
                    this.getAttachmentParentForPath(violationPath).key > path3.key && (path3 = violationPath);
                }
              }
            return path3;
          }
          _getAttachmentPath() {
            const scope = this.scopes.pop();
            if (scope) {
              if (scope.path.isFunction()) {
                if (!this.hasOwnParamBindings(scope))
                  return this.getNextScopeAttachmentParent();
                {
                  if (this.scope === scope)
                    return;
                  const bodies = scope.path.get("body").get("body");
                  for (let i = 0; i < bodies.length; i++)
                    if (!bodies[i].node._blockHoist)
                      return bodies[i];
                }
              } else if (scope.path.isProgram())
                return this.getNextScopeAttachmentParent();
            }
          }
          getNextScopeAttachmentParent() {
            const scope = this.scopes.pop();
            if (scope)
              return this.getAttachmentParentForPath(scope.path);
          }
          getAttachmentParentForPath(path3) {
            do {
              if (!path3.parentPath || Array.isArray(path3.container) && path3.isStatement())
                return path3;
            } while (path3 = path3.parentPath);
          }
          hasOwnParamBindings(scope) {
            for (const name of Object.keys(this.bindings)) {
              if (!scope.hasOwnBinding(name))
                continue;
              const binding = this.bindings[name];
              if ("param" === binding.kind && binding.constant)
                return true;
            }
            return false;
          }
          run() {
            if (this.path.traverse(referenceVisitor, this), this.mutableBinding)
              return;
            this.getCompatibleScopes();
            const attachTo = this.getAttachmentPath();
            if (!attachTo)
              return;
            if (attachTo.getFunctionParent() === this.path.getFunctionParent())
              return;
            let uid = attachTo.scope.generateUidIdentifier("ref");
            const declarator = variableDeclarator(uid, this.path.node), insertFn = this.attachAfter ? "insertAfter" : "insertBefore", [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration("var", [declarator])]), parent = this.path.parentPath;
            return parent.isJSXElement() && this.path.container === parent.node.children && (uid = jsxExpressionContainer(uid)), this.path.replaceWith(cloneNode(uid)), attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.hooks = void 0;
        exports2.hooks = [function(self2, parent) {
          if ("test" === self2.key && (parent.isWhile() || parent.isSwitchCase()) || "declaration" === self2.key && parent.isExportDeclaration() || "body" === self2.key && parent.isLabeledStatement() || "declarations" === self2.listKey && parent.isVariableDeclaration() && 1 === parent.node.declarations.length || "expression" === self2.key && parent.isExpressionStatement())
            return parent.remove(), true;
        }, function(self2, parent) {
          if (parent.isSequenceExpression() && 1 === parent.node.expressions.length)
            return parent.replaceWith(parent.node.expressions[0]), true;
        }, function(self2, parent) {
          if (parent.isBinary())
            return "left" === self2.key ? parent.replaceWith(parent.node.right) : parent.replaceWith(parent.node.left), true;
        }, function(self2, parent) {
          if (parent.isIfStatement() && "consequent" === self2.key || "body" === self2.key && (parent.isLoop() || parent.isArrowFunctionExpression()))
            return self2.replaceWith({ type: "BlockStatement", body: [] }), true;
        }];
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isBindingIdentifier = function() {
          const { node, parent } = this, grandparent = this.parentPath.parent;
          return isIdentifier(node) && isBinding(node, parent, grandparent);
        }, exports2.isBlockScoped = function() {
          return nodeIsBlockScoped(this.node);
        }, exports2.isExistentialTypeParam = function() {
          throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
        }, exports2.isExpression = function() {
          return this.isIdentifier() ? this.isReferencedIdentifier() : nodeIsExpression(this.node);
        }, exports2.isFlow = function() {
          const { node } = this;
          return !!nodeIsFlow(node) || (isImportDeclaration(node) ? "type" === node.importKind || "typeof" === node.importKind : isExportDeclaration(node) ? "type" === node.exportKind : !!isImportSpecifier(node) && ("type" === node.importKind || "typeof" === node.importKind));
        }, exports2.isForAwaitStatement = function() {
          return isForStatement(this.node, { await: true });
        }, exports2.isGenerated = function() {
          return !this.isUser();
        }, exports2.isNumericLiteralTypeAnnotation = function() {
          throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
        }, exports2.isPure = function(constantsOnly) {
          return this.scope.isPure(this.node, constantsOnly);
        }, exports2.isReferenced = function() {
          return nodeIsReferenced(this.node, this.parent);
        }, exports2.isReferencedIdentifier = function(opts) {
          const { node, parent } = this;
          if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {
            if (!isJSXIdentifier(node, opts))
              return false;
            if (isCompatTag(node.name))
              return false;
          }
          return nodeIsReferenced(node, parent, this.parentPath.parent);
        }, exports2.isReferencedMemberExpression = function() {
          const { node, parent } = this;
          return isMemberExpression(node) && nodeIsReferenced(node, parent);
        }, exports2.isRestProperty = function() {
          return nodeIsRestElement(this.node) && this.parentPath && this.parentPath.isObjectPattern();
        }, exports2.isScope = function() {
          return nodeIsScope(this.node, this.parent);
        }, exports2.isSpreadProperty = function() {
          return nodeIsRestElement(this.node) && this.parentPath && this.parentPath.isObjectExpression();
        }, exports2.isStatement = function() {
          const { node, parent } = this;
          if (nodeIsStatement(node)) {
            if (isVariableDeclaration(node)) {
              if (isForXStatement(parent, { left: node }))
                return false;
              if (isForStatement(parent, { init: node }))
                return false;
            }
            return true;
          }
          return false;
        }, exports2.isUser = function() {
          return this.node && !!this.node.loc;
        }, exports2.isVar = function() {
          return nodeIsVar(this.node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { isBinding, isBlockScoped: nodeIsBlockScoped, isExportDeclaration, isExpression: nodeIsExpression, isFlow: nodeIsFlow, isForStatement, isForXStatement, isIdentifier, isImportDeclaration, isImportSpecifier, isJSXIdentifier, isJSXMemberExpression, isMemberExpression, isRestElement: nodeIsRestElement, isReferenced: nodeIsReferenced, isScope: nodeIsScope, isStatement: nodeIsStatement, isVar: nodeIsVar, isVariableDeclaration, react } = _t, { isCompatTag } = react;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/lib/virtual-types.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.Var = exports2.User = exports2.Statement = exports2.SpreadProperty = exports2.Scope = exports2.RestProperty = exports2.ReferencedMemberExpression = exports2.ReferencedIdentifier = exports2.Referenced = exports2.Pure = exports2.NumericLiteralTypeAnnotation = exports2.Generated = exports2.ForAwaitStatement = exports2.Flow = exports2.Expression = exports2.ExistentialTypeParam = exports2.BlockScoped = exports2.BindingIdentifier = void 0;
        exports2.ReferencedIdentifier = ["Identifier", "JSXIdentifier"];
        exports2.ReferencedMemberExpression = ["MemberExpression"];
        exports2.BindingIdentifier = ["Identifier"];
        exports2.Statement = ["Statement"];
        exports2.Expression = ["Expression"];
        exports2.Scope = ["Scopable", "Pattern"];
        exports2.Referenced = null;
        exports2.BlockScoped = null;
        exports2.Var = ["VariableDeclaration"];
        exports2.User = null;
        exports2.Generated = null;
        exports2.Pure = null;
        exports2.Flow = ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"];
        exports2.RestProperty = ["RestElement"];
        exports2.SpreadProperty = ["RestElement"];
        exports2.ExistentialTypeParam = ["ExistsTypeAnnotation"];
        exports2.NumericLiteralTypeAnnotation = ["NumberLiteralTypeAnnotation"];
        exports2.ForAwaitStatement = ["ForOfStatement"];
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/modification.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._containerInsert = function(from, nodes) {
          this.updateSiblingKeys(from, nodes.length);
          const paths = [];
          this.container.splice(from, 0, ...nodes);
          for (let i = 0; i < nodes.length; i++) {
            const to = from + i, path3 = this.getSibling(to);
            paths.push(path3), this.context && this.context.queue && path3.pushContext(this.context);
          }
          const contexts = this._getQueueContexts();
          for (const path3 of paths) {
            path3.setScope(), path3.debug("Inserted.");
            for (const context of contexts)
              context.maybeQueue(path3, true);
          }
          return paths;
        }, exports2._containerInsertAfter = function(nodes) {
          return this._containerInsert(this.key + 1, nodes);
        }, exports2._containerInsertBefore = function(nodes) {
          return this._containerInsert(this.key, nodes);
        }, exports2._verifyNodeList = function(nodes) {
          if (!nodes)
            return [];
          Array.isArray(nodes) || (nodes = [nodes]);
          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            let msg;
            if (node ? "object" != typeof node ? msg = "contains a non-object node" : node.type ? node instanceof _index.default && (msg = "has a NodePath when it expected a raw object") : msg = "without a type" : msg = "has falsy node", msg) {
              const type = Array.isArray(node) ? "array" : typeof node;
              throw new Error(`Node list ${msg} with the index of ${i} and type of ${type}`);
            }
          }
          return nodes;
        }, exports2.hoist = function(scope = this.scope) {
          return new _hoister.default(this, scope).run();
        }, exports2.insertAfter = function(nodes_) {
          if (this._assertUnremoved(), this.isSequenceExpression())
            return last(this.get("expressions")).insertAfter(nodes_);
          const nodes = this._verifyNodeList(nodes_), { parentPath } = this;
          if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || parentPath.isExportNamedDeclaration() || parentPath.isExportDefaultDeclaration() && this.isDeclaration())
            return parentPath.insertAfter(nodes.map((node) => isExpression(node) ? expressionStatement(node) : node));
          if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && "init" === this.key) {
            if (this.node) {
              const node = this.node;
              let { scope } = this;
              if (scope.path.isPattern())
                return assertExpression(node), this.replaceWith(callExpression(arrowFunctionExpression([], node), [])), this.get("callee.body").insertAfter(nodes), [this];
              if (isHiddenInSequenceExpression(this))
                nodes.unshift(node);
              else if (isCallExpression(node) && isSuper(node.callee))
                nodes.unshift(node), nodes.push(thisExpression());
              else if (function(node2, scope2) {
                if (!isAssignmentExpression(node2) || !isIdentifier(node2.left))
                  return false;
                const blockScope = scope2.getBlockParent();
                return blockScope.hasOwnBinding(node2.left.name) && blockScope.getOwnBinding(node2.left.name).constantViolations.length <= 1;
              }(node, scope))
                nodes.unshift(node), nodes.push(cloneNode(node.left));
              else if (scope.isPure(node, true))
                nodes.push(node);
              else {
                parentPath.isMethod({ computed: true, key: node }) && (scope = scope.parent);
                const temp = scope.generateDeclaredUidIdentifier();
                nodes.unshift(expressionStatement(assignmentExpression("=", cloneNode(temp), node))), nodes.push(expressionStatement(cloneNode(temp)));
              }
            }
            return this.replaceExpressionWithStatements(nodes);
          }
          if (Array.isArray(this.container))
            return this._containerInsertAfter(nodes);
          if (this.isStatementOrBlock()) {
            const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || null != node.expression);
            return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.pushContainer("body", nodes);
          }
          throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
        }, exports2.insertBefore = function(nodes_) {
          this._assertUnremoved();
          const nodes = this._verifyNodeList(nodes_), { parentPath } = this;
          if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || parentPath.isExportNamedDeclaration() || parentPath.isExportDefaultDeclaration() && this.isDeclaration())
            return parentPath.insertBefore(nodes);
          if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && "init" === this.key)
            return this.node && nodes.push(this.node), this.replaceExpressionWithStatements(nodes);
          if (Array.isArray(this.container))
            return this._containerInsertBefore(nodes);
          if (this.isStatementOrBlock()) {
            const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || null != node.expression);
            return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.unshiftContainer("body", nodes);
          }
          throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
        }, exports2.pushContainer = function(listKey, nodes) {
          this._assertUnremoved();
          const verifiedNodes = this._verifyNodeList(nodes), container = this.node[listKey];
          return _index.default.get({ parentPath: this, parent: this.node, container, listKey, key: container.length }).setContext(this.context).replaceWithMultiple(verifiedNodes);
        }, exports2.unshiftContainer = function(listKey, nodes) {
          this._assertUnremoved(), nodes = this._verifyNodeList(nodes);
          return _index.default.get({ parentPath: this, parent: this.node, container: this.node[listKey], listKey, key: 0 }).setContext(this.context)._containerInsertBefore(nodes);
        }, exports2.updateSiblingKeys = function(fromIndex, incrementBy) {
          if (!this.parent)
            return;
          const paths = _cache.path.get(this.parent);
          for (const [, path3] of paths)
            path3.key >= fromIndex && (path3.key += incrementBy);
        };
        var _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/cache.js"), _hoister = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/lib/hoister.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { arrowFunctionExpression, assertExpression, assignmentExpression, blockStatement, callExpression, cloneNode, expressionStatement, isAssignmentExpression, isCallExpression, isExpression, isIdentifier, isSequenceExpression, isSuper, thisExpression } = _t;
        const last = (arr) => arr[arr.length - 1];
        function isHiddenInSequenceExpression(path3) {
          return isSequenceExpression(path3.parent) && (last(path3.parent.expressions) !== path3.node || isHiddenInSequenceExpression(path3.parentPath));
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/removal.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._assertUnremoved = function() {
          if (this.removed)
            throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
        }, exports2._callRemovalHooks = function() {
          for (const fn of _removalHooks.hooks)
            if (fn(this, this.parentPath))
              return true;
        }, exports2._markRemoved = function() {
          this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED, this.parent && _cache.path.get(this.parent).delete(this.node);
          this.node = null;
        }, exports2._remove = function() {
          Array.isArray(this.container) ? (this.container.splice(this.key, 1), this.updateSiblingKeys(this.key, -1)) : this._replaceWith(null);
        }, exports2._removeFromScope = function() {
          const bindings = this.getBindingIdentifiers();
          Object.keys(bindings).forEach((name) => this.scope.removeBinding(name));
        }, exports2.remove = function() {
          var _this$opts;
          this._assertUnremoved(), this.resync(), null != (_this$opts = this.opts) && _this$opts.noScope || this._removeFromScope();
          if (this._callRemovalHooks())
            return void this._markRemoved();
          this.shareCommentsWithSiblings(), this._remove(), this._markRemoved();
        };
        var _removalHooks = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/cache.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/index.js");
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/replacement.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._replaceWith = function(node) {
          var _pathCache$get2;
          if (!this.container)
            throw new ReferenceError("Container is falsy");
          this.inList ? validate(this.parent, this.key, [node]) : validate(this.parent, this.key, node);
          this.debug(`Replace with ${null == node ? void 0 : node.type}`), null == (_pathCache$get2 = _cache.path.get(this.parent)) || _pathCache$get2.set(node, this).delete(this.node), this.node = this.container[this.key] = node;
        }, exports2.replaceExpressionWithStatements = function(nodes) {
          this.resync();
          const nodesAsSequenceExpression = toSequenceExpression(nodes, this.scope);
          if (nodesAsSequenceExpression)
            return this.replaceWith(nodesAsSequenceExpression)[0].get("expressions");
          const functionParent = this.getFunctionParent(), isParentAsync = null == functionParent ? void 0 : functionParent.is("async"), isParentGenerator = null == functionParent ? void 0 : functionParent.is("generator"), container = arrowFunctionExpression([], blockStatement(nodes));
          this.replaceWith(callExpression(container, []));
          const callee = this.get("callee");
          (0, _helperHoistVariables.default)(callee.get("body"), (id) => {
            this.scope.push({ id });
          }, "var");
          const completionRecords = this.get("callee").getCompletionRecords();
          for (const path3 of completionRecords) {
            if (!path3.isExpressionStatement())
              continue;
            const loop = path3.findParent((path4) => path4.isLoop());
            if (loop) {
              let uid = loop.getData("expressionReplacementReturnUid");
              uid ? uid = identifier(uid.name) : (uid = callee.scope.generateDeclaredUidIdentifier("ret"), callee.get("body").pushContainer("body", returnStatement(cloneNode(uid))), loop.setData("expressionReplacementReturnUid", uid)), path3.get("expression").replaceWith(assignmentExpression("=", cloneNode(uid), path3.node.expression));
            } else
              path3.replaceWith(returnStatement(path3.node.expression));
          }
          callee.arrowFunctionToExpression();
          const newCallee = callee, needToAwaitFunction = isParentAsync && _index.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES), needToYieldFunction = isParentGenerator && _index.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);
          needToAwaitFunction && (newCallee.set("async", true), needToYieldFunction || this.replaceWith(awaitExpression(this.node)));
          needToYieldFunction && (newCallee.set("generator", true), this.replaceWith(yieldExpression(this.node, true)));
          return newCallee.get("body.body");
        }, exports2.replaceInline = function(nodes) {
          if (this.resync(), Array.isArray(nodes)) {
            if (Array.isArray(this.container)) {
              nodes = this._verifyNodeList(nodes);
              const paths = this._containerInsertAfter(nodes);
              return this.remove(), paths;
            }
            return this.replaceWithMultiple(nodes);
          }
          return this.replaceWith(nodes);
        }, exports2.replaceWith = function(replacementPath) {
          if (this.resync(), this.removed)
            throw new Error("You can't replace this node, we've already removed it");
          let replacement = replacementPath instanceof _index2.default ? replacementPath.node : replacementPath;
          if (!replacement)
            throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
          if (this.node === replacement)
            return [this];
          if (this.isProgram() && !isProgram(replacement))
            throw new Error("You can only replace a Program root node with another Program node");
          if (Array.isArray(replacement))
            throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
          if ("string" == typeof replacement)
            throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
          let nodePath2 = "";
          this.isNodeType("Statement") && isExpression(replacement) && (this.canHaveVariableDeclarationOrExpression() || this.canSwapBetweenExpressionAndStatement(replacement) || this.parentPath.isExportDefaultDeclaration() || (replacement = expressionStatement(replacement), nodePath2 = "expression"));
          if (this.isNodeType("Expression") && isStatement(replacement) && !this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement))
            return this.replaceExpressionWithStatements([replacement]);
          const oldNode = this.node;
          oldNode && (inheritsComments(replacement, oldNode), removeComments(oldNode));
          return this._replaceWith(replacement), this.type = replacement.type, this.setScope(), this.requeue(), [nodePath2 ? this.get(nodePath2) : this];
        }, exports2.replaceWithMultiple = function(nodes) {
          var _pathCache$get;
          this.resync(), nodes = this._verifyNodeList(nodes), inheritLeadingComments(nodes[0], this.node), inheritTrailingComments(nodes[nodes.length - 1], this.node), null == (_pathCache$get = _cache.path.get(this.parent)) || _pathCache$get.delete(this.node), this.node = this.container[this.key] = null;
          const paths = this.insertAfter(nodes);
          this.node ? this.requeue() : this.remove();
          return paths;
        }, exports2.replaceWithSourceString = function(replacement) {
          let ast;
          this.resync();
          try {
            replacement = `(${replacement})`, ast = (0, _parser.parse)(replacement);
          } catch (err) {
            const loc = err.loc;
            throw loc && (err.message += " - make sure this is an expression.\n" + (0, _codeFrame.codeFrameColumns)(replacement, { start: { line: loc.line, column: loc.column + 1 } }), err.code = "BABEL_REPLACE_SOURCE_ERROR"), err;
          }
          const expressionAST = ast.program.body[0].expression;
          return _index.default.removeProperties(expressionAST), this.replaceWith(expressionAST);
        };
        var _codeFrame = __webpack_require__2("./stubs/babel_codeframe.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/index.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/cache.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.19.1/node_modules/@babel/parser/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _helperHoistVariables = __webpack_require__2("./node_modules/.pnpm/@babel+helper-hoist-variables@7.18.6/node_modules/@babel/helper-hoist-variables/lib/index.js");
        const { FUNCTION_TYPES, arrowFunctionExpression, assignmentExpression, awaitExpression, blockStatement, callExpression, cloneNode, expressionStatement, identifier, inheritLeadingComments, inheritTrailingComments, inheritsComments, isExpression, isProgram, isStatement, removeComments, returnStatement, toSequenceExpression, validate, yieldExpression } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/scope/binding.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        exports2.default = class {
          constructor({ identifier, scope, path: path3, kind }) {
            this.identifier = void 0, this.scope = void 0, this.path = void 0, this.kind = void 0, this.constantViolations = [], this.constant = true, this.referencePaths = [], this.referenced = false, this.references = 0, this.identifier = identifier, this.scope = scope, this.path = path3, this.kind = kind, this.clearValue();
          }
          deoptValue() {
            this.clearValue(), this.hasDeoptedValue = true;
          }
          setValue(value) {
            this.hasDeoptedValue || (this.hasValue = true, this.value = value);
          }
          clearValue() {
            this.hasDeoptedValue = false, this.hasValue = false, this.value = null;
          }
          reassign(path3) {
            this.constant = false, -1 === this.constantViolations.indexOf(path3) && this.constantViolations.push(path3);
          }
          reference(path3) {
            -1 === this.referencePaths.indexOf(path3) && (this.referenced = true, this.references++, this.referencePaths.push(path3));
          }
          dereference() {
            this.references--, this.referenced = !!this.references;
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/scope/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _renamer = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/scope/lib/renamer.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/index.js"), _binding = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/scope/binding.js"), _globals = __webpack_require__2("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/cache.js");
        const { NOT_LOCAL_BINDING, callExpression, cloneNode, getBindingIdentifiers, identifier, isArrayExpression, isBinary, isClass, isClassBody, isClassDeclaration, isExportAllDeclaration, isExportDefaultDeclaration, isExportNamedDeclaration, isFunctionDeclaration, isIdentifier, isImportDeclaration, isLiteral, isMethod, isModuleDeclaration, isModuleSpecifier, isNullLiteral, isObjectExpression, isProperty, isPureish, isRegExpLiteral, isSuper, isTaggedTemplateExpression, isTemplateLiteral, isThisExpression, isUnaryExpression, isVariableDeclaration, matchesPattern, memberExpression, numericLiteral, toIdentifier, unaryExpression, variableDeclaration, variableDeclarator, isRecordExpression, isTupleExpression, isObjectProperty, isTopicReference, isMetaProperty, isPrivateName } = _t;
        function gatherNodeParts(node, parts) {
          switch (null == node ? void 0 : node.type) {
            default:
              if (isModuleDeclaration(node))
                if ((isExportAllDeclaration(node) || isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.source)
                  gatherNodeParts(node.source, parts);
                else if ((isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.specifiers && node.specifiers.length)
                  for (const e of node.specifiers)
                    gatherNodeParts(e, parts);
                else
                  (isExportDefaultDeclaration(node) || isExportNamedDeclaration(node)) && node.declaration && gatherNodeParts(node.declaration, parts);
              else
                isModuleSpecifier(node) ? gatherNodeParts(node.local, parts) : !isLiteral(node) || isNullLiteral(node) || isRegExpLiteral(node) || isTemplateLiteral(node) || parts.push(node.value);
              break;
            case "MemberExpression":
            case "OptionalMemberExpression":
            case "JSXMemberExpression":
              gatherNodeParts(node.object, parts), gatherNodeParts(node.property, parts);
              break;
            case "Identifier":
            case "JSXIdentifier":
              parts.push(node.name);
              break;
            case "CallExpression":
            case "OptionalCallExpression":
            case "NewExpression":
              gatherNodeParts(node.callee, parts);
              break;
            case "ObjectExpression":
            case "ObjectPattern":
              for (const e of node.properties)
                gatherNodeParts(e, parts);
              break;
            case "SpreadElement":
            case "RestElement":
            case "UnaryExpression":
            case "UpdateExpression":
              gatherNodeParts(node.argument, parts);
              break;
            case "ObjectProperty":
            case "ObjectMethod":
            case "ClassProperty":
            case "ClassMethod":
            case "ClassPrivateProperty":
            case "ClassPrivateMethod":
              gatherNodeParts(node.key, parts);
              break;
            case "ThisExpression":
              parts.push("this");
              break;
            case "Super":
              parts.push("super");
              break;
            case "Import":
              parts.push("import");
              break;
            case "DoExpression":
              parts.push("do");
              break;
            case "YieldExpression":
              parts.push("yield"), gatherNodeParts(node.argument, parts);
              break;
            case "AwaitExpression":
              parts.push("await"), gatherNodeParts(node.argument, parts);
              break;
            case "AssignmentExpression":
              gatherNodeParts(node.left, parts);
              break;
            case "VariableDeclarator":
            case "FunctionExpression":
            case "FunctionDeclaration":
            case "ClassExpression":
            case "ClassDeclaration":
            case "PrivateName":
              gatherNodeParts(node.id, parts);
              break;
            case "ParenthesizedExpression":
              gatherNodeParts(node.expression, parts);
              break;
            case "MetaProperty":
              gatherNodeParts(node.meta, parts), gatherNodeParts(node.property, parts);
              break;
            case "JSXElement":
              gatherNodeParts(node.openingElement, parts);
              break;
            case "JSXOpeningElement":
              gatherNodeParts(node.name, parts);
              break;
            case "JSXFragment":
              gatherNodeParts(node.openingFragment, parts);
              break;
            case "JSXOpeningFragment":
              parts.push("Fragment");
              break;
            case "JSXNamespacedName":
              gatherNodeParts(node.namespace, parts), gatherNodeParts(node.name, parts);
          }
        }
        const collectorVisitor = { ForStatement(path3) {
          const declar = path3.get("init");
          if (declar.isVar()) {
            const { scope } = path3;
            (scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", declar);
          }
        }, Declaration(path3) {
          if (path3.isBlockScoped())
            return;
          if (path3.isImportDeclaration())
            return;
          if (path3.isExportDeclaration())
            return;
          (path3.scope.getFunctionParent() || path3.scope.getProgramParent()).registerDeclaration(path3);
        }, ImportDeclaration(path3) {
          path3.scope.getBlockParent().registerDeclaration(path3);
        }, ReferencedIdentifier(path3, state) {
          state.references.push(path3);
        }, ForXStatement(path3, state) {
          const left = path3.get("left");
          if (left.isPattern() || left.isIdentifier())
            state.constantViolations.push(path3);
          else if (left.isVar()) {
            const { scope } = path3;
            (scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", left);
          }
        }, ExportDeclaration: { exit(path3) {
          const { node, scope } = path3;
          if (isExportAllDeclaration(node))
            return;
          const declar = node.declaration;
          if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {
            const id = declar.id;
            if (!id)
              return;
            const binding = scope.getBinding(id.name);
            null == binding || binding.reference(path3);
          } else if (isVariableDeclaration(declar))
            for (const decl of declar.declarations)
              for (const name of Object.keys(getBindingIdentifiers(decl))) {
                const binding = scope.getBinding(name);
                null == binding || binding.reference(path3);
              }
        } }, LabeledStatement(path3) {
          path3.scope.getBlockParent().registerDeclaration(path3);
        }, AssignmentExpression(path3, state) {
          state.assignments.push(path3);
        }, UpdateExpression(path3, state) {
          state.constantViolations.push(path3);
        }, UnaryExpression(path3, state) {
          "delete" === path3.node.operator && state.constantViolations.push(path3);
        }, BlockScoped(path3) {
          let scope = path3.scope;
          scope.path === path3 && (scope = scope.parent);
          if (scope.getBlockParent().registerDeclaration(path3), path3.isClassDeclaration() && path3.node.id) {
            const name = path3.node.id.name;
            path3.scope.bindings[name] = path3.scope.parent.getBinding(name);
          }
        }, CatchClause(path3) {
          path3.scope.registerBinding("let", path3);
        }, Function(path3) {
          const params = path3.get("params");
          for (const param of params)
            path3.scope.registerBinding("param", param);
          path3.isFunctionExpression() && path3.has("id") && !path3.get("id").node[NOT_LOCAL_BINDING] && path3.scope.registerBinding("local", path3.get("id"), path3);
        }, ClassExpression(path3) {
          path3.has("id") && !path3.get("id").node[NOT_LOCAL_BINDING] && path3.scope.registerBinding("local", path3);
        } };
        let uid = 0;
        class Scope3 {
          constructor(path3) {
            this.uid = void 0, this.path = void 0, this.block = void 0, this.labels = void 0, this.inited = void 0, this.bindings = void 0, this.references = void 0, this.globals = void 0, this.uids = void 0, this.data = void 0, this.crawling = void 0;
            const { node } = path3, cached = _cache.scope.get(node);
            if ((null == cached ? void 0 : cached.path) === path3)
              return cached;
            _cache.scope.set(node, this), this.uid = uid++, this.block = node, this.path = path3, this.labels = /* @__PURE__ */ new Map(), this.inited = false;
          }
          get parent() {
            var _parent;
            let parent, path3 = this.path;
            do {
              const shouldSkip = "key" === path3.key || "decorators" === path3.listKey;
              path3 = path3.parentPath, shouldSkip && path3.isMethod() && (path3 = path3.parentPath), path3 && path3.isScope() && (parent = path3);
            } while (path3 && !parent);
            return null == (_parent = parent) ? void 0 : _parent.scope;
          }
          get parentBlock() {
            return this.path.parent;
          }
          get hub() {
            return this.path.hub;
          }
          traverse(node, opts, state) {
            (0, _index.default)(node, opts, this, state, this.path);
          }
          generateDeclaredUidIdentifier(name) {
            const id = this.generateUidIdentifier(name);
            return this.push({ id }), cloneNode(id);
          }
          generateUidIdentifier(name) {
            return identifier(this.generateUid(name));
          }
          generateUid(name = "temp") {
            let uid2;
            name = toIdentifier(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");
            let i = 1;
            do {
              uid2 = this._generateUid(name, i), i++;
            } while (this.hasLabel(uid2) || this.hasBinding(uid2) || this.hasGlobal(uid2) || this.hasReference(uid2));
            const program = this.getProgramParent();
            return program.references[uid2] = true, program.uids[uid2] = true, uid2;
          }
          _generateUid(name, i) {
            let id = name;
            return i > 1 && (id += i), `_${id}`;
          }
          generateUidBasedOnNode(node, defaultName) {
            const parts = [];
            gatherNodeParts(node, parts);
            let id = parts.join("$");
            return id = id.replace(/^_/, "") || defaultName || "ref", this.generateUid(id.slice(0, 20));
          }
          generateUidIdentifierBasedOnNode(node, defaultName) {
            return identifier(this.generateUidBasedOnNode(node, defaultName));
          }
          isStatic(node) {
            if (isThisExpression(node) || isSuper(node) || isTopicReference(node))
              return true;
            if (isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              return binding ? binding.constant : this.hasBinding(node.name);
            }
            return false;
          }
          maybeGenerateMemoised(node, dontPush) {
            if (this.isStatic(node))
              return null;
            {
              const id = this.generateUidIdentifierBasedOnNode(node);
              return dontPush ? id : (this.push({ id }), cloneNode(id));
            }
          }
          checkBlockScopedCollisions(local, kind, name, id) {
            if ("param" === kind)
              return;
            if ("local" === local.kind)
              return;
            if ("let" === kind || "let" === local.kind || "const" === local.kind || "module" === local.kind || "param" === local.kind && "const" === kind)
              throw this.hub.buildError(id, `Duplicate declaration "${name}"`, TypeError);
          }
          rename(oldName, newName, block) {
            const binding = this.getBinding(oldName);
            if (binding)
              return newName = newName || this.generateUidIdentifier(oldName).name, new _renamer.default(binding, oldName, newName).rename(block);
          }
          _renameFromMap(map, oldName, newName, value) {
            map[oldName] && (map[newName] = value, map[oldName] = null);
          }
          dump() {
            const sep = "-".repeat(60);
            console.log(sep);
            let scope = this;
            do {
              console.log("#", scope.block.type);
              for (const name of Object.keys(scope.bindings)) {
                const binding = scope.bindings[name];
                console.log(" -", name, { constant: binding.constant, references: binding.references, violations: binding.constantViolations.length, kind: binding.kind });
              }
            } while (scope = scope.parent);
            console.log(sep);
          }
          toArray(node, i, arrayLikeIsIterable) {
            if (isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              if (null != binding && binding.constant && binding.path.isGenericType("Array"))
                return node;
            }
            if (isArrayExpression(node))
              return node;
            if (isIdentifier(node, { name: "arguments" }))
              return callExpression(memberExpression(memberExpression(memberExpression(identifier("Array"), identifier("prototype")), identifier("slice")), identifier("call")), [node]);
            let helperName;
            const args = [node];
            return true === i ? helperName = "toConsumableArray" : i ? (args.push(numericLiteral(i)), helperName = "slicedToArray") : helperName = "toArray", arrayLikeIsIterable && (args.unshift(this.hub.addHelper(helperName)), helperName = "maybeArrayLike"), callExpression(this.hub.addHelper(helperName), args);
          }
          hasLabel(name) {
            return !!this.getLabel(name);
          }
          getLabel(name) {
            return this.labels.get(name);
          }
          registerLabel(path3) {
            this.labels.set(path3.node.label.name, path3);
          }
          registerDeclaration(path3) {
            if (path3.isLabeledStatement())
              this.registerLabel(path3);
            else if (path3.isFunctionDeclaration())
              this.registerBinding("hoisted", path3.get("id"), path3);
            else if (path3.isVariableDeclaration()) {
              const declarations = path3.get("declarations");
              for (const declar of declarations)
                this.registerBinding(path3.node.kind, declar);
            } else if (path3.isClassDeclaration()) {
              if (path3.node.declare)
                return;
              this.registerBinding("let", path3);
            } else if (path3.isImportDeclaration()) {
              const specifiers = path3.get("specifiers");
              for (const specifier of specifiers)
                this.registerBinding("module", specifier);
            } else if (path3.isExportDeclaration()) {
              const declar = path3.get("declaration");
              (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) && this.registerDeclaration(declar);
            } else
              this.registerBinding("unknown", path3);
          }
          buildUndefinedNode() {
            return unaryExpression("void", numericLiteral(0), true);
          }
          registerConstantViolation(path3) {
            const ids = path3.getBindingIdentifiers();
            for (const name of Object.keys(ids)) {
              const binding = this.getBinding(name);
              binding && binding.reassign(path3);
            }
          }
          registerBinding(kind, path3, bindingPath = path3) {
            if (!kind)
              throw new ReferenceError("no `kind`");
            if (path3.isVariableDeclaration()) {
              const declarators = path3.get("declarations");
              for (const declar of declarators)
                this.registerBinding(kind, declar);
              return;
            }
            const parent = this.getProgramParent(), ids = path3.getOuterBindingIdentifiers(true);
            for (const name of Object.keys(ids)) {
              parent.references[name] = true;
              for (const id of ids[name]) {
                const local = this.getOwnBinding(name);
                if (local) {
                  if (local.identifier === id)
                    continue;
                  this.checkBlockScopedCollisions(local, kind, name, id);
                }
                local ? this.registerConstantViolation(bindingPath) : this.bindings[name] = new _binding.default({ identifier: id, scope: this, path: bindingPath, kind });
              }
            }
          }
          addGlobal(node) {
            this.globals[node.name] = node;
          }
          hasUid(name) {
            let scope = this;
            do {
              if (scope.uids[name])
                return true;
            } while (scope = scope.parent);
            return false;
          }
          hasGlobal(name) {
            let scope = this;
            do {
              if (scope.globals[name])
                return true;
            } while (scope = scope.parent);
            return false;
          }
          hasReference(name) {
            return !!this.getProgramParent().references[name];
          }
          isPure(node, constantsOnly) {
            if (isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              return !!binding && (!constantsOnly || binding.constant);
            }
            if (isThisExpression(node) || isMetaProperty(node) || isTopicReference(node) || isPrivateName(node))
              return true;
            var _node$decorators, _node$decorators2, _node$decorators3;
            if (isClass(node))
              return !(node.superClass && !this.isPure(node.superClass, constantsOnly)) && (!((null == (_node$decorators = node.decorators) ? void 0 : _node$decorators.length) > 0) && this.isPure(node.body, constantsOnly));
            if (isClassBody(node)) {
              for (const method of node.body)
                if (!this.isPure(method, constantsOnly))
                  return false;
              return true;
            }
            if (isBinary(node))
              return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
            if (isArrayExpression(node) || isTupleExpression(node)) {
              for (const elem of node.elements)
                if (null !== elem && !this.isPure(elem, constantsOnly))
                  return false;
              return true;
            }
            if (isObjectExpression(node) || isRecordExpression(node)) {
              for (const prop of node.properties)
                if (!this.isPure(prop, constantsOnly))
                  return false;
              return true;
            }
            if (isMethod(node))
              return !(node.computed && !this.isPure(node.key, constantsOnly)) && !((null == (_node$decorators2 = node.decorators) ? void 0 : _node$decorators2.length) > 0);
            if (isProperty(node))
              return !(node.computed && !this.isPure(node.key, constantsOnly)) && (!((null == (_node$decorators3 = node.decorators) ? void 0 : _node$decorators3.length) > 0) && !((isObjectProperty(node) || node.static) && null !== node.value && !this.isPure(node.value, constantsOnly)));
            if (isUnaryExpression(node))
              return this.isPure(node.argument, constantsOnly);
            if (isTaggedTemplateExpression(node))
              return matchesPattern(node.tag, "String.raw") && !this.hasBinding("String", true) && this.isPure(node.quasi, constantsOnly);
            if (isTemplateLiteral(node)) {
              for (const expression of node.expressions)
                if (!this.isPure(expression, constantsOnly))
                  return false;
              return true;
            }
            return isPureish(node);
          }
          setData(key, val) {
            return this.data[key] = val;
          }
          getData(key) {
            let scope = this;
            do {
              const data2 = scope.data[key];
              if (null != data2)
                return data2;
            } while (scope = scope.parent);
          }
          removeData(key) {
            let scope = this;
            do {
              null != scope.data[key] && (scope.data[key] = null);
            } while (scope = scope.parent);
          }
          init() {
            this.inited || (this.inited = true, this.crawl());
          }
          crawl() {
            const path3 = this.path;
            this.references = /* @__PURE__ */ Object.create(null), this.bindings = /* @__PURE__ */ Object.create(null), this.globals = /* @__PURE__ */ Object.create(null), this.uids = /* @__PURE__ */ Object.create(null), this.data = /* @__PURE__ */ Object.create(null);
            const programParent = this.getProgramParent();
            if (programParent.crawling)
              return;
            const state = { references: [], constantViolations: [], assignments: [] };
            if (this.crawling = true, "Program" !== path3.type && collectorVisitor._exploded) {
              for (const visit of collectorVisitor.enter)
                visit(path3, state);
              const typeVisitors = collectorVisitor[path3.type];
              if (typeVisitors)
                for (const visit of typeVisitors.enter)
                  visit(path3, state);
            }
            path3.traverse(collectorVisitor, state), this.crawling = false;
            for (const path4 of state.assignments) {
              const ids = path4.getBindingIdentifiers();
              for (const name of Object.keys(ids))
                path4.scope.getBinding(name) || programParent.addGlobal(ids[name]);
              path4.scope.registerConstantViolation(path4);
            }
            for (const ref2 of state.references) {
              const binding = ref2.scope.getBinding(ref2.node.name);
              binding ? binding.reference(ref2) : programParent.addGlobal(ref2.node);
            }
            for (const path4 of state.constantViolations)
              path4.scope.registerConstantViolation(path4);
          }
          push(opts) {
            let path3 = this.path;
            path3.isPattern() ? path3 = this.getPatternParent().path : path3.isBlockStatement() || path3.isProgram() || (path3 = this.getBlockParent().path), path3.isSwitchStatement() && (path3 = (this.getFunctionParent() || this.getProgramParent()).path), (path3.isLoop() || path3.isCatchClause() || path3.isFunction()) && (path3.ensureBlock(), path3 = path3.get("body"));
            const unique2 = opts.unique, kind = opts.kind || "var", blockHoist = null == opts._blockHoist ? 2 : opts._blockHoist, dataKey = `declaration:${kind}:${blockHoist}`;
            let declarPath = !unique2 && path3.getData(dataKey);
            if (!declarPath) {
              const declar = variableDeclaration(kind, []);
              declar._blockHoist = blockHoist, [declarPath] = path3.unshiftContainer("body", [declar]), unique2 || path3.setData(dataKey, declarPath);
            }
            const declarator = variableDeclarator(opts.id, opts.init), len = declarPath.node.declarations.push(declarator);
            path3.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);
          }
          getProgramParent() {
            let scope = this;
            do {
              if (scope.path.isProgram())
                return scope;
            } while (scope = scope.parent);
            throw new Error("Couldn't find a Program");
          }
          getFunctionParent() {
            let scope = this;
            do {
              if (scope.path.isFunctionParent())
                return scope;
            } while (scope = scope.parent);
            return null;
          }
          getBlockParent() {
            let scope = this;
            do {
              if (scope.path.isBlockParent())
                return scope;
            } while (scope = scope.parent);
            throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
          }
          getPatternParent() {
            let scope = this;
            do {
              if (!scope.path.isPattern())
                return scope.getBlockParent();
            } while (scope = scope.parent.parent);
            throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
          }
          getAllBindings() {
            const ids = /* @__PURE__ */ Object.create(null);
            let scope = this;
            do {
              for (const key of Object.keys(scope.bindings))
                key in ids == false && (ids[key] = scope.bindings[key]);
              scope = scope.parent;
            } while (scope);
            return ids;
          }
          getAllBindingsOfKind(...kinds) {
            const ids = /* @__PURE__ */ Object.create(null);
            for (const kind of kinds) {
              let scope = this;
              do {
                for (const name of Object.keys(scope.bindings)) {
                  const binding = scope.bindings[name];
                  binding.kind === kind && (ids[name] = binding);
                }
                scope = scope.parent;
              } while (scope);
            }
            return ids;
          }
          bindingIdentifierEquals(name, node) {
            return this.getBindingIdentifier(name) === node;
          }
          getBinding(name) {
            let previousPath, scope = this;
            do {
              const binding = scope.getOwnBinding(name);
              var _previousPath;
              if (binding) {
                if (null == (_previousPath = previousPath) || !_previousPath.isPattern() || "param" === binding.kind || "local" === binding.kind)
                  return binding;
              } else if (!binding && "arguments" === name && scope.path.isFunction() && !scope.path.isArrowFunctionExpression())
                break;
              previousPath = scope.path;
            } while (scope = scope.parent);
          }
          getOwnBinding(name) {
            return this.bindings[name];
          }
          getBindingIdentifier(name) {
            var _this$getBinding;
            return null == (_this$getBinding = this.getBinding(name)) ? void 0 : _this$getBinding.identifier;
          }
          getOwnBindingIdentifier(name) {
            const binding = this.bindings[name];
            return null == binding ? void 0 : binding.identifier;
          }
          hasOwnBinding(name) {
            return !!this.getOwnBinding(name);
          }
          hasBinding(name, noGlobals) {
            return !!name && (!!this.hasOwnBinding(name) || (!!this.parentHasBinding(name, noGlobals) || (!!this.hasUid(name) || (!(noGlobals || !Scope3.globals.includes(name)) || !(noGlobals || !Scope3.contextVariables.includes(name))))));
          }
          parentHasBinding(name, noGlobals) {
            var _this$parent;
            return null == (_this$parent = this.parent) ? void 0 : _this$parent.hasBinding(name, noGlobals);
          }
          moveBindingTo(name, scope) {
            const info = this.getBinding(name);
            info && (info.scope.removeOwnBinding(name), info.scope = scope, scope.bindings[name] = info);
          }
          removeOwnBinding(name) {
            delete this.bindings[name];
          }
          removeBinding(name) {
            var _this$getBinding2;
            null == (_this$getBinding2 = this.getBinding(name)) || _this$getBinding2.scope.removeOwnBinding(name);
            let scope = this;
            do {
              scope.uids[name] && (scope.uids[name] = false);
            } while (scope = scope.parent);
          }
        }
        exports2.default = Scope3, Scope3.globals = Object.keys(_globals.builtin), Scope3.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/scope/lib/renamer.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperSplitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js"), t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js");
        const renameVisitor = { ReferencedIdentifier({ node }, state) {
          node.name === state.oldName && (node.name = state.newName);
        }, Scope(path3, state) {
          path3.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier) || (path3.skip(), path3.isMethod() && (0, _helperEnvironmentVisitor.requeueComputedKeyAndDecorators)(path3));
        }, "AssignmentExpression|Declaration|VariableDeclarator"(path3, state) {
          if (path3.isVariableDeclaration())
            return;
          const ids = path3.getOuterBindingIdentifiers();
          for (const name in ids)
            name === state.oldName && (ids[name].name = state.newName);
        } };
        exports2.default = class {
          constructor(binding, oldName, newName) {
            this.newName = newName, this.oldName = oldName, this.binding = binding;
          }
          maybeConvertFromExportDeclaration(parentDeclar) {
            const maybeExportDeclar = parentDeclar.parentPath;
            if (maybeExportDeclar.isExportDeclaration()) {
              if (maybeExportDeclar.isExportDefaultDeclaration()) {
                const { declaration } = maybeExportDeclar.node;
                if (t.isDeclaration(declaration) && !declaration.id)
                  return;
              }
              maybeExportDeclar.isExportAllDeclaration() || (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);
            }
          }
          maybeConvertFromClassFunctionDeclaration(path3) {
            return path3;
          }
          maybeConvertFromClassFunctionExpression(path3) {
            return path3;
          }
          rename(block) {
            const { binding, oldName, newName } = this, { scope, path: path3 } = binding, parentDeclar = path3.find((path4) => path4.isDeclaration() || path4.isFunctionExpression() || path4.isClassExpression());
            if (parentDeclar) {
              parentDeclar.getOuterBindingIdentifiers()[oldName] === binding.identifier && this.maybeConvertFromExportDeclaration(parentDeclar);
            }
            const blockToTraverse = block || scope.block;
            "SwitchStatement" === (null == blockToTraverse ? void 0 : blockToTraverse.type) ? blockToTraverse.cases.forEach((c) => {
              scope.traverse(c, renameVisitor, this);
            }) : scope.traverse(blockToTraverse, renameVisitor, this), block || (scope.removeOwnBinding(oldName), scope.bindings[newName] = binding, this.binding.identifier.name = newName), parentDeclar && (this.maybeConvertFromClassFunctionDeclaration(path3), this.maybeConvertFromClassFunctionExpression(path3));
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/traverse-node.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.traverseNode = function(node, opts, scope, state, path3, skipKeys) {
          const keys = VISITOR_KEYS[node.type];
          if (!keys)
            return false;
          const context = new _context.default(scope, opts, state, path3);
          for (const key of keys)
            if ((!skipKeys || !skipKeys[key]) && context.visit(node, key))
              return true;
          return false;
        };
        var _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/context.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/visitors.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.explode = explode, exports2.merge = function(visitors, states = [], wrapper) {
          const rootVisitor = {};
          for (let i = 0; i < visitors.length; i++) {
            const visitor = visitors[i], state = states[i];
            explode(visitor);
            for (const type of Object.keys(visitor)) {
              let visitorType = visitor[type];
              (state || wrapper) && (visitorType = wrapWithStateOrWrapper(visitorType, state, wrapper));
              mergePair(rootVisitor[type] || (rootVisitor[type] = {}), visitorType);
            }
          }
          return rootVisitor;
        }, exports2.verify = verify;
        var virtualTypes = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.0/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { DEPRECATED_KEYS, FLIPPED_ALIAS_KEYS, TYPES } = _t;
        function explode(visitor) {
          if (visitor._exploded)
            return visitor;
          visitor._exploded = true;
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType))
              continue;
            const parts = nodeType.split("|");
            if (1 === parts.length)
              continue;
            const fns = visitor[nodeType];
            delete visitor[nodeType];
            for (const part of parts)
              visitor[part] = fns;
          }
          verify(visitor), delete visitor.__esModule, function(obj) {
            for (const key of Object.keys(obj)) {
              if (shouldIgnoreKey(key))
                continue;
              const fns = obj[key];
              "function" == typeof fns && (obj[key] = { enter: fns });
            }
          }(visitor), ensureCallbackArrays(visitor);
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType))
              continue;
            if (!(nodeType in virtualTypes))
              continue;
            const fns = visitor[nodeType];
            for (const type of Object.keys(fns))
              fns[type] = wrapCheck(nodeType, fns[type]);
            delete visitor[nodeType];
            const types2 = virtualTypes[nodeType];
            if (null !== types2)
              for (const type of types2)
                visitor[type] ? mergePair(visitor[type], fns) : visitor[type] = fns;
            else
              mergePair(visitor, fns);
          }
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType))
              continue;
            const fns = visitor[nodeType];
            let aliases = FLIPPED_ALIAS_KEYS[nodeType];
            const deprecatedKey = DEPRECATED_KEYS[nodeType];
            if (deprecatedKey && (console.trace(`Visitor defined for ${nodeType} but it has been renamed to ${deprecatedKey}`), aliases = [deprecatedKey]), aliases) {
              delete visitor[nodeType];
              for (const alias of aliases) {
                const existing = visitor[alias];
                existing ? mergePair(existing, fns) : visitor[alias] = Object.assign({}, fns);
              }
            }
          }
          for (const nodeType of Object.keys(visitor))
            shouldIgnoreKey(nodeType) || ensureCallbackArrays(visitor[nodeType]);
          return visitor;
        }
        function verify(visitor) {
          if (!visitor._verified) {
            if ("function" == typeof visitor)
              throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?");
            for (const nodeType of Object.keys(visitor)) {
              if ("enter" !== nodeType && "exit" !== nodeType || validateVisitorMethods(nodeType, visitor[nodeType]), shouldIgnoreKey(nodeType))
                continue;
              if (TYPES.indexOf(nodeType) < 0)
                throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type`);
              const visitors = visitor[nodeType];
              if ("object" == typeof visitors)
                for (const visitorKey of Object.keys(visitors)) {
                  if ("enter" !== visitorKey && "exit" !== visitorKey)
                    throw new Error(`You passed \`traverse()\` a visitor object with the property ${nodeType} that has the invalid property ${visitorKey}`);
                  validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors[visitorKey]);
                }
            }
            visitor._verified = true;
          }
        }
        function validateVisitorMethods(path3, val) {
          const fns = [].concat(val);
          for (const fn of fns)
            if ("function" != typeof fn)
              throw new TypeError(`Non-function found defined in ${path3} with type ${typeof fn}`);
        }
        function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
          const newVisitor = {};
          for (const key of Object.keys(oldVisitor)) {
            let fns = oldVisitor[key];
            Array.isArray(fns) && (fns = fns.map(function(fn) {
              let newFn = fn;
              return state && (newFn = function(path3) {
                return fn.call(state, path3, state);
              }), wrapper && (newFn = wrapper(state.key, key, newFn)), newFn !== fn && (newFn.toString = () => fn.toString()), newFn;
            }), newVisitor[key] = fns);
          }
          return newVisitor;
        }
        function ensureCallbackArrays(obj) {
          obj.enter && !Array.isArray(obj.enter) && (obj.enter = [obj.enter]), obj.exit && !Array.isArray(obj.exit) && (obj.exit = [obj.exit]);
        }
        function wrapCheck(nodeType, fn) {
          const newFn = function(path3) {
            if (path3[`is${nodeType}`]())
              return fn.apply(this, arguments);
          };
          return newFn.toString = () => fn.toString(), newFn;
        }
        function shouldIgnoreKey(key) {
          return "_" === key[0] || ("enter" === key || "exit" === key || "shouldSkip" === key || ("denylist" === key || "noScope" === key || "skipKeys" === key || "blacklist" === key));
        }
        function mergePair(dest, src) {
          for (const key of Object.keys(src))
            dest[key] = [].concat(dest[key] || [], src[key]);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/cache.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.clear = function() {
          clearPath(), clearScope();
        }, exports2.clearPath = clearPath, exports2.clearScope = clearScope, exports2.scope = exports2.path = void 0;
        let path3 = /* @__PURE__ */ new WeakMap();
        exports2.path = path3;
        let scope = /* @__PURE__ */ new WeakMap();
        function clearPath() {
          exports2.path = path3 = /* @__PURE__ */ new WeakMap();
        }
        function clearScope() {
          exports2.scope = scope = /* @__PURE__ */ new WeakMap();
        }
        exports2.scope = scope;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/context.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _path = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
        exports2.default = class {
          constructor(scope, opts, state, parentPath) {
            this.queue = null, this.priorityQueue = null, this.parentPath = parentPath, this.scope = scope, this.state = state, this.opts = opts;
          }
          shouldVisit(node) {
            const opts = this.opts;
            if (opts.enter || opts.exit)
              return true;
            if (opts[node.type])
              return true;
            const keys = VISITOR_KEYS[node.type];
            if (null == keys || !keys.length)
              return false;
            for (const key of keys)
              if (node[key])
                return true;
            return false;
          }
          create(node, container, key, listKey) {
            return _path.default.get({ parentPath: this.parentPath, parent: node, container, key, listKey });
          }
          maybeQueue(path3, notPriority) {
            this.queue && (notPriority ? this.queue.push(path3) : this.priorityQueue.push(path3));
          }
          visitMultiple(container, parent, listKey) {
            if (0 === container.length)
              return false;
            const queue = [];
            for (let key = 0; key < container.length; key++) {
              const node = container[key];
              node && this.shouldVisit(node) && queue.push(this.create(parent, container, key, listKey));
            }
            return this.visitQueue(queue);
          }
          visitSingle(node, key) {
            return !!this.shouldVisit(node[key]) && this.visitQueue([this.create(node, node, key)]);
          }
          visitQueue(queue) {
            this.queue = queue, this.priorityQueue = [];
            const visited = /* @__PURE__ */ new WeakSet();
            let stop = false;
            for (const path3 of queue) {
              if (path3.resync(), 0 !== path3.contexts.length && path3.contexts[path3.contexts.length - 1] === this || path3.pushContext(this), null === path3.key)
                continue;
              const { node } = path3;
              if (!visited.has(node)) {
                if (node && visited.add(node), path3.visit()) {
                  stop = true;
                  break;
                }
                if (this.priorityQueue.length && (stop = this.visitQueue(this.priorityQueue), this.priorityQueue = [], this.queue = queue, stop))
                  break;
              }
            }
            for (const path3 of queue)
              path3.popContext();
            return this.queue = null, stop;
          }
          visit(node, key) {
            const nodes = node[key];
            return !!nodes && (Array.isArray(nodes) ? this.visitMultiple(nodes, node, key) : this.visitSingle(node, key));
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/hub.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        exports2.default = class {
          getCode() {
          }
          getScope() {
          }
          addHelper() {
            throw new Error("Helpers are not supported by the default hub.");
          }
          buildError(node, msg, Error2 = TypeError) {
            return new Error2(msg);
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "Hub", { enumerable: true, get: function() {
          return _hub.default;
        } }), Object.defineProperty(exports2, "NodePath", { enumerable: true, get: function() {
          return _path.default;
        } }), Object.defineProperty(exports2, "Scope", { enumerable: true, get: function() {
          return _scope.default;
        } }), exports2.visitors = exports2.default = void 0;
        var visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/visitors.js");
        exports2.visitors = visitors;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/cache.js"), _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/traverse-node.js"), _path = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/index.js"), _scope = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/scope/index.js"), _hub = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/hub.js");
        const { VISITOR_KEYS, removeProperties, traverseFast } = _t;
        function traverse(parent, opts = {}, scope, state, parentPath) {
          if (parent) {
            if (!opts.noScope && !scope && "Program" !== parent.type && "File" !== parent.type)
              throw new Error(`You must pass a scope and parentPath unless traversing a Program/File. Instead of that you tried to traverse a ${parent.type} node without passing scope and parentPath.`);
            VISITOR_KEYS[parent.type] && (visitors.explode(opts), (0, _traverseNode.traverseNode)(parent, opts, scope, state, parentPath));
          }
        }
        var _default = traverse;
        function hasDenylistedType(path3, state) {
          path3.node.type === state.type && (state.has = true, path3.stop());
        }
        exports2.default = _default, traverse.visitors = visitors, traverse.verify = visitors.verify, traverse.explode = visitors.explode, traverse.cheap = function(node, enter) {
          return traverseFast(node, enter);
        }, traverse.node = function(node, opts, scope, state, path3, skipKeys) {
          (0, _traverseNode.traverseNode)(node, opts, scope, state, path3, skipKeys);
        }, traverse.clearNode = function(node, opts) {
          removeProperties(node, opts), cache.path.delete(node);
        }, traverse.removeProperties = function(tree, opts) {
          return traverseFast(tree, traverse.clearNode, opts), tree;
        }, traverse.hasType = function(tree, type, denylistTypes) {
          if (null != denylistTypes && denylistTypes.includes(tree.type))
            return false;
          if (tree.type === type)
            return true;
          const state = { has: false, type };
          return traverse(tree, { noScope: true, denylist: denylistTypes, enter: hasDenylistedType }, null, state), state.has;
        }, traverse.cache = cache;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/ancestry.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.find = function(callback) {
          let path3 = this;
          do {
            if (callback(path3))
              return path3;
          } while (path3 = path3.parentPath);
          return null;
        }, exports2.findParent = function(callback) {
          let path3 = this;
          for (; path3 = path3.parentPath; )
            if (callback(path3))
              return path3;
          return null;
        }, exports2.getAncestry = function() {
          let path3 = this;
          const paths = [];
          do {
            paths.push(path3);
          } while (path3 = path3.parentPath);
          return paths;
        }, exports2.getDeepestCommonAncestorFrom = function(paths, filter) {
          if (!paths.length)
            return this;
          if (1 === paths.length)
            return paths[0];
          let lastCommonIndex, lastCommon, minDepth = 1 / 0;
          const ancestries = paths.map((path3) => {
            const ancestry = [];
            do {
              ancestry.unshift(path3);
            } while ((path3 = path3.parentPath) && path3 !== this);
            return ancestry.length < minDepth && (minDepth = ancestry.length), ancestry;
          }), first = ancestries[0];
          depthLoop:
            for (let i = 0; i < minDepth; i++) {
              const shouldMatch = first[i];
              for (const ancestry of ancestries)
                if (ancestry[i] !== shouldMatch)
                  break depthLoop;
              lastCommonIndex = i, lastCommon = shouldMatch;
            }
          if (lastCommon)
            return filter ? filter(lastCommon, lastCommonIndex, ancestries) : lastCommon;
          throw new Error("Couldn't find intersection");
        }, exports2.getEarliestCommonAncestorFrom = function(paths) {
          return this.getDeepestCommonAncestorFrom(paths, function(deepest, i, ancestries) {
            let earliest;
            const keys = VISITOR_KEYS[deepest.type];
            for (const ancestry of ancestries) {
              const path3 = ancestry[i + 1];
              if (!earliest) {
                earliest = path3;
                continue;
              }
              if (path3.listKey && earliest.listKey === path3.listKey && path3.key < earliest.key) {
                earliest = path3;
                continue;
              }
              keys.indexOf(earliest.parentKey) > keys.indexOf(path3.parentKey) && (earliest = path3);
            }
            return earliest;
          });
        }, exports2.getFunctionParent = function() {
          return this.findParent((p) => p.isFunction());
        }, exports2.getStatementParent = function() {
          let path3 = this;
          do {
            if (!path3.parentPath || Array.isArray(path3.container) && path3.isStatement())
              break;
            path3 = path3.parentPath;
          } while (path3);
          if (path3 && (path3.isProgram() || path3.isFile()))
            throw new Error("File/Program node, we can't possibly find a statement parent to this");
          return path3;
        }, exports2.inType = function(...candidateTypes) {
          let path3 = this;
          for (; path3; ) {
            for (const type of candidateTypes)
              if (path3.node.type === type)
                return true;
            path3 = path3.parentPath;
          }
          return false;
        }, exports2.isAncestor = function(maybeDescendant) {
          return maybeDescendant.isDescendant(this);
        }, exports2.isDescendant = function(maybeAncestor) {
          return !!this.findParent((parent) => parent === maybeAncestor);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/comments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.addComment = function(type, content, line) {
          _addComment(this.node, type, content, line);
        }, exports2.addComments = function(type, comments) {
          _addComments(this.node, type, comments);
        }, exports2.shareCommentsWithSiblings = function() {
          if ("string" == typeof this.key)
            return;
          const node = this.node;
          if (!node)
            return;
          const trailing = node.trailingComments, leading = node.leadingComments;
          if (!trailing && !leading)
            return;
          const prev = this.getSibling(this.key - 1), next = this.getSibling(this.key + 1), hasPrev = Boolean(prev.node), hasNext = Boolean(next.node);
          hasPrev && !hasNext ? prev.addComments("trailing", trailing) : hasNext && !hasPrev && next.addComments("leading", leading);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { addComment: _addComment, addComments: _addComments } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/context.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._call = function(fns) {
          if (!fns)
            return false;
          for (const fn of fns) {
            if (!fn)
              continue;
            const node = this.node;
            if (!node)
              return true;
            const ret = fn.call(this.state, this, this.state);
            if (ret && "object" == typeof ret && "function" == typeof ret.then)
              throw new Error("You appear to be using a plugin with an async traversal visitor, which your current version of Babel does not support. If you're using a published plugin, you may need to upgrade your @babel/core version.");
            if (ret)
              throw new Error(`Unexpected return value from visitor method ${fn}`);
            if (this.node !== node)
              return true;
            if (this._traverseFlags > 0)
              return true;
          }
          return false;
        }, exports2._getQueueContexts = function() {
          let path3 = this, contexts = this.contexts;
          for (; !contexts.length && (path3 = path3.parentPath, path3); )
            contexts = path3.contexts;
          return contexts;
        }, exports2._resyncKey = function() {
          if (!this.container)
            return;
          if (this.node === this.container[this.key])
            return;
          if (Array.isArray(this.container)) {
            for (let i = 0; i < this.container.length; i++)
              if (this.container[i] === this.node)
                return this.setKey(i);
          } else
            for (const key of Object.keys(this.container))
              if (this.container[key] === this.node)
                return this.setKey(key);
          this.key = null;
        }, exports2._resyncList = function() {
          if (!this.parent || !this.inList)
            return;
          const newContainer = this.parent[this.listKey];
          if (this.container === newContainer)
            return;
          this.container = newContainer || null;
        }, exports2._resyncParent = function() {
          this.parentPath && (this.parent = this.parentPath.node);
        }, exports2._resyncRemoved = function() {
          null != this.key && this.container && this.container[this.key] === this.node || this._markRemoved();
        }, exports2.call = function(key) {
          const opts = this.opts;
          if (this.debug(key), this.node && this._call(opts[key]))
            return true;
          if (this.node)
            return this._call(opts[this.node.type] && opts[this.node.type][key]);
          return false;
        }, exports2.isBlacklisted = exports2.isDenylisted = function() {
          var _this$opts$denylist;
          const denylist = null != (_this$opts$denylist = this.opts.denylist) ? _this$opts$denylist : this.opts.blacklist;
          return denylist && denylist.indexOf(this.node.type) > -1;
        }, exports2.popContext = function() {
          this.contexts.pop(), this.contexts.length > 0 ? this.setContext(this.contexts[this.contexts.length - 1]) : this.setContext(void 0);
        }, exports2.pushContext = function(context) {
          this.contexts.push(context), this.setContext(context);
        }, exports2.requeue = function(pathToQueue = this) {
          if (pathToQueue.removed)
            return;
          const contexts = this.contexts;
          for (const context of contexts)
            context.maybeQueue(pathToQueue);
        }, exports2.resync = function() {
          if (this.removed)
            return;
          this._resyncParent(), this._resyncList(), this._resyncKey();
        }, exports2.setContext = function(context) {
          null != this.skipKeys && (this.skipKeys = {});
          this._traverseFlags = 0, context && (this.context = context, this.state = context.state, this.opts = context.opts);
          return this.setScope(), this;
        }, exports2.setKey = function(key) {
          var _this$node;
          this.key = key, this.node = this.container[this.key], this.type = null == (_this$node = this.node) ? void 0 : _this$node.type;
        }, exports2.setScope = function() {
          if (this.opts && this.opts.noScope)
            return;
          let target, path3 = this.parentPath;
          "key" !== this.key && "decorators" !== this.listKey || !path3.isMethod() || (path3 = path3.parentPath);
          for (; path3 && !target; ) {
            if (path3.opts && path3.opts.noScope)
              return;
            target = path3.scope, path3 = path3.parentPath;
          }
          this.scope = this.getScope(target), this.scope && this.scope.init();
        }, exports2.setup = function(parentPath, container, listKey, key) {
          this.listKey = listKey, this.container = container, this.parentPath = parentPath || this.parentPath, this.setKey(key);
        }, exports2.skip = function() {
          this.shouldSkip = true;
        }, exports2.skipKey = function(key) {
          null == this.skipKeys && (this.skipKeys = {});
          this.skipKeys[key] = true;
        }, exports2.stop = function() {
          this._traverseFlags |= _index.SHOULD_SKIP | _index.SHOULD_STOP;
        }, exports2.visit = function() {
          if (!this.node)
            return false;
          if (this.isDenylisted())
            return false;
          if (this.opts.shouldSkip && this.opts.shouldSkip(this))
            return false;
          const currentContext = this.context;
          if (this.shouldSkip || this.call("enter"))
            return this.debug("Skip..."), this.shouldStop;
          return restoreContext(this, currentContext), this.debug("Recursing into..."), this.shouldStop = (0, _traverseNode.traverseNode)(this.node, this.opts, this.scope, this.state, this, this.skipKeys), restoreContext(this, currentContext), this.call("exit"), this.shouldStop;
        };
        var _traverseNode = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/traverse-node.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/index.js");
        function restoreContext(path3, context) {
          path3.context !== context && (path3.context = context, path3.state = context.state, path3.opts = context.opts);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/conversion.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.arrowFunctionToExpression = function({ allowInsertArrow = true, specCompliant = false, noNewArrows = !specCompliant } = {}) {
          if (!this.isArrowFunctionExpression())
            throw this.buildCodeFrameError("Cannot convert non-arrow function to a function expression.");
          const { thisBinding, fnPath: fn } = hoistFunctionEnvironment(this, noNewArrows, allowInsertArrow);
          if (fn.ensureBlock(), function(path3, type) {
            path3.node.type = type;
          }(fn, "FunctionExpression"), !noNewArrows) {
            const checkBinding = thisBinding ? null : fn.scope.generateUidIdentifier("arrowCheckId");
            return checkBinding && fn.parentPath.scope.push({ id: checkBinding, init: objectExpression([]) }), fn.get("body").unshiftContainer("body", expressionStatement(callExpression(this.hub.addHelper("newArrowCheck"), [thisExpression(), identifier(checkBinding ? checkBinding.name : thisBinding)]))), fn.replaceWith(callExpression(memberExpression((0, _helperFunctionName.default)(this, true) || fn.node, identifier("bind")), [checkBinding ? identifier(checkBinding.name) : thisExpression()])), fn.get("callee.object");
          }
          return fn;
        }, exports2.arrowFunctionToShadowed = function() {
          if (!this.isArrowFunctionExpression())
            return;
          this.arrowFunctionToExpression();
        }, exports2.ensureBlock = function() {
          const body = this.get("body"), bodyNode = body.node;
          if (Array.isArray(body))
            throw new Error("Can't convert array path to a block statement");
          if (!bodyNode)
            throw new Error("Can't convert node without a body");
          if (body.isBlockStatement())
            return bodyNode;
          const statements = [];
          let key, listKey, stringPath = "body";
          body.isStatement() ? (listKey = "body", key = 0, statements.push(body.node)) : (stringPath += ".body.0", this.isFunction() ? (key = "argument", statements.push(returnStatement(body.node))) : (key = "expression", statements.push(expressionStatement(body.node))));
          this.node.body = blockStatement(statements);
          const parentPath = this.get(stringPath);
          return body.setup(parentPath, listKey ? parentPath.node[listKey] : parentPath.node, listKey, key), this.node;
        }, exports2.toComputedKey = function() {
          let key;
          if (this.isMemberExpression())
            key = this.node.property;
          else {
            if (!this.isProperty() && !this.isMethod())
              throw new ReferenceError("todo");
            key = this.node.key;
          }
          this.node.computed || isIdentifier(key) && (key = stringLiteral(key.name));
          return key;
        }, exports2.unwrapFunctionEnvironment = function() {
          if (!this.isArrowFunctionExpression() && !this.isFunctionExpression() && !this.isFunctionDeclaration())
            throw this.buildCodeFrameError("Can only unwrap the environment of a function.");
          hoistFunctionEnvironment(this);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js"), _helperFunctionName = __webpack_require__2("./node_modules/.pnpm/@babel+helper-function-name@7.19.0/node_modules/@babel/helper-function-name/lib/index.js"), _visitors = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/visitors.js");
        const { arrowFunctionExpression, assignmentExpression, binaryExpression, blockStatement, callExpression, conditionalExpression, expressionStatement, identifier, isIdentifier, jsxIdentifier, logicalExpression, LOGICAL_OPERATORS, memberExpression, metaProperty, numericLiteral, objectExpression, restElement, returnStatement, sequenceExpression, spreadElement, stringLiteral, super: _super, thisExpression, toExpression, unaryExpression } = _t;
        const getSuperCallsVisitor = (0, _visitors.merge)([{ CallExpression(child, { allSuperCalls }) {
          child.get("callee").isSuper() && allSuperCalls.push(child);
        } }, _helperEnvironmentVisitor.default]);
        function hoistFunctionEnvironment(fnPath, noNewArrows = true, allowInsertArrow = true) {
          let arrowParent, thisEnvFn = fnPath.findParent((p) => p.isArrowFunctionExpression() ? (null != arrowParent || (arrowParent = p), false) : p.isFunction() || p.isProgram() || p.isClassProperty({ static: false }) || p.isClassPrivateProperty({ static: false }));
          const inConstructor = thisEnvFn.isClassMethod({ kind: "constructor" });
          if (thisEnvFn.isClassProperty() || thisEnvFn.isClassPrivateProperty())
            if (arrowParent)
              thisEnvFn = arrowParent;
            else {
              if (!allowInsertArrow)
                throw fnPath.buildCodeFrameError("Unable to transform arrow inside class property");
              fnPath.replaceWith(callExpression(arrowFunctionExpression([], toExpression(fnPath.node)), [])), thisEnvFn = fnPath.get("callee"), fnPath = thisEnvFn.get("body");
            }
          const { thisPaths, argumentsPaths, newTargetPaths, superProps, superCalls } = function(fnPath2) {
            const thisPaths2 = [], argumentsPaths2 = [], newTargetPaths2 = [], superProps2 = [], superCalls2 = [];
            return fnPath2.traverse(getScopeInformationVisitor, { thisPaths: thisPaths2, argumentsPaths: argumentsPaths2, newTargetPaths: newTargetPaths2, superProps: superProps2, superCalls: superCalls2 }), { thisPaths: thisPaths2, argumentsPaths: argumentsPaths2, newTargetPaths: newTargetPaths2, superProps: superProps2, superCalls: superCalls2 };
          }(fnPath);
          if (inConstructor && superCalls.length > 0) {
            if (!allowInsertArrow)
              throw superCalls[0].buildCodeFrameError("Unable to handle nested super() usage in arrow");
            const allSuperCalls = [];
            thisEnvFn.traverse(getSuperCallsVisitor, { allSuperCalls });
            const superBinding = function(thisEnvFn2) {
              return getBinding(thisEnvFn2, "supercall", () => {
                const argsBinding = thisEnvFn2.scope.generateUidIdentifier("args");
                return arrowFunctionExpression([restElement(argsBinding)], callExpression(_super(), [spreadElement(identifier(argsBinding.name))]));
              });
            }(thisEnvFn);
            allSuperCalls.forEach((superCall) => {
              const callee = identifier(superBinding);
              callee.loc = superCall.node.callee.loc, superCall.get("callee").replaceWith(callee);
            });
          }
          if (argumentsPaths.length > 0) {
            const argumentsBinding = getBinding(thisEnvFn, "arguments", () => {
              const args = () => identifier("arguments");
              return thisEnvFn.scope.path.isProgram() ? conditionalExpression(binaryExpression("===", unaryExpression("typeof", args()), stringLiteral("undefined")), thisEnvFn.scope.buildUndefinedNode(), args()) : args();
            });
            argumentsPaths.forEach((argumentsChild) => {
              const argsRef = identifier(argumentsBinding);
              argsRef.loc = argumentsChild.node.loc, argumentsChild.replaceWith(argsRef);
            });
          }
          if (newTargetPaths.length > 0) {
            const newTargetBinding = getBinding(thisEnvFn, "newtarget", () => metaProperty(identifier("new"), identifier("target")));
            newTargetPaths.forEach((targetChild) => {
              const targetRef = identifier(newTargetBinding);
              targetRef.loc = targetChild.node.loc, targetChild.replaceWith(targetRef);
            });
          }
          if (superProps.length > 0) {
            if (!allowInsertArrow)
              throw superProps[0].buildCodeFrameError("Unable to handle nested super.prop usage");
            superProps.reduce((acc, superProp) => acc.concat(function(superProp2) {
              if (superProp2.parentPath.isAssignmentExpression() && "=" !== superProp2.parentPath.node.operator) {
                const assignmentPath = superProp2.parentPath, op = assignmentPath.node.operator.slice(0, -1), value = assignmentPath.node.right, isLogicalAssignment = function(op2) {
                  return LOGICAL_OPERATORS.includes(op2);
                }(op);
                if (superProp2.node.computed) {
                  const tmp = superProp2.scope.generateDeclaredUidIdentifier("tmp"), object = superProp2.node.object, property = superProp2.node.property;
                  assignmentPath.get("left").replaceWith(memberExpression(object, assignmentExpression("=", tmp, property), true)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(tmp.name), true), value));
                } else {
                  const object = superProp2.node.object, property = superProp2.node.property;
                  assignmentPath.get("left").replaceWith(memberExpression(object, property)), assignmentPath.get("right").replaceWith(rightExpression(isLogicalAssignment ? "=" : op, memberExpression(object, identifier(property.name)), value));
                }
                return isLogicalAssignment ? assignmentPath.replaceWith(logicalExpression(op, assignmentPath.node.left, assignmentPath.node.right)) : assignmentPath.node.operator = "=", [assignmentPath.get("left"), assignmentPath.get("right").get("left")];
              }
              if (superProp2.parentPath.isUpdateExpression()) {
                const updateExpr = superProp2.parentPath, tmp = superProp2.scope.generateDeclaredUidIdentifier("tmp"), computedKey = superProp2.node.computed ? superProp2.scope.generateDeclaredUidIdentifier("prop") : null, parts = [assignmentExpression("=", tmp, memberExpression(superProp2.node.object, computedKey ? assignmentExpression("=", computedKey, superProp2.node.property) : superProp2.node.property, superProp2.node.computed)), assignmentExpression("=", memberExpression(superProp2.node.object, computedKey ? identifier(computedKey.name) : superProp2.node.property, superProp2.node.computed), binaryExpression(superProp2.parentPath.node.operator[0], identifier(tmp.name), numericLiteral(1)))];
                superProp2.parentPath.node.prefix || parts.push(identifier(tmp.name)), updateExpr.replaceWith(sequenceExpression(parts));
                return [updateExpr.get("expressions.0.right"), updateExpr.get("expressions.1.left")];
              }
              return [superProp2];
              function rightExpression(op, left, right) {
                return "=" === op ? assignmentExpression("=", left, right) : binaryExpression(op, left, right);
              }
            }(superProp)), []).forEach((superProp) => {
              const key = superProp.node.computed ? "" : superProp.get("property").node.name, superParentPath = superProp.parentPath, isAssignment = superParentPath.isAssignmentExpression({ left: superProp.node }), isCall = superParentPath.isCallExpression({ callee: superProp.node }), superBinding = function(thisEnvFn2, isAssignment2, propName) {
                return getBinding(thisEnvFn2, `superprop_${isAssignment2 ? "set" : "get"}:${propName || ""}`, () => {
                  const argsList = [];
                  let fnBody;
                  if (propName)
                    fnBody = memberExpression(_super(), identifier(propName));
                  else {
                    const method = thisEnvFn2.scope.generateUidIdentifier("prop");
                    argsList.unshift(method), fnBody = memberExpression(_super(), identifier(method.name), true);
                  }
                  if (isAssignment2) {
                    const valueIdent = thisEnvFn2.scope.generateUidIdentifier("value");
                    argsList.push(valueIdent), fnBody = assignmentExpression("=", fnBody, identifier(valueIdent.name));
                  }
                  return arrowFunctionExpression(argsList, fnBody);
                });
              }(thisEnvFn, isAssignment, key), args = [];
              if (superProp.node.computed && args.push(superProp.get("property").node), isAssignment) {
                const value = superParentPath.node.right;
                args.push(value);
              }
              const call = callExpression(identifier(superBinding), args);
              isCall ? (superParentPath.unshiftContainer("arguments", thisExpression()), superProp.replaceWith(memberExpression(call, identifier("call"))), thisPaths.push(superParentPath.get("arguments.0"))) : isAssignment ? superParentPath.replaceWith(call) : superProp.replaceWith(call);
            });
          }
          let thisBinding;
          return (thisPaths.length > 0 || !noNewArrows) && (thisBinding = function(thisEnvFn2, inConstructor2) {
            return getBinding(thisEnvFn2, "this", (thisBinding2) => {
              if (!inConstructor2 || !hasSuperClass(thisEnvFn2))
                return thisExpression();
              thisEnvFn2.traverse(assignSuperThisVisitor, { supers: /* @__PURE__ */ new WeakSet(), thisBinding: thisBinding2 });
            });
          }(thisEnvFn, inConstructor), (noNewArrows || inConstructor && hasSuperClass(thisEnvFn)) && (thisPaths.forEach((thisChild) => {
            const thisRef = thisChild.isJSX() ? jsxIdentifier(thisBinding) : identifier(thisBinding);
            thisRef.loc = thisChild.node.loc, thisChild.replaceWith(thisRef);
          }), noNewArrows || (thisBinding = null))), { thisBinding, fnPath };
        }
        function hasSuperClass(thisEnvFn) {
          return thisEnvFn.isClassMethod() && !!thisEnvFn.parentPath.parentPath.node.superClass;
        }
        const assignSuperThisVisitor = (0, _visitors.merge)([{ CallExpression(child, { supers, thisBinding }) {
          child.get("callee").isSuper() && (supers.has(child.node) || (supers.add(child.node), child.replaceWithMultiple([child.node, assignmentExpression("=", identifier(thisBinding), identifier("this"))])));
        } }, _helperEnvironmentVisitor.default]);
        function getBinding(thisEnvFn, key, init) {
          const cacheKey = "binding:" + key;
          let data2 = thisEnvFn.getData(cacheKey);
          if (!data2) {
            const id = thisEnvFn.scope.generateUidIdentifier(key);
            data2 = id.name, thisEnvFn.setData(cacheKey, data2), thisEnvFn.scope.push({ id, init: init(data2) });
          }
          return data2;
        }
        const getScopeInformationVisitor = (0, _visitors.merge)([{ ThisExpression(child, { thisPaths }) {
          thisPaths.push(child);
        }, JSXIdentifier(child, { thisPaths }) {
          "this" === child.node.name && (child.parentPath.isJSXMemberExpression({ object: child.node }) || child.parentPath.isJSXOpeningElement({ name: child.node })) && thisPaths.push(child);
        }, CallExpression(child, { superCalls }) {
          child.get("callee").isSuper() && superCalls.push(child);
        }, MemberExpression(child, { superProps }) {
          child.get("object").isSuper() && superProps.push(child);
        }, Identifier(child, { argumentsPaths }) {
          if (!child.isReferencedIdentifier({ name: "arguments" }))
            return;
          let curr = child.scope;
          do {
            if (curr.hasOwnBinding("arguments"))
              return void curr.rename("arguments");
            if (curr.path.isFunction() && !curr.path.isArrowFunctionExpression())
              break;
          } while (curr = curr.parent);
          argumentsPaths.push(child);
        }, MetaProperty(child, { newTargetPaths }) {
          child.get("meta").isIdentifier({ name: "new" }) && child.get("property").isIdentifier({ name: "target" }) && newTargetPaths.push(child);
        } }, _helperEnvironmentVisitor.default]);
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/evaluation.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.evaluate = function() {
          const state = { confident: true, deoptPath: null, seen: /* @__PURE__ */ new Map() };
          let value = evaluateCached(this, state);
          state.confident || (value = void 0);
          return { confident: state.confident, deopt: state.deoptPath, value };
        }, exports2.evaluateTruthy = function() {
          const res = this.evaluate();
          if (res.confident)
            return !!res.value;
        };
        const VALID_CALLEES = ["String", "Number", "Math"], INVALID_METHODS = ["random"];
        function isValidCallee(val) {
          return VALID_CALLEES.includes(val);
        }
        function deopt(path3, state) {
          state.confident && (state.deoptPath = path3, state.confident = false);
        }
        function evaluateCached(path3, state) {
          const { node } = path3, { seen } = state;
          if (seen.has(node)) {
            const existing = seen.get(node);
            return existing.resolved ? existing.value : void deopt(path3, state);
          }
          {
            const item = { resolved: false };
            seen.set(node, item);
            const val = function(path4, state2) {
              if (!state2.confident)
                return;
              if (path4.isSequenceExpression()) {
                const exprs = path4.get("expressions");
                return evaluateCached(exprs[exprs.length - 1], state2);
              }
              if (path4.isStringLiteral() || path4.isNumericLiteral() || path4.isBooleanLiteral())
                return path4.node.value;
              if (path4.isNullLiteral())
                return null;
              if (path4.isTemplateLiteral())
                return evaluateQuasis(path4, path4.node.quasis, state2);
              if (path4.isTaggedTemplateExpression() && path4.get("tag").isMemberExpression()) {
                const object = path4.get("tag.object"), { node: { name } } = object, property = path4.get("tag.property");
                if (object.isIdentifier() && "String" === name && !path4.scope.getBinding(name) && property.isIdentifier() && "raw" === property.node.name)
                  return evaluateQuasis(path4, path4.node.quasi.quasis, state2, true);
              }
              if (path4.isConditionalExpression()) {
                const testResult = evaluateCached(path4.get("test"), state2);
                if (!state2.confident)
                  return;
                return evaluateCached(testResult ? path4.get("consequent") : path4.get("alternate"), state2);
              }
              if (path4.isExpressionWrapper())
                return evaluateCached(path4.get("expression"), state2);
              if (path4.isMemberExpression() && !path4.parentPath.isCallExpression({ callee: path4.node })) {
                const property = path4.get("property"), object = path4.get("object");
                if (object.isLiteral() && property.isIdentifier()) {
                  const value = object.node.value, type = typeof value;
                  if ("number" === type || "string" === type)
                    return value[property.node.name];
                }
              }
              if (path4.isReferencedIdentifier()) {
                const binding = path4.scope.getBinding(path4.node.name);
                if (binding && binding.constantViolations.length > 0)
                  return deopt(binding.path, state2);
                if (binding && path4.node.start < binding.path.node.end)
                  return deopt(binding.path, state2);
                if (null != binding && binding.hasValue)
                  return binding.value;
                {
                  if ("undefined" === path4.node.name)
                    return binding ? deopt(binding.path, state2) : void 0;
                  if ("Infinity" === path4.node.name)
                    return binding ? deopt(binding.path, state2) : 1 / 0;
                  if ("NaN" === path4.node.name)
                    return binding ? deopt(binding.path, state2) : NaN;
                  const resolved = path4.resolve();
                  return resolved === path4 ? deopt(path4, state2) : evaluateCached(resolved, state2);
                }
              }
              if (path4.isUnaryExpression({ prefix: true })) {
                if ("void" === path4.node.operator)
                  return;
                const argument = path4.get("argument");
                if ("typeof" === path4.node.operator && (argument.isFunction() || argument.isClass()))
                  return "function";
                const arg = evaluateCached(argument, state2);
                if (!state2.confident)
                  return;
                switch (path4.node.operator) {
                  case "!":
                    return !arg;
                  case "+":
                    return +arg;
                  case "-":
                    return -arg;
                  case "~":
                    return ~arg;
                  case "typeof":
                    return typeof arg;
                }
              }
              if (path4.isArrayExpression()) {
                const arr = [], elems = path4.get("elements");
                for (const elem of elems) {
                  const elemValue = elem.evaluate();
                  if (!elemValue.confident)
                    return deopt(elemValue.deopt, state2);
                  arr.push(elemValue.value);
                }
                return arr;
              }
              if (path4.isObjectExpression()) {
                const obj = {}, props = path4.get("properties");
                for (const prop of props) {
                  if (prop.isObjectMethod() || prop.isSpreadElement())
                    return deopt(prop, state2);
                  const keyPath = prop.get("key");
                  let key;
                  if (prop.node.computed) {
                    if (key = keyPath.evaluate(), !key.confident)
                      return deopt(key.deopt, state2);
                    key = key.value;
                  } else
                    key = keyPath.isIdentifier() ? keyPath.node.name : keyPath.node.value;
                  let value = prop.get("value").evaluate();
                  if (!value.confident)
                    return deopt(value.deopt, state2);
                  value = value.value, obj[key] = value;
                }
                return obj;
              }
              if (path4.isLogicalExpression()) {
                const wasConfident = state2.confident, left = evaluateCached(path4.get("left"), state2), leftConfident = state2.confident;
                state2.confident = wasConfident;
                const right = evaluateCached(path4.get("right"), state2), rightConfident = state2.confident;
                switch (path4.node.operator) {
                  case "||":
                    if (state2.confident = leftConfident && (!!left || rightConfident), !state2.confident)
                      return;
                    return left || right;
                  case "&&":
                    if (state2.confident = leftConfident && (!left || rightConfident), !state2.confident)
                      return;
                    return left && right;
                  case "??":
                    if (state2.confident = leftConfident && (null != left || rightConfident), !state2.confident)
                      return;
                    return null != left ? left : right;
                }
              }
              if (path4.isBinaryExpression()) {
                const left = evaluateCached(path4.get("left"), state2);
                if (!state2.confident)
                  return;
                const right = evaluateCached(path4.get("right"), state2);
                if (!state2.confident)
                  return;
                switch (path4.node.operator) {
                  case "-":
                    return left - right;
                  case "+":
                    return left + right;
                  case "/":
                    return left / right;
                  case "*":
                    return left * right;
                  case "%":
                    return left % right;
                  case "**":
                    return Math.pow(left, right);
                  case "<":
                    return left < right;
                  case ">":
                    return left > right;
                  case "<=":
                    return left <= right;
                  case ">=":
                    return left >= right;
                  case "==":
                    return left == right;
                  case "!=":
                    return left != right;
                  case "===":
                    return left === right;
                  case "!==":
                    return left !== right;
                  case "|":
                    return left | right;
                  case "&":
                    return left & right;
                  case "^":
                    return left ^ right;
                  case "<<":
                    return left << right;
                  case ">>":
                    return left >> right;
                  case ">>>":
                    return left >>> right;
                }
              }
              if (path4.isCallExpression()) {
                const callee = path4.get("callee");
                let context, func;
                if (callee.isIdentifier() && !path4.scope.getBinding(callee.node.name) && isValidCallee(callee.node.name) && (func = global[callee.node.name]), callee.isMemberExpression()) {
                  const object = callee.get("object"), property = callee.get("property");
                  if (object.isIdentifier() && property.isIdentifier() && isValidCallee(object.node.name) && !function(val2) {
                    return INVALID_METHODS.includes(val2);
                  }(property.node.name) && (context = global[object.node.name], func = context[property.node.name]), object.isLiteral() && property.isIdentifier()) {
                    const type = typeof object.node.value;
                    "string" !== type && "number" !== type || (context = object.node.value, func = context[property.node.name]);
                  }
                }
                if (func) {
                  const args = path4.get("arguments").map((arg) => evaluateCached(arg, state2));
                  if (!state2.confident)
                    return;
                  return func.apply(context, args);
                }
              }
              deopt(path4, state2);
            }(path3, state);
            return state.confident && (item.resolved = true, item.value = val), val;
          }
        }
        function evaluateQuasis(path3, quasis, state, raw = false) {
          let str = "", i = 0;
          const exprs = path3.get("expressions");
          for (const elem of quasis) {
            if (!state.confident)
              break;
            str += raw ? elem.value.raw : elem.value.cooked;
            const expr = exprs[i++];
            expr && (str += String(evaluateCached(expr, state)));
          }
          if (state.confident)
            return str;
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/family.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._getKey = function(key, context) {
          const node = this.node, container = node[key];
          return Array.isArray(container) ? container.map((_, i) => _index.default.get({ listKey: key, parentPath: this, parent: node, container, key: i }).setContext(context)) : _index.default.get({ parentPath: this, parent: node, container: node, key }).setContext(context);
        }, exports2._getPattern = function(parts, context) {
          let path3 = this;
          for (const part of parts)
            path3 = "." === part ? path3.parentPath : Array.isArray(path3) ? path3[part] : path3.get(part, context);
          return path3;
        }, exports2.get = function(key, context = true) {
          true === context && (context = this.context);
          const parts = key.split(".");
          return 1 === parts.length ? this._getKey(key, context) : this._getPattern(parts, context);
        }, exports2.getAllNextSiblings = function() {
          let _key = this.key, sibling = this.getSibling(++_key);
          const siblings = [];
          for (; sibling.node; )
            siblings.push(sibling), sibling = this.getSibling(++_key);
          return siblings;
        }, exports2.getAllPrevSiblings = function() {
          let _key = this.key, sibling = this.getSibling(--_key);
          const siblings = [];
          for (; sibling.node; )
            siblings.push(sibling), sibling = this.getSibling(--_key);
          return siblings;
        }, exports2.getBindingIdentifierPaths = function(duplicates = false, outerOnly = false) {
          const search = [this], ids = /* @__PURE__ */ Object.create(null);
          for (; search.length; ) {
            const id = search.shift();
            if (!id)
              continue;
            if (!id.node)
              continue;
            const keys = _getBindingIdentifiers.keys[id.node.type];
            if (id.isIdentifier())
              if (duplicates) {
                (ids[id.node.name] = ids[id.node.name] || []).push(id);
              } else
                ids[id.node.name] = id;
            else if (id.isExportDeclaration()) {
              const declaration = id.get("declaration");
              isDeclaration(declaration) && search.push(declaration);
            } else {
              if (outerOnly) {
                if (id.isFunctionDeclaration()) {
                  search.push(id.get("id"));
                  continue;
                }
                if (id.isFunctionExpression())
                  continue;
              }
              if (keys)
                for (let i = 0; i < keys.length; i++) {
                  const key = keys[i], child = id.get(key);
                  Array.isArray(child) ? search.push(...child) : child.node && search.push(child);
                }
            }
          }
          return ids;
        }, exports2.getBindingIdentifiers = function(duplicates) {
          return _getBindingIdentifiers(this.node, duplicates);
        }, exports2.getCompletionRecords = function() {
          return _getCompletionRecords(this, { canHaveBreak: false, shouldPopulateBreak: false, inCaseClause: false }).map((r2) => r2.path);
        }, exports2.getNextSibling = function() {
          return this.getSibling(this.key + 1);
        }, exports2.getOpposite = function() {
          if ("left" === this.key)
            return this.getSibling("right");
          if ("right" === this.key)
            return this.getSibling("left");
          return null;
        }, exports2.getOuterBindingIdentifierPaths = function(duplicates = false) {
          return this.getBindingIdentifierPaths(duplicates, true);
        }, exports2.getOuterBindingIdentifiers = function(duplicates) {
          return _getOuterBindingIdentifiers(this.node, duplicates);
        }, exports2.getPrevSibling = function() {
          return this.getSibling(this.key - 1);
        }, exports2.getSibling = function(key) {
          return _index.default.get({ parentPath: this.parentPath, parent: this.parent, container: this.container, listKey: this.listKey, key }).setContext(this.context);
        };
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { getBindingIdentifiers: _getBindingIdentifiers, getOuterBindingIdentifiers: _getOuterBindingIdentifiers, isDeclaration, numericLiteral, unaryExpression } = _t;
        function addCompletionRecords(path3, records, context) {
          return path3 && records.push(..._getCompletionRecords(path3, context)), records;
        }
        function normalCompletionToBreak(completions) {
          completions.forEach((c) => {
            c.type = 1;
          });
        }
        function replaceBreakStatementInBreakCompletion(completions, reachable) {
          completions.forEach((c) => {
            c.path.isBreakStatement({ label: null }) && (reachable ? c.path.replaceWith(unaryExpression("void", numericLiteral(0))) : c.path.remove());
          });
        }
        function getStatementListCompletion(paths, context) {
          const completions = [];
          if (context.canHaveBreak) {
            let lastNormalCompletions = [];
            for (let i = 0; i < paths.length; i++) {
              const path3 = paths[i], newContext = Object.assign({}, context, { inCaseClause: false });
              path3.isBlockStatement() && (context.inCaseClause || context.shouldPopulateBreak) ? newContext.shouldPopulateBreak = true : newContext.shouldPopulateBreak = false;
              const statementCompletions = _getCompletionRecords(path3, newContext);
              if (statementCompletions.length > 0 && statementCompletions.every((c) => 1 === c.type)) {
                lastNormalCompletions.length > 0 && statementCompletions.every((c) => c.path.isBreakStatement({ label: null })) ? (normalCompletionToBreak(lastNormalCompletions), completions.push(...lastNormalCompletions), lastNormalCompletions.some((c) => c.path.isDeclaration()) && (completions.push(...statementCompletions), replaceBreakStatementInBreakCompletion(statementCompletions, true)), replaceBreakStatementInBreakCompletion(statementCompletions, false)) : (completions.push(...statementCompletions), context.shouldPopulateBreak || replaceBreakStatementInBreakCompletion(statementCompletions, true));
                break;
              }
              if (i === paths.length - 1)
                completions.push(...statementCompletions);
              else {
                lastNormalCompletions = [];
                for (let i2 = 0; i2 < statementCompletions.length; i2++) {
                  const c = statementCompletions[i2];
                  1 === c.type && completions.push(c), 0 === c.type && lastNormalCompletions.push(c);
                }
              }
            }
          } else if (paths.length)
            for (let i = paths.length - 1; i >= 0; i--) {
              const pathCompletions = _getCompletionRecords(paths[i], context);
              if (pathCompletions.length > 1 || 1 === pathCompletions.length && !pathCompletions[0].path.isVariableDeclaration()) {
                completions.push(...pathCompletions);
                break;
              }
            }
          return completions;
        }
        function _getCompletionRecords(path3, context) {
          let records = [];
          if (path3.isIfStatement())
            records = addCompletionRecords(path3.get("consequent"), records, context), records = addCompletionRecords(path3.get("alternate"), records, context);
          else {
            if (path3.isDoExpression() || path3.isFor() || path3.isWhile() || path3.isLabeledStatement())
              return addCompletionRecords(path3.get("body"), records, context);
            if (path3.isProgram() || path3.isBlockStatement())
              return getStatementListCompletion(path3.get("body"), context);
            if (path3.isFunction())
              return _getCompletionRecords(path3.get("body"), context);
            if (path3.isTryStatement())
              records = addCompletionRecords(path3.get("block"), records, context), records = addCompletionRecords(path3.get("handler"), records, context);
            else {
              if (path3.isCatchClause())
                return addCompletionRecords(path3.get("body"), records, context);
              if (path3.isSwitchStatement())
                return function(cases, records2, context2) {
                  let lastNormalCompletions = [];
                  for (let i = 0; i < cases.length; i++) {
                    const caseCompletions = _getCompletionRecords(cases[i], context2), normalCompletions = [], breakCompletions = [];
                    for (const c of caseCompletions)
                      0 === c.type && normalCompletions.push(c), 1 === c.type && breakCompletions.push(c);
                    normalCompletions.length && (lastNormalCompletions = normalCompletions), records2.push(...breakCompletions);
                  }
                  return records2.push(...lastNormalCompletions), records2;
                }(path3.get("cases"), records, context);
              if (path3.isSwitchCase())
                return getStatementListCompletion(path3.get("consequent"), { canHaveBreak: true, shouldPopulateBreak: false, inCaseClause: true });
              path3.isBreakStatement() ? records.push(function(path4) {
                return { type: 1, path: path4 };
              }(path3)) : records.push(function(path4) {
                return { type: 0, path: path4 };
              }(path3));
            }
          }
          return records;
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = exports2.SHOULD_STOP = exports2.SHOULD_SKIP = exports2.REMOVED = void 0;
        var virtualTypes = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), _debug = __webpack_require__2("./node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/index.js"), _scope = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/scope/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), t = _t, _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/cache.js"), _generator = __webpack_require__2("./node_modules/.pnpm/@babel+generator@7.19.0/node_modules/@babel/generator/lib/index.js"), NodePath_ancestry = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/ancestry.js"), NodePath_inference = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/inference/index.js"), NodePath_replacement = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/replacement.js"), NodePath_evaluation = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/evaluation.js"), NodePath_conversion = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/conversion.js"), NodePath_introspection = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/introspection.js"), NodePath_context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/context.js"), NodePath_removal = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/removal.js"), NodePath_modification = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/modification.js"), NodePath_family = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/family.js"), NodePath_comments = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/comments.js"), NodePath_virtual_types_validator = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js");
        const { validate } = _t, debug = _debug("babel");
        exports2.REMOVED = 1;
        exports2.SHOULD_STOP = 2;
        exports2.SHOULD_SKIP = 4;
        class NodePath {
          constructor(hub, parent) {
            this.contexts = [], this.state = null, this.opts = null, this._traverseFlags = 0, this.skipKeys = null, this.parentPath = null, this.container = null, this.listKey = null, this.key = null, this.node = null, this.type = null, this.parent = parent, this.hub = hub, this.data = null, this.context = null, this.scope = null;
          }
          static get({ hub, parentPath, parent, container, listKey, key }) {
            if (!hub && parentPath && (hub = parentPath.hub), !parent)
              throw new Error("To get a node path the parent needs to exist");
            const targetNode = container[key];
            let paths = _cache.path.get(parent);
            paths || (paths = /* @__PURE__ */ new Map(), _cache.path.set(parent, paths));
            let path3 = paths.get(targetNode);
            return path3 || (path3 = new NodePath(hub, parent), targetNode && paths.set(targetNode, path3)), path3.setup(parentPath, container, listKey, key), path3;
          }
          getScope(scope) {
            return this.isScope() ? new _scope.default(this) : scope;
          }
          setData(key, val) {
            return null == this.data && (this.data = /* @__PURE__ */ Object.create(null)), this.data[key] = val;
          }
          getData(key, def) {
            null == this.data && (this.data = /* @__PURE__ */ Object.create(null));
            let val = this.data[key];
            return void 0 === val && void 0 !== def && (val = this.data[key] = def), val;
          }
          hasNode() {
            return null != this.node;
          }
          buildCodeFrameError(msg, Error2 = SyntaxError) {
            return this.hub.buildError(this.node, msg, Error2);
          }
          traverse(visitor, state) {
            (0, _index.default)(this.node, visitor, this.scope, state, this);
          }
          set(key, node) {
            validate(this.node, key, node), this.node[key] = node;
          }
          getPathLocation() {
            const parts = [];
            let path3 = this;
            do {
              let key = path3.key;
              path3.inList && (key = `${path3.listKey}[${key}]`), parts.unshift(key);
            } while (path3 = path3.parentPath);
            return parts.join(".");
          }
          debug(message) {
            debug.enabled && debug(`${this.getPathLocation()} ${this.type}: ${message}`);
          }
          toString() {
            return (0, _generator.default)(this.node).code;
          }
          get inList() {
            return !!this.listKey;
          }
          set inList(inList) {
            inList || (this.listKey = null);
          }
          get parentKey() {
            return this.listKey || this.key;
          }
          get shouldSkip() {
            return !!(4 & this._traverseFlags);
          }
          set shouldSkip(v) {
            v ? this._traverseFlags |= 4 : this._traverseFlags &= -5;
          }
          get shouldStop() {
            return !!(2 & this._traverseFlags);
          }
          set shouldStop(v) {
            v ? this._traverseFlags |= 2 : this._traverseFlags &= -3;
          }
          get removed() {
            return !!(1 & this._traverseFlags);
          }
          set removed(v) {
            v ? this._traverseFlags |= 1 : this._traverseFlags &= -2;
          }
        }
        Object.assign(NodePath.prototype, NodePath_ancestry, NodePath_inference, NodePath_replacement, NodePath_evaluation, NodePath_conversion, NodePath_introspection, NodePath_context, NodePath_removal, NodePath_modification, NodePath_family, NodePath_comments), NodePath.prototype._guessExecutionStatusRelativeToDifferentFunctions = NodePath_introspection._guessExecutionStatusRelativeTo;
        for (const type of t.TYPES) {
          const typeKey = `is${type}`, fn = t[typeKey];
          NodePath.prototype[typeKey] = function(opts) {
            return fn(this.node, opts);
          }, NodePath.prototype[`assert${type}`] = function(opts) {
            if (!fn(this.node, opts))
              throw new TypeError(`Expected node path of type ${type}`);
          };
        }
        Object.assign(NodePath.prototype, NodePath_virtual_types_validator);
        for (const type of Object.keys(virtualTypes))
          "_" !== type[0] && (t.TYPES.includes(type) || t.TYPES.push(type));
        var _default = NodePath;
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/inference/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._getTypeAnnotation = function() {
          const node = this.node;
          if (!node) {
            if ("init" === this.key && this.parentPath.isVariableDeclarator()) {
              const declar = this.parentPath.parentPath, declarParent = declar.parentPath;
              return "left" === declar.key && declarParent.isForInStatement() ? stringTypeAnnotation() : "left" === declar.key && declarParent.isForOfStatement() ? anyTypeAnnotation() : voidTypeAnnotation();
            }
            return;
          }
          if (node.typeAnnotation)
            return node.typeAnnotation;
          if (typeAnnotationInferringNodes.has(node))
            return;
          typeAnnotationInferringNodes.add(node);
          try {
            var _inferer;
            let inferer = inferers[node.type];
            if (inferer)
              return inferer.call(this, node);
            if (inferer = inferers[this.parentPath.type], null != (_inferer = inferer) && _inferer.validParent)
              return this.parentPath.getTypeAnnotation();
          } finally {
            typeAnnotationInferringNodes.delete(node);
          }
        }, exports2.baseTypeStrictlyMatches = function(rightArg) {
          const left = this.getTypeAnnotation(), right = rightArg.getTypeAnnotation();
          if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left))
            return right.type === left.type;
          return false;
        }, exports2.couldBeBaseType = function(name) {
          const type = this.getTypeAnnotation();
          if (isAnyTypeAnnotation(type))
            return true;
          if (isUnionTypeAnnotation(type)) {
            for (const type2 of type.types)
              if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true))
                return true;
            return false;
          }
          return _isBaseType(name, type, true);
        }, exports2.getTypeAnnotation = function() {
          let type = this.getData("typeAnnotation");
          if (null != type)
            return type;
          type = this._getTypeAnnotation() || anyTypeAnnotation(), (isTypeAnnotation(type) || isTSTypeAnnotation(type)) && (type = type.typeAnnotation);
          return this.setData("typeAnnotation", type), type;
        }, exports2.isBaseType = function(baseName, soft) {
          return _isBaseType(baseName, this.getTypeAnnotation(), soft);
        }, exports2.isGenericType = function(genericName) {
          const type = this.getTypeAnnotation();
          if ("Array" === genericName && (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type)))
            return true;
          return isGenericTypeAnnotation(type) && isIdentifier(type.id, { name: genericName }) || isTSTypeReference(type) && isIdentifier(type.typeName, { name: genericName });
        };
        var inferers = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/inference/inferers.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { anyTypeAnnotation, isAnyTypeAnnotation, isArrayTypeAnnotation, isBooleanTypeAnnotation, isEmptyTypeAnnotation, isFlowBaseAnnotation, isGenericTypeAnnotation, isIdentifier, isMixedTypeAnnotation, isNumberTypeAnnotation, isStringTypeAnnotation, isTSArrayType, isTSTypeAnnotation, isTSTypeReference, isTupleTypeAnnotation, isTypeAnnotation, isUnionTypeAnnotation, isVoidTypeAnnotation, stringTypeAnnotation, voidTypeAnnotation } = _t;
        const typeAnnotationInferringNodes = /* @__PURE__ */ new WeakSet();
        function _isBaseType(baseName, type, soft) {
          if ("string" === baseName)
            return isStringTypeAnnotation(type);
          if ("number" === baseName)
            return isNumberTypeAnnotation(type);
          if ("boolean" === baseName)
            return isBooleanTypeAnnotation(type);
          if ("any" === baseName)
            return isAnyTypeAnnotation(type);
          if ("mixed" === baseName)
            return isMixedTypeAnnotation(type);
          if ("empty" === baseName)
            return isEmptyTypeAnnotation(type);
          if ("void" === baseName)
            return isVoidTypeAnnotation(type);
          if (soft)
            return false;
          throw new Error(`Unknown base type ${baseName}`);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          if (!this.isReferenced())
            return;
          const binding = this.scope.getBinding(node.name);
          if (binding)
            return binding.identifier.typeAnnotation ? binding.identifier.typeAnnotation : function(binding2, path3, name) {
              const types2 = [], functionConstantViolations = [];
              let constantViolations = getConstantViolationsBefore(binding2, path3, functionConstantViolations);
              const testType = getConditionalAnnotation(binding2, path3, name);
              if (testType) {
                const testConstantViolations = getConstantViolationsBefore(binding2, testType.ifStatement);
                constantViolations = constantViolations.filter((path4) => testConstantViolations.indexOf(path4) < 0), types2.push(testType.typeAnnotation);
              }
              if (constantViolations.length) {
                constantViolations.push(...functionConstantViolations);
                for (const violation of constantViolations)
                  types2.push(violation.getTypeAnnotation());
              }
              if (!types2.length)
                return;
              return (0, _util.createUnionType)(types2);
            }(binding, this, node.name);
          if ("undefined" === node.name)
            return voidTypeAnnotation();
          if ("NaN" === node.name || "Infinity" === node.name)
            return numberTypeAnnotation();
          node.name;
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/inference/util.js");
        const { BOOLEAN_NUMBER_BINARY_OPERATORS, createTypeAnnotationBasedOnTypeof, numberTypeAnnotation, voidTypeAnnotation } = _t;
        function getConstantViolationsBefore(binding, path3, functions) {
          const violations = binding.constantViolations.slice();
          return violations.unshift(binding.path), violations.filter((violation) => {
            const status = (violation = violation.resolve())._guessExecutionStatusRelativeTo(path3);
            return functions && "unknown" === status && functions.push(violation), "before" === status;
          });
        }
        function inferAnnotationFromBinaryExpression(name, path3) {
          const operator = path3.node.operator, right = path3.get("right").resolve(), left = path3.get("left").resolve();
          let target, typeofPath, typePath;
          if (left.isIdentifier({ name }) ? target = right : right.isIdentifier({ name }) && (target = left), target)
            return "===" === operator ? target.getTypeAnnotation() : BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0 ? numberTypeAnnotation() : void 0;
          if ("===" !== operator && "==" !== operator)
            return;
          if (left.isUnaryExpression({ operator: "typeof" }) ? (typeofPath = left, typePath = right) : right.isUnaryExpression({ operator: "typeof" }) && (typeofPath = right, typePath = left), !typeofPath)
            return;
          if (!typeofPath.get("argument").isIdentifier({ name }))
            return;
          if (typePath = typePath.resolve(), !typePath.isLiteral())
            return;
          const typeValue = typePath.node.value;
          return "string" == typeof typeValue ? createTypeAnnotationBasedOnTypeof(typeValue) : void 0;
        }
        function getConditionalAnnotation(binding, path3, name) {
          const ifStatement = function(binding2, path4, name2) {
            let parentPath;
            for (; parentPath = path4.parentPath; ) {
              if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
                if ("test" === path4.key)
                  return;
                return parentPath;
              }
              if (parentPath.isFunction() && parentPath.parentPath.scope.getBinding(name2) !== binding2)
                return;
              path4 = parentPath;
            }
          }(binding, path3, name);
          if (!ifStatement)
            return;
          const paths = [ifStatement.get("test")], types2 = [];
          for (let i = 0; i < paths.length; i++) {
            const path4 = paths[i];
            if (path4.isLogicalExpression())
              "&&" === path4.node.operator && (paths.push(path4.get("left")), paths.push(path4.get("right")));
            else if (path4.isBinaryExpression()) {
              const type = inferAnnotationFromBinaryExpression(name, path4);
              type && types2.push(type);
            }
          }
          return types2.length ? { typeAnnotation: (0, _util.createUnionType)(types2), ifStatement } : getConditionalAnnotation(binding, ifStatement, name);
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/inference/inferers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.ArrayExpression = ArrayExpression, exports2.AssignmentExpression = function() {
          return this.get("right").getTypeAnnotation();
        }, exports2.BinaryExpression = function(node) {
          const operator = node.operator;
          if (NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0)
            return numberTypeAnnotation();
          if (BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0)
            return booleanTypeAnnotation();
          if ("+" === operator) {
            const right = this.get("right"), left = this.get("left");
            return left.isBaseType("number") && right.isBaseType("number") ? numberTypeAnnotation() : left.isBaseType("string") || right.isBaseType("string") ? stringTypeAnnotation() : unionTypeAnnotation([stringTypeAnnotation(), numberTypeAnnotation()]);
          }
        }, exports2.BooleanLiteral = function() {
          return booleanTypeAnnotation();
        }, exports2.CallExpression = function() {
          const { callee } = this.node;
          if (isObjectKeys(callee))
            return arrayTypeAnnotation(stringTypeAnnotation());
          if (isArrayFrom(callee) || isObjectValues(callee) || isIdentifier(callee, { name: "Array" }))
            return arrayTypeAnnotation(anyTypeAnnotation());
          if (isObjectEntries(callee))
            return arrayTypeAnnotation(tupleTypeAnnotation([stringTypeAnnotation(), anyTypeAnnotation()]));
          return resolveCall(this.get("callee"));
        }, exports2.ConditionalExpression = function() {
          const argumentTypes = [this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()];
          return (0, _util.createUnionType)(argumentTypes);
        }, exports2.ClassDeclaration = exports2.ClassExpression = exports2.FunctionDeclaration = exports2.ArrowFunctionExpression = exports2.FunctionExpression = function() {
          return genericTypeAnnotation(identifier("Function"));
        }, Object.defineProperty(exports2, "Identifier", { enumerable: true, get: function() {
          return _infererReference.default;
        } }), exports2.LogicalExpression = function() {
          const argumentTypes = [this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()];
          return (0, _util.createUnionType)(argumentTypes);
        }, exports2.NewExpression = function(node) {
          if ("Identifier" === node.callee.type)
            return genericTypeAnnotation(node.callee);
        }, exports2.NullLiteral = function() {
          return nullLiteralTypeAnnotation();
        }, exports2.NumericLiteral = function() {
          return numberTypeAnnotation();
        }, exports2.ObjectExpression = function() {
          return genericTypeAnnotation(identifier("Object"));
        }, exports2.ParenthesizedExpression = function() {
          return this.get("expression").getTypeAnnotation();
        }, exports2.RegExpLiteral = function() {
          return genericTypeAnnotation(identifier("RegExp"));
        }, exports2.RestElement = RestElement, exports2.SequenceExpression = function() {
          return this.get("expressions").pop().getTypeAnnotation();
        }, exports2.StringLiteral = function() {
          return stringTypeAnnotation();
        }, exports2.TSAsExpression = TSAsExpression, exports2.TSNonNullExpression = function() {
          return this.get("expression").getTypeAnnotation();
        }, exports2.TaggedTemplateExpression = function() {
          return resolveCall(this.get("tag"));
        }, exports2.TemplateLiteral = function() {
          return stringTypeAnnotation();
        }, exports2.TypeCastExpression = TypeCastExpression, exports2.UnaryExpression = function(node) {
          const operator = node.operator;
          if ("void" === operator)
            return voidTypeAnnotation();
          if (NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0)
            return numberTypeAnnotation();
          if (STRING_UNARY_OPERATORS.indexOf(operator) >= 0)
            return stringTypeAnnotation();
          if (BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0)
            return booleanTypeAnnotation();
        }, exports2.UpdateExpression = function(node) {
          const operator = node.operator;
          if ("++" === operator || "--" === operator)
            return numberTypeAnnotation();
        }, exports2.VariableDeclarator = function() {
          if (!this.get("id").isIdentifier())
            return;
          return this.get("init").getTypeAnnotation();
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _infererReference = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js"), _util = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/inference/util.js");
        const { BOOLEAN_BINARY_OPERATORS, BOOLEAN_UNARY_OPERATORS, NUMBER_BINARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS, anyTypeAnnotation, arrayTypeAnnotation, booleanTypeAnnotation, buildMatchMemberExpression, genericTypeAnnotation, identifier, nullLiteralTypeAnnotation, numberTypeAnnotation, stringTypeAnnotation, tupleTypeAnnotation, unionTypeAnnotation, voidTypeAnnotation, isIdentifier } = _t;
        function TypeCastExpression(node) {
          return node.typeAnnotation;
        }
        function TSAsExpression(node) {
          return node.typeAnnotation;
        }
        function ArrayExpression() {
          return genericTypeAnnotation(identifier("Array"));
        }
        function RestElement() {
          return ArrayExpression();
        }
        TypeCastExpression.validParent = true, TSAsExpression.validParent = true, RestElement.validParent = true;
        const isArrayFrom = buildMatchMemberExpression("Array.from"), isObjectKeys = buildMatchMemberExpression("Object.keys"), isObjectValues = buildMatchMemberExpression("Object.values"), isObjectEntries = buildMatchMemberExpression("Object.entries");
        function resolveCall(callee) {
          if ((callee = callee.resolve()).isFunction()) {
            const { node } = callee;
            if (node.async)
              return node.generator ? genericTypeAnnotation(identifier("AsyncIterator")) : genericTypeAnnotation(identifier("Promise"));
            if (node.generator)
              return genericTypeAnnotation(identifier("Iterator"));
            if (callee.node.returnType)
              return callee.node.returnType;
          }
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/inference/util.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.createUnionType = function(types2) {
          if (isFlowType(types2[0]))
            return createFlowUnionType ? createFlowUnionType(types2) : createUnionTypeAnnotation(types2);
          if (createTSUnionType)
            return createTSUnionType(types2);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { createFlowUnionType, createTSUnionType, createUnionTypeAnnotation, isFlowType, isTSType } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/introspection.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._guessExecutionStatusRelativeTo = function(target) {
          return _guessExecutionStatusRelativeToCached(this, target, /* @__PURE__ */ new Map());
        }, exports2._resolve = function(dangerous, resolved) {
          if (resolved && resolved.indexOf(this) >= 0)
            return;
          if ((resolved = resolved || []).push(this), this.isVariableDeclarator()) {
            if (this.get("id").isIdentifier())
              return this.get("init").resolve(dangerous, resolved);
          } else if (this.isReferencedIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            if (!binding)
              return;
            if (!binding.constant)
              return;
            if ("module" === binding.kind)
              return;
            if (binding.path !== this) {
              const ret = binding.path.resolve(dangerous, resolved);
              if (this.find((parent) => parent.node === ret.node))
                return;
              return ret;
            }
          } else {
            if (this.isTypeCastExpression())
              return this.get("expression").resolve(dangerous, resolved);
            if (dangerous && this.isMemberExpression()) {
              const targetKey = this.toComputedKey();
              if (!isLiteral(targetKey))
                return;
              const targetName = targetKey.value, target = this.get("object").resolve(dangerous, resolved);
              if (target.isObjectExpression()) {
                const props = target.get("properties");
                for (const prop of props) {
                  if (!prop.isProperty())
                    continue;
                  const key = prop.get("key");
                  let match = prop.isnt("computed") && key.isIdentifier({ name: targetName });
                  if (match = match || key.isLiteral({ value: targetName }), match)
                    return prop.get("value").resolve(dangerous, resolved);
                }
              } else if (target.isArrayExpression() && !isNaN(+targetName)) {
                const elem = target.get("elements")[targetName];
                if (elem)
                  return elem.resolve(dangerous, resolved);
              }
            }
          }
        }, exports2.canHaveVariableDeclarationOrExpression = function() {
          return ("init" === this.key || "left" === this.key) && this.parentPath.isFor();
        }, exports2.canSwapBetweenExpressionAndStatement = function(replacement) {
          if ("body" !== this.key || !this.parentPath.isArrowFunctionExpression())
            return false;
          if (this.isExpression())
            return isBlockStatement(replacement);
          if (this.isBlockStatement())
            return isExpression(replacement);
          return false;
        }, exports2.equals = function(key, value) {
          return this.node[key] === value;
        }, exports2.getSource = function() {
          const node = this.node;
          if (node.end) {
            const code = this.hub.getCode();
            if (code)
              return code.slice(node.start, node.end);
          }
          return "";
        }, exports2.has = has, exports2.is = void 0, exports2.isCompletionRecord = function(allowInsideFunction) {
          let path3 = this, first = true;
          do {
            const { type, container } = path3;
            if (!first && (path3.isFunction() || "StaticBlock" === type))
              return !!allowInsideFunction;
            if (first = false, Array.isArray(container) && path3.key !== container.length - 1)
              return false;
          } while ((path3 = path3.parentPath) && !path3.isProgram() && !path3.isDoExpression());
          return true;
        }, exports2.isConstantExpression = function() {
          if (this.isIdentifier()) {
            const binding = this.scope.getBinding(this.node.name);
            return !!binding && binding.constant;
          }
          if (this.isLiteral())
            return !this.isRegExpLiteral() && (!this.isTemplateLiteral() || this.get("expressions").every((expression) => expression.isConstantExpression()));
          if (this.isUnaryExpression())
            return "void" === this.node.operator && this.get("argument").isConstantExpression();
          if (this.isBinaryExpression())
            return this.get("left").isConstantExpression() && this.get("right").isConstantExpression();
          return false;
        }, exports2.isInStrictMode = function() {
          const start = this.isProgram() ? this : this.parentPath;
          return !!start.find((path3) => {
            if (path3.isProgram({ sourceType: "module" }))
              return true;
            if (path3.isClass())
              return true;
            if (path3.isArrowFunctionExpression() && !path3.get("body").isBlockStatement())
              return false;
            let body;
            if (path3.isFunction())
              body = path3.node.body;
            else {
              if (!path3.isProgram())
                return false;
              body = path3.node;
            }
            for (const directive of body.directives)
              if ("use strict" === directive.value.value)
                return true;
          });
        }, exports2.isNodeType = function(type) {
          return isType(this.type, type);
        }, exports2.isStatementOrBlock = function() {
          return !this.parentPath.isLabeledStatement() && !isBlockStatement(this.container) && STATEMENT_OR_BLOCK_KEYS.includes(this.key);
        }, exports2.isStatic = function() {
          return this.scope.isStatic(this.node);
        }, exports2.isnt = function(key) {
          return !this.has(key);
        }, exports2.matchesPattern = function(pattern, allowPartial) {
          return _matchesPattern(this.node, pattern, allowPartial);
        }, exports2.referencesImport = function(moduleSource, importName2) {
          if (!this.isReferencedIdentifier()) {
            if (this.isJSXMemberExpression() && this.node.property.name === importName2 || (this.isMemberExpression() || this.isOptionalMemberExpression()) && (this.node.computed ? isStringLiteral(this.node.property, { value: importName2 }) : this.node.property.name === importName2)) {
              const object = this.get("object");
              return object.isReferencedIdentifier() && object.referencesImport(moduleSource, "*");
            }
            return false;
          }
          const binding = this.scope.getBinding(this.node.name);
          if (!binding || "module" !== binding.kind)
            return false;
          const path3 = binding.path, parent = path3.parentPath;
          if (!parent.isImportDeclaration())
            return false;
          if (parent.node.source.value !== moduleSource)
            return false;
          if (!importName2)
            return true;
          if (path3.isImportDefaultSpecifier() && "default" === importName2)
            return true;
          if (path3.isImportNamespaceSpecifier() && "*" === importName2)
            return true;
          if (path3.isImportSpecifier() && isIdentifier(path3.node.imported, { name: importName2 }))
            return true;
          return false;
        }, exports2.resolve = function(dangerous, resolved) {
          return this._resolve(dangerous, resolved) || this;
        }, exports2.willIMaybeExecuteBefore = function(target) {
          return "after" !== this._guessExecutionStatusRelativeTo(target);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { STATEMENT_OR_BLOCK_KEYS, VISITOR_KEYS, isBlockStatement, isExpression, isIdentifier, isLiteral, isStringLiteral, isType, matchesPattern: _matchesPattern } = _t;
        function has(key) {
          const val = this.node && this.node[key];
          return val && Array.isArray(val) ? !!val.length : !!val;
        }
        const is = has;
        function getOuterFunction(path3) {
          return (path3.scope.getFunctionParent() || path3.scope.getProgramParent()).path;
        }
        function isExecutionUncertain(type, key) {
          switch (type) {
            case "LogicalExpression":
            case "AssignmentPattern":
              return "right" === key;
            case "ConditionalExpression":
            case "IfStatement":
              return "consequent" === key || "alternate" === key;
            case "WhileStatement":
            case "DoWhileStatement":
            case "ForInStatement":
            case "ForOfStatement":
              return "body" === key;
            case "ForStatement":
              return "body" === key || "update" === key;
            case "SwitchStatement":
              return "cases" === key;
            case "TryStatement":
              return "handler" === key;
            case "OptionalMemberExpression":
              return "property" === key;
            case "OptionalCallExpression":
              return "arguments" === key;
            default:
              return false;
          }
        }
        function isExecutionUncertainInList(paths, maxIndex) {
          for (let i = 0; i < maxIndex; i++) {
            const path3 = paths[i];
            if (isExecutionUncertain(path3.parent.type, path3.parentKey))
              return true;
          }
          return false;
        }
        function _guessExecutionStatusRelativeToCached(base, target, cache) {
          const funcParent = { this: getOuterFunction(base), target: getOuterFunction(target) };
          if (funcParent.target.node !== funcParent.this.node)
            return function(base2, target2, cache2) {
              let nodeMap = cache2.get(base2.node);
              if (nodeMap) {
                if (nodeMap.has(target2.node))
                  return nodeMap.get(target2.node);
              } else
                cache2.set(base2.node, nodeMap = /* @__PURE__ */ new Map());
              const result = function(base3, target3, cache3) {
                if (!target3.isFunctionDeclaration() || target3.parentPath.isExportDeclaration())
                  return "unknown";
                const binding = target3.scope.getBinding(target3.node.id.name);
                if (!binding.references)
                  return "before";
                const referencePaths = binding.referencePaths;
                let allStatus;
                for (const path3 of referencePaths) {
                  if (!!!path3.find((path4) => path4.node === target3.node)) {
                    if ("callee" !== path3.key || !path3.parentPath.isCallExpression())
                      return "unknown";
                    if (!executionOrderCheckedNodes.has(path3.node)) {
                      executionOrderCheckedNodes.add(path3.node);
                      try {
                        const status = _guessExecutionStatusRelativeToCached(base3, path3, cache3);
                        if (allStatus && allStatus !== status)
                          return "unknown";
                        allStatus = status;
                      } finally {
                        executionOrderCheckedNodes.delete(path3.node);
                      }
                    }
                  }
                }
                return allStatus;
              }(base2, target2, cache2);
              return nodeMap.set(target2.node, result), result;
            }(base, funcParent.target, cache);
          const paths = { target: target.getAncestry(), this: base.getAncestry() };
          if (paths.target.indexOf(base) >= 0)
            return "after";
          if (paths.this.indexOf(target) >= 0)
            return "before";
          let commonPath;
          const commonIndex = { target: 0, this: 0 };
          for (; !commonPath && commonIndex.this < paths.this.length; ) {
            const path3 = paths.this[commonIndex.this];
            commonIndex.target = paths.target.indexOf(path3), commonIndex.target >= 0 ? commonPath = path3 : commonIndex.this++;
          }
          if (!commonPath)
            throw new Error("Internal Babel error - The two compared nodes don't appear to belong to the same program.");
          if (isExecutionUncertainInList(paths.this, commonIndex.this - 1) || isExecutionUncertainInList(paths.target, commonIndex.target - 1))
            return "unknown";
          const divergence = { this: paths.this[commonIndex.this - 1], target: paths.target[commonIndex.target - 1] };
          if (divergence.target.listKey && divergence.this.listKey && divergence.target.container === divergence.this.container)
            return divergence.target.key > divergence.this.key ? "before" : "after";
          const keys = VISITOR_KEYS[commonPath.type], keyPosition_this = keys.indexOf(divergence.this.parentKey);
          return keys.indexOf(divergence.target.parentKey) > keyPosition_this ? "before" : "after";
        }
        exports2.is = is;
        const executionOrderCheckedNodes = /* @__PURE__ */ new Set();
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/lib/hoister.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _t2 = _t;
        const { react } = _t, { cloneNode, jsxExpressionContainer, variableDeclaration, variableDeclarator } = _t2, referenceVisitor = { ReferencedIdentifier(path3, state) {
          if (path3.isJSXIdentifier() && react.isCompatTag(path3.node.name) && !path3.parentPath.isJSXMemberExpression())
            return;
          if ("this" === path3.node.name) {
            let scope = path3.scope;
            do {
              if (scope.path.isFunction() && !scope.path.isArrowFunctionExpression())
                break;
            } while (scope = scope.parent);
            scope && state.breakOnScopePaths.push(scope.path);
          }
          const binding = path3.scope.getBinding(path3.node.name);
          if (binding) {
            for (const violation of binding.constantViolations)
              if (violation.scope !== binding.path.scope)
                return state.mutableBinding = true, void path3.stop();
            binding === state.scope.getBinding(path3.node.name) && (state.bindings[path3.node.name] = binding);
          }
        } };
        exports2.default = class {
          constructor(path3, scope) {
            this.breakOnScopePaths = void 0, this.bindings = void 0, this.mutableBinding = void 0, this.scopes = void 0, this.scope = void 0, this.path = void 0, this.attachAfter = void 0, this.breakOnScopePaths = [], this.bindings = {}, this.mutableBinding = false, this.scopes = [], this.scope = scope, this.path = path3, this.attachAfter = false;
          }
          isCompatibleScope(scope) {
            for (const key of Object.keys(this.bindings)) {
              const binding = this.bindings[key];
              if (!scope.bindingIdentifierEquals(key, binding.identifier))
                return false;
            }
            return true;
          }
          getCompatibleScopes() {
            let scope = this.path.scope;
            do {
              if (!this.isCompatibleScope(scope))
                break;
              if (this.scopes.push(scope), this.breakOnScopePaths.indexOf(scope.path) >= 0)
                break;
            } while (scope = scope.parent);
          }
          getAttachmentPath() {
            let path3 = this._getAttachmentPath();
            if (!path3)
              return;
            let targetScope = path3.scope;
            if (targetScope.path === path3 && (targetScope = path3.scope.parent), targetScope.path.isProgram() || targetScope.path.isFunction())
              for (const name of Object.keys(this.bindings)) {
                if (!targetScope.hasOwnBinding(name))
                  continue;
                const binding = this.bindings[name];
                if ("param" === binding.kind || "params" === binding.path.parentKey)
                  continue;
                if (this.getAttachmentParentForPath(binding.path).key >= path3.key) {
                  this.attachAfter = true, path3 = binding.path;
                  for (const violationPath of binding.constantViolations)
                    this.getAttachmentParentForPath(violationPath).key > path3.key && (path3 = violationPath);
                }
              }
            return path3;
          }
          _getAttachmentPath() {
            const scope = this.scopes.pop();
            if (scope) {
              if (scope.path.isFunction()) {
                if (!this.hasOwnParamBindings(scope))
                  return this.getNextScopeAttachmentParent();
                {
                  if (this.scope === scope)
                    return;
                  const bodies = scope.path.get("body").get("body");
                  for (let i = 0; i < bodies.length; i++)
                    if (!bodies[i].node._blockHoist)
                      return bodies[i];
                }
              } else if (scope.path.isProgram())
                return this.getNextScopeAttachmentParent();
            }
          }
          getNextScopeAttachmentParent() {
            const scope = this.scopes.pop();
            if (scope)
              return this.getAttachmentParentForPath(scope.path);
          }
          getAttachmentParentForPath(path3) {
            do {
              if (!path3.parentPath || Array.isArray(path3.container) && path3.isStatement())
                return path3;
            } while (path3 = path3.parentPath);
          }
          hasOwnParamBindings(scope) {
            for (const name of Object.keys(this.bindings)) {
              if (!scope.hasOwnBinding(name))
                continue;
              const binding = this.bindings[name];
              if ("param" === binding.kind && binding.constant)
                return true;
            }
            return false;
          }
          run() {
            if (this.path.traverse(referenceVisitor, this), this.mutableBinding)
              return;
            this.getCompatibleScopes();
            const attachTo = this.getAttachmentPath();
            if (!attachTo)
              return;
            if (attachTo.getFunctionParent() === this.path.getFunctionParent())
              return;
            let uid = attachTo.scope.generateUidIdentifier("ref");
            const declarator = variableDeclarator(uid, this.path.node), insertFn = this.attachAfter ? "insertAfter" : "insertBefore", [attached] = attachTo[insertFn]([attachTo.isVariableDeclarator() ? declarator : variableDeclaration("var", [declarator])]), parent = this.path.parentPath;
            return parent.isJSXElement() && this.path.container === parent.node.children && (uid = jsxExpressionContainer(uid)), this.path.replaceWith(cloneNode(uid)), attachTo.isVariableDeclarator() ? attached.get("init") : attached.get("declarations.0.init");
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.hooks = void 0;
        exports2.hooks = [function(self2, parent) {
          if ("test" === self2.key && (parent.isWhile() || parent.isSwitchCase()) || "declaration" === self2.key && parent.isExportDeclaration() || "body" === self2.key && parent.isLabeledStatement() || "declarations" === self2.listKey && parent.isVariableDeclaration() && 1 === parent.node.declarations.length || "expression" === self2.key && parent.isExpressionStatement())
            return parent.remove(), true;
        }, function(self2, parent) {
          if (parent.isSequenceExpression() && 1 === parent.node.expressions.length)
            return parent.replaceWith(parent.node.expressions[0]), true;
        }, function(self2, parent) {
          if (parent.isBinary())
            return "left" === self2.key ? parent.replaceWith(parent.node.right) : parent.replaceWith(parent.node.left), true;
        }, function(self2, parent) {
          if (parent.isIfStatement() && "consequent" === self2.key || "body" === self2.key && (parent.isLoop() || parent.isArrowFunctionExpression()))
            return self2.replaceWith({ type: "BlockStatement", body: [] }), true;
        }];
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/lib/virtual-types-validator.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isBindingIdentifier = function() {
          const { node, parent } = this, grandparent = this.parentPath.parent;
          return isIdentifier(node) && isBinding(node, parent, grandparent);
        }, exports2.isBlockScoped = function() {
          return nodeIsBlockScoped(this.node);
        }, exports2.isExistentialTypeParam = function() {
          throw new Error("`path.isExistentialTypeParam` has been renamed to `path.isExistsTypeAnnotation()` in Babel 7.");
        }, exports2.isExpression = function() {
          return this.isIdentifier() ? this.isReferencedIdentifier() : nodeIsExpression(this.node);
        }, exports2.isFlow = function() {
          const { node } = this;
          return !!nodeIsFlow(node) || (isImportDeclaration(node) ? "type" === node.importKind || "typeof" === node.importKind : isExportDeclaration(node) ? "type" === node.exportKind : !!isImportSpecifier(node) && ("type" === node.importKind || "typeof" === node.importKind));
        }, exports2.isForAwaitStatement = function() {
          return isForOfStatement(this.node, { await: true });
        }, exports2.isGenerated = function() {
          return !this.isUser();
        }, exports2.isNumericLiteralTypeAnnotation = function() {
          throw new Error("`path.isNumericLiteralTypeAnnotation()` has been renamed to `path.isNumberLiteralTypeAnnotation()` in Babel 7.");
        }, exports2.isPure = function(constantsOnly) {
          return this.scope.isPure(this.node, constantsOnly);
        }, exports2.isReferenced = function() {
          return nodeIsReferenced(this.node, this.parent);
        }, exports2.isReferencedIdentifier = function(opts) {
          const { node, parent } = this;
          if (!isIdentifier(node, opts) && !isJSXMemberExpression(parent, opts)) {
            if (!isJSXIdentifier(node, opts))
              return false;
            if (isCompatTag(node.name))
              return false;
          }
          return nodeIsReferenced(node, parent, this.parentPath.parent);
        }, exports2.isReferencedMemberExpression = function() {
          const { node, parent } = this;
          return isMemberExpression(node) && nodeIsReferenced(node, parent);
        }, exports2.isRestProperty = function() {
          return nodeIsRestElement(this.node) && this.parentPath && this.parentPath.isObjectPattern();
        }, exports2.isScope = function() {
          return nodeIsScope(this.node, this.parent);
        }, exports2.isSpreadProperty = function() {
          return nodeIsRestElement(this.node) && this.parentPath && this.parentPath.isObjectExpression();
        }, exports2.isStatement = function() {
          const { node, parent } = this;
          if (nodeIsStatement(node)) {
            if (isVariableDeclaration(node)) {
              if (isForXStatement(parent, { left: node }))
                return false;
              if (isForStatement(parent, { init: node }))
                return false;
            }
            return true;
          }
          return false;
        }, exports2.isUser = function() {
          return this.node && !!this.node.loc;
        }, exports2.isVar = function() {
          return nodeIsVar(this.node);
        };
        var _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { isBinding, isBlockScoped: nodeIsBlockScoped, isExportDeclaration, isExpression: nodeIsExpression, isFlow: nodeIsFlow, isForStatement, isForXStatement, isIdentifier, isImportDeclaration, isImportSpecifier, isJSXIdentifier, isJSXMemberExpression, isMemberExpression, isRestElement: nodeIsRestElement, isReferenced: nodeIsReferenced, isScope: nodeIsScope, isStatement: nodeIsStatement, isVar: nodeIsVar, isVariableDeclaration, react, isForOfStatement } = _t, { isCompatTag } = react;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/lib/virtual-types.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.Var = exports2.User = exports2.Statement = exports2.SpreadProperty = exports2.Scope = exports2.RestProperty = exports2.ReferencedMemberExpression = exports2.ReferencedIdentifier = exports2.Referenced = exports2.Pure = exports2.NumericLiteralTypeAnnotation = exports2.Generated = exports2.ForAwaitStatement = exports2.Flow = exports2.Expression = exports2.ExistentialTypeParam = exports2.BlockScoped = exports2.BindingIdentifier = void 0;
        exports2.ReferencedIdentifier = ["Identifier", "JSXIdentifier"];
        exports2.ReferencedMemberExpression = ["MemberExpression"];
        exports2.BindingIdentifier = ["Identifier"];
        exports2.Statement = ["Statement"];
        exports2.Expression = ["Expression"];
        exports2.Scope = ["Scopable", "Pattern"];
        exports2.Referenced = null;
        exports2.BlockScoped = null;
        exports2.Var = ["VariableDeclaration"];
        exports2.User = null;
        exports2.Generated = null;
        exports2.Pure = null;
        exports2.Flow = ["Flow", "ImportDeclaration", "ExportDeclaration", "ImportSpecifier"];
        exports2.RestProperty = ["RestElement"];
        exports2.SpreadProperty = ["RestElement"];
        exports2.ExistentialTypeParam = ["ExistsTypeAnnotation"];
        exports2.NumericLiteralTypeAnnotation = ["NumberLiteralTypeAnnotation"];
        exports2.ForAwaitStatement = ["ForOfStatement"];
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/modification.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._containerInsert = function(from, nodes) {
          this.updateSiblingKeys(from, nodes.length);
          const paths = [];
          this.container.splice(from, 0, ...nodes);
          for (let i = 0; i < nodes.length; i++) {
            const to = from + i, path3 = this.getSibling(to);
            paths.push(path3), this.context && this.context.queue && path3.pushContext(this.context);
          }
          const contexts = this._getQueueContexts();
          for (const path3 of paths) {
            path3.setScope(), path3.debug("Inserted.");
            for (const context of contexts)
              context.maybeQueue(path3, true);
          }
          return paths;
        }, exports2._containerInsertAfter = function(nodes) {
          return this._containerInsert(this.key + 1, nodes);
        }, exports2._containerInsertBefore = function(nodes) {
          return this._containerInsert(this.key, nodes);
        }, exports2._verifyNodeList = function(nodes) {
          if (!nodes)
            return [];
          Array.isArray(nodes) || (nodes = [nodes]);
          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            let msg;
            if (node ? "object" != typeof node ? msg = "contains a non-object node" : node.type ? node instanceof _index.default && (msg = "has a NodePath when it expected a raw object") : msg = "without a type" : msg = "has falsy node", msg) {
              const type = Array.isArray(node) ? "array" : typeof node;
              throw new Error(`Node list ${msg} with the index of ${i} and type of ${type}`);
            }
          }
          return nodes;
        }, exports2.hoist = function(scope = this.scope) {
          return new _hoister.default(this, scope).run();
        }, exports2.insertAfter = function(nodes_) {
          if (this._assertUnremoved(), this.isSequenceExpression())
            return last(this.get("expressions")).insertAfter(nodes_);
          const nodes = this._verifyNodeList(nodes_), { parentPath } = this;
          if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || parentPath.isExportNamedDeclaration() || parentPath.isExportDefaultDeclaration() && this.isDeclaration())
            return parentPath.insertAfter(nodes.map((node) => isExpression(node) ? expressionStatement(node) : node));
          if (this.isNodeType("Expression") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && "init" === this.key) {
            if (this.node) {
              const node = this.node;
              let { scope } = this;
              if (scope.path.isPattern())
                return assertExpression(node), this.replaceWith(callExpression(arrowFunctionExpression([], node), [])), this.get("callee.body").insertAfter(nodes), [this];
              if (isHiddenInSequenceExpression(this))
                nodes.unshift(node);
              else if (isCallExpression(node) && isSuper(node.callee))
                nodes.unshift(node), nodes.push(thisExpression());
              else if (function(node2, scope2) {
                if (!isAssignmentExpression(node2) || !isIdentifier(node2.left))
                  return false;
                const blockScope = scope2.getBlockParent();
                return blockScope.hasOwnBinding(node2.left.name) && blockScope.getOwnBinding(node2.left.name).constantViolations.length <= 1;
              }(node, scope))
                nodes.unshift(node), nodes.push(cloneNode(node.left));
              else if (scope.isPure(node, true))
                nodes.push(node);
              else {
                parentPath.isMethod({ computed: true, key: node }) && (scope = scope.parent);
                const temp = scope.generateDeclaredUidIdentifier();
                nodes.unshift(expressionStatement(assignmentExpression("=", cloneNode(temp), node))), nodes.push(expressionStatement(cloneNode(temp)));
              }
            }
            return this.replaceExpressionWithStatements(nodes);
          }
          if (Array.isArray(this.container))
            return this._containerInsertAfter(nodes);
          if (this.isStatementOrBlock()) {
            const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || null != node.expression);
            return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.pushContainer("body", nodes);
          }
          throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
        }, exports2.insertBefore = function(nodes_) {
          this._assertUnremoved();
          const nodes = this._verifyNodeList(nodes_), { parentPath } = this;
          if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || parentPath.isExportNamedDeclaration() || parentPath.isExportDefaultDeclaration() && this.isDeclaration())
            return parentPath.insertBefore(nodes);
          if (this.isNodeType("Expression") && !this.isJSXElement() || parentPath.isForStatement() && "init" === this.key)
            return this.node && nodes.push(this.node), this.replaceExpressionWithStatements(nodes);
          if (Array.isArray(this.container))
            return this._containerInsertBefore(nodes);
          if (this.isStatementOrBlock()) {
            const node = this.node, shouldInsertCurrentNode = node && (!this.isExpressionStatement() || null != node.expression);
            return this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : [])), this.unshiftContainer("body", nodes);
          }
          throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
        }, exports2.pushContainer = function(listKey, nodes) {
          this._assertUnremoved();
          const verifiedNodes = this._verifyNodeList(nodes), container = this.node[listKey];
          return _index.default.get({ parentPath: this, parent: this.node, container, listKey, key: container.length }).setContext(this.context).replaceWithMultiple(verifiedNodes);
        }, exports2.unshiftContainer = function(listKey, nodes) {
          this._assertUnremoved(), nodes = this._verifyNodeList(nodes);
          return _index.default.get({ parentPath: this, parent: this.node, container: this.node[listKey], listKey, key: 0 }).setContext(this.context)._containerInsertBefore(nodes);
        }, exports2.updateSiblingKeys = function(fromIndex, incrementBy) {
          if (!this.parent)
            return;
          const paths = _cache.path.get(this.parent);
          for (const [, path3] of paths)
            path3.key >= fromIndex && (path3.key += incrementBy);
        };
        var _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/cache.js"), _hoister = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/lib/hoister.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { arrowFunctionExpression, assertExpression, assignmentExpression, blockStatement, callExpression, cloneNode, expressionStatement, isAssignmentExpression, isCallExpression, isExpression, isIdentifier, isSequenceExpression, isSuper, thisExpression } = _t;
        const last = (arr) => arr[arr.length - 1];
        function isHiddenInSequenceExpression(path3) {
          return isSequenceExpression(path3.parent) && (last(path3.parent.expressions) !== path3.node || isHiddenInSequenceExpression(path3.parentPath));
        }
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/removal.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._assertUnremoved = function() {
          if (this.removed)
            throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
        }, exports2._callRemovalHooks = function() {
          for (const fn of _removalHooks.hooks)
            if (fn(this, this.parentPath))
              return true;
        }, exports2._markRemoved = function() {
          this._traverseFlags |= _index.SHOULD_SKIP | _index.REMOVED, this.parent && _cache.path.get(this.parent).delete(this.node);
          this.node = null;
        }, exports2._remove = function() {
          Array.isArray(this.container) ? (this.container.splice(this.key, 1), this.updateSiblingKeys(this.key, -1)) : this._replaceWith(null);
        }, exports2._removeFromScope = function() {
          const bindings = this.getBindingIdentifiers();
          Object.keys(bindings).forEach((name) => this.scope.removeBinding(name));
        }, exports2.remove = function() {
          var _this$opts;
          this._assertUnremoved(), this.resync(), null != (_this$opts = this.opts) && _this$opts.noScope || this._removeFromScope();
          if (this._callRemovalHooks())
            return void this._markRemoved();
          this.shareCommentsWithSiblings(), this._remove(), this._markRemoved();
        };
        var _removalHooks = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/lib/removal-hooks.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/cache.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/index.js");
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/replacement.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2._replaceWith = function(node) {
          var _pathCache$get2;
          if (!this.container)
            throw new ReferenceError("Container is falsy");
          this.inList ? validate(this.parent, this.key, [node]) : validate(this.parent, this.key, node);
          this.debug(`Replace with ${null == node ? void 0 : node.type}`), null == (_pathCache$get2 = _cache.path.get(this.parent)) || _pathCache$get2.set(node, this).delete(this.node), this.node = this.container[this.key] = node;
        }, exports2.replaceExpressionWithStatements = function(nodes) {
          this.resync();
          const nodesAsSequenceExpression = toSequenceExpression(nodes, this.scope);
          if (nodesAsSequenceExpression)
            return this.replaceWith(nodesAsSequenceExpression)[0].get("expressions");
          const functionParent = this.getFunctionParent(), isParentAsync = null == functionParent ? void 0 : functionParent.is("async"), isParentGenerator = null == functionParent ? void 0 : functionParent.is("generator"), container = arrowFunctionExpression([], blockStatement(nodes));
          this.replaceWith(callExpression(container, []));
          const callee = this.get("callee");
          (0, _helperHoistVariables.default)(callee.get("body"), (id) => {
            this.scope.push({ id });
          }, "var");
          const completionRecords = this.get("callee").getCompletionRecords();
          for (const path3 of completionRecords) {
            if (!path3.isExpressionStatement())
              continue;
            const loop = path3.findParent((path4) => path4.isLoop());
            if (loop) {
              let uid = loop.getData("expressionReplacementReturnUid");
              uid ? uid = identifier(uid.name) : (uid = callee.scope.generateDeclaredUidIdentifier("ret"), callee.get("body").pushContainer("body", returnStatement(cloneNode(uid))), loop.setData("expressionReplacementReturnUid", uid)), path3.get("expression").replaceWith(assignmentExpression("=", cloneNode(uid), path3.node.expression));
            } else
              path3.replaceWith(returnStatement(path3.node.expression));
          }
          callee.arrowFunctionToExpression();
          const newCallee = callee, needToAwaitFunction = isParentAsync && _index.default.hasType(this.get("callee.body").node, "AwaitExpression", FUNCTION_TYPES), needToYieldFunction = isParentGenerator && _index.default.hasType(this.get("callee.body").node, "YieldExpression", FUNCTION_TYPES);
          needToAwaitFunction && (newCallee.set("async", true), needToYieldFunction || this.replaceWith(awaitExpression(this.node)));
          needToYieldFunction && (newCallee.set("generator", true), this.replaceWith(yieldExpression(this.node, true)));
          return newCallee.get("body.body");
        }, exports2.replaceInline = function(nodes) {
          if (this.resync(), Array.isArray(nodes)) {
            if (Array.isArray(this.container)) {
              nodes = this._verifyNodeList(nodes);
              const paths = this._containerInsertAfter(nodes);
              return this.remove(), paths;
            }
            return this.replaceWithMultiple(nodes);
          }
          return this.replaceWith(nodes);
        }, exports2.replaceWith = function(replacementPath) {
          if (this.resync(), this.removed)
            throw new Error("You can't replace this node, we've already removed it");
          let replacement = replacementPath instanceof _index2.default ? replacementPath.node : replacementPath;
          if (!replacement)
            throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
          if (this.node === replacement)
            return [this];
          if (this.isProgram() && !isProgram(replacement))
            throw new Error("You can only replace a Program root node with another Program node");
          if (Array.isArray(replacement))
            throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
          if ("string" == typeof replacement)
            throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
          let nodePath2 = "";
          this.isNodeType("Statement") && isExpression(replacement) && (this.canHaveVariableDeclarationOrExpression() || this.canSwapBetweenExpressionAndStatement(replacement) || this.parentPath.isExportDefaultDeclaration() || (replacement = expressionStatement(replacement), nodePath2 = "expression"));
          if (this.isNodeType("Expression") && isStatement(replacement) && !this.canHaveVariableDeclarationOrExpression() && !this.canSwapBetweenExpressionAndStatement(replacement))
            return this.replaceExpressionWithStatements([replacement]);
          const oldNode = this.node;
          oldNode && (inheritsComments(replacement, oldNode), removeComments(oldNode));
          return this._replaceWith(replacement), this.type = replacement.type, this.setScope(), this.requeue(), [nodePath2 ? this.get(nodePath2) : this];
        }, exports2.replaceWithMultiple = function(nodes) {
          var _pathCache$get;
          this.resync(), nodes = this._verifyNodeList(nodes), inheritLeadingComments(nodes[0], this.node), inheritTrailingComments(nodes[nodes.length - 1], this.node), null == (_pathCache$get = _cache.path.get(this.parent)) || _pathCache$get.delete(this.node), this.node = this.container[this.key] = null;
          const paths = this.insertAfter(nodes);
          this.node ? this.requeue() : this.remove();
          return paths;
        }, exports2.replaceWithSourceString = function(replacement) {
          let ast;
          this.resync();
          try {
            replacement = `(${replacement})`, ast = (0, _parser.parse)(replacement);
          } catch (err) {
            const loc = err.loc;
            throw loc && (err.message += " - make sure this is an expression.\n" + (0, _codeFrame.codeFrameColumns)(replacement, { start: { line: loc.line, column: loc.column + 1 } }), err.code = "BABEL_REPLACE_SOURCE_ERROR"), err;
          }
          const expressionAST = ast.program.body[0].expression;
          return _index.default.removeProperties(expressionAST), this.replaceWith(expressionAST);
        };
        var _codeFrame = __webpack_require__2("./stubs/babel_codeframe.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/index.js"), _index2 = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/index.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/cache.js"), _parser = __webpack_require__2("./node_modules/.pnpm/@babel+parser@7.19.1/node_modules/@babel/parser/lib/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _helperHoistVariables = __webpack_require__2("./node_modules/.pnpm/@babel+helper-hoist-variables@7.18.6/node_modules/@babel/helper-hoist-variables/lib/index.js");
        const { FUNCTION_TYPES, arrowFunctionExpression, assignmentExpression, awaitExpression, blockStatement, callExpression, cloneNode, expressionStatement, identifier, inheritLeadingComments, inheritTrailingComments, inheritsComments, isExpression, isProgram, isStatement, removeComments, returnStatement, toSequenceExpression, validate, yieldExpression } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/scope/binding.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        exports2.default = class {
          constructor({ identifier, scope, path: path3, kind }) {
            this.identifier = void 0, this.scope = void 0, this.path = void 0, this.kind = void 0, this.constantViolations = [], this.constant = true, this.referencePaths = [], this.referenced = false, this.references = 0, this.identifier = identifier, this.scope = scope, this.path = path3, this.kind = kind, this.clearValue();
          }
          deoptValue() {
            this.clearValue(), this.hasDeoptedValue = true;
          }
          setValue(value) {
            this.hasDeoptedValue || (this.hasValue = true, this.value = value);
          }
          clearValue() {
            this.hasDeoptedValue = false, this.hasValue = false, this.value = null;
          }
          reassign(path3) {
            this.constant = false, -1 === this.constantViolations.indexOf(path3) && this.constantViolations.push(path3);
          }
          reference(path3) {
            -1 === this.referencePaths.indexOf(path3) && (this.referenced = true, this.references++, this.referencePaths.push(path3));
          }
          dereference() {
            this.references--, this.referenced = !!this.references;
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/scope/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _renamer = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/scope/lib/renamer.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/index.js"), _binding = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/scope/binding.js"), _globals = __webpack_require__2("./node_modules/.pnpm/globals@11.12.0/node_modules/globals/index.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _cache = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/cache.js");
        const { NOT_LOCAL_BINDING, callExpression, cloneNode, getBindingIdentifiers, identifier, isArrayExpression, isBinary, isClass, isClassBody, isClassDeclaration, isExportAllDeclaration, isExportDefaultDeclaration, isExportNamedDeclaration, isFunctionDeclaration, isIdentifier, isImportDeclaration, isLiteral, isMethod, isModuleDeclaration, isModuleSpecifier, isNullLiteral, isObjectExpression, isProperty, isPureish, isRegExpLiteral, isSuper, isTaggedTemplateExpression, isTemplateLiteral, isThisExpression, isUnaryExpression, isVariableDeclaration, matchesPattern, memberExpression, numericLiteral, toIdentifier, unaryExpression, variableDeclaration, variableDeclarator, isRecordExpression, isTupleExpression, isObjectProperty, isTopicReference, isMetaProperty, isPrivateName } = _t;
        function gatherNodeParts(node, parts) {
          switch (null == node ? void 0 : node.type) {
            default:
              if (isModuleDeclaration(node))
                if ((isExportAllDeclaration(node) || isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.source)
                  gatherNodeParts(node.source, parts);
                else if ((isExportNamedDeclaration(node) || isImportDeclaration(node)) && node.specifiers && node.specifiers.length)
                  for (const e of node.specifiers)
                    gatherNodeParts(e, parts);
                else
                  (isExportDefaultDeclaration(node) || isExportNamedDeclaration(node)) && node.declaration && gatherNodeParts(node.declaration, parts);
              else
                isModuleSpecifier(node) ? gatherNodeParts(node.local, parts) : !isLiteral(node) || isNullLiteral(node) || isRegExpLiteral(node) || isTemplateLiteral(node) || parts.push(node.value);
              break;
            case "MemberExpression":
            case "OptionalMemberExpression":
            case "JSXMemberExpression":
              gatherNodeParts(node.object, parts), gatherNodeParts(node.property, parts);
              break;
            case "Identifier":
            case "JSXIdentifier":
              parts.push(node.name);
              break;
            case "CallExpression":
            case "OptionalCallExpression":
            case "NewExpression":
              gatherNodeParts(node.callee, parts);
              break;
            case "ObjectExpression":
            case "ObjectPattern":
              for (const e of node.properties)
                gatherNodeParts(e, parts);
              break;
            case "SpreadElement":
            case "RestElement":
            case "UnaryExpression":
            case "UpdateExpression":
              gatherNodeParts(node.argument, parts);
              break;
            case "ObjectProperty":
            case "ObjectMethod":
            case "ClassProperty":
            case "ClassMethod":
            case "ClassPrivateProperty":
            case "ClassPrivateMethod":
              gatherNodeParts(node.key, parts);
              break;
            case "ThisExpression":
              parts.push("this");
              break;
            case "Super":
              parts.push("super");
              break;
            case "Import":
              parts.push("import");
              break;
            case "DoExpression":
              parts.push("do");
              break;
            case "YieldExpression":
              parts.push("yield"), gatherNodeParts(node.argument, parts);
              break;
            case "AwaitExpression":
              parts.push("await"), gatherNodeParts(node.argument, parts);
              break;
            case "AssignmentExpression":
              gatherNodeParts(node.left, parts);
              break;
            case "VariableDeclarator":
            case "FunctionExpression":
            case "FunctionDeclaration":
            case "ClassExpression":
            case "ClassDeclaration":
            case "PrivateName":
              gatherNodeParts(node.id, parts);
              break;
            case "ParenthesizedExpression":
              gatherNodeParts(node.expression, parts);
              break;
            case "MetaProperty":
              gatherNodeParts(node.meta, parts), gatherNodeParts(node.property, parts);
              break;
            case "JSXElement":
              gatherNodeParts(node.openingElement, parts);
              break;
            case "JSXOpeningElement":
              gatherNodeParts(node.name, parts);
              break;
            case "JSXFragment":
              gatherNodeParts(node.openingFragment, parts);
              break;
            case "JSXOpeningFragment":
              parts.push("Fragment");
              break;
            case "JSXNamespacedName":
              gatherNodeParts(node.namespace, parts), gatherNodeParts(node.name, parts);
          }
        }
        const collectorVisitor = { ForStatement(path3) {
          const declar = path3.get("init");
          if (declar.isVar()) {
            const { scope } = path3;
            (scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", declar);
          }
        }, Declaration(path3) {
          if (path3.isBlockScoped())
            return;
          if (path3.isImportDeclaration())
            return;
          if (path3.isExportDeclaration())
            return;
          (path3.scope.getFunctionParent() || path3.scope.getProgramParent()).registerDeclaration(path3);
        }, ImportDeclaration(path3) {
          path3.scope.getBlockParent().registerDeclaration(path3);
        }, ReferencedIdentifier(path3, state) {
          state.references.push(path3);
        }, ForXStatement(path3, state) {
          const left = path3.get("left");
          if (left.isPattern() || left.isIdentifier())
            state.constantViolations.push(path3);
          else if (left.isVar()) {
            const { scope } = path3;
            (scope.getFunctionParent() || scope.getProgramParent()).registerBinding("var", left);
          }
        }, ExportDeclaration: { exit(path3) {
          const { node, scope } = path3;
          if (isExportAllDeclaration(node))
            return;
          const declar = node.declaration;
          if (isClassDeclaration(declar) || isFunctionDeclaration(declar)) {
            const id = declar.id;
            if (!id)
              return;
            const binding = scope.getBinding(id.name);
            null == binding || binding.reference(path3);
          } else if (isVariableDeclaration(declar))
            for (const decl of declar.declarations)
              for (const name of Object.keys(getBindingIdentifiers(decl))) {
                const binding = scope.getBinding(name);
                null == binding || binding.reference(path3);
              }
        } }, LabeledStatement(path3) {
          path3.scope.getBlockParent().registerDeclaration(path3);
        }, AssignmentExpression(path3, state) {
          state.assignments.push(path3);
        }, UpdateExpression(path3, state) {
          state.constantViolations.push(path3);
        }, UnaryExpression(path3, state) {
          "delete" === path3.node.operator && state.constantViolations.push(path3);
        }, BlockScoped(path3) {
          let scope = path3.scope;
          scope.path === path3 && (scope = scope.parent);
          if (scope.getBlockParent().registerDeclaration(path3), path3.isClassDeclaration() && path3.node.id) {
            const name = path3.node.id.name;
            path3.scope.bindings[name] = path3.scope.parent.getBinding(name);
          }
        }, CatchClause(path3) {
          path3.scope.registerBinding("let", path3);
        }, Function(path3) {
          const params = path3.get("params");
          for (const param of params)
            path3.scope.registerBinding("param", param);
          path3.isFunctionExpression() && path3.has("id") && !path3.get("id").node[NOT_LOCAL_BINDING] && path3.scope.registerBinding("local", path3.get("id"), path3);
        }, ClassExpression(path3) {
          path3.has("id") && !path3.get("id").node[NOT_LOCAL_BINDING] && path3.scope.registerBinding("local", path3);
        } };
        let uid = 0;
        class Scope3 {
          constructor(path3) {
            this.uid = void 0, this.path = void 0, this.block = void 0, this.labels = void 0, this.inited = void 0, this.bindings = void 0, this.references = void 0, this.globals = void 0, this.uids = void 0, this.data = void 0, this.crawling = void 0;
            const { node } = path3, cached = _cache.scope.get(node);
            if ((null == cached ? void 0 : cached.path) === path3)
              return cached;
            _cache.scope.set(node, this), this.uid = uid++, this.block = node, this.path = path3, this.labels = /* @__PURE__ */ new Map(), this.inited = false;
          }
          get parent() {
            var _parent;
            let parent, path3 = this.path;
            do {
              const shouldSkip = "key" === path3.key || "decorators" === path3.listKey;
              path3 = path3.parentPath, shouldSkip && path3.isMethod() && (path3 = path3.parentPath), path3 && path3.isScope() && (parent = path3);
            } while (path3 && !parent);
            return null == (_parent = parent) ? void 0 : _parent.scope;
          }
          get parentBlock() {
            return this.path.parent;
          }
          get hub() {
            return this.path.hub;
          }
          traverse(node, opts, state) {
            (0, _index.default)(node, opts, this, state, this.path);
          }
          generateDeclaredUidIdentifier(name) {
            const id = this.generateUidIdentifier(name);
            return this.push({ id }), cloneNode(id);
          }
          generateUidIdentifier(name) {
            return identifier(this.generateUid(name));
          }
          generateUid(name = "temp") {
            let uid2;
            name = toIdentifier(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");
            let i = 1;
            do {
              uid2 = this._generateUid(name, i), i++;
            } while (this.hasLabel(uid2) || this.hasBinding(uid2) || this.hasGlobal(uid2) || this.hasReference(uid2));
            const program = this.getProgramParent();
            return program.references[uid2] = true, program.uids[uid2] = true, uid2;
          }
          _generateUid(name, i) {
            let id = name;
            return i > 1 && (id += i), `_${id}`;
          }
          generateUidBasedOnNode(node, defaultName) {
            const parts = [];
            gatherNodeParts(node, parts);
            let id = parts.join("$");
            return id = id.replace(/^_/, "") || defaultName || "ref", this.generateUid(id.slice(0, 20));
          }
          generateUidIdentifierBasedOnNode(node, defaultName) {
            return identifier(this.generateUidBasedOnNode(node, defaultName));
          }
          isStatic(node) {
            if (isThisExpression(node) || isSuper(node) || isTopicReference(node))
              return true;
            if (isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              return binding ? binding.constant : this.hasBinding(node.name);
            }
            return false;
          }
          maybeGenerateMemoised(node, dontPush) {
            if (this.isStatic(node))
              return null;
            {
              const id = this.generateUidIdentifierBasedOnNode(node);
              return dontPush ? id : (this.push({ id }), cloneNode(id));
            }
          }
          checkBlockScopedCollisions(local, kind, name, id) {
            if ("param" === kind)
              return;
            if ("local" === local.kind)
              return;
            if ("let" === kind || "let" === local.kind || "const" === local.kind || "module" === local.kind || "param" === local.kind && "const" === kind)
              throw this.hub.buildError(id, `Duplicate declaration "${name}"`, TypeError);
          }
          rename(oldName, newName, block) {
            const binding = this.getBinding(oldName);
            if (binding)
              return newName = newName || this.generateUidIdentifier(oldName).name, new _renamer.default(binding, oldName, newName).rename(block);
          }
          _renameFromMap(map, oldName, newName, value) {
            map[oldName] && (map[newName] = value, map[oldName] = null);
          }
          dump() {
            const sep = "-".repeat(60);
            console.log(sep);
            let scope = this;
            do {
              console.log("#", scope.block.type);
              for (const name of Object.keys(scope.bindings)) {
                const binding = scope.bindings[name];
                console.log(" -", name, { constant: binding.constant, references: binding.references, violations: binding.constantViolations.length, kind: binding.kind });
              }
            } while (scope = scope.parent);
            console.log(sep);
          }
          toArray(node, i, arrayLikeIsIterable) {
            if (isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              if (null != binding && binding.constant && binding.path.isGenericType("Array"))
                return node;
            }
            if (isArrayExpression(node))
              return node;
            if (isIdentifier(node, { name: "arguments" }))
              return callExpression(memberExpression(memberExpression(memberExpression(identifier("Array"), identifier("prototype")), identifier("slice")), identifier("call")), [node]);
            let helperName;
            const args = [node];
            return true === i ? helperName = "toConsumableArray" : i ? (args.push(numericLiteral(i)), helperName = "slicedToArray") : helperName = "toArray", arrayLikeIsIterable && (args.unshift(this.hub.addHelper(helperName)), helperName = "maybeArrayLike"), callExpression(this.hub.addHelper(helperName), args);
          }
          hasLabel(name) {
            return !!this.getLabel(name);
          }
          getLabel(name) {
            return this.labels.get(name);
          }
          registerLabel(path3) {
            this.labels.set(path3.node.label.name, path3);
          }
          registerDeclaration(path3) {
            if (path3.isLabeledStatement())
              this.registerLabel(path3);
            else if (path3.isFunctionDeclaration())
              this.registerBinding("hoisted", path3.get("id"), path3);
            else if (path3.isVariableDeclaration()) {
              const declarations = path3.get("declarations");
              for (const declar of declarations)
                this.registerBinding(path3.node.kind, declar);
            } else if (path3.isClassDeclaration()) {
              if (path3.node.declare)
                return;
              this.registerBinding("let", path3);
            } else if (path3.isImportDeclaration()) {
              const specifiers = path3.get("specifiers");
              for (const specifier of specifiers)
                this.registerBinding("module", specifier);
            } else if (path3.isExportDeclaration()) {
              const declar = path3.get("declaration");
              (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) && this.registerDeclaration(declar);
            } else
              this.registerBinding("unknown", path3);
          }
          buildUndefinedNode() {
            return unaryExpression("void", numericLiteral(0), true);
          }
          registerConstantViolation(path3) {
            const ids = path3.getBindingIdentifiers();
            for (const name of Object.keys(ids)) {
              const binding = this.getBinding(name);
              binding && binding.reassign(path3);
            }
          }
          registerBinding(kind, path3, bindingPath = path3) {
            if (!kind)
              throw new ReferenceError("no `kind`");
            if (path3.isVariableDeclaration()) {
              const declarators = path3.get("declarations");
              for (const declar of declarators)
                this.registerBinding(kind, declar);
              return;
            }
            const parent = this.getProgramParent(), ids = path3.getOuterBindingIdentifiers(true);
            for (const name of Object.keys(ids)) {
              parent.references[name] = true;
              for (const id of ids[name]) {
                const local = this.getOwnBinding(name);
                if (local) {
                  if (local.identifier === id)
                    continue;
                  this.checkBlockScopedCollisions(local, kind, name, id);
                }
                local ? this.registerConstantViolation(bindingPath) : this.bindings[name] = new _binding.default({ identifier: id, scope: this, path: bindingPath, kind });
              }
            }
          }
          addGlobal(node) {
            this.globals[node.name] = node;
          }
          hasUid(name) {
            let scope = this;
            do {
              if (scope.uids[name])
                return true;
            } while (scope = scope.parent);
            return false;
          }
          hasGlobal(name) {
            let scope = this;
            do {
              if (scope.globals[name])
                return true;
            } while (scope = scope.parent);
            return false;
          }
          hasReference(name) {
            return !!this.getProgramParent().references[name];
          }
          isPure(node, constantsOnly) {
            if (isIdentifier(node)) {
              const binding = this.getBinding(node.name);
              return !!binding && (!constantsOnly || binding.constant);
            }
            if (isThisExpression(node) || isMetaProperty(node) || isTopicReference(node) || isPrivateName(node))
              return true;
            var _node$decorators, _node$decorators2, _node$decorators3;
            if (isClass(node))
              return !(node.superClass && !this.isPure(node.superClass, constantsOnly)) && (!((null == (_node$decorators = node.decorators) ? void 0 : _node$decorators.length) > 0) && this.isPure(node.body, constantsOnly));
            if (isClassBody(node)) {
              for (const method of node.body)
                if (!this.isPure(method, constantsOnly))
                  return false;
              return true;
            }
            if (isBinary(node))
              return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
            if (isArrayExpression(node) || isTupleExpression(node)) {
              for (const elem of node.elements)
                if (null !== elem && !this.isPure(elem, constantsOnly))
                  return false;
              return true;
            }
            if (isObjectExpression(node) || isRecordExpression(node)) {
              for (const prop of node.properties)
                if (!this.isPure(prop, constantsOnly))
                  return false;
              return true;
            }
            if (isMethod(node))
              return !(node.computed && !this.isPure(node.key, constantsOnly)) && !((null == (_node$decorators2 = node.decorators) ? void 0 : _node$decorators2.length) > 0);
            if (isProperty(node))
              return !(node.computed && !this.isPure(node.key, constantsOnly)) && (!((null == (_node$decorators3 = node.decorators) ? void 0 : _node$decorators3.length) > 0) && !((isObjectProperty(node) || node.static) && null !== node.value && !this.isPure(node.value, constantsOnly)));
            if (isUnaryExpression(node))
              return this.isPure(node.argument, constantsOnly);
            if (isTaggedTemplateExpression(node))
              return matchesPattern(node.tag, "String.raw") && !this.hasBinding("String", true) && this.isPure(node.quasi, constantsOnly);
            if (isTemplateLiteral(node)) {
              for (const expression of node.expressions)
                if (!this.isPure(expression, constantsOnly))
                  return false;
              return true;
            }
            return isPureish(node);
          }
          setData(key, val) {
            return this.data[key] = val;
          }
          getData(key) {
            let scope = this;
            do {
              const data2 = scope.data[key];
              if (null != data2)
                return data2;
            } while (scope = scope.parent);
          }
          removeData(key) {
            let scope = this;
            do {
              null != scope.data[key] && (scope.data[key] = null);
            } while (scope = scope.parent);
          }
          init() {
            this.inited || (this.inited = true, this.crawl());
          }
          crawl() {
            const path3 = this.path;
            this.references = /* @__PURE__ */ Object.create(null), this.bindings = /* @__PURE__ */ Object.create(null), this.globals = /* @__PURE__ */ Object.create(null), this.uids = /* @__PURE__ */ Object.create(null), this.data = /* @__PURE__ */ Object.create(null);
            const programParent = this.getProgramParent();
            if (programParent.crawling)
              return;
            const state = { references: [], constantViolations: [], assignments: [] };
            if (this.crawling = true, "Program" !== path3.type && collectorVisitor._exploded) {
              for (const visit of collectorVisitor.enter)
                visit(path3, state);
              const typeVisitors = collectorVisitor[path3.type];
              if (typeVisitors)
                for (const visit of typeVisitors.enter)
                  visit(path3, state);
            }
            path3.traverse(collectorVisitor, state), this.crawling = false;
            for (const path4 of state.assignments) {
              const ids = path4.getBindingIdentifiers();
              for (const name of Object.keys(ids))
                path4.scope.getBinding(name) || programParent.addGlobal(ids[name]);
              path4.scope.registerConstantViolation(path4);
            }
            for (const ref2 of state.references) {
              const binding = ref2.scope.getBinding(ref2.node.name);
              binding ? binding.reference(ref2) : programParent.addGlobal(ref2.node);
            }
            for (const path4 of state.constantViolations)
              path4.scope.registerConstantViolation(path4);
          }
          push(opts) {
            let path3 = this.path;
            path3.isPattern() ? path3 = this.getPatternParent().path : path3.isBlockStatement() || path3.isProgram() || (path3 = this.getBlockParent().path), path3.isSwitchStatement() && (path3 = (this.getFunctionParent() || this.getProgramParent()).path), (path3.isLoop() || path3.isCatchClause() || path3.isFunction()) && (path3.ensureBlock(), path3 = path3.get("body"));
            const unique2 = opts.unique, kind = opts.kind || "var", blockHoist = null == opts._blockHoist ? 2 : opts._blockHoist, dataKey = `declaration:${kind}:${blockHoist}`;
            let declarPath = !unique2 && path3.getData(dataKey);
            if (!declarPath) {
              const declar = variableDeclaration(kind, []);
              declar._blockHoist = blockHoist, [declarPath] = path3.unshiftContainer("body", [declar]), unique2 || path3.setData(dataKey, declarPath);
            }
            const declarator = variableDeclarator(opts.id, opts.init), len = declarPath.node.declarations.push(declarator);
            path3.scope.registerBinding(kind, declarPath.get("declarations")[len - 1]);
          }
          getProgramParent() {
            let scope = this;
            do {
              if (scope.path.isProgram())
                return scope;
            } while (scope = scope.parent);
            throw new Error("Couldn't find a Program");
          }
          getFunctionParent() {
            let scope = this;
            do {
              if (scope.path.isFunctionParent())
                return scope;
            } while (scope = scope.parent);
            return null;
          }
          getBlockParent() {
            let scope = this;
            do {
              if (scope.path.isBlockParent())
                return scope;
            } while (scope = scope.parent);
            throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
          }
          getPatternParent() {
            let scope = this;
            do {
              if (!scope.path.isPattern())
                return scope.getBlockParent();
            } while (scope = scope.parent.parent);
            throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
          }
          getAllBindings() {
            const ids = /* @__PURE__ */ Object.create(null);
            let scope = this;
            do {
              for (const key of Object.keys(scope.bindings))
                key in ids == false && (ids[key] = scope.bindings[key]);
              scope = scope.parent;
            } while (scope);
            return ids;
          }
          getAllBindingsOfKind(...kinds) {
            const ids = /* @__PURE__ */ Object.create(null);
            for (const kind of kinds) {
              let scope = this;
              do {
                for (const name of Object.keys(scope.bindings)) {
                  const binding = scope.bindings[name];
                  binding.kind === kind && (ids[name] = binding);
                }
                scope = scope.parent;
              } while (scope);
            }
            return ids;
          }
          bindingIdentifierEquals(name, node) {
            return this.getBindingIdentifier(name) === node;
          }
          getBinding(name) {
            let previousPath, scope = this;
            do {
              const binding = scope.getOwnBinding(name);
              var _previousPath;
              if (binding) {
                if (null == (_previousPath = previousPath) || !_previousPath.isPattern() || "param" === binding.kind || "local" === binding.kind)
                  return binding;
              } else if (!binding && "arguments" === name && scope.path.isFunction() && !scope.path.isArrowFunctionExpression())
                break;
              previousPath = scope.path;
            } while (scope = scope.parent);
          }
          getOwnBinding(name) {
            return this.bindings[name];
          }
          getBindingIdentifier(name) {
            var _this$getBinding;
            return null == (_this$getBinding = this.getBinding(name)) ? void 0 : _this$getBinding.identifier;
          }
          getOwnBindingIdentifier(name) {
            const binding = this.bindings[name];
            return null == binding ? void 0 : binding.identifier;
          }
          hasOwnBinding(name) {
            return !!this.getOwnBinding(name);
          }
          hasBinding(name, noGlobals) {
            return !!name && (!!this.hasOwnBinding(name) || (!!this.parentHasBinding(name, noGlobals) || (!!this.hasUid(name) || (!(noGlobals || !Scope3.globals.includes(name)) || !(noGlobals || !Scope3.contextVariables.includes(name))))));
          }
          parentHasBinding(name, noGlobals) {
            var _this$parent;
            return null == (_this$parent = this.parent) ? void 0 : _this$parent.hasBinding(name, noGlobals);
          }
          moveBindingTo(name, scope) {
            const info = this.getBinding(name);
            info && (info.scope.removeOwnBinding(name), info.scope = scope, scope.bindings[name] = info);
          }
          removeOwnBinding(name) {
            delete this.bindings[name];
          }
          removeBinding(name) {
            var _this$getBinding2;
            null == (_this$getBinding2 = this.getBinding(name)) || _this$getBinding2.scope.removeOwnBinding(name);
            let scope = this;
            do {
              scope.uids[name] && (scope.uids[name] = false);
            } while (scope = scope.parent);
          }
        }
        exports2.default = Scope3, Scope3.globals = Object.keys(_globals.builtin), Scope3.contextVariables = ["arguments", "undefined", "Infinity", "NaN"];
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/scope/lib/renamer.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _helperSplitExportDeclaration = __webpack_require__2("./node_modules/.pnpm/@babel+helper-split-export-declaration@7.18.6/node_modules/@babel/helper-split-export-declaration/lib/index.js"), t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js"), _helperEnvironmentVisitor = __webpack_require__2("./node_modules/.pnpm/@babel+helper-environment-visitor@7.18.9/node_modules/@babel/helper-environment-visitor/lib/index.js");
        const renameVisitor = { ReferencedIdentifier({ node }, state) {
          node.name === state.oldName && (node.name = state.newName);
        }, Scope(path3, state) {
          path3.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier) || (path3.skip(), path3.isMethod() && (0, _helperEnvironmentVisitor.requeueComputedKeyAndDecorators)(path3));
        }, "AssignmentExpression|Declaration|VariableDeclarator"(path3, state) {
          if (path3.isVariableDeclaration())
            return;
          const ids = path3.getOuterBindingIdentifiers();
          for (const name in ids)
            name === state.oldName && (ids[name].name = state.newName);
        } };
        exports2.default = class {
          constructor(binding, oldName, newName) {
            this.newName = newName, this.oldName = oldName, this.binding = binding;
          }
          maybeConvertFromExportDeclaration(parentDeclar) {
            const maybeExportDeclar = parentDeclar.parentPath;
            if (maybeExportDeclar.isExportDeclaration()) {
              if (maybeExportDeclar.isExportDefaultDeclaration()) {
                const { declaration } = maybeExportDeclar.node;
                if (t.isDeclaration(declaration) && !declaration.id)
                  return;
              }
              maybeExportDeclar.isExportAllDeclaration() || (0, _helperSplitExportDeclaration.default)(maybeExportDeclar);
            }
          }
          maybeConvertFromClassFunctionDeclaration(path3) {
            return path3;
          }
          maybeConvertFromClassFunctionExpression(path3) {
            return path3;
          }
          rename(block) {
            const { binding, oldName, newName } = this, { scope, path: path3 } = binding, parentDeclar = path3.find((path4) => path4.isDeclaration() || path4.isFunctionExpression() || path4.isClassExpression());
            if (parentDeclar) {
              parentDeclar.getOuterBindingIdentifiers()[oldName] === binding.identifier && this.maybeConvertFromExportDeclaration(parentDeclar);
            }
            const blockToTraverse = block || scope.block;
            "SwitchStatement" === (null == blockToTraverse ? void 0 : blockToTraverse.type) ? blockToTraverse.cases.forEach((c) => {
              scope.traverse(c, renameVisitor, this);
            }) : scope.traverse(blockToTraverse, renameVisitor, this), block || (scope.removeOwnBinding(oldName), scope.bindings[newName] = binding, this.binding.identifier.name = newName), parentDeclar && (this.maybeConvertFromClassFunctionDeclaration(path3), this.maybeConvertFromClassFunctionExpression(path3));
          }
        };
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/traverse-node.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.traverseNode = function(node, opts, scope, state, path3, skipKeys) {
          const keys = VISITOR_KEYS[node.type];
          if (!keys)
            return false;
          const context = new _context.default(scope, opts, state, path3);
          for (const key of keys)
            if ((!skipKeys || !skipKeys[key]) && context.visit(node, key))
              return true;
          return false;
        };
        var _context = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/context.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { VISITOR_KEYS } = _t;
      }, "./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/visitors.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.explode = explode, exports2.merge = function(visitors, states = [], wrapper) {
          const rootVisitor = {};
          for (let i = 0; i < visitors.length; i++) {
            const visitor = visitors[i], state = states[i];
            explode(visitor);
            for (const type of Object.keys(visitor)) {
              let visitorType = visitor[type];
              (state || wrapper) && (visitorType = wrapWithStateOrWrapper(visitorType, state, wrapper));
              mergePair(rootVisitor[type] || (rootVisitor[type] = {}), visitorType);
            }
          }
          return rootVisitor;
        }, exports2.verify = verify;
        var virtualTypes = __webpack_require__2("./node_modules/.pnpm/@babel+traverse@7.19.1/node_modules/@babel/traverse/lib/path/lib/virtual-types.js"), _t = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
        const { DEPRECATED_KEYS, FLIPPED_ALIAS_KEYS, TYPES } = _t;
        function explode(visitor) {
          if (visitor._exploded)
            return visitor;
          visitor._exploded = true;
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType))
              continue;
            const parts = nodeType.split("|");
            if (1 === parts.length)
              continue;
            const fns = visitor[nodeType];
            delete visitor[nodeType];
            for (const part of parts)
              visitor[part] = fns;
          }
          verify(visitor), delete visitor.__esModule, function(obj) {
            for (const key of Object.keys(obj)) {
              if (shouldIgnoreKey(key))
                continue;
              const fns = obj[key];
              "function" == typeof fns && (obj[key] = { enter: fns });
            }
          }(visitor), ensureCallbackArrays(visitor);
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType))
              continue;
            if (!(nodeType in virtualTypes))
              continue;
            const fns = visitor[nodeType];
            for (const type of Object.keys(fns))
              fns[type] = wrapCheck(nodeType, fns[type]);
            delete visitor[nodeType];
            const types2 = virtualTypes[nodeType];
            if (null !== types2)
              for (const type of types2)
                visitor[type] ? mergePair(visitor[type], fns) : visitor[type] = fns;
            else
              mergePair(visitor, fns);
          }
          for (const nodeType of Object.keys(visitor)) {
            if (shouldIgnoreKey(nodeType))
              continue;
            const fns = visitor[nodeType];
            let aliases = FLIPPED_ALIAS_KEYS[nodeType];
            const deprecatedKey = DEPRECATED_KEYS[nodeType];
            if (deprecatedKey && (console.trace(`Visitor defined for ${nodeType} but it has been renamed to ${deprecatedKey}`), aliases = [deprecatedKey]), aliases) {
              delete visitor[nodeType];
              for (const alias of aliases) {
                const existing = visitor[alias];
                existing ? mergePair(existing, fns) : visitor[alias] = Object.assign({}, fns);
              }
            }
          }
          for (const nodeType of Object.keys(visitor))
            shouldIgnoreKey(nodeType) || ensureCallbackArrays(visitor[nodeType]);
          return visitor;
        }
        function verify(visitor) {
          if (!visitor._verified) {
            if ("function" == typeof visitor)
              throw new Error("You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?");
            for (const nodeType of Object.keys(visitor)) {
              if ("enter" !== nodeType && "exit" !== nodeType || validateVisitorMethods(nodeType, visitor[nodeType]), shouldIgnoreKey(nodeType))
                continue;
              if (TYPES.indexOf(nodeType) < 0)
                throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type`);
              const visitors = visitor[nodeType];
              if ("object" == typeof visitors)
                for (const visitorKey of Object.keys(visitors)) {
                  if ("enter" !== visitorKey && "exit" !== visitorKey)
                    throw new Error(`You passed \`traverse()\` a visitor object with the property ${nodeType} that has the invalid property ${visitorKey}`);
                  validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors[visitorKey]);
                }
            }
            visitor._verified = true;
          }
        }
        function validateVisitorMethods(path3, val) {
          const fns = [].concat(val);
          for (const fn of fns)
            if ("function" != typeof fn)
              throw new TypeError(`Non-function found defined in ${path3} with type ${typeof fn}`);
        }
        function wrapWithStateOrWrapper(oldVisitor, state, wrapper) {
          const newVisitor = {};
          for (const key of Object.keys(oldVisitor)) {
            let fns = oldVisitor[key];
            Array.isArray(fns) && (fns = fns.map(function(fn) {
              let newFn = fn;
              return state && (newFn = function(path3) {
                return fn.call(state, path3, state);
              }), wrapper && (newFn = wrapper(state.key, key, newFn)), newFn !== fn && (newFn.toString = () => fn.toString()), newFn;
            }), newVisitor[key] = fns);
          }
          return newVisitor;
        }
        function ensureCallbackArrays(obj) {
          obj.enter && !Array.isArray(obj.enter) && (obj.enter = [obj.enter]), obj.exit && !Array.isArray(obj.exit) && (obj.exit = [obj.exit]);
        }
        function wrapCheck(nodeType, fn) {
          const newFn = function(path3) {
            if (path3[`is${nodeType}`]())
              return fn.apply(this, arguments);
          };
          return newFn.toString = () => fn.toString(), newFn;
        }
        function shouldIgnoreKey(key) {
          return "_" === key[0] || ("enter" === key || "exit" === key || "shouldSkip" === key || ("denylist" === key || "noScope" === key || "skipKeys" === key || "blacklist" === key));
        }
        function mergePair(dest, src) {
          for (const key of Object.keys(src))
            dest[key] = [].concat(dest[key] || [], src[key]);
        }
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/asserts/assertNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          if (!(0, _isNode.default)(node)) {
            var _node$type;
            const type = null != (_node$type = null == node ? void 0 : node.type) ? _node$type : JSON.stringify(node);
            throw new TypeError(`Not a valid node of type "${type}"`);
          }
        };
        var _isNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/asserts/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.assertAccessor = function(node, opts) {
          assert2("Accessor", node, opts);
        }, exports2.assertAnyTypeAnnotation = function(node, opts) {
          assert2("AnyTypeAnnotation", node, opts);
        }, exports2.assertArgumentPlaceholder = function(node, opts) {
          assert2("ArgumentPlaceholder", node, opts);
        }, exports2.assertArrayExpression = function(node, opts) {
          assert2("ArrayExpression", node, opts);
        }, exports2.assertArrayPattern = function(node, opts) {
          assert2("ArrayPattern", node, opts);
        }, exports2.assertArrayTypeAnnotation = function(node, opts) {
          assert2("ArrayTypeAnnotation", node, opts);
        }, exports2.assertArrowFunctionExpression = function(node, opts) {
          assert2("ArrowFunctionExpression", node, opts);
        }, exports2.assertAssignmentExpression = function(node, opts) {
          assert2("AssignmentExpression", node, opts);
        }, exports2.assertAssignmentPattern = function(node, opts) {
          assert2("AssignmentPattern", node, opts);
        }, exports2.assertAwaitExpression = function(node, opts) {
          assert2("AwaitExpression", node, opts);
        }, exports2.assertBigIntLiteral = function(node, opts) {
          assert2("BigIntLiteral", node, opts);
        }, exports2.assertBinary = function(node, opts) {
          assert2("Binary", node, opts);
        }, exports2.assertBinaryExpression = function(node, opts) {
          assert2("BinaryExpression", node, opts);
        }, exports2.assertBindExpression = function(node, opts) {
          assert2("BindExpression", node, opts);
        }, exports2.assertBlock = function(node, opts) {
          assert2("Block", node, opts);
        }, exports2.assertBlockParent = function(node, opts) {
          assert2("BlockParent", node, opts);
        }, exports2.assertBlockStatement = function(node, opts) {
          assert2("BlockStatement", node, opts);
        }, exports2.assertBooleanLiteral = function(node, opts) {
          assert2("BooleanLiteral", node, opts);
        }, exports2.assertBooleanLiteralTypeAnnotation = function(node, opts) {
          assert2("BooleanLiteralTypeAnnotation", node, opts);
        }, exports2.assertBooleanTypeAnnotation = function(node, opts) {
          assert2("BooleanTypeAnnotation", node, opts);
        }, exports2.assertBreakStatement = function(node, opts) {
          assert2("BreakStatement", node, opts);
        }, exports2.assertCallExpression = function(node, opts) {
          assert2("CallExpression", node, opts);
        }, exports2.assertCatchClause = function(node, opts) {
          assert2("CatchClause", node, opts);
        }, exports2.assertClass = function(node, opts) {
          assert2("Class", node, opts);
        }, exports2.assertClassAccessorProperty = function(node, opts) {
          assert2("ClassAccessorProperty", node, opts);
        }, exports2.assertClassBody = function(node, opts) {
          assert2("ClassBody", node, opts);
        }, exports2.assertClassDeclaration = function(node, opts) {
          assert2("ClassDeclaration", node, opts);
        }, exports2.assertClassExpression = function(node, opts) {
          assert2("ClassExpression", node, opts);
        }, exports2.assertClassImplements = function(node, opts) {
          assert2("ClassImplements", node, opts);
        }, exports2.assertClassMethod = function(node, opts) {
          assert2("ClassMethod", node, opts);
        }, exports2.assertClassPrivateMethod = function(node, opts) {
          assert2("ClassPrivateMethod", node, opts);
        }, exports2.assertClassPrivateProperty = function(node, opts) {
          assert2("ClassPrivateProperty", node, opts);
        }, exports2.assertClassProperty = function(node, opts) {
          assert2("ClassProperty", node, opts);
        }, exports2.assertCompletionStatement = function(node, opts) {
          assert2("CompletionStatement", node, opts);
        }, exports2.assertConditional = function(node, opts) {
          assert2("Conditional", node, opts);
        }, exports2.assertConditionalExpression = function(node, opts) {
          assert2("ConditionalExpression", node, opts);
        }, exports2.assertContinueStatement = function(node, opts) {
          assert2("ContinueStatement", node, opts);
        }, exports2.assertDebuggerStatement = function(node, opts) {
          assert2("DebuggerStatement", node, opts);
        }, exports2.assertDecimalLiteral = function(node, opts) {
          assert2("DecimalLiteral", node, opts);
        }, exports2.assertDeclaration = function(node, opts) {
          assert2("Declaration", node, opts);
        }, exports2.assertDeclareClass = function(node, opts) {
          assert2("DeclareClass", node, opts);
        }, exports2.assertDeclareExportAllDeclaration = function(node, opts) {
          assert2("DeclareExportAllDeclaration", node, opts);
        }, exports2.assertDeclareExportDeclaration = function(node, opts) {
          assert2("DeclareExportDeclaration", node, opts);
        }, exports2.assertDeclareFunction = function(node, opts) {
          assert2("DeclareFunction", node, opts);
        }, exports2.assertDeclareInterface = function(node, opts) {
          assert2("DeclareInterface", node, opts);
        }, exports2.assertDeclareModule = function(node, opts) {
          assert2("DeclareModule", node, opts);
        }, exports2.assertDeclareModuleExports = function(node, opts) {
          assert2("DeclareModuleExports", node, opts);
        }, exports2.assertDeclareOpaqueType = function(node, opts) {
          assert2("DeclareOpaqueType", node, opts);
        }, exports2.assertDeclareTypeAlias = function(node, opts) {
          assert2("DeclareTypeAlias", node, opts);
        }, exports2.assertDeclareVariable = function(node, opts) {
          assert2("DeclareVariable", node, opts);
        }, exports2.assertDeclaredPredicate = function(node, opts) {
          assert2("DeclaredPredicate", node, opts);
        }, exports2.assertDecorator = function(node, opts) {
          assert2("Decorator", node, opts);
        }, exports2.assertDirective = function(node, opts) {
          assert2("Directive", node, opts);
        }, exports2.assertDirectiveLiteral = function(node, opts) {
          assert2("DirectiveLiteral", node, opts);
        }, exports2.assertDoExpression = function(node, opts) {
          assert2("DoExpression", node, opts);
        }, exports2.assertDoWhileStatement = function(node, opts) {
          assert2("DoWhileStatement", node, opts);
        }, exports2.assertEmptyStatement = function(node, opts) {
          assert2("EmptyStatement", node, opts);
        }, exports2.assertEmptyTypeAnnotation = function(node, opts) {
          assert2("EmptyTypeAnnotation", node, opts);
        }, exports2.assertEnumBody = function(node, opts) {
          assert2("EnumBody", node, opts);
        }, exports2.assertEnumBooleanBody = function(node, opts) {
          assert2("EnumBooleanBody", node, opts);
        }, exports2.assertEnumBooleanMember = function(node, opts) {
          assert2("EnumBooleanMember", node, opts);
        }, exports2.assertEnumDeclaration = function(node, opts) {
          assert2("EnumDeclaration", node, opts);
        }, exports2.assertEnumDefaultedMember = function(node, opts) {
          assert2("EnumDefaultedMember", node, opts);
        }, exports2.assertEnumMember = function(node, opts) {
          assert2("EnumMember", node, opts);
        }, exports2.assertEnumNumberBody = function(node, opts) {
          assert2("EnumNumberBody", node, opts);
        }, exports2.assertEnumNumberMember = function(node, opts) {
          assert2("EnumNumberMember", node, opts);
        }, exports2.assertEnumStringBody = function(node, opts) {
          assert2("EnumStringBody", node, opts);
        }, exports2.assertEnumStringMember = function(node, opts) {
          assert2("EnumStringMember", node, opts);
        }, exports2.assertEnumSymbolBody = function(node, opts) {
          assert2("EnumSymbolBody", node, opts);
        }, exports2.assertExistsTypeAnnotation = function(node, opts) {
          assert2("ExistsTypeAnnotation", node, opts);
        }, exports2.assertExportAllDeclaration = function(node, opts) {
          assert2("ExportAllDeclaration", node, opts);
        }, exports2.assertExportDeclaration = function(node, opts) {
          assert2("ExportDeclaration", node, opts);
        }, exports2.assertExportDefaultDeclaration = function(node, opts) {
          assert2("ExportDefaultDeclaration", node, opts);
        }, exports2.assertExportDefaultSpecifier = function(node, opts) {
          assert2("ExportDefaultSpecifier", node, opts);
        }, exports2.assertExportNamedDeclaration = function(node, opts) {
          assert2("ExportNamedDeclaration", node, opts);
        }, exports2.assertExportNamespaceSpecifier = function(node, opts) {
          assert2("ExportNamespaceSpecifier", node, opts);
        }, exports2.assertExportSpecifier = function(node, opts) {
          assert2("ExportSpecifier", node, opts);
        }, exports2.assertExpression = function(node, opts) {
          assert2("Expression", node, opts);
        }, exports2.assertExpressionStatement = function(node, opts) {
          assert2("ExpressionStatement", node, opts);
        }, exports2.assertExpressionWrapper = function(node, opts) {
          assert2("ExpressionWrapper", node, opts);
        }, exports2.assertFile = function(node, opts) {
          assert2("File", node, opts);
        }, exports2.assertFlow = function(node, opts) {
          assert2("Flow", node, opts);
        }, exports2.assertFlowBaseAnnotation = function(node, opts) {
          assert2("FlowBaseAnnotation", node, opts);
        }, exports2.assertFlowDeclaration = function(node, opts) {
          assert2("FlowDeclaration", node, opts);
        }, exports2.assertFlowPredicate = function(node, opts) {
          assert2("FlowPredicate", node, opts);
        }, exports2.assertFlowType = function(node, opts) {
          assert2("FlowType", node, opts);
        }, exports2.assertFor = function(node, opts) {
          assert2("For", node, opts);
        }, exports2.assertForInStatement = function(node, opts) {
          assert2("ForInStatement", node, opts);
        }, exports2.assertForOfStatement = function(node, opts) {
          assert2("ForOfStatement", node, opts);
        }, exports2.assertForStatement = function(node, opts) {
          assert2("ForStatement", node, opts);
        }, exports2.assertForXStatement = function(node, opts) {
          assert2("ForXStatement", node, opts);
        }, exports2.assertFunction = function(node, opts) {
          assert2("Function", node, opts);
        }, exports2.assertFunctionDeclaration = function(node, opts) {
          assert2("FunctionDeclaration", node, opts);
        }, exports2.assertFunctionExpression = function(node, opts) {
          assert2("FunctionExpression", node, opts);
        }, exports2.assertFunctionParent = function(node, opts) {
          assert2("FunctionParent", node, opts);
        }, exports2.assertFunctionTypeAnnotation = function(node, opts) {
          assert2("FunctionTypeAnnotation", node, opts);
        }, exports2.assertFunctionTypeParam = function(node, opts) {
          assert2("FunctionTypeParam", node, opts);
        }, exports2.assertGenericTypeAnnotation = function(node, opts) {
          assert2("GenericTypeAnnotation", node, opts);
        }, exports2.assertIdentifier = function(node, opts) {
          assert2("Identifier", node, opts);
        }, exports2.assertIfStatement = function(node, opts) {
          assert2("IfStatement", node, opts);
        }, exports2.assertImmutable = function(node, opts) {
          assert2("Immutable", node, opts);
        }, exports2.assertImport = function(node, opts) {
          assert2("Import", node, opts);
        }, exports2.assertImportAttribute = function(node, opts) {
          assert2("ImportAttribute", node, opts);
        }, exports2.assertImportDeclaration = function(node, opts) {
          assert2("ImportDeclaration", node, opts);
        }, exports2.assertImportDefaultSpecifier = function(node, opts) {
          assert2("ImportDefaultSpecifier", node, opts);
        }, exports2.assertImportNamespaceSpecifier = function(node, opts) {
          assert2("ImportNamespaceSpecifier", node, opts);
        }, exports2.assertImportSpecifier = function(node, opts) {
          assert2("ImportSpecifier", node, opts);
        }, exports2.assertIndexedAccessType = function(node, opts) {
          assert2("IndexedAccessType", node, opts);
        }, exports2.assertInferredPredicate = function(node, opts) {
          assert2("InferredPredicate", node, opts);
        }, exports2.assertInterfaceDeclaration = function(node, opts) {
          assert2("InterfaceDeclaration", node, opts);
        }, exports2.assertInterfaceExtends = function(node, opts) {
          assert2("InterfaceExtends", node, opts);
        }, exports2.assertInterfaceTypeAnnotation = function(node, opts) {
          assert2("InterfaceTypeAnnotation", node, opts);
        }, exports2.assertInterpreterDirective = function(node, opts) {
          assert2("InterpreterDirective", node, opts);
        }, exports2.assertIntersectionTypeAnnotation = function(node, opts) {
          assert2("IntersectionTypeAnnotation", node, opts);
        }, exports2.assertJSX = function(node, opts) {
          assert2("JSX", node, opts);
        }, exports2.assertJSXAttribute = function(node, opts) {
          assert2("JSXAttribute", node, opts);
        }, exports2.assertJSXClosingElement = function(node, opts) {
          assert2("JSXClosingElement", node, opts);
        }, exports2.assertJSXClosingFragment = function(node, opts) {
          assert2("JSXClosingFragment", node, opts);
        }, exports2.assertJSXElement = function(node, opts) {
          assert2("JSXElement", node, opts);
        }, exports2.assertJSXEmptyExpression = function(node, opts) {
          assert2("JSXEmptyExpression", node, opts);
        }, exports2.assertJSXExpressionContainer = function(node, opts) {
          assert2("JSXExpressionContainer", node, opts);
        }, exports2.assertJSXFragment = function(node, opts) {
          assert2("JSXFragment", node, opts);
        }, exports2.assertJSXIdentifier = function(node, opts) {
          assert2("JSXIdentifier", node, opts);
        }, exports2.assertJSXMemberExpression = function(node, opts) {
          assert2("JSXMemberExpression", node, opts);
        }, exports2.assertJSXNamespacedName = function(node, opts) {
          assert2("JSXNamespacedName", node, opts);
        }, exports2.assertJSXOpeningElement = function(node, opts) {
          assert2("JSXOpeningElement", node, opts);
        }, exports2.assertJSXOpeningFragment = function(node, opts) {
          assert2("JSXOpeningFragment", node, opts);
        }, exports2.assertJSXSpreadAttribute = function(node, opts) {
          assert2("JSXSpreadAttribute", node, opts);
        }, exports2.assertJSXSpreadChild = function(node, opts) {
          assert2("JSXSpreadChild", node, opts);
        }, exports2.assertJSXText = function(node, opts) {
          assert2("JSXText", node, opts);
        }, exports2.assertLVal = function(node, opts) {
          assert2("LVal", node, opts);
        }, exports2.assertLabeledStatement = function(node, opts) {
          assert2("LabeledStatement", node, opts);
        }, exports2.assertLiteral = function(node, opts) {
          assert2("Literal", node, opts);
        }, exports2.assertLogicalExpression = function(node, opts) {
          assert2("LogicalExpression", node, opts);
        }, exports2.assertLoop = function(node, opts) {
          assert2("Loop", node, opts);
        }, exports2.assertMemberExpression = function(node, opts) {
          assert2("MemberExpression", node, opts);
        }, exports2.assertMetaProperty = function(node, opts) {
          assert2("MetaProperty", node, opts);
        }, exports2.assertMethod = function(node, opts) {
          assert2("Method", node, opts);
        }, exports2.assertMiscellaneous = function(node, opts) {
          assert2("Miscellaneous", node, opts);
        }, exports2.assertMixedTypeAnnotation = function(node, opts) {
          assert2("MixedTypeAnnotation", node, opts);
        }, exports2.assertModuleDeclaration = function(node, opts) {
          assert2("ModuleDeclaration", node, opts);
        }, exports2.assertModuleExpression = function(node, opts) {
          assert2("ModuleExpression", node, opts);
        }, exports2.assertModuleSpecifier = function(node, opts) {
          assert2("ModuleSpecifier", node, opts);
        }, exports2.assertNewExpression = function(node, opts) {
          assert2("NewExpression", node, opts);
        }, exports2.assertNoop = function(node, opts) {
          assert2("Noop", node, opts);
        }, exports2.assertNullLiteral = function(node, opts) {
          assert2("NullLiteral", node, opts);
        }, exports2.assertNullLiteralTypeAnnotation = function(node, opts) {
          assert2("NullLiteralTypeAnnotation", node, opts);
        }, exports2.assertNullableTypeAnnotation = function(node, opts) {
          assert2("NullableTypeAnnotation", node, opts);
        }, exports2.assertNumberLiteral = function(node, opts) {
          console.trace("The node type NumberLiteral has been renamed to NumericLiteral"), assert2("NumberLiteral", node, opts);
        }, exports2.assertNumberLiteralTypeAnnotation = function(node, opts) {
          assert2("NumberLiteralTypeAnnotation", node, opts);
        }, exports2.assertNumberTypeAnnotation = function(node, opts) {
          assert2("NumberTypeAnnotation", node, opts);
        }, exports2.assertNumericLiteral = function(node, opts) {
          assert2("NumericLiteral", node, opts);
        }, exports2.assertObjectExpression = function(node, opts) {
          assert2("ObjectExpression", node, opts);
        }, exports2.assertObjectMember = function(node, opts) {
          assert2("ObjectMember", node, opts);
        }, exports2.assertObjectMethod = function(node, opts) {
          assert2("ObjectMethod", node, opts);
        }, exports2.assertObjectPattern = function(node, opts) {
          assert2("ObjectPattern", node, opts);
        }, exports2.assertObjectProperty = function(node, opts) {
          assert2("ObjectProperty", node, opts);
        }, exports2.assertObjectTypeAnnotation = function(node, opts) {
          assert2("ObjectTypeAnnotation", node, opts);
        }, exports2.assertObjectTypeCallProperty = function(node, opts) {
          assert2("ObjectTypeCallProperty", node, opts);
        }, exports2.assertObjectTypeIndexer = function(node, opts) {
          assert2("ObjectTypeIndexer", node, opts);
        }, exports2.assertObjectTypeInternalSlot = function(node, opts) {
          assert2("ObjectTypeInternalSlot", node, opts);
        }, exports2.assertObjectTypeProperty = function(node, opts) {
          assert2("ObjectTypeProperty", node, opts);
        }, exports2.assertObjectTypeSpreadProperty = function(node, opts) {
          assert2("ObjectTypeSpreadProperty", node, opts);
        }, exports2.assertOpaqueType = function(node, opts) {
          assert2("OpaqueType", node, opts);
        }, exports2.assertOptionalCallExpression = function(node, opts) {
          assert2("OptionalCallExpression", node, opts);
        }, exports2.assertOptionalIndexedAccessType = function(node, opts) {
          assert2("OptionalIndexedAccessType", node, opts);
        }, exports2.assertOptionalMemberExpression = function(node, opts) {
          assert2("OptionalMemberExpression", node, opts);
        }, exports2.assertParenthesizedExpression = function(node, opts) {
          assert2("ParenthesizedExpression", node, opts);
        }, exports2.assertPattern = function(node, opts) {
          assert2("Pattern", node, opts);
        }, exports2.assertPatternLike = function(node, opts) {
          assert2("PatternLike", node, opts);
        }, exports2.assertPipelineBareFunction = function(node, opts) {
          assert2("PipelineBareFunction", node, opts);
        }, exports2.assertPipelinePrimaryTopicReference = function(node, opts) {
          assert2("PipelinePrimaryTopicReference", node, opts);
        }, exports2.assertPipelineTopicExpression = function(node, opts) {
          assert2("PipelineTopicExpression", node, opts);
        }, exports2.assertPlaceholder = function(node, opts) {
          assert2("Placeholder", node, opts);
        }, exports2.assertPrivate = function(node, opts) {
          assert2("Private", node, opts);
        }, exports2.assertPrivateName = function(node, opts) {
          assert2("PrivateName", node, opts);
        }, exports2.assertProgram = function(node, opts) {
          assert2("Program", node, opts);
        }, exports2.assertProperty = function(node, opts) {
          assert2("Property", node, opts);
        }, exports2.assertPureish = function(node, opts) {
          assert2("Pureish", node, opts);
        }, exports2.assertQualifiedTypeIdentifier = function(node, opts) {
          assert2("QualifiedTypeIdentifier", node, opts);
        }, exports2.assertRecordExpression = function(node, opts) {
          assert2("RecordExpression", node, opts);
        }, exports2.assertRegExpLiteral = function(node, opts) {
          assert2("RegExpLiteral", node, opts);
        }, exports2.assertRegexLiteral = function(node, opts) {
          console.trace("The node type RegexLiteral has been renamed to RegExpLiteral"), assert2("RegexLiteral", node, opts);
        }, exports2.assertRestElement = function(node, opts) {
          assert2("RestElement", node, opts);
        }, exports2.assertRestProperty = function(node, opts) {
          console.trace("The node type RestProperty has been renamed to RestElement"), assert2("RestProperty", node, opts);
        }, exports2.assertReturnStatement = function(node, opts) {
          assert2("ReturnStatement", node, opts);
        }, exports2.assertScopable = function(node, opts) {
          assert2("Scopable", node, opts);
        }, exports2.assertSequenceExpression = function(node, opts) {
          assert2("SequenceExpression", node, opts);
        }, exports2.assertSpreadElement = function(node, opts) {
          assert2("SpreadElement", node, opts);
        }, exports2.assertSpreadProperty = function(node, opts) {
          console.trace("The node type SpreadProperty has been renamed to SpreadElement"), assert2("SpreadProperty", node, opts);
        }, exports2.assertStandardized = function(node, opts) {
          assert2("Standardized", node, opts);
        }, exports2.assertStatement = function(node, opts) {
          assert2("Statement", node, opts);
        }, exports2.assertStaticBlock = function(node, opts) {
          assert2("StaticBlock", node, opts);
        }, exports2.assertStringLiteral = function(node, opts) {
          assert2("StringLiteral", node, opts);
        }, exports2.assertStringLiteralTypeAnnotation = function(node, opts) {
          assert2("StringLiteralTypeAnnotation", node, opts);
        }, exports2.assertStringTypeAnnotation = function(node, opts) {
          assert2("StringTypeAnnotation", node, opts);
        }, exports2.assertSuper = function(node, opts) {
          assert2("Super", node, opts);
        }, exports2.assertSwitchCase = function(node, opts) {
          assert2("SwitchCase", node, opts);
        }, exports2.assertSwitchStatement = function(node, opts) {
          assert2("SwitchStatement", node, opts);
        }, exports2.assertSymbolTypeAnnotation = function(node, opts) {
          assert2("SymbolTypeAnnotation", node, opts);
        }, exports2.assertTSAnyKeyword = function(node, opts) {
          assert2("TSAnyKeyword", node, opts);
        }, exports2.assertTSArrayType = function(node, opts) {
          assert2("TSArrayType", node, opts);
        }, exports2.assertTSAsExpression = function(node, opts) {
          assert2("TSAsExpression", node, opts);
        }, exports2.assertTSBaseType = function(node, opts) {
          assert2("TSBaseType", node, opts);
        }, exports2.assertTSBigIntKeyword = function(node, opts) {
          assert2("TSBigIntKeyword", node, opts);
        }, exports2.assertTSBooleanKeyword = function(node, opts) {
          assert2("TSBooleanKeyword", node, opts);
        }, exports2.assertTSCallSignatureDeclaration = function(node, opts) {
          assert2("TSCallSignatureDeclaration", node, opts);
        }, exports2.assertTSConditionalType = function(node, opts) {
          assert2("TSConditionalType", node, opts);
        }, exports2.assertTSConstructSignatureDeclaration = function(node, opts) {
          assert2("TSConstructSignatureDeclaration", node, opts);
        }, exports2.assertTSConstructorType = function(node, opts) {
          assert2("TSConstructorType", node, opts);
        }, exports2.assertTSDeclareFunction = function(node, opts) {
          assert2("TSDeclareFunction", node, opts);
        }, exports2.assertTSDeclareMethod = function(node, opts) {
          assert2("TSDeclareMethod", node, opts);
        }, exports2.assertTSEntityName = function(node, opts) {
          assert2("TSEntityName", node, opts);
        }, exports2.assertTSEnumDeclaration = function(node, opts) {
          assert2("TSEnumDeclaration", node, opts);
        }, exports2.assertTSEnumMember = function(node, opts) {
          assert2("TSEnumMember", node, opts);
        }, exports2.assertTSExportAssignment = function(node, opts) {
          assert2("TSExportAssignment", node, opts);
        }, exports2.assertTSExpressionWithTypeArguments = function(node, opts) {
          assert2("TSExpressionWithTypeArguments", node, opts);
        }, exports2.assertTSExternalModuleReference = function(node, opts) {
          assert2("TSExternalModuleReference", node, opts);
        }, exports2.assertTSFunctionType = function(node, opts) {
          assert2("TSFunctionType", node, opts);
        }, exports2.assertTSImportEqualsDeclaration = function(node, opts) {
          assert2("TSImportEqualsDeclaration", node, opts);
        }, exports2.assertTSImportType = function(node, opts) {
          assert2("TSImportType", node, opts);
        }, exports2.assertTSIndexSignature = function(node, opts) {
          assert2("TSIndexSignature", node, opts);
        }, exports2.assertTSIndexedAccessType = function(node, opts) {
          assert2("TSIndexedAccessType", node, opts);
        }, exports2.assertTSInferType = function(node, opts) {
          assert2("TSInferType", node, opts);
        }, exports2.assertTSInstantiationExpression = function(node, opts) {
          assert2("TSInstantiationExpression", node, opts);
        }, exports2.assertTSInterfaceBody = function(node, opts) {
          assert2("TSInterfaceBody", node, opts);
        }, exports2.assertTSInterfaceDeclaration = function(node, opts) {
          assert2("TSInterfaceDeclaration", node, opts);
        }, exports2.assertTSIntersectionType = function(node, opts) {
          assert2("TSIntersectionType", node, opts);
        }, exports2.assertTSIntrinsicKeyword = function(node, opts) {
          assert2("TSIntrinsicKeyword", node, opts);
        }, exports2.assertTSLiteralType = function(node, opts) {
          assert2("TSLiteralType", node, opts);
        }, exports2.assertTSMappedType = function(node, opts) {
          assert2("TSMappedType", node, opts);
        }, exports2.assertTSMethodSignature = function(node, opts) {
          assert2("TSMethodSignature", node, opts);
        }, exports2.assertTSModuleBlock = function(node, opts) {
          assert2("TSModuleBlock", node, opts);
        }, exports2.assertTSModuleDeclaration = function(node, opts) {
          assert2("TSModuleDeclaration", node, opts);
        }, exports2.assertTSNamedTupleMember = function(node, opts) {
          assert2("TSNamedTupleMember", node, opts);
        }, exports2.assertTSNamespaceExportDeclaration = function(node, opts) {
          assert2("TSNamespaceExportDeclaration", node, opts);
        }, exports2.assertTSNeverKeyword = function(node, opts) {
          assert2("TSNeverKeyword", node, opts);
        }, exports2.assertTSNonNullExpression = function(node, opts) {
          assert2("TSNonNullExpression", node, opts);
        }, exports2.assertTSNullKeyword = function(node, opts) {
          assert2("TSNullKeyword", node, opts);
        }, exports2.assertTSNumberKeyword = function(node, opts) {
          assert2("TSNumberKeyword", node, opts);
        }, exports2.assertTSObjectKeyword = function(node, opts) {
          assert2("TSObjectKeyword", node, opts);
        }, exports2.assertTSOptionalType = function(node, opts) {
          assert2("TSOptionalType", node, opts);
        }, exports2.assertTSParameterProperty = function(node, opts) {
          assert2("TSParameterProperty", node, opts);
        }, exports2.assertTSParenthesizedType = function(node, opts) {
          assert2("TSParenthesizedType", node, opts);
        }, exports2.assertTSPropertySignature = function(node, opts) {
          assert2("TSPropertySignature", node, opts);
        }, exports2.assertTSQualifiedName = function(node, opts) {
          assert2("TSQualifiedName", node, opts);
        }, exports2.assertTSRestType = function(node, opts) {
          assert2("TSRestType", node, opts);
        }, exports2.assertTSStringKeyword = function(node, opts) {
          assert2("TSStringKeyword", node, opts);
        }, exports2.assertTSSymbolKeyword = function(node, opts) {
          assert2("TSSymbolKeyword", node, opts);
        }, exports2.assertTSThisType = function(node, opts) {
          assert2("TSThisType", node, opts);
        }, exports2.assertTSTupleType = function(node, opts) {
          assert2("TSTupleType", node, opts);
        }, exports2.assertTSType = function(node, opts) {
          assert2("TSType", node, opts);
        }, exports2.assertTSTypeAliasDeclaration = function(node, opts) {
          assert2("TSTypeAliasDeclaration", node, opts);
        }, exports2.assertTSTypeAnnotation = function(node, opts) {
          assert2("TSTypeAnnotation", node, opts);
        }, exports2.assertTSTypeAssertion = function(node, opts) {
          assert2("TSTypeAssertion", node, opts);
        }, exports2.assertTSTypeElement = function(node, opts) {
          assert2("TSTypeElement", node, opts);
        }, exports2.assertTSTypeLiteral = function(node, opts) {
          assert2("TSTypeLiteral", node, opts);
        }, exports2.assertTSTypeOperator = function(node, opts) {
          assert2("TSTypeOperator", node, opts);
        }, exports2.assertTSTypeParameter = function(node, opts) {
          assert2("TSTypeParameter", node, opts);
        }, exports2.assertTSTypeParameterDeclaration = function(node, opts) {
          assert2("TSTypeParameterDeclaration", node, opts);
        }, exports2.assertTSTypeParameterInstantiation = function(node, opts) {
          assert2("TSTypeParameterInstantiation", node, opts);
        }, exports2.assertTSTypePredicate = function(node, opts) {
          assert2("TSTypePredicate", node, opts);
        }, exports2.assertTSTypeQuery = function(node, opts) {
          assert2("TSTypeQuery", node, opts);
        }, exports2.assertTSTypeReference = function(node, opts) {
          assert2("TSTypeReference", node, opts);
        }, exports2.assertTSUndefinedKeyword = function(node, opts) {
          assert2("TSUndefinedKeyword", node, opts);
        }, exports2.assertTSUnionType = function(node, opts) {
          assert2("TSUnionType", node, opts);
        }, exports2.assertTSUnknownKeyword = function(node, opts) {
          assert2("TSUnknownKeyword", node, opts);
        }, exports2.assertTSVoidKeyword = function(node, opts) {
          assert2("TSVoidKeyword", node, opts);
        }, exports2.assertTaggedTemplateExpression = function(node, opts) {
          assert2("TaggedTemplateExpression", node, opts);
        }, exports2.assertTemplateElement = function(node, opts) {
          assert2("TemplateElement", node, opts);
        }, exports2.assertTemplateLiteral = function(node, opts) {
          assert2("TemplateLiteral", node, opts);
        }, exports2.assertTerminatorless = function(node, opts) {
          assert2("Terminatorless", node, opts);
        }, exports2.assertThisExpression = function(node, opts) {
          assert2("ThisExpression", node, opts);
        }, exports2.assertThisTypeAnnotation = function(node, opts) {
          assert2("ThisTypeAnnotation", node, opts);
        }, exports2.assertThrowStatement = function(node, opts) {
          assert2("ThrowStatement", node, opts);
        }, exports2.assertTopicReference = function(node, opts) {
          assert2("TopicReference", node, opts);
        }, exports2.assertTryStatement = function(node, opts) {
          assert2("TryStatement", node, opts);
        }, exports2.assertTupleExpression = function(node, opts) {
          assert2("TupleExpression", node, opts);
        }, exports2.assertTupleTypeAnnotation = function(node, opts) {
          assert2("TupleTypeAnnotation", node, opts);
        }, exports2.assertTypeAlias = function(node, opts) {
          assert2("TypeAlias", node, opts);
        }, exports2.assertTypeAnnotation = function(node, opts) {
          assert2("TypeAnnotation", node, opts);
        }, exports2.assertTypeCastExpression = function(node, opts) {
          assert2("TypeCastExpression", node, opts);
        }, exports2.assertTypeParameter = function(node, opts) {
          assert2("TypeParameter", node, opts);
        }, exports2.assertTypeParameterDeclaration = function(node, opts) {
          assert2("TypeParameterDeclaration", node, opts);
        }, exports2.assertTypeParameterInstantiation = function(node, opts) {
          assert2("TypeParameterInstantiation", node, opts);
        }, exports2.assertTypeScript = function(node, opts) {
          assert2("TypeScript", node, opts);
        }, exports2.assertTypeofTypeAnnotation = function(node, opts) {
          assert2("TypeofTypeAnnotation", node, opts);
        }, exports2.assertUnaryExpression = function(node, opts) {
          assert2("UnaryExpression", node, opts);
        }, exports2.assertUnaryLike = function(node, opts) {
          assert2("UnaryLike", node, opts);
        }, exports2.assertUnionTypeAnnotation = function(node, opts) {
          assert2("UnionTypeAnnotation", node, opts);
        }, exports2.assertUpdateExpression = function(node, opts) {
          assert2("UpdateExpression", node, opts);
        }, exports2.assertUserWhitespacable = function(node, opts) {
          assert2("UserWhitespacable", node, opts);
        }, exports2.assertV8IntrinsicIdentifier = function(node, opts) {
          assert2("V8IntrinsicIdentifier", node, opts);
        }, exports2.assertVariableDeclaration = function(node, opts) {
          assert2("VariableDeclaration", node, opts);
        }, exports2.assertVariableDeclarator = function(node, opts) {
          assert2("VariableDeclarator", node, opts);
        }, exports2.assertVariance = function(node, opts) {
          assert2("Variance", node, opts);
        }, exports2.assertVoidTypeAnnotation = function(node, opts) {
          assert2("VoidTypeAnnotation", node, opts);
        }, exports2.assertWhile = function(node, opts) {
          assert2("While", node, opts);
        }, exports2.assertWhileStatement = function(node, opts) {
          assert2("WhileStatement", node, opts);
        }, exports2.assertWithStatement = function(node, opts) {
          assert2("WithStatement", node, opts);
        }, exports2.assertYieldExpression = function(node, opts) {
          assert2("YieldExpression", node, opts);
        };
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/is.js");
        function assert2(type, node, opts) {
          if (!(0, _is.default)(type, node, opts))
            throw new Error(`Expected type "${type}" with option ${JSON.stringify(opts)}, but instead got "${node.type}".`);
        }
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/ast-types/generated/index.js": () => {
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(types2) {
          const flattened = (0, _removeTypeDuplicates.default)(types2);
          return 1 === flattened.length ? flattened[0] : (0, _generated.unionTypeAnnotation)(flattened);
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/index.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/index.js"), _default = function(type) {
          switch (type) {
            case "string":
              return (0, _generated.stringTypeAnnotation)();
            case "number":
              return (0, _generated.numberTypeAnnotation)();
            case "undefined":
              return (0, _generated.voidTypeAnnotation)();
            case "boolean":
              return (0, _generated.booleanTypeAnnotation)();
            case "function":
              return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)("Function"));
            case "object":
              return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)("Object"));
            case "symbol":
              return (0, _generated.genericTypeAnnotation)((0, _generated.identifier)("Symbol"));
            case "bigint":
              return (0, _generated.anyTypeAnnotation)();
          }
          throw new Error("Invalid typeof value: " + type);
        };
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.anyTypeAnnotation = function() {
          return { type: "AnyTypeAnnotation" };
        }, exports2.argumentPlaceholder = function() {
          return { type: "ArgumentPlaceholder" };
        }, exports2.arrayExpression = function(elements = []) {
          return (0, _validateNode.default)({ type: "ArrayExpression", elements });
        }, exports2.arrayPattern = function(elements) {
          return (0, _validateNode.default)({ type: "ArrayPattern", elements });
        }, exports2.arrayTypeAnnotation = function(elementType) {
          return (0, _validateNode.default)({ type: "ArrayTypeAnnotation", elementType });
        }, exports2.arrowFunctionExpression = function(params, body, async = false) {
          return (0, _validateNode.default)({ type: "ArrowFunctionExpression", params, body, async, expression: null });
        }, exports2.assignmentExpression = function(operator, left, right) {
          return (0, _validateNode.default)({ type: "AssignmentExpression", operator, left, right });
        }, exports2.assignmentPattern = function(left, right) {
          return (0, _validateNode.default)({ type: "AssignmentPattern", left, right });
        }, exports2.awaitExpression = function(argument) {
          return (0, _validateNode.default)({ type: "AwaitExpression", argument });
        }, exports2.bigIntLiteral = function(value) {
          return (0, _validateNode.default)({ type: "BigIntLiteral", value });
        }, exports2.binaryExpression = function(operator, left, right) {
          return (0, _validateNode.default)({ type: "BinaryExpression", operator, left, right });
        }, exports2.bindExpression = function(object, callee) {
          return (0, _validateNode.default)({ type: "BindExpression", object, callee });
        }, exports2.blockStatement = function(body, directives = []) {
          return (0, _validateNode.default)({ type: "BlockStatement", body, directives });
        }, exports2.booleanLiteral = function(value) {
          return (0, _validateNode.default)({ type: "BooleanLiteral", value });
        }, exports2.booleanLiteralTypeAnnotation = function(value) {
          return (0, _validateNode.default)({ type: "BooleanLiteralTypeAnnotation", value });
        }, exports2.booleanTypeAnnotation = function() {
          return { type: "BooleanTypeAnnotation" };
        }, exports2.breakStatement = function(label = null) {
          return (0, _validateNode.default)({ type: "BreakStatement", label });
        }, exports2.callExpression = function(callee, _arguments) {
          return (0, _validateNode.default)({ type: "CallExpression", callee, arguments: _arguments });
        }, exports2.catchClause = function(param = null, body) {
          return (0, _validateNode.default)({ type: "CatchClause", param, body });
        }, exports2.classAccessorProperty = function(key, value = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {
          return (0, _validateNode.default)({ type: "ClassAccessorProperty", key, value, typeAnnotation, decorators, computed, static: _static });
        }, exports2.classBody = function(body) {
          return (0, _validateNode.default)({ type: "ClassBody", body });
        }, exports2.classDeclaration = function(id, superClass = null, body, decorators = null) {
          return (0, _validateNode.default)({ type: "ClassDeclaration", id, superClass, body, decorators });
        }, exports2.classExpression = function(id = null, superClass = null, body, decorators = null) {
          return (0, _validateNode.default)({ type: "ClassExpression", id, superClass, body, decorators });
        }, exports2.classImplements = function(id, typeParameters = null) {
          return (0, _validateNode.default)({ type: "ClassImplements", id, typeParameters });
        }, exports2.classMethod = function(kind = "method", key, params, body, computed = false, _static = false, generator = false, async = false) {
          return (0, _validateNode.default)({ type: "ClassMethod", kind, key, params, body, computed, static: _static, generator, async });
        }, exports2.classPrivateMethod = function(kind = "method", key, params, body, _static = false) {
          return (0, _validateNode.default)({ type: "ClassPrivateMethod", kind, key, params, body, static: _static });
        }, exports2.classPrivateProperty = function(key, value = null, decorators = null, _static = false) {
          return (0, _validateNode.default)({ type: "ClassPrivateProperty", key, value, decorators, static: _static });
        }, exports2.classProperty = function(key, value = null, typeAnnotation = null, decorators = null, computed = false, _static = false) {
          return (0, _validateNode.default)({ type: "ClassProperty", key, value, typeAnnotation, decorators, computed, static: _static });
        }, exports2.conditionalExpression = function(test, consequent, alternate) {
          return (0, _validateNode.default)({ type: "ConditionalExpression", test, consequent, alternate });
        }, exports2.continueStatement = function(label = null) {
          return (0, _validateNode.default)({ type: "ContinueStatement", label });
        }, exports2.debuggerStatement = function() {
          return { type: "DebuggerStatement" };
        }, exports2.decimalLiteral = function(value) {
          return (0, _validateNode.default)({ type: "DecimalLiteral", value });
        }, exports2.declareClass = function(id, typeParameters = null, _extends = null, body) {
          return (0, _validateNode.default)({ type: "DeclareClass", id, typeParameters, extends: _extends, body });
        }, exports2.declareExportAllDeclaration = function(source) {
          return (0, _validateNode.default)({ type: "DeclareExportAllDeclaration", source });
        }, exports2.declareExportDeclaration = function(declaration = null, specifiers = null, source = null) {
          return (0, _validateNode.default)({ type: "DeclareExportDeclaration", declaration, specifiers, source });
        }, exports2.declareFunction = function(id) {
          return (0, _validateNode.default)({ type: "DeclareFunction", id });
        }, exports2.declareInterface = function(id, typeParameters = null, _extends = null, body) {
          return (0, _validateNode.default)({ type: "DeclareInterface", id, typeParameters, extends: _extends, body });
        }, exports2.declareModule = function(id, body, kind = null) {
          return (0, _validateNode.default)({ type: "DeclareModule", id, body, kind });
        }, exports2.declareModuleExports = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "DeclareModuleExports", typeAnnotation });
        }, exports2.declareOpaqueType = function(id, typeParameters = null, supertype = null) {
          return (0, _validateNode.default)({ type: "DeclareOpaqueType", id, typeParameters, supertype });
        }, exports2.declareTypeAlias = function(id, typeParameters = null, right) {
          return (0, _validateNode.default)({ type: "DeclareTypeAlias", id, typeParameters, right });
        }, exports2.declareVariable = function(id) {
          return (0, _validateNode.default)({ type: "DeclareVariable", id });
        }, exports2.declaredPredicate = function(value) {
          return (0, _validateNode.default)({ type: "DeclaredPredicate", value });
        }, exports2.decorator = function(expression) {
          return (0, _validateNode.default)({ type: "Decorator", expression });
        }, exports2.directive = function(value) {
          return (0, _validateNode.default)({ type: "Directive", value });
        }, exports2.directiveLiteral = function(value) {
          return (0, _validateNode.default)({ type: "DirectiveLiteral", value });
        }, exports2.doExpression = function(body, async = false) {
          return (0, _validateNode.default)({ type: "DoExpression", body, async });
        }, exports2.doWhileStatement = function(test, body) {
          return (0, _validateNode.default)({ type: "DoWhileStatement", test, body });
        }, exports2.emptyStatement = function() {
          return { type: "EmptyStatement" };
        }, exports2.emptyTypeAnnotation = function() {
          return { type: "EmptyTypeAnnotation" };
        }, exports2.enumBooleanBody = function(members) {
          return (0, _validateNode.default)({ type: "EnumBooleanBody", members, explicitType: null, hasUnknownMembers: null });
        }, exports2.enumBooleanMember = function(id) {
          return (0, _validateNode.default)({ type: "EnumBooleanMember", id, init: null });
        }, exports2.enumDeclaration = function(id, body) {
          return (0, _validateNode.default)({ type: "EnumDeclaration", id, body });
        }, exports2.enumDefaultedMember = function(id) {
          return (0, _validateNode.default)({ type: "EnumDefaultedMember", id });
        }, exports2.enumNumberBody = function(members) {
          return (0, _validateNode.default)({ type: "EnumNumberBody", members, explicitType: null, hasUnknownMembers: null });
        }, exports2.enumNumberMember = function(id, init) {
          return (0, _validateNode.default)({ type: "EnumNumberMember", id, init });
        }, exports2.enumStringBody = function(members) {
          return (0, _validateNode.default)({ type: "EnumStringBody", members, explicitType: null, hasUnknownMembers: null });
        }, exports2.enumStringMember = function(id, init) {
          return (0, _validateNode.default)({ type: "EnumStringMember", id, init });
        }, exports2.enumSymbolBody = function(members) {
          return (0, _validateNode.default)({ type: "EnumSymbolBody", members, hasUnknownMembers: null });
        }, exports2.existsTypeAnnotation = function() {
          return { type: "ExistsTypeAnnotation" };
        }, exports2.exportAllDeclaration = function(source) {
          return (0, _validateNode.default)({ type: "ExportAllDeclaration", source });
        }, exports2.exportDefaultDeclaration = function(declaration) {
          return (0, _validateNode.default)({ type: "ExportDefaultDeclaration", declaration });
        }, exports2.exportDefaultSpecifier = function(exported) {
          return (0, _validateNode.default)({ type: "ExportDefaultSpecifier", exported });
        }, exports2.exportNamedDeclaration = function(declaration = null, specifiers = [], source = null) {
          return (0, _validateNode.default)({ type: "ExportNamedDeclaration", declaration, specifiers, source });
        }, exports2.exportNamespaceSpecifier = function(exported) {
          return (0, _validateNode.default)({ type: "ExportNamespaceSpecifier", exported });
        }, exports2.exportSpecifier = function(local, exported) {
          return (0, _validateNode.default)({ type: "ExportSpecifier", local, exported });
        }, exports2.expressionStatement = function(expression) {
          return (0, _validateNode.default)({ type: "ExpressionStatement", expression });
        }, exports2.file = function(program, comments = null, tokens = null) {
          return (0, _validateNode.default)({ type: "File", program, comments, tokens });
        }, exports2.forInStatement = function(left, right, body) {
          return (0, _validateNode.default)({ type: "ForInStatement", left, right, body });
        }, exports2.forOfStatement = function(left, right, body, _await = false) {
          return (0, _validateNode.default)({ type: "ForOfStatement", left, right, body, await: _await });
        }, exports2.forStatement = function(init = null, test = null, update = null, body) {
          return (0, _validateNode.default)({ type: "ForStatement", init, test, update, body });
        }, exports2.functionDeclaration = function(id = null, params, body, generator = false, async = false) {
          return (0, _validateNode.default)({ type: "FunctionDeclaration", id, params, body, generator, async });
        }, exports2.functionExpression = function(id = null, params, body, generator = false, async = false) {
          return (0, _validateNode.default)({ type: "FunctionExpression", id, params, body, generator, async });
        }, exports2.functionTypeAnnotation = function(typeParameters = null, params, rest = null, returnType) {
          return (0, _validateNode.default)({ type: "FunctionTypeAnnotation", typeParameters, params, rest, returnType });
        }, exports2.functionTypeParam = function(name = null, typeAnnotation) {
          return (0, _validateNode.default)({ type: "FunctionTypeParam", name, typeAnnotation });
        }, exports2.genericTypeAnnotation = function(id, typeParameters = null) {
          return (0, _validateNode.default)({ type: "GenericTypeAnnotation", id, typeParameters });
        }, exports2.identifier = function(name) {
          return (0, _validateNode.default)({ type: "Identifier", name });
        }, exports2.ifStatement = function(test, consequent, alternate = null) {
          return (0, _validateNode.default)({ type: "IfStatement", test, consequent, alternate });
        }, exports2.import = function() {
          return { type: "Import" };
        }, exports2.importAttribute = function(key, value) {
          return (0, _validateNode.default)({ type: "ImportAttribute", key, value });
        }, exports2.importDeclaration = function(specifiers, source) {
          return (0, _validateNode.default)({ type: "ImportDeclaration", specifiers, source });
        }, exports2.importDefaultSpecifier = function(local) {
          return (0, _validateNode.default)({ type: "ImportDefaultSpecifier", local });
        }, exports2.importNamespaceSpecifier = function(local) {
          return (0, _validateNode.default)({ type: "ImportNamespaceSpecifier", local });
        }, exports2.importSpecifier = function(local, imported) {
          return (0, _validateNode.default)({ type: "ImportSpecifier", local, imported });
        }, exports2.indexedAccessType = function(objectType, indexType) {
          return (0, _validateNode.default)({ type: "IndexedAccessType", objectType, indexType });
        }, exports2.inferredPredicate = function() {
          return { type: "InferredPredicate" };
        }, exports2.interfaceDeclaration = function(id, typeParameters = null, _extends = null, body) {
          return (0, _validateNode.default)({ type: "InterfaceDeclaration", id, typeParameters, extends: _extends, body });
        }, exports2.interfaceExtends = function(id, typeParameters = null) {
          return (0, _validateNode.default)({ type: "InterfaceExtends", id, typeParameters });
        }, exports2.interfaceTypeAnnotation = function(_extends = null, body) {
          return (0, _validateNode.default)({ type: "InterfaceTypeAnnotation", extends: _extends, body });
        }, exports2.interpreterDirective = function(value) {
          return (0, _validateNode.default)({ type: "InterpreterDirective", value });
        }, exports2.intersectionTypeAnnotation = function(types2) {
          return (0, _validateNode.default)({ type: "IntersectionTypeAnnotation", types: types2 });
        }, exports2.jSXAttribute = exports2.jsxAttribute = function(name, value = null) {
          return (0, _validateNode.default)({ type: "JSXAttribute", name, value });
        }, exports2.jSXClosingElement = exports2.jsxClosingElement = function(name) {
          return (0, _validateNode.default)({ type: "JSXClosingElement", name });
        }, exports2.jSXClosingFragment = exports2.jsxClosingFragment = function() {
          return { type: "JSXClosingFragment" };
        }, exports2.jSXElement = exports2.jsxElement = function(openingElement, closingElement = null, children, selfClosing = null) {
          return (0, _validateNode.default)({ type: "JSXElement", openingElement, closingElement, children, selfClosing });
        }, exports2.jSXEmptyExpression = exports2.jsxEmptyExpression = function() {
          return { type: "JSXEmptyExpression" };
        }, exports2.jSXExpressionContainer = exports2.jsxExpressionContainer = function(expression) {
          return (0, _validateNode.default)({ type: "JSXExpressionContainer", expression });
        }, exports2.jSXFragment = exports2.jsxFragment = function(openingFragment, closingFragment, children) {
          return (0, _validateNode.default)({ type: "JSXFragment", openingFragment, closingFragment, children });
        }, exports2.jSXIdentifier = exports2.jsxIdentifier = function(name) {
          return (0, _validateNode.default)({ type: "JSXIdentifier", name });
        }, exports2.jSXMemberExpression = exports2.jsxMemberExpression = function(object, property) {
          return (0, _validateNode.default)({ type: "JSXMemberExpression", object, property });
        }, exports2.jSXNamespacedName = exports2.jsxNamespacedName = function(namespace, name) {
          return (0, _validateNode.default)({ type: "JSXNamespacedName", namespace, name });
        }, exports2.jSXOpeningElement = exports2.jsxOpeningElement = function(name, attributes, selfClosing = false) {
          return (0, _validateNode.default)({ type: "JSXOpeningElement", name, attributes, selfClosing });
        }, exports2.jSXOpeningFragment = exports2.jsxOpeningFragment = function() {
          return { type: "JSXOpeningFragment" };
        }, exports2.jSXSpreadAttribute = exports2.jsxSpreadAttribute = function(argument) {
          return (0, _validateNode.default)({ type: "JSXSpreadAttribute", argument });
        }, exports2.jSXSpreadChild = exports2.jsxSpreadChild = function(expression) {
          return (0, _validateNode.default)({ type: "JSXSpreadChild", expression });
        }, exports2.jSXText = exports2.jsxText = function(value) {
          return (0, _validateNode.default)({ type: "JSXText", value });
        }, exports2.labeledStatement = function(label, body) {
          return (0, _validateNode.default)({ type: "LabeledStatement", label, body });
        }, exports2.logicalExpression = function(operator, left, right) {
          return (0, _validateNode.default)({ type: "LogicalExpression", operator, left, right });
        }, exports2.memberExpression = function(object, property, computed = false, optional = null) {
          return (0, _validateNode.default)({ type: "MemberExpression", object, property, computed, optional });
        }, exports2.metaProperty = function(meta, property) {
          return (0, _validateNode.default)({ type: "MetaProperty", meta, property });
        }, exports2.mixedTypeAnnotation = function() {
          return { type: "MixedTypeAnnotation" };
        }, exports2.moduleExpression = function(body) {
          return (0, _validateNode.default)({ type: "ModuleExpression", body });
        }, exports2.newExpression = function(callee, _arguments) {
          return (0, _validateNode.default)({ type: "NewExpression", callee, arguments: _arguments });
        }, exports2.noop = function() {
          return { type: "Noop" };
        }, exports2.nullLiteral = function() {
          return { type: "NullLiteral" };
        }, exports2.nullLiteralTypeAnnotation = function() {
          return { type: "NullLiteralTypeAnnotation" };
        }, exports2.nullableTypeAnnotation = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "NullableTypeAnnotation", typeAnnotation });
        }, exports2.numberLiteral = function(value) {
          return console.trace("The node type NumberLiteral has been renamed to NumericLiteral"), numericLiteral(value);
        }, exports2.numberLiteralTypeAnnotation = function(value) {
          return (0, _validateNode.default)({ type: "NumberLiteralTypeAnnotation", value });
        }, exports2.numberTypeAnnotation = function() {
          return { type: "NumberTypeAnnotation" };
        }, exports2.numericLiteral = numericLiteral, exports2.objectExpression = function(properties) {
          return (0, _validateNode.default)({ type: "ObjectExpression", properties });
        }, exports2.objectMethod = function(kind = "method", key, params, body, computed = false, generator = false, async = false) {
          return (0, _validateNode.default)({ type: "ObjectMethod", kind, key, params, body, computed, generator, async });
        }, exports2.objectPattern = function(properties) {
          return (0, _validateNode.default)({ type: "ObjectPattern", properties });
        }, exports2.objectProperty = function(key, value, computed = false, shorthand = false, decorators = null) {
          return (0, _validateNode.default)({ type: "ObjectProperty", key, value, computed, shorthand, decorators });
        }, exports2.objectTypeAnnotation = function(properties, indexers = [], callProperties = [], internalSlots = [], exact = false) {
          return (0, _validateNode.default)({ type: "ObjectTypeAnnotation", properties, indexers, callProperties, internalSlots, exact });
        }, exports2.objectTypeCallProperty = function(value) {
          return (0, _validateNode.default)({ type: "ObjectTypeCallProperty", value, static: null });
        }, exports2.objectTypeIndexer = function(id = null, key, value, variance = null) {
          return (0, _validateNode.default)({ type: "ObjectTypeIndexer", id, key, value, variance, static: null });
        }, exports2.objectTypeInternalSlot = function(id, value, optional, _static, method) {
          return (0, _validateNode.default)({ type: "ObjectTypeInternalSlot", id, value, optional, static: _static, method });
        }, exports2.objectTypeProperty = function(key, value, variance = null) {
          return (0, _validateNode.default)({ type: "ObjectTypeProperty", key, value, variance, kind: null, method: null, optional: null, proto: null, static: null });
        }, exports2.objectTypeSpreadProperty = function(argument) {
          return (0, _validateNode.default)({ type: "ObjectTypeSpreadProperty", argument });
        }, exports2.opaqueType = function(id, typeParameters = null, supertype = null, impltype) {
          return (0, _validateNode.default)({ type: "OpaqueType", id, typeParameters, supertype, impltype });
        }, exports2.optionalCallExpression = function(callee, _arguments, optional) {
          return (0, _validateNode.default)({ type: "OptionalCallExpression", callee, arguments: _arguments, optional });
        }, exports2.optionalIndexedAccessType = function(objectType, indexType) {
          return (0, _validateNode.default)({ type: "OptionalIndexedAccessType", objectType, indexType, optional: null });
        }, exports2.optionalMemberExpression = function(object, property, computed = false, optional) {
          return (0, _validateNode.default)({ type: "OptionalMemberExpression", object, property, computed, optional });
        }, exports2.parenthesizedExpression = function(expression) {
          return (0, _validateNode.default)({ type: "ParenthesizedExpression", expression });
        }, exports2.pipelineBareFunction = function(callee) {
          return (0, _validateNode.default)({ type: "PipelineBareFunction", callee });
        }, exports2.pipelinePrimaryTopicReference = function() {
          return { type: "PipelinePrimaryTopicReference" };
        }, exports2.pipelineTopicExpression = function(expression) {
          return (0, _validateNode.default)({ type: "PipelineTopicExpression", expression });
        }, exports2.placeholder = function(expectedNode, name) {
          return (0, _validateNode.default)({ type: "Placeholder", expectedNode, name });
        }, exports2.privateName = function(id) {
          return (0, _validateNode.default)({ type: "PrivateName", id });
        }, exports2.program = function(body, directives = [], sourceType = "script", interpreter = null) {
          return (0, _validateNode.default)({ type: "Program", body, directives, sourceType, interpreter, sourceFile: null });
        }, exports2.qualifiedTypeIdentifier = function(id, qualification) {
          return (0, _validateNode.default)({ type: "QualifiedTypeIdentifier", id, qualification });
        }, exports2.recordExpression = function(properties) {
          return (0, _validateNode.default)({ type: "RecordExpression", properties });
        }, exports2.regExpLiteral = regExpLiteral, exports2.regexLiteral = function(pattern, flags = "") {
          return console.trace("The node type RegexLiteral has been renamed to RegExpLiteral"), regExpLiteral(pattern, flags);
        }, exports2.restElement = restElement, exports2.restProperty = function(argument) {
          return console.trace("The node type RestProperty has been renamed to RestElement"), restElement(argument);
        }, exports2.returnStatement = function(argument = null) {
          return (0, _validateNode.default)({ type: "ReturnStatement", argument });
        }, exports2.sequenceExpression = function(expressions) {
          return (0, _validateNode.default)({ type: "SequenceExpression", expressions });
        }, exports2.spreadElement = spreadElement, exports2.spreadProperty = function(argument) {
          return console.trace("The node type SpreadProperty has been renamed to SpreadElement"), spreadElement(argument);
        }, exports2.staticBlock = function(body) {
          return (0, _validateNode.default)({ type: "StaticBlock", body });
        }, exports2.stringLiteral = function(value) {
          return (0, _validateNode.default)({ type: "StringLiteral", value });
        }, exports2.stringLiteralTypeAnnotation = function(value) {
          return (0, _validateNode.default)({ type: "StringLiteralTypeAnnotation", value });
        }, exports2.stringTypeAnnotation = function() {
          return { type: "StringTypeAnnotation" };
        }, exports2.super = function() {
          return { type: "Super" };
        }, exports2.switchCase = function(test = null, consequent) {
          return (0, _validateNode.default)({ type: "SwitchCase", test, consequent });
        }, exports2.switchStatement = function(discriminant, cases) {
          return (0, _validateNode.default)({ type: "SwitchStatement", discriminant, cases });
        }, exports2.symbolTypeAnnotation = function() {
          return { type: "SymbolTypeAnnotation" };
        }, exports2.taggedTemplateExpression = function(tag, quasi) {
          return (0, _validateNode.default)({ type: "TaggedTemplateExpression", tag, quasi });
        }, exports2.templateElement = function(value, tail = false) {
          return (0, _validateNode.default)({ type: "TemplateElement", value, tail });
        }, exports2.templateLiteral = function(quasis, expressions) {
          return (0, _validateNode.default)({ type: "TemplateLiteral", quasis, expressions });
        }, exports2.thisExpression = function() {
          return { type: "ThisExpression" };
        }, exports2.thisTypeAnnotation = function() {
          return { type: "ThisTypeAnnotation" };
        }, exports2.throwStatement = function(argument) {
          return (0, _validateNode.default)({ type: "ThrowStatement", argument });
        }, exports2.topicReference = function() {
          return { type: "TopicReference" };
        }, exports2.tryStatement = function(block, handler = null, finalizer = null) {
          return (0, _validateNode.default)({ type: "TryStatement", block, handler, finalizer });
        }, exports2.tSAnyKeyword = exports2.tsAnyKeyword = function() {
          return { type: "TSAnyKeyword" };
        }, exports2.tSArrayType = exports2.tsArrayType = function(elementType) {
          return (0, _validateNode.default)({ type: "TSArrayType", elementType });
        }, exports2.tSAsExpression = exports2.tsAsExpression = function(expression, typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSAsExpression", expression, typeAnnotation });
        }, exports2.tSBigIntKeyword = exports2.tsBigIntKeyword = function() {
          return { type: "TSBigIntKeyword" };
        }, exports2.tSBooleanKeyword = exports2.tsBooleanKeyword = function() {
          return { type: "TSBooleanKeyword" };
        }, exports2.tSCallSignatureDeclaration = exports2.tsCallSignatureDeclaration = function(typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSCallSignatureDeclaration", typeParameters, parameters, typeAnnotation });
        }, exports2.tSConditionalType = exports2.tsConditionalType = function(checkType, extendsType, trueType, falseType) {
          return (0, _validateNode.default)({ type: "TSConditionalType", checkType, extendsType, trueType, falseType });
        }, exports2.tSConstructSignatureDeclaration = exports2.tsConstructSignatureDeclaration = function(typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSConstructSignatureDeclaration", typeParameters, parameters, typeAnnotation });
        }, exports2.tSConstructorType = exports2.tsConstructorType = function(typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSConstructorType", typeParameters, parameters, typeAnnotation });
        }, exports2.tSDeclareFunction = exports2.tsDeclareFunction = function(id = null, typeParameters = null, params, returnType = null) {
          return (0, _validateNode.default)({ type: "TSDeclareFunction", id, typeParameters, params, returnType });
        }, exports2.tSDeclareMethod = exports2.tsDeclareMethod = function(decorators = null, key, typeParameters = null, params, returnType = null) {
          return (0, _validateNode.default)({ type: "TSDeclareMethod", decorators, key, typeParameters, params, returnType });
        }, exports2.tSEnumDeclaration = exports2.tsEnumDeclaration = function(id, members) {
          return (0, _validateNode.default)({ type: "TSEnumDeclaration", id, members });
        }, exports2.tSEnumMember = exports2.tsEnumMember = function(id, initializer = null) {
          return (0, _validateNode.default)({ type: "TSEnumMember", id, initializer });
        }, exports2.tSExportAssignment = exports2.tsExportAssignment = function(expression) {
          return (0, _validateNode.default)({ type: "TSExportAssignment", expression });
        }, exports2.tSExpressionWithTypeArguments = exports2.tsExpressionWithTypeArguments = function(expression, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSExpressionWithTypeArguments", expression, typeParameters });
        }, exports2.tSExternalModuleReference = exports2.tsExternalModuleReference = function(expression) {
          return (0, _validateNode.default)({ type: "TSExternalModuleReference", expression });
        }, exports2.tSFunctionType = exports2.tsFunctionType = function(typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSFunctionType", typeParameters, parameters, typeAnnotation });
        }, exports2.tSImportEqualsDeclaration = exports2.tsImportEqualsDeclaration = function(id, moduleReference) {
          return (0, _validateNode.default)({ type: "TSImportEqualsDeclaration", id, moduleReference, isExport: null });
        }, exports2.tSImportType = exports2.tsImportType = function(argument, qualifier = null, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSImportType", argument, qualifier, typeParameters });
        }, exports2.tSIndexSignature = exports2.tsIndexSignature = function(parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSIndexSignature", parameters, typeAnnotation });
        }, exports2.tSIndexedAccessType = exports2.tsIndexedAccessType = function(objectType, indexType) {
          return (0, _validateNode.default)({ type: "TSIndexedAccessType", objectType, indexType });
        }, exports2.tSInferType = exports2.tsInferType = function(typeParameter) {
          return (0, _validateNode.default)({ type: "TSInferType", typeParameter });
        }, exports2.tSInstantiationExpression = exports2.tsInstantiationExpression = function(expression, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSInstantiationExpression", expression, typeParameters });
        }, exports2.tSInterfaceBody = exports2.tsInterfaceBody = function(body) {
          return (0, _validateNode.default)({ type: "TSInterfaceBody", body });
        }, exports2.tSInterfaceDeclaration = exports2.tsInterfaceDeclaration = function(id, typeParameters = null, _extends = null, body) {
          return (0, _validateNode.default)({ type: "TSInterfaceDeclaration", id, typeParameters, extends: _extends, body });
        }, exports2.tSIntersectionType = exports2.tsIntersectionType = function(types2) {
          return (0, _validateNode.default)({ type: "TSIntersectionType", types: types2 });
        }, exports2.tSIntrinsicKeyword = exports2.tsIntrinsicKeyword = function() {
          return { type: "TSIntrinsicKeyword" };
        }, exports2.tSLiteralType = exports2.tsLiteralType = function(literal2) {
          return (0, _validateNode.default)({ type: "TSLiteralType", literal: literal2 });
        }, exports2.tSMappedType = exports2.tsMappedType = function(typeParameter, typeAnnotation = null, nameType = null) {
          return (0, _validateNode.default)({ type: "TSMappedType", typeParameter, typeAnnotation, nameType });
        }, exports2.tSMethodSignature = exports2.tsMethodSignature = function(key, typeParameters = null, parameters, typeAnnotation = null) {
          return (0, _validateNode.default)({ type: "TSMethodSignature", key, typeParameters, parameters, typeAnnotation, kind: null });
        }, exports2.tSModuleBlock = exports2.tsModuleBlock = function(body) {
          return (0, _validateNode.default)({ type: "TSModuleBlock", body });
        }, exports2.tSModuleDeclaration = exports2.tsModuleDeclaration = function(id, body) {
          return (0, _validateNode.default)({ type: "TSModuleDeclaration", id, body });
        }, exports2.tSNamedTupleMember = exports2.tsNamedTupleMember = function(label, elementType, optional = false) {
          return (0, _validateNode.default)({ type: "TSNamedTupleMember", label, elementType, optional });
        }, exports2.tSNamespaceExportDeclaration = exports2.tsNamespaceExportDeclaration = function(id) {
          return (0, _validateNode.default)({ type: "TSNamespaceExportDeclaration", id });
        }, exports2.tSNeverKeyword = exports2.tsNeverKeyword = function() {
          return { type: "TSNeverKeyword" };
        }, exports2.tSNonNullExpression = exports2.tsNonNullExpression = function(expression) {
          return (0, _validateNode.default)({ type: "TSNonNullExpression", expression });
        }, exports2.tSNullKeyword = exports2.tsNullKeyword = function() {
          return { type: "TSNullKeyword" };
        }, exports2.tSNumberKeyword = exports2.tsNumberKeyword = function() {
          return { type: "TSNumberKeyword" };
        }, exports2.tSObjectKeyword = exports2.tsObjectKeyword = function() {
          return { type: "TSObjectKeyword" };
        }, exports2.tSOptionalType = exports2.tsOptionalType = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSOptionalType", typeAnnotation });
        }, exports2.tSParameterProperty = exports2.tsParameterProperty = function(parameter) {
          return (0, _validateNode.default)({ type: "TSParameterProperty", parameter });
        }, exports2.tSParenthesizedType = exports2.tsParenthesizedType = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSParenthesizedType", typeAnnotation });
        }, exports2.tSPropertySignature = exports2.tsPropertySignature = function(key, typeAnnotation = null, initializer = null) {
          return (0, _validateNode.default)({ type: "TSPropertySignature", key, typeAnnotation, initializer, kind: null });
        }, exports2.tSQualifiedName = exports2.tsQualifiedName = function(left, right) {
          return (0, _validateNode.default)({ type: "TSQualifiedName", left, right });
        }, exports2.tSRestType = exports2.tsRestType = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSRestType", typeAnnotation });
        }, exports2.tSStringKeyword = exports2.tsStringKeyword = function() {
          return { type: "TSStringKeyword" };
        }, exports2.tSSymbolKeyword = exports2.tsSymbolKeyword = function() {
          return { type: "TSSymbolKeyword" };
        }, exports2.tSThisType = exports2.tsThisType = function() {
          return { type: "TSThisType" };
        }, exports2.tSTupleType = exports2.tsTupleType = function(elementTypes) {
          return (0, _validateNode.default)({ type: "TSTupleType", elementTypes });
        }, exports2.tSTypeAliasDeclaration = exports2.tsTypeAliasDeclaration = function(id, typeParameters = null, typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSTypeAliasDeclaration", id, typeParameters, typeAnnotation });
        }, exports2.tSTypeAnnotation = exports2.tsTypeAnnotation = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSTypeAnnotation", typeAnnotation });
        }, exports2.tSTypeAssertion = exports2.tsTypeAssertion = function(typeAnnotation, expression) {
          return (0, _validateNode.default)({ type: "TSTypeAssertion", typeAnnotation, expression });
        }, exports2.tSTypeLiteral = exports2.tsTypeLiteral = function(members) {
          return (0, _validateNode.default)({ type: "TSTypeLiteral", members });
        }, exports2.tSTypeOperator = exports2.tsTypeOperator = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TSTypeOperator", typeAnnotation, operator: null });
        }, exports2.tSTypeParameter = exports2.tsTypeParameter = function(constraint = null, _default = null, name) {
          return (0, _validateNode.default)({ type: "TSTypeParameter", constraint, default: _default, name });
        }, exports2.tSTypeParameterDeclaration = exports2.tsTypeParameterDeclaration = function(params) {
          return (0, _validateNode.default)({ type: "TSTypeParameterDeclaration", params });
        }, exports2.tSTypeParameterInstantiation = exports2.tsTypeParameterInstantiation = function(params) {
          return (0, _validateNode.default)({ type: "TSTypeParameterInstantiation", params });
        }, exports2.tSTypePredicate = exports2.tsTypePredicate = function(parameterName, typeAnnotation = null, asserts = null) {
          return (0, _validateNode.default)({ type: "TSTypePredicate", parameterName, typeAnnotation, asserts });
        }, exports2.tSTypeQuery = exports2.tsTypeQuery = function(exprName, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSTypeQuery", exprName, typeParameters });
        }, exports2.tSTypeReference = exports2.tsTypeReference = function(typeName, typeParameters = null) {
          return (0, _validateNode.default)({ type: "TSTypeReference", typeName, typeParameters });
        }, exports2.tSUndefinedKeyword = exports2.tsUndefinedKeyword = function() {
          return { type: "TSUndefinedKeyword" };
        }, exports2.tSUnionType = exports2.tsUnionType = function(types2) {
          return (0, _validateNode.default)({ type: "TSUnionType", types: types2 });
        }, exports2.tSUnknownKeyword = exports2.tsUnknownKeyword = function() {
          return { type: "TSUnknownKeyword" };
        }, exports2.tSVoidKeyword = exports2.tsVoidKeyword = function() {
          return { type: "TSVoidKeyword" };
        }, exports2.tupleExpression = function(elements = []) {
          return (0, _validateNode.default)({ type: "TupleExpression", elements });
        }, exports2.tupleTypeAnnotation = function(types2) {
          return (0, _validateNode.default)({ type: "TupleTypeAnnotation", types: types2 });
        }, exports2.typeAlias = function(id, typeParameters = null, right) {
          return (0, _validateNode.default)({ type: "TypeAlias", id, typeParameters, right });
        }, exports2.typeAnnotation = function(typeAnnotation) {
          return (0, _validateNode.default)({ type: "TypeAnnotation", typeAnnotation });
        }, exports2.typeCastExpression = function(expression, typeAnnotation) {
          return (0, _validateNode.default)({ type: "TypeCastExpression", expression, typeAnnotation });
        }, exports2.typeParameter = function(bound = null, _default = null, variance = null) {
          return (0, _validateNode.default)({ type: "TypeParameter", bound, default: _default, variance, name: null });
        }, exports2.typeParameterDeclaration = function(params) {
          return (0, _validateNode.default)({ type: "TypeParameterDeclaration", params });
        }, exports2.typeParameterInstantiation = function(params) {
          return (0, _validateNode.default)({ type: "TypeParameterInstantiation", params });
        }, exports2.typeofTypeAnnotation = function(argument) {
          return (0, _validateNode.default)({ type: "TypeofTypeAnnotation", argument });
        }, exports2.unaryExpression = function(operator, argument, prefix = true) {
          return (0, _validateNode.default)({ type: "UnaryExpression", operator, argument, prefix });
        }, exports2.unionTypeAnnotation = function(types2) {
          return (0, _validateNode.default)({ type: "UnionTypeAnnotation", types: types2 });
        }, exports2.updateExpression = function(operator, argument, prefix = false) {
          return (0, _validateNode.default)({ type: "UpdateExpression", operator, argument, prefix });
        }, exports2.v8IntrinsicIdentifier = function(name) {
          return (0, _validateNode.default)({ type: "V8IntrinsicIdentifier", name });
        }, exports2.variableDeclaration = function(kind, declarations) {
          return (0, _validateNode.default)({ type: "VariableDeclaration", kind, declarations });
        }, exports2.variableDeclarator = function(id, init = null) {
          return (0, _validateNode.default)({ type: "VariableDeclarator", id, init });
        }, exports2.variance = function(kind) {
          return (0, _validateNode.default)({ type: "Variance", kind });
        }, exports2.voidTypeAnnotation = function() {
          return { type: "VoidTypeAnnotation" };
        }, exports2.whileStatement = function(test, body) {
          return (0, _validateNode.default)({ type: "WhileStatement", test, body });
        }, exports2.withStatement = function(object, body) {
          return (0, _validateNode.default)({ type: "WithStatement", object, body });
        }, exports2.yieldExpression = function(argument = null, delegate = false) {
          return (0, _validateNode.default)({ type: "YieldExpression", argument, delegate });
        };
        var _validateNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/validateNode.js");
        function numericLiteral(value) {
          return (0, _validateNode.default)({ type: "NumericLiteral", value });
        }
        function regExpLiteral(pattern, flags = "") {
          return (0, _validateNode.default)({ type: "RegExpLiteral", pattern, flags });
        }
        function restElement(argument) {
          return (0, _validateNode.default)({ type: "RestElement", argument });
        }
        function spreadElement(argument) {
          return (0, _validateNode.default)({ type: "SpreadElement", argument });
        }
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/uppercase.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "AnyTypeAnnotation", { enumerable: true, get: function() {
          return _index.anyTypeAnnotation;
        } }), Object.defineProperty(exports2, "ArgumentPlaceholder", { enumerable: true, get: function() {
          return _index.argumentPlaceholder;
        } }), Object.defineProperty(exports2, "ArrayExpression", { enumerable: true, get: function() {
          return _index.arrayExpression;
        } }), Object.defineProperty(exports2, "ArrayPattern", { enumerable: true, get: function() {
          return _index.arrayPattern;
        } }), Object.defineProperty(exports2, "ArrayTypeAnnotation", { enumerable: true, get: function() {
          return _index.arrayTypeAnnotation;
        } }), Object.defineProperty(exports2, "ArrowFunctionExpression", { enumerable: true, get: function() {
          return _index.arrowFunctionExpression;
        } }), Object.defineProperty(exports2, "AssignmentExpression", { enumerable: true, get: function() {
          return _index.assignmentExpression;
        } }), Object.defineProperty(exports2, "AssignmentPattern", { enumerable: true, get: function() {
          return _index.assignmentPattern;
        } }), Object.defineProperty(exports2, "AwaitExpression", { enumerable: true, get: function() {
          return _index.awaitExpression;
        } }), Object.defineProperty(exports2, "BigIntLiteral", { enumerable: true, get: function() {
          return _index.bigIntLiteral;
        } }), Object.defineProperty(exports2, "BinaryExpression", { enumerable: true, get: function() {
          return _index.binaryExpression;
        } }), Object.defineProperty(exports2, "BindExpression", { enumerable: true, get: function() {
          return _index.bindExpression;
        } }), Object.defineProperty(exports2, "BlockStatement", { enumerable: true, get: function() {
          return _index.blockStatement;
        } }), Object.defineProperty(exports2, "BooleanLiteral", { enumerable: true, get: function() {
          return _index.booleanLiteral;
        } }), Object.defineProperty(exports2, "BooleanLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.booleanLiteralTypeAnnotation;
        } }), Object.defineProperty(exports2, "BooleanTypeAnnotation", { enumerable: true, get: function() {
          return _index.booleanTypeAnnotation;
        } }), Object.defineProperty(exports2, "BreakStatement", { enumerable: true, get: function() {
          return _index.breakStatement;
        } }), Object.defineProperty(exports2, "CallExpression", { enumerable: true, get: function() {
          return _index.callExpression;
        } }), Object.defineProperty(exports2, "CatchClause", { enumerable: true, get: function() {
          return _index.catchClause;
        } }), Object.defineProperty(exports2, "ClassAccessorProperty", { enumerable: true, get: function() {
          return _index.classAccessorProperty;
        } }), Object.defineProperty(exports2, "ClassBody", { enumerable: true, get: function() {
          return _index.classBody;
        } }), Object.defineProperty(exports2, "ClassDeclaration", { enumerable: true, get: function() {
          return _index.classDeclaration;
        } }), Object.defineProperty(exports2, "ClassExpression", { enumerable: true, get: function() {
          return _index.classExpression;
        } }), Object.defineProperty(exports2, "ClassImplements", { enumerable: true, get: function() {
          return _index.classImplements;
        } }), Object.defineProperty(exports2, "ClassMethod", { enumerable: true, get: function() {
          return _index.classMethod;
        } }), Object.defineProperty(exports2, "ClassPrivateMethod", { enumerable: true, get: function() {
          return _index.classPrivateMethod;
        } }), Object.defineProperty(exports2, "ClassPrivateProperty", { enumerable: true, get: function() {
          return _index.classPrivateProperty;
        } }), Object.defineProperty(exports2, "ClassProperty", { enumerable: true, get: function() {
          return _index.classProperty;
        } }), Object.defineProperty(exports2, "ConditionalExpression", { enumerable: true, get: function() {
          return _index.conditionalExpression;
        } }), Object.defineProperty(exports2, "ContinueStatement", { enumerable: true, get: function() {
          return _index.continueStatement;
        } }), Object.defineProperty(exports2, "DebuggerStatement", { enumerable: true, get: function() {
          return _index.debuggerStatement;
        } }), Object.defineProperty(exports2, "DecimalLiteral", { enumerable: true, get: function() {
          return _index.decimalLiteral;
        } }), Object.defineProperty(exports2, "DeclareClass", { enumerable: true, get: function() {
          return _index.declareClass;
        } }), Object.defineProperty(exports2, "DeclareExportAllDeclaration", { enumerable: true, get: function() {
          return _index.declareExportAllDeclaration;
        } }), Object.defineProperty(exports2, "DeclareExportDeclaration", { enumerable: true, get: function() {
          return _index.declareExportDeclaration;
        } }), Object.defineProperty(exports2, "DeclareFunction", { enumerable: true, get: function() {
          return _index.declareFunction;
        } }), Object.defineProperty(exports2, "DeclareInterface", { enumerable: true, get: function() {
          return _index.declareInterface;
        } }), Object.defineProperty(exports2, "DeclareModule", { enumerable: true, get: function() {
          return _index.declareModule;
        } }), Object.defineProperty(exports2, "DeclareModuleExports", { enumerable: true, get: function() {
          return _index.declareModuleExports;
        } }), Object.defineProperty(exports2, "DeclareOpaqueType", { enumerable: true, get: function() {
          return _index.declareOpaqueType;
        } }), Object.defineProperty(exports2, "DeclareTypeAlias", { enumerable: true, get: function() {
          return _index.declareTypeAlias;
        } }), Object.defineProperty(exports2, "DeclareVariable", { enumerable: true, get: function() {
          return _index.declareVariable;
        } }), Object.defineProperty(exports2, "DeclaredPredicate", { enumerable: true, get: function() {
          return _index.declaredPredicate;
        } }), Object.defineProperty(exports2, "Decorator", { enumerable: true, get: function() {
          return _index.decorator;
        } }), Object.defineProperty(exports2, "Directive", { enumerable: true, get: function() {
          return _index.directive;
        } }), Object.defineProperty(exports2, "DirectiveLiteral", { enumerable: true, get: function() {
          return _index.directiveLiteral;
        } }), Object.defineProperty(exports2, "DoExpression", { enumerable: true, get: function() {
          return _index.doExpression;
        } }), Object.defineProperty(exports2, "DoWhileStatement", { enumerable: true, get: function() {
          return _index.doWhileStatement;
        } }), Object.defineProperty(exports2, "EmptyStatement", { enumerable: true, get: function() {
          return _index.emptyStatement;
        } }), Object.defineProperty(exports2, "EmptyTypeAnnotation", { enumerable: true, get: function() {
          return _index.emptyTypeAnnotation;
        } }), Object.defineProperty(exports2, "EnumBooleanBody", { enumerable: true, get: function() {
          return _index.enumBooleanBody;
        } }), Object.defineProperty(exports2, "EnumBooleanMember", { enumerable: true, get: function() {
          return _index.enumBooleanMember;
        } }), Object.defineProperty(exports2, "EnumDeclaration", { enumerable: true, get: function() {
          return _index.enumDeclaration;
        } }), Object.defineProperty(exports2, "EnumDefaultedMember", { enumerable: true, get: function() {
          return _index.enumDefaultedMember;
        } }), Object.defineProperty(exports2, "EnumNumberBody", { enumerable: true, get: function() {
          return _index.enumNumberBody;
        } }), Object.defineProperty(exports2, "EnumNumberMember", { enumerable: true, get: function() {
          return _index.enumNumberMember;
        } }), Object.defineProperty(exports2, "EnumStringBody", { enumerable: true, get: function() {
          return _index.enumStringBody;
        } }), Object.defineProperty(exports2, "EnumStringMember", { enumerable: true, get: function() {
          return _index.enumStringMember;
        } }), Object.defineProperty(exports2, "EnumSymbolBody", { enumerable: true, get: function() {
          return _index.enumSymbolBody;
        } }), Object.defineProperty(exports2, "ExistsTypeAnnotation", { enumerable: true, get: function() {
          return _index.existsTypeAnnotation;
        } }), Object.defineProperty(exports2, "ExportAllDeclaration", { enumerable: true, get: function() {
          return _index.exportAllDeclaration;
        } }), Object.defineProperty(exports2, "ExportDefaultDeclaration", { enumerable: true, get: function() {
          return _index.exportDefaultDeclaration;
        } }), Object.defineProperty(exports2, "ExportDefaultSpecifier", { enumerable: true, get: function() {
          return _index.exportDefaultSpecifier;
        } }), Object.defineProperty(exports2, "ExportNamedDeclaration", { enumerable: true, get: function() {
          return _index.exportNamedDeclaration;
        } }), Object.defineProperty(exports2, "ExportNamespaceSpecifier", { enumerable: true, get: function() {
          return _index.exportNamespaceSpecifier;
        } }), Object.defineProperty(exports2, "ExportSpecifier", { enumerable: true, get: function() {
          return _index.exportSpecifier;
        } }), Object.defineProperty(exports2, "ExpressionStatement", { enumerable: true, get: function() {
          return _index.expressionStatement;
        } }), Object.defineProperty(exports2, "File", { enumerable: true, get: function() {
          return _index.file;
        } }), Object.defineProperty(exports2, "ForInStatement", { enumerable: true, get: function() {
          return _index.forInStatement;
        } }), Object.defineProperty(exports2, "ForOfStatement", { enumerable: true, get: function() {
          return _index.forOfStatement;
        } }), Object.defineProperty(exports2, "ForStatement", { enumerable: true, get: function() {
          return _index.forStatement;
        } }), Object.defineProperty(exports2, "FunctionDeclaration", { enumerable: true, get: function() {
          return _index.functionDeclaration;
        } }), Object.defineProperty(exports2, "FunctionExpression", { enumerable: true, get: function() {
          return _index.functionExpression;
        } }), Object.defineProperty(exports2, "FunctionTypeAnnotation", { enumerable: true, get: function() {
          return _index.functionTypeAnnotation;
        } }), Object.defineProperty(exports2, "FunctionTypeParam", { enumerable: true, get: function() {
          return _index.functionTypeParam;
        } }), Object.defineProperty(exports2, "GenericTypeAnnotation", { enumerable: true, get: function() {
          return _index.genericTypeAnnotation;
        } }), Object.defineProperty(exports2, "Identifier", { enumerable: true, get: function() {
          return _index.identifier;
        } }), Object.defineProperty(exports2, "IfStatement", { enumerable: true, get: function() {
          return _index.ifStatement;
        } }), Object.defineProperty(exports2, "Import", { enumerable: true, get: function() {
          return _index.import;
        } }), Object.defineProperty(exports2, "ImportAttribute", { enumerable: true, get: function() {
          return _index.importAttribute;
        } }), Object.defineProperty(exports2, "ImportDeclaration", { enumerable: true, get: function() {
          return _index.importDeclaration;
        } }), Object.defineProperty(exports2, "ImportDefaultSpecifier", { enumerable: true, get: function() {
          return _index.importDefaultSpecifier;
        } }), Object.defineProperty(exports2, "ImportNamespaceSpecifier", { enumerable: true, get: function() {
          return _index.importNamespaceSpecifier;
        } }), Object.defineProperty(exports2, "ImportSpecifier", { enumerable: true, get: function() {
          return _index.importSpecifier;
        } }), Object.defineProperty(exports2, "IndexedAccessType", { enumerable: true, get: function() {
          return _index.indexedAccessType;
        } }), Object.defineProperty(exports2, "InferredPredicate", { enumerable: true, get: function() {
          return _index.inferredPredicate;
        } }), Object.defineProperty(exports2, "InterfaceDeclaration", { enumerable: true, get: function() {
          return _index.interfaceDeclaration;
        } }), Object.defineProperty(exports2, "InterfaceExtends", { enumerable: true, get: function() {
          return _index.interfaceExtends;
        } }), Object.defineProperty(exports2, "InterfaceTypeAnnotation", { enumerable: true, get: function() {
          return _index.interfaceTypeAnnotation;
        } }), Object.defineProperty(exports2, "InterpreterDirective", { enumerable: true, get: function() {
          return _index.interpreterDirective;
        } }), Object.defineProperty(exports2, "IntersectionTypeAnnotation", { enumerable: true, get: function() {
          return _index.intersectionTypeAnnotation;
        } }), Object.defineProperty(exports2, "JSXAttribute", { enumerable: true, get: function() {
          return _index.jsxAttribute;
        } }), Object.defineProperty(exports2, "JSXClosingElement", { enumerable: true, get: function() {
          return _index.jsxClosingElement;
        } }), Object.defineProperty(exports2, "JSXClosingFragment", { enumerable: true, get: function() {
          return _index.jsxClosingFragment;
        } }), Object.defineProperty(exports2, "JSXElement", { enumerable: true, get: function() {
          return _index.jsxElement;
        } }), Object.defineProperty(exports2, "JSXEmptyExpression", { enumerable: true, get: function() {
          return _index.jsxEmptyExpression;
        } }), Object.defineProperty(exports2, "JSXExpressionContainer", { enumerable: true, get: function() {
          return _index.jsxExpressionContainer;
        } }), Object.defineProperty(exports2, "JSXFragment", { enumerable: true, get: function() {
          return _index.jsxFragment;
        } }), Object.defineProperty(exports2, "JSXIdentifier", { enumerable: true, get: function() {
          return _index.jsxIdentifier;
        } }), Object.defineProperty(exports2, "JSXMemberExpression", { enumerable: true, get: function() {
          return _index.jsxMemberExpression;
        } }), Object.defineProperty(exports2, "JSXNamespacedName", { enumerable: true, get: function() {
          return _index.jsxNamespacedName;
        } }), Object.defineProperty(exports2, "JSXOpeningElement", { enumerable: true, get: function() {
          return _index.jsxOpeningElement;
        } }), Object.defineProperty(exports2, "JSXOpeningFragment", { enumerable: true, get: function() {
          return _index.jsxOpeningFragment;
        } }), Object.defineProperty(exports2, "JSXSpreadAttribute", { enumerable: true, get: function() {
          return _index.jsxSpreadAttribute;
        } }), Object.defineProperty(exports2, "JSXSpreadChild", { enumerable: true, get: function() {
          return _index.jsxSpreadChild;
        } }), Object.defineProperty(exports2, "JSXText", { enumerable: true, get: function() {
          return _index.jsxText;
        } }), Object.defineProperty(exports2, "LabeledStatement", { enumerable: true, get: function() {
          return _index.labeledStatement;
        } }), Object.defineProperty(exports2, "LogicalExpression", { enumerable: true, get: function() {
          return _index.logicalExpression;
        } }), Object.defineProperty(exports2, "MemberExpression", { enumerable: true, get: function() {
          return _index.memberExpression;
        } }), Object.defineProperty(exports2, "MetaProperty", { enumerable: true, get: function() {
          return _index.metaProperty;
        } }), Object.defineProperty(exports2, "MixedTypeAnnotation", { enumerable: true, get: function() {
          return _index.mixedTypeAnnotation;
        } }), Object.defineProperty(exports2, "ModuleExpression", { enumerable: true, get: function() {
          return _index.moduleExpression;
        } }), Object.defineProperty(exports2, "NewExpression", { enumerable: true, get: function() {
          return _index.newExpression;
        } }), Object.defineProperty(exports2, "Noop", { enumerable: true, get: function() {
          return _index.noop;
        } }), Object.defineProperty(exports2, "NullLiteral", { enumerable: true, get: function() {
          return _index.nullLiteral;
        } }), Object.defineProperty(exports2, "NullLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.nullLiteralTypeAnnotation;
        } }), Object.defineProperty(exports2, "NullableTypeAnnotation", { enumerable: true, get: function() {
          return _index.nullableTypeAnnotation;
        } }), Object.defineProperty(exports2, "NumberLiteral", { enumerable: true, get: function() {
          return _index.numberLiteral;
        } }), Object.defineProperty(exports2, "NumberLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.numberLiteralTypeAnnotation;
        } }), Object.defineProperty(exports2, "NumberTypeAnnotation", { enumerable: true, get: function() {
          return _index.numberTypeAnnotation;
        } }), Object.defineProperty(exports2, "NumericLiteral", { enumerable: true, get: function() {
          return _index.numericLiteral;
        } }), Object.defineProperty(exports2, "ObjectExpression", { enumerable: true, get: function() {
          return _index.objectExpression;
        } }), Object.defineProperty(exports2, "ObjectMethod", { enumerable: true, get: function() {
          return _index.objectMethod;
        } }), Object.defineProperty(exports2, "ObjectPattern", { enumerable: true, get: function() {
          return _index.objectPattern;
        } }), Object.defineProperty(exports2, "ObjectProperty", { enumerable: true, get: function() {
          return _index.objectProperty;
        } }), Object.defineProperty(exports2, "ObjectTypeAnnotation", { enumerable: true, get: function() {
          return _index.objectTypeAnnotation;
        } }), Object.defineProperty(exports2, "ObjectTypeCallProperty", { enumerable: true, get: function() {
          return _index.objectTypeCallProperty;
        } }), Object.defineProperty(exports2, "ObjectTypeIndexer", { enumerable: true, get: function() {
          return _index.objectTypeIndexer;
        } }), Object.defineProperty(exports2, "ObjectTypeInternalSlot", { enumerable: true, get: function() {
          return _index.objectTypeInternalSlot;
        } }), Object.defineProperty(exports2, "ObjectTypeProperty", { enumerable: true, get: function() {
          return _index.objectTypeProperty;
        } }), Object.defineProperty(exports2, "ObjectTypeSpreadProperty", { enumerable: true, get: function() {
          return _index.objectTypeSpreadProperty;
        } }), Object.defineProperty(exports2, "OpaqueType", { enumerable: true, get: function() {
          return _index.opaqueType;
        } }), Object.defineProperty(exports2, "OptionalCallExpression", { enumerable: true, get: function() {
          return _index.optionalCallExpression;
        } }), Object.defineProperty(exports2, "OptionalIndexedAccessType", { enumerable: true, get: function() {
          return _index.optionalIndexedAccessType;
        } }), Object.defineProperty(exports2, "OptionalMemberExpression", { enumerable: true, get: function() {
          return _index.optionalMemberExpression;
        } }), Object.defineProperty(exports2, "ParenthesizedExpression", { enumerable: true, get: function() {
          return _index.parenthesizedExpression;
        } }), Object.defineProperty(exports2, "PipelineBareFunction", { enumerable: true, get: function() {
          return _index.pipelineBareFunction;
        } }), Object.defineProperty(exports2, "PipelinePrimaryTopicReference", { enumerable: true, get: function() {
          return _index.pipelinePrimaryTopicReference;
        } }), Object.defineProperty(exports2, "PipelineTopicExpression", { enumerable: true, get: function() {
          return _index.pipelineTopicExpression;
        } }), Object.defineProperty(exports2, "Placeholder", { enumerable: true, get: function() {
          return _index.placeholder;
        } }), Object.defineProperty(exports2, "PrivateName", { enumerable: true, get: function() {
          return _index.privateName;
        } }), Object.defineProperty(exports2, "Program", { enumerable: true, get: function() {
          return _index.program;
        } }), Object.defineProperty(exports2, "QualifiedTypeIdentifier", { enumerable: true, get: function() {
          return _index.qualifiedTypeIdentifier;
        } }), Object.defineProperty(exports2, "RecordExpression", { enumerable: true, get: function() {
          return _index.recordExpression;
        } }), Object.defineProperty(exports2, "RegExpLiteral", { enumerable: true, get: function() {
          return _index.regExpLiteral;
        } }), Object.defineProperty(exports2, "RegexLiteral", { enumerable: true, get: function() {
          return _index.regexLiteral;
        } }), Object.defineProperty(exports2, "RestElement", { enumerable: true, get: function() {
          return _index.restElement;
        } }), Object.defineProperty(exports2, "RestProperty", { enumerable: true, get: function() {
          return _index.restProperty;
        } }), Object.defineProperty(exports2, "ReturnStatement", { enumerable: true, get: function() {
          return _index.returnStatement;
        } }), Object.defineProperty(exports2, "SequenceExpression", { enumerable: true, get: function() {
          return _index.sequenceExpression;
        } }), Object.defineProperty(exports2, "SpreadElement", { enumerable: true, get: function() {
          return _index.spreadElement;
        } }), Object.defineProperty(exports2, "SpreadProperty", { enumerable: true, get: function() {
          return _index.spreadProperty;
        } }), Object.defineProperty(exports2, "StaticBlock", { enumerable: true, get: function() {
          return _index.staticBlock;
        } }), Object.defineProperty(exports2, "StringLiteral", { enumerable: true, get: function() {
          return _index.stringLiteral;
        } }), Object.defineProperty(exports2, "StringLiteralTypeAnnotation", { enumerable: true, get: function() {
          return _index.stringLiteralTypeAnnotation;
        } }), Object.defineProperty(exports2, "StringTypeAnnotation", { enumerable: true, get: function() {
          return _index.stringTypeAnnotation;
        } }), Object.defineProperty(exports2, "Super", { enumerable: true, get: function() {
          return _index.super;
        } }), Object.defineProperty(exports2, "SwitchCase", { enumerable: true, get: function() {
          return _index.switchCase;
        } }), Object.defineProperty(exports2, "SwitchStatement", { enumerable: true, get: function() {
          return _index.switchStatement;
        } }), Object.defineProperty(exports2, "SymbolTypeAnnotation", { enumerable: true, get: function() {
          return _index.symbolTypeAnnotation;
        } }), Object.defineProperty(exports2, "TSAnyKeyword", { enumerable: true, get: function() {
          return _index.tsAnyKeyword;
        } }), Object.defineProperty(exports2, "TSArrayType", { enumerable: true, get: function() {
          return _index.tsArrayType;
        } }), Object.defineProperty(exports2, "TSAsExpression", { enumerable: true, get: function() {
          return _index.tsAsExpression;
        } }), Object.defineProperty(exports2, "TSBigIntKeyword", { enumerable: true, get: function() {
          return _index.tsBigIntKeyword;
        } }), Object.defineProperty(exports2, "TSBooleanKeyword", { enumerable: true, get: function() {
          return _index.tsBooleanKeyword;
        } }), Object.defineProperty(exports2, "TSCallSignatureDeclaration", { enumerable: true, get: function() {
          return _index.tsCallSignatureDeclaration;
        } }), Object.defineProperty(exports2, "TSConditionalType", { enumerable: true, get: function() {
          return _index.tsConditionalType;
        } }), Object.defineProperty(exports2, "TSConstructSignatureDeclaration", { enumerable: true, get: function() {
          return _index.tsConstructSignatureDeclaration;
        } }), Object.defineProperty(exports2, "TSConstructorType", { enumerable: true, get: function() {
          return _index.tsConstructorType;
        } }), Object.defineProperty(exports2, "TSDeclareFunction", { enumerable: true, get: function() {
          return _index.tsDeclareFunction;
        } }), Object.defineProperty(exports2, "TSDeclareMethod", { enumerable: true, get: function() {
          return _index.tsDeclareMethod;
        } }), Object.defineProperty(exports2, "TSEnumDeclaration", { enumerable: true, get: function() {
          return _index.tsEnumDeclaration;
        } }), Object.defineProperty(exports2, "TSEnumMember", { enumerable: true, get: function() {
          return _index.tsEnumMember;
        } }), Object.defineProperty(exports2, "TSExportAssignment", { enumerable: true, get: function() {
          return _index.tsExportAssignment;
        } }), Object.defineProperty(exports2, "TSExpressionWithTypeArguments", { enumerable: true, get: function() {
          return _index.tsExpressionWithTypeArguments;
        } }), Object.defineProperty(exports2, "TSExternalModuleReference", { enumerable: true, get: function() {
          return _index.tsExternalModuleReference;
        } }), Object.defineProperty(exports2, "TSFunctionType", { enumerable: true, get: function() {
          return _index.tsFunctionType;
        } }), Object.defineProperty(exports2, "TSImportEqualsDeclaration", { enumerable: true, get: function() {
          return _index.tsImportEqualsDeclaration;
        } }), Object.defineProperty(exports2, "TSImportType", { enumerable: true, get: function() {
          return _index.tsImportType;
        } }), Object.defineProperty(exports2, "TSIndexSignature", { enumerable: true, get: function() {
          return _index.tsIndexSignature;
        } }), Object.defineProperty(exports2, "TSIndexedAccessType", { enumerable: true, get: function() {
          return _index.tsIndexedAccessType;
        } }), Object.defineProperty(exports2, "TSInferType", { enumerable: true, get: function() {
          return _index.tsInferType;
        } }), Object.defineProperty(exports2, "TSInstantiationExpression", { enumerable: true, get: function() {
          return _index.tsInstantiationExpression;
        } }), Object.defineProperty(exports2, "TSInterfaceBody", { enumerable: true, get: function() {
          return _index.tsInterfaceBody;
        } }), Object.defineProperty(exports2, "TSInterfaceDeclaration", { enumerable: true, get: function() {
          return _index.tsInterfaceDeclaration;
        } }), Object.defineProperty(exports2, "TSIntersectionType", { enumerable: true, get: function() {
          return _index.tsIntersectionType;
        } }), Object.defineProperty(exports2, "TSIntrinsicKeyword", { enumerable: true, get: function() {
          return _index.tsIntrinsicKeyword;
        } }), Object.defineProperty(exports2, "TSLiteralType", { enumerable: true, get: function() {
          return _index.tsLiteralType;
        } }), Object.defineProperty(exports2, "TSMappedType", { enumerable: true, get: function() {
          return _index.tsMappedType;
        } }), Object.defineProperty(exports2, "TSMethodSignature", { enumerable: true, get: function() {
          return _index.tsMethodSignature;
        } }), Object.defineProperty(exports2, "TSModuleBlock", { enumerable: true, get: function() {
          return _index.tsModuleBlock;
        } }), Object.defineProperty(exports2, "TSModuleDeclaration", { enumerable: true, get: function() {
          return _index.tsModuleDeclaration;
        } }), Object.defineProperty(exports2, "TSNamedTupleMember", { enumerable: true, get: function() {
          return _index.tsNamedTupleMember;
        } }), Object.defineProperty(exports2, "TSNamespaceExportDeclaration", { enumerable: true, get: function() {
          return _index.tsNamespaceExportDeclaration;
        } }), Object.defineProperty(exports2, "TSNeverKeyword", { enumerable: true, get: function() {
          return _index.tsNeverKeyword;
        } }), Object.defineProperty(exports2, "TSNonNullExpression", { enumerable: true, get: function() {
          return _index.tsNonNullExpression;
        } }), Object.defineProperty(exports2, "TSNullKeyword", { enumerable: true, get: function() {
          return _index.tsNullKeyword;
        } }), Object.defineProperty(exports2, "TSNumberKeyword", { enumerable: true, get: function() {
          return _index.tsNumberKeyword;
        } }), Object.defineProperty(exports2, "TSObjectKeyword", { enumerable: true, get: function() {
          return _index.tsObjectKeyword;
        } }), Object.defineProperty(exports2, "TSOptionalType", { enumerable: true, get: function() {
          return _index.tsOptionalType;
        } }), Object.defineProperty(exports2, "TSParameterProperty", { enumerable: true, get: function() {
          return _index.tsParameterProperty;
        } }), Object.defineProperty(exports2, "TSParenthesizedType", { enumerable: true, get: function() {
          return _index.tsParenthesizedType;
        } }), Object.defineProperty(exports2, "TSPropertySignature", { enumerable: true, get: function() {
          return _index.tsPropertySignature;
        } }), Object.defineProperty(exports2, "TSQualifiedName", { enumerable: true, get: function() {
          return _index.tsQualifiedName;
        } }), Object.defineProperty(exports2, "TSRestType", { enumerable: true, get: function() {
          return _index.tsRestType;
        } }), Object.defineProperty(exports2, "TSStringKeyword", { enumerable: true, get: function() {
          return _index.tsStringKeyword;
        } }), Object.defineProperty(exports2, "TSSymbolKeyword", { enumerable: true, get: function() {
          return _index.tsSymbolKeyword;
        } }), Object.defineProperty(exports2, "TSThisType", { enumerable: true, get: function() {
          return _index.tsThisType;
        } }), Object.defineProperty(exports2, "TSTupleType", { enumerable: true, get: function() {
          return _index.tsTupleType;
        } }), Object.defineProperty(exports2, "TSTypeAliasDeclaration", { enumerable: true, get: function() {
          return _index.tsTypeAliasDeclaration;
        } }), Object.defineProperty(exports2, "TSTypeAnnotation", { enumerable: true, get: function() {
          return _index.tsTypeAnnotation;
        } }), Object.defineProperty(exports2, "TSTypeAssertion", { enumerable: true, get: function() {
          return _index.tsTypeAssertion;
        } }), Object.defineProperty(exports2, "TSTypeLiteral", { enumerable: true, get: function() {
          return _index.tsTypeLiteral;
        } }), Object.defineProperty(exports2, "TSTypeOperator", { enumerable: true, get: function() {
          return _index.tsTypeOperator;
        } }), Object.defineProperty(exports2, "TSTypeParameter", { enumerable: true, get: function() {
          return _index.tsTypeParameter;
        } }), Object.defineProperty(exports2, "TSTypeParameterDeclaration", { enumerable: true, get: function() {
          return _index.tsTypeParameterDeclaration;
        } }), Object.defineProperty(exports2, "TSTypeParameterInstantiation", { enumerable: true, get: function() {
          return _index.tsTypeParameterInstantiation;
        } }), Object.defineProperty(exports2, "TSTypePredicate", { enumerable: true, get: function() {
          return _index.tsTypePredicate;
        } }), Object.defineProperty(exports2, "TSTypeQuery", { enumerable: true, get: function() {
          return _index.tsTypeQuery;
        } }), Object.defineProperty(exports2, "TSTypeReference", { enumerable: true, get: function() {
          return _index.tsTypeReference;
        } }), Object.defineProperty(exports2, "TSUndefinedKeyword", { enumerable: true, get: function() {
          return _index.tsUndefinedKeyword;
        } }), Object.defineProperty(exports2, "TSUnionType", { enumerable: true, get: function() {
          return _index.tsUnionType;
        } }), Object.defineProperty(exports2, "TSUnknownKeyword", { enumerable: true, get: function() {
          return _index.tsUnknownKeyword;
        } }), Object.defineProperty(exports2, "TSVoidKeyword", { enumerable: true, get: function() {
          return _index.tsVoidKeyword;
        } }), Object.defineProperty(exports2, "TaggedTemplateExpression", { enumerable: true, get: function() {
          return _index.taggedTemplateExpression;
        } }), Object.defineProperty(exports2, "TemplateElement", { enumerable: true, get: function() {
          return _index.templateElement;
        } }), Object.defineProperty(exports2, "TemplateLiteral", { enumerable: true, get: function() {
          return _index.templateLiteral;
        } }), Object.defineProperty(exports2, "ThisExpression", { enumerable: true, get: function() {
          return _index.thisExpression;
        } }), Object.defineProperty(exports2, "ThisTypeAnnotation", { enumerable: true, get: function() {
          return _index.thisTypeAnnotation;
        } }), Object.defineProperty(exports2, "ThrowStatement", { enumerable: true, get: function() {
          return _index.throwStatement;
        } }), Object.defineProperty(exports2, "TopicReference", { enumerable: true, get: function() {
          return _index.topicReference;
        } }), Object.defineProperty(exports2, "TryStatement", { enumerable: true, get: function() {
          return _index.tryStatement;
        } }), Object.defineProperty(exports2, "TupleExpression", { enumerable: true, get: function() {
          return _index.tupleExpression;
        } }), Object.defineProperty(exports2, "TupleTypeAnnotation", { enumerable: true, get: function() {
          return _index.tupleTypeAnnotation;
        } }), Object.defineProperty(exports2, "TypeAlias", { enumerable: true, get: function() {
          return _index.typeAlias;
        } }), Object.defineProperty(exports2, "TypeAnnotation", { enumerable: true, get: function() {
          return _index.typeAnnotation;
        } }), Object.defineProperty(exports2, "TypeCastExpression", { enumerable: true, get: function() {
          return _index.typeCastExpression;
        } }), Object.defineProperty(exports2, "TypeParameter", { enumerable: true, get: function() {
          return _index.typeParameter;
        } }), Object.defineProperty(exports2, "TypeParameterDeclaration", { enumerable: true, get: function() {
          return _index.typeParameterDeclaration;
        } }), Object.defineProperty(exports2, "TypeParameterInstantiation", { enumerable: true, get: function() {
          return _index.typeParameterInstantiation;
        } }), Object.defineProperty(exports2, "TypeofTypeAnnotation", { enumerable: true, get: function() {
          return _index.typeofTypeAnnotation;
        } }), Object.defineProperty(exports2, "UnaryExpression", { enumerable: true, get: function() {
          return _index.unaryExpression;
        } }), Object.defineProperty(exports2, "UnionTypeAnnotation", { enumerable: true, get: function() {
          return _index.unionTypeAnnotation;
        } }), Object.defineProperty(exports2, "UpdateExpression", { enumerable: true, get: function() {
          return _index.updateExpression;
        } }), Object.defineProperty(exports2, "V8IntrinsicIdentifier", { enumerable: true, get: function() {
          return _index.v8IntrinsicIdentifier;
        } }), Object.defineProperty(exports2, "VariableDeclaration", { enumerable: true, get: function() {
          return _index.variableDeclaration;
        } }), Object.defineProperty(exports2, "VariableDeclarator", { enumerable: true, get: function() {
          return _index.variableDeclarator;
        } }), Object.defineProperty(exports2, "Variance", { enumerable: true, get: function() {
          return _index.variance;
        } }), Object.defineProperty(exports2, "VoidTypeAnnotation", { enumerable: true, get: function() {
          return _index.voidTypeAnnotation;
        } }), Object.defineProperty(exports2, "WhileStatement", { enumerable: true, get: function() {
          return _index.whileStatement;
        } }), Object.defineProperty(exports2, "WithStatement", { enumerable: true, get: function() {
          return _index.withStatement;
        } }), Object.defineProperty(exports2, "YieldExpression", { enumerable: true, get: function() {
          return _index.yieldExpression;
        } });
        var _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/react/buildChildren.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          const elements = [];
          for (let i = 0; i < node.children.length; i++) {
            let child = node.children[i];
            (0, _generated.isJSXText)(child) ? (0, _cleanJSXElementLiteralChild.default)(child, elements) : ((0, _generated.isJSXExpressionContainer)(child) && (child = child.expression), (0, _generated.isJSXEmptyExpression)(child) || elements.push(child));
          }
          return elements;
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js"), _cleanJSXElementLiteralChild = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(typeAnnotations) {
          const types2 = typeAnnotations.map((type) => (0, _index.isTSTypeAnnotation)(type) ? type.typeAnnotation : type), flattened = (0, _removeTypeDuplicates.default)(types2);
          return 1 === flattened.length ? flattened[0] : (0, _generated.tsUnionType)(flattened);
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/index.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js"), _index = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/validateNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          const keys = _.BUILDER_KEYS[node.type];
          for (const key of keys)
            (0, _validate.default)(node, key, node[key]);
          return node;
        };
        var _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/validate.js"), _ = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/clone.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _cloneNode.default)(node, false);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/cloneDeep.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _cloneNode.default)(node);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _cloneNode.default)(node, true, true);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/cloneNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, deep = true, withoutLoc = false) {
          return cloneNodeInternal(node, deep, withoutLoc, /* @__PURE__ */ new Map());
        };
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/index.js"), _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js");
        const has = Function.call.bind(Object.prototype.hasOwnProperty);
        function cloneIfNode(obj, deep, withoutLoc, commentsCache) {
          return obj && "string" == typeof obj.type ? cloneNodeInternal(obj, deep, withoutLoc, commentsCache) : obj;
        }
        function cloneIfNodeOrArray(obj, deep, withoutLoc, commentsCache) {
          return Array.isArray(obj) ? obj.map((node) => cloneIfNode(node, deep, withoutLoc, commentsCache)) : cloneIfNode(obj, deep, withoutLoc, commentsCache);
        }
        function cloneNodeInternal(node, deep = true, withoutLoc = false, commentsCache) {
          if (!node)
            return node;
          const { type } = node, newNode = { type: node.type };
          if ((0, _generated.isIdentifier)(node))
            newNode.name = node.name, has(node, "optional") && "boolean" == typeof node.optional && (newNode.optional = node.optional), has(node, "typeAnnotation") && (newNode.typeAnnotation = deep ? cloneIfNodeOrArray(node.typeAnnotation, true, withoutLoc, commentsCache) : node.typeAnnotation);
          else {
            if (!has(_definitions.NODE_FIELDS, type))
              throw new Error(`Unknown node type: "${type}"`);
            for (const field of Object.keys(_definitions.NODE_FIELDS[type]))
              has(node, field) && (newNode[field] = deep ? (0, _generated.isFile)(node) && "comments" === field ? maybeCloneComments(node.comments, deep, withoutLoc, commentsCache) : cloneIfNodeOrArray(node[field], true, withoutLoc, commentsCache) : node[field]);
          }
          return has(node, "loc") && (newNode.loc = withoutLoc ? null : node.loc), has(node, "leadingComments") && (newNode.leadingComments = maybeCloneComments(node.leadingComments, deep, withoutLoc, commentsCache)), has(node, "innerComments") && (newNode.innerComments = maybeCloneComments(node.innerComments, deep, withoutLoc, commentsCache)), has(node, "trailingComments") && (newNode.trailingComments = maybeCloneComments(node.trailingComments, deep, withoutLoc, commentsCache)), has(node, "extra") && (newNode.extra = Object.assign({}, node.extra)), newNode;
        }
        function maybeCloneComments(comments, deep, withoutLoc, commentsCache) {
          return comments && deep ? comments.map((comment) => {
            const cache = commentsCache.get(comment);
            if (cache)
              return cache;
            const { type, value, loc } = comment, ret = { type, value, loc };
            return withoutLoc && (ret.loc = null), commentsCache.set(comment, ret), ret;
          }) : comments;
        }
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _cloneNode.default)(node, false, true);
        };
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/addComment.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, type, content, line) {
          return (0, _addComments.default)(node, type, [{ type: line ? "CommentLine" : "CommentBlock", value: content }]);
        };
        var _addComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/addComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/addComments.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, type, comments) {
          if (!comments || !node)
            return node;
          const key = `${type}Comments`;
          node[key] ? "leading" === type ? node[key] = comments.concat(node[key]) : node[key].push(...comments) : node[key] = comments;
          return node;
        };
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/inheritInnerComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          (0, _inherit.default)("innerComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/inheritLeadingComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          (0, _inherit.default)("leadingComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/inheritTrailingComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          (0, _inherit.default)("trailingComments", child, parent);
        };
        var _inherit = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/utils/inherit.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/inheritsComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          return (0, _inheritTrailingComments.default)(child, parent), (0, _inheritLeadingComments.default)(child, parent), (0, _inheritInnerComments.default)(child, parent), child;
        };
        var _inheritTrailingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"), _inheritLeadingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"), _inheritInnerComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/inheritInnerComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/removeComments.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return _constants.COMMENT_KEYS.forEach((key) => {
            node[key] = null;
          }), node;
        };
        var _constants = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/constants/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.WHILE_TYPES = exports2.USERWHITESPACABLE_TYPES = exports2.UNARYLIKE_TYPES = exports2.TYPESCRIPT_TYPES = exports2.TSTYPE_TYPES = exports2.TSTYPEELEMENT_TYPES = exports2.TSENTITYNAME_TYPES = exports2.TSBASETYPE_TYPES = exports2.TERMINATORLESS_TYPES = exports2.STATEMENT_TYPES = exports2.STANDARDIZED_TYPES = exports2.SCOPABLE_TYPES = exports2.PUREISH_TYPES = exports2.PROPERTY_TYPES = exports2.PRIVATE_TYPES = exports2.PATTERN_TYPES = exports2.PATTERNLIKE_TYPES = exports2.OBJECTMEMBER_TYPES = exports2.MODULESPECIFIER_TYPES = exports2.MODULEDECLARATION_TYPES = exports2.MISCELLANEOUS_TYPES = exports2.METHOD_TYPES = exports2.LVAL_TYPES = exports2.LOOP_TYPES = exports2.LITERAL_TYPES = exports2.JSX_TYPES = exports2.IMMUTABLE_TYPES = exports2.FUNCTION_TYPES = exports2.FUNCTIONPARENT_TYPES = exports2.FOR_TYPES = exports2.FORXSTATEMENT_TYPES = exports2.FLOW_TYPES = exports2.FLOWTYPE_TYPES = exports2.FLOWPREDICATE_TYPES = exports2.FLOWDECLARATION_TYPES = exports2.FLOWBASEANNOTATION_TYPES = exports2.EXPRESSION_TYPES = exports2.EXPRESSIONWRAPPER_TYPES = exports2.EXPORTDECLARATION_TYPES = exports2.ENUMMEMBER_TYPES = exports2.ENUMBODY_TYPES = exports2.DECLARATION_TYPES = exports2.CONDITIONAL_TYPES = exports2.COMPLETIONSTATEMENT_TYPES = exports2.CLASS_TYPES = exports2.BLOCK_TYPES = exports2.BLOCKPARENT_TYPES = exports2.BINARY_TYPES = exports2.ACCESSOR_TYPES = void 0;
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/index.js");
        const STANDARDIZED_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Standardized;
        exports2.STANDARDIZED_TYPES = STANDARDIZED_TYPES;
        const EXPRESSION_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Expression;
        exports2.EXPRESSION_TYPES = EXPRESSION_TYPES;
        const BINARY_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Binary;
        exports2.BINARY_TYPES = BINARY_TYPES;
        const SCOPABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Scopable;
        exports2.SCOPABLE_TYPES = SCOPABLE_TYPES;
        const BLOCKPARENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS.BlockParent;
        exports2.BLOCKPARENT_TYPES = BLOCKPARENT_TYPES;
        const BLOCK_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Block;
        exports2.BLOCK_TYPES = BLOCK_TYPES;
        const STATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Statement;
        exports2.STATEMENT_TYPES = STATEMENT_TYPES;
        const TERMINATORLESS_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Terminatorless;
        exports2.TERMINATORLESS_TYPES = TERMINATORLESS_TYPES;
        const COMPLETIONSTATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS.CompletionStatement;
        exports2.COMPLETIONSTATEMENT_TYPES = COMPLETIONSTATEMENT_TYPES;
        const CONDITIONAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Conditional;
        exports2.CONDITIONAL_TYPES = CONDITIONAL_TYPES;
        const LOOP_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Loop;
        exports2.LOOP_TYPES = LOOP_TYPES;
        const WHILE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.While;
        exports2.WHILE_TYPES = WHILE_TYPES;
        const EXPRESSIONWRAPPER_TYPES = _definitions.FLIPPED_ALIAS_KEYS.ExpressionWrapper;
        exports2.EXPRESSIONWRAPPER_TYPES = EXPRESSIONWRAPPER_TYPES;
        const FOR_TYPES = _definitions.FLIPPED_ALIAS_KEYS.For;
        exports2.FOR_TYPES = FOR_TYPES;
        const FORXSTATEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS.ForXStatement;
        exports2.FORXSTATEMENT_TYPES = FORXSTATEMENT_TYPES;
        const FUNCTION_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Function;
        exports2.FUNCTION_TYPES = FUNCTION_TYPES;
        const FUNCTIONPARENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS.FunctionParent;
        exports2.FUNCTIONPARENT_TYPES = FUNCTIONPARENT_TYPES;
        const PUREISH_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Pureish;
        exports2.PUREISH_TYPES = PUREISH_TYPES;
        const DECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Declaration;
        exports2.DECLARATION_TYPES = DECLARATION_TYPES;
        const PATTERNLIKE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.PatternLike;
        exports2.PATTERNLIKE_TYPES = PATTERNLIKE_TYPES;
        const LVAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS.LVal;
        exports2.LVAL_TYPES = LVAL_TYPES;
        const TSENTITYNAME_TYPES = _definitions.FLIPPED_ALIAS_KEYS.TSEntityName;
        exports2.TSENTITYNAME_TYPES = TSENTITYNAME_TYPES;
        const LITERAL_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Literal;
        exports2.LITERAL_TYPES = LITERAL_TYPES;
        const IMMUTABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Immutable;
        exports2.IMMUTABLE_TYPES = IMMUTABLE_TYPES;
        const USERWHITESPACABLE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.UserWhitespacable;
        exports2.USERWHITESPACABLE_TYPES = USERWHITESPACABLE_TYPES;
        const METHOD_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Method;
        exports2.METHOD_TYPES = METHOD_TYPES;
        const OBJECTMEMBER_TYPES = _definitions.FLIPPED_ALIAS_KEYS.ObjectMember;
        exports2.OBJECTMEMBER_TYPES = OBJECTMEMBER_TYPES;
        const PROPERTY_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Property;
        exports2.PROPERTY_TYPES = PROPERTY_TYPES;
        const UNARYLIKE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.UnaryLike;
        exports2.UNARYLIKE_TYPES = UNARYLIKE_TYPES;
        const PATTERN_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Pattern;
        exports2.PATTERN_TYPES = PATTERN_TYPES;
        const CLASS_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Class;
        exports2.CLASS_TYPES = CLASS_TYPES;
        const MODULEDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS.ModuleDeclaration;
        exports2.MODULEDECLARATION_TYPES = MODULEDECLARATION_TYPES;
        const EXPORTDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS.ExportDeclaration;
        exports2.EXPORTDECLARATION_TYPES = EXPORTDECLARATION_TYPES;
        const MODULESPECIFIER_TYPES = _definitions.FLIPPED_ALIAS_KEYS.ModuleSpecifier;
        exports2.MODULESPECIFIER_TYPES = MODULESPECIFIER_TYPES;
        const ACCESSOR_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Accessor;
        exports2.ACCESSOR_TYPES = ACCESSOR_TYPES;
        const PRIVATE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Private;
        exports2.PRIVATE_TYPES = PRIVATE_TYPES;
        const FLOW_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Flow;
        exports2.FLOW_TYPES = FLOW_TYPES;
        const FLOWTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.FlowType;
        exports2.FLOWTYPE_TYPES = FLOWTYPE_TYPES;
        const FLOWBASEANNOTATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS.FlowBaseAnnotation;
        exports2.FLOWBASEANNOTATION_TYPES = FLOWBASEANNOTATION_TYPES;
        const FLOWDECLARATION_TYPES = _definitions.FLIPPED_ALIAS_KEYS.FlowDeclaration;
        exports2.FLOWDECLARATION_TYPES = FLOWDECLARATION_TYPES;
        const FLOWPREDICATE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.FlowPredicate;
        exports2.FLOWPREDICATE_TYPES = FLOWPREDICATE_TYPES;
        const ENUMBODY_TYPES = _definitions.FLIPPED_ALIAS_KEYS.EnumBody;
        exports2.ENUMBODY_TYPES = ENUMBODY_TYPES;
        const ENUMMEMBER_TYPES = _definitions.FLIPPED_ALIAS_KEYS.EnumMember;
        exports2.ENUMMEMBER_TYPES = ENUMMEMBER_TYPES;
        const JSX_TYPES = _definitions.FLIPPED_ALIAS_KEYS.JSX;
        exports2.JSX_TYPES = JSX_TYPES;
        const MISCELLANEOUS_TYPES = _definitions.FLIPPED_ALIAS_KEYS.Miscellaneous;
        exports2.MISCELLANEOUS_TYPES = MISCELLANEOUS_TYPES;
        const TYPESCRIPT_TYPES = _definitions.FLIPPED_ALIAS_KEYS.TypeScript;
        exports2.TYPESCRIPT_TYPES = TYPESCRIPT_TYPES;
        const TSTYPEELEMENT_TYPES = _definitions.FLIPPED_ALIAS_KEYS.TSTypeElement;
        exports2.TSTYPEELEMENT_TYPES = TSTYPEELEMENT_TYPES;
        const TSTYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.TSType;
        exports2.TSTYPE_TYPES = TSTYPE_TYPES;
        const TSBASETYPE_TYPES = _definitions.FLIPPED_ALIAS_KEYS.TSBaseType;
        exports2.TSBASETYPE_TYPES = TSBASETYPE_TYPES;
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/constants/index.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.UPDATE_OPERATORS = exports2.UNARY_OPERATORS = exports2.STRING_UNARY_OPERATORS = exports2.STATEMENT_OR_BLOCK_KEYS = exports2.NUMBER_UNARY_OPERATORS = exports2.NUMBER_BINARY_OPERATORS = exports2.NOT_LOCAL_BINDING = exports2.LOGICAL_OPERATORS = exports2.INHERIT_KEYS = exports2.FOR_INIT_KEYS = exports2.FLATTENABLE_KEYS = exports2.EQUALITY_BINARY_OPERATORS = exports2.COMPARISON_BINARY_OPERATORS = exports2.COMMENT_KEYS = exports2.BOOLEAN_UNARY_OPERATORS = exports2.BOOLEAN_NUMBER_BINARY_OPERATORS = exports2.BOOLEAN_BINARY_OPERATORS = exports2.BLOCK_SCOPED_SYMBOL = exports2.BINARY_OPERATORS = exports2.ASSIGNMENT_OPERATORS = void 0;
        exports2.STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
        exports2.FLATTENABLE_KEYS = ["body", "expressions"];
        exports2.FOR_INIT_KEYS = ["left", "init"];
        exports2.COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];
        const LOGICAL_OPERATORS = ["||", "&&", "??"];
        exports2.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
        exports2.UPDATE_OPERATORS = ["++", "--"];
        const BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
        exports2.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
        const EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
        exports2.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
        const COMPARISON_BINARY_OPERATORS = [...EQUALITY_BINARY_OPERATORS, "in", "instanceof"];
        exports2.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
        const BOOLEAN_BINARY_OPERATORS = [...COMPARISON_BINARY_OPERATORS, ...BOOLEAN_NUMBER_BINARY_OPERATORS];
        exports2.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
        const NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
        exports2.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
        const BINARY_OPERATORS = ["+", ...NUMBER_BINARY_OPERATORS, ...BOOLEAN_BINARY_OPERATORS, "|>"];
        exports2.BINARY_OPERATORS = BINARY_OPERATORS;
        const ASSIGNMENT_OPERATORS = ["=", "+=", ...NUMBER_BINARY_OPERATORS.map((op) => op + "="), ...LOGICAL_OPERATORS.map((op) => op + "=")];
        exports2.ASSIGNMENT_OPERATORS = ASSIGNMENT_OPERATORS;
        const BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
        exports2.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
        const NUMBER_UNARY_OPERATORS = ["+", "-", "~"];
        exports2.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
        const STRING_UNARY_OPERATORS = ["typeof"];
        exports2.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
        const UNARY_OPERATORS = ["void", "throw", ...BOOLEAN_UNARY_OPERATORS, ...NUMBER_UNARY_OPERATORS, ...STRING_UNARY_OPERATORS];
        exports2.UNARY_OPERATORS = UNARY_OPERATORS;
        exports2.INHERIT_KEYS = { optional: ["typeAnnotation", "typeParameters", "returnType"], force: ["start", "loc", "end"] };
        const BLOCK_SCOPED_SYMBOL = Symbol.for("var used to be block scoped");
        exports2.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;
        const NOT_LOCAL_BINDING = Symbol.for("should not be considered a local binding");
        exports2.NOT_LOCAL_BINDING = NOT_LOCAL_BINDING;
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/ensureBlock.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, key = "body") {
          const result = (0, _toBlock.default)(node[key], node);
          return node[key] = result, result;
        };
        var _toBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toBlock.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function gatherSequenceExpressions(nodes, scope, declars) {
          const exprs = [];
          let ensureLastUndefined = true;
          for (const node of nodes)
            if ((0, _generated.isEmptyStatement)(node) || (ensureLastUndefined = false), (0, _generated.isExpression)(node))
              exprs.push(node);
            else if ((0, _generated.isExpressionStatement)(node))
              exprs.push(node.expression);
            else if ((0, _generated.isVariableDeclaration)(node)) {
              if ("var" !== node.kind)
                return;
              for (const declar of node.declarations) {
                const bindings = (0, _getBindingIdentifiers.default)(declar);
                for (const key of Object.keys(bindings))
                  declars.push({ kind: node.kind, id: (0, _cloneNode.default)(bindings[key]) });
                declar.init && exprs.push((0, _generated2.assignmentExpression)("=", declar.id, declar.init));
              }
              ensureLastUndefined = true;
            } else if ((0, _generated.isIfStatement)(node)) {
              const consequent = node.consequent ? gatherSequenceExpressions([node.consequent], scope, declars) : scope.buildUndefinedNode(), alternate = node.alternate ? gatherSequenceExpressions([node.alternate], scope, declars) : scope.buildUndefinedNode();
              if (!consequent || !alternate)
                return;
              exprs.push((0, _generated2.conditionalExpression)(node.test, consequent, alternate));
            } else if ((0, _generated.isBlockStatement)(node)) {
              const body = gatherSequenceExpressions(node.body, scope, declars);
              if (!body)
                return;
              exprs.push(body);
            } else {
              if (!(0, _generated.isEmptyStatement)(node))
                return;
              0 === nodes.indexOf(node) && (ensureLastUndefined = true);
            }
          ensureLastUndefined && exprs.push(scope.buildUndefinedNode());
          return 1 === exprs.length ? exprs[0] : (0, _generated2.sequenceExpression)(exprs);
        };
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js"), _generated2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/index.js"), _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/cloneNode.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(name) {
          "eval" !== (name = (0, _toIdentifier.default)(name)) && "arguments" !== name || (name = "_" + name);
          return name;
        };
        var _toIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toIdentifier.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toBlock.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent) {
          if ((0, _generated.isBlockStatement)(node))
            return node;
          let blockNodes = [];
          (0, _generated.isEmptyStatement)(node) ? blockNodes = [] : ((0, _generated.isStatement)(node) || (node = (0, _generated.isFunction)(parent) ? (0, _generated2.returnStatement)(node) : (0, _generated2.expressionStatement)(node)), blockNodes = [node]);
          return (0, _generated2.blockStatement)(blockNodes);
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js"), _generated2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toComputedKey.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, key = node.key || node.property) {
          !node.computed && (0, _generated.isIdentifier)(key) && (key = (0, _generated2.stringLiteral)(key.name));
          return key;
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js"), _generated2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js"), _default = function(node) {
          (0, _generated.isExpressionStatement)(node) && (node = node.expression);
          if ((0, _generated.isExpression)(node))
            return node;
          (0, _generated.isClass)(node) ? node.type = "ClassExpression" : (0, _generated.isFunction)(node) && (node.type = "FunctionExpression");
          if (!(0, _generated.isExpression)(node))
            throw new Error(`cannot turn ${node.type} to an expression`);
          return node;
        };
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toIdentifier.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(input) {
          input += "";
          let name = "";
          for (const c of input)
            name += (0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0)) ? c : "-";
          name = name.replace(/^[-0-9]+/, ""), name = name.replace(/[-\s]+(.)?/g, function(match, c) {
            return c ? c.toUpperCase() : "";
          }), (0, _isValidIdentifier.default)(name) || (name = `_${name}`);
          return name || "_";
        };
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.18.6/node_modules/@babel/helper-validator-identifier/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toKeyAlias.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = toKeyAlias;
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js"), _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/cloneNode.js"), _removePropertiesDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js");
        function toKeyAlias(node, key = node.key) {
          let alias;
          return "method" === node.kind ? toKeyAlias.increment() + "" : (alias = (0, _generated.isIdentifier)(key) ? key.name : (0, _generated.isStringLiteral)(key) ? JSON.stringify(key.value) : JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key))), node.computed && (alias = `[${alias}]`), node.static && (alias = `static:${alias}`), alias);
        }
        toKeyAlias.uid = 0, toKeyAlias.increment = function() {
          return toKeyAlias.uid >= Number.MAX_SAFE_INTEGER ? toKeyAlias.uid = 0 : toKeyAlias.uid++;
        };
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toSequenceExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(nodes, scope) {
          if (null == nodes || !nodes.length)
            return;
          const declars = [], result = (0, _gatherSequenceExpressions.default)(nodes, scope, declars);
          if (!result)
            return;
          for (const declar of declars)
            scope.push(declar);
          return result;
        };
        var _gatherSequenceExpressions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/gatherSequenceExpressions.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toStatement.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js"), _generated2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/index.js"), _default = function(node, ignore2) {
          if ((0, _generated.isStatement)(node))
            return node;
          let newType, mustHaveId = false;
          if ((0, _generated.isClass)(node))
            mustHaveId = true, newType = "ClassDeclaration";
          else if ((0, _generated.isFunction)(node))
            mustHaveId = true, newType = "FunctionDeclaration";
          else if ((0, _generated.isAssignmentExpression)(node))
            return (0, _generated2.expressionStatement)(node);
          mustHaveId && !node.id && (newType = false);
          if (!newType) {
            if (ignore2)
              return false;
            throw new Error(`cannot turn ${node.type} to a statement`);
          }
          return node.type = newType, node;
        };
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/valueToNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/index.js"), _default = function valueToNode(value) {
          if (void 0 === value)
            return (0, _generated.identifier)("undefined");
          if (true === value || false === value)
            return (0, _generated.booleanLiteral)(value);
          if (null === value)
            return (0, _generated.nullLiteral)();
          if ("string" == typeof value)
            return (0, _generated.stringLiteral)(value);
          if ("number" == typeof value) {
            let result;
            if (Number.isFinite(value))
              result = (0, _generated.numericLiteral)(Math.abs(value));
            else {
              let numerator;
              numerator = Number.isNaN(value) ? (0, _generated.numericLiteral)(0) : (0, _generated.numericLiteral)(1), result = (0, _generated.binaryExpression)("/", numerator, (0, _generated.numericLiteral)(0));
            }
            return (value < 0 || Object.is(value, -0)) && (result = (0, _generated.unaryExpression)("-", result)), result;
          }
          if (function(value2) {
            return "[object RegExp]" === objectToString(value2);
          }(value)) {
            const pattern = value.source, flags = value.toString().match(/\/([a-z]+|)$/)[1];
            return (0, _generated.regExpLiteral)(pattern, flags);
          }
          if (Array.isArray(value))
            return (0, _generated.arrayExpression)(value.map(valueToNode));
          if (function(value2) {
            if ("object" != typeof value2 || null === value2 || "[object Object]" !== Object.prototype.toString.call(value2))
              return false;
            const proto = Object.getPrototypeOf(value2);
            return null === proto || null === Object.getPrototypeOf(proto);
          }(value)) {
            const props = [];
            for (const key of Object.keys(value)) {
              let nodeKey;
              nodeKey = (0, _isValidIdentifier.default)(key) ? (0, _generated.identifier)(key) : (0, _generated.stringLiteral)(key), props.push((0, _generated.objectProperty)(nodeKey, valueToNode(value[key])));
            }
            return (0, _generated.objectExpression)(props);
          }
          throw new Error("don't know how to turn this value into a node");
        };
        exports2.default = _default;
        const objectToString = Function.call.bind(Object.prototype.toString);
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/core.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.patternLikeCommon = exports2.functionTypeAnnotationCommon = exports2.functionDeclarationCommon = exports2.functionCommon = exports2.classMethodOrPropertyCommon = exports2.classMethodOrDeclareMethodCommon = void 0;
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/is.js"), _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.18.6/node_modules/@babel/helper-validator-identifier/lib/index.js"), _helperStringParser = __webpack_require__2("./node_modules/.pnpm/@babel+helper-string-parser@7.18.10/node_modules/@babel/helper-string-parser/lib/index.js"), _constants = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/constants/index.js"), _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("Standardized");
        defineType("ArrayExpression", { fields: { elements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "Expression", "SpreadElement"))), default: process.env.BABEL_TYPES_8_BREAKING ? void 0 : [] } }, visitor: ["elements"], aliases: ["Expression"] }), defineType("AssignmentExpression", { fields: { operator: { validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return (0, _utils.assertValueType)("string");
          const identifier = (0, _utils.assertOneOf)(..._constants.ASSIGNMENT_OPERATORS), pattern = (0, _utils.assertOneOf)("=");
          return function(node, key, val) {
            ((0, _is.default)("Pattern", node.left) ? pattern : identifier)(node, key, val);
          };
        }() }, left: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("LVal") }, right: { validate: (0, _utils.assertNodeType)("Expression") } }, builder: ["operator", "left", "right"], visitor: ["left", "right"], aliases: ["Expression"] }), defineType("BinaryExpression", { builder: ["operator", "left", "right"], fields: { operator: { validate: (0, _utils.assertOneOf)(..._constants.BINARY_OPERATORS) }, left: { validate: function() {
          const expression = (0, _utils.assertNodeType)("Expression"), inOp = (0, _utils.assertNodeType)("Expression", "PrivateName");
          return Object.assign(function(node, key, val) {
            ("in" === node.operator ? inOp : expression)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "PrivateName"] });
        }() }, right: { validate: (0, _utils.assertNodeType)("Expression") } }, visitor: ["left", "right"], aliases: ["Binary", "Expression"] }), defineType("InterpreterDirective", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("Directive", { visitor: ["value"], fields: { value: { validate: (0, _utils.assertNodeType)("DirectiveLiteral") } } }), defineType("DirectiveLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("BlockStatement", { builder: ["body", "directives"], visitor: ["directives", "body"], fields: { directives: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))), default: [] }, body: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))) } }, aliases: ["Scopable", "BlockParent", "Block", "Statement"] }), defineType("BreakStatement", { visitor: ["label"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } }, aliases: ["Statement", "Terminatorless", "CompletionStatement"] }), defineType("CallExpression", { visitor: ["callee", "arguments", "typeParameters", "typeArguments"], builder: ["callee", "arguments"], aliases: ["Expression"], fields: Object.assign({ callee: { validate: (0, _utils.assertNodeType)("Expression", "Super", "V8IntrinsicIdentifier") }, arguments: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder"))) } }, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: { validate: (0, _utils.assertOneOf)(true, false), optional: true } }, { typeArguments: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"), optional: true } }) }), defineType("CatchClause", { visitor: ["param", "body"], fields: { param: { validate: (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }, aliases: ["Scopable", "BlockParent"] }), defineType("ConditionalExpression", { visitor: ["test", "consequent", "alternate"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, consequent: { validate: (0, _utils.assertNodeType)("Expression") }, alternate: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression", "Conditional"] }), defineType("ContinueStatement", { visitor: ["label"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } }, aliases: ["Statement", "Terminatorless", "CompletionStatement"] }), defineType("DebuggerStatement", { aliases: ["Statement"] }), defineType("DoWhileStatement", { visitor: ["test", "body"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } }, aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"] }), defineType("EmptyStatement", { aliases: ["Statement"] }), defineType("ExpressionStatement", { visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Statement", "ExpressionWrapper"] }), defineType("File", { builder: ["program", "comments", "tokens"], visitor: ["program"], fields: { program: { validate: (0, _utils.assertNodeType)("Program") }, comments: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertEach)((0, _utils.assertNodeType)("CommentBlock", "CommentLine")) : Object.assign(() => {
        }, { each: { oneOfNodeTypes: ["CommentBlock", "CommentLine"] } }), optional: true }, tokens: { validate: (0, _utils.assertEach)(Object.assign(() => {
        }, { type: "any" })), optional: true } } }), defineType("ForInStatement", { visitor: ["left", "right", "body"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"], fields: { left: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("VariableDeclaration", "Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("VariableDeclaration", "LVal") }, right: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("ForStatement", { visitor: ["init", "test", "update", "body"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"], fields: { init: { validate: (0, _utils.assertNodeType)("VariableDeclaration", "Expression"), optional: true }, test: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, update: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, body: { validate: (0, _utils.assertNodeType)("Statement") } } });
        const functionCommon = () => ({ params: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier", "Pattern", "RestElement"))) }, generator: { default: false }, async: { default: false } });
        exports2.functionCommon = functionCommon;
        const functionTypeAnnotationCommon = () => ({ returnType: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true } });
        exports2.functionTypeAnnotationCommon = functionTypeAnnotationCommon;
        const functionDeclarationCommon = () => Object.assign({}, functionCommon(), { declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true } });
        exports2.functionDeclarationCommon = functionDeclarationCommon, defineType("FunctionDeclaration", { builder: ["id", "params", "body", "generator", "async"], visitor: ["id", "params", "body", "returnType", "typeParameters"], fields: Object.assign({}, functionDeclarationCommon(), functionTypeAnnotationCommon(), { body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }), aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"], validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return () => {
            };
          const identifier = (0, _utils.assertNodeType)("Identifier");
          return function(parent, key, node) {
            (0, _is.default)("ExportDefaultDeclaration", parent) || identifier(node, "id", node.id);
          };
        }() }), defineType("FunctionExpression", { inherits: "FunctionDeclaration", aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }) });
        const patternLikeCommon = () => ({ typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } });
        exports2.patternLikeCommon = patternLikeCommon, defineType("Identifier", { builder: ["name"], visitor: ["typeAnnotation", "decorators"], aliases: ["Expression", "PatternLike", "LVal", "TSEntityName"], fields: Object.assign({}, patternLikeCommon(), { name: { validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && !(0, _isValidIdentifier.default)(val, false))
            throw new TypeError(`"${val}" is not a valid identifier name`);
        }, { type: "string" })) }, optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }), validate(parent, key, node) {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return;
          const match = /\.(\w+)$/.exec(key);
          if (!match)
            return;
          const [, parentKey] = match, nonComp = { computed: false };
          if ("property" === parentKey) {
            if ((0, _is.default)("MemberExpression", parent, nonComp))
              return;
            if ((0, _is.default)("OptionalMemberExpression", parent, nonComp))
              return;
          } else if ("key" === parentKey) {
            if ((0, _is.default)("Property", parent, nonComp))
              return;
            if ((0, _is.default)("Method", parent, nonComp))
              return;
          } else if ("exported" === parentKey) {
            if ((0, _is.default)("ExportSpecifier", parent))
              return;
          } else if ("imported" === parentKey) {
            if ((0, _is.default)("ImportSpecifier", parent, { imported: node }))
              return;
          } else if ("meta" === parentKey && (0, _is.default)("MetaProperty", parent, { meta: node }))
            return;
          if (((0, _helperValidatorIdentifier.isKeyword)(node.name) || (0, _helperValidatorIdentifier.isReservedWord)(node.name, false)) && "this" !== node.name)
            throw new TypeError(`"${node.name}" is not a valid identifier`);
        } }), defineType("IfStatement", { visitor: ["test", "consequent", "alternate"], aliases: ["Statement", "Conditional"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, consequent: { validate: (0, _utils.assertNodeType)("Statement") }, alternate: { optional: true, validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("LabeledStatement", { visitor: ["label", "body"], aliases: ["Statement"], fields: { label: { validate: (0, _utils.assertNodeType)("Identifier") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("StringLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("NumericLiteral", { builder: ["value"], deprecatedAlias: "NumberLiteral", fields: { value: { validate: (0, _utils.assertValueType)("number") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("NullLiteral", { aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("BooleanLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("boolean") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("RegExpLiteral", { builder: ["pattern", "flags"], deprecatedAlias: "RegexLiteral", aliases: ["Expression", "Pureish", "Literal"], fields: { pattern: { validate: (0, _utils.assertValueType)("string") }, flags: { validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), Object.assign(function(node, key, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return;
          const invalid = /[^gimsuy]/.exec(val);
          if (invalid)
            throw new TypeError(`"${invalid[0]}" is not a valid RegExp flag`);
        }, { type: "string" })), default: "" } } }), defineType("LogicalExpression", { builder: ["operator", "left", "right"], visitor: ["left", "right"], aliases: ["Binary", "Expression"], fields: { operator: { validate: (0, _utils.assertOneOf)(..._constants.LOGICAL_OPERATORS) }, left: { validate: (0, _utils.assertNodeType)("Expression") }, right: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("MemberExpression", { builder: ["object", "property", "computed", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["optional"]], visitor: ["object", "property"], aliases: ["Expression", "LVal"], fields: Object.assign({ object: { validate: (0, _utils.assertNodeType)("Expression", "Super") }, property: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression"), validator = function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
          return validator.oneOfNodeTypes = ["Expression", "Identifier", "PrivateName"], validator;
        }() }, computed: { default: false } }, process.env.BABEL_TYPES_8_BREAKING ? {} : { optional: { validate: (0, _utils.assertOneOf)(true, false), optional: true } }) }), defineType("NewExpression", { inherits: "CallExpression" }), defineType("Program", { visitor: ["directives", "body"], builder: ["body", "directives", "sourceType", "interpreter"], fields: { sourceFile: { validate: (0, _utils.assertValueType)("string") }, sourceType: { validate: (0, _utils.assertOneOf)("script", "module"), default: "script" }, interpreter: { validate: (0, _utils.assertNodeType)("InterpreterDirective"), default: null, optional: true }, directives: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Directive"))), default: [] }, body: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))) } }, aliases: ["Scopable", "BlockParent", "Block"] }), defineType("ObjectExpression", { visitor: ["properties"], aliases: ["Expression"], fields: { properties: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectMethod", "ObjectProperty", "SpreadElement"))) } } }), defineType("ObjectMethod", { builder: ["kind", "key", "params", "body", "computed", "generator", "async"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { kind: Object.assign({ validate: (0, _utils.assertOneOf)("method", "get", "set") }, process.env.BABEL_TYPES_8_BREAKING ? {} : { default: "method" }), computed: { default: false }, key: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"), computed = (0, _utils.assertNodeType)("Expression"), validator = function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
          return validator.oneOfNodeTypes = ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral"], validator;
        }() }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }), visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"], aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"] }), defineType("ObjectProperty", { builder: ["key", "value", "computed", "shorthand", ...process.env.BABEL_TYPES_8_BREAKING ? [] : ["decorators"]], fields: { computed: { default: false }, key: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression");
          return Object.assign(function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "DecimalLiteral", "PrivateName"] });
        }() }, value: { validate: (0, _utils.assertNodeType)("Expression", "PatternLike") }, shorthand: { validate: (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && node.computed)
            throw new TypeError("Property shorthand of ObjectProperty cannot be true if computed is true");
        }, { type: "boolean" }), function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && !(0, _is.default)("Identifier", node.key))
            throw new TypeError("Property shorthand of ObjectProperty cannot be true if key is not an Identifier");
        }), default: false }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } }, visitor: ["key", "value", "decorators"], aliases: ["UserWhitespacable", "Property", "ObjectMember"], validate: function() {
          const pattern = (0, _utils.assertNodeType)("Identifier", "Pattern", "TSAsExpression", "TSNonNullExpression", "TSTypeAssertion"), expression = (0, _utils.assertNodeType)("Expression");
          return function(parent, key, node) {
            if (!process.env.BABEL_TYPES_8_BREAKING)
              return;
            ((0, _is.default)("ObjectPattern", parent) ? pattern : expression)(node, "value", node.value);
          };
        }() }), defineType("RestElement", { visitor: ["argument", "typeAnnotation"], builder: ["argument"], aliases: ["LVal", "PatternLike"], deprecatedAlias: "RestProperty", fields: Object.assign({}, patternLikeCommon(), { argument: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern", "MemberExpression", "TSAsExpression", "TSTypeAssertion", "TSNonNullExpression") : (0, _utils.assertNodeType)("LVal") }, optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }), validate(parent, key) {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return;
          const match = /(\w+)\[(\d+)\]/.exec(key);
          if (!match)
            throw new Error("Internal Babel error: malformed key.");
          const [, listKey, index2] = match;
          if (parent[listKey].length > +index2 + 1)
            throw new TypeError(`RestElement must be last element of ${listKey}`);
        } }), defineType("ReturnStatement", { visitor: ["argument"], aliases: ["Statement", "Terminatorless", "CompletionStatement"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression"), optional: true } } }), defineType("SequenceExpression", { visitor: ["expressions"], fields: { expressions: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression"))) } }, aliases: ["Expression"] }), defineType("ParenthesizedExpression", { visitor: ["expression"], aliases: ["Expression", "ExpressionWrapper"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("SwitchCase", { visitor: ["test", "consequent"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, consequent: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))) } } }), defineType("SwitchStatement", { visitor: ["discriminant", "cases"], aliases: ["Statement", "BlockParent", "Scopable"], fields: { discriminant: { validate: (0, _utils.assertNodeType)("Expression") }, cases: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("SwitchCase"))) } } }), defineType("ThisExpression", { aliases: ["Expression"] }), defineType("ThrowStatement", { visitor: ["argument"], aliases: ["Statement", "Terminatorless", "CompletionStatement"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("TryStatement", { visitor: ["block", "handler", "finalizer"], aliases: ["Statement"], fields: { block: { validate: (0, _utils.chain)((0, _utils.assertNodeType)("BlockStatement"), Object.assign(function(node) {
          if (process.env.BABEL_TYPES_8_BREAKING && !node.handler && !node.finalizer)
            throw new TypeError("TryStatement expects either a handler or finalizer, or both");
        }, { oneOfNodeTypes: ["BlockStatement"] })) }, handler: { optional: true, validate: (0, _utils.assertNodeType)("CatchClause") }, finalizer: { optional: true, validate: (0, _utils.assertNodeType)("BlockStatement") } } }), defineType("UnaryExpression", { builder: ["operator", "argument", "prefix"], fields: { prefix: { default: true }, argument: { validate: (0, _utils.assertNodeType)("Expression") }, operator: { validate: (0, _utils.assertOneOf)(..._constants.UNARY_OPERATORS) } }, visitor: ["argument"], aliases: ["UnaryLike", "Expression"] }), defineType("UpdateExpression", { builder: ["operator", "argument", "prefix"], fields: { prefix: { default: false }, argument: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.assertNodeType)("Identifier", "MemberExpression") : (0, _utils.assertNodeType)("Expression") }, operator: { validate: (0, _utils.assertOneOf)(..._constants.UPDATE_OPERATORS) } }, visitor: ["argument"], aliases: ["Expression"] }), defineType("VariableDeclaration", { builder: ["kind", "declarations"], visitor: ["declarations"], aliases: ["Statement", "Declaration"], fields: { declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, kind: { validate: (0, _utils.assertOneOf)("var", "let", "const") }, declarations: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("VariableDeclarator"))) } }, validate(parent, key, node) {
          if (process.env.BABEL_TYPES_8_BREAKING && (0, _is.default)("ForXStatement", parent, { left: node }) && 1 !== node.declarations.length)
            throw new TypeError(`Exactly one VariableDeclarator is required in the VariableDeclaration of a ${parent.type}`);
        } }), defineType("VariableDeclarator", { visitor: ["id", "init"], fields: { id: { validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return (0, _utils.assertNodeType)("LVal");
          const normal = (0, _utils.assertNodeType)("Identifier", "ArrayPattern", "ObjectPattern"), without = (0, _utils.assertNodeType)("Identifier");
          return function(node, key, val) {
            (node.init ? normal : without)(node, key, val);
          };
        }() }, definite: { optional: true, validate: (0, _utils.assertValueType)("boolean") }, init: { optional: true, validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("WhileStatement", { visitor: ["test", "body"], aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"], fields: { test: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("WithStatement", { visitor: ["object", "body"], aliases: ["Statement"], fields: { object: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") } } }), defineType("AssignmentPattern", { visitor: ["left", "right", "decorators"], builder: ["left", "right"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { left: { validate: (0, _utils.assertNodeType)("Identifier", "ObjectPattern", "ArrayPattern", "MemberExpression", "TSAsExpression", "TSTypeAssertion", "TSNonNullExpression") }, right: { validate: (0, _utils.assertNodeType)("Expression") }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } }) }), defineType("ArrayPattern", { visitor: ["elements", "typeAnnotation"], builder: ["elements"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { elements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeOrValueType)("null", "PatternLike", "LVal"))) }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }) }), defineType("ArrowFunctionExpression", { builder: ["params", "body", "async"], visitor: ["params", "body", "returnType", "typeParameters"], aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"], fields: Object.assign({}, functionCommon(), functionTypeAnnotationCommon(), { expression: { validate: (0, _utils.assertValueType)("boolean") }, body: { validate: (0, _utils.assertNodeType)("BlockStatement", "Expression") }, predicate: { validate: (0, _utils.assertNodeType)("DeclaredPredicate", "InferredPredicate"), optional: true } }) }), defineType("ClassBody", { visitor: ["body"], fields: { body: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ClassMethod", "ClassPrivateMethod", "ClassProperty", "ClassPrivateProperty", "ClassAccessorProperty", "TSDeclareMethod", "TSIndexSignature", "StaticBlock"))) } } }), defineType("ClassExpression", { builder: ["id", "superClass", "body", "decorators"], visitor: ["id", "body", "superClass", "mixins", "typeParameters", "superTypeParameters", "implements", "decorators"], aliases: ["Scopable", "Class", "Expression"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true }, body: { validate: (0, _utils.assertNodeType)("ClassBody") }, superClass: { optional: true, validate: (0, _utils.assertNodeType)("Expression") }, superTypeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true }, implements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, mixins: { validate: (0, _utils.assertNodeType)("InterfaceExtends"), optional: true } } }), defineType("ClassDeclaration", { inherits: "ClassExpression", aliases: ["Scopable", "Class", "Statement", "Declaration"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier") }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterDeclaration", "TSTypeParameterDeclaration", "Noop"), optional: true }, body: { validate: (0, _utils.assertNodeType)("ClassBody") }, superClass: { optional: true, validate: (0, _utils.assertNodeType)("Expression") }, superTypeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true }, implements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSExpressionWithTypeArguments", "ClassImplements"))), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, mixins: { validate: (0, _utils.assertNodeType)("InterfaceExtends"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, abstract: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }, validate: function() {
          const identifier = (0, _utils.assertNodeType)("Identifier");
          return function(parent, key, node) {
            process.env.BABEL_TYPES_8_BREAKING && ((0, _is.default)("ExportDefaultDeclaration", parent) || identifier(node, "id", node.id));
          };
        }() }), defineType("ExportAllDeclaration", { visitor: ["source"], aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"], fields: { source: { validate: (0, _utils.assertNodeType)("StringLiteral") }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")), assertions: { optional: true, validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute"))) } } }), defineType("ExportDefaultDeclaration", { visitor: ["declaration"], aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"], fields: { declaration: { validate: (0, _utils.assertNodeType)("TSDeclareFunction", "FunctionDeclaration", "ClassDeclaration", "Expression") }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("value")) } }), defineType("ExportNamedDeclaration", { visitor: ["declaration", "specifiers", "source"], aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"], fields: { declaration: { optional: true, validate: (0, _utils.chain)((0, _utils.assertNodeType)("Declaration"), Object.assign(function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && node.specifiers.length)
            throw new TypeError("Only declaration or specifiers is allowed on ExportNamedDeclaration");
        }, { oneOfNodeTypes: ["Declaration"] }), function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && node.source)
            throw new TypeError("Cannot export a declaration from a source");
        }) }, assertions: { optional: true, validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute"))) }, specifiers: { default: [], validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)(function() {
          const sourced = (0, _utils.assertNodeType)("ExportSpecifier", "ExportDefaultSpecifier", "ExportNamespaceSpecifier"), sourceless = (0, _utils.assertNodeType)("ExportSpecifier");
          return process.env.BABEL_TYPES_8_BREAKING ? function(node, key, val) {
            (node.source ? sourced : sourceless)(node, key, val);
          } : sourced;
        }())) }, source: { validate: (0, _utils.assertNodeType)("StringLiteral"), optional: true }, exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) } }), defineType("ExportSpecifier", { visitor: ["local", "exported"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") }, exported: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, exportKind: { validate: (0, _utils.assertOneOf)("type", "value"), optional: true } } }), defineType("ForOfStatement", { visitor: ["left", "right", "body"], builder: ["left", "right", "body", "await"], aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"], fields: { left: { validate: function() {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return (0, _utils.assertNodeType)("VariableDeclaration", "LVal");
          const declaration = (0, _utils.assertNodeType)("VariableDeclaration"), lval = (0, _utils.assertNodeType)("Identifier", "MemberExpression", "ArrayPattern", "ObjectPattern", "TSAsExpression", "TSTypeAssertion", "TSNonNullExpression");
          return function(node, key, val) {
            (0, _is.default)("VariableDeclaration", val) ? declaration(node, key, val) : lval(node, key, val);
          };
        }() }, right: { validate: (0, _utils.assertNodeType)("Expression") }, body: { validate: (0, _utils.assertNodeType)("Statement") }, await: { default: false } } }), defineType("ImportDeclaration", { visitor: ["specifiers", "source"], aliases: ["Statement", "Declaration", "ModuleDeclaration"], fields: { assertions: { optional: true, validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportAttribute"))) }, specifiers: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier"))) }, source: { validate: (0, _utils.assertNodeType)("StringLiteral") }, importKind: { validate: (0, _utils.assertOneOf)("type", "typeof", "value"), optional: true } } }), defineType("ImportDefaultSpecifier", { visitor: ["local"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("ImportNamespaceSpecifier", { visitor: ["local"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("ImportSpecifier", { visitor: ["local", "imported"], aliases: ["ModuleSpecifier"], fields: { local: { validate: (0, _utils.assertNodeType)("Identifier") }, imported: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, importKind: { validate: (0, _utils.assertOneOf)("type", "typeof", "value"), optional: true } } }), defineType("MetaProperty", { visitor: ["meta", "property"], aliases: ["Expression"], fields: { meta: { validate: (0, _utils.chain)((0, _utils.assertNodeType)("Identifier"), Object.assign(function(node, key, val) {
          if (!process.env.BABEL_TYPES_8_BREAKING)
            return;
          let property;
          switch (val.name) {
            case "function":
              property = "sent";
              break;
            case "new":
              property = "target";
              break;
            case "import":
              property = "meta";
          }
          if (!(0, _is.default)("Identifier", node.property, { name: property }))
            throw new TypeError("Unrecognised MetaProperty");
        }, { oneOfNodeTypes: ["Identifier"] })) }, property: { validate: (0, _utils.assertNodeType)("Identifier") } } });
        const classMethodOrPropertyCommon = () => ({ abstract: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, accessibility: { validate: (0, _utils.assertOneOf)("public", "private", "protected"), optional: true }, static: { default: false }, override: { default: false }, computed: { default: false }, optional: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, key: { validate: (0, _utils.chain)(function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral"), computed = (0, _utils.assertNodeType)("Expression");
          return function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
        }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression")) } });
        exports2.classMethodOrPropertyCommon = classMethodOrPropertyCommon;
        const classMethodOrDeclareMethodCommon = () => Object.assign({}, functionCommon(), classMethodOrPropertyCommon(), { params: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Identifier", "Pattern", "RestElement", "TSParameterProperty"))) }, kind: { validate: (0, _utils.assertOneOf)("get", "set", "method", "constructor"), default: "method" }, access: { validate: (0, _utils.chain)((0, _utils.assertValueType)("string"), (0, _utils.assertOneOf)("public", "private", "protected")), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } });
        exports2.classMethodOrDeclareMethodCommon = classMethodOrDeclareMethodCommon, defineType("ClassMethod", { aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"], builder: ["kind", "key", "params", "body", "computed", "static", "generator", "async"], visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"], fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), { body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }) }), defineType("ObjectPattern", { visitor: ["properties", "typeAnnotation", "decorators"], builder: ["properties"], aliases: ["Pattern", "PatternLike", "LVal"], fields: Object.assign({}, patternLikeCommon(), { properties: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("RestElement", "ObjectProperty"))) } }) }), defineType("SpreadElement", { visitor: ["argument"], aliases: ["UnaryLike"], deprecatedAlias: "SpreadProperty", fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("Super", { aliases: ["Expression"] }), defineType("TaggedTemplateExpression", { visitor: ["tag", "quasi", "typeParameters"], builder: ["tag", "quasi"], aliases: ["Expression"], fields: { tag: { validate: (0, _utils.assertNodeType)("Expression") }, quasi: { validate: (0, _utils.assertNodeType)("TemplateLiteral") }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true } } }), defineType("TemplateElement", { builder: ["value", "tail"], fields: { value: { validate: (0, _utils.chain)((0, _utils.assertShape)({ raw: { validate: (0, _utils.assertValueType)("string") }, cooked: { validate: (0, _utils.assertValueType)("string"), optional: true } }), function(node) {
          const raw = node.value.raw;
          let str, containsInvalid, unterminatedCalled = false;
          try {
            const error = () => {
              throw new Error();
            };
            ({ str, containsInvalid } = (0, _helperStringParser.readStringContents)("template", raw, 0, 0, 0, { unterminated() {
              unterminatedCalled = true;
            }, strictNumericEscape: error, invalidEscapeSequence: error, numericSeparatorInEscapeSequence: error, unexpectedNumericSeparator: error, invalidDigit: error, invalidCodePoint: error }));
          } catch (_unused) {
            unterminatedCalled = true, containsInvalid = true;
          }
          if (!unterminatedCalled)
            throw new Error("Invalid raw");
          node.value.cooked = containsInvalid ? null : str;
        }) }, tail: { default: false } } }), defineType("TemplateLiteral", { visitor: ["quasis", "expressions"], aliases: ["Expression", "Literal"], fields: { quasis: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TemplateElement"))) }, expressions: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "TSType")), function(node, key, val) {
          if (node.quasis.length !== val.length + 1)
            throw new TypeError(`Number of ${node.type} quasis should be exactly one more than the number of expressions.
Expected ${val.length + 1} quasis but got ${node.quasis.length}`);
        }) } } }), defineType("YieldExpression", { builder: ["argument", "delegate"], visitor: ["argument"], aliases: ["Expression", "Terminatorless"], fields: { delegate: { validate: (0, _utils.chain)((0, _utils.assertValueType)("boolean"), Object.assign(function(node, key, val) {
          if (process.env.BABEL_TYPES_8_BREAKING && val && !node.argument)
            throw new TypeError("Property delegate of YieldExpression cannot be true if there is no argument");
        }, { type: "boolean" })), default: false }, argument: { optional: true, validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("AwaitExpression", { builder: ["argument"], visitor: ["argument"], aliases: ["Expression", "Terminatorless"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("Import", { aliases: ["Expression"] }), defineType("BigIntLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), defineType("ExportNamespaceSpecifier", { visitor: ["exported"], aliases: ["ModuleSpecifier"], fields: { exported: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("OptionalMemberExpression", { builder: ["object", "property", "computed", "optional"], visitor: ["object", "property"], aliases: ["Expression"], fields: { object: { validate: (0, _utils.assertNodeType)("Expression") }, property: { validate: function() {
          const normal = (0, _utils.assertNodeType)("Identifier"), computed = (0, _utils.assertNodeType)("Expression");
          return Object.assign(function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          }, { oneOfNodeTypes: ["Expression", "Identifier"] });
        }() }, computed: { default: false }, optional: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)()) : (0, _utils.assertValueType)("boolean") } } }), defineType("OptionalCallExpression", { visitor: ["callee", "arguments", "typeParameters", "typeArguments"], builder: ["callee", "arguments", "optional"], aliases: ["Expression"], fields: { callee: { validate: (0, _utils.assertNodeType)("Expression") }, arguments: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement", "JSXNamespacedName", "ArgumentPlaceholder"))) }, optional: { validate: process.env.BABEL_TYPES_8_BREAKING ? (0, _utils.chain)((0, _utils.assertValueType)("boolean"), (0, _utils.assertOptionalChainStart)()) : (0, _utils.assertValueType)("boolean") }, typeArguments: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterInstantiation"), optional: true } } }), defineType("ClassProperty", { visitor: ["key", "value", "typeAnnotation", "decorators"], builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"], aliases: ["Property"], fields: Object.assign({}, classMethodOrPropertyCommon(), { value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } }) }), defineType("ClassAccessorProperty", { visitor: ["key", "value", "typeAnnotation", "decorators"], builder: ["key", "value", "typeAnnotation", "decorators", "computed", "static"], aliases: ["Property", "Accessor"], fields: Object.assign({}, classMethodOrPropertyCommon(), { key: { validate: (0, _utils.chain)(function() {
          const normal = (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "PrivateName"), computed = (0, _utils.assertNodeType)("Expression");
          return function(node, key, val) {
            (node.computed ? computed : normal)(node, key, val);
          };
        }(), (0, _utils.assertNodeType)("Identifier", "StringLiteral", "NumericLiteral", "BigIntLiteral", "Expression", "PrivateName")) }, value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, declare: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } }) }), defineType("ClassPrivateProperty", { visitor: ["key", "value", "decorators", "typeAnnotation"], builder: ["key", "value", "decorators", "static"], aliases: ["Property", "Private"], fields: { key: { validate: (0, _utils.assertNodeType)("PrivateName") }, value: { validate: (0, _utils.assertNodeType)("Expression"), optional: true }, typeAnnotation: { validate: (0, _utils.assertNodeType)("TypeAnnotation", "TSTypeAnnotation", "Noop"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true }, static: { validate: (0, _utils.assertValueType)("boolean"), default: false }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, definite: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, variance: { validate: (0, _utils.assertNodeType)("Variance"), optional: true } } }), defineType("ClassPrivateMethod", { builder: ["kind", "key", "params", "body", "static"], visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"], aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method", "Private"], fields: Object.assign({}, classMethodOrDeclareMethodCommon(), functionTypeAnnotationCommon(), { kind: { validate: (0, _utils.assertOneOf)("get", "set", "method"), default: "method" }, key: { validate: (0, _utils.assertNodeType)("PrivateName") }, body: { validate: (0, _utils.assertNodeType)("BlockStatement") } }) }), defineType("PrivateName", { visitor: ["id"], aliases: ["Private"], fields: { id: { validate: (0, _utils.assertNodeType)("Identifier") } } }), defineType("StaticBlock", { visitor: ["body"], fields: { body: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Statement"))) } }, aliases: ["Scopable", "BlockParent", "FunctionParent"] });
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/experimental.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/utils.js");
        (0, _utils.default)("ArgumentPlaceholder", {}), (0, _utils.default)("BindExpression", { visitor: ["object", "callee"], aliases: ["Expression"], fields: process.env.BABEL_TYPES_8_BREAKING ? { object: { validate: (0, _utils.assertNodeType)("Expression") }, callee: { validate: (0, _utils.assertNodeType)("Expression") } } : { object: { validate: Object.assign(() => {
        }, { oneOfNodeTypes: ["Expression"] }) }, callee: { validate: Object.assign(() => {
        }, { oneOfNodeTypes: ["Expression"] }) } } }), (0, _utils.default)("ImportAttribute", { visitor: ["key", "value"], fields: { key: { validate: (0, _utils.assertNodeType)("Identifier", "StringLiteral") }, value: { validate: (0, _utils.assertNodeType)("StringLiteral") } } }), (0, _utils.default)("Decorator", { visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), (0, _utils.default)("DoExpression", { visitor: ["body"], builder: ["body", "async"], aliases: ["Expression"], fields: { body: { validate: (0, _utils.assertNodeType)("BlockStatement") }, async: { validate: (0, _utils.assertValueType)("boolean"), default: false } } }), (0, _utils.default)("ExportDefaultSpecifier", { visitor: ["exported"], aliases: ["ModuleSpecifier"], fields: { exported: { validate: (0, _utils.assertNodeType)("Identifier") } } }), (0, _utils.default)("RecordExpression", { visitor: ["properties"], aliases: ["Expression"], fields: { properties: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("ObjectProperty", "SpreadElement"))) } } }), (0, _utils.default)("TupleExpression", { fields: { elements: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Expression", "SpreadElement"))), default: [] } }, visitor: ["elements"], aliases: ["Expression"] }), (0, _utils.default)("DecimalLiteral", { builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } }, aliases: ["Expression", "Pureish", "Literal", "Immutable"] }), (0, _utils.default)("ModuleExpression", { visitor: ["body"], fields: { body: { validate: (0, _utils.assertNodeType)("Program") } }, aliases: ["Expression"] }), (0, _utils.default)("TopicReference", { aliases: ["Expression"] }), (0, _utils.default)("PipelineTopicExpression", { builder: ["expression"], visitor: ["expression"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression"] }), (0, _utils.default)("PipelineBareFunction", { builder: ["callee"], visitor: ["callee"], fields: { callee: { validate: (0, _utils.assertNodeType)("Expression") } }, aliases: ["Expression"] }), (0, _utils.default)("PipelinePrimaryTopicReference", { aliases: ["Expression"] });
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/flow.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("Flow"), defineInterfaceishType = (name) => {
          defineType(name, { builder: ["id", "typeParameters", "extends", "body"], visitor: ["id", "typeParameters", "extends", "mixins", "implements", "body"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")), mixins: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")), implements: (0, _utils.validateOptional)((0, _utils.arrayOfType)("ClassImplements")), body: (0, _utils.validateType)("ObjectTypeAnnotation") } });
        };
        defineType("AnyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ArrayTypeAnnotation", { visitor: ["elementType"], aliases: ["FlowType"], fields: { elementType: (0, _utils.validateType)("FlowType") } }), defineType("BooleanTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("BooleanLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("NullLiteralTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ClassImplements", { visitor: ["id", "typeParameters"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineInterfaceishType("DeclareClass"), defineType("DeclareFunction", { visitor: ["id"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), predicate: (0, _utils.validateOptionalType)("DeclaredPredicate") } }), defineInterfaceishType("DeclareInterface"), defineType("DeclareModule", { builder: ["id", "body", "kind"], visitor: ["id", "body"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)(["Identifier", "StringLiteral"]), body: (0, _utils.validateType)("BlockStatement"), kind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("CommonJS", "ES")) } }), defineType("DeclareModuleExports", { visitor: ["typeAnnotation"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { typeAnnotation: (0, _utils.validateType)("TypeAnnotation") } }), defineType("DeclareTypeAlias", { visitor: ["id", "typeParameters", "right"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), right: (0, _utils.validateType)("FlowType") } }), defineType("DeclareOpaqueType", { visitor: ["id", "typeParameters", "supertype"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), supertype: (0, _utils.validateOptionalType)("FlowType"), impltype: (0, _utils.validateOptionalType)("FlowType") } }), defineType("DeclareVariable", { visitor: ["id"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("DeclareExportDeclaration", { visitor: ["declaration", "specifiers", "source"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { declaration: (0, _utils.validateOptionalType)("Flow"), specifiers: (0, _utils.validateOptional)((0, _utils.arrayOfType)(["ExportSpecifier", "ExportNamespaceSpecifier"])), source: (0, _utils.validateOptionalType)("StringLiteral"), default: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("DeclareExportAllDeclaration", { visitor: ["source"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { source: (0, _utils.validateType)("StringLiteral"), exportKind: (0, _utils.validateOptional)((0, _utils.assertOneOf)("type", "value")) } }), defineType("DeclaredPredicate", { visitor: ["value"], aliases: ["FlowPredicate"], fields: { value: (0, _utils.validateType)("Flow") } }), defineType("ExistsTypeAnnotation", { aliases: ["FlowType"] }), defineType("FunctionTypeAnnotation", { visitor: ["typeParameters", "params", "rest", "returnType"], aliases: ["FlowType"], fields: { typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), params: (0, _utils.validate)((0, _utils.arrayOfType)("FunctionTypeParam")), rest: (0, _utils.validateOptionalType)("FunctionTypeParam"), this: (0, _utils.validateOptionalType)("FunctionTypeParam"), returnType: (0, _utils.validateType)("FlowType") } }), defineType("FunctionTypeParam", { visitor: ["name", "typeAnnotation"], fields: { name: (0, _utils.validateOptionalType)("Identifier"), typeAnnotation: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("GenericTypeAnnotation", { visitor: ["id", "typeParameters"], aliases: ["FlowType"], fields: { id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineType("InferredPredicate", { aliases: ["FlowPredicate"] }), defineType("InterfaceExtends", { visitor: ["id", "typeParameters"], fields: { id: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]), typeParameters: (0, _utils.validateOptionalType)("TypeParameterInstantiation") } }), defineInterfaceishType("InterfaceDeclaration"), defineType("InterfaceTypeAnnotation", { visitor: ["extends", "body"], aliases: ["FlowType"], fields: { extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("InterfaceExtends")), body: (0, _utils.validateType)("ObjectTypeAnnotation") } }), defineType("IntersectionTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("MixedTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("EmptyTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("NullableTypeAnnotation", { visitor: ["typeAnnotation"], aliases: ["FlowType"], fields: { typeAnnotation: (0, _utils.validateType)("FlowType") } }), defineType("NumberLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("number")) } }), defineType("NumberTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ObjectTypeAnnotation", { visitor: ["properties", "indexers", "callProperties", "internalSlots"], aliases: ["FlowType"], builder: ["properties", "indexers", "callProperties", "internalSlots", "exact"], fields: { properties: (0, _utils.validate)((0, _utils.arrayOfType)(["ObjectTypeProperty", "ObjectTypeSpreadProperty"])), indexers: { validate: (0, _utils.arrayOfType)("ObjectTypeIndexer"), optional: true, default: [] }, callProperties: { validate: (0, _utils.arrayOfType)("ObjectTypeCallProperty"), optional: true, default: [] }, internalSlots: { validate: (0, _utils.arrayOfType)("ObjectTypeInternalSlot"), optional: true, default: [] }, exact: { validate: (0, _utils.assertValueType)("boolean"), default: false }, inexact: (0, _utils.validateOptional)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeInternalSlot", { visitor: ["id", "value", "optional", "static", "method"], aliases: ["UserWhitespacable"], fields: { id: (0, _utils.validateType)("Identifier"), value: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), method: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeCallProperty", { visitor: ["value"], aliases: ["UserWhitespacable"], fields: { value: (0, _utils.validateType)("FlowType"), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeIndexer", { visitor: ["id", "key", "value", "variance"], aliases: ["UserWhitespacable"], fields: { id: (0, _utils.validateOptionalType)("Identifier"), key: (0, _utils.validateType)("FlowType"), value: (0, _utils.validateType)("FlowType"), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), variance: (0, _utils.validateOptionalType)("Variance") } }), defineType("ObjectTypeProperty", { visitor: ["key", "value", "variance"], aliases: ["UserWhitespacable"], fields: { key: (0, _utils.validateType)(["Identifier", "StringLiteral"]), value: (0, _utils.validateType)("FlowType"), kind: (0, _utils.validate)((0, _utils.assertOneOf)("init", "get", "set")), static: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), proto: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), variance: (0, _utils.validateOptionalType)("Variance"), method: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("ObjectTypeSpreadProperty", { visitor: ["argument"], aliases: ["UserWhitespacable"], fields: { argument: (0, _utils.validateType)("FlowType") } }), defineType("OpaqueType", { visitor: ["id", "typeParameters", "supertype", "impltype"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), supertype: (0, _utils.validateOptionalType)("FlowType"), impltype: (0, _utils.validateType)("FlowType") } }), defineType("QualifiedTypeIdentifier", { visitor: ["id", "qualification"], fields: { id: (0, _utils.validateType)("Identifier"), qualification: (0, _utils.validateType)(["Identifier", "QualifiedTypeIdentifier"]) } }), defineType("StringLiteralTypeAnnotation", { builder: ["value"], aliases: ["FlowType"], fields: { value: (0, _utils.validate)((0, _utils.assertValueType)("string")) } }), defineType("StringTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("SymbolTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("ThisTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("TupleTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("TypeofTypeAnnotation", { visitor: ["argument"], aliases: ["FlowType"], fields: { argument: (0, _utils.validateType)("FlowType") } }), defineType("TypeAlias", { visitor: ["id", "typeParameters", "right"], aliases: ["FlowDeclaration", "Statement", "Declaration"], fields: { id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TypeParameterDeclaration"), right: (0, _utils.validateType)("FlowType") } }), defineType("TypeAnnotation", { visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("FlowType") } }), defineType("TypeCastExpression", { visitor: ["expression", "typeAnnotation"], aliases: ["ExpressionWrapper", "Expression"], fields: { expression: (0, _utils.validateType)("Expression"), typeAnnotation: (0, _utils.validateType)("TypeAnnotation") } }), defineType("TypeParameter", { visitor: ["bound", "default", "variance"], fields: { name: (0, _utils.validate)((0, _utils.assertValueType)("string")), bound: (0, _utils.validateOptionalType)("TypeAnnotation"), default: (0, _utils.validateOptionalType)("FlowType"), variance: (0, _utils.validateOptionalType)("Variance") } }), defineType("TypeParameterDeclaration", { visitor: ["params"], fields: { params: (0, _utils.validate)((0, _utils.arrayOfType)("TypeParameter")) } }), defineType("TypeParameterInstantiation", { visitor: ["params"], fields: { params: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("UnionTypeAnnotation", { visitor: ["types"], aliases: ["FlowType"], fields: { types: (0, _utils.validate)((0, _utils.arrayOfType)("FlowType")) } }), defineType("Variance", { builder: ["kind"], fields: { kind: (0, _utils.validate)((0, _utils.assertOneOf)("minus", "plus")) } }), defineType("VoidTypeAnnotation", { aliases: ["FlowType", "FlowBaseAnnotation"] }), defineType("EnumDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "body"], fields: { id: (0, _utils.validateType)("Identifier"), body: (0, _utils.validateType)(["EnumBooleanBody", "EnumNumberBody", "EnumStringBody", "EnumSymbolBody"]) } }), defineType("EnumBooleanBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumBooleanMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumNumberBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)("EnumNumberMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumStringBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { explicitType: (0, _utils.validate)((0, _utils.assertValueType)("boolean")), members: (0, _utils.validateArrayOfType)(["EnumStringMember", "EnumDefaultedMember"]), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumSymbolBody", { aliases: ["EnumBody"], visitor: ["members"], fields: { members: (0, _utils.validateArrayOfType)("EnumDefaultedMember"), hasUnknownMembers: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } }), defineType("EnumBooleanMember", { aliases: ["EnumMember"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("BooleanLiteral") } }), defineType("EnumNumberMember", { aliases: ["EnumMember"], visitor: ["id", "init"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("NumericLiteral") } }), defineType("EnumStringMember", { aliases: ["EnumMember"], visitor: ["id", "init"], fields: { id: (0, _utils.validateType)("Identifier"), init: (0, _utils.validateType)("StringLiteral") } }), defineType("EnumDefaultedMember", { aliases: ["EnumMember"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("IndexedAccessType", { visitor: ["objectType", "indexType"], aliases: ["FlowType"], fields: { objectType: (0, _utils.validateType)("FlowType"), indexType: (0, _utils.validateType)("FlowType") } }), defineType("OptionalIndexedAccessType", { visitor: ["objectType", "indexType"], aliases: ["FlowType"], fields: { objectType: (0, _utils.validateType)("FlowType"), indexType: (0, _utils.validateType)("FlowType"), optional: (0, _utils.validate)((0, _utils.assertValueType)("boolean")) } });
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), Object.defineProperty(exports2, "ALIAS_KEYS", { enumerable: true, get: function() {
          return _utils.ALIAS_KEYS;
        } }), Object.defineProperty(exports2, "BUILDER_KEYS", { enumerable: true, get: function() {
          return _utils.BUILDER_KEYS;
        } }), Object.defineProperty(exports2, "DEPRECATED_KEYS", { enumerable: true, get: function() {
          return _utils.DEPRECATED_KEYS;
        } }), Object.defineProperty(exports2, "FLIPPED_ALIAS_KEYS", { enumerable: true, get: function() {
          return _utils.FLIPPED_ALIAS_KEYS;
        } }), Object.defineProperty(exports2, "NODE_FIELDS", { enumerable: true, get: function() {
          return _utils.NODE_FIELDS;
        } }), Object.defineProperty(exports2, "NODE_PARENT_VALIDATIONS", { enumerable: true, get: function() {
          return _utils.NODE_PARENT_VALIDATIONS;
        } }), Object.defineProperty(exports2, "PLACEHOLDERS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS;
        } }), Object.defineProperty(exports2, "PLACEHOLDERS_ALIAS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS_ALIAS;
        } }), Object.defineProperty(exports2, "PLACEHOLDERS_FLIPPED_ALIAS", { enumerable: true, get: function() {
          return _placeholders.PLACEHOLDERS_FLIPPED_ALIAS;
        } }), exports2.TYPES = void 0, Object.defineProperty(exports2, "VISITOR_KEYS", { enumerable: true, get: function() {
          return _utils.VISITOR_KEYS;
        } });
        var _toFastProperties = __webpack_require__2("./node_modules/.pnpm/to-fast-properties@2.0.0/node_modules/to-fast-properties/index.js");
        __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/core.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/flow.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/jsx.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/misc.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/experimental.js"), __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/typescript.js");
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/utils.js"), _placeholders = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/placeholders.js");
        _toFastProperties(_utils.VISITOR_KEYS), _toFastProperties(_utils.ALIAS_KEYS), _toFastProperties(_utils.FLIPPED_ALIAS_KEYS), _toFastProperties(_utils.NODE_FIELDS), _toFastProperties(_utils.BUILDER_KEYS), _toFastProperties(_utils.DEPRECATED_KEYS), _toFastProperties(_placeholders.PLACEHOLDERS_ALIAS), _toFastProperties(_placeholders.PLACEHOLDERS_FLIPPED_ALIAS);
        const TYPES = [].concat(Object.keys(_utils.VISITOR_KEYS), Object.keys(_utils.FLIPPED_ALIAS_KEYS), Object.keys(_utils.DEPRECATED_KEYS));
        exports2.TYPES = TYPES;
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/jsx.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/utils.js");
        const defineType = (0, _utils.defineAliasedType)("JSX");
        defineType("JSXAttribute", { visitor: ["name", "value"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXNamespacedName") }, value: { optional: true, validate: (0, _utils.assertNodeType)("JSXElement", "JSXFragment", "StringLiteral", "JSXExpressionContainer") } } }), defineType("JSXClosingElement", { visitor: ["name"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") } } }), defineType("JSXElement", { builder: ["openingElement", "closingElement", "children", "selfClosing"], visitor: ["openingElement", "children", "closingElement"], aliases: ["Immutable", "Expression"], fields: Object.assign({ openingElement: { validate: (0, _utils.assertNodeType)("JSXOpeningElement") }, closingElement: { optional: true, validate: (0, _utils.assertNodeType)("JSXClosingElement") }, children: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment"))) } }, { selfClosing: { validate: (0, _utils.assertValueType)("boolean"), optional: true } }) }), defineType("JSXEmptyExpression", {}), defineType("JSXExpressionContainer", { visitor: ["expression"], aliases: ["Immutable"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression", "JSXEmptyExpression") } } }), defineType("JSXSpreadChild", { visitor: ["expression"], aliases: ["Immutable"], fields: { expression: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("JSXIdentifier", { builder: ["name"], fields: { name: { validate: (0, _utils.assertValueType)("string") } } }), defineType("JSXMemberExpression", { visitor: ["object", "property"], fields: { object: { validate: (0, _utils.assertNodeType)("JSXMemberExpression", "JSXIdentifier") }, property: { validate: (0, _utils.assertNodeType)("JSXIdentifier") } } }), defineType("JSXNamespacedName", { visitor: ["namespace", "name"], fields: { namespace: { validate: (0, _utils.assertNodeType)("JSXIdentifier") }, name: { validate: (0, _utils.assertNodeType)("JSXIdentifier") } } }), defineType("JSXOpeningElement", { builder: ["name", "attributes", "selfClosing"], visitor: ["name", "attributes"], aliases: ["Immutable"], fields: { name: { validate: (0, _utils.assertNodeType)("JSXIdentifier", "JSXMemberExpression", "JSXNamespacedName") }, selfClosing: { default: false }, attributes: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXAttribute", "JSXSpreadAttribute"))) }, typeParameters: { validate: (0, _utils.assertNodeType)("TypeParameterInstantiation", "TSTypeParameterInstantiation"), optional: true } } }), defineType("JSXSpreadAttribute", { visitor: ["argument"], fields: { argument: { validate: (0, _utils.assertNodeType)("Expression") } } }), defineType("JSXText", { aliases: ["Immutable"], builder: ["value"], fields: { value: { validate: (0, _utils.assertValueType)("string") } } }), defineType("JSXFragment", { builder: ["openingFragment", "closingFragment", "children"], visitor: ["openingFragment", "children", "closingFragment"], aliases: ["Immutable", "Expression"], fields: { openingFragment: { validate: (0, _utils.assertNodeType)("JSXOpeningFragment") }, closingFragment: { validate: (0, _utils.assertNodeType)("JSXClosingFragment") }, children: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("JSXText", "JSXExpressionContainer", "JSXSpreadChild", "JSXElement", "JSXFragment"))) } } }), defineType("JSXOpeningFragment", { aliases: ["Immutable"] }), defineType("JSXClosingFragment", { aliases: ["Immutable"] });
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/misc.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/utils.js"), _placeholders = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/placeholders.js");
        const defineType = (0, _utils.defineAliasedType)("Miscellaneous");
        defineType("Noop", { visitor: [] }), defineType("Placeholder", { visitor: [], builder: ["expectedNode", "name"], fields: { name: { validate: (0, _utils.assertNodeType)("Identifier") }, expectedNode: { validate: (0, _utils.assertOneOf)(..._placeholders.PLACEHOLDERS) } } }), defineType("V8IntrinsicIdentifier", { builder: ["name"], fields: { name: { validate: (0, _utils.assertValueType)("string") } } });
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/placeholders.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.PLACEHOLDERS_FLIPPED_ALIAS = exports2.PLACEHOLDERS_ALIAS = exports2.PLACEHOLDERS = void 0;
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/utils.js");
        const PLACEHOLDERS = ["Identifier", "StringLiteral", "Expression", "Statement", "Declaration", "BlockStatement", "ClassBody", "Pattern"];
        exports2.PLACEHOLDERS = PLACEHOLDERS;
        const PLACEHOLDERS_ALIAS = { Declaration: ["Statement"], Pattern: ["PatternLike", "LVal"] };
        exports2.PLACEHOLDERS_ALIAS = PLACEHOLDERS_ALIAS;
        for (const type of PLACEHOLDERS) {
          const alias = _utils.ALIAS_KEYS[type];
          null != alias && alias.length && (PLACEHOLDERS_ALIAS[type] = alias);
        }
        const PLACEHOLDERS_FLIPPED_ALIAS = {};
        exports2.PLACEHOLDERS_FLIPPED_ALIAS = PLACEHOLDERS_FLIPPED_ALIAS, Object.keys(PLACEHOLDERS_ALIAS).forEach((type) => {
          PLACEHOLDERS_ALIAS[type].forEach((alias) => {
            Object.hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias) || (PLACEHOLDERS_FLIPPED_ALIAS[alias] = []), PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);
          });
        });
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/typescript.js": (__unused_webpack_module, __unused_webpack_exports, __webpack_require__2) => {
        "use strict";
        var _utils = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/utils.js"), _core = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/core.js"), _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/is.js");
        const defineType = (0, _utils.defineAliasedType)("TypeScript"), bool = (0, _utils.assertValueType)("boolean"), tSFunctionTypeAnnotationCommon = () => ({ returnType: { validate: (0, _utils.assertNodeType)("TSTypeAnnotation", "Noop"), optional: true }, typeParameters: { validate: (0, _utils.assertNodeType)("TSTypeParameterDeclaration", "Noop"), optional: true } });
        defineType("TSParameterProperty", { aliases: ["LVal"], visitor: ["parameter"], fields: { accessibility: { validate: (0, _utils.assertOneOf)("public", "private", "protected"), optional: true }, readonly: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, parameter: { validate: (0, _utils.assertNodeType)("Identifier", "AssignmentPattern") }, override: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, decorators: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("Decorator"))), optional: true } } }), defineType("TSDeclareFunction", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "params", "returnType"], fields: Object.assign({}, (0, _core.functionDeclarationCommon)(), tSFunctionTypeAnnotationCommon()) }), defineType("TSDeclareMethod", { visitor: ["decorators", "key", "typeParameters", "params", "returnType"], fields: Object.assign({}, (0, _core.classMethodOrDeclareMethodCommon)(), tSFunctionTypeAnnotationCommon()) }), defineType("TSQualifiedName", { aliases: ["TSEntityName"], visitor: ["left", "right"], fields: { left: (0, _utils.validateType)("TSEntityName"), right: (0, _utils.validateType)("Identifier") } });
        const signatureDeclarationCommon = () => ({ typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), parameters: (0, _utils.validateArrayOfType)(["Identifier", "RestElement"]), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation") }), callConstructSignatureDeclaration = { aliases: ["TSTypeElement"], visitor: ["typeParameters", "parameters", "typeAnnotation"], fields: signatureDeclarationCommon() };
        defineType("TSCallSignatureDeclaration", callConstructSignatureDeclaration), defineType("TSConstructSignatureDeclaration", callConstructSignatureDeclaration);
        const namedTypeElementCommon = () => ({ key: (0, _utils.validateType)("Expression"), computed: { default: false }, optional: (0, _utils.validateOptional)(bool) });
        defineType("TSPropertySignature", { aliases: ["TSTypeElement"], visitor: ["key", "typeAnnotation", "initializer"], fields: Object.assign({}, namedTypeElementCommon(), { readonly: (0, _utils.validateOptional)(bool), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"), initializer: (0, _utils.validateOptionalType)("Expression"), kind: { validate: (0, _utils.assertOneOf)("get", "set") } }) }), defineType("TSMethodSignature", { aliases: ["TSTypeElement"], visitor: ["key", "typeParameters", "parameters", "typeAnnotation"], fields: Object.assign({}, signatureDeclarationCommon(), namedTypeElementCommon(), { kind: { validate: (0, _utils.assertOneOf)("method", "get", "set") } }) }), defineType("TSIndexSignature", { aliases: ["TSTypeElement"], visitor: ["parameters", "typeAnnotation"], fields: { readonly: (0, _utils.validateOptional)(bool), static: (0, _utils.validateOptional)(bool), parameters: (0, _utils.validateArrayOfType)("Identifier"), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation") } });
        const tsKeywordTypes = ["TSAnyKeyword", "TSBooleanKeyword", "TSBigIntKeyword", "TSIntrinsicKeyword", "TSNeverKeyword", "TSNullKeyword", "TSNumberKeyword", "TSObjectKeyword", "TSStringKeyword", "TSSymbolKeyword", "TSUndefinedKeyword", "TSUnknownKeyword", "TSVoidKeyword"];
        for (const type of tsKeywordTypes)
          defineType(type, { aliases: ["TSType", "TSBaseType"], visitor: [], fields: {} });
        defineType("TSThisType", { aliases: ["TSType", "TSBaseType"], visitor: [], fields: {} });
        const fnOrCtrBase = { aliases: ["TSType"], visitor: ["typeParameters", "parameters", "typeAnnotation"] };
        defineType("TSFunctionType", Object.assign({}, fnOrCtrBase, { fields: signatureDeclarationCommon() })), defineType("TSConstructorType", Object.assign({}, fnOrCtrBase, { fields: Object.assign({}, signatureDeclarationCommon(), { abstract: (0, _utils.validateOptional)(bool) }) })), defineType("TSTypeReference", { aliases: ["TSType"], visitor: ["typeName", "typeParameters"], fields: { typeName: (0, _utils.validateType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSTypePredicate", { aliases: ["TSType"], visitor: ["parameterName", "typeAnnotation"], builder: ["parameterName", "typeAnnotation", "asserts"], fields: { parameterName: (0, _utils.validateType)(["Identifier", "TSThisType"]), typeAnnotation: (0, _utils.validateOptionalType)("TSTypeAnnotation"), asserts: (0, _utils.validateOptional)(bool) } }), defineType("TSTypeQuery", { aliases: ["TSType"], visitor: ["exprName", "typeParameters"], fields: { exprName: (0, _utils.validateType)(["TSEntityName", "TSImportType"]), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSTypeLiteral", { aliases: ["TSType"], visitor: ["members"], fields: { members: (0, _utils.validateArrayOfType)("TSTypeElement") } }), defineType("TSArrayType", { aliases: ["TSType"], visitor: ["elementType"], fields: { elementType: (0, _utils.validateType)("TSType") } }), defineType("TSTupleType", { aliases: ["TSType"], visitor: ["elementTypes"], fields: { elementTypes: (0, _utils.validateArrayOfType)(["TSType", "TSNamedTupleMember"]) } }), defineType("TSOptionalType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSRestType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSNamedTupleMember", { visitor: ["label", "elementType"], builder: ["label", "elementType", "optional"], fields: { label: (0, _utils.validateType)("Identifier"), optional: { validate: bool, default: false }, elementType: (0, _utils.validateType)("TSType") } });
        const unionOrIntersection = { aliases: ["TSType"], visitor: ["types"], fields: { types: (0, _utils.validateArrayOfType)("TSType") } };
        defineType("TSUnionType", unionOrIntersection), defineType("TSIntersectionType", unionOrIntersection), defineType("TSConditionalType", { aliases: ["TSType"], visitor: ["checkType", "extendsType", "trueType", "falseType"], fields: { checkType: (0, _utils.validateType)("TSType"), extendsType: (0, _utils.validateType)("TSType"), trueType: (0, _utils.validateType)("TSType"), falseType: (0, _utils.validateType)("TSType") } }), defineType("TSInferType", { aliases: ["TSType"], visitor: ["typeParameter"], fields: { typeParameter: (0, _utils.validateType)("TSTypeParameter") } }), defineType("TSParenthesizedType", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSTypeOperator", { aliases: ["TSType"], visitor: ["typeAnnotation"], fields: { operator: (0, _utils.validate)((0, _utils.assertValueType)("string")), typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSIndexedAccessType", { aliases: ["TSType"], visitor: ["objectType", "indexType"], fields: { objectType: (0, _utils.validateType)("TSType"), indexType: (0, _utils.validateType)("TSType") } }), defineType("TSMappedType", { aliases: ["TSType"], visitor: ["typeParameter", "typeAnnotation", "nameType"], fields: { readonly: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")), typeParameter: (0, _utils.validateType)("TSTypeParameter"), optional: (0, _utils.validateOptional)((0, _utils.assertOneOf)(true, false, "+", "-")), typeAnnotation: (0, _utils.validateOptionalType)("TSType"), nameType: (0, _utils.validateOptionalType)("TSType") } }), defineType("TSLiteralType", { aliases: ["TSType", "TSBaseType"], visitor: ["literal"], fields: { literal: { validate: function() {
          const unaryExpression = (0, _utils.assertNodeType)("NumericLiteral", "BigIntLiteral"), unaryOperator = (0, _utils.assertOneOf)("-"), literal2 = (0, _utils.assertNodeType)("NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral");
          function validator(parent, key, node) {
            (0, _is.default)("UnaryExpression", node) ? (unaryOperator(node, "operator", node.operator), unaryExpression(node, "argument", node.argument)) : literal2(parent, key, node);
          }
          return validator.oneOfNodeTypes = ["NumericLiteral", "StringLiteral", "BooleanLiteral", "BigIntLiteral", "TemplateLiteral", "UnaryExpression"], validator;
        }() } } }), defineType("TSExpressionWithTypeArguments", { aliases: ["TSType"], visitor: ["expression", "typeParameters"], fields: { expression: (0, _utils.validateType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSInterfaceDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "extends", "body"], fields: { declare: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), extends: (0, _utils.validateOptional)((0, _utils.arrayOfType)("TSExpressionWithTypeArguments")), body: (0, _utils.validateType)("TSInterfaceBody") } }), defineType("TSInterfaceBody", { visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("TSTypeElement") } }), defineType("TSTypeAliasDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "typeParameters", "typeAnnotation"], fields: { declare: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterDeclaration"), typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSInstantiationExpression", { aliases: ["Expression"], visitor: ["expression", "typeParameters"], fields: { expression: (0, _utils.validateType)("Expression"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSAsExpression", { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["expression", "typeAnnotation"], fields: { expression: (0, _utils.validateType)("Expression"), typeAnnotation: (0, _utils.validateType)("TSType") } }), defineType("TSTypeAssertion", { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["typeAnnotation", "expression"], fields: { typeAnnotation: (0, _utils.validateType)("TSType"), expression: (0, _utils.validateType)("Expression") } }), defineType("TSEnumDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "members"], fields: { declare: (0, _utils.validateOptional)(bool), const: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)("Identifier"), members: (0, _utils.validateArrayOfType)("TSEnumMember"), initializer: (0, _utils.validateOptionalType)("Expression") } }), defineType("TSEnumMember", { visitor: ["id", "initializer"], fields: { id: (0, _utils.validateType)(["Identifier", "StringLiteral"]), initializer: (0, _utils.validateOptionalType)("Expression") } }), defineType("TSModuleDeclaration", { aliases: ["Statement", "Declaration"], visitor: ["id", "body"], fields: { declare: (0, _utils.validateOptional)(bool), global: (0, _utils.validateOptional)(bool), id: (0, _utils.validateType)(["Identifier", "StringLiteral"]), body: (0, _utils.validateType)(["TSModuleBlock", "TSModuleDeclaration"]) } }), defineType("TSModuleBlock", { aliases: ["Scopable", "Block", "BlockParent"], visitor: ["body"], fields: { body: (0, _utils.validateArrayOfType)("Statement") } }), defineType("TSImportType", { aliases: ["TSType"], visitor: ["argument", "qualifier", "typeParameters"], fields: { argument: (0, _utils.validateType)("StringLiteral"), qualifier: (0, _utils.validateOptionalType)("TSEntityName"), typeParameters: (0, _utils.validateOptionalType)("TSTypeParameterInstantiation") } }), defineType("TSImportEqualsDeclaration", { aliases: ["Statement"], visitor: ["id", "moduleReference"], fields: { isExport: (0, _utils.validate)(bool), id: (0, _utils.validateType)("Identifier"), moduleReference: (0, _utils.validateType)(["TSEntityName", "TSExternalModuleReference"]), importKind: { validate: (0, _utils.assertOneOf)("type", "value"), optional: true } } }), defineType("TSExternalModuleReference", { visitor: ["expression"], fields: { expression: (0, _utils.validateType)("StringLiteral") } }), defineType("TSNonNullExpression", { aliases: ["Expression", "LVal", "PatternLike"], visitor: ["expression"], fields: { expression: (0, _utils.validateType)("Expression") } }), defineType("TSExportAssignment", { aliases: ["Statement"], visitor: ["expression"], fields: { expression: (0, _utils.validateType)("Expression") } }), defineType("TSNamespaceExportDeclaration", { aliases: ["Statement"], visitor: ["id"], fields: { id: (0, _utils.validateType)("Identifier") } }), defineType("TSTypeAnnotation", { visitor: ["typeAnnotation"], fields: { typeAnnotation: { validate: (0, _utils.assertNodeType)("TSType") } } }), defineType("TSTypeParameterInstantiation", { visitor: ["params"], fields: { params: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSType"))) } } }), defineType("TSTypeParameterDeclaration", { visitor: ["params"], fields: { params: { validate: (0, _utils.chain)((0, _utils.assertValueType)("array"), (0, _utils.assertEach)((0, _utils.assertNodeType)("TSTypeParameter"))) } } }), defineType("TSTypeParameter", { builder: ["constraint", "default", "name"], visitor: ["constraint", "default"], fields: { name: { validate: (0, _utils.assertValueType)("string") }, in: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, out: { validate: (0, _utils.assertValueType)("boolean"), optional: true }, constraint: { validate: (0, _utils.assertNodeType)("TSType"), optional: true }, default: { validate: (0, _utils.assertNodeType)("TSType"), optional: true } } });
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/utils.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.VISITOR_KEYS = exports2.NODE_PARENT_VALIDATIONS = exports2.NODE_FIELDS = exports2.FLIPPED_ALIAS_KEYS = exports2.DEPRECATED_KEYS = exports2.BUILDER_KEYS = exports2.ALIAS_KEYS = void 0, exports2.arrayOf = arrayOf, exports2.arrayOfType = arrayOfType, exports2.assertEach = assertEach, exports2.assertNodeOrValueType = function(...types2) {
          function validate2(node, key, val) {
            for (const type of types2)
              if (getType2(val) === type || (0, _is.default)(type, val))
                return void (0, _validate.validateChild)(node, key, val);
            throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types2)} but instead got ${JSON.stringify(null == val ? void 0 : val.type)}`);
          }
          return validate2.oneOfNodeOrValueTypes = types2, validate2;
        }, exports2.assertNodeType = assertNodeType, exports2.assertOneOf = function(...values) {
          function validate2(node, key, val) {
            if (values.indexOf(val) < 0)
              throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);
          }
          return validate2.oneOf = values, validate2;
        }, exports2.assertOptionalChainStart = function() {
          return function(node) {
            var _current;
            let current2 = node;
            for (; node; ) {
              const { type } = current2;
              if ("OptionalCallExpression" !== type) {
                if ("OptionalMemberExpression" !== type)
                  break;
                if (current2.optional)
                  return;
                current2 = current2.object;
              } else {
                if (current2.optional)
                  return;
                current2 = current2.callee;
              }
            }
            throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${null == (_current = current2) ? void 0 : _current.type}`);
          };
        }, exports2.assertShape = function(shape) {
          function validate2(node, key, val) {
            const errors = [];
            for (const property of Object.keys(shape))
              try {
                (0, _validate.validateField)(node, property, val[property], shape[property]);
              } catch (error) {
                if (error instanceof TypeError) {
                  errors.push(error.message);
                  continue;
                }
                throw error;
              }
            if (errors.length)
              throw new TypeError(`Property ${key} of ${node.type} expected to have the following:
${errors.join("\n")}`);
          }
          return validate2.shapeOf = shape, validate2;
        }, exports2.assertValueType = assertValueType, exports2.chain = chain, exports2.default = defineType, exports2.defineAliasedType = function(...aliases) {
          return (type, opts = {}) => {
            let defined = opts.aliases;
            var _store$opts$inherits$;
            defined || (opts.inherits && (defined = null == (_store$opts$inherits$ = store[opts.inherits].aliases) ? void 0 : _store$opts$inherits$.slice()), null != defined || (defined = []), opts.aliases = defined);
            const additional = aliases.filter((a) => !defined.includes(a));
            return defined.unshift(...additional), defineType(type, opts);
          };
        }, exports2.typeIs = typeIs, exports2.validate = validate, exports2.validateArrayOfType = function(typeName) {
          return validate(arrayOfType(typeName));
        }, exports2.validateOptional = function(validate2) {
          return { validate: validate2, optional: true };
        }, exports2.validateOptionalType = function(typeName) {
          return { validate: typeIs(typeName), optional: true };
        }, exports2.validateType = function(typeName) {
          return validate(typeIs(typeName));
        };
        var _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/is.js"), _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/validate.js");
        const VISITOR_KEYS = {};
        exports2.VISITOR_KEYS = VISITOR_KEYS;
        const ALIAS_KEYS = {};
        exports2.ALIAS_KEYS = ALIAS_KEYS;
        const FLIPPED_ALIAS_KEYS = {};
        exports2.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;
        const NODE_FIELDS = {};
        exports2.NODE_FIELDS = NODE_FIELDS;
        const BUILDER_KEYS = {};
        exports2.BUILDER_KEYS = BUILDER_KEYS;
        const DEPRECATED_KEYS = {};
        exports2.DEPRECATED_KEYS = DEPRECATED_KEYS;
        const NODE_PARENT_VALIDATIONS = {};
        function getType2(val) {
          return Array.isArray(val) ? "array" : null === val ? "null" : typeof val;
        }
        function validate(validate2) {
          return { validate: validate2 };
        }
        function typeIs(typeName) {
          return "string" == typeof typeName ? assertNodeType(typeName) : assertNodeType(...typeName);
        }
        function arrayOf(elementType) {
          return chain(assertValueType("array"), assertEach(elementType));
        }
        function arrayOfType(typeName) {
          return arrayOf(typeIs(typeName));
        }
        function assertEach(callback) {
          function validator(node, key, val) {
            if (Array.isArray(val))
              for (let i = 0; i < val.length; i++) {
                const subkey = `${key}[${i}]`, v = val[i];
                callback(node, subkey, v), process.env.BABEL_TYPES_8_BREAKING && (0, _validate.validateChild)(node, subkey, v);
              }
          }
          return validator.each = callback, validator;
        }
        function assertNodeType(...types2) {
          function validate2(node, key, val) {
            for (const type of types2)
              if ((0, _is.default)(type, val))
                return void (0, _validate.validateChild)(node, key, val);
            throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types2)} but instead got ${JSON.stringify(null == val ? void 0 : val.type)}`);
          }
          return validate2.oneOfNodeTypes = types2, validate2;
        }
        function assertValueType(type) {
          function validate2(node, key, val) {
            if (!(getType2(val) === type))
              throw new TypeError(`Property ${key} expected type of ${type} but got ${getType2(val)}`);
          }
          return validate2.type = type, validate2;
        }
        function chain(...fns) {
          function validate2(...args) {
            for (const fn of fns)
              fn(...args);
          }
          if (validate2.chainOf = fns, fns.length >= 2 && "type" in fns[0] && "array" === fns[0].type && !("each" in fns[1]))
            throw new Error('An assertValueType("array") validator can only be followed by an assertEach(...) validator.');
          return validate2;
        }
        exports2.NODE_PARENT_VALIDATIONS = NODE_PARENT_VALIDATIONS;
        const validTypeOpts = ["aliases", "builder", "deprecatedAlias", "fields", "inherits", "visitor", "validate"], validFieldKeys = ["default", "optional", "validate"];
        function defineType(type, opts = {}) {
          const inherits = opts.inherits && store[opts.inherits] || {};
          let fields = opts.fields;
          if (!fields && (fields = {}, inherits.fields)) {
            const keys = Object.getOwnPropertyNames(inherits.fields);
            for (const key of keys) {
              const field = inherits.fields[key], def = field.default;
              if (Array.isArray(def) ? def.length > 0 : def && "object" == typeof def)
                throw new Error("field defaults can only be primitives or empty arrays currently");
              fields[key] = { default: Array.isArray(def) ? [] : def, optional: field.optional, validate: field.validate };
            }
          }
          const visitor = opts.visitor || inherits.visitor || [], aliases = opts.aliases || inherits.aliases || [], builder = opts.builder || inherits.builder || opts.visitor || [];
          for (const k of Object.keys(opts))
            if (-1 === validTypeOpts.indexOf(k))
              throw new Error(`Unknown type option "${k}" on ${type}`);
          opts.deprecatedAlias && (DEPRECATED_KEYS[opts.deprecatedAlias] = type);
          for (const key of visitor.concat(builder))
            fields[key] = fields[key] || {};
          for (const key of Object.keys(fields)) {
            const field = fields[key];
            void 0 !== field.default && -1 === builder.indexOf(key) && (field.optional = true), void 0 === field.default ? field.default = null : field.validate || null == field.default || (field.validate = assertValueType(getType2(field.default)));
            for (const k of Object.keys(field))
              if (-1 === validFieldKeys.indexOf(k))
                throw new Error(`Unknown field key "${k}" on ${type}.${key}`);
          }
          VISITOR_KEYS[type] = opts.visitor = visitor, BUILDER_KEYS[type] = opts.builder = builder, NODE_FIELDS[type] = opts.fields = fields, ALIAS_KEYS[type] = opts.aliases = aliases, aliases.forEach((alias) => {
            FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [], FLIPPED_ALIAS_KEYS[alias].push(type);
          }), opts.validate && (NODE_PARENT_VALIDATIONS[type] = opts.validate), store[type] = opts;
        }
        const store = {};
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        var _exportNames = { react: true, assertNode: true, createTypeAnnotationBasedOnTypeof: true, createUnionTypeAnnotation: true, createFlowUnionType: true, createTSUnionType: true, cloneNode: true, clone: true, cloneDeep: true, cloneDeepWithoutLoc: true, cloneWithoutLoc: true, addComment: true, addComments: true, inheritInnerComments: true, inheritLeadingComments: true, inheritsComments: true, inheritTrailingComments: true, removeComments: true, ensureBlock: true, toBindingIdentifierName: true, toBlock: true, toComputedKey: true, toExpression: true, toIdentifier: true, toKeyAlias: true, toSequenceExpression: true, toStatement: true, valueToNode: true, appendToMemberExpression: true, inherits: true, prependToMemberExpression: true, removeProperties: true, removePropertiesDeep: true, removeTypeDuplicates: true, getBindingIdentifiers: true, getOuterBindingIdentifiers: true, traverse: true, traverseFast: true, shallowEqual: true, is: true, isBinding: true, isBlockScoped: true, isImmutable: true, isLet: true, isNode: true, isNodesEquivalent: true, isPlaceholderType: true, isReferenced: true, isScope: true, isSpecifierDefault: true, isType: true, isValidES3Identifier: true, isValidIdentifier: true, isVar: true, matchesPattern: true, validate: true, buildMatchMemberExpression: true };
        Object.defineProperty(exports2, "addComment", { enumerable: true, get: function() {
          return _addComment.default;
        } }), Object.defineProperty(exports2, "addComments", { enumerable: true, get: function() {
          return _addComments.default;
        } }), Object.defineProperty(exports2, "appendToMemberExpression", { enumerable: true, get: function() {
          return _appendToMemberExpression.default;
        } }), Object.defineProperty(exports2, "assertNode", { enumerable: true, get: function() {
          return _assertNode.default;
        } }), Object.defineProperty(exports2, "buildMatchMemberExpression", { enumerable: true, get: function() {
          return _buildMatchMemberExpression.default;
        } }), Object.defineProperty(exports2, "clone", { enumerable: true, get: function() {
          return _clone.default;
        } }), Object.defineProperty(exports2, "cloneDeep", { enumerable: true, get: function() {
          return _cloneDeep.default;
        } }), Object.defineProperty(exports2, "cloneDeepWithoutLoc", { enumerable: true, get: function() {
          return _cloneDeepWithoutLoc.default;
        } }), Object.defineProperty(exports2, "cloneNode", { enumerable: true, get: function() {
          return _cloneNode.default;
        } }), Object.defineProperty(exports2, "cloneWithoutLoc", { enumerable: true, get: function() {
          return _cloneWithoutLoc.default;
        } }), Object.defineProperty(exports2, "createFlowUnionType", { enumerable: true, get: function() {
          return _createFlowUnionType.default;
        } }), Object.defineProperty(exports2, "createTSUnionType", { enumerable: true, get: function() {
          return _createTSUnionType.default;
        } }), Object.defineProperty(exports2, "createTypeAnnotationBasedOnTypeof", { enumerable: true, get: function() {
          return _createTypeAnnotationBasedOnTypeof.default;
        } }), Object.defineProperty(exports2, "createUnionTypeAnnotation", { enumerable: true, get: function() {
          return _createFlowUnionType.default;
        } }), Object.defineProperty(exports2, "ensureBlock", { enumerable: true, get: function() {
          return _ensureBlock.default;
        } }), Object.defineProperty(exports2, "getBindingIdentifiers", { enumerable: true, get: function() {
          return _getBindingIdentifiers.default;
        } }), Object.defineProperty(exports2, "getOuterBindingIdentifiers", { enumerable: true, get: function() {
          return _getOuterBindingIdentifiers.default;
        } }), Object.defineProperty(exports2, "inheritInnerComments", { enumerable: true, get: function() {
          return _inheritInnerComments.default;
        } }), Object.defineProperty(exports2, "inheritLeadingComments", { enumerable: true, get: function() {
          return _inheritLeadingComments.default;
        } }), Object.defineProperty(exports2, "inheritTrailingComments", { enumerable: true, get: function() {
          return _inheritTrailingComments.default;
        } }), Object.defineProperty(exports2, "inherits", { enumerable: true, get: function() {
          return _inherits.default;
        } }), Object.defineProperty(exports2, "inheritsComments", { enumerable: true, get: function() {
          return _inheritsComments.default;
        } }), Object.defineProperty(exports2, "is", { enumerable: true, get: function() {
          return _is.default;
        } }), Object.defineProperty(exports2, "isBinding", { enumerable: true, get: function() {
          return _isBinding.default;
        } }), Object.defineProperty(exports2, "isBlockScoped", { enumerable: true, get: function() {
          return _isBlockScoped.default;
        } }), Object.defineProperty(exports2, "isImmutable", { enumerable: true, get: function() {
          return _isImmutable.default;
        } }), Object.defineProperty(exports2, "isLet", { enumerable: true, get: function() {
          return _isLet.default;
        } }), Object.defineProperty(exports2, "isNode", { enumerable: true, get: function() {
          return _isNode.default;
        } }), Object.defineProperty(exports2, "isNodesEquivalent", { enumerable: true, get: function() {
          return _isNodesEquivalent.default;
        } }), Object.defineProperty(exports2, "isPlaceholderType", { enumerable: true, get: function() {
          return _isPlaceholderType.default;
        } }), Object.defineProperty(exports2, "isReferenced", { enumerable: true, get: function() {
          return _isReferenced.default;
        } }), Object.defineProperty(exports2, "isScope", { enumerable: true, get: function() {
          return _isScope.default;
        } }), Object.defineProperty(exports2, "isSpecifierDefault", { enumerable: true, get: function() {
          return _isSpecifierDefault.default;
        } }), Object.defineProperty(exports2, "isType", { enumerable: true, get: function() {
          return _isType.default;
        } }), Object.defineProperty(exports2, "isValidES3Identifier", { enumerable: true, get: function() {
          return _isValidES3Identifier.default;
        } }), Object.defineProperty(exports2, "isValidIdentifier", { enumerable: true, get: function() {
          return _isValidIdentifier.default;
        } }), Object.defineProperty(exports2, "isVar", { enumerable: true, get: function() {
          return _isVar.default;
        } }), Object.defineProperty(exports2, "matchesPattern", { enumerable: true, get: function() {
          return _matchesPattern.default;
        } }), Object.defineProperty(exports2, "prependToMemberExpression", { enumerable: true, get: function() {
          return _prependToMemberExpression.default;
        } }), exports2.react = void 0, Object.defineProperty(exports2, "removeComments", { enumerable: true, get: function() {
          return _removeComments.default;
        } }), Object.defineProperty(exports2, "removeProperties", { enumerable: true, get: function() {
          return _removeProperties.default;
        } }), Object.defineProperty(exports2, "removePropertiesDeep", { enumerable: true, get: function() {
          return _removePropertiesDeep.default;
        } }), Object.defineProperty(exports2, "removeTypeDuplicates", { enumerable: true, get: function() {
          return _removeTypeDuplicates.default;
        } }), Object.defineProperty(exports2, "shallowEqual", { enumerable: true, get: function() {
          return _shallowEqual.default;
        } }), Object.defineProperty(exports2, "toBindingIdentifierName", { enumerable: true, get: function() {
          return _toBindingIdentifierName.default;
        } }), Object.defineProperty(exports2, "toBlock", { enumerable: true, get: function() {
          return _toBlock.default;
        } }), Object.defineProperty(exports2, "toComputedKey", { enumerable: true, get: function() {
          return _toComputedKey.default;
        } }), Object.defineProperty(exports2, "toExpression", { enumerable: true, get: function() {
          return _toExpression.default;
        } }), Object.defineProperty(exports2, "toIdentifier", { enumerable: true, get: function() {
          return _toIdentifier.default;
        } }), Object.defineProperty(exports2, "toKeyAlias", { enumerable: true, get: function() {
          return _toKeyAlias.default;
        } }), Object.defineProperty(exports2, "toSequenceExpression", { enumerable: true, get: function() {
          return _toSequenceExpression.default;
        } }), Object.defineProperty(exports2, "toStatement", { enumerable: true, get: function() {
          return _toStatement.default;
        } }), Object.defineProperty(exports2, "traverse", { enumerable: true, get: function() {
          return _traverse.default;
        } }), Object.defineProperty(exports2, "traverseFast", { enumerable: true, get: function() {
          return _traverseFast.default;
        } }), Object.defineProperty(exports2, "validate", { enumerable: true, get: function() {
          return _validate.default;
        } }), Object.defineProperty(exports2, "valueToNode", { enumerable: true, get: function() {
          return _valueToNode.default;
        } });
        var _isReactComponent = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/react/isReactComponent.js"), _isCompatTag = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/react/isCompatTag.js"), _buildChildren = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/react/buildChildren.js"), _assertNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/asserts/assertNode.js"), _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/asserts/generated/index.js");
        Object.keys(_generated).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _generated[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _generated[key];
          } }));
        });
        var _createTypeAnnotationBasedOnTypeof = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/flow/createTypeAnnotationBasedOnTypeof.js"), _createFlowUnionType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/flow/createFlowUnionType.js"), _createTSUnionType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/typescript/createTSUnionType.js"), _generated2 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/index.js");
        Object.keys(_generated2).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _generated2[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _generated2[key];
          } }));
        });
        var _uppercase = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/uppercase.js");
        Object.keys(_uppercase).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _uppercase[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _uppercase[key];
          } }));
        });
        var _cloneNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/cloneNode.js"), _clone = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/clone.js"), _cloneDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/cloneDeep.js"), _cloneDeepWithoutLoc = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/cloneDeepWithoutLoc.js"), _cloneWithoutLoc = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/clone/cloneWithoutLoc.js"), _addComment = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/addComment.js"), _addComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/addComments.js"), _inheritInnerComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/inheritInnerComments.js"), _inheritLeadingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/inheritLeadingComments.js"), _inheritsComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/inheritsComments.js"), _inheritTrailingComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/inheritTrailingComments.js"), _removeComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/removeComments.js"), _generated3 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/constants/generated/index.js");
        Object.keys(_generated3).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _generated3[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _generated3[key];
          } }));
        });
        var _constants = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/constants/index.js");
        Object.keys(_constants).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _constants[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _constants[key];
          } }));
        });
        var _ensureBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/ensureBlock.js"), _toBindingIdentifierName = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toBindingIdentifierName.js"), _toBlock = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toBlock.js"), _toComputedKey = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toComputedKey.js"), _toExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toExpression.js"), _toIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toIdentifier.js"), _toKeyAlias = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toKeyAlias.js"), _toSequenceExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toSequenceExpression.js"), _toStatement = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/toStatement.js"), _valueToNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/converters/valueToNode.js"), _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/index.js");
        Object.keys(_definitions).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _definitions[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _definitions[key];
          } }));
        });
        var _appendToMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js"), _inherits = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/inherits.js"), _prependToMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js"), _removeProperties = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/removeProperties.js"), _removePropertiesDeep = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js"), _removeTypeDuplicates = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js"), _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _getOuterBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js"), _traverse = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/traverse/traverse.js");
        Object.keys(_traverse).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _traverse[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _traverse[key];
          } }));
        });
        var _traverseFast = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/traverse/traverseFast.js"), _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/utils/shallowEqual.js"), _is = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/is.js"), _isBinding = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isBinding.js"), _isBlockScoped = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isBlockScoped.js"), _isImmutable = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isImmutable.js"), _isLet = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isLet.js"), _isNode = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isNode.js"), _isNodesEquivalent = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isNodesEquivalent.js"), _isPlaceholderType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isPlaceholderType.js"), _isReferenced = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isReferenced.js"), _isScope = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isScope.js"), _isSpecifierDefault = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isSpecifierDefault.js"), _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isType.js"), _isValidES3Identifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isValidES3Identifier.js"), _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isValidIdentifier.js"), _isVar = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isVar.js"), _matchesPattern = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/matchesPattern.js"), _validate = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/validate.js"), _buildMatchMemberExpression = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js"), _generated4 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js");
        Object.keys(_generated4).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _generated4[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _generated4[key];
          } }));
        });
        var _generated5 = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/ast-types/generated/index.js");
        Object.keys(_generated5).forEach(function(key) {
          "default" !== key && "__esModule" !== key && (Object.prototype.hasOwnProperty.call(_exportNames, key) || key in exports2 && exports2[key] === _generated5[key] || Object.defineProperty(exports2, key, { enumerable: true, get: function() {
            return _generated5[key];
          } }));
        });
        const react = { isReactComponent: _isReactComponent.default, isCompatTag: _isCompatTag.default, buildChildren: _buildChildren.default };
        exports2.react = react;
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/appendToMemberExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(member, append, computed = false) {
          return member.object = (0, _generated.memberExpression)(member.object, member.property, member.computed), member.property = append, member.computed = !!computed, member;
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/flow/removeTypeDuplicates.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function removeTypeDuplicates(nodes) {
          const generics = /* @__PURE__ */ new Map(), bases = /* @__PURE__ */ new Map(), typeGroups = /* @__PURE__ */ new Set(), types2 = [];
          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (node && !(types2.indexOf(node) >= 0)) {
              if ((0, _generated.isAnyTypeAnnotation)(node))
                return [node];
              if ((0, _generated.isFlowBaseAnnotation)(node))
                bases.set(node.type, node);
              else if ((0, _generated.isUnionTypeAnnotation)(node))
                typeGroups.has(node.types) || (nodes = nodes.concat(node.types), typeGroups.add(node.types));
              else if ((0, _generated.isGenericTypeAnnotation)(node)) {
                const name = getQualifiedName(node.id);
                if (generics.has(name)) {
                  let existing = generics.get(name);
                  existing.typeParameters ? node.typeParameters && (existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params))) : existing = node.typeParameters;
                } else
                  generics.set(name, node);
              } else
                types2.push(node);
            }
          }
          for (const [, baseType] of bases)
            types2.push(baseType);
          for (const [, genericName] of generics)
            types2.push(genericName);
          return types2;
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js");
        function getQualifiedName(node) {
          return (0, _generated.isIdentifier)(node) ? node.name : `${node.id.name}.${getQualifiedName(node.qualification)}`;
        }
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/inherits.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, parent) {
          if (!child || !parent)
            return child;
          for (const key of _constants.INHERIT_KEYS.optional)
            null == child[key] && (child[key] = parent[key]);
          for (const key of Object.keys(parent))
            "_" === key[0] && "__clone" !== key && (child[key] = parent[key]);
          for (const key of _constants.INHERIT_KEYS.force)
            child[key] = parent[key];
          return (0, _inheritsComments.default)(child, parent), child;
        };
        var _constants = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/constants/index.js"), _inheritsComments = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/comments/inheritsComments.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/prependToMemberExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(member, prepend) {
          if ((0, _.isSuper)(member.object))
            throw new Error("Cannot prepend node to super property access (`super.foo`).");
          return member.object = (0, _generated.memberExpression)(prepend, member.object), member;
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/index.js"), _ = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/removeProperties.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, opts = {}) {
          const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;
          for (const key of map)
            null != node[key] && (node[key] = void 0);
          for (const key of Object.keys(node))
            "_" === key[0] && null != node[key] && (node[key] = void 0);
          const symbols = Object.getOwnPropertySymbols(node);
          for (const sym of symbols)
            node[sym] = null;
        };
        var _constants = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/constants/index.js");
        const CLEAR_KEYS = ["tokens", "start", "end", "loc", "raw", "rawValue"], CLEAR_KEYS_PLUS_COMMENTS = [..._constants.COMMENT_KEYS, "comments", ...CLEAR_KEYS];
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/removePropertiesDeep.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(tree, opts) {
          return (0, _traverseFast.default)(tree, _removeProperties.default, opts), tree;
        };
        var _traverseFast = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/traverse/traverseFast.js"), _removeProperties = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/removeProperties.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/modifications/typescript/removeTypeDuplicates.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function removeTypeDuplicates(nodes) {
          const generics = /* @__PURE__ */ new Map(), bases = /* @__PURE__ */ new Map(), typeGroups = /* @__PURE__ */ new Set(), types2 = [];
          for (let i = 0; i < nodes.length; i++) {
            const node = nodes[i];
            if (node && !(types2.indexOf(node) >= 0)) {
              if ((0, _generated.isTSAnyKeyword)(node))
                return [node];
              if ((0, _generated.isTSBaseType)(node))
                bases.set(node.type, node);
              else if ((0, _generated.isTSUnionType)(node))
                typeGroups.has(node.types) || (nodes.push(...node.types), typeGroups.add(node.types));
              else if ((0, _generated.isTSTypeReference)(node) && node.typeParameters) {
                const name = getQualifiedName(node.typeName);
                if (generics.has(name)) {
                  let existing = generics.get(name);
                  existing.typeParameters ? node.typeParameters && (existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params))) : existing = node.typeParameters;
                } else
                  generics.set(name, node);
              } else
                types2.push(node);
            }
          }
          for (const [, baseType] of bases)
            types2.push(baseType);
          for (const [, genericName] of generics)
            types2.push(genericName);
          return types2;
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js");
        function getQualifiedName(node) {
          return (0, _generated.isIdentifier)(node) ? node.name : `${node.right.name}.${getQualifiedName(node.left)}`;
        }
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = getBindingIdentifiers;
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js");
        function getBindingIdentifiers(node, duplicates, outerOnly) {
          const search = [].concat(node), ids = /* @__PURE__ */ Object.create(null);
          for (; search.length; ) {
            const id = search.shift();
            if (!id)
              continue;
            const keys = getBindingIdentifiers.keys[id.type];
            if ((0, _generated.isIdentifier)(id))
              if (duplicates) {
                (ids[id.name] = ids[id.name] || []).push(id);
              } else
                ids[id.name] = id;
            else if (!(0, _generated.isExportDeclaration)(id) || (0, _generated.isExportAllDeclaration)(id)) {
              if (outerOnly) {
                if ((0, _generated.isFunctionDeclaration)(id)) {
                  search.push(id.id);
                  continue;
                }
                if ((0, _generated.isFunctionExpression)(id))
                  continue;
              }
              if (keys)
                for (let i = 0; i < keys.length; i++) {
                  const nodes = id[keys[i]];
                  nodes && (Array.isArray(nodes) ? search.push(...nodes) : search.push(nodes));
                }
            } else
              (0, _generated.isDeclaration)(id.declaration) && search.push(id.declaration);
          }
          return ids;
        }
        getBindingIdentifiers.keys = { DeclareClass: ["id"], DeclareFunction: ["id"], DeclareModule: ["id"], DeclareVariable: ["id"], DeclareInterface: ["id"], DeclareTypeAlias: ["id"], DeclareOpaqueType: ["id"], InterfaceDeclaration: ["id"], TypeAlias: ["id"], OpaqueType: ["id"], CatchClause: ["param"], LabeledStatement: ["label"], UnaryExpression: ["argument"], AssignmentExpression: ["left"], ImportSpecifier: ["local"], ImportNamespaceSpecifier: ["local"], ImportDefaultSpecifier: ["local"], ImportDeclaration: ["specifiers"], ExportSpecifier: ["exported"], ExportNamespaceSpecifier: ["exported"], ExportDefaultSpecifier: ["exported"], FunctionDeclaration: ["id", "params"], FunctionExpression: ["id", "params"], ArrowFunctionExpression: ["params"], ObjectMethod: ["params"], ClassMethod: ["params"], ClassPrivateMethod: ["params"], ForInStatement: ["left"], ForOfStatement: ["left"], ClassDeclaration: ["id"], ClassExpression: ["id"], RestElement: ["argument"], UpdateExpression: ["argument"], ObjectProperty: ["value"], AssignmentPattern: ["left"], ArrayPattern: ["elements"], ObjectPattern: ["properties"], VariableDeclaration: ["declarations"], VariableDeclarator: ["id"] };
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/retrievers/getOuterBindingIdentifiers.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js"), _default = function(node, duplicates) {
          return (0, _getBindingIdentifiers.default)(node, duplicates, true);
        };
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/traverse/traverse.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, handlers, state) {
          "function" == typeof handlers && (handlers = { enter: handlers });
          const { enter, exit } = handlers;
          traverseSimpleImpl(node, enter, exit, state, []);
        };
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/index.js");
        function traverseSimpleImpl(node, enter, exit, state, ancestors) {
          const keys = _definitions.VISITOR_KEYS[node.type];
          if (keys) {
            enter && enter(node, ancestors, state);
            for (const key of keys) {
              const subNode = node[key];
              if (Array.isArray(subNode))
                for (let i = 0; i < subNode.length; i++) {
                  const child = subNode[i];
                  child && (ancestors.push({ node, key, index: i }), traverseSimpleImpl(child, enter, exit, state, ancestors), ancestors.pop());
                }
              else
                subNode && (ancestors.push({ node, key }), traverseSimpleImpl(subNode, enter, exit, state, ancestors), ancestors.pop());
            }
            exit && exit(node, ancestors, state);
          }
        }
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/traverse/traverseFast.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function traverseFast(node, enter, opts) {
          if (!node)
            return;
          const keys = _definitions.VISITOR_KEYS[node.type];
          if (!keys)
            return;
          enter(node, opts = opts || {});
          for (const key of keys) {
            const subNode = node[key];
            if (Array.isArray(subNode))
              for (const node2 of subNode)
                traverseFast(node2, enter, opts);
            else
              traverseFast(subNode, enter, opts);
          }
        };
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/utils/inherit.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(key, child, parent) {
          child && parent && (child[key] = Array.from(new Set([].concat(child[key], parent[key]).filter(Boolean))));
        };
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/utils/react/cleanJSXElementLiteralChild.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(child, args) {
          const lines = child.value.split(/\r\n|\n|\r/);
          let lastNonEmptyLine = 0;
          for (let i = 0; i < lines.length; i++)
            lines[i].match(/[^ \t]/) && (lastNonEmptyLine = i);
          let str = "";
          for (let i = 0; i < lines.length; i++) {
            const line = lines[i], isFirstLine = 0 === i, isLastLine = i === lines.length - 1, isLastNonEmptyLine = i === lastNonEmptyLine;
            let trimmedLine = line.replace(/\t/g, " ");
            isFirstLine || (trimmedLine = trimmedLine.replace(/^[ ]+/, "")), isLastLine || (trimmedLine = trimmedLine.replace(/[ ]+$/, "")), trimmedLine && (isLastNonEmptyLine || (trimmedLine += " "), str += trimmedLine);
          }
          str && args.push((0, _generated.stringLiteral)(str));
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/builders/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/utils/shallowEqual.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(actual, expected) {
          const keys = Object.keys(expected);
          for (const key of keys)
            if (actual[key] !== expected[key])
              return false;
          return true;
        };
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(match, allowPartial) {
          const parts = match.split(".");
          return (member) => (0, _matchesPattern.default)(member, parts, allowPartial);
        };
        var _matchesPattern = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/matchesPattern.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.isAccessor = function(node, opts) {
          if (!node)
            return false;
          if ("ClassAccessorProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isAnyTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("AnyTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isArgumentPlaceholder = function(node, opts) {
          if (!node)
            return false;
          if ("ArgumentPlaceholder" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isArrayExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ArrayExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isArrayPattern = function(node, opts) {
          if (!node)
            return false;
          if ("ArrayPattern" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isArrayTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("ArrayTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isArrowFunctionExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ArrowFunctionExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isAssignmentExpression = function(node, opts) {
          if (!node)
            return false;
          if ("AssignmentExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isAssignmentPattern = function(node, opts) {
          if (!node)
            return false;
          if ("AssignmentPattern" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isAwaitExpression = function(node, opts) {
          if (!node)
            return false;
          if ("AwaitExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBigIntLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("BigIntLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBinary = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("BinaryExpression" === nodeType || "LogicalExpression" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBinaryExpression = function(node, opts) {
          if (!node)
            return false;
          if ("BinaryExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBindExpression = function(node, opts) {
          if (!node)
            return false;
          if ("BindExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBlock = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("BlockStatement" === nodeType || "Program" === nodeType || "TSModuleBlock" === nodeType || "Placeholder" === nodeType && "BlockStatement" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBlockParent = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("BlockStatement" === nodeType || "CatchClause" === nodeType || "DoWhileStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "Program" === nodeType || "ObjectMethod" === nodeType || "SwitchStatement" === nodeType || "WhileStatement" === nodeType || "ArrowFunctionExpression" === nodeType || "ForOfStatement" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType || "StaticBlock" === nodeType || "TSModuleBlock" === nodeType || "Placeholder" === nodeType && "BlockStatement" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBlockStatement = function(node, opts) {
          if (!node)
            return false;
          if ("BlockStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBooleanLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("BooleanLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBooleanLiteralTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("BooleanLiteralTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBooleanTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("BooleanTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isBreakStatement = function(node, opts) {
          if (!node)
            return false;
          if ("BreakStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isCallExpression = function(node, opts) {
          if (!node)
            return false;
          if ("CallExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isCatchClause = function(node, opts) {
          if (!node)
            return false;
          if ("CatchClause" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClass = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ClassExpression" === nodeType || "ClassDeclaration" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassAccessorProperty = function(node, opts) {
          if (!node)
            return false;
          if ("ClassAccessorProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassBody = function(node, opts) {
          if (!node)
            return false;
          if ("ClassBody" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("ClassDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ClassExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassImplements = function(node, opts) {
          if (!node)
            return false;
          if ("ClassImplements" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassMethod = function(node, opts) {
          if (!node)
            return false;
          if ("ClassMethod" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassPrivateMethod = function(node, opts) {
          if (!node)
            return false;
          if ("ClassPrivateMethod" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassPrivateProperty = function(node, opts) {
          if (!node)
            return false;
          if ("ClassPrivateProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isClassProperty = function(node, opts) {
          if (!node)
            return false;
          if ("ClassProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isCompletionStatement = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("BreakStatement" === nodeType || "ContinueStatement" === nodeType || "ReturnStatement" === nodeType || "ThrowStatement" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isConditional = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ConditionalExpression" === nodeType || "IfStatement" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isConditionalExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ConditionalExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isContinueStatement = function(node, opts) {
          if (!node)
            return false;
          if ("ContinueStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDebuggerStatement = function(node, opts) {
          if (!node)
            return false;
          if ("DebuggerStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDecimalLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("DecimalLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclaration = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("FunctionDeclaration" === nodeType || "VariableDeclaration" === nodeType || "ClassDeclaration" === nodeType || "ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType || "ImportDeclaration" === nodeType || "DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "InterfaceDeclaration" === nodeType || "OpaqueType" === nodeType || "TypeAlias" === nodeType || "EnumDeclaration" === nodeType || "TSDeclareFunction" === nodeType || "TSInterfaceDeclaration" === nodeType || "TSTypeAliasDeclaration" === nodeType || "TSEnumDeclaration" === nodeType || "TSModuleDeclaration" === nodeType || "Placeholder" === nodeType && "Declaration" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareClass = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareClass" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareExportAllDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareExportAllDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareExportDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareExportDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareFunction = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareFunction" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareInterface = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareInterface" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareModule = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareModule" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareModuleExports = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareModuleExports" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareOpaqueType = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareOpaqueType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareTypeAlias = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareTypeAlias" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclareVariable = function(node, opts) {
          if (!node)
            return false;
          if ("DeclareVariable" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDeclaredPredicate = function(node, opts) {
          if (!node)
            return false;
          if ("DeclaredPredicate" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDecorator = function(node, opts) {
          if (!node)
            return false;
          if ("Decorator" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDirective = function(node, opts) {
          if (!node)
            return false;
          if ("Directive" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDirectiveLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("DirectiveLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDoExpression = function(node, opts) {
          if (!node)
            return false;
          if ("DoExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isDoWhileStatement = function(node, opts) {
          if (!node)
            return false;
          if ("DoWhileStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEmptyStatement = function(node, opts) {
          if (!node)
            return false;
          if ("EmptyStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEmptyTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("EmptyTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumBody = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("EnumBooleanBody" === nodeType || "EnumNumberBody" === nodeType || "EnumStringBody" === nodeType || "EnumSymbolBody" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumBooleanBody = function(node, opts) {
          if (!node)
            return false;
          if ("EnumBooleanBody" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumBooleanMember = function(node, opts) {
          if (!node)
            return false;
          if ("EnumBooleanMember" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("EnumDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumDefaultedMember = function(node, opts) {
          if (!node)
            return false;
          if ("EnumDefaultedMember" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumMember = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("EnumBooleanMember" === nodeType || "EnumNumberMember" === nodeType || "EnumStringMember" === nodeType || "EnumDefaultedMember" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumNumberBody = function(node, opts) {
          if (!node)
            return false;
          if ("EnumNumberBody" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumNumberMember = function(node, opts) {
          if (!node)
            return false;
          if ("EnumNumberMember" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumStringBody = function(node, opts) {
          if (!node)
            return false;
          if ("EnumStringBody" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumStringMember = function(node, opts) {
          if (!node)
            return false;
          if ("EnumStringMember" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isEnumSymbolBody = function(node, opts) {
          if (!node)
            return false;
          if ("EnumSymbolBody" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExistsTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("ExistsTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExportAllDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("ExportAllDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExportDeclaration = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExportDefaultDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("ExportDefaultDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExportDefaultSpecifier = function(node, opts) {
          if (!node)
            return false;
          if ("ExportDefaultSpecifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExportNamedDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("ExportNamedDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExportNamespaceSpecifier = function(node, opts) {
          if (!node)
            return false;
          if ("ExportNamespaceSpecifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExportSpecifier = function(node, opts) {
          if (!node)
            return false;
          if ("ExportSpecifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExpression = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ArrayExpression" === nodeType || "AssignmentExpression" === nodeType || "BinaryExpression" === nodeType || "CallExpression" === nodeType || "ConditionalExpression" === nodeType || "FunctionExpression" === nodeType || "Identifier" === nodeType || "StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "RegExpLiteral" === nodeType || "LogicalExpression" === nodeType || "MemberExpression" === nodeType || "NewExpression" === nodeType || "ObjectExpression" === nodeType || "SequenceExpression" === nodeType || "ParenthesizedExpression" === nodeType || "ThisExpression" === nodeType || "UnaryExpression" === nodeType || "UpdateExpression" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassExpression" === nodeType || "MetaProperty" === nodeType || "Super" === nodeType || "TaggedTemplateExpression" === nodeType || "TemplateLiteral" === nodeType || "YieldExpression" === nodeType || "AwaitExpression" === nodeType || "Import" === nodeType || "BigIntLiteral" === nodeType || "OptionalMemberExpression" === nodeType || "OptionalCallExpression" === nodeType || "TypeCastExpression" === nodeType || "JSXElement" === nodeType || "JSXFragment" === nodeType || "BindExpression" === nodeType || "DoExpression" === nodeType || "RecordExpression" === nodeType || "TupleExpression" === nodeType || "DecimalLiteral" === nodeType || "ModuleExpression" === nodeType || "TopicReference" === nodeType || "PipelineTopicExpression" === nodeType || "PipelineBareFunction" === nodeType || "PipelinePrimaryTopicReference" === nodeType || "TSInstantiationExpression" === nodeType || "TSAsExpression" === nodeType || "TSTypeAssertion" === nodeType || "TSNonNullExpression" === nodeType || "Placeholder" === nodeType && ("Expression" === node.expectedNode || "Identifier" === node.expectedNode || "StringLiteral" === node.expectedNode))
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExpressionStatement = function(node, opts) {
          if (!node)
            return false;
          if ("ExpressionStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isExpressionWrapper = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ExpressionStatement" === nodeType || "ParenthesizedExpression" === nodeType || "TypeCastExpression" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFile = function(node, opts) {
          if (!node)
            return false;
          if ("File" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFlow = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("AnyTypeAnnotation" === nodeType || "ArrayTypeAnnotation" === nodeType || "BooleanTypeAnnotation" === nodeType || "BooleanLiteralTypeAnnotation" === nodeType || "NullLiteralTypeAnnotation" === nodeType || "ClassImplements" === nodeType || "DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "DeclaredPredicate" === nodeType || "ExistsTypeAnnotation" === nodeType || "FunctionTypeAnnotation" === nodeType || "FunctionTypeParam" === nodeType || "GenericTypeAnnotation" === nodeType || "InferredPredicate" === nodeType || "InterfaceExtends" === nodeType || "InterfaceDeclaration" === nodeType || "InterfaceTypeAnnotation" === nodeType || "IntersectionTypeAnnotation" === nodeType || "MixedTypeAnnotation" === nodeType || "EmptyTypeAnnotation" === nodeType || "NullableTypeAnnotation" === nodeType || "NumberLiteralTypeAnnotation" === nodeType || "NumberTypeAnnotation" === nodeType || "ObjectTypeAnnotation" === nodeType || "ObjectTypeInternalSlot" === nodeType || "ObjectTypeCallProperty" === nodeType || "ObjectTypeIndexer" === nodeType || "ObjectTypeProperty" === nodeType || "ObjectTypeSpreadProperty" === nodeType || "OpaqueType" === nodeType || "QualifiedTypeIdentifier" === nodeType || "StringLiteralTypeAnnotation" === nodeType || "StringTypeAnnotation" === nodeType || "SymbolTypeAnnotation" === nodeType || "ThisTypeAnnotation" === nodeType || "TupleTypeAnnotation" === nodeType || "TypeofTypeAnnotation" === nodeType || "TypeAlias" === nodeType || "TypeAnnotation" === nodeType || "TypeCastExpression" === nodeType || "TypeParameter" === nodeType || "TypeParameterDeclaration" === nodeType || "TypeParameterInstantiation" === nodeType || "UnionTypeAnnotation" === nodeType || "Variance" === nodeType || "VoidTypeAnnotation" === nodeType || "EnumDeclaration" === nodeType || "EnumBooleanBody" === nodeType || "EnumNumberBody" === nodeType || "EnumStringBody" === nodeType || "EnumSymbolBody" === nodeType || "EnumBooleanMember" === nodeType || "EnumNumberMember" === nodeType || "EnumStringMember" === nodeType || "EnumDefaultedMember" === nodeType || "IndexedAccessType" === nodeType || "OptionalIndexedAccessType" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFlowBaseAnnotation = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("AnyTypeAnnotation" === nodeType || "BooleanTypeAnnotation" === nodeType || "NullLiteralTypeAnnotation" === nodeType || "MixedTypeAnnotation" === nodeType || "EmptyTypeAnnotation" === nodeType || "NumberTypeAnnotation" === nodeType || "StringTypeAnnotation" === nodeType || "SymbolTypeAnnotation" === nodeType || "ThisTypeAnnotation" === nodeType || "VoidTypeAnnotation" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFlowDeclaration = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "InterfaceDeclaration" === nodeType || "OpaqueType" === nodeType || "TypeAlias" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFlowPredicate = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("DeclaredPredicate" === nodeType || "InferredPredicate" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFlowType = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("AnyTypeAnnotation" === nodeType || "ArrayTypeAnnotation" === nodeType || "BooleanTypeAnnotation" === nodeType || "BooleanLiteralTypeAnnotation" === nodeType || "NullLiteralTypeAnnotation" === nodeType || "ExistsTypeAnnotation" === nodeType || "FunctionTypeAnnotation" === nodeType || "GenericTypeAnnotation" === nodeType || "InterfaceTypeAnnotation" === nodeType || "IntersectionTypeAnnotation" === nodeType || "MixedTypeAnnotation" === nodeType || "EmptyTypeAnnotation" === nodeType || "NullableTypeAnnotation" === nodeType || "NumberLiteralTypeAnnotation" === nodeType || "NumberTypeAnnotation" === nodeType || "ObjectTypeAnnotation" === nodeType || "StringLiteralTypeAnnotation" === nodeType || "StringTypeAnnotation" === nodeType || "SymbolTypeAnnotation" === nodeType || "ThisTypeAnnotation" === nodeType || "TupleTypeAnnotation" === nodeType || "TypeofTypeAnnotation" === nodeType || "UnionTypeAnnotation" === nodeType || "VoidTypeAnnotation" === nodeType || "IndexedAccessType" === nodeType || "OptionalIndexedAccessType" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFor = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ForInStatement" === nodeType || "ForStatement" === nodeType || "ForOfStatement" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isForInStatement = function(node, opts) {
          if (!node)
            return false;
          if ("ForInStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isForOfStatement = function(node, opts) {
          if (!node)
            return false;
          if ("ForOfStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isForStatement = function(node, opts) {
          if (!node)
            return false;
          if ("ForStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isForXStatement = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ForInStatement" === nodeType || "ForOfStatement" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFunction = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "ObjectMethod" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFunctionDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("FunctionDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFunctionExpression = function(node, opts) {
          if (!node)
            return false;
          if ("FunctionExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFunctionParent = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "ObjectMethod" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType || "StaticBlock" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFunctionTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("FunctionTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isFunctionTypeParam = function(node, opts) {
          if (!node)
            return false;
          if ("FunctionTypeParam" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isGenericTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("GenericTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isIdentifier = function(node, opts) {
          if (!node)
            return false;
          if ("Identifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isIfStatement = function(node, opts) {
          if (!node)
            return false;
          if ("IfStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isImmutable = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "BigIntLiteral" === nodeType || "JSXAttribute" === nodeType || "JSXClosingElement" === nodeType || "JSXElement" === nodeType || "JSXExpressionContainer" === nodeType || "JSXSpreadChild" === nodeType || "JSXOpeningElement" === nodeType || "JSXText" === nodeType || "JSXFragment" === nodeType || "JSXOpeningFragment" === nodeType || "JSXClosingFragment" === nodeType || "DecimalLiteral" === nodeType || "Placeholder" === nodeType && "StringLiteral" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isImport = function(node, opts) {
          if (!node)
            return false;
          if ("Import" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isImportAttribute = function(node, opts) {
          if (!node)
            return false;
          if ("ImportAttribute" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isImportDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("ImportDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isImportDefaultSpecifier = function(node, opts) {
          if (!node)
            return false;
          if ("ImportDefaultSpecifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isImportNamespaceSpecifier = function(node, opts) {
          if (!node)
            return false;
          if ("ImportNamespaceSpecifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isImportSpecifier = function(node, opts) {
          if (!node)
            return false;
          if ("ImportSpecifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isIndexedAccessType = function(node, opts) {
          if (!node)
            return false;
          if ("IndexedAccessType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isInferredPredicate = function(node, opts) {
          if (!node)
            return false;
          if ("InferredPredicate" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isInterfaceDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("InterfaceDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isInterfaceExtends = function(node, opts) {
          if (!node)
            return false;
          if ("InterfaceExtends" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isInterfaceTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("InterfaceTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isInterpreterDirective = function(node, opts) {
          if (!node)
            return false;
          if ("InterpreterDirective" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isIntersectionTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("IntersectionTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSX = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("JSXAttribute" === nodeType || "JSXClosingElement" === nodeType || "JSXElement" === nodeType || "JSXEmptyExpression" === nodeType || "JSXExpressionContainer" === nodeType || "JSXSpreadChild" === nodeType || "JSXIdentifier" === nodeType || "JSXMemberExpression" === nodeType || "JSXNamespacedName" === nodeType || "JSXOpeningElement" === nodeType || "JSXSpreadAttribute" === nodeType || "JSXText" === nodeType || "JSXFragment" === nodeType || "JSXOpeningFragment" === nodeType || "JSXClosingFragment" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXAttribute = function(node, opts) {
          if (!node)
            return false;
          if ("JSXAttribute" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXClosingElement = function(node, opts) {
          if (!node)
            return false;
          if ("JSXClosingElement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXClosingFragment = function(node, opts) {
          if (!node)
            return false;
          if ("JSXClosingFragment" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXElement = function(node, opts) {
          if (!node)
            return false;
          if ("JSXElement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXEmptyExpression = function(node, opts) {
          if (!node)
            return false;
          if ("JSXEmptyExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXExpressionContainer = function(node, opts) {
          if (!node)
            return false;
          if ("JSXExpressionContainer" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXFragment = function(node, opts) {
          if (!node)
            return false;
          if ("JSXFragment" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXIdentifier = function(node, opts) {
          if (!node)
            return false;
          if ("JSXIdentifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXMemberExpression = function(node, opts) {
          if (!node)
            return false;
          if ("JSXMemberExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXNamespacedName = function(node, opts) {
          if (!node)
            return false;
          if ("JSXNamespacedName" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXOpeningElement = function(node, opts) {
          if (!node)
            return false;
          if ("JSXOpeningElement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXOpeningFragment = function(node, opts) {
          if (!node)
            return false;
          if ("JSXOpeningFragment" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXSpreadAttribute = function(node, opts) {
          if (!node)
            return false;
          if ("JSXSpreadAttribute" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXSpreadChild = function(node, opts) {
          if (!node)
            return false;
          if ("JSXSpreadChild" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isJSXText = function(node, opts) {
          if (!node)
            return false;
          if ("JSXText" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isLVal = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("Identifier" === nodeType || "MemberExpression" === nodeType || "RestElement" === nodeType || "AssignmentPattern" === nodeType || "ArrayPattern" === nodeType || "ObjectPattern" === nodeType || "TSParameterProperty" === nodeType || "TSAsExpression" === nodeType || "TSTypeAssertion" === nodeType || "TSNonNullExpression" === nodeType || "Placeholder" === nodeType && ("Pattern" === node.expectedNode || "Identifier" === node.expectedNode))
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isLabeledStatement = function(node, opts) {
          if (!node)
            return false;
          if ("LabeledStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isLiteral = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "RegExpLiteral" === nodeType || "TemplateLiteral" === nodeType || "BigIntLiteral" === nodeType || "DecimalLiteral" === nodeType || "Placeholder" === nodeType && "StringLiteral" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isLogicalExpression = function(node, opts) {
          if (!node)
            return false;
          if ("LogicalExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isLoop = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("DoWhileStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "WhileStatement" === nodeType || "ForOfStatement" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isMemberExpression = function(node, opts) {
          if (!node)
            return false;
          if ("MemberExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isMetaProperty = function(node, opts) {
          if (!node)
            return false;
          if ("MetaProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isMethod = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ObjectMethod" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isMiscellaneous = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("Noop" === nodeType || "Placeholder" === nodeType || "V8IntrinsicIdentifier" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isMixedTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("MixedTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isModuleDeclaration = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType || "ImportDeclaration" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isModuleExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ModuleExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isModuleSpecifier = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ExportSpecifier" === nodeType || "ImportDefaultSpecifier" === nodeType || "ImportNamespaceSpecifier" === nodeType || "ImportSpecifier" === nodeType || "ExportNamespaceSpecifier" === nodeType || "ExportDefaultSpecifier" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNewExpression = function(node, opts) {
          if (!node)
            return false;
          if ("NewExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNoop = function(node, opts) {
          if (!node)
            return false;
          if ("Noop" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNullLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("NullLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNullLiteralTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("NullLiteralTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNullableTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("NullableTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNumberLiteral = function(node, opts) {
          if (console.trace("The node type NumberLiteral has been renamed to NumericLiteral"), !node)
            return false;
          if ("NumberLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNumberLiteralTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("NumberLiteralTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNumberTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("NumberTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isNumericLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("NumericLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectMember = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ObjectMethod" === nodeType || "ObjectProperty" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectMethod = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectMethod" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectPattern = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectPattern" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectProperty = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectTypeCallProperty = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectTypeCallProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectTypeIndexer = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectTypeIndexer" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectTypeInternalSlot = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectTypeInternalSlot" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectTypeProperty = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectTypeProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isObjectTypeSpreadProperty = function(node, opts) {
          if (!node)
            return false;
          if ("ObjectTypeSpreadProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isOpaqueType = function(node, opts) {
          if (!node)
            return false;
          if ("OpaqueType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isOptionalCallExpression = function(node, opts) {
          if (!node)
            return false;
          if ("OptionalCallExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isOptionalIndexedAccessType = function(node, opts) {
          if (!node)
            return false;
          if ("OptionalIndexedAccessType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isOptionalMemberExpression = function(node, opts) {
          if (!node)
            return false;
          if ("OptionalMemberExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isParenthesizedExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ParenthesizedExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPattern = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("AssignmentPattern" === nodeType || "ArrayPattern" === nodeType || "ObjectPattern" === nodeType || "Placeholder" === nodeType && "Pattern" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPatternLike = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("Identifier" === nodeType || "RestElement" === nodeType || "AssignmentPattern" === nodeType || "ArrayPattern" === nodeType || "ObjectPattern" === nodeType || "TSAsExpression" === nodeType || "TSTypeAssertion" === nodeType || "TSNonNullExpression" === nodeType || "Placeholder" === nodeType && ("Pattern" === node.expectedNode || "Identifier" === node.expectedNode))
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPipelineBareFunction = function(node, opts) {
          if (!node)
            return false;
          if ("PipelineBareFunction" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPipelinePrimaryTopicReference = function(node, opts) {
          if (!node)
            return false;
          if ("PipelinePrimaryTopicReference" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPipelineTopicExpression = function(node, opts) {
          if (!node)
            return false;
          if ("PipelineTopicExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPlaceholder = function(node, opts) {
          if (!node)
            return false;
          if ("Placeholder" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPrivate = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ClassPrivateProperty" === nodeType || "ClassPrivateMethod" === nodeType || "PrivateName" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPrivateName = function(node, opts) {
          if (!node)
            return false;
          if ("PrivateName" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isProgram = function(node, opts) {
          if (!node)
            return false;
          if ("Program" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isProperty = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ObjectProperty" === nodeType || "ClassProperty" === nodeType || "ClassAccessorProperty" === nodeType || "ClassPrivateProperty" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isPureish = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "RegExpLiteral" === nodeType || "ArrowFunctionExpression" === nodeType || "BigIntLiteral" === nodeType || "DecimalLiteral" === nodeType || "Placeholder" === nodeType && "StringLiteral" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isQualifiedTypeIdentifier = function(node, opts) {
          if (!node)
            return false;
          if ("QualifiedTypeIdentifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isRecordExpression = function(node, opts) {
          if (!node)
            return false;
          if ("RecordExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isRegExpLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("RegExpLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isRegexLiteral = function(node, opts) {
          if (console.trace("The node type RegexLiteral has been renamed to RegExpLiteral"), !node)
            return false;
          if ("RegexLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isRestElement = function(node, opts) {
          if (!node)
            return false;
          if ("RestElement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isRestProperty = function(node, opts) {
          if (console.trace("The node type RestProperty has been renamed to RestElement"), !node)
            return false;
          if ("RestProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isReturnStatement = function(node, opts) {
          if (!node)
            return false;
          if ("ReturnStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isScopable = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("BlockStatement" === nodeType || "CatchClause" === nodeType || "DoWhileStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "Program" === nodeType || "ObjectMethod" === nodeType || "SwitchStatement" === nodeType || "WhileStatement" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassExpression" === nodeType || "ClassDeclaration" === nodeType || "ForOfStatement" === nodeType || "ClassMethod" === nodeType || "ClassPrivateMethod" === nodeType || "StaticBlock" === nodeType || "TSModuleBlock" === nodeType || "Placeholder" === nodeType && "BlockStatement" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isSequenceExpression = function(node, opts) {
          if (!node)
            return false;
          if ("SequenceExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isSpreadElement = function(node, opts) {
          if (!node)
            return false;
          if ("SpreadElement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isSpreadProperty = function(node, opts) {
          if (console.trace("The node type SpreadProperty has been renamed to SpreadElement"), !node)
            return false;
          if ("SpreadProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isStandardized = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ArrayExpression" === nodeType || "AssignmentExpression" === nodeType || "BinaryExpression" === nodeType || "InterpreterDirective" === nodeType || "Directive" === nodeType || "DirectiveLiteral" === nodeType || "BlockStatement" === nodeType || "BreakStatement" === nodeType || "CallExpression" === nodeType || "CatchClause" === nodeType || "ConditionalExpression" === nodeType || "ContinueStatement" === nodeType || "DebuggerStatement" === nodeType || "DoWhileStatement" === nodeType || "EmptyStatement" === nodeType || "ExpressionStatement" === nodeType || "File" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "FunctionDeclaration" === nodeType || "FunctionExpression" === nodeType || "Identifier" === nodeType || "IfStatement" === nodeType || "LabeledStatement" === nodeType || "StringLiteral" === nodeType || "NumericLiteral" === nodeType || "NullLiteral" === nodeType || "BooleanLiteral" === nodeType || "RegExpLiteral" === nodeType || "LogicalExpression" === nodeType || "MemberExpression" === nodeType || "NewExpression" === nodeType || "Program" === nodeType || "ObjectExpression" === nodeType || "ObjectMethod" === nodeType || "ObjectProperty" === nodeType || "RestElement" === nodeType || "ReturnStatement" === nodeType || "SequenceExpression" === nodeType || "ParenthesizedExpression" === nodeType || "SwitchCase" === nodeType || "SwitchStatement" === nodeType || "ThisExpression" === nodeType || "ThrowStatement" === nodeType || "TryStatement" === nodeType || "UnaryExpression" === nodeType || "UpdateExpression" === nodeType || "VariableDeclaration" === nodeType || "VariableDeclarator" === nodeType || "WhileStatement" === nodeType || "WithStatement" === nodeType || "AssignmentPattern" === nodeType || "ArrayPattern" === nodeType || "ArrowFunctionExpression" === nodeType || "ClassBody" === nodeType || "ClassExpression" === nodeType || "ClassDeclaration" === nodeType || "ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType || "ExportSpecifier" === nodeType || "ForOfStatement" === nodeType || "ImportDeclaration" === nodeType || "ImportDefaultSpecifier" === nodeType || "ImportNamespaceSpecifier" === nodeType || "ImportSpecifier" === nodeType || "MetaProperty" === nodeType || "ClassMethod" === nodeType || "ObjectPattern" === nodeType || "SpreadElement" === nodeType || "Super" === nodeType || "TaggedTemplateExpression" === nodeType || "TemplateElement" === nodeType || "TemplateLiteral" === nodeType || "YieldExpression" === nodeType || "AwaitExpression" === nodeType || "Import" === nodeType || "BigIntLiteral" === nodeType || "ExportNamespaceSpecifier" === nodeType || "OptionalMemberExpression" === nodeType || "OptionalCallExpression" === nodeType || "ClassProperty" === nodeType || "ClassAccessorProperty" === nodeType || "ClassPrivateProperty" === nodeType || "ClassPrivateMethod" === nodeType || "PrivateName" === nodeType || "StaticBlock" === nodeType || "Placeholder" === nodeType && ("Identifier" === node.expectedNode || "StringLiteral" === node.expectedNode || "BlockStatement" === node.expectedNode || "ClassBody" === node.expectedNode))
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isStatement = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("BlockStatement" === nodeType || "BreakStatement" === nodeType || "ContinueStatement" === nodeType || "DebuggerStatement" === nodeType || "DoWhileStatement" === nodeType || "EmptyStatement" === nodeType || "ExpressionStatement" === nodeType || "ForInStatement" === nodeType || "ForStatement" === nodeType || "FunctionDeclaration" === nodeType || "IfStatement" === nodeType || "LabeledStatement" === nodeType || "ReturnStatement" === nodeType || "SwitchStatement" === nodeType || "ThrowStatement" === nodeType || "TryStatement" === nodeType || "VariableDeclaration" === nodeType || "WhileStatement" === nodeType || "WithStatement" === nodeType || "ClassDeclaration" === nodeType || "ExportAllDeclaration" === nodeType || "ExportDefaultDeclaration" === nodeType || "ExportNamedDeclaration" === nodeType || "ForOfStatement" === nodeType || "ImportDeclaration" === nodeType || "DeclareClass" === nodeType || "DeclareFunction" === nodeType || "DeclareInterface" === nodeType || "DeclareModule" === nodeType || "DeclareModuleExports" === nodeType || "DeclareTypeAlias" === nodeType || "DeclareOpaqueType" === nodeType || "DeclareVariable" === nodeType || "DeclareExportDeclaration" === nodeType || "DeclareExportAllDeclaration" === nodeType || "InterfaceDeclaration" === nodeType || "OpaqueType" === nodeType || "TypeAlias" === nodeType || "EnumDeclaration" === nodeType || "TSDeclareFunction" === nodeType || "TSInterfaceDeclaration" === nodeType || "TSTypeAliasDeclaration" === nodeType || "TSEnumDeclaration" === nodeType || "TSModuleDeclaration" === nodeType || "TSImportEqualsDeclaration" === nodeType || "TSExportAssignment" === nodeType || "TSNamespaceExportDeclaration" === nodeType || "Placeholder" === nodeType && ("Statement" === node.expectedNode || "Declaration" === node.expectedNode || "BlockStatement" === node.expectedNode))
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isStaticBlock = function(node, opts) {
          if (!node)
            return false;
          if ("StaticBlock" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isStringLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("StringLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isStringLiteralTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("StringLiteralTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isStringTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("StringTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isSuper = function(node, opts) {
          if (!node)
            return false;
          if ("Super" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isSwitchCase = function(node, opts) {
          if (!node)
            return false;
          if ("SwitchCase" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isSwitchStatement = function(node, opts) {
          if (!node)
            return false;
          if ("SwitchStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isSymbolTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("SymbolTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSAnyKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSAnyKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSArrayType = function(node, opts) {
          if (!node)
            return false;
          if ("TSArrayType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSAsExpression = function(node, opts) {
          if (!node)
            return false;
          if ("TSAsExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSBaseType = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("TSAnyKeyword" === nodeType || "TSBooleanKeyword" === nodeType || "TSBigIntKeyword" === nodeType || "TSIntrinsicKeyword" === nodeType || "TSNeverKeyword" === nodeType || "TSNullKeyword" === nodeType || "TSNumberKeyword" === nodeType || "TSObjectKeyword" === nodeType || "TSStringKeyword" === nodeType || "TSSymbolKeyword" === nodeType || "TSUndefinedKeyword" === nodeType || "TSUnknownKeyword" === nodeType || "TSVoidKeyword" === nodeType || "TSThisType" === nodeType || "TSLiteralType" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSBigIntKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSBigIntKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSBooleanKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSBooleanKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSCallSignatureDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSCallSignatureDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSConditionalType = function(node, opts) {
          if (!node)
            return false;
          if ("TSConditionalType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSConstructSignatureDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSConstructSignatureDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSConstructorType = function(node, opts) {
          if (!node)
            return false;
          if ("TSConstructorType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSDeclareFunction = function(node, opts) {
          if (!node)
            return false;
          if ("TSDeclareFunction" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSDeclareMethod = function(node, opts) {
          if (!node)
            return false;
          if ("TSDeclareMethod" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSEntityName = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("Identifier" === nodeType || "TSQualifiedName" === nodeType || "Placeholder" === nodeType && "Identifier" === node.expectedNode)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSEnumDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSEnumDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSEnumMember = function(node, opts) {
          if (!node)
            return false;
          if ("TSEnumMember" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSExportAssignment = function(node, opts) {
          if (!node)
            return false;
          if ("TSExportAssignment" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSExpressionWithTypeArguments = function(node, opts) {
          if (!node)
            return false;
          if ("TSExpressionWithTypeArguments" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSExternalModuleReference = function(node, opts) {
          if (!node)
            return false;
          if ("TSExternalModuleReference" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSFunctionType = function(node, opts) {
          if (!node)
            return false;
          if ("TSFunctionType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSImportEqualsDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSImportEqualsDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSImportType = function(node, opts) {
          if (!node)
            return false;
          if ("TSImportType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSIndexSignature = function(node, opts) {
          if (!node)
            return false;
          if ("TSIndexSignature" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSIndexedAccessType = function(node, opts) {
          if (!node)
            return false;
          if ("TSIndexedAccessType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSInferType = function(node, opts) {
          if (!node)
            return false;
          if ("TSInferType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSInstantiationExpression = function(node, opts) {
          if (!node)
            return false;
          if ("TSInstantiationExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSInterfaceBody = function(node, opts) {
          if (!node)
            return false;
          if ("TSInterfaceBody" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSInterfaceDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSInterfaceDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSIntersectionType = function(node, opts) {
          if (!node)
            return false;
          if ("TSIntersectionType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSIntrinsicKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSIntrinsicKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSLiteralType = function(node, opts) {
          if (!node)
            return false;
          if ("TSLiteralType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSMappedType = function(node, opts) {
          if (!node)
            return false;
          if ("TSMappedType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSMethodSignature = function(node, opts) {
          if (!node)
            return false;
          if ("TSMethodSignature" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSModuleBlock = function(node, opts) {
          if (!node)
            return false;
          if ("TSModuleBlock" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSModuleDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSModuleDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSNamedTupleMember = function(node, opts) {
          if (!node)
            return false;
          if ("TSNamedTupleMember" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSNamespaceExportDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSNamespaceExportDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSNeverKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSNeverKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSNonNullExpression = function(node, opts) {
          if (!node)
            return false;
          if ("TSNonNullExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSNullKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSNullKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSNumberKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSNumberKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSObjectKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSObjectKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSOptionalType = function(node, opts) {
          if (!node)
            return false;
          if ("TSOptionalType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSParameterProperty = function(node, opts) {
          if (!node)
            return false;
          if ("TSParameterProperty" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSParenthesizedType = function(node, opts) {
          if (!node)
            return false;
          if ("TSParenthesizedType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSPropertySignature = function(node, opts) {
          if (!node)
            return false;
          if ("TSPropertySignature" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSQualifiedName = function(node, opts) {
          if (!node)
            return false;
          if ("TSQualifiedName" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSRestType = function(node, opts) {
          if (!node)
            return false;
          if ("TSRestType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSStringKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSStringKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSSymbolKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSSymbolKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSThisType = function(node, opts) {
          if (!node)
            return false;
          if ("TSThisType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTupleType = function(node, opts) {
          if (!node)
            return false;
          if ("TSTupleType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSType = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("TSAnyKeyword" === nodeType || "TSBooleanKeyword" === nodeType || "TSBigIntKeyword" === nodeType || "TSIntrinsicKeyword" === nodeType || "TSNeverKeyword" === nodeType || "TSNullKeyword" === nodeType || "TSNumberKeyword" === nodeType || "TSObjectKeyword" === nodeType || "TSStringKeyword" === nodeType || "TSSymbolKeyword" === nodeType || "TSUndefinedKeyword" === nodeType || "TSUnknownKeyword" === nodeType || "TSVoidKeyword" === nodeType || "TSThisType" === nodeType || "TSFunctionType" === nodeType || "TSConstructorType" === nodeType || "TSTypeReference" === nodeType || "TSTypePredicate" === nodeType || "TSTypeQuery" === nodeType || "TSTypeLiteral" === nodeType || "TSArrayType" === nodeType || "TSTupleType" === nodeType || "TSOptionalType" === nodeType || "TSRestType" === nodeType || "TSUnionType" === nodeType || "TSIntersectionType" === nodeType || "TSConditionalType" === nodeType || "TSInferType" === nodeType || "TSParenthesizedType" === nodeType || "TSTypeOperator" === nodeType || "TSIndexedAccessType" === nodeType || "TSMappedType" === nodeType || "TSLiteralType" === nodeType || "TSExpressionWithTypeArguments" === nodeType || "TSImportType" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeAliasDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeAliasDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeAssertion = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeAssertion" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeElement = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("TSCallSignatureDeclaration" === nodeType || "TSConstructSignatureDeclaration" === nodeType || "TSPropertySignature" === nodeType || "TSMethodSignature" === nodeType || "TSIndexSignature" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeOperator = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeOperator" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeParameter = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeParameter" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeParameterDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeParameterDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeParameterInstantiation = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeParameterInstantiation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypePredicate = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypePredicate" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeQuery = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeQuery" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSTypeReference = function(node, opts) {
          if (!node)
            return false;
          if ("TSTypeReference" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSUndefinedKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSUndefinedKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSUnionType = function(node, opts) {
          if (!node)
            return false;
          if ("TSUnionType" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSUnknownKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSUnknownKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTSVoidKeyword = function(node, opts) {
          if (!node)
            return false;
          if ("TSVoidKeyword" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTaggedTemplateExpression = function(node, opts) {
          if (!node)
            return false;
          if ("TaggedTemplateExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTemplateElement = function(node, opts) {
          if (!node)
            return false;
          if ("TemplateElement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTemplateLiteral = function(node, opts) {
          if (!node)
            return false;
          if ("TemplateLiteral" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTerminatorless = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("BreakStatement" === nodeType || "ContinueStatement" === nodeType || "ReturnStatement" === nodeType || "ThrowStatement" === nodeType || "YieldExpression" === nodeType || "AwaitExpression" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isThisExpression = function(node, opts) {
          if (!node)
            return false;
          if ("ThisExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isThisTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("ThisTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isThrowStatement = function(node, opts) {
          if (!node)
            return false;
          if ("ThrowStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTopicReference = function(node, opts) {
          if (!node)
            return false;
          if ("TopicReference" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTryStatement = function(node, opts) {
          if (!node)
            return false;
          if ("TryStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTupleExpression = function(node, opts) {
          if (!node)
            return false;
          if ("TupleExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTupleTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("TupleTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeAlias = function(node, opts) {
          if (!node)
            return false;
          if ("TypeAlias" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("TypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeCastExpression = function(node, opts) {
          if (!node)
            return false;
          if ("TypeCastExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeParameter = function(node, opts) {
          if (!node)
            return false;
          if ("TypeParameter" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeParameterDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("TypeParameterDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeParameterInstantiation = function(node, opts) {
          if (!node)
            return false;
          if ("TypeParameterInstantiation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeScript = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("TSParameterProperty" === nodeType || "TSDeclareFunction" === nodeType || "TSDeclareMethod" === nodeType || "TSQualifiedName" === nodeType || "TSCallSignatureDeclaration" === nodeType || "TSConstructSignatureDeclaration" === nodeType || "TSPropertySignature" === nodeType || "TSMethodSignature" === nodeType || "TSIndexSignature" === nodeType || "TSAnyKeyword" === nodeType || "TSBooleanKeyword" === nodeType || "TSBigIntKeyword" === nodeType || "TSIntrinsicKeyword" === nodeType || "TSNeverKeyword" === nodeType || "TSNullKeyword" === nodeType || "TSNumberKeyword" === nodeType || "TSObjectKeyword" === nodeType || "TSStringKeyword" === nodeType || "TSSymbolKeyword" === nodeType || "TSUndefinedKeyword" === nodeType || "TSUnknownKeyword" === nodeType || "TSVoidKeyword" === nodeType || "TSThisType" === nodeType || "TSFunctionType" === nodeType || "TSConstructorType" === nodeType || "TSTypeReference" === nodeType || "TSTypePredicate" === nodeType || "TSTypeQuery" === nodeType || "TSTypeLiteral" === nodeType || "TSArrayType" === nodeType || "TSTupleType" === nodeType || "TSOptionalType" === nodeType || "TSRestType" === nodeType || "TSNamedTupleMember" === nodeType || "TSUnionType" === nodeType || "TSIntersectionType" === nodeType || "TSConditionalType" === nodeType || "TSInferType" === nodeType || "TSParenthesizedType" === nodeType || "TSTypeOperator" === nodeType || "TSIndexedAccessType" === nodeType || "TSMappedType" === nodeType || "TSLiteralType" === nodeType || "TSExpressionWithTypeArguments" === nodeType || "TSInterfaceDeclaration" === nodeType || "TSInterfaceBody" === nodeType || "TSTypeAliasDeclaration" === nodeType || "TSInstantiationExpression" === nodeType || "TSAsExpression" === nodeType || "TSTypeAssertion" === nodeType || "TSEnumDeclaration" === nodeType || "TSEnumMember" === nodeType || "TSModuleDeclaration" === nodeType || "TSModuleBlock" === nodeType || "TSImportType" === nodeType || "TSImportEqualsDeclaration" === nodeType || "TSExternalModuleReference" === nodeType || "TSNonNullExpression" === nodeType || "TSExportAssignment" === nodeType || "TSNamespaceExportDeclaration" === nodeType || "TSTypeAnnotation" === nodeType || "TSTypeParameterInstantiation" === nodeType || "TSTypeParameterDeclaration" === nodeType || "TSTypeParameter" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isTypeofTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("TypeofTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isUnaryExpression = function(node, opts) {
          if (!node)
            return false;
          if ("UnaryExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isUnaryLike = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("UnaryExpression" === nodeType || "SpreadElement" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isUnionTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("UnionTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isUpdateExpression = function(node, opts) {
          if (!node)
            return false;
          if ("UpdateExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isUserWhitespacable = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("ObjectMethod" === nodeType || "ObjectProperty" === nodeType || "ObjectTypeInternalSlot" === nodeType || "ObjectTypeCallProperty" === nodeType || "ObjectTypeIndexer" === nodeType || "ObjectTypeProperty" === nodeType || "ObjectTypeSpreadProperty" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isV8IntrinsicIdentifier = function(node, opts) {
          if (!node)
            return false;
          if ("V8IntrinsicIdentifier" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isVariableDeclaration = function(node, opts) {
          if (!node)
            return false;
          if ("VariableDeclaration" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isVariableDeclarator = function(node, opts) {
          if (!node)
            return false;
          if ("VariableDeclarator" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isVariance = function(node, opts) {
          if (!node)
            return false;
          if ("Variance" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isVoidTypeAnnotation = function(node, opts) {
          if (!node)
            return false;
          if ("VoidTypeAnnotation" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isWhile = function(node, opts) {
          if (!node)
            return false;
          const nodeType = node.type;
          if ("DoWhileStatement" === nodeType || "WhileStatement" === nodeType)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isWhileStatement = function(node, opts) {
          if (!node)
            return false;
          if ("WhileStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isWithStatement = function(node, opts) {
          if (!node)
            return false;
          if ("WithStatement" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        }, exports2.isYieldExpression = function(node, opts) {
          if (!node)
            return false;
          if ("YieldExpression" === node.type)
            return void 0 === opts || (0, _shallowEqual.default)(node, opts);
          return false;
        };
        var _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/utils/shallowEqual.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/is.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(type, node, opts) {
          if (!node)
            return false;
          if (!(0, _isType.default)(node.type, type))
            return !opts && "Placeholder" === node.type && type in _definitions.FLIPPED_ALIAS_KEYS && (0, _isPlaceholderType.default)(node.expectedNode, type);
          return void 0 === opts || (0, _shallowEqual.default)(node, opts);
        };
        var _shallowEqual = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/utils/shallowEqual.js"), _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isType.js"), _isPlaceholderType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isPlaceholderType.js"), _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isBinding.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent, grandparent) {
          if (grandparent && "Identifier" === node.type && "ObjectProperty" === parent.type && "ObjectExpression" === grandparent.type)
            return false;
          const keys = _getBindingIdentifiers.default.keys[parent.type];
          if (keys)
            for (let i = 0; i < keys.length; i++) {
              const key = keys[i], val = parent[key];
              if (Array.isArray(val)) {
                if (val.indexOf(node) >= 0)
                  return true;
              } else if (val === node)
                return true;
            }
          return false;
        };
        var _getBindingIdentifiers = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/retrievers/getBindingIdentifiers.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isBlockScoped.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _generated.isFunctionDeclaration)(node) || (0, _generated.isClassDeclaration)(node) || (0, _isLet.default)(node);
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js"), _isLet = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isLet.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isImmutable.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          if ((0, _isType.default)(node.type, "Immutable"))
            return true;
          if ((0, _generated.isIdentifier)(node))
            return "undefined" === node.name;
          return false;
        };
        var _isType = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isType.js"), _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isLet.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _generated.isVariableDeclaration)(node) && ("var" !== node.kind || node[_constants.BLOCK_SCOPED_SYMBOL]);
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js"), _constants = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isNode.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return !(!node || !_definitions.VISITOR_KEYS[node.type]);
        };
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isNodesEquivalent.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function isNodesEquivalent(a, b) {
          if ("object" != typeof a || "object" != typeof b || null == a || null == b)
            return a === b;
          if (a.type !== b.type)
            return false;
          const fields = Object.keys(_definitions.NODE_FIELDS[a.type] || a.type), visitorKeys = _definitions.VISITOR_KEYS[a.type];
          for (const field of fields) {
            const val_a = a[field], val_b = b[field];
            if (typeof val_a != typeof val_b)
              return false;
            if (null != val_a || null != val_b) {
              if (null == val_a || null == val_b)
                return false;
              if (Array.isArray(val_a)) {
                if (!Array.isArray(val_b))
                  return false;
                if (val_a.length !== val_b.length)
                  return false;
                for (let i = 0; i < val_a.length; i++)
                  if (!isNodesEquivalent(val_a[i], val_b[i]))
                    return false;
              } else if ("object" != typeof val_a || null != visitorKeys && visitorKeys.includes(field)) {
                if (!isNodesEquivalent(val_a, val_b))
                  return false;
              } else
                for (const key of Object.keys(val_a))
                  if (val_a[key] !== val_b[key])
                    return false;
            }
          }
          return true;
        };
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isPlaceholderType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(placeholderType, targetType) {
          if (placeholderType === targetType)
            return true;
          const aliases = _definitions.PLACEHOLDERS_ALIAS[placeholderType];
          if (aliases) {
            for (const alias of aliases)
              if (targetType === alias)
                return true;
          }
          return false;
        };
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isReferenced.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent, grandparent) {
          switch (parent.type) {
            case "MemberExpression":
            case "OptionalMemberExpression":
              return parent.property === node ? !!parent.computed : parent.object === node;
            case "JSXMemberExpression":
              return parent.object === node;
            case "VariableDeclarator":
              return parent.init === node;
            case "ArrowFunctionExpression":
              return parent.body === node;
            case "PrivateName":
            case "LabeledStatement":
            case "CatchClause":
            case "RestElement":
            case "BreakStatement":
            case "ContinueStatement":
            case "FunctionDeclaration":
            case "FunctionExpression":
            case "ExportNamespaceSpecifier":
            case "ExportDefaultSpecifier":
            case "ImportDefaultSpecifier":
            case "ImportNamespaceSpecifier":
            case "ImportSpecifier":
            case "ImportAttribute":
            case "JSXAttribute":
            case "ObjectPattern":
            case "ArrayPattern":
            case "MetaProperty":
              return false;
            case "ClassMethod":
            case "ClassPrivateMethod":
            case "ObjectMethod":
              return parent.key === node && !!parent.computed;
            case "ObjectProperty":
              return parent.key === node ? !!parent.computed : !grandparent || "ObjectPattern" !== grandparent.type;
            case "ClassProperty":
            case "ClassAccessorProperty":
            case "TSPropertySignature":
              return parent.key !== node || !!parent.computed;
            case "ClassPrivateProperty":
            case "ObjectTypeProperty":
              return parent.key !== node;
            case "ClassDeclaration":
            case "ClassExpression":
              return parent.superClass === node;
            case "AssignmentExpression":
            case "AssignmentPattern":
              return parent.right === node;
            case "ExportSpecifier":
              return (null == grandparent || !grandparent.source) && parent.local === node;
            case "TSEnumMember":
              return parent.id !== node;
          }
          return true;
        };
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isScope.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, parent) {
          if ((0, _generated.isBlockStatement)(node) && ((0, _generated.isFunction)(parent) || (0, _generated.isCatchClause)(parent)))
            return false;
          if ((0, _generated.isPattern)(node) && ((0, _generated.isFunction)(parent) || (0, _generated.isCatchClause)(parent)))
            return true;
          return (0, _generated.isScopable)(node);
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isSpecifierDefault.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(specifier) {
          return (0, _generated.isImportDefaultSpecifier)(specifier) || (0, _generated.isIdentifier)(specifier.imported || specifier.exported, { name: "default" });
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isType.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(nodeType, targetType) {
          if (nodeType === targetType)
            return true;
          if (_definitions.ALIAS_KEYS[targetType])
            return false;
          const aliases = _definitions.FLIPPED_ALIAS_KEYS[targetType];
          if (aliases) {
            if (aliases[0] === nodeType)
              return true;
            for (const alias of aliases)
              if (nodeType === alias)
                return true;
          }
          return false;
        };
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isValidES3Identifier.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(name) {
          return (0, _isValidIdentifier.default)(name) && !RESERVED_WORDS_ES3_ONLY.has(name);
        };
        var _isValidIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isValidIdentifier.js");
        const RESERVED_WORDS_ES3_ONLY = /* @__PURE__ */ new Set(["abstract", "boolean", "byte", "char", "double", "enum", "final", "float", "goto", "implements", "int", "interface", "long", "native", "package", "private", "protected", "public", "short", "static", "synchronized", "throws", "transient", "volatile"]);
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isValidIdentifier.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(name, reserved = true) {
          if ("string" != typeof name)
            return false;
          if (reserved && ((0, _helperValidatorIdentifier.isKeyword)(name) || (0, _helperValidatorIdentifier.isStrictReservedWord)(name, true)))
            return false;
          return (0, _helperValidatorIdentifier.isIdentifierName)(name);
        };
        var _helperValidatorIdentifier = __webpack_require__2("./node_modules/.pnpm/@babel+helper-validator-identifier@7.18.6/node_modules/@babel/helper-validator-identifier/lib/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/isVar.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node) {
          return (0, _generated.isVariableDeclaration)(node, { kind: "var" }) && !node[_constants.BLOCK_SCOPED_SYMBOL];
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js"), _constants = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/constants/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/matchesPattern.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(member, match, allowPartial) {
          if (!(0, _generated.isMemberExpression)(member))
            return false;
          const parts = Array.isArray(match) ? match : match.split("."), nodes = [];
          let node;
          for (node = member; (0, _generated.isMemberExpression)(node); node = node.object)
            nodes.push(node.property);
          if (nodes.push(node), nodes.length < parts.length)
            return false;
          if (!allowPartial && nodes.length > parts.length)
            return false;
          for (let i = 0, j = nodes.length - 1; i < parts.length; i++, j--) {
            const node2 = nodes[j];
            let value;
            if ((0, _generated.isIdentifier)(node2))
              value = node2.name;
            else if ((0, _generated.isStringLiteral)(node2))
              value = node2.value;
            else {
              if (!(0, _generated.isThisExpression)(node2))
                return false;
              value = "this";
            }
            if (parts[i] !== value)
              return false;
          }
          return true;
        };
        var _generated = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/generated/index.js");
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/react/isCompatTag.js": (__unused_webpack_module, exports2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(tagName) {
          return !!tagName && /^[a-z]/.test(tagName);
        };
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/react/isReactComponent.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = void 0;
        var _default = (0, __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/buildMatchMemberExpression.js").default)("React.Component");
        exports2.default = _default;
      }, "./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/validators/validate.js": (__unused_webpack_module, exports2, __webpack_require__2) => {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true }), exports2.default = function(node, key, val) {
          if (!node)
            return;
          const fields = _definitions.NODE_FIELDS[node.type];
          if (!fields)
            return;
          const field = fields[key];
          validateField(node, key, val, field), validateChild(node, key, val);
        }, exports2.validateChild = validateChild, exports2.validateField = validateField;
        var _definitions = __webpack_require__2("./node_modules/.pnpm/@babel+types@7.19.0/node_modules/@babel/types/lib/definitions/index.js");
        function validateField(node, key, val, field) {
          null != field && field.validate && (field.optional && null == val || field.validate(node, key, val));
        }
        function validateChild(node, key, val) {
          if (null == val)
            return;
          const validate = _definitions.NODE_PARENT_VALIDATIONS[val.type];
          validate && validate(node, key, val);
        }
      }, "./node_modules/.pnpm/@ampproject+remapping@2.2.0/node_modules/@ampproject/remapping/dist/remapping.mjs": (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { default: () => remapping });
        const comma = ",".charCodeAt(0), semicolon = ";".charCodeAt(0), chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", intToChar = new Uint8Array(64), charToInt = new Uint8Array(128);
        for (let i = 0; i < chars.length; i++) {
          const c = chars.charCodeAt(i);
          intToChar[i] = c, charToInt[c] = i;
        }
        const td = "undefined" != typeof TextDecoder ? new TextDecoder() : "undefined" != typeof Buffer ? { decode: (buf) => Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength).toString() } : { decode(buf) {
          let out = "";
          for (let i = 0; i < buf.length; i++)
            out += String.fromCharCode(buf[i]);
          return out;
        } };
        function indexOf(mappings, index2) {
          const idx = mappings.indexOf(";", index2);
          return -1 === idx ? mappings.length : idx;
        }
        function decodeInteger(mappings, pos, state, j) {
          let value = 0, shift = 0, integer = 0;
          do {
            const c = mappings.charCodeAt(pos++);
            integer = charToInt[c], value |= (31 & integer) << shift, shift += 5;
          } while (32 & integer);
          const shouldNegate = 1 & value;
          return value >>>= 1, shouldNegate && (value = -2147483648 | -value), state[j] += value, pos;
        }
        function hasMoreVlq(mappings, i, length) {
          return !(i >= length) && mappings.charCodeAt(i) !== comma;
        }
        function sort(line) {
          line.sort(sortComparator);
        }
        function sortComparator(a, b) {
          return a[0] - b[0];
        }
        function encode(decoded) {
          const state = new Int32Array(5), buf = new Uint8Array(16384), sub = buf.subarray(0, 16348);
          let pos = 0, out = "";
          for (let i = 0; i < decoded.length; i++) {
            const line = decoded[i];
            if (i > 0 && (16384 === pos && (out += td.decode(buf), pos = 0), buf[pos++] = semicolon), 0 !== line.length) {
              state[0] = 0;
              for (let j = 0; j < line.length; j++) {
                const segment = line[j];
                pos > 16348 && (out += td.decode(sub), buf.copyWithin(0, 16348, pos), pos -= 16348), j > 0 && (buf[pos++] = comma), pos = encodeInteger(buf, pos, state, segment, 0), 1 !== segment.length && (pos = encodeInteger(buf, pos, state, segment, 1), pos = encodeInteger(buf, pos, state, segment, 2), pos = encodeInteger(buf, pos, state, segment, 3), 4 !== segment.length && (pos = encodeInteger(buf, pos, state, segment, 4)));
              }
            }
          }
          return out + td.decode(buf.subarray(0, pos));
        }
        function encodeInteger(buf, pos, state, segment, j) {
          const next = segment[j];
          let num = next - state[j];
          state[j] = next, num = num < 0 ? -num << 1 | 1 : num << 1;
          do {
            let clamped = 31 & num;
            num >>>= 5, num > 0 && (clamped |= 32), buf[pos++] = intToChar[clamped];
          } while (num > 0);
          return pos;
        }
        const schemeRegex = /^[\w+.-]+:\/\//, urlRegex = /^([\w+.-]+:)\/\/([^@/#?]*@)?([^:/#?]*)(:\d+)?(\/[^#?]*)?/, fileRegex = /^file:(?:\/\/((?![a-z]:)[^/]*)?)?(\/?.*)/i;
        function isAbsolutePath(input) {
          return input.startsWith("/");
        }
        function parseAbsoluteUrl(input) {
          const match = urlRegex.exec(input);
          return makeUrl(match[1], match[2] || "", match[3], match[4] || "", match[5] || "/");
        }
        function makeUrl(scheme, user, host, port, path3) {
          return { scheme, user, host, port, path: path3, relativePath: false };
        }
        function parseUrl(input) {
          if (function(input2) {
            return input2.startsWith("//");
          }(input)) {
            const url2 = parseAbsoluteUrl("http:" + input);
            return url2.scheme = "", url2;
          }
          if (isAbsolutePath(input)) {
            const url2 = parseAbsoluteUrl("http://foo.com" + input);
            return url2.scheme = "", url2.host = "", url2;
          }
          if (function(input2) {
            return input2.startsWith("file:");
          }(input))
            return function(input2) {
              const match = fileRegex.exec(input2), path3 = match[2];
              return makeUrl("file:", "", match[1] || "", "", isAbsolutePath(path3) ? path3 : "/" + path3);
            }(input);
          if (function(input2) {
            return schemeRegex.test(input2);
          }(input))
            return parseAbsoluteUrl(input);
          const url = parseAbsoluteUrl("http://foo.com/" + input);
          return url.scheme = "", url.host = "", url.relativePath = true, url;
        }
        function normalizePath(url) {
          const { relativePath } = url, pieces = url.path.split("/");
          let pointer = 1, positive = 0, addTrailingSlash = false;
          for (let i = 1; i < pieces.length; i++) {
            const piece = pieces[i];
            piece ? (addTrailingSlash = false, "." !== piece && (".." !== piece ? (pieces[pointer++] = piece, positive++) : positive ? (addTrailingSlash = true, positive--, pointer--) : relativePath && (pieces[pointer++] = piece))) : addTrailingSlash = true;
          }
          let path3 = "";
          for (let i = 1; i < pointer; i++)
            path3 += "/" + pieces[i];
          (!path3 || addTrailingSlash && !path3.endsWith("/..")) && (path3 += "/"), url.path = path3;
        }
        function resolve2(input, base) {
          if (!input && !base)
            return "";
          const url = parseUrl(input);
          if (base && !url.scheme) {
            const baseUrl = parseUrl(base);
            url.scheme = baseUrl.scheme, url.host || (url.user = baseUrl.user, url.host = baseUrl.host, url.port = baseUrl.port), function(url2, base2) {
              url2.relativePath && (normalizePath(base2), "/" === url2.path ? url2.path = base2.path : url2.path = function(path3) {
                if (path3.endsWith("/.."))
                  return path3;
                const index2 = path3.lastIndexOf("/");
                return path3.slice(0, index2 + 1);
              }(base2.path) + url2.path, url2.relativePath = base2.relativePath);
            }(url, baseUrl);
          }
          if (normalizePath(url), url.relativePath) {
            const path3 = url.path.slice(1);
            if (!path3)
              return ".";
            return !(base || input).startsWith(".") || path3.startsWith(".") ? path3 : "./" + path3;
          }
          return url.scheme || url.host ? `${url.scheme}//${url.user}${url.host}${url.port}${url.path}` : url.path;
        }
        function trace_mapping_resolve(input, base) {
          return base && !base.endsWith("/") && (base += "/"), resolve2(input, base);
        }
        function nextUnsortedSegmentLine(mappings, start) {
          for (let i = start; i < mappings.length; i++)
            if (!isSorted(mappings[i]))
              return i;
          return mappings.length;
        }
        function isSorted(line) {
          for (let j = 1; j < line.length; j++)
            if (line[j][0] < line[j - 1][0])
              return false;
          return true;
        }
        function sortSegments(line, owned) {
          return owned || (line = line.slice()), line.sort(trace_mapping_sortComparator);
        }
        function trace_mapping_sortComparator(a, b) {
          return a[0] - b[0];
        }
        let found = false;
        function upperBound(haystack, needle, index2) {
          for (let i = index2 + 1; i < haystack.length && haystack[i][0] === needle; index2 = i++)
            ;
          return index2;
        }
        function lowerBound(haystack, needle, index2) {
          for (let i = index2 - 1; i >= 0 && haystack[i][0] === needle; index2 = i--)
            ;
          return index2;
        }
        function memoizedState() {
          return { lastKey: -1, lastNeedle: -1, lastIndex: -1 };
        }
        function memoizedBinarySearch(haystack, needle, state, key) {
          const { lastKey, lastNeedle, lastIndex } = state;
          let low = 0, high = haystack.length - 1;
          if (key === lastKey) {
            if (needle === lastNeedle)
              return found = -1 !== lastIndex && haystack[lastIndex][0] === needle, lastIndex;
            needle >= lastNeedle ? low = -1 === lastIndex ? 0 : lastIndex : high = lastIndex;
          }
          return state.lastKey = key, state.lastNeedle = needle, state.lastIndex = function(haystack2, needle2, low2, high2) {
            for (; low2 <= high2; ) {
              const mid = low2 + (high2 - low2 >> 1), cmp = haystack2[mid][0] - needle2;
              if (0 === cmp)
                return found = true, mid;
              cmp < 0 ? low2 = mid + 1 : high2 = mid - 1;
            }
            return found = false, low2 - 1;
          }(haystack, needle, low, high);
        }
        function insert(array, index2, value) {
          for (let i = array.length; i > index2; i--)
            array[i] = array[i - 1];
          array[index2] = value;
        }
        function buildNullArray() {
          return { __proto__: null };
        }
        const LINE_GTR_ZERO = "`line` must be greater than 0 (lines start at line 1)", COL_GTR_EQ_ZERO = "`column` must be greater than or equal to 0 (columns start at column 0)";
        let encodedMappings, decodedMappings, traceSegment, originalPositionFor, generatedPositionFor, eachMapping, sourceContentFor, presortedDecodedMap, decodedMap, encodedMap, get, put, pop, addSegment, addMapping, setSourceContent, gen_mapping_decodedMap, gen_mapping_encodedMap, allMappings;
        class TraceMap {
          constructor(map, mapUrl) {
            const isString = "string" == typeof map;
            if (!isString && map._decodedMemo)
              return map;
            const parsed = isString ? JSON.parse(map) : map, { version: version2, file, names, sourceRoot, sources, sourcesContent } = parsed;
            this.version = version2, this.file = file, this.names = names, this.sourceRoot = sourceRoot, this.sources = sources, this.sourcesContent = sourcesContent;
            const from = trace_mapping_resolve(sourceRoot || "", function(path3) {
              if (!path3)
                return "";
              const index2 = path3.lastIndexOf("/");
              return path3.slice(0, index2 + 1);
            }(mapUrl));
            this.resolvedSources = sources.map((s) => trace_mapping_resolve(s || "", from));
            const { mappings } = parsed;
            "string" == typeof mappings ? (this._encoded = mappings, this._decoded = void 0) : (this._encoded = void 0, this._decoded = function(mappings2, owned) {
              const unsortedIndex = nextUnsortedSegmentLine(mappings2, 0);
              if (unsortedIndex === mappings2.length)
                return mappings2;
              owned || (mappings2 = mappings2.slice());
              for (let i = unsortedIndex; i < mappings2.length; i = nextUnsortedSegmentLine(mappings2, i + 1))
                mappings2[i] = sortSegments(mappings2[i], owned);
              return mappings2;
            }(mappings, isString)), this._decodedMemo = { lastKey: -1, lastNeedle: -1, lastIndex: -1 }, this._bySources = void 0, this._bySourceMemos = void 0;
          }
        }
        function clone(map, mappings) {
          return { version: map.version, file: map.file, names: map.names, sourceRoot: map.sourceRoot, sources: map.sources, sourcesContent: map.sourcesContent, mappings };
        }
        function OMapping(source, line, column, name) {
          return { source, line, column, name };
        }
        function GMapping(line, column) {
          return { line, column };
        }
        function traceSegmentInternal(segments, memo, line, column, bias) {
          let index2 = memoizedBinarySearch(segments, column, memo, line);
          return found ? index2 = (-1 === bias ? upperBound : lowerBound)(segments, column, index2) : -1 === bias && index2++, -1 === index2 || index2 === segments.length ? null : segments[index2];
        }
        encodedMappings = (map) => {
          var _a;
          return null !== (_a = map._encoded) && void 0 !== _a ? _a : map._encoded = encode(map._decoded);
        }, decodedMappings = (map) => map._decoded || (map._decoded = function(mappings) {
          const state = new Int32Array(5), decoded = [];
          let index2 = 0;
          do {
            const semi = indexOf(mappings, index2), line = [];
            let sorted = true, lastCol = 0;
            state[0] = 0;
            for (let i = index2; i < semi; i++) {
              let seg;
              i = decodeInteger(mappings, i, state, 0);
              const col = state[0];
              col < lastCol && (sorted = false), lastCol = col, hasMoreVlq(mappings, i, semi) ? (i = decodeInteger(mappings, i, state, 1), i = decodeInteger(mappings, i, state, 2), i = decodeInteger(mappings, i, state, 3), hasMoreVlq(mappings, i, semi) ? (i = decodeInteger(mappings, i, state, 4), seg = [col, state[1], state[2], state[3], state[4]]) : seg = [col, state[1], state[2], state[3]]) : seg = [col], line.push(seg);
            }
            sorted || sort(line), decoded.push(line), index2 = semi + 1;
          } while (index2 <= mappings.length);
          return decoded;
        }(map._encoded)), traceSegment = (map, line, column) => {
          const decoded = decodedMappings(map);
          return line >= decoded.length ? null : traceSegmentInternal(decoded[line], map._decodedMemo, line, column, 1);
        }, originalPositionFor = (map, { line, column, bias }) => {
          if (--line < 0)
            throw new Error(LINE_GTR_ZERO);
          if (column < 0)
            throw new Error(COL_GTR_EQ_ZERO);
          const decoded = decodedMappings(map);
          if (line >= decoded.length)
            return OMapping(null, null, null, null);
          const segment = traceSegmentInternal(decoded[line], map._decodedMemo, line, column, bias || 1);
          if (null == segment)
            return OMapping(null, null, null, null);
          if (1 == segment.length)
            return OMapping(null, null, null, null);
          const { names, resolvedSources } = map;
          return OMapping(resolvedSources[segment[1]], segment[2] + 1, segment[3], 5 === segment.length ? names[segment[4]] : null);
        }, generatedPositionFor = (map, { source, line, column, bias }) => {
          if (--line < 0)
            throw new Error(LINE_GTR_ZERO);
          if (column < 0)
            throw new Error(COL_GTR_EQ_ZERO);
          const { sources, resolvedSources } = map;
          let sourceIndex = sources.indexOf(source);
          if (-1 === sourceIndex && (sourceIndex = resolvedSources.indexOf(source)), -1 === sourceIndex)
            return GMapping(null, null);
          const generated = map._bySources || (map._bySources = function(decoded, memos2) {
            const sources2 = memos2.map(buildNullArray);
            for (let i = 0; i < decoded.length; i++) {
              const line2 = decoded[i];
              for (let j = 0; j < line2.length; j++) {
                const seg = line2[j];
                if (1 === seg.length)
                  continue;
                const sourceIndex2 = seg[1], sourceLine = seg[2], sourceColumn = seg[3], originalSource = sources2[sourceIndex2], originalLine = originalSource[sourceLine] || (originalSource[sourceLine] = []), memo = memos2[sourceIndex2], index2 = upperBound(originalLine, sourceColumn, memoizedBinarySearch(originalLine, sourceColumn, memo, sourceLine));
                insert(originalLine, memo.lastIndex = index2 + 1, [sourceColumn, i, seg[0]]);
              }
            }
            return sources2;
          }(decodedMappings(map), map._bySourceMemos = sources.map(memoizedState))), memos = map._bySourceMemos, segments = generated[sourceIndex][line];
          if (null == segments)
            return GMapping(null, null);
          const segment = traceSegmentInternal(segments, memos[sourceIndex], line, column, bias || 1);
          return null == segment ? GMapping(null, null) : GMapping(segment[1] + 1, segment[2]);
        }, eachMapping = (map, cb) => {
          const decoded = decodedMappings(map), { names, resolvedSources } = map;
          for (let i = 0; i < decoded.length; i++) {
            const line = decoded[i];
            for (let j = 0; j < line.length; j++) {
              const seg = line[j], generatedLine = i + 1, generatedColumn = seg[0];
              let source = null, originalLine = null, originalColumn = null, name = null;
              1 !== seg.length && (source = resolvedSources[seg[1]], originalLine = seg[2] + 1, originalColumn = seg[3]), 5 === seg.length && (name = names[seg[4]]), cb({ generatedLine, generatedColumn, source, originalLine, originalColumn, name });
            }
          }
        }, sourceContentFor = (map, source) => {
          const { sources, resolvedSources, sourcesContent } = map;
          if (null == sourcesContent)
            return null;
          let index2 = sources.indexOf(source);
          return -1 === index2 && (index2 = resolvedSources.indexOf(source)), -1 === index2 ? null : sourcesContent[index2];
        }, presortedDecodedMap = (map, mapUrl) => {
          const tracer = new TraceMap(clone(map, []), mapUrl);
          return tracer._decoded = map.mappings, tracer;
        }, decodedMap = (map) => clone(map, decodedMappings(map)), encodedMap = (map) => clone(map, encodedMappings(map));
        class SetArray {
          constructor() {
            this._indexes = { __proto__: null }, this.array = [];
          }
        }
        get = (strarr, key) => strarr._indexes[key], put = (strarr, key) => {
          const index2 = get(strarr, key);
          if (void 0 !== index2)
            return index2;
          const { array, _indexes: indexes } = strarr;
          return indexes[key] = array.push(key) - 1;
        }, pop = (strarr) => {
          const { array, _indexes: indexes } = strarr;
          0 !== array.length && (indexes[array.pop()] = void 0);
        };
        class GenMapping {
          constructor({ file, sourceRoot } = {}) {
            this._names = new SetArray(), this._sources = new SetArray(), this._sourcesContent = [], this._mappings = [], this.file = file, this.sourceRoot = sourceRoot;
          }
        }
        function getColumnIndex(line, column, seg) {
          let index2 = line.length;
          for (let i = index2 - 1; i >= 0; i--, index2--) {
            const current2 = line[i], col = current2[0];
            if (col > column)
              continue;
            if (col < column)
              break;
            const cmp = compare(current2, seg);
            if (0 === cmp)
              return index2;
            if (cmp < 0)
              break;
          }
          return index2;
        }
        function compare(a, b) {
          let cmp = compareNum(a.length, b.length);
          return 0 !== cmp ? cmp : 1 === a.length ? 0 : (cmp = compareNum(a[1], b[1]), 0 !== cmp ? cmp : (cmp = compareNum(a[2], b[2]), 0 !== cmp ? cmp : (cmp = compareNum(a[3], b[3]), 0 !== cmp ? cmp : 4 === a.length ? 0 : compareNum(a[4], b[4]))));
        }
        function compareNum(a, b) {
          return a - b;
        }
        function gen_mapping_insert(array, index2, value) {
          if (-1 !== index2) {
            for (let i = array.length; i > index2; i--)
              array[i] = array[i - 1];
            array[index2] = value;
          }
        }
        addSegment = (map, genLine, genColumn, source, sourceLine, sourceColumn, name) => {
          const { _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = map, line = function(mappings2, index3) {
            for (let i = mappings2.length; i <= index3; i++)
              mappings2[i] = [];
            return mappings2[index3];
          }(mappings, genLine);
          if (null == source) {
            const seg2 = [genColumn];
            return gen_mapping_insert(line, getColumnIndex(line, genColumn, seg2), seg2);
          }
          const sourcesIndex = put(sources, source), seg = name ? [genColumn, sourcesIndex, sourceLine, sourceColumn, put(names, name)] : [genColumn, sourcesIndex, sourceLine, sourceColumn], index2 = getColumnIndex(line, genColumn, seg);
          sourcesIndex === sourcesContent.length && (sourcesContent[sourcesIndex] = null), gen_mapping_insert(line, index2, seg);
        }, addMapping = (map, mapping) => {
          const { generated, source, original, name } = mapping;
          return addSegment(map, generated.line - 1, generated.column, source, null == original ? void 0 : original.line - 1, null == original ? void 0 : original.column, name);
        }, setSourceContent = (map, source, content) => {
          const { _sources: sources, _sourcesContent: sourcesContent } = map;
          sourcesContent[put(sources, source)] = content;
        }, gen_mapping_decodedMap = (map) => {
          const { file, sourceRoot, _mappings: mappings, _sources: sources, _sourcesContent: sourcesContent, _names: names } = map;
          return { version: 3, file, names: names.array, sourceRoot: sourceRoot || void 0, sources: sources.array, sourcesContent, mappings };
        }, gen_mapping_encodedMap = (map) => {
          const decoded = gen_mapping_decodedMap(map);
          return Object.assign(Object.assign({}, decoded), { mappings: encode(decoded.mappings) });
        }, allMappings = (map) => {
          const out = [], { _mappings: mappings, _sources: sources, _names: names } = map;
          for (let i = 0; i < mappings.length; i++) {
            const line = mappings[i];
            for (let j = 0; j < line.length; j++) {
              const seg = line[j], generated = { line: i + 1, column: seg[0] };
              let source, original, name;
              1 !== seg.length && (source = sources.array[seg[1]], original = { line: seg[2] + 1, column: seg[3] }, 5 === seg.length && (name = names.array[seg[4]])), out.push({ generated, source, original, name });
            }
          }
          return out;
        };
        const SOURCELESS_MAPPING = { source: null, column: null, line: null, name: null, content: null }, EMPTY_SOURCES = [];
        function Source(map, sources, source, content) {
          return { map, sources, source, content };
        }
        function MapSource(map, sources) {
          return Source(map, sources, "", null);
        }
        function remapping_originalPositionFor(source, line, column, name) {
          if (!source.map)
            return { column, line, name, source: source.source, content: source.content };
          const segment = traceSegment(source.map, line, column);
          return null == segment ? null : 1 === segment.length ? SOURCELESS_MAPPING : remapping_originalPositionFor(source.sources[segment[1]], segment[2], segment[3], 5 === segment.length ? source.map.names[segment[4]] : name);
        }
        function buildSourceMapTree(input, loader) {
          const maps = (value = input, Array.isArray(value) ? value : [value]).map((m) => new TraceMap(m, ""));
          var value;
          const map = maps.pop();
          for (let i = 0; i < maps.length; i++)
            if (maps[i].sources.length > 1)
              throw new Error(`Transformation map ${i} must have exactly one source file.
Did you specify these with the most recent transformation maps first?`);
          let tree = build2(map, loader, "", 0);
          for (let i = maps.length - 1; i >= 0; i--)
            tree = MapSource(maps[i], [tree]);
          return tree;
        }
        function build2(map, loader, importer, importerDepth) {
          const { resolvedSources, sourcesContent } = map, depth = importerDepth + 1;
          return MapSource(map, resolvedSources.map((sourceFile, i) => {
            const ctx = { importer, depth, source: sourceFile || "", content: void 0 }, sourceMap = loader(ctx.source, ctx), { source, content } = ctx;
            if (sourceMap)
              return build2(new TraceMap(sourceMap, source), loader, source, depth);
            return function(source2, content2) {
              return Source(null, EMPTY_SOURCES, source2, content2);
            }(source, void 0 !== content ? content : sourcesContent ? sourcesContent[i] : null);
          }));
        }
        class SourceMap {
          constructor(map, options) {
            const out = options.decodedMappings ? gen_mapping_decodedMap(map) : gen_mapping_encodedMap(map);
            this.version = out.version, this.file = out.file, this.mappings = out.mappings, this.names = out.names, this.sourceRoot = out.sourceRoot, this.sources = out.sources, options.excludeContent || (this.sourcesContent = out.sourcesContent);
          }
          toString() {
            return JSON.stringify(this);
          }
        }
        function remapping(input, loader, options) {
          const opts = "object" == typeof options ? options : { excludeContent: !!options, decodedMappings: false }, tree = buildSourceMapTree(input, loader);
          return new SourceMap(function(tree2) {
            const gen = new GenMapping({ file: tree2.map.file }), { sources: rootSources, map } = tree2, rootNames = map.names, rootMappings = decodedMappings(map);
            for (let i = 0; i < rootMappings.length; i++) {
              const segments = rootMappings[i];
              let lastSource = null, lastSourceLine = null, lastSourceColumn = null;
              for (let j = 0; j < segments.length; j++) {
                const segment = segments[j], genCol = segment[0];
                let traced = SOURCELESS_MAPPING;
                if (1 !== segment.length && (traced = remapping_originalPositionFor(rootSources[segment[1]], segment[2], segment[3], 5 === segment.length ? rootNames[segment[4]] : ""), null == traced))
                  continue;
                const { column, line, name, content, source } = traced;
                line === lastSourceLine && column === lastSourceColumn && source === lastSource || (lastSourceLine = line, lastSourceColumn = column, lastSource = source, addSegment(gen, i, genCol, source, line, column, name), null != content && setSourceContent(gen, source, content));
              }
            }
            return gen;
          }(tree), opts);
        }
      }, "./node_modules/.pnpm/json5@2.2.1/node_modules/json5/dist/index.mjs": (__unused_webpack___webpack_module__, __webpack_exports__2, __webpack_require__2) => {
        "use strict";
        __webpack_require__2.r(__webpack_exports__2), __webpack_require__2.d(__webpack_exports__2, { default: () => __WEBPACK_DEFAULT_EXPORT__ });
        var unicode = { Space_Separator: /[\u1680\u2000-\u200A\u202F\u205F\u3000]/, ID_Start: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]/, ID_Continue: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0AF9-\u0AFF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1C80-\u1C88\u1CD0-\u1CD2\u1CD4-\u1CF9\u1D00-\u1DF9\u1DFB-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA8FD\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDCA-\uDDCC\uDDD0-\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC00-\uDC4A\uDC50-\uDC59\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDDD8-\uDDDD\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF39]|\uD806[\uDCA0-\uDCE9\uDCFF\uDE00-\uDE3E\uDE47\uDE50-\uDE83\uDE86-\uDE99\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC40\uDC50-\uDC59\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6\uDD00-\uDD4A\uDD50-\uDD59]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/ }, util = { isSpaceSeparator: (c2) => "string" == typeof c2 && unicode.Space_Separator.test(c2), isIdStartChar: (c2) => "string" == typeof c2 && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || "$" === c2 || "_" === c2 || unicode.ID_Start.test(c2)), isIdContinueChar: (c2) => "string" == typeof c2 && (c2 >= "a" && c2 <= "z" || c2 >= "A" && c2 <= "Z" || c2 >= "0" && c2 <= "9" || "$" === c2 || "_" === c2 || "\u200C" === c2 || "\u200D" === c2 || unicode.ID_Continue.test(c2)), isDigit: (c2) => "string" == typeof c2 && /[0-9]/.test(c2), isHexDigit: (c2) => "string" == typeof c2 && /[0-9A-Fa-f]/.test(c2) };
        let source, parseState, stack, pos, line, column, token, key, root;
        function internalize(holder, name, reviver) {
          const value = holder[name];
          if (null != value && "object" == typeof value)
            for (const key2 in value) {
              const replacement = internalize(value, key2, reviver);
              void 0 === replacement ? delete value[key2] : value[key2] = replacement;
            }
          return reviver.call(holder, name, value);
        }
        let lexState, buffer, doubleQuote, sign, c;
        function lex() {
          for (lexState = "default", buffer = "", doubleQuote = false, sign = 1; ; ) {
            c = peek();
            const token2 = lexStates[lexState]();
            if (token2)
              return token2;
          }
        }
        function peek() {
          if (source[pos])
            return String.fromCodePoint(source.codePointAt(pos));
        }
        function read2() {
          const c2 = peek();
          return "\n" === c2 ? (line++, column = 0) : c2 ? column += c2.length : column++, c2 && (pos += c2.length), c2;
        }
        const lexStates = { default() {
          switch (c) {
            case "	":
            case "\v":
            case "\f":
            case " ":
            case "\xA0":
            case "\uFEFF":
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              return void read2();
            case "/":
              return read2(), void (lexState = "comment");
            case void 0:
              return read2(), newToken("eof");
          }
          if (!util.isSpaceSeparator(c))
            return lexStates[parseState]();
          read2();
        }, comment() {
          switch (c) {
            case "*":
              return read2(), void (lexState = "multiLineComment");
            case "/":
              return read2(), void (lexState = "singleLineComment");
          }
          throw invalidChar(read2());
        }, multiLineComment() {
          switch (c) {
            case "*":
              return read2(), void (lexState = "multiLineCommentAsterisk");
            case void 0:
              throw invalidChar(read2());
          }
          read2();
        }, multiLineCommentAsterisk() {
          switch (c) {
            case "*":
              return void read2();
            case "/":
              return read2(), void (lexState = "default");
            case void 0:
              throw invalidChar(read2());
          }
          read2(), lexState = "multiLineComment";
        }, singleLineComment() {
          switch (c) {
            case "\n":
            case "\r":
            case "\u2028":
            case "\u2029":
              return read2(), void (lexState = "default");
            case void 0:
              return read2(), newToken("eof");
          }
          read2();
        }, value() {
          switch (c) {
            case "{":
            case "[":
              return newToken("punctuator", read2());
            case "n":
              return read2(), literal2("ull"), newToken("null", null);
            case "t":
              return read2(), literal2("rue"), newToken("boolean", true);
            case "f":
              return read2(), literal2("alse"), newToken("boolean", false);
            case "-":
            case "+":
              return "-" === read2() && (sign = -1), void (lexState = "sign");
            case ".":
              return buffer = read2(), void (lexState = "decimalPointLeading");
            case "0":
              return buffer = read2(), void (lexState = "zero");
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              return buffer = read2(), void (lexState = "decimalInteger");
            case "I":
              return read2(), literal2("nfinity"), newToken("numeric", 1 / 0);
            case "N":
              return read2(), literal2("aN"), newToken("numeric", NaN);
            case '"':
            case "'":
              return doubleQuote = '"' === read2(), buffer = "", void (lexState = "string");
          }
          throw invalidChar(read2());
        }, identifierNameStartEscape() {
          if ("u" !== c)
            throw invalidChar(read2());
          read2();
          const u = unicodeEscape();
          switch (u) {
            case "$":
            case "_":
              break;
            default:
              if (!util.isIdStartChar(u))
                throw invalidIdentifier();
          }
          buffer += u, lexState = "identifierName";
        }, identifierName() {
          switch (c) {
            case "$":
            case "_":
            case "\u200C":
            case "\u200D":
              return void (buffer += read2());
            case "\\":
              return read2(), void (lexState = "identifierNameEscape");
          }
          if (!util.isIdContinueChar(c))
            return newToken("identifier", buffer);
          buffer += read2();
        }, identifierNameEscape() {
          if ("u" !== c)
            throw invalidChar(read2());
          read2();
          const u = unicodeEscape();
          switch (u) {
            case "$":
            case "_":
            case "\u200C":
            case "\u200D":
              break;
            default:
              if (!util.isIdContinueChar(u))
                throw invalidIdentifier();
          }
          buffer += u, lexState = "identifierName";
        }, sign() {
          switch (c) {
            case ".":
              return buffer = read2(), void (lexState = "decimalPointLeading");
            case "0":
              return buffer = read2(), void (lexState = "zero");
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              return buffer = read2(), void (lexState = "decimalInteger");
            case "I":
              return read2(), literal2("nfinity"), newToken("numeric", sign * (1 / 0));
            case "N":
              return read2(), literal2("aN"), newToken("numeric", NaN);
          }
          throw invalidChar(read2());
        }, zero() {
          switch (c) {
            case ".":
              return buffer += read2(), void (lexState = "decimalPoint");
            case "e":
            case "E":
              return buffer += read2(), void (lexState = "decimalExponent");
            case "x":
            case "X":
              return buffer += read2(), void (lexState = "hexadecimal");
          }
          return newToken("numeric", 0 * sign);
        }, decimalInteger() {
          switch (c) {
            case ".":
              return buffer += read2(), void (lexState = "decimalPoint");
            case "e":
            case "E":
              return buffer += read2(), void (lexState = "decimalExponent");
          }
          if (!util.isDigit(c))
            return newToken("numeric", sign * Number(buffer));
          buffer += read2();
        }, decimalPointLeading() {
          if (util.isDigit(c))
            return buffer += read2(), void (lexState = "decimalFraction");
          throw invalidChar(read2());
        }, decimalPoint() {
          switch (c) {
            case "e":
            case "E":
              return buffer += read2(), void (lexState = "decimalExponent");
          }
          return util.isDigit(c) ? (buffer += read2(), void (lexState = "decimalFraction")) : newToken("numeric", sign * Number(buffer));
        }, decimalFraction() {
          switch (c) {
            case "e":
            case "E":
              return buffer += read2(), void (lexState = "decimalExponent");
          }
          if (!util.isDigit(c))
            return newToken("numeric", sign * Number(buffer));
          buffer += read2();
        }, decimalExponent() {
          switch (c) {
            case "+":
            case "-":
              return buffer += read2(), void (lexState = "decimalExponentSign");
          }
          if (util.isDigit(c))
            return buffer += read2(), void (lexState = "decimalExponentInteger");
          throw invalidChar(read2());
        }, decimalExponentSign() {
          if (util.isDigit(c))
            return buffer += read2(), void (lexState = "decimalExponentInteger");
          throw invalidChar(read2());
        }, decimalExponentInteger() {
          if (!util.isDigit(c))
            return newToken("numeric", sign * Number(buffer));
          buffer += read2();
        }, hexadecimal() {
          if (util.isHexDigit(c))
            return buffer += read2(), void (lexState = "hexadecimalInteger");
          throw invalidChar(read2());
        }, hexadecimalInteger() {
          if (!util.isHexDigit(c))
            return newToken("numeric", sign * Number(buffer));
          buffer += read2();
        }, string() {
          switch (c) {
            case "\\":
              return read2(), void (buffer += function() {
                switch (peek()) {
                  case "b":
                    return read2(), "\b";
                  case "f":
                    return read2(), "\f";
                  case "n":
                    return read2(), "\n";
                  case "r":
                    return read2(), "\r";
                  case "t":
                    return read2(), "	";
                  case "v":
                    return read2(), "\v";
                  case "0":
                    if (read2(), util.isDigit(peek()))
                      throw invalidChar(read2());
                    return "\0";
                  case "x":
                    return read2(), function() {
                      let buffer2 = "", c2 = peek();
                      if (!util.isHexDigit(c2))
                        throw invalidChar(read2());
                      if (buffer2 += read2(), c2 = peek(), !util.isHexDigit(c2))
                        throw invalidChar(read2());
                      return buffer2 += read2(), String.fromCodePoint(parseInt(buffer2, 16));
                    }();
                  case "u":
                    return read2(), unicodeEscape();
                  case "\n":
                  case "\u2028":
                  case "\u2029":
                    return read2(), "";
                  case "\r":
                    return read2(), "\n" === peek() && read2(), "";
                  case "1":
                  case "2":
                  case "3":
                  case "4":
                  case "5":
                  case "6":
                  case "7":
                  case "8":
                  case "9":
                  case void 0:
                    throw invalidChar(read2());
                }
                return read2();
              }());
            case '"':
              return doubleQuote ? (read2(), newToken("string", buffer)) : void (buffer += read2());
            case "'":
              return doubleQuote ? void (buffer += read2()) : (read2(), newToken("string", buffer));
            case "\n":
            case "\r":
              throw invalidChar(read2());
            case "\u2028":
            case "\u2029":
              !function(c2) {
                console.warn(`JSON5: '${formatChar(c2)}' in strings is not valid ECMAScript; consider escaping`);
              }(c);
              break;
            case void 0:
              throw invalidChar(read2());
          }
          buffer += read2();
        }, start() {
          switch (c) {
            case "{":
            case "[":
              return newToken("punctuator", read2());
          }
          lexState = "value";
        }, beforePropertyName() {
          switch (c) {
            case "$":
            case "_":
              return buffer = read2(), void (lexState = "identifierName");
            case "\\":
              return read2(), void (lexState = "identifierNameStartEscape");
            case "}":
              return newToken("punctuator", read2());
            case '"':
            case "'":
              return doubleQuote = '"' === read2(), void (lexState = "string");
          }
          if (util.isIdStartChar(c))
            return buffer += read2(), void (lexState = "identifierName");
          throw invalidChar(read2());
        }, afterPropertyName() {
          if (":" === c)
            return newToken("punctuator", read2());
          throw invalidChar(read2());
        }, beforePropertyValue() {
          lexState = "value";
        }, afterPropertyValue() {
          switch (c) {
            case ",":
            case "}":
              return newToken("punctuator", read2());
          }
          throw invalidChar(read2());
        }, beforeArrayValue() {
          if ("]" === c)
            return newToken("punctuator", read2());
          lexState = "value";
        }, afterArrayValue() {
          switch (c) {
            case ",":
            case "]":
              return newToken("punctuator", read2());
          }
          throw invalidChar(read2());
        }, end() {
          throw invalidChar(read2());
        } };
        function newToken(type, value) {
          return { type, value, line, column };
        }
        function literal2(s) {
          for (const c2 of s) {
            if (peek() !== c2)
              throw invalidChar(read2());
            read2();
          }
        }
        function unicodeEscape() {
          let buffer2 = "", count = 4;
          for (; count-- > 0; ) {
            const c2 = peek();
            if (!util.isHexDigit(c2))
              throw invalidChar(read2());
            buffer2 += read2();
          }
          return String.fromCodePoint(parseInt(buffer2, 16));
        }
        const parseStates = { start() {
          if ("eof" === token.type)
            throw invalidEOF();
          push();
        }, beforePropertyName() {
          switch (token.type) {
            case "identifier":
            case "string":
              return key = token.value, void (parseState = "afterPropertyName");
            case "punctuator":
              return void pop();
            case "eof":
              throw invalidEOF();
          }
        }, afterPropertyName() {
          if ("eof" === token.type)
            throw invalidEOF();
          parseState = "beforePropertyValue";
        }, beforePropertyValue() {
          if ("eof" === token.type)
            throw invalidEOF();
          push();
        }, beforeArrayValue() {
          if ("eof" === token.type)
            throw invalidEOF();
          "punctuator" !== token.type || "]" !== token.value ? push() : pop();
        }, afterPropertyValue() {
          if ("eof" === token.type)
            throw invalidEOF();
          switch (token.value) {
            case ",":
              return void (parseState = "beforePropertyName");
            case "}":
              pop();
          }
        }, afterArrayValue() {
          if ("eof" === token.type)
            throw invalidEOF();
          switch (token.value) {
            case ",":
              return void (parseState = "beforeArrayValue");
            case "]":
              pop();
          }
        }, end() {
        } };
        function push() {
          let value;
          switch (token.type) {
            case "punctuator":
              switch (token.value) {
                case "{":
                  value = {};
                  break;
                case "[":
                  value = [];
              }
              break;
            case "null":
            case "boolean":
            case "numeric":
            case "string":
              value = token.value;
          }
          if (void 0 === root)
            root = value;
          else {
            const parent = stack[stack.length - 1];
            Array.isArray(parent) ? parent.push(value) : parent[key] = value;
          }
          if (null !== value && "object" == typeof value)
            stack.push(value), parseState = Array.isArray(value) ? "beforeArrayValue" : "beforePropertyName";
          else {
            const current2 = stack[stack.length - 1];
            parseState = null == current2 ? "end" : Array.isArray(current2) ? "afterArrayValue" : "afterPropertyValue";
          }
        }
        function pop() {
          stack.pop();
          const current2 = stack[stack.length - 1];
          parseState = null == current2 ? "end" : Array.isArray(current2) ? "afterArrayValue" : "afterPropertyValue";
        }
        function invalidChar(c2) {
          return syntaxError(void 0 === c2 ? `JSON5: invalid end of input at ${line}:${column}` : `JSON5: invalid character '${formatChar(c2)}' at ${line}:${column}`);
        }
        function invalidEOF() {
          return syntaxError(`JSON5: invalid end of input at ${line}:${column}`);
        }
        function invalidIdentifier() {
          return column -= 5, syntaxError(`JSON5: invalid identifier character at ${line}:${column}`);
        }
        function formatChar(c2) {
          const replacements = { "'": "\\'", '"': '\\"', "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\v", "\0": "\\0", "\u2028": "\\u2028", "\u2029": "\\u2029" };
          if (replacements[c2])
            return replacements[c2];
          if (c2 < " ") {
            const hexString = c2.charCodeAt(0).toString(16);
            return "\\x" + ("00" + hexString).substring(hexString.length);
          }
          return c2;
        }
        function syntaxError(message) {
          const err = new SyntaxError(message);
          return err.lineNumber = line, err.columnNumber = column, err;
        }
        const JSON5 = { parse: function(text, reviver) {
          source = String(text), parseState = "start", stack = [], pos = 0, line = 1, column = 0, token = void 0, key = void 0, root = void 0;
          do {
            token = lex(), parseStates[parseState]();
          } while ("eof" !== token.type);
          return "function" == typeof reviver ? internalize({ "": root }, "", reviver) : root;
        }, stringify: function(value, replacer, space) {
          const stack2 = [];
          let propertyList, replacerFunc, quote, indent = "", gap = "";
          if (null == replacer || "object" != typeof replacer || Array.isArray(replacer) || (space = replacer.space, quote = replacer.quote, replacer = replacer.replacer), "function" == typeof replacer)
            replacerFunc = replacer;
          else if (Array.isArray(replacer)) {
            propertyList = [];
            for (const v of replacer) {
              let item;
              "string" == typeof v ? item = v : ("number" == typeof v || v instanceof String || v instanceof Number) && (item = String(v)), void 0 !== item && propertyList.indexOf(item) < 0 && propertyList.push(item);
            }
          }
          return space instanceof Number ? space = Number(space) : space instanceof String && (space = String(space)), "number" == typeof space ? space > 0 && (space = Math.min(10, Math.floor(space)), gap = "          ".substr(0, space)) : "string" == typeof space && (gap = space.substr(0, 10)), serializeProperty("", { "": value });
          function serializeProperty(key2, holder) {
            let value2 = holder[key2];
            switch (null != value2 && ("function" == typeof value2.toJSON5 ? value2 = value2.toJSON5(key2) : "function" == typeof value2.toJSON && (value2 = value2.toJSON(key2))), replacerFunc && (value2 = replacerFunc.call(holder, key2, value2)), value2 instanceof Number ? value2 = Number(value2) : value2 instanceof String ? value2 = String(value2) : value2 instanceof Boolean && (value2 = value2.valueOf()), value2) {
              case null:
                return "null";
              case true:
                return "true";
              case false:
                return "false";
            }
            return "string" == typeof value2 ? quoteString(value2) : "number" == typeof value2 ? String(value2) : "object" == typeof value2 ? Array.isArray(value2) ? function(value3) {
              if (stack2.indexOf(value3) >= 0)
                throw TypeError("Converting circular structure to JSON5");
              stack2.push(value3);
              let stepback = indent;
              indent += gap;
              let final, partial = [];
              for (let i = 0; i < value3.length; i++) {
                const propertyString = serializeProperty(String(i), value3);
                partial.push(void 0 !== propertyString ? propertyString : "null");
              }
              if (0 === partial.length)
                final = "[]";
              else if ("" === gap) {
                final = "[" + partial.join(",") + "]";
              } else {
                let separator = ",\n" + indent, properties = partial.join(separator);
                final = "[\n" + indent + properties + ",\n" + stepback + "]";
              }
              return stack2.pop(), indent = stepback, final;
            }(value2) : function(value3) {
              if (stack2.indexOf(value3) >= 0)
                throw TypeError("Converting circular structure to JSON5");
              stack2.push(value3);
              let stepback = indent;
              indent += gap;
              let final, keys = propertyList || Object.keys(value3), partial = [];
              for (const key3 of keys) {
                const propertyString = serializeProperty(key3, value3);
                if (void 0 !== propertyString) {
                  let member = serializeKey(key3) + ":";
                  "" !== gap && (member += " "), member += propertyString, partial.push(member);
                }
              }
              if (0 === partial.length)
                final = "{}";
              else {
                let properties;
                if ("" === gap)
                  properties = partial.join(","), final = "{" + properties + "}";
                else {
                  let separator = ",\n" + indent;
                  properties = partial.join(separator), final = "{\n" + indent + properties + ",\n" + stepback + "}";
                }
              }
              return stack2.pop(), indent = stepback, final;
            }(value2) : void 0;
          }
          function quoteString(value2) {
            const quotes = { "'": 0.1, '"': 0.2 }, replacements = { "'": "\\'", '"': '\\"', "\\": "\\\\", "\b": "\\b", "\f": "\\f", "\n": "\\n", "\r": "\\r", "	": "\\t", "\v": "\\v", "\0": "\\0", "\u2028": "\\u2028", "\u2029": "\\u2029" };
            let product = "";
            for (let i = 0; i < value2.length; i++) {
              const c2 = value2[i];
              switch (c2) {
                case "'":
                case '"':
                  quotes[c2]++, product += c2;
                  continue;
                case "\0":
                  if (util.isDigit(value2[i + 1])) {
                    product += "\\x00";
                    continue;
                  }
              }
              if (replacements[c2])
                product += replacements[c2];
              else if (c2 < " ") {
                let hexString = c2.charCodeAt(0).toString(16);
                product += "\\x" + ("00" + hexString).substring(hexString.length);
              } else
                product += c2;
            }
            const quoteChar = quote || Object.keys(quotes).reduce((a, b) => quotes[a] < quotes[b] ? a : b);
            return product = product.replace(new RegExp(quoteChar, "g"), replacements[quoteChar]), quoteChar + product + quoteChar;
          }
          function serializeKey(key2) {
            if (0 === key2.length)
              return quoteString(key2);
            const firstChar = String.fromCodePoint(key2.codePointAt(0));
            if (!util.isIdStartChar(firstChar))
              return quoteString(key2);
            for (let i = firstChar.length; i < key2.length; i++)
              if (!util.isIdContinueChar(String.fromCodePoint(key2.codePointAt(i))))
                return quoteString(key2);
            return key2;
          }
        } };
        const __WEBPACK_DEFAULT_EXPORT__ = JSON5;
      }, "./node_modules/.pnpm/globals@11.12.0/node_modules/globals/globals.json": (module2) => {
        "use strict";
        module2.exports = JSON.parse('{"builtin":{"Array":false,"ArrayBuffer":false,"Atomics":false,"BigInt":false,"BigInt64Array":false,"BigUint64Array":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"globalThis":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es5":{"Array":false,"Boolean":false,"constructor":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"propertyIsEnumerable":false,"RangeError":false,"ReferenceError":false,"RegExp":false,"String":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false},"es2015":{"Array":false,"ArrayBuffer":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"es2017":{"Array":false,"ArrayBuffer":false,"Atomics":false,"Boolean":false,"constructor":false,"DataView":false,"Date":false,"decodeURI":false,"decodeURIComponent":false,"encodeURI":false,"encodeURIComponent":false,"Error":false,"escape":false,"eval":false,"EvalError":false,"Float32Array":false,"Float64Array":false,"Function":false,"hasOwnProperty":false,"Infinity":false,"Int16Array":false,"Int32Array":false,"Int8Array":false,"isFinite":false,"isNaN":false,"isPrototypeOf":false,"JSON":false,"Map":false,"Math":false,"NaN":false,"Number":false,"Object":false,"parseFloat":false,"parseInt":false,"Promise":false,"propertyIsEnumerable":false,"Proxy":false,"RangeError":false,"ReferenceError":false,"Reflect":false,"RegExp":false,"Set":false,"SharedArrayBuffer":false,"String":false,"Symbol":false,"SyntaxError":false,"toLocaleString":false,"toString":false,"TypeError":false,"Uint16Array":false,"Uint32Array":false,"Uint8Array":false,"Uint8ClampedArray":false,"undefined":false,"unescape":false,"URIError":false,"valueOf":false,"WeakMap":false,"WeakSet":false},"browser":{"AbortController":false,"AbortSignal":false,"addEventListener":false,"alert":false,"AnalyserNode":false,"Animation":false,"AnimationEffectReadOnly":false,"AnimationEffectTiming":false,"AnimationEffectTimingReadOnly":false,"AnimationEvent":false,"AnimationPlaybackEvent":false,"AnimationTimeline":false,"applicationCache":false,"ApplicationCache":false,"ApplicationCacheErrorEvent":false,"atob":false,"Attr":false,"Audio":false,"AudioBuffer":false,"AudioBufferSourceNode":false,"AudioContext":false,"AudioDestinationNode":false,"AudioListener":false,"AudioNode":false,"AudioParam":false,"AudioProcessingEvent":false,"AudioScheduledSourceNode":false,"AudioWorkletGlobalScope ":false,"AudioWorkletNode":false,"AudioWorkletProcessor":false,"BarProp":false,"BaseAudioContext":false,"BatteryManager":false,"BeforeUnloadEvent":false,"BiquadFilterNode":false,"Blob":false,"BlobEvent":false,"blur":false,"BroadcastChannel":false,"btoa":false,"BudgetService":false,"ByteLengthQueuingStrategy":false,"Cache":false,"caches":false,"CacheStorage":false,"cancelAnimationFrame":false,"cancelIdleCallback":false,"CanvasCaptureMediaStreamTrack":false,"CanvasGradient":false,"CanvasPattern":false,"CanvasRenderingContext2D":false,"ChannelMergerNode":false,"ChannelSplitterNode":false,"CharacterData":false,"clearInterval":false,"clearTimeout":false,"clientInformation":false,"ClipboardEvent":false,"close":false,"closed":false,"CloseEvent":false,"Comment":false,"CompositionEvent":false,"confirm":false,"console":false,"ConstantSourceNode":false,"ConvolverNode":false,"CountQueuingStrategy":false,"createImageBitmap":false,"Credential":false,"CredentialsContainer":false,"crypto":false,"Crypto":false,"CryptoKey":false,"CSS":false,"CSSConditionRule":false,"CSSFontFaceRule":false,"CSSGroupingRule":false,"CSSImportRule":false,"CSSKeyframeRule":false,"CSSKeyframesRule":false,"CSSMediaRule":false,"CSSNamespaceRule":false,"CSSPageRule":false,"CSSRule":false,"CSSRuleList":false,"CSSStyleDeclaration":false,"CSSStyleRule":false,"CSSStyleSheet":false,"CSSSupportsRule":false,"CustomElementRegistry":false,"customElements":false,"CustomEvent":false,"DataTransfer":false,"DataTransferItem":false,"DataTransferItemList":false,"defaultstatus":false,"defaultStatus":false,"DelayNode":false,"DeviceMotionEvent":false,"DeviceOrientationEvent":false,"devicePixelRatio":false,"dispatchEvent":false,"document":false,"Document":false,"DocumentFragment":false,"DocumentType":false,"DOMError":false,"DOMException":false,"DOMImplementation":false,"DOMMatrix":false,"DOMMatrixReadOnly":false,"DOMParser":false,"DOMPoint":false,"DOMPointReadOnly":false,"DOMQuad":false,"DOMRect":false,"DOMRectReadOnly":false,"DOMStringList":false,"DOMStringMap":false,"DOMTokenList":false,"DragEvent":false,"DynamicsCompressorNode":false,"Element":false,"ErrorEvent":false,"event":false,"Event":false,"EventSource":false,"EventTarget":false,"external":false,"fetch":false,"File":false,"FileList":false,"FileReader":false,"find":false,"focus":false,"FocusEvent":false,"FontFace":false,"FontFaceSetLoadEvent":false,"FormData":false,"frameElement":false,"frames":false,"GainNode":false,"Gamepad":false,"GamepadButton":false,"GamepadEvent":false,"getComputedStyle":false,"getSelection":false,"HashChangeEvent":false,"Headers":false,"history":false,"History":false,"HTMLAllCollection":false,"HTMLAnchorElement":false,"HTMLAreaElement":false,"HTMLAudioElement":false,"HTMLBaseElement":false,"HTMLBodyElement":false,"HTMLBRElement":false,"HTMLButtonElement":false,"HTMLCanvasElement":false,"HTMLCollection":false,"HTMLContentElement":false,"HTMLDataElement":false,"HTMLDataListElement":false,"HTMLDetailsElement":false,"HTMLDialogElement":false,"HTMLDirectoryElement":false,"HTMLDivElement":false,"HTMLDListElement":false,"HTMLDocument":false,"HTMLElement":false,"HTMLEmbedElement":false,"HTMLFieldSetElement":false,"HTMLFontElement":false,"HTMLFormControlsCollection":false,"HTMLFormElement":false,"HTMLFrameElement":false,"HTMLFrameSetElement":false,"HTMLHeadElement":false,"HTMLHeadingElement":false,"HTMLHRElement":false,"HTMLHtmlElement":false,"HTMLIFrameElement":false,"HTMLImageElement":false,"HTMLInputElement":false,"HTMLLabelElement":false,"HTMLLegendElement":false,"HTMLLIElement":false,"HTMLLinkElement":false,"HTMLMapElement":false,"HTMLMarqueeElement":false,"HTMLMediaElement":false,"HTMLMenuElement":false,"HTMLMetaElement":false,"HTMLMeterElement":false,"HTMLModElement":false,"HTMLObjectElement":false,"HTMLOListElement":false,"HTMLOptGroupElement":false,"HTMLOptionElement":false,"HTMLOptionsCollection":false,"HTMLOutputElement":false,"HTMLParagraphElement":false,"HTMLParamElement":false,"HTMLPictureElement":false,"HTMLPreElement":false,"HTMLProgressElement":false,"HTMLQuoteElement":false,"HTMLScriptElement":false,"HTMLSelectElement":false,"HTMLShadowElement":false,"HTMLSlotElement":false,"HTMLSourceElement":false,"HTMLSpanElement":false,"HTMLStyleElement":false,"HTMLTableCaptionElement":false,"HTMLTableCellElement":false,"HTMLTableColElement":false,"HTMLTableElement":false,"HTMLTableRowElement":false,"HTMLTableSectionElement":false,"HTMLTemplateElement":false,"HTMLTextAreaElement":false,"HTMLTimeElement":false,"HTMLTitleElement":false,"HTMLTrackElement":false,"HTMLUListElement":false,"HTMLUnknownElement":false,"HTMLVideoElement":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"IdleDeadline":false,"IIRFilterNode":false,"Image":false,"ImageBitmap":false,"ImageBitmapRenderingContext":false,"ImageCapture":false,"ImageData":false,"indexedDB":false,"innerHeight":false,"innerWidth":false,"InputEvent":false,"IntersectionObserver":false,"IntersectionObserverEntry":false,"Intl":false,"isSecureContext":false,"KeyboardEvent":false,"KeyframeEffect":false,"KeyframeEffectReadOnly":false,"length":false,"localStorage":false,"location":true,"Location":false,"locationbar":false,"matchMedia":false,"MediaDeviceInfo":false,"MediaDevices":false,"MediaElementAudioSourceNode":false,"MediaEncryptedEvent":false,"MediaError":false,"MediaKeyMessageEvent":false,"MediaKeySession":false,"MediaKeyStatusMap":false,"MediaKeySystemAccess":false,"MediaList":false,"MediaQueryList":false,"MediaQueryListEvent":false,"MediaRecorder":false,"MediaSettingsRange":false,"MediaSource":false,"MediaStream":false,"MediaStreamAudioDestinationNode":false,"MediaStreamAudioSourceNode":false,"MediaStreamEvent":false,"MediaStreamTrack":false,"MediaStreamTrackEvent":false,"menubar":false,"MessageChannel":false,"MessageEvent":false,"MessagePort":false,"MIDIAccess":false,"MIDIConnectionEvent":false,"MIDIInput":false,"MIDIInputMap":false,"MIDIMessageEvent":false,"MIDIOutput":false,"MIDIOutputMap":false,"MIDIPort":false,"MimeType":false,"MimeTypeArray":false,"MouseEvent":false,"moveBy":false,"moveTo":false,"MutationEvent":false,"MutationObserver":false,"MutationRecord":false,"name":false,"NamedNodeMap":false,"NavigationPreloadManager":false,"navigator":false,"Navigator":false,"NetworkInformation":false,"Node":false,"NodeFilter":false,"NodeIterator":false,"NodeList":false,"Notification":false,"OfflineAudioCompletionEvent":false,"OfflineAudioContext":false,"offscreenBuffering":false,"OffscreenCanvas":true,"onabort":true,"onafterprint":true,"onanimationend":true,"onanimationiteration":true,"onanimationstart":true,"onappinstalled":true,"onauxclick":true,"onbeforeinstallprompt":true,"onbeforeprint":true,"onbeforeunload":true,"onblur":true,"oncancel":true,"oncanplay":true,"oncanplaythrough":true,"onchange":true,"onclick":true,"onclose":true,"oncontextmenu":true,"oncuechange":true,"ondblclick":true,"ondevicemotion":true,"ondeviceorientation":true,"ondeviceorientationabsolute":true,"ondrag":true,"ondragend":true,"ondragenter":true,"ondragleave":true,"ondragover":true,"ondragstart":true,"ondrop":true,"ondurationchange":true,"onemptied":true,"onended":true,"onerror":true,"onfocus":true,"ongotpointercapture":true,"onhashchange":true,"oninput":true,"oninvalid":true,"onkeydown":true,"onkeypress":true,"onkeyup":true,"onlanguagechange":true,"onload":true,"onloadeddata":true,"onloadedmetadata":true,"onloadstart":true,"onlostpointercapture":true,"onmessage":true,"onmessageerror":true,"onmousedown":true,"onmouseenter":true,"onmouseleave":true,"onmousemove":true,"onmouseout":true,"onmouseover":true,"onmouseup":true,"onmousewheel":true,"onoffline":true,"ononline":true,"onpagehide":true,"onpageshow":true,"onpause":true,"onplay":true,"onplaying":true,"onpointercancel":true,"onpointerdown":true,"onpointerenter":true,"onpointerleave":true,"onpointermove":true,"onpointerout":true,"onpointerover":true,"onpointerup":true,"onpopstate":true,"onprogress":true,"onratechange":true,"onrejectionhandled":true,"onreset":true,"onresize":true,"onscroll":true,"onsearch":true,"onseeked":true,"onseeking":true,"onselect":true,"onstalled":true,"onstorage":true,"onsubmit":true,"onsuspend":true,"ontimeupdate":true,"ontoggle":true,"ontransitionend":true,"onunhandledrejection":true,"onunload":true,"onvolumechange":true,"onwaiting":true,"onwheel":true,"open":false,"openDatabase":false,"opener":false,"Option":false,"origin":false,"OscillatorNode":false,"outerHeight":false,"outerWidth":false,"PageTransitionEvent":false,"pageXOffset":false,"pageYOffset":false,"PannerNode":false,"parent":false,"Path2D":false,"PaymentAddress":false,"PaymentRequest":false,"PaymentRequestUpdateEvent":false,"PaymentResponse":false,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceLongTaskTiming":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceNavigationTiming":false,"PerformanceObserver":false,"PerformanceObserverEntryList":false,"PerformancePaintTiming":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"PeriodicWave":false,"Permissions":false,"PermissionStatus":false,"personalbar":false,"PhotoCapabilities":false,"Plugin":false,"PluginArray":false,"PointerEvent":false,"PopStateEvent":false,"postMessage":false,"Presentation":false,"PresentationAvailability":false,"PresentationConnection":false,"PresentationConnectionAvailableEvent":false,"PresentationConnectionCloseEvent":false,"PresentationConnectionList":false,"PresentationReceiver":false,"PresentationRequest":false,"print":false,"ProcessingInstruction":false,"ProgressEvent":false,"PromiseRejectionEvent":false,"prompt":false,"PushManager":false,"PushSubscription":false,"PushSubscriptionOptions":false,"queueMicrotask":false,"RadioNodeList":false,"Range":false,"ReadableStream":false,"registerProcessor":false,"RemotePlayback":false,"removeEventListener":false,"Request":false,"requestAnimationFrame":false,"requestIdleCallback":false,"resizeBy":false,"ResizeObserver":false,"ResizeObserverEntry":false,"resizeTo":false,"Response":false,"RTCCertificate":false,"RTCDataChannel":false,"RTCDataChannelEvent":false,"RTCDtlsTransport":false,"RTCIceCandidate":false,"RTCIceGatherer":false,"RTCIceTransport":false,"RTCPeerConnection":false,"RTCPeerConnectionIceEvent":false,"RTCRtpContributingSource":false,"RTCRtpReceiver":false,"RTCRtpSender":false,"RTCSctpTransport":false,"RTCSessionDescription":false,"RTCStatsReport":false,"RTCTrackEvent":false,"screen":false,"Screen":false,"screenLeft":false,"ScreenOrientation":false,"screenTop":false,"screenX":false,"screenY":false,"ScriptProcessorNode":false,"scroll":false,"scrollbars":false,"scrollBy":false,"scrollTo":false,"scrollX":false,"scrollY":false,"SecurityPolicyViolationEvent":false,"Selection":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerRegistration":false,"sessionStorage":false,"setInterval":false,"setTimeout":false,"ShadowRoot":false,"SharedWorker":false,"SourceBuffer":false,"SourceBufferList":false,"speechSynthesis":false,"SpeechSynthesisEvent":false,"SpeechSynthesisUtterance":false,"StaticRange":false,"status":false,"statusbar":false,"StereoPannerNode":false,"stop":false,"Storage":false,"StorageEvent":false,"StorageManager":false,"styleMedia":false,"StyleSheet":false,"StyleSheetList":false,"SubtleCrypto":false,"SVGAElement":false,"SVGAngle":false,"SVGAnimatedAngle":false,"SVGAnimatedBoolean":false,"SVGAnimatedEnumeration":false,"SVGAnimatedInteger":false,"SVGAnimatedLength":false,"SVGAnimatedLengthList":false,"SVGAnimatedNumber":false,"SVGAnimatedNumberList":false,"SVGAnimatedPreserveAspectRatio":false,"SVGAnimatedRect":false,"SVGAnimatedString":false,"SVGAnimatedTransformList":false,"SVGAnimateElement":false,"SVGAnimateMotionElement":false,"SVGAnimateTransformElement":false,"SVGAnimationElement":false,"SVGCircleElement":false,"SVGClipPathElement":false,"SVGComponentTransferFunctionElement":false,"SVGDefsElement":false,"SVGDescElement":false,"SVGDiscardElement":false,"SVGElement":false,"SVGEllipseElement":false,"SVGFEBlendElement":false,"SVGFEColorMatrixElement":false,"SVGFEComponentTransferElement":false,"SVGFECompositeElement":false,"SVGFEConvolveMatrixElement":false,"SVGFEDiffuseLightingElement":false,"SVGFEDisplacementMapElement":false,"SVGFEDistantLightElement":false,"SVGFEDropShadowElement":false,"SVGFEFloodElement":false,"SVGFEFuncAElement":false,"SVGFEFuncBElement":false,"SVGFEFuncGElement":false,"SVGFEFuncRElement":false,"SVGFEGaussianBlurElement":false,"SVGFEImageElement":false,"SVGFEMergeElement":false,"SVGFEMergeNodeElement":false,"SVGFEMorphologyElement":false,"SVGFEOffsetElement":false,"SVGFEPointLightElement":false,"SVGFESpecularLightingElement":false,"SVGFESpotLightElement":false,"SVGFETileElement":false,"SVGFETurbulenceElement":false,"SVGFilterElement":false,"SVGForeignObjectElement":false,"SVGGElement":false,"SVGGeometryElement":false,"SVGGradientElement":false,"SVGGraphicsElement":false,"SVGImageElement":false,"SVGLength":false,"SVGLengthList":false,"SVGLinearGradientElement":false,"SVGLineElement":false,"SVGMarkerElement":false,"SVGMaskElement":false,"SVGMatrix":false,"SVGMetadataElement":false,"SVGMPathElement":false,"SVGNumber":false,"SVGNumberList":false,"SVGPathElement":false,"SVGPatternElement":false,"SVGPoint":false,"SVGPointList":false,"SVGPolygonElement":false,"SVGPolylineElement":false,"SVGPreserveAspectRatio":false,"SVGRadialGradientElement":false,"SVGRect":false,"SVGRectElement":false,"SVGScriptElement":false,"SVGSetElement":false,"SVGStopElement":false,"SVGStringList":false,"SVGStyleElement":false,"SVGSVGElement":false,"SVGSwitchElement":false,"SVGSymbolElement":false,"SVGTextContentElement":false,"SVGTextElement":false,"SVGTextPathElement":false,"SVGTextPositioningElement":false,"SVGTitleElement":false,"SVGTransform":false,"SVGTransformList":false,"SVGTSpanElement":false,"SVGUnitTypes":false,"SVGUseElement":false,"SVGViewElement":false,"TaskAttributionTiming":false,"Text":false,"TextDecoder":false,"TextEncoder":false,"TextEvent":false,"TextMetrics":false,"TextTrack":false,"TextTrackCue":false,"TextTrackCueList":false,"TextTrackList":false,"TimeRanges":false,"toolbar":false,"top":false,"Touch":false,"TouchEvent":false,"TouchList":false,"TrackEvent":false,"TransitionEvent":false,"TreeWalker":false,"UIEvent":false,"URL":false,"URLSearchParams":false,"ValidityState":false,"visualViewport":false,"VisualViewport":false,"VTTCue":false,"WaveShaperNode":false,"WebAssembly":false,"WebGL2RenderingContext":false,"WebGLActiveInfo":false,"WebGLBuffer":false,"WebGLContextEvent":false,"WebGLFramebuffer":false,"WebGLProgram":false,"WebGLQuery":false,"WebGLRenderbuffer":false,"WebGLRenderingContext":false,"WebGLSampler":false,"WebGLShader":false,"WebGLShaderPrecisionFormat":false,"WebGLSync":false,"WebGLTexture":false,"WebGLTransformFeedback":false,"WebGLUniformLocation":false,"WebGLVertexArrayObject":false,"WebSocket":false,"WheelEvent":false,"window":false,"Window":false,"Worker":false,"WritableStream":false,"XMLDocument":false,"XMLHttpRequest":false,"XMLHttpRequestEventTarget":false,"XMLHttpRequestUpload":false,"XMLSerializer":false,"XPathEvaluator":false,"XPathExpression":false,"XPathResult":false,"XSLTProcessor":false},"worker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"clearInterval":false,"clearTimeout":false,"close":true,"console":false,"fetch":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":true,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onlanguagechange":true,"onmessage":true,"onoffline":true,"ononline":true,"onrejectionhandled":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"removeEventListener":false,"Request":false,"Response":false,"self":true,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"node":{"__dirname":false,"__filename":false,"Buffer":false,"clearImmediate":false,"clearInterval":false,"clearTimeout":false,"console":false,"exports":true,"global":false,"Intl":false,"module":false,"process":false,"queueMicrotask":false,"require":false,"setImmediate":false,"setInterval":false,"setTimeout":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false},"commonjs":{"exports":true,"global":false,"module":false,"require":false},"amd":{"define":false,"require":false},"mocha":{"after":false,"afterEach":false,"before":false,"beforeEach":false,"context":false,"describe":false,"it":false,"mocha":false,"run":false,"setup":false,"specify":false,"suite":false,"suiteSetup":false,"suiteTeardown":false,"teardown":false,"test":false,"xcontext":false,"xdescribe":false,"xit":false,"xspecify":false},"jasmine":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fail":false,"fdescribe":false,"fit":false,"it":false,"jasmine":false,"pending":false,"runs":false,"spyOn":false,"spyOnProperty":false,"waits":false,"waitsFor":false,"xdescribe":false,"xit":false},"jest":{"afterAll":false,"afterEach":false,"beforeAll":false,"beforeEach":false,"describe":false,"expect":false,"fdescribe":false,"fit":false,"it":false,"jest":false,"pit":false,"require":false,"test":false,"xdescribe":false,"xit":false,"xtest":false},"qunit":{"asyncTest":false,"deepEqual":false,"equal":false,"expect":false,"module":false,"notDeepEqual":false,"notEqual":false,"notOk":false,"notPropEqual":false,"notStrictEqual":false,"ok":false,"propEqual":false,"QUnit":false,"raises":false,"start":false,"stop":false,"strictEqual":false,"test":false,"throws":false},"phantomjs":{"console":true,"exports":true,"phantom":true,"require":true,"WebPage":true},"couch":{"emit":false,"exports":false,"getRow":false,"log":false,"module":false,"provides":false,"require":false,"respond":false,"send":false,"start":false,"sum":false},"rhino":{"defineClass":false,"deserialize":false,"gc":false,"help":false,"importClass":false,"importPackage":false,"java":false,"load":false,"loadClass":false,"Packages":false,"print":false,"quit":false,"readFile":false,"readUrl":false,"runCommand":false,"seal":false,"serialize":false,"spawn":false,"sync":false,"toint32":false,"version":false},"nashorn":{"__DIR__":false,"__FILE__":false,"__LINE__":false,"com":false,"edu":false,"exit":false,"java":false,"Java":false,"javafx":false,"JavaImporter":false,"javax":false,"JSAdapter":false,"load":false,"loadWithNewGlobal":false,"org":false,"Packages":false,"print":false,"quit":false},"wsh":{"ActiveXObject":true,"Enumerator":true,"GetObject":true,"ScriptEngine":true,"ScriptEngineBuildVersion":true,"ScriptEngineMajorVersion":true,"ScriptEngineMinorVersion":true,"VBArray":true,"WScript":true,"WSH":true,"XDomainRequest":true},"jquery":{"$":false,"jQuery":false},"yui":{"YAHOO":false,"YAHOO_config":false,"YUI":false,"YUI_config":false},"shelljs":{"cat":false,"cd":false,"chmod":false,"config":false,"cp":false,"dirs":false,"echo":false,"env":false,"error":false,"exec":false,"exit":false,"find":false,"grep":false,"ln":false,"ls":false,"mkdir":false,"mv":false,"popd":false,"pushd":false,"pwd":false,"rm":false,"sed":false,"set":false,"target":false,"tempdir":false,"test":false,"touch":false,"which":false},"prototypejs":{"$":false,"$$":false,"$A":false,"$break":false,"$continue":false,"$F":false,"$H":false,"$R":false,"$w":false,"Abstract":false,"Ajax":false,"Autocompleter":false,"Builder":false,"Class":false,"Control":false,"Draggable":false,"Draggables":false,"Droppables":false,"Effect":false,"Element":false,"Enumerable":false,"Event":false,"Field":false,"Form":false,"Hash":false,"Insertion":false,"ObjectRange":false,"PeriodicalExecuter":false,"Position":false,"Prototype":false,"Scriptaculous":false,"Selector":false,"Sortable":false,"SortableObserver":false,"Sound":false,"Template":false,"Toggle":false,"Try":false},"meteor":{"_":false,"$":false,"Accounts":false,"AccountsClient":false,"AccountsCommon":false,"AccountsServer":false,"App":false,"Assets":false,"Blaze":false,"check":false,"Cordova":false,"DDP":false,"DDPRateLimiter":false,"DDPServer":false,"Deps":false,"EJSON":false,"Email":false,"HTTP":false,"Log":false,"Match":false,"Meteor":false,"Mongo":false,"MongoInternals":false,"Npm":false,"Package":false,"Plugin":false,"process":false,"Random":false,"ReactiveDict":false,"ReactiveVar":false,"Router":false,"ServiceConfiguration":false,"Session":false,"share":false,"Spacebars":false,"Template":false,"Tinytest":false,"Tracker":false,"UI":false,"Utils":false,"WebApp":false,"WebAppInternals":false},"mongo":{"_isWindows":false,"_rand":false,"BulkWriteResult":false,"cat":false,"cd":false,"connect":false,"db":false,"getHostName":false,"getMemInfo":false,"hostname":false,"ISODate":false,"listFiles":false,"load":false,"ls":false,"md5sumFile":false,"mkdir":false,"Mongo":false,"NumberInt":false,"NumberLong":false,"ObjectId":false,"PlanCache":false,"print":false,"printjson":false,"pwd":false,"quit":false,"removeFile":false,"rs":false,"sh":false,"UUID":false,"version":false,"WriteResult":false},"applescript":{"$":false,"Application":false,"Automation":false,"console":false,"delay":false,"Library":false,"ObjC":false,"ObjectSpecifier":false,"Path":false,"Progress":false,"Ref":false},"serviceworker":{"addEventListener":false,"applicationCache":false,"atob":false,"Blob":false,"BroadcastChannel":false,"btoa":false,"Cache":false,"caches":false,"CacheStorage":false,"clearInterval":false,"clearTimeout":false,"Client":false,"clients":false,"Clients":false,"close":true,"console":false,"ExtendableEvent":false,"ExtendableMessageEvent":false,"fetch":false,"FetchEvent":false,"FileReaderSync":false,"FormData":false,"Headers":false,"IDBCursor":false,"IDBCursorWithValue":false,"IDBDatabase":false,"IDBFactory":false,"IDBIndex":false,"IDBKeyRange":false,"IDBObjectStore":false,"IDBOpenDBRequest":false,"IDBRequest":false,"IDBTransaction":false,"IDBVersionChangeEvent":false,"ImageData":false,"importScripts":false,"indexedDB":false,"location":false,"MessageChannel":false,"MessagePort":false,"name":false,"navigator":false,"Notification":false,"onclose":true,"onconnect":true,"onerror":true,"onfetch":true,"oninstall":true,"onlanguagechange":true,"onmessage":true,"onmessageerror":true,"onnotificationclick":true,"onnotificationclose":true,"onoffline":true,"ononline":true,"onpush":true,"onpushsubscriptionchange":true,"onrejectionhandled":true,"onsync":true,"onunhandledrejection":true,"performance":false,"Performance":false,"PerformanceEntry":false,"PerformanceMark":false,"PerformanceMeasure":false,"PerformanceNavigation":false,"PerformanceResourceTiming":false,"PerformanceTiming":false,"postMessage":true,"Promise":false,"queueMicrotask":false,"registration":false,"removeEventListener":false,"Request":false,"Response":false,"self":false,"ServiceWorker":false,"ServiceWorkerContainer":false,"ServiceWorkerGlobalScope":false,"ServiceWorkerMessageEvent":false,"ServiceWorkerRegistration":false,"setInterval":false,"setTimeout":false,"skipWaiting":false,"TextDecoder":false,"TextEncoder":false,"URL":false,"URLSearchParams":false,"WebSocket":false,"WindowClient":false,"Worker":false,"WorkerGlobalScope":false,"XMLHttpRequest":false},"atomtest":{"advanceClock":false,"fakeClearInterval":false,"fakeClearTimeout":false,"fakeSetInterval":false,"fakeSetTimeout":false,"resetTimeouts":false,"waitsForPromise":false},"embertest":{"andThen":false,"click":false,"currentPath":false,"currentRouteName":false,"currentURL":false,"fillIn":false,"find":false,"findAll":false,"findWithAssert":false,"keyEvent":false,"pauseTest":false,"resumeTest":false,"triggerEvent":false,"visit":false,"wait":false},"protractor":{"$":false,"$$":false,"browser":false,"by":false,"By":false,"DartObject":false,"element":false,"protractor":false},"shared-node-browser":{"clearInterval":false,"clearTimeout":false,"console":false,"setInterval":false,"setTimeout":false,"URL":false,"URLSearchParams":false},"webextensions":{"browser":false,"chrome":false,"opr":false},"greasemonkey":{"cloneInto":false,"createObjectIn":false,"exportFunction":false,"GM":false,"GM_addStyle":false,"GM_deleteValue":false,"GM_getResourceText":false,"GM_getResourceURL":false,"GM_getValue":false,"GM_info":false,"GM_listValues":false,"GM_log":false,"GM_openInTab":false,"GM_registerMenuCommand":false,"GM_setClipboard":false,"GM_setValue":false,"GM_xmlhttpRequest":false,"unsafeWindow":false},"devtools":{"$":false,"$_":false,"$$":false,"$0":false,"$1":false,"$2":false,"$3":false,"$4":false,"$x":false,"chrome":false,"clear":false,"copy":false,"debug":false,"dir":false,"dirxml":false,"getEventListeners":false,"inspect":false,"keys":false,"monitor":false,"monitorEvents":false,"profile":false,"profileEnd":false,"queryObjects":false,"table":false,"undebug":false,"unmonitor":false,"unmonitorEvents":false,"values":false}}');
      } }, __webpack_module_cache__ = {};
      function __webpack_require__(moduleId) {
        var cachedModule = __webpack_module_cache__[moduleId];
        if (void 0 !== cachedModule)
          return cachedModule.exports;
        var module2 = __webpack_module_cache__[moduleId] = { exports: {} };
        return __webpack_modules__[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__), module2.exports;
      }
      __webpack_require__.d = (exports2, definition) => {
        for (var key in definition)
          __webpack_require__.o(definition, key) && !__webpack_require__.o(exports2, key) && Object.defineProperty(exports2, key, { enumerable: true, get: definition[key] });
      }, __webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop), __webpack_require__.r = (exports2) => {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" }), Object.defineProperty(exports2, "__esModule", { value: true });
      };
      var __webpack_exports__ = {};
      (() => {
        "use strict";
        __webpack_require__.d(__webpack_exports__, { default: () => transform });
        var lib = __webpack_require__("./node_modules/.pnpm/@babel+core@7.19.1/node_modules/@babel/core/lib/index.js"), external_url_ = __webpack_require__("url"), template_lib = __webpack_require__("./node_modules/.pnpm/@babel+template@7.18.10/node_modules/@babel/template/lib/index.js");
        function TransformImportMetaPlugin(_ctx, opts) {
          return { name: "transform-import-meta", visitor: { Program(path3) {
            const metas = [];
            if (path3.traverse({ MemberExpression(memberExpPath) {
              const { node } = memberExpPath;
              "MetaProperty" === node.object.type && "import" === node.object.meta.name && "meta" === node.object.property.name && "Identifier" === node.property.type && "url" === node.property.name && metas.push(memberExpPath);
            } }), 0 !== metas.length)
              for (const meta of metas)
                meta.replaceWith(template_lib.smart.ast`${opts.filename ? JSON.stringify((0, external_url_.pathToFileURL)(opts.filename)) : "require('url').pathToFileURL(__filename).toString()"}`);
          } } };
        }
        function transform(opts) {
          var _a, _b, _c, _d, _e, _f;
          const _opts = Object.assign(Object.assign({ babelrc: false, configFile: false, compact: false, retainLines: "boolean" != typeof opts.retainLines || opts.retainLines, filename: "", cwd: "/" }, opts.babel), { plugins: [[__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-modules-commonjs@7.18.6_@babel+core@7.19.1/node_modules/@babel/plugin-transform-modules-commonjs/lib/index.js"), { allowTopLevelThis: true }], [__webpack_require__("./node_modules/.pnpm/babel-plugin-dynamic-import-node@2.3.3/node_modules/babel-plugin-dynamic-import-node/lib/index.js"), { noInterop: true }], [TransformImportMetaPlugin, { filename: opts.filename }], [__webpack_require__("./node_modules/.pnpm/@babel+plugin-syntax-class-properties@7.12.13_@babel+core@7.19.1/node_modules/@babel/plugin-syntax-class-properties/lib/index.js")], [__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-export-namespace-from@7.18.9_@babel+core@7.19.1/node_modules/@babel/plugin-proposal-export-namespace-from/lib/index.js")]] });
          opts.ts && (_opts.plugins.push([__webpack_require__("./node_modules/.pnpm/@babel+plugin-transform-typescript@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-transform-typescript/lib/index.js"), { allowDeclareFields: true }]), _opts.plugins.unshift([__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-decorators@7.19.1_@babel+core@7.19.1/node_modules/@babel/plugin-proposal-decorators/lib/index.js"), { legacy: true }]), _opts.plugins.push(__webpack_require__("./node_modules/.pnpm/babel-plugin-parameter-decorator@1.0.16/node_modules/babel-plugin-parameter-decorator/lib/index.js"))), opts.legacy && (_opts.plugins.push(__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-nullish-coalescing-operator@7.18.6_@babel+core@7.19.1/node_modules/@babel/plugin-proposal-nullish-coalescing-operator/lib/index.js")), _opts.plugins.push(__webpack_require__("./node_modules/.pnpm/@babel+plugin-proposal-optional-chaining@7.18.9_@babel+core@7.19.1/node_modules/@babel/plugin-proposal-optional-chaining/lib/index.js"))), opts.babel && Array.isArray(opts.babel.plugins) && (null === (_a = _opts.plugins) || void 0 === _a || _a.push(...opts.babel.plugins));
          try {
            return { code: (null === (_b = (0, lib.transformSync)(opts.source, _opts)) || void 0 === _b ? void 0 : _b.code) || "" };
          } catch (err) {
            return { error: err, code: "exports.__JITI_ERROR__ = " + JSON.stringify({ filename: opts.filename, line: (null === (_c = err.loc) || void 0 === _c ? void 0 : _c.line) || 0, column: (null === (_d = err.loc) || void 0 === _d ? void 0 : _d.column) || 0, code: null === (_e = err.code) || void 0 === _e ? void 0 : _e.replace("BABEL_", "").replace("PARSE_ERROR", "ParseError"), message: null === (_f = err.message) || void 0 === _f ? void 0 : _f.replace("/: ", "").replace(/\(.+\)\s*$/, "") }) };
          }
        }
      })(), module.exports = __webpack_exports__.default;
    })();
  }
});

// node_modules/.pnpm/jiti@1.16.0/node_modules/jiti/lib/index.js
var require_lib = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/jiti@1.16.0/node_modules/jiti/lib/index.js"(exports, module) {
    function onError(err) {
      throw err;
    }
    module.exports = function(filename, opts) {
      const jiti2 = require_jiti();
      opts = { onError, ...opts };
      if (!opts.transform) {
        opts.transform = require_babel();
      }
      return jiti2(filename, opts);
    };
  }
});

// node_modules/.pnpm/merge2@1.4.1/node_modules/merge2/index.js
var require_merge2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/merge2@1.4.1/node_modules/merge2/index.js"(exports, module) {
    "use strict";
    var Stream = _chunkI7OK7DX6cjs.__require.call(void 0, "stream");
    var PassThrough = Stream.PassThrough;
    var slice = Array.prototype.slice;
    module.exports = merge22;
    function merge22() {
      const streamsQueue = [];
      const args = slice.call(arguments);
      let merging = false;
      let options = args[args.length - 1];
      if (options && !Array.isArray(options) && options.pipe == null) {
        args.pop();
      } else {
        options = {};
      }
      const doEnd = options.end !== false;
      const doPipeError = options.pipeError === true;
      if (options.objectMode == null) {
        options.objectMode = true;
      }
      if (options.highWaterMark == null) {
        options.highWaterMark = 64 * 1024;
      }
      const mergedStream = PassThrough(options);
      function addStream() {
        for (let i = 0, len = arguments.length; i < len; i++) {
          streamsQueue.push(pauseStreams(arguments[i], options));
        }
        mergeStream();
        return this;
      }
      function mergeStream() {
        if (merging) {
          return;
        }
        merging = true;
        let streams = streamsQueue.shift();
        if (!streams) {
          process.nextTick(endStream);
          return;
        }
        if (!Array.isArray(streams)) {
          streams = [streams];
        }
        let pipesCount = streams.length + 1;
        function next() {
          if (--pipesCount > 0) {
            return;
          }
          merging = false;
          mergeStream();
        }
        function pipe(stream) {
          function onend() {
            stream.removeListener("merge2UnpipeEnd", onend);
            stream.removeListener("end", onend);
            if (doPipeError) {
              stream.removeListener("error", onerror);
            }
            next();
          }
          function onerror(err) {
            mergedStream.emit("error", err);
          }
          if (stream._readableState.endEmitted) {
            return next();
          }
          stream.on("merge2UnpipeEnd", onend);
          stream.on("end", onend);
          if (doPipeError) {
            stream.on("error", onerror);
          }
          stream.pipe(mergedStream, { end: false });
          stream.resume();
        }
        for (let i = 0; i < streams.length; i++) {
          pipe(streams[i]);
        }
        next();
      }
      function endStream() {
        merging = false;
        mergedStream.emit("queueDrain");
        if (doEnd) {
          mergedStream.end();
        }
      }
      mergedStream.setMaxListeners(0);
      mergedStream.add = addStream;
      mergedStream.on("unpipe", function(stream) {
        stream.emit("merge2UnpipeEnd");
      });
      if (args.length) {
        addStream.apply(null, args);
      }
      return mergedStream;
    }
    function pauseStreams(streams, options) {
      if (!Array.isArray(streams)) {
        if (!streams._readableState && streams.pipe) {
          streams = streams.pipe(PassThrough(options));
        }
        if (!streams._readableState || !streams.pause || !streams.pipe) {
          throw new Error("Only readable stream can be merged.");
        }
        streams.pause();
      } else {
        for (let i = 0, len = streams.length; i < len; i++) {
          streams[i] = pauseStreams(streams[i], options);
        }
      }
      return streams;
    }
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/array.js
var require_array = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.splitWhen = exports.flatten = void 0;
    function flatten(items) {
      return items.reduce((collection, item) => [].concat(collection, item), []);
    }
    exports.flatten = flatten;
    function splitWhen(items, predicate) {
      const result = [[]];
      let groupIndex = 0;
      for (const item of items) {
        if (predicate(item)) {
          groupIndex++;
          result[groupIndex] = [];
        } else {
          result[groupIndex].push(item);
        }
      }
      return result;
    }
    exports.splitWhen = splitWhen;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/errno.js
var require_errno = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/errno.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEnoentCodeError = void 0;
    function isEnoentCodeError(error) {
      return error.code === "ENOENT";
    }
    exports.isEnoentCodeError = isEnoentCodeError;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/fs.js
var require_fs = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/fs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDirentFromStats = void 0;
    var DirentFromStats = class {
      constructor(name, stats) {
        this.name = name;
        this.isBlockDevice = stats.isBlockDevice.bind(stats);
        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
        this.isDirectory = stats.isDirectory.bind(stats);
        this.isFIFO = stats.isFIFO.bind(stats);
        this.isFile = stats.isFile.bind(stats);
        this.isSocket = stats.isSocket.bind(stats);
        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
      }
    };
    function createDirentFromStats(name, stats) {
      return new DirentFromStats(name, stats);
    }
    exports.createDirentFromStats = createDirentFromStats;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/path.js
var require_path = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/path.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.removeLeadingDotSegment = exports.escape = exports.makeAbsolute = exports.unixify = void 0;
    var path3 = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
    var LEADING_DOT_SEGMENT_CHARACTERS_COUNT = 2;
    var UNESCAPED_GLOB_SYMBOLS_RE = /(\\?)([()*?[\]{|}]|^!|[!+@](?=\())/g;
    function unixify(filepath) {
      return filepath.replace(/\\/g, "/");
    }
    exports.unixify = unixify;
    function makeAbsolute(cwd, filepath) {
      return path3.resolve(cwd, filepath);
    }
    exports.makeAbsolute = makeAbsolute;
    function escape(pattern) {
      return pattern.replace(UNESCAPED_GLOB_SYMBOLS_RE, "\\$2");
    }
    exports.escape = escape;
    function removeLeadingDotSegment(entry) {
      if (entry.charAt(0) === ".") {
        const secondCharactery = entry.charAt(1);
        if (secondCharactery === "/" || secondCharactery === "\\") {
          return entry.slice(LEADING_DOT_SEGMENT_CHARACTERS_COUNT);
        }
      }
      return entry;
    }
    exports.removeLeadingDotSegment = removeLeadingDotSegment;
  }
});

// node_modules/.pnpm/is-extglob@2.1.1/node_modules/is-extglob/index.js
var require_is_extglob = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/is-extglob@2.1.1/node_modules/is-extglob/index.js"(exports, module) {
    module.exports = function isExtglob(str) {
      if (typeof str !== "string" || str === "") {
        return false;
      }
      var match;
      while (match = /(\\).|([@?!+*]\(.*\))/g.exec(str)) {
        if (match[2])
          return true;
        str = str.slice(match.index + match[0].length);
      }
      return false;
    };
  }
});

// node_modules/.pnpm/is-glob@4.0.3/node_modules/is-glob/index.js
var require_is_glob = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/is-glob@4.0.3/node_modules/is-glob/index.js"(exports, module) {
    var isExtglob = require_is_extglob();
    var chars = { "{": "}", "(": ")", "[": "]" };
    var strictCheck = function(str) {
      if (str[0] === "!") {
        return true;
      }
      var index2 = 0;
      var pipeIndex = -2;
      var closeSquareIndex = -2;
      var closeCurlyIndex = -2;
      var closeParenIndex = -2;
      var backSlashIndex = -2;
      while (index2 < str.length) {
        if (str[index2] === "*") {
          return true;
        }
        if (str[index2 + 1] === "?" && /[\].+)]/.test(str[index2])) {
          return true;
        }
        if (closeSquareIndex !== -1 && str[index2] === "[" && str[index2 + 1] !== "]") {
          if (closeSquareIndex < index2) {
            closeSquareIndex = str.indexOf("]", index2);
          }
          if (closeSquareIndex > index2) {
            if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
              return true;
            }
            backSlashIndex = str.indexOf("\\", index2);
            if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {
              return true;
            }
          }
        }
        if (closeCurlyIndex !== -1 && str[index2] === "{" && str[index2 + 1] !== "}") {
          closeCurlyIndex = str.indexOf("}", index2);
          if (closeCurlyIndex > index2) {
            backSlashIndex = str.indexOf("\\", index2);
            if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {
              return true;
            }
          }
        }
        if (closeParenIndex !== -1 && str[index2] === "(" && str[index2 + 1] === "?" && /[:!=]/.test(str[index2 + 2]) && str[index2 + 3] !== ")") {
          closeParenIndex = str.indexOf(")", index2);
          if (closeParenIndex > index2) {
            backSlashIndex = str.indexOf("\\", index2);
            if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
              return true;
            }
          }
        }
        if (pipeIndex !== -1 && str[index2] === "(" && str[index2 + 1] !== "|") {
          if (pipeIndex < index2) {
            pipeIndex = str.indexOf("|", index2);
          }
          if (pipeIndex !== -1 && str[pipeIndex + 1] !== ")") {
            closeParenIndex = str.indexOf(")", pipeIndex);
            if (closeParenIndex > pipeIndex) {
              backSlashIndex = str.indexOf("\\", pipeIndex);
              if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {
                return true;
              }
            }
          }
        }
        if (str[index2] === "\\") {
          var open = str[index2 + 1];
          index2 += 2;
          var close = chars[open];
          if (close) {
            var n = str.indexOf(close, index2);
            if (n !== -1) {
              index2 = n + 1;
            }
          }
          if (str[index2] === "!") {
            return true;
          }
        } else {
          index2++;
        }
      }
      return false;
    };
    var relaxedCheck = function(str) {
      if (str[0] === "!") {
        return true;
      }
      var index2 = 0;
      while (index2 < str.length) {
        if (/[*?{}()[\]]/.test(str[index2])) {
          return true;
        }
        if (str[index2] === "\\") {
          var open = str[index2 + 1];
          index2 += 2;
          var close = chars[open];
          if (close) {
            var n = str.indexOf(close, index2);
            if (n !== -1) {
              index2 = n + 1;
            }
          }
          if (str[index2] === "!") {
            return true;
          }
        } else {
          index2++;
        }
      }
      return false;
    };
    module.exports = function isGlob(str, options) {
      if (typeof str !== "string" || str === "") {
        return false;
      }
      if (isExtglob(str)) {
        return true;
      }
      var check = strictCheck;
      if (options && options.strict === false) {
        check = relaxedCheck;
      }
      return check(str);
    };
  }
});

// node_modules/.pnpm/glob-parent@5.1.2/node_modules/glob-parent/index.js
var require_glob_parent = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/glob-parent@5.1.2/node_modules/glob-parent/index.js"(exports, module) {
    "use strict";
    var isGlob = require_is_glob();
    var pathPosixDirname = _chunkI7OK7DX6cjs.__require.call(void 0, "path").posix.dirname;
    var isWin32 = _chunkI7OK7DX6cjs.__require.call(void 0, "os").platform() === "win32";
    var slash2 = "/";
    var backslash = /\\/g;
    var enclosure = /[\{\[].*[\}\]]$/;
    var globby2 = /(^|[^\\])([\{\[]|\([^\)]+$)/;
    var escaped = /\\([\!\*\?\|\[\]\(\)\{\}])/g;
    module.exports = function globParent(str, opts) {
      var options = Object.assign({ flipBackslashes: true }, opts);
      if (options.flipBackslashes && isWin32 && str.indexOf(slash2) < 0) {
        str = str.replace(backslash, slash2);
      }
      if (enclosure.test(str)) {
        str += slash2;
      }
      str += "a";
      do {
        str = pathPosixDirname(str);
      } while (isGlob(str) || globby2.test(str));
      return str.replace(escaped, "$1");
    };
  }
});

// node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/utils.js
var require_utils = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/utils.js"(exports) {
    "use strict";
    exports.isInteger = (num) => {
      if (typeof num === "number") {
        return Number.isInteger(num);
      }
      if (typeof num === "string" && num.trim() !== "") {
        return Number.isInteger(Number(num));
      }
      return false;
    };
    exports.find = (node, type) => node.nodes.find((node2) => node2.type === type);
    exports.exceedsLimit = (min, max, step = 1, limit) => {
      if (limit === false)
        return false;
      if (!exports.isInteger(min) || !exports.isInteger(max))
        return false;
      return (Number(max) - Number(min)) / Number(step) >= limit;
    };
    exports.escapeNode = (block, n = 0, type) => {
      let node = block.nodes[n];
      if (!node)
        return;
      if (type && node.type === type || node.type === "open" || node.type === "close") {
        if (node.escaped !== true) {
          node.value = "\\" + node.value;
          node.escaped = true;
        }
      }
    };
    exports.encloseBrace = (node) => {
      if (node.type !== "brace")
        return false;
      if (node.commas >> 0 + node.ranges >> 0 === 0) {
        node.invalid = true;
        return true;
      }
      return false;
    };
    exports.isInvalidBrace = (block) => {
      if (block.type !== "brace")
        return false;
      if (block.invalid === true || block.dollar)
        return true;
      if (block.commas >> 0 + block.ranges >> 0 === 0) {
        block.invalid = true;
        return true;
      }
      if (block.open !== true || block.close !== true) {
        block.invalid = true;
        return true;
      }
      return false;
    };
    exports.isOpenOrClose = (node) => {
      if (node.type === "open" || node.type === "close") {
        return true;
      }
      return node.open === true || node.close === true;
    };
    exports.reduce = (nodes) => nodes.reduce((acc, node) => {
      if (node.type === "text")
        acc.push(node.value);
      if (node.type === "range")
        node.type = "text";
      return acc;
    }, []);
    exports.flatten = (...args) => {
      const result = [];
      const flat = (arr) => {
        for (let i = 0; i < arr.length; i++) {
          let ele = arr[i];
          Array.isArray(ele) ? flat(ele, result) : ele !== void 0 && result.push(ele);
        }
        return result;
      };
      flat(args);
      return result;
    };
  }
});

// node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/stringify.js
var require_stringify = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/stringify.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    module.exports = (ast, options = {}) => {
      let stringify = (node, parent = {}) => {
        let invalidBlock = options.escapeInvalid && utils.isInvalidBrace(parent);
        let invalidNode = node.invalid === true && options.escapeInvalid === true;
        let output = "";
        if (node.value) {
          if ((invalidBlock || invalidNode) && utils.isOpenOrClose(node)) {
            return "\\" + node.value;
          }
          return node.value;
        }
        if (node.value) {
          return node.value;
        }
        if (node.nodes) {
          for (let child of node.nodes) {
            output += stringify(child);
          }
        }
        return output;
      };
      return stringify(ast);
    };
  }
});

// node_modules/.pnpm/is-number@7.0.0/node_modules/is-number/index.js
var require_is_number = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/is-number@7.0.0/node_modules/is-number/index.js"(exports, module) {
    "use strict";
    module.exports = function(num) {
      if (typeof num === "number") {
        return num - num === 0;
      }
      if (typeof num === "string" && num.trim() !== "") {
        return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);
      }
      return false;
    };
  }
});

// node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js
var require_to_regex_range = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/to-regex-range@5.0.1/node_modules/to-regex-range/index.js"(exports, module) {
    "use strict";
    var isNumber = require_is_number();
    var toRegexRange = (min, max, options) => {
      if (isNumber(min) === false) {
        throw new TypeError("toRegexRange: expected the first argument to be a number");
      }
      if (max === void 0 || min === max) {
        return String(min);
      }
      if (isNumber(max) === false) {
        throw new TypeError("toRegexRange: expected the second argument to be a number.");
      }
      let opts = { relaxZeros: true, ...options };
      if (typeof opts.strictZeros === "boolean") {
        opts.relaxZeros = opts.strictZeros === false;
      }
      let relax = String(opts.relaxZeros);
      let shorthand = String(opts.shorthand);
      let capture = String(opts.capture);
      let wrap = String(opts.wrap);
      let cacheKey = min + ":" + max + "=" + relax + shorthand + capture + wrap;
      if (toRegexRange.cache.hasOwnProperty(cacheKey)) {
        return toRegexRange.cache[cacheKey].result;
      }
      let a = Math.min(min, max);
      let b = Math.max(min, max);
      if (Math.abs(a - b) === 1) {
        let result = min + "|" + max;
        if (opts.capture) {
          return `(${result})`;
        }
        if (opts.wrap === false) {
          return result;
        }
        return `(?:${result})`;
      }
      let isPadded = hasPadding(min) || hasPadding(max);
      let state = { min, max, a, b };
      let positives = [];
      let negatives = [];
      if (isPadded) {
        state.isPadded = isPadded;
        state.maxLen = String(state.max).length;
      }
      if (a < 0) {
        let newMin = b < 0 ? Math.abs(b) : 1;
        negatives = splitToPatterns(newMin, Math.abs(a), state, opts);
        a = state.a = 0;
      }
      if (b >= 0) {
        positives = splitToPatterns(a, b, state, opts);
      }
      state.negatives = negatives;
      state.positives = positives;
      state.result = collatePatterns(negatives, positives, opts);
      if (opts.capture === true) {
        state.result = `(${state.result})`;
      } else if (opts.wrap !== false && positives.length + negatives.length > 1) {
        state.result = `(?:${state.result})`;
      }
      toRegexRange.cache[cacheKey] = state;
      return state.result;
    };
    function collatePatterns(neg, pos, options) {
      let onlyNegative = filterPatterns(neg, pos, "-", false, options) || [];
      let onlyPositive = filterPatterns(pos, neg, "", false, options) || [];
      let intersected = filterPatterns(neg, pos, "-?", true, options) || [];
      let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);
      return subpatterns.join("|");
    }
    function splitToRanges(min, max) {
      let nines = 1;
      let zeros = 1;
      let stop = countNines(min, nines);
      let stops = /* @__PURE__ */ new Set([max]);
      while (min <= stop && stop <= max) {
        stops.add(stop);
        nines += 1;
        stop = countNines(min, nines);
      }
      stop = countZeros(max + 1, zeros) - 1;
      while (min < stop && stop <= max) {
        stops.add(stop);
        zeros += 1;
        stop = countZeros(max + 1, zeros) - 1;
      }
      stops = [...stops];
      stops.sort(compare);
      return stops;
    }
    function rangeToPattern(start, stop, options) {
      if (start === stop) {
        return { pattern: start, count: [], digits: 0 };
      }
      let zipped = zip(start, stop);
      let digits = zipped.length;
      let pattern = "";
      let count = 0;
      for (let i = 0; i < digits; i++) {
        let [startDigit, stopDigit] = zipped[i];
        if (startDigit === stopDigit) {
          pattern += startDigit;
        } else if (startDigit !== "0" || stopDigit !== "9") {
          pattern += toCharacterClass(startDigit, stopDigit, options);
        } else {
          count++;
        }
      }
      if (count) {
        pattern += options.shorthand === true ? "\\d" : "[0-9]";
      }
      return { pattern, count: [count], digits };
    }
    function splitToPatterns(min, max, tok, options) {
      let ranges = splitToRanges(min, max);
      let tokens = [];
      let start = min;
      let prev;
      for (let i = 0; i < ranges.length; i++) {
        let max2 = ranges[i];
        let obj = rangeToPattern(String(start), String(max2), options);
        let zeros = "";
        if (!tok.isPadded && prev && prev.pattern === obj.pattern) {
          if (prev.count.length > 1) {
            prev.count.pop();
          }
          prev.count.push(obj.count[0]);
          prev.string = prev.pattern + toQuantifier(prev.count);
          start = max2 + 1;
          continue;
        }
        if (tok.isPadded) {
          zeros = padZeros(max2, tok, options);
        }
        obj.string = zeros + obj.pattern + toQuantifier(obj.count);
        tokens.push(obj);
        start = max2 + 1;
        prev = obj;
      }
      return tokens;
    }
    function filterPatterns(arr, comparison, prefix, intersection, options) {
      let result = [];
      for (let ele of arr) {
        let { string } = ele;
        if (!intersection && !contains(comparison, "string", string)) {
          result.push(prefix + string);
        }
        if (intersection && contains(comparison, "string", string)) {
          result.push(prefix + string);
        }
      }
      return result;
    }
    function zip(a, b) {
      let arr = [];
      for (let i = 0; i < a.length; i++)
        arr.push([a[i], b[i]]);
      return arr;
    }
    function compare(a, b) {
      return a > b ? 1 : b > a ? -1 : 0;
    }
    function contains(arr, key, val) {
      return arr.some((ele) => ele[key] === val);
    }
    function countNines(min, len) {
      return Number(String(min).slice(0, -len) + "9".repeat(len));
    }
    function countZeros(integer, zeros) {
      return integer - integer % Math.pow(10, zeros);
    }
    function toQuantifier(digits) {
      let [start = 0, stop = ""] = digits;
      if (stop || start > 1) {
        return `{${start + (stop ? "," + stop : "")}}`;
      }
      return "";
    }
    function toCharacterClass(a, b, options) {
      return `[${a}${b - a === 1 ? "" : "-"}${b}]`;
    }
    function hasPadding(str) {
      return /^-?(0+)\d/.test(str);
    }
    function padZeros(value, tok, options) {
      if (!tok.isPadded) {
        return value;
      }
      let diff = Math.abs(tok.maxLen - String(value).length);
      let relax = options.relaxZeros !== false;
      switch (diff) {
        case 0:
          return "";
        case 1:
          return relax ? "0?" : "0";
        case 2:
          return relax ? "0{0,2}" : "00";
        default: {
          return relax ? `0{0,${diff}}` : `0{${diff}}`;
        }
      }
    }
    toRegexRange.cache = {};
    toRegexRange.clearCache = () => toRegexRange.cache = {};
    module.exports = toRegexRange;
  }
});

// node_modules/.pnpm/fill-range@7.0.1/node_modules/fill-range/index.js
var require_fill_range = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fill-range@7.0.1/node_modules/fill-range/index.js"(exports, module) {
    "use strict";
    var util = _chunkI7OK7DX6cjs.__require.call(void 0, "util");
    var toRegexRange = require_to_regex_range();
    var isObject2 = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    var transform = (toNumber) => {
      return (value) => toNumber === true ? Number(value) : String(value);
    };
    var isValidValue = (value) => {
      return typeof value === "number" || typeof value === "string" && value !== "";
    };
    var isNumber = (num) => Number.isInteger(+num);
    var zeros = (input) => {
      let value = `${input}`;
      let index2 = -1;
      if (value[0] === "-")
        value = value.slice(1);
      if (value === "0")
        return false;
      while (value[++index2] === "0")
        ;
      return index2 > 0;
    };
    var stringify = (start, end, options) => {
      if (typeof start === "string" || typeof end === "string") {
        return true;
      }
      return options.stringify === true;
    };
    var pad = (input, maxLength, toNumber) => {
      if (maxLength > 0) {
        let dash = input[0] === "-" ? "-" : "";
        if (dash)
          input = input.slice(1);
        input = dash + input.padStart(dash ? maxLength - 1 : maxLength, "0");
      }
      if (toNumber === false) {
        return String(input);
      }
      return input;
    };
    var toMaxLen = (input, maxLength) => {
      let negative = input[0] === "-" ? "-" : "";
      if (negative) {
        input = input.slice(1);
        maxLength--;
      }
      while (input.length < maxLength)
        input = "0" + input;
      return negative ? "-" + input : input;
    };
    var toSequence = (parts, options) => {
      parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
      parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);
      let prefix = options.capture ? "" : "?:";
      let positives = "";
      let negatives = "";
      let result;
      if (parts.positives.length) {
        positives = parts.positives.join("|");
      }
      if (parts.negatives.length) {
        negatives = `-(${prefix}${parts.negatives.join("|")})`;
      }
      if (positives && negatives) {
        result = `${positives}|${negatives}`;
      } else {
        result = positives || negatives;
      }
      if (options.wrap) {
        return `(${prefix}${result})`;
      }
      return result;
    };
    var toRange = (a, b, isNumbers, options) => {
      if (isNumbers) {
        return toRegexRange(a, b, { wrap: false, ...options });
      }
      let start = String.fromCharCode(a);
      if (a === b)
        return start;
      let stop = String.fromCharCode(b);
      return `[${start}-${stop}]`;
    };
    var toRegex = (start, end, options) => {
      if (Array.isArray(start)) {
        let wrap = options.wrap === true;
        let prefix = options.capture ? "" : "?:";
        return wrap ? `(${prefix}${start.join("|")})` : start.join("|");
      }
      return toRegexRange(start, end, options);
    };
    var rangeError = (...args) => {
      return new RangeError("Invalid range arguments: " + util.inspect(...args));
    };
    var invalidRange = (start, end, options) => {
      if (options.strictRanges === true)
        throw rangeError([start, end]);
      return [];
    };
    var invalidStep = (step, options) => {
      if (options.strictRanges === true) {
        throw new TypeError(`Expected step "${step}" to be a number`);
      }
      return [];
    };
    var fillNumbers = (start, end, step = 1, options = {}) => {
      let a = Number(start);
      let b = Number(end);
      if (!Number.isInteger(a) || !Number.isInteger(b)) {
        if (options.strictRanges === true)
          throw rangeError([start, end]);
        return [];
      }
      if (a === 0)
        a = 0;
      if (b === 0)
        b = 0;
      let descending = a > b;
      let startString = String(start);
      let endString = String(end);
      let stepString = String(step);
      step = Math.max(Math.abs(step), 1);
      let padded = zeros(startString) || zeros(endString) || zeros(stepString);
      let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;
      let toNumber = padded === false && stringify(start, end, options) === false;
      let format2 = options.transform || transform(toNumber);
      if (options.toRegex && step === 1) {
        return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);
      }
      let parts = { negatives: [], positives: [] };
      let push = (num) => parts[num < 0 ? "negatives" : "positives"].push(Math.abs(num));
      let range = [];
      let index2 = 0;
      while (descending ? a >= b : a <= b) {
        if (options.toRegex === true && step > 1) {
          push(a);
        } else {
          range.push(pad(format2(a, index2), maxLen, toNumber));
        }
        a = descending ? a - step : a + step;
        index2++;
      }
      if (options.toRegex === true) {
        return step > 1 ? toSequence(parts, options) : toRegex(range, null, { wrap: false, ...options });
      }
      return range;
    };
    var fillLetters = (start, end, step = 1, options = {}) => {
      if (!isNumber(start) && start.length > 1 || !isNumber(end) && end.length > 1) {
        return invalidRange(start, end, options);
      }
      let format2 = options.transform || ((val) => String.fromCharCode(val));
      let a = `${start}`.charCodeAt(0);
      let b = `${end}`.charCodeAt(0);
      let descending = a > b;
      let min = Math.min(a, b);
      let max = Math.max(a, b);
      if (options.toRegex && step === 1) {
        return toRange(min, max, false, options);
      }
      let range = [];
      let index2 = 0;
      while (descending ? a >= b : a <= b) {
        range.push(format2(a, index2));
        a = descending ? a - step : a + step;
        index2++;
      }
      if (options.toRegex === true) {
        return toRegex(range, null, { wrap: false, options });
      }
      return range;
    };
    var fill = (start, end, step, options = {}) => {
      if (end == null && isValidValue(start)) {
        return [start];
      }
      if (!isValidValue(start) || !isValidValue(end)) {
        return invalidRange(start, end, options);
      }
      if (typeof step === "function") {
        return fill(start, end, 1, { transform: step });
      }
      if (isObject2(step)) {
        return fill(start, end, 0, step);
      }
      let opts = { ...options };
      if (opts.capture === true)
        opts.wrap = true;
      step = step || opts.step || 1;
      if (!isNumber(step)) {
        if (step != null && !isObject2(step))
          return invalidStep(step, opts);
        return fill(start, end, 1, step);
      }
      if (isNumber(start) && isNumber(end)) {
        return fillNumbers(start, end, step, opts);
      }
      return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);
    };
    module.exports = fill;
  }
});

// node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/compile.js
var require_compile = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/compile.js"(exports, module) {
    "use strict";
    var fill = require_fill_range();
    var utils = require_utils();
    var compile = (ast, options = {}) => {
      let walk = (node, parent = {}) => {
        let invalidBlock = utils.isInvalidBrace(parent);
        let invalidNode = node.invalid === true && options.escapeInvalid === true;
        let invalid = invalidBlock === true || invalidNode === true;
        let prefix = options.escapeInvalid === true ? "\\" : "";
        let output = "";
        if (node.isOpen === true) {
          return prefix + node.value;
        }
        if (node.isClose === true) {
          return prefix + node.value;
        }
        if (node.type === "open") {
          return invalid ? prefix + node.value : "(";
        }
        if (node.type === "close") {
          return invalid ? prefix + node.value : ")";
        }
        if (node.type === "comma") {
          return node.prev.type === "comma" ? "" : invalid ? node.value : "|";
        }
        if (node.value) {
          return node.value;
        }
        if (node.nodes && node.ranges > 0) {
          let args = utils.reduce(node.nodes);
          let range = fill(...args, { ...options, wrap: false, toRegex: true });
          if (range.length !== 0) {
            return args.length > 1 && range.length > 1 ? `(${range})` : range;
          }
        }
        if (node.nodes) {
          for (let child of node.nodes) {
            output += walk(child, node);
          }
        }
        return output;
      };
      return walk(ast);
    };
    module.exports = compile;
  }
});

// node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/expand.js
var require_expand = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/expand.js"(exports, module) {
    "use strict";
    var fill = require_fill_range();
    var stringify = require_stringify();
    var utils = require_utils();
    var append = (queue = "", stash = "", enclose = false) => {
      let result = [];
      queue = [].concat(queue);
      stash = [].concat(stash);
      if (!stash.length)
        return queue;
      if (!queue.length) {
        return enclose ? utils.flatten(stash).map((ele) => `{${ele}}`) : stash;
      }
      for (let item of queue) {
        if (Array.isArray(item)) {
          for (let value of item) {
            result.push(append(value, stash, enclose));
          }
        } else {
          for (let ele of stash) {
            if (enclose === true && typeof ele === "string")
              ele = `{${ele}}`;
            result.push(Array.isArray(ele) ? append(item, ele, enclose) : item + ele);
          }
        }
      }
      return utils.flatten(result);
    };
    var expand = (ast, options = {}) => {
      let rangeLimit = options.rangeLimit === void 0 ? 1e3 : options.rangeLimit;
      let walk = (node, parent = {}) => {
        node.queue = [];
        let p = parent;
        let q = parent.queue;
        while (p.type !== "brace" && p.type !== "root" && p.parent) {
          p = p.parent;
          q = p.queue;
        }
        if (node.invalid || node.dollar) {
          q.push(append(q.pop(), stringify(node, options)));
          return;
        }
        if (node.type === "brace" && node.invalid !== true && node.nodes.length === 2) {
          q.push(append(q.pop(), ["{}"]));
          return;
        }
        if (node.nodes && node.ranges > 0) {
          let args = utils.reduce(node.nodes);
          if (utils.exceedsLimit(...args, options.step, rangeLimit)) {
            throw new RangeError("expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.");
          }
          let range = fill(...args, options);
          if (range.length === 0) {
            range = stringify(node, options);
          }
          q.push(append(q.pop(), range));
          node.nodes = [];
          return;
        }
        let enclose = utils.encloseBrace(node);
        let queue = node.queue;
        let block = node;
        while (block.type !== "brace" && block.type !== "root" && block.parent) {
          block = block.parent;
          queue = block.queue;
        }
        for (let i = 0; i < node.nodes.length; i++) {
          let child = node.nodes[i];
          if (child.type === "comma" && node.type === "brace") {
            if (i === 1)
              queue.push("");
            queue.push("");
            continue;
          }
          if (child.type === "close") {
            q.push(append(q.pop(), queue, enclose));
            continue;
          }
          if (child.value && child.type !== "open") {
            queue.push(append(queue.pop(), child.value));
            continue;
          }
          if (child.nodes) {
            walk(child, node);
          }
        }
        return queue;
      };
      return utils.flatten(walk(ast));
    };
    module.exports = expand;
  }
});

// node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/constants.js
var require_constants2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/constants.js"(exports, module) {
    "use strict";
    module.exports = {
      MAX_LENGTH: 1024 * 64,
      CHAR_0: "0",
      CHAR_9: "9",
      CHAR_UPPERCASE_A: "A",
      CHAR_LOWERCASE_A: "a",
      CHAR_UPPERCASE_Z: "Z",
      CHAR_LOWERCASE_Z: "z",
      CHAR_LEFT_PARENTHESES: "(",
      CHAR_RIGHT_PARENTHESES: ")",
      CHAR_ASTERISK: "*",
      CHAR_AMPERSAND: "&",
      CHAR_AT: "@",
      CHAR_BACKSLASH: "\\",
      CHAR_BACKTICK: "`",
      CHAR_CARRIAGE_RETURN: "\r",
      CHAR_CIRCUMFLEX_ACCENT: "^",
      CHAR_COLON: ":",
      CHAR_COMMA: ",",
      CHAR_DOLLAR: "$",
      CHAR_DOT: ".",
      CHAR_DOUBLE_QUOTE: '"',
      CHAR_EQUAL: "=",
      CHAR_EXCLAMATION_MARK: "!",
      CHAR_FORM_FEED: "\f",
      CHAR_FORWARD_SLASH: "/",
      CHAR_HASH: "#",
      CHAR_HYPHEN_MINUS: "-",
      CHAR_LEFT_ANGLE_BRACKET: "<",
      CHAR_LEFT_CURLY_BRACE: "{",
      CHAR_LEFT_SQUARE_BRACKET: "[",
      CHAR_LINE_FEED: "\n",
      CHAR_NO_BREAK_SPACE: "\xA0",
      CHAR_PERCENT: "%",
      CHAR_PLUS: "+",
      CHAR_QUESTION_MARK: "?",
      CHAR_RIGHT_ANGLE_BRACKET: ">",
      CHAR_RIGHT_CURLY_BRACE: "}",
      CHAR_RIGHT_SQUARE_BRACKET: "]",
      CHAR_SEMICOLON: ";",
      CHAR_SINGLE_QUOTE: "'",
      CHAR_SPACE: " ",
      CHAR_TAB: "	",
      CHAR_UNDERSCORE: "_",
      CHAR_VERTICAL_LINE: "|",
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: "\uFEFF"
    };
  }
});

// node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/parse.js
var require_parse = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/braces@3.0.2/node_modules/braces/lib/parse.js"(exports, module) {
    "use strict";
    var stringify = require_stringify();
    var {
      MAX_LENGTH,
      CHAR_BACKSLASH,
      CHAR_BACKTICK,
      CHAR_COMMA,
      CHAR_DOT,
      CHAR_LEFT_PARENTHESES,
      CHAR_RIGHT_PARENTHESES,
      CHAR_LEFT_CURLY_BRACE,
      CHAR_RIGHT_CURLY_BRACE,
      CHAR_LEFT_SQUARE_BRACKET,
      CHAR_RIGHT_SQUARE_BRACKET,
      CHAR_DOUBLE_QUOTE,
      CHAR_SINGLE_QUOTE,
      CHAR_NO_BREAK_SPACE,
      CHAR_ZERO_WIDTH_NOBREAK_SPACE
    } = require_constants2();
    var parse4 = (input, options = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      let opts = options || {};
      let max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      if (input.length > max) {
        throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);
      }
      let ast = { type: "root", input, nodes: [] };
      let stack = [ast];
      let block = ast;
      let prev = ast;
      let brackets = 0;
      let length = input.length;
      let index2 = 0;
      let depth = 0;
      let value;
      let memo = {};
      const advance2 = () => input[index2++];
      const push = (node) => {
        if (node.type === "text" && prev.type === "dot") {
          prev.type = "text";
        }
        if (prev && prev.type === "text" && node.type === "text") {
          prev.value += node.value;
          return;
        }
        block.nodes.push(node);
        node.parent = block;
        node.prev = prev;
        prev = node;
        return node;
      };
      push({ type: "bos" });
      while (index2 < length) {
        block = stack[stack.length - 1];
        value = advance2();
        if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {
          continue;
        }
        if (value === CHAR_BACKSLASH) {
          push({ type: "text", value: (options.keepEscaping ? value : "") + advance2() });
          continue;
        }
        if (value === CHAR_RIGHT_SQUARE_BRACKET) {
          push({ type: "text", value: "\\" + value });
          continue;
        }
        if (value === CHAR_LEFT_SQUARE_BRACKET) {
          brackets++;
          let closed = true;
          let next;
          while (index2 < length && (next = advance2())) {
            value += next;
            if (next === CHAR_LEFT_SQUARE_BRACKET) {
              brackets++;
              continue;
            }
            if (next === CHAR_BACKSLASH) {
              value += advance2();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET) {
              brackets--;
              if (brackets === 0) {
                break;
              }
            }
          }
          push({ type: "text", value });
          continue;
        }
        if (value === CHAR_LEFT_PARENTHESES) {
          block = push({ type: "paren", nodes: [] });
          stack.push(block);
          push({ type: "text", value });
          continue;
        }
        if (value === CHAR_RIGHT_PARENTHESES) {
          if (block.type !== "paren") {
            push({ type: "text", value });
            continue;
          }
          block = stack.pop();
          push({ type: "text", value });
          block = stack[stack.length - 1];
          continue;
        }
        if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {
          let open = value;
          let next;
          if (options.keepQuotes !== true) {
            value = "";
          }
          while (index2 < length && (next = advance2())) {
            if (next === CHAR_BACKSLASH) {
              value += next + advance2();
              continue;
            }
            if (next === open) {
              if (options.keepQuotes === true)
                value += next;
              break;
            }
            value += next;
          }
          push({ type: "text", value });
          continue;
        }
        if (value === CHAR_LEFT_CURLY_BRACE) {
          depth++;
          let dollar = prev.value && prev.value.slice(-1) === "$" || block.dollar === true;
          let brace = {
            type: "brace",
            open: true,
            close: false,
            dollar,
            depth,
            commas: 0,
            ranges: 0,
            nodes: []
          };
          block = push(brace);
          stack.push(block);
          push({ type: "open", value });
          continue;
        }
        if (value === CHAR_RIGHT_CURLY_BRACE) {
          if (block.type !== "brace") {
            push({ type: "text", value });
            continue;
          }
          let type = "close";
          block = stack.pop();
          block.close = true;
          push({ type, value });
          depth--;
          block = stack[stack.length - 1];
          continue;
        }
        if (value === CHAR_COMMA && depth > 0) {
          if (block.ranges > 0) {
            block.ranges = 0;
            let open = block.nodes.shift();
            block.nodes = [open, { type: "text", value: stringify(block) }];
          }
          push({ type: "comma", value });
          block.commas++;
          continue;
        }
        if (value === CHAR_DOT && depth > 0 && block.commas === 0) {
          let siblings = block.nodes;
          if (depth === 0 || siblings.length === 0) {
            push({ type: "text", value });
            continue;
          }
          if (prev.type === "dot") {
            block.range = [];
            prev.value += value;
            prev.type = "range";
            if (block.nodes.length !== 3 && block.nodes.length !== 5) {
              block.invalid = true;
              block.ranges = 0;
              prev.type = "text";
              continue;
            }
            block.ranges++;
            block.args = [];
            continue;
          }
          if (prev.type === "range") {
            siblings.pop();
            let before = siblings[siblings.length - 1];
            before.value += prev.value + value;
            prev = before;
            block.ranges--;
            continue;
          }
          push({ type: "dot", value });
          continue;
        }
        push({ type: "text", value });
      }
      do {
        block = stack.pop();
        if (block.type !== "root") {
          block.nodes.forEach((node) => {
            if (!node.nodes) {
              if (node.type === "open")
                node.isOpen = true;
              if (node.type === "close")
                node.isClose = true;
              if (!node.nodes)
                node.type = "text";
              node.invalid = true;
            }
          });
          let parent = stack[stack.length - 1];
          let index3 = parent.nodes.indexOf(block);
          parent.nodes.splice(index3, 1, ...block.nodes);
        }
      } while (stack.length > 0);
      push({ type: "eos" });
      return ast;
    };
    module.exports = parse4;
  }
});

// node_modules/.pnpm/braces@3.0.2/node_modules/braces/index.js
var require_braces = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/braces@3.0.2/node_modules/braces/index.js"(exports, module) {
    "use strict";
    var stringify = require_stringify();
    var compile = require_compile();
    var expand = require_expand();
    var parse4 = require_parse();
    var braces = (input, options = {}) => {
      let output = [];
      if (Array.isArray(input)) {
        for (let pattern of input) {
          let result = braces.create(pattern, options);
          if (Array.isArray(result)) {
            output.push(...result);
          } else {
            output.push(result);
          }
        }
      } else {
        output = [].concat(braces.create(input, options));
      }
      if (options && options.expand === true && options.nodupes === true) {
        output = [...new Set(output)];
      }
      return output;
    };
    braces.parse = (input, options = {}) => parse4(input, options);
    braces.stringify = (input, options = {}) => {
      if (typeof input === "string") {
        return stringify(braces.parse(input, options), options);
      }
      return stringify(input, options);
    };
    braces.compile = (input, options = {}) => {
      if (typeof input === "string") {
        input = braces.parse(input, options);
      }
      return compile(input, options);
    };
    braces.expand = (input, options = {}) => {
      if (typeof input === "string") {
        input = braces.parse(input, options);
      }
      let result = expand(input, options);
      if (options.noempty === true) {
        result = result.filter(Boolean);
      }
      if (options.nodupes === true) {
        result = [...new Set(result)];
      }
      return result;
    };
    braces.create = (input, options = {}) => {
      if (input === "" || input.length < 3) {
        return [input];
      }
      return options.expand !== true ? braces.compile(input, options) : braces.expand(input, options);
    };
    module.exports = braces;
  }
});

// node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js
var require_constants3 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/constants.js"(exports, module) {
    "use strict";
    var path3 = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
    var WIN_SLASH = "\\\\/";
    var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
    var DOT_LITERAL = "\\.";
    var PLUS_LITERAL = "\\+";
    var QMARK_LITERAL = "\\?";
    var SLASH_LITERAL = "\\/";
    var ONE_CHAR = "(?=.)";
    var QMARK = "[^/]";
    var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
    var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
    var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
    var NO_DOT = `(?!${DOT_LITERAL})`;
    var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
    var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
    var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
    var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
    var STAR = `${QMARK}*?`;
    var POSIX_CHARS = {
      DOT_LITERAL,
      PLUS_LITERAL,
      QMARK_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      QMARK,
      END_ANCHOR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK_NO_DOT,
      STAR,
      START_ANCHOR
    };
    var WINDOWS_CHARS = {
      ...POSIX_CHARS,
      SLASH_LITERAL: `[${WIN_SLASH}]`,
      QMARK: WIN_NO_SLASH,
      STAR: `${WIN_NO_SLASH}*?`,
      DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
      NO_DOT: `(?!${DOT_LITERAL})`,
      NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
      NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
      START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
      END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
    };
    var POSIX_REGEX_SOURCE = {
      alnum: "a-zA-Z0-9",
      alpha: "a-zA-Z",
      ascii: "\\x00-\\x7F",
      blank: " \\t",
      cntrl: "\\x00-\\x1F\\x7F",
      digit: "0-9",
      graph: "\\x21-\\x7E",
      lower: "a-z",
      print: "\\x20-\\x7E ",
      punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
      space: " \\t\\r\\n\\v\\f",
      upper: "A-Z",
      word: "A-Za-z0-9_",
      xdigit: "A-Fa-f0-9"
    };
    module.exports = {
      MAX_LENGTH: 1024 * 64,
      POSIX_REGEX_SOURCE,
      REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
      REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
      REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
      REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
      REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
      REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
      REPLACEMENTS: {
        "***": "*",
        "**/**": "**",
        "**/**/**": "**"
      },
      CHAR_0: 48,
      CHAR_9: 57,
      CHAR_UPPERCASE_A: 65,
      CHAR_LOWERCASE_A: 97,
      CHAR_UPPERCASE_Z: 90,
      CHAR_LOWERCASE_Z: 122,
      CHAR_LEFT_PARENTHESES: 40,
      CHAR_RIGHT_PARENTHESES: 41,
      CHAR_ASTERISK: 42,
      CHAR_AMPERSAND: 38,
      CHAR_AT: 64,
      CHAR_BACKWARD_SLASH: 92,
      CHAR_CARRIAGE_RETURN: 13,
      CHAR_CIRCUMFLEX_ACCENT: 94,
      CHAR_COLON: 58,
      CHAR_COMMA: 44,
      CHAR_DOT: 46,
      CHAR_DOUBLE_QUOTE: 34,
      CHAR_EQUAL: 61,
      CHAR_EXCLAMATION_MARK: 33,
      CHAR_FORM_FEED: 12,
      CHAR_FORWARD_SLASH: 47,
      CHAR_GRAVE_ACCENT: 96,
      CHAR_HASH: 35,
      CHAR_HYPHEN_MINUS: 45,
      CHAR_LEFT_ANGLE_BRACKET: 60,
      CHAR_LEFT_CURLY_BRACE: 123,
      CHAR_LEFT_SQUARE_BRACKET: 91,
      CHAR_LINE_FEED: 10,
      CHAR_NO_BREAK_SPACE: 160,
      CHAR_PERCENT: 37,
      CHAR_PLUS: 43,
      CHAR_QUESTION_MARK: 63,
      CHAR_RIGHT_ANGLE_BRACKET: 62,
      CHAR_RIGHT_CURLY_BRACE: 125,
      CHAR_RIGHT_SQUARE_BRACKET: 93,
      CHAR_SEMICOLON: 59,
      CHAR_SINGLE_QUOTE: 39,
      CHAR_SPACE: 32,
      CHAR_TAB: 9,
      CHAR_UNDERSCORE: 95,
      CHAR_VERTICAL_LINE: 124,
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
      SEP: path3.sep,
      extglobChars(chars) {
        return {
          "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
          "?": { type: "qmark", open: "(?:", close: ")?" },
          "+": { type: "plus", open: "(?:", close: ")+" },
          "*": { type: "star", open: "(?:", close: ")*" },
          "@": { type: "at", open: "(?:", close: ")" }
        };
      },
      globChars(win32) {
        return win32 === true ? WINDOWS_CHARS : POSIX_CHARS;
      }
    };
  }
});

// node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js
var require_utils2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/utils.js"(exports) {
    "use strict";
    var path3 = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
    var win32 = process.platform === "win32";
    var {
      REGEX_BACKSLASH,
      REGEX_REMOVE_BACKSLASH,
      REGEX_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_GLOBAL
    } = require_constants3();
    exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
    exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
    exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
    exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
    exports.removeBackslashes = (str) => {
      return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
        return match === "\\" ? "" : match;
      });
    };
    exports.supportsLookbehinds = () => {
      const segs = process.version.slice(1).split(".").map(Number);
      if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
        return true;
      }
      return false;
    };
    exports.isWindows = (options) => {
      if (options && typeof options.windows === "boolean") {
        return options.windows;
      }
      return win32 === true || path3.sep === "\\";
    };
    exports.escapeLast = (input, char, lastIdx) => {
      const idx = input.lastIndexOf(char, lastIdx);
      if (idx === -1)
        return input;
      if (input[idx - 1] === "\\")
        return exports.escapeLast(input, char, idx - 1);
      return `${input.slice(0, idx)}\\${input.slice(idx)}`;
    };
    exports.removePrefix = (input, state = {}) => {
      let output = input;
      if (output.startsWith("./")) {
        output = output.slice(2);
        state.prefix = "./";
      }
      return output;
    };
    exports.wrapOutput = (input, state = {}, options = {}) => {
      const prepend = options.contains ? "" : "^";
      const append = options.contains ? "" : "$";
      let output = `${prepend}(?:${input})${append}`;
      if (state.negated === true) {
        output = `(?:^(?!${output}).*$)`;
      }
      return output;
    };
  }
});

// node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/scan.js
var require_scan = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/scan.js"(exports, module) {
    "use strict";
    var utils = require_utils2();
    var {
      CHAR_ASTERISK,
      CHAR_AT,
      CHAR_BACKWARD_SLASH,
      CHAR_COMMA,
      CHAR_DOT,
      CHAR_EXCLAMATION_MARK,
      CHAR_FORWARD_SLASH,
      CHAR_LEFT_CURLY_BRACE,
      CHAR_LEFT_PARENTHESES,
      CHAR_LEFT_SQUARE_BRACKET,
      CHAR_PLUS,
      CHAR_QUESTION_MARK,
      CHAR_RIGHT_CURLY_BRACE,
      CHAR_RIGHT_PARENTHESES,
      CHAR_RIGHT_SQUARE_BRACKET
    } = require_constants3();
    var isPathSeparator = (code) => {
      return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
    };
    var depth = (token) => {
      if (token.isPrefix !== true) {
        token.depth = token.isGlobstar ? Infinity : 1;
      }
    };
    var scan = (input, options) => {
      const opts = options || {};
      const length = input.length - 1;
      const scanToEnd = opts.parts === true || opts.scanToEnd === true;
      const slashes = [];
      const tokens = [];
      const parts = [];
      let str = input;
      let index2 = -1;
      let start = 0;
      let lastIndex = 0;
      let isBrace = false;
      let isBracket = false;
      let isGlob = false;
      let isExtglob = false;
      let isGlobstar = false;
      let braceEscaped = false;
      let backslashes = false;
      let negated = false;
      let negatedExtglob = false;
      let finished = false;
      let braces = 0;
      let prev;
      let code;
      let token = { value: "", depth: 0, isGlob: false };
      const eos = () => index2 >= length;
      const peek = () => str.charCodeAt(index2 + 1);
      const advance2 = () => {
        prev = code;
        return str.charCodeAt(++index2);
      };
      while (index2 < length) {
        code = advance2();
        let next;
        if (code === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          code = advance2();
          if (code === CHAR_LEFT_CURLY_BRACE) {
            braceEscaped = true;
          }
          continue;
        }
        if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
          braces++;
          while (eos() !== true && (code = advance2())) {
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              advance2();
              continue;
            }
            if (code === CHAR_LEFT_CURLY_BRACE) {
              braces++;
              continue;
            }
            if (braceEscaped !== true && code === CHAR_DOT && (code = advance2()) === CHAR_DOT) {
              isBrace = token.isBrace = true;
              isGlob = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (braceEscaped !== true && code === CHAR_COMMA) {
              isBrace = token.isBrace = true;
              isGlob = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (code === CHAR_RIGHT_CURLY_BRACE) {
              braces--;
              if (braces === 0) {
                braceEscaped = false;
                isBrace = token.isBrace = true;
                finished = true;
                break;
              }
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_FORWARD_SLASH) {
          slashes.push(index2);
          tokens.push(token);
          token = { value: "", depth: 0, isGlob: false };
          if (finished === true)
            continue;
          if (prev === CHAR_DOT && index2 === start + 1) {
            start += 2;
            continue;
          }
          lastIndex = index2 + 1;
          continue;
        }
        if (opts.noext !== true) {
          const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
          if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
            isGlob = token.isGlob = true;
            isExtglob = token.isExtglob = true;
            finished = true;
            if (code === CHAR_EXCLAMATION_MARK && index2 === start) {
              negatedExtglob = true;
            }
            if (scanToEnd === true) {
              while (eos() !== true && (code = advance2())) {
                if (code === CHAR_BACKWARD_SLASH) {
                  backslashes = token.backslashes = true;
                  code = advance2();
                  continue;
                }
                if (code === CHAR_RIGHT_PARENTHESES) {
                  isGlob = token.isGlob = true;
                  finished = true;
                  break;
                }
              }
              continue;
            }
            break;
          }
        }
        if (code === CHAR_ASTERISK) {
          if (prev === CHAR_ASTERISK)
            isGlobstar = token.isGlobstar = true;
          isGlob = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_QUESTION_MARK) {
          isGlob = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_LEFT_SQUARE_BRACKET) {
          while (eos() !== true && (next = advance2())) {
            if (next === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              advance2();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET) {
              isBracket = token.isBracket = true;
              isGlob = token.isGlob = true;
              finished = true;
              break;
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index2 === start) {
          negated = token.negated = true;
          start++;
          continue;
        }
        if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
          isGlob = token.isGlob = true;
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance2())) {
              if (code === CHAR_LEFT_PARENTHESES) {
                backslashes = token.backslashes = true;
                code = advance2();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES) {
                finished = true;
                break;
              }
            }
            continue;
          }
          break;
        }
        if (isGlob === true) {
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
      }
      if (opts.noext === true) {
        isExtglob = false;
        isGlob = false;
      }
      let base = str;
      let prefix = "";
      let glob = "";
      if (start > 0) {
        prefix = str.slice(0, start);
        str = str.slice(start);
        lastIndex -= start;
      }
      if (base && isGlob === true && lastIndex > 0) {
        base = str.slice(0, lastIndex);
        glob = str.slice(lastIndex);
      } else if (isGlob === true) {
        base = "";
        glob = str;
      } else {
        base = str;
      }
      if (base && base !== "" && base !== "/" && base !== str) {
        if (isPathSeparator(base.charCodeAt(base.length - 1))) {
          base = base.slice(0, -1);
        }
      }
      if (opts.unescape === true) {
        if (glob)
          glob = utils.removeBackslashes(glob);
        if (base && backslashes === true) {
          base = utils.removeBackslashes(base);
        }
      }
      const state = {
        prefix,
        input,
        start,
        base,
        glob,
        isBrace,
        isBracket,
        isGlob,
        isExtglob,
        isGlobstar,
        negated,
        negatedExtglob
      };
      if (opts.tokens === true) {
        state.maxDepth = 0;
        if (!isPathSeparator(code)) {
          tokens.push(token);
        }
        state.tokens = tokens;
      }
      if (opts.parts === true || opts.tokens === true) {
        let prevIndex;
        for (let idx = 0; idx < slashes.length; idx++) {
          const n = prevIndex ? prevIndex + 1 : start;
          const i = slashes[idx];
          const value = input.slice(n, i);
          if (opts.tokens) {
            if (idx === 0 && start !== 0) {
              tokens[idx].isPrefix = true;
              tokens[idx].value = prefix;
            } else {
              tokens[idx].value = value;
            }
            depth(tokens[idx]);
            state.maxDepth += tokens[idx].depth;
          }
          if (idx !== 0 || value !== "") {
            parts.push(value);
          }
          prevIndex = i;
        }
        if (prevIndex && prevIndex + 1 < input.length) {
          const value = input.slice(prevIndex + 1);
          parts.push(value);
          if (opts.tokens) {
            tokens[tokens.length - 1].value = value;
            depth(tokens[tokens.length - 1]);
            state.maxDepth += tokens[tokens.length - 1].depth;
          }
        }
        state.slashes = slashes;
        state.parts = parts;
      }
      return state;
    };
    module.exports = scan;
  }
});

// node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/parse.js
var require_parse2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/parse.js"(exports, module) {
    "use strict";
    var constants = require_constants3();
    var utils = require_utils2();
    var {
      MAX_LENGTH,
      POSIX_REGEX_SOURCE,
      REGEX_NON_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_BACKREF,
      REPLACEMENTS
    } = constants;
    var expandRange = (args, options) => {
      if (typeof options.expandRange === "function") {
        return options.expandRange(...args, options);
      }
      args.sort();
      const value = `[${args.join("-")}]`;
      try {
        new RegExp(value);
      } catch (ex) {
        return args.map((v) => utils.escapeRegex(v)).join("..");
      }
      return value;
    };
    var syntaxError = (type, char) => {
      return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
    };
    var parse4 = (input, options) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      input = REPLACEMENTS[input] || input;
      const opts = { ...options };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      let len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      const bos = { type: "bos", value: "", output: opts.prepend || "" };
      const tokens = [bos];
      const capture = opts.capture ? "" : "?:";
      const win32 = utils.isWindows(options);
      const PLATFORM_CHARS = constants.globChars(win32);
      const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
      const {
        DOT_LITERAL,
        PLUS_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOT_SLASH,
        NO_DOTS_SLASH,
        QMARK,
        QMARK_NO_DOT,
        STAR,
        START_ANCHOR
      } = PLATFORM_CHARS;
      const globstar = (opts2) => {
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const nodot = opts.dot ? "" : NO_DOT;
      const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
      let star = opts.bash === true ? globstar(opts) : STAR;
      if (opts.capture) {
        star = `(${star})`;
      }
      if (typeof opts.noext === "boolean") {
        opts.noextglob = opts.noext;
      }
      const state = {
        input,
        index: -1,
        start: 0,
        dot: opts.dot === true,
        consumed: "",
        output: "",
        prefix: "",
        backtrack: false,
        negated: false,
        brackets: 0,
        braces: 0,
        parens: 0,
        quotes: 0,
        globstar: false,
        tokens
      };
      input = utils.removePrefix(input, state);
      len = input.length;
      const extglobs = [];
      const braces = [];
      const stack = [];
      let prev = bos;
      let value;
      const eos = () => state.index === len - 1;
      const peek = state.peek = (n = 1) => input[state.index + n];
      const advance2 = state.advance = () => input[++state.index] || "";
      const remaining = () => input.slice(state.index + 1);
      const consume = (value2 = "", num = 0) => {
        state.consumed += value2;
        state.index += num;
      };
      const append = (token) => {
        state.output += token.output != null ? token.output : token.value;
        consume(token.value);
      };
      const negate = () => {
        let count = 1;
        while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
          advance2();
          state.start++;
          count++;
        }
        if (count % 2 === 0) {
          return false;
        }
        state.negated = true;
        state.start++;
        return true;
      };
      const increment = (type) => {
        state[type]++;
        stack.push(type);
      };
      const decrement = (type) => {
        state[type]--;
        stack.pop();
      };
      const push = (tok) => {
        if (prev.type === "globstar") {
          const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
          const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
          if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
            state.output = state.output.slice(0, -prev.output.length);
            prev.type = "star";
            prev.value = "*";
            prev.output = star;
            state.output += prev.output;
          }
        }
        if (extglobs.length && tok.type !== "paren") {
          extglobs[extglobs.length - 1].inner += tok.value;
        }
        if (tok.value || tok.output)
          append(tok);
        if (prev && prev.type === "text" && tok.type === "text") {
          prev.value += tok.value;
          prev.output = (prev.output || "") + tok.value;
          return;
        }
        tok.prev = prev;
        tokens.push(tok);
        prev = tok;
      };
      const extglobOpen = (type, value2) => {
        const token = { ...EXTGLOB_CHARS[value2], conditions: 1, inner: "" };
        token.prev = prev;
        token.parens = state.parens;
        token.output = state.output;
        const output = (opts.capture ? "(" : "") + token.open;
        increment("parens");
        push({ type, value: value2, output: state.output ? "" : ONE_CHAR });
        push({ type: "paren", extglob: true, value: advance2(), output });
        extglobs.push(token);
      };
      const extglobClose = (token) => {
        let output = token.close + (opts.capture ? ")" : "");
        let rest;
        if (token.type === "negate") {
          let extglobStar = star;
          if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
            extglobStar = globstar(opts);
          }
          if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
            output = token.close = `)$))${extglobStar}`;
          }
          if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
            const expression = parse4(rest, { ...options, fastpaths: false }).output;
            output = token.close = `)${expression})${extglobStar})`;
          }
          if (token.prev.type === "bos") {
            state.negatedExtglob = true;
          }
        }
        push({ type: "paren", extglob: true, value, output });
        decrement("parens");
      };
      if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
        let backslashes = false;
        let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index2) => {
          if (first === "\\") {
            backslashes = true;
            return m;
          }
          if (first === "?") {
            if (esc) {
              return esc + first + (rest ? QMARK.repeat(rest.length) : "");
            }
            if (index2 === 0) {
              return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
            }
            return QMARK.repeat(chars.length);
          }
          if (first === ".") {
            return DOT_LITERAL.repeat(chars.length);
          }
          if (first === "*") {
            if (esc) {
              return esc + first + (rest ? star : "");
            }
            return star;
          }
          return esc ? m : `\\${m}`;
        });
        if (backslashes === true) {
          if (opts.unescape === true) {
            output = output.replace(/\\/g, "");
          } else {
            output = output.replace(/\\+/g, (m) => {
              return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
            });
          }
        }
        if (output === input && opts.contains === true) {
          state.output = input;
          return state;
        }
        state.output = utils.wrapOutput(output, state, options);
        return state;
      }
      while (!eos()) {
        value = advance2();
        if (value === "\0") {
          continue;
        }
        if (value === "\\") {
          const next = peek();
          if (next === "/" && opts.bash !== true) {
            continue;
          }
          if (next === "." || next === ";") {
            continue;
          }
          if (!next) {
            value += "\\";
            push({ type: "text", value });
            continue;
          }
          const match = /^\\+/.exec(remaining());
          let slashes = 0;
          if (match && match[0].length > 2) {
            slashes = match[0].length;
            state.index += slashes;
            if (slashes % 2 !== 0) {
              value += "\\";
            }
          }
          if (opts.unescape === true) {
            value = advance2();
          } else {
            value += advance2();
          }
          if (state.brackets === 0) {
            push({ type: "text", value });
            continue;
          }
        }
        if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
          if (opts.posix !== false && value === ":") {
            const inner = prev.value.slice(1);
            if (inner.includes("[")) {
              prev.posix = true;
              if (inner.includes(":")) {
                const idx = prev.value.lastIndexOf("[");
                const pre = prev.value.slice(0, idx);
                const rest2 = prev.value.slice(idx + 2);
                const posix = POSIX_REGEX_SOURCE[rest2];
                if (posix) {
                  prev.value = pre + posix;
                  state.backtrack = true;
                  advance2();
                  if (!bos.output && tokens.indexOf(prev) === 1) {
                    bos.output = ONE_CHAR;
                  }
                  continue;
                }
              }
            }
          }
          if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
            value = `\\${value}`;
          }
          if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
            value = `\\${value}`;
          }
          if (opts.posix === true && value === "!" && prev.value === "[") {
            value = "^";
          }
          prev.value += value;
          append({ value });
          continue;
        }
        if (state.quotes === 1 && value !== '"') {
          value = utils.escapeRegex(value);
          prev.value += value;
          append({ value });
          continue;
        }
        if (value === '"') {
          state.quotes = state.quotes === 1 ? 0 : 1;
          if (opts.keepQuotes === true) {
            push({ type: "text", value });
          }
          continue;
        }
        if (value === "(") {
          increment("parens");
          push({ type: "paren", value });
          continue;
        }
        if (value === ")") {
          if (state.parens === 0 && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("opening", "("));
          }
          const extglob = extglobs[extglobs.length - 1];
          if (extglob && state.parens === extglob.parens + 1) {
            extglobClose(extglobs.pop());
            continue;
          }
          push({ type: "paren", value, output: state.parens ? ")" : "\\)" });
          decrement("parens");
          continue;
        }
        if (value === "[") {
          if (opts.nobracket === true || !remaining().includes("]")) {
            if (opts.nobracket !== true && opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("closing", "]"));
            }
            value = `\\${value}`;
          } else {
            increment("brackets");
          }
          push({ type: "bracket", value });
          continue;
        }
        if (value === "]") {
          if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
            push({ type: "text", value, output: `\\${value}` });
            continue;
          }
          if (state.brackets === 0) {
            if (opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("opening", "["));
            }
            push({ type: "text", value, output: `\\${value}` });
            continue;
          }
          decrement("brackets");
          const prevValue = prev.value.slice(1);
          if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
            value = `/${value}`;
          }
          prev.value += value;
          append({ value });
          if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
            continue;
          }
          const escaped = utils.escapeRegex(prev.value);
          state.output = state.output.slice(0, -prev.value.length);
          if (opts.literalBrackets === true) {
            state.output += escaped;
            prev.value = escaped;
            continue;
          }
          prev.value = `(${capture}${escaped}|${prev.value})`;
          state.output += prev.value;
          continue;
        }
        if (value === "{" && opts.nobrace !== true) {
          increment("braces");
          const open = {
            type: "brace",
            value,
            output: "(",
            outputIndex: state.output.length,
            tokensIndex: state.tokens.length
          };
          braces.push(open);
          push(open);
          continue;
        }
        if (value === "}") {
          const brace = braces[braces.length - 1];
          if (opts.nobrace === true || !brace) {
            push({ type: "text", value, output: value });
            continue;
          }
          let output = ")";
          if (brace.dots === true) {
            const arr = tokens.slice();
            const range = [];
            for (let i = arr.length - 1; i >= 0; i--) {
              tokens.pop();
              if (arr[i].type === "brace") {
                break;
              }
              if (arr[i].type !== "dots") {
                range.unshift(arr[i].value);
              }
            }
            output = expandRange(range, opts);
            state.backtrack = true;
          }
          if (brace.comma !== true && brace.dots !== true) {
            const out = state.output.slice(0, brace.outputIndex);
            const toks = state.tokens.slice(brace.tokensIndex);
            brace.value = brace.output = "\\{";
            value = output = "\\}";
            state.output = out;
            for (const t of toks) {
              state.output += t.output || t.value;
            }
          }
          push({ type: "brace", value, output });
          decrement("braces");
          braces.pop();
          continue;
        }
        if (value === "|") {
          if (extglobs.length > 0) {
            extglobs[extglobs.length - 1].conditions++;
          }
          push({ type: "text", value });
          continue;
        }
        if (value === ",") {
          let output = value;
          const brace = braces[braces.length - 1];
          if (brace && stack[stack.length - 1] === "braces") {
            brace.comma = true;
            output = "|";
          }
          push({ type: "comma", value, output });
          continue;
        }
        if (value === "/") {
          if (prev.type === "dot" && state.index === state.start + 1) {
            state.start = state.index + 1;
            state.consumed = "";
            state.output = "";
            tokens.pop();
            prev = bos;
            continue;
          }
          push({ type: "slash", value, output: SLASH_LITERAL });
          continue;
        }
        if (value === ".") {
          if (state.braces > 0 && prev.type === "dot") {
            if (prev.value === ".")
              prev.output = DOT_LITERAL;
            const brace = braces[braces.length - 1];
            prev.type = "dots";
            prev.output += value;
            prev.value += value;
            brace.dots = true;
            continue;
          }
          if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
            push({ type: "text", value, output: DOT_LITERAL });
            continue;
          }
          push({ type: "dot", value, output: DOT_LITERAL });
          continue;
        }
        if (value === "?") {
          const isGroup = prev && prev.value === "(";
          if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("qmark", value);
            continue;
          }
          if (prev && prev.type === "paren") {
            const next = peek();
            let output = value;
            if (next === "<" && !utils.supportsLookbehinds()) {
              throw new Error("Node.js v10 or higher is required for regex lookbehinds");
            }
            if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
              output = `\\${value}`;
            }
            push({ type: "text", value, output });
            continue;
          }
          if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
            push({ type: "qmark", value, output: QMARK_NO_DOT });
            continue;
          }
          push({ type: "qmark", value, output: QMARK });
          continue;
        }
        if (value === "!") {
          if (opts.noextglob !== true && peek() === "(") {
            if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
              extglobOpen("negate", value);
              continue;
            }
          }
          if (opts.nonegate !== true && state.index === 0) {
            negate();
            continue;
          }
        }
        if (value === "+") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("plus", value);
            continue;
          }
          if (prev && prev.value === "(" || opts.regex === false) {
            push({ type: "plus", value, output: PLUS_LITERAL });
            continue;
          }
          if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
            push({ type: "plus", value });
            continue;
          }
          push({ type: "plus", value: PLUS_LITERAL });
          continue;
        }
        if (value === "@") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            push({ type: "at", extglob: true, value, output: "" });
            continue;
          }
          push({ type: "text", value });
          continue;
        }
        if (value !== "*") {
          if (value === "$" || value === "^") {
            value = `\\${value}`;
          }
          const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
          if (match) {
            value += match[0];
            state.index += match[0].length;
          }
          push({ type: "text", value });
          continue;
        }
        if (prev && (prev.type === "globstar" || prev.star === true)) {
          prev.type = "star";
          prev.star = true;
          prev.value += value;
          prev.output = star;
          state.backtrack = true;
          state.globstar = true;
          consume(value);
          continue;
        }
        let rest = remaining();
        if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
          extglobOpen("star", value);
          continue;
        }
        if (prev.type === "star") {
          if (opts.noglobstar === true) {
            consume(value);
            continue;
          }
          const prior = prev.prev;
          const before = prior.prev;
          const isStart = prior.type === "slash" || prior.type === "bos";
          const afterStar = before && (before.type === "star" || before.type === "globstar");
          if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
            push({ type: "star", value, output: "" });
            continue;
          }
          const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
          const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
          if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
            push({ type: "star", value, output: "" });
            continue;
          }
          while (rest.slice(0, 3) === "/**") {
            const after = input[state.index + 4];
            if (after && after !== "/") {
              break;
            }
            rest = rest.slice(3);
            consume("/**", 3);
          }
          if (prior.type === "bos" && eos()) {
            prev.type = "globstar";
            prev.value += value;
            prev.output = globstar(opts);
            state.output = prev.output;
            state.globstar = true;
            consume(value);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
            prev.value += value;
            state.globstar = true;
            state.output += prior.output + prev.output;
            consume(value);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
            const end = rest[1] !== void 0 ? "|$" : "";
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
            prev.value += value;
            state.output += prior.output + prev.output;
            state.globstar = true;
            consume(value + advance2());
            push({ type: "slash", value: "/", output: "" });
            continue;
          }
          if (prior.type === "bos" && rest[0] === "/") {
            prev.type = "globstar";
            prev.value += value;
            prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
            state.output = prev.output;
            state.globstar = true;
            consume(value + advance2());
            push({ type: "slash", value: "/", output: "" });
            continue;
          }
          state.output = state.output.slice(0, -prev.output.length);
          prev.type = "globstar";
          prev.output = globstar(opts);
          prev.value += value;
          state.output += prev.output;
          state.globstar = true;
          consume(value);
          continue;
        }
        const token = { type: "star", value, output: star };
        if (opts.bash === true) {
          token.output = ".*?";
          if (prev.type === "bos" || prev.type === "slash") {
            token.output = nodot + token.output;
          }
          push(token);
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
          token.output = value;
          push(token);
          continue;
        }
        if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
          if (prev.type === "dot") {
            state.output += NO_DOT_SLASH;
            prev.output += NO_DOT_SLASH;
          } else if (opts.dot === true) {
            state.output += NO_DOTS_SLASH;
            prev.output += NO_DOTS_SLASH;
          } else {
            state.output += nodot;
            prev.output += nodot;
          }
          if (peek() !== "*") {
            state.output += ONE_CHAR;
            prev.output += ONE_CHAR;
          }
        }
        push(token);
      }
      while (state.brackets > 0) {
        if (opts.strictBrackets === true)
          throw new SyntaxError(syntaxError("closing", "]"));
        state.output = utils.escapeLast(state.output, "[");
        decrement("brackets");
      }
      while (state.parens > 0) {
        if (opts.strictBrackets === true)
          throw new SyntaxError(syntaxError("closing", ")"));
        state.output = utils.escapeLast(state.output, "(");
        decrement("parens");
      }
      while (state.braces > 0) {
        if (opts.strictBrackets === true)
          throw new SyntaxError(syntaxError("closing", "}"));
        state.output = utils.escapeLast(state.output, "{");
        decrement("braces");
      }
      if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
        push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
      }
      if (state.backtrack === true) {
        state.output = "";
        for (const token of state.tokens) {
          state.output += token.output != null ? token.output : token.value;
          if (token.suffix) {
            state.output += token.suffix;
          }
        }
      }
      return state;
    };
    parse4.fastpaths = (input, options) => {
      const opts = { ...options };
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      const len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      input = REPLACEMENTS[input] || input;
      const win32 = utils.isWindows(options);
      const {
        DOT_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOTS,
        NO_DOTS_SLASH,
        STAR,
        START_ANCHOR
      } = constants.globChars(win32);
      const nodot = opts.dot ? NO_DOTS : NO_DOT;
      const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
      const capture = opts.capture ? "" : "?:";
      const state = { negated: false, prefix: "" };
      let star = opts.bash === true ? ".*?" : STAR;
      if (opts.capture) {
        star = `(${star})`;
      }
      const globstar = (opts2) => {
        if (opts2.noglobstar === true)
          return star;
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const create = (str) => {
        switch (str) {
          case "*":
            return `${nodot}${ONE_CHAR}${star}`;
          case ".*":
            return `${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*.*":
            return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*/*":
            return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
          case "**":
            return nodot + globstar(opts);
          case "**/*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
          case "**/*.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "**/.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
          default: {
            const match = /^(.*?)\.(\w+)$/.exec(str);
            if (!match)
              return;
            const source2 = create(match[1]);
            if (!source2)
              return;
            return source2 + DOT_LITERAL + match[2];
          }
        }
      };
      const output = utils.removePrefix(input, state);
      let source = create(output);
      if (source && opts.strictSlashes !== true) {
        source += `${SLASH_LITERAL}?`;
      }
      return source;
    };
    module.exports = parse4;
  }
});

// node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/picomatch.js
var require_picomatch = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/lib/picomatch.js"(exports, module) {
    "use strict";
    var path3 = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
    var scan = require_scan();
    var parse4 = require_parse2();
    var utils = require_utils2();
    var constants = require_constants3();
    var isObject2 = (val) => val && typeof val === "object" && !Array.isArray(val);
    var picomatch = (glob, options, returnState = false) => {
      if (Array.isArray(glob)) {
        const fns = glob.map((input) => picomatch(input, options, returnState));
        const arrayMatcher = (str) => {
          for (const isMatch of fns) {
            const state2 = isMatch(str);
            if (state2)
              return state2;
          }
          return false;
        };
        return arrayMatcher;
      }
      const isState = isObject2(glob) && glob.tokens && glob.input;
      if (glob === "" || typeof glob !== "string" && !isState) {
        throw new TypeError("Expected pattern to be a non-empty string");
      }
      const opts = options || {};
      const posix = utils.isWindows(options);
      const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);
      const state = regex.state;
      delete regex.state;
      let isIgnored = () => false;
      if (opts.ignore) {
        const ignoreOpts = { ...options, ignore: null, onMatch: null, onResult: null };
        isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
      }
      const matcher = (input, returnObject = false) => {
        const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix });
        const result = { glob, state, regex, posix, input, output, match, isMatch };
        if (typeof opts.onResult === "function") {
          opts.onResult(result);
        }
        if (isMatch === false) {
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (isIgnored(input)) {
          if (typeof opts.onIgnore === "function") {
            opts.onIgnore(result);
          }
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (typeof opts.onMatch === "function") {
          opts.onMatch(result);
        }
        return returnObject ? result : true;
      };
      if (returnState) {
        matcher.state = state;
      }
      return matcher;
    };
    picomatch.test = (input, regex, options, { glob, posix } = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected input to be a string");
      }
      if (input === "") {
        return { isMatch: false, output: "" };
      }
      const opts = options || {};
      const format2 = opts.format || (posix ? utils.toPosixSlashes : null);
      let match = input === glob;
      let output = match && format2 ? format2(input) : input;
      if (match === false) {
        output = format2 ? format2(input) : input;
        match = output === glob;
      }
      if (match === false || opts.capture === true) {
        if (opts.matchBase === true || opts.basename === true) {
          match = picomatch.matchBase(input, regex, options, posix);
        } else {
          match = regex.exec(output);
        }
      }
      return { isMatch: Boolean(match), match, output };
    };
    picomatch.matchBase = (input, glob, options, posix = utils.isWindows(options)) => {
      const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
      return regex.test(path3.basename(input));
    };
    picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
    picomatch.parse = (pattern, options) => {
      if (Array.isArray(pattern))
        return pattern.map((p) => picomatch.parse(p, options));
      return parse4(pattern, { ...options, fastpaths: false });
    };
    picomatch.scan = (input, options) => scan(input, options);
    picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
      if (returnOutput === true) {
        return state.output;
      }
      const opts = options || {};
      const prepend = opts.contains ? "" : "^";
      const append = opts.contains ? "" : "$";
      let source = `${prepend}(?:${state.output})${append}`;
      if (state && state.negated === true) {
        source = `^(?!${source}).*$`;
      }
      const regex = picomatch.toRegex(source, options);
      if (returnState === true) {
        regex.state = state;
      }
      return regex;
    };
    picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
      if (!input || typeof input !== "string") {
        throw new TypeError("Expected a non-empty string");
      }
      let parsed = { negated: false, fastpaths: true };
      if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
        parsed.output = parse4.fastpaths(input, options);
      }
      if (!parsed.output) {
        parsed = parse4(input, options);
      }
      return picomatch.compileRe(parsed, options, returnOutput, returnState);
    };
    picomatch.toRegex = (source, options) => {
      try {
        const opts = options || {};
        return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
      } catch (err) {
        if (options && options.debug === true)
          throw err;
        return /$^/;
      }
    };
    picomatch.constants = constants;
    module.exports = picomatch;
  }
});

// node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/index.js
var require_picomatch2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/picomatch@2.3.1/node_modules/picomatch/index.js"(exports, module) {
    "use strict";
    module.exports = require_picomatch();
  }
});

// node_modules/.pnpm/micromatch@4.0.5/node_modules/micromatch/index.js
var require_micromatch = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/micromatch@4.0.5/node_modules/micromatch/index.js"(exports, module) {
    "use strict";
    var util = _chunkI7OK7DX6cjs.__require.call(void 0, "util");
    var braces = require_braces();
    var picomatch = require_picomatch2();
    var utils = require_utils2();
    var isEmptyString = (val) => val === "" || val === "./";
    var micromatch = (list, patterns, options) => {
      patterns = [].concat(patterns);
      list = [].concat(list);
      let omit = /* @__PURE__ */ new Set();
      let keep = /* @__PURE__ */ new Set();
      let items = /* @__PURE__ */ new Set();
      let negatives = 0;
      let onResult = (state) => {
        items.add(state.output);
        if (options && options.onResult) {
          options.onResult(state);
        }
      };
      for (let i = 0; i < patterns.length; i++) {
        let isMatch = picomatch(String(patterns[i]), { ...options, onResult }, true);
        let negated = isMatch.state.negated || isMatch.state.negatedExtglob;
        if (negated)
          negatives++;
        for (let item of list) {
          let matched = isMatch(item, true);
          let match = negated ? !matched.isMatch : matched.isMatch;
          if (!match)
            continue;
          if (negated) {
            omit.add(matched.output);
          } else {
            omit.delete(matched.output);
            keep.add(matched.output);
          }
        }
      }
      let result = negatives === patterns.length ? [...items] : [...keep];
      let matches = result.filter((item) => !omit.has(item));
      if (options && matches.length === 0) {
        if (options.failglob === true) {
          throw new Error(`No matches found for "${patterns.join(", ")}"`);
        }
        if (options.nonull === true || options.nullglob === true) {
          return options.unescape ? patterns.map((p) => p.replace(/\\/g, "")) : patterns;
        }
      }
      return matches;
    };
    micromatch.match = micromatch;
    micromatch.matcher = (pattern, options) => picomatch(pattern, options);
    micromatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
    micromatch.any = micromatch.isMatch;
    micromatch.not = (list, patterns, options = {}) => {
      patterns = [].concat(patterns).map(String);
      let result = /* @__PURE__ */ new Set();
      let items = [];
      let onResult = (state) => {
        if (options.onResult)
          options.onResult(state);
        items.push(state.output);
      };
      let matches = new Set(micromatch(list, patterns, { ...options, onResult }));
      for (let item of items) {
        if (!matches.has(item)) {
          result.add(item);
        }
      }
      return [...result];
    };
    micromatch.contains = (str, pattern, options) => {
      if (typeof str !== "string") {
        throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
      }
      if (Array.isArray(pattern)) {
        return pattern.some((p) => micromatch.contains(str, p, options));
      }
      if (typeof pattern === "string") {
        if (isEmptyString(str) || isEmptyString(pattern)) {
          return false;
        }
        if (str.includes(pattern) || str.startsWith("./") && str.slice(2).includes(pattern)) {
          return true;
        }
      }
      return micromatch.isMatch(str, pattern, { ...options, contains: true });
    };
    micromatch.matchKeys = (obj, patterns, options) => {
      if (!utils.isObject(obj)) {
        throw new TypeError("Expected the first argument to be an object");
      }
      let keys = micromatch(Object.keys(obj), patterns, options);
      let res = {};
      for (let key of keys)
        res[key] = obj[key];
      return res;
    };
    micromatch.some = (list, patterns, options) => {
      let items = [].concat(list);
      for (let pattern of [].concat(patterns)) {
        let isMatch = picomatch(String(pattern), options);
        if (items.some((item) => isMatch(item))) {
          return true;
        }
      }
      return false;
    };
    micromatch.every = (list, patterns, options) => {
      let items = [].concat(list);
      for (let pattern of [].concat(patterns)) {
        let isMatch = picomatch(String(pattern), options);
        if (!items.every((item) => isMatch(item))) {
          return false;
        }
      }
      return true;
    };
    micromatch.all = (str, patterns, options) => {
      if (typeof str !== "string") {
        throw new TypeError(`Expected a string: "${util.inspect(str)}"`);
      }
      return [].concat(patterns).every((p) => picomatch(p, options)(str));
    };
    micromatch.capture = (glob, input, options) => {
      let posix = utils.isWindows(options);
      let regex = picomatch.makeRe(String(glob), { ...options, capture: true });
      let match = regex.exec(posix ? utils.toPosixSlashes(input) : input);
      if (match) {
        return match.slice(1).map((v) => v === void 0 ? "" : v);
      }
    };
    micromatch.makeRe = (...args) => picomatch.makeRe(...args);
    micromatch.scan = (...args) => picomatch.scan(...args);
    micromatch.parse = (patterns, options) => {
      let res = [];
      for (let pattern of [].concat(patterns || [])) {
        for (let str of braces(String(pattern), options)) {
          res.push(picomatch.parse(str, options));
        }
      }
      return res;
    };
    micromatch.braces = (pattern, options) => {
      if (typeof pattern !== "string")
        throw new TypeError("Expected a string");
      if (options && options.nobrace === true || !/\{.*\}/.test(pattern)) {
        return [pattern];
      }
      return braces(pattern, options);
    };
    micromatch.braceExpand = (pattern, options) => {
      if (typeof pattern !== "string")
        throw new TypeError("Expected a string");
      return micromatch.braces(pattern, { ...options, expand: true });
    };
    module.exports = micromatch;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/pattern.js
var require_pattern = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/pattern.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.matchAny = exports.convertPatternsToRe = exports.makeRe = exports.getPatternParts = exports.expandBraceExpansion = exports.expandPatternsWithBraceExpansion = exports.isAffectDepthOfReadingPattern = exports.endsWithSlashGlobStar = exports.hasGlobStar = exports.getBaseDirectory = exports.isPatternRelatedToParentDirectory = exports.getPatternsOutsideCurrentDirectory = exports.getPatternsInsideCurrentDirectory = exports.getPositivePatterns = exports.getNegativePatterns = exports.isPositivePattern = exports.isNegativePattern = exports.convertToNegativePattern = exports.convertToPositivePattern = exports.isDynamicPattern = exports.isStaticPattern = void 0;
    var path3 = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
    var globParent = require_glob_parent();
    var micromatch = require_micromatch();
    var GLOBSTAR = "**";
    var ESCAPE_SYMBOL = "\\";
    var COMMON_GLOB_SYMBOLS_RE = /[*?]|^!/;
    var REGEX_CHARACTER_CLASS_SYMBOLS_RE = /\[[^[]*]/;
    var REGEX_GROUP_SYMBOLS_RE = /(?:^|[^!*+?@])\([^(]*\|[^|]*\)/;
    var GLOB_EXTENSION_SYMBOLS_RE = /[!*+?@]\([^(]*\)/;
    var BRACE_EXPANSION_SEPARATORS_RE = /,|\.\./;
    function isStaticPattern(pattern, options = {}) {
      return !isDynamicPattern2(pattern, options);
    }
    exports.isStaticPattern = isStaticPattern;
    function isDynamicPattern2(pattern, options = {}) {
      if (pattern === "") {
        return false;
      }
      if (options.caseSensitiveMatch === false || pattern.includes(ESCAPE_SYMBOL)) {
        return true;
      }
      if (COMMON_GLOB_SYMBOLS_RE.test(pattern) || REGEX_CHARACTER_CLASS_SYMBOLS_RE.test(pattern) || REGEX_GROUP_SYMBOLS_RE.test(pattern)) {
        return true;
      }
      if (options.extglob !== false && GLOB_EXTENSION_SYMBOLS_RE.test(pattern)) {
        return true;
      }
      if (options.braceExpansion !== false && hasBraceExpansion(pattern)) {
        return true;
      }
      return false;
    }
    exports.isDynamicPattern = isDynamicPattern2;
    function hasBraceExpansion(pattern) {
      const openingBraceIndex = pattern.indexOf("{");
      if (openingBraceIndex === -1) {
        return false;
      }
      const closingBraceIndex = pattern.indexOf("}", openingBraceIndex + 1);
      if (closingBraceIndex === -1) {
        return false;
      }
      const braceContent = pattern.slice(openingBraceIndex, closingBraceIndex);
      return BRACE_EXPANSION_SEPARATORS_RE.test(braceContent);
    }
    function convertToPositivePattern(pattern) {
      return isNegativePattern2(pattern) ? pattern.slice(1) : pattern;
    }
    exports.convertToPositivePattern = convertToPositivePattern;
    function convertToNegativePattern(pattern) {
      return "!" + pattern;
    }
    exports.convertToNegativePattern = convertToNegativePattern;
    function isNegativePattern2(pattern) {
      return pattern.startsWith("!") && pattern[1] !== "(";
    }
    exports.isNegativePattern = isNegativePattern2;
    function isPositivePattern(pattern) {
      return !isNegativePattern2(pattern);
    }
    exports.isPositivePattern = isPositivePattern;
    function getNegativePatterns(patterns) {
      return patterns.filter(isNegativePattern2);
    }
    exports.getNegativePatterns = getNegativePatterns;
    function getPositivePatterns(patterns) {
      return patterns.filter(isPositivePattern);
    }
    exports.getPositivePatterns = getPositivePatterns;
    function getPatternsInsideCurrentDirectory(patterns) {
      return patterns.filter((pattern) => !isPatternRelatedToParentDirectory(pattern));
    }
    exports.getPatternsInsideCurrentDirectory = getPatternsInsideCurrentDirectory;
    function getPatternsOutsideCurrentDirectory(patterns) {
      return patterns.filter(isPatternRelatedToParentDirectory);
    }
    exports.getPatternsOutsideCurrentDirectory = getPatternsOutsideCurrentDirectory;
    function isPatternRelatedToParentDirectory(pattern) {
      return pattern.startsWith("..") || pattern.startsWith("./..");
    }
    exports.isPatternRelatedToParentDirectory = isPatternRelatedToParentDirectory;
    function getBaseDirectory(pattern) {
      return globParent(pattern, { flipBackslashes: false });
    }
    exports.getBaseDirectory = getBaseDirectory;
    function hasGlobStar(pattern) {
      return pattern.includes(GLOBSTAR);
    }
    exports.hasGlobStar = hasGlobStar;
    function endsWithSlashGlobStar(pattern) {
      return pattern.endsWith("/" + GLOBSTAR);
    }
    exports.endsWithSlashGlobStar = endsWithSlashGlobStar;
    function isAffectDepthOfReadingPattern(pattern) {
      const basename2 = path3.basename(pattern);
      return endsWithSlashGlobStar(pattern) || isStaticPattern(basename2);
    }
    exports.isAffectDepthOfReadingPattern = isAffectDepthOfReadingPattern;
    function expandPatternsWithBraceExpansion(patterns) {
      return patterns.reduce((collection, pattern) => {
        return collection.concat(expandBraceExpansion(pattern));
      }, []);
    }
    exports.expandPatternsWithBraceExpansion = expandPatternsWithBraceExpansion;
    function expandBraceExpansion(pattern) {
      return micromatch.braces(pattern, {
        expand: true,
        nodupes: true
      });
    }
    exports.expandBraceExpansion = expandBraceExpansion;
    function getPatternParts(pattern, options) {
      let { parts } = micromatch.scan(pattern, Object.assign(Object.assign({}, options), { parts: true }));
      if (parts.length === 0) {
        parts = [pattern];
      }
      if (parts[0].startsWith("/")) {
        parts[0] = parts[0].slice(1);
        parts.unshift("");
      }
      return parts;
    }
    exports.getPatternParts = getPatternParts;
    function makeRe(pattern, options) {
      return micromatch.makeRe(pattern, options);
    }
    exports.makeRe = makeRe;
    function convertPatternsToRe(patterns, options) {
      return patterns.map((pattern) => makeRe(pattern, options));
    }
    exports.convertPatternsToRe = convertPatternsToRe;
    function matchAny(entry, patternsRe) {
      return patternsRe.some((patternRe) => patternRe.test(entry));
    }
    exports.matchAny = matchAny;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/stream.js
var require_stream = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.merge = void 0;
    var merge22 = require_merge2();
    function merge(streams) {
      const mergedStream = merge22(streams);
      streams.forEach((stream) => {
        stream.once("error", (error) => mergedStream.emit("error", error));
      });
      mergedStream.once("close", () => propagateCloseEventToSources(streams));
      mergedStream.once("end", () => propagateCloseEventToSources(streams));
      return mergedStream;
    }
    exports.merge = merge;
    function propagateCloseEventToSources(streams) {
      streams.forEach((stream) => stream.emit("close"));
    }
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/string.js
var require_string = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/string.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isEmpty = exports.isString = void 0;
    function isString(input) {
      return typeof input === "string";
    }
    exports.isString = isString;
    function isEmpty(input) {
      return input === "";
    }
    exports.isEmpty = isEmpty;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/index.js
var require_utils3 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.string = exports.stream = exports.pattern = exports.path = exports.fs = exports.errno = exports.array = void 0;
    var array = require_array();
    exports.array = array;
    var errno = require_errno();
    exports.errno = errno;
    var fs4 = require_fs();
    exports.fs = fs4;
    var path3 = require_path();
    exports.path = path3;
    var pattern = require_pattern();
    exports.pattern = pattern;
    var stream = require_stream();
    exports.stream = stream;
    var string = require_string();
    exports.string = string;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/managers/tasks.js
var require_tasks = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/managers/tasks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertPatternGroupToTask = exports.convertPatternGroupsToTasks = exports.groupPatternsByBaseDirectory = exports.getNegativePatternsAsPositive = exports.getPositivePatterns = exports.convertPatternsToTasks = exports.generate = void 0;
    var utils = require_utils3();
    function generate2(patterns, settings) {
      const positivePatterns = getPositivePatterns(patterns);
      const negativePatterns = getNegativePatternsAsPositive(patterns, settings.ignore);
      const staticPatterns = positivePatterns.filter((pattern) => utils.pattern.isStaticPattern(pattern, settings));
      const dynamicPatterns = positivePatterns.filter((pattern) => utils.pattern.isDynamicPattern(pattern, settings));
      const staticTasks = convertPatternsToTasks(staticPatterns, negativePatterns, false);
      const dynamicTasks = convertPatternsToTasks(dynamicPatterns, negativePatterns, true);
      return staticTasks.concat(dynamicTasks);
    }
    exports.generate = generate2;
    function convertPatternsToTasks(positive, negative, dynamic) {
      const tasks = [];
      const patternsOutsideCurrentDirectory = utils.pattern.getPatternsOutsideCurrentDirectory(positive);
      const patternsInsideCurrentDirectory = utils.pattern.getPatternsInsideCurrentDirectory(positive);
      const outsideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsOutsideCurrentDirectory);
      const insideCurrentDirectoryGroup = groupPatternsByBaseDirectory(patternsInsideCurrentDirectory);
      tasks.push(...convertPatternGroupsToTasks(outsideCurrentDirectoryGroup, negative, dynamic));
      if ("." in insideCurrentDirectoryGroup) {
        tasks.push(convertPatternGroupToTask(".", patternsInsideCurrentDirectory, negative, dynamic));
      } else {
        tasks.push(...convertPatternGroupsToTasks(insideCurrentDirectoryGroup, negative, dynamic));
      }
      return tasks;
    }
    exports.convertPatternsToTasks = convertPatternsToTasks;
    function getPositivePatterns(patterns) {
      return utils.pattern.getPositivePatterns(patterns);
    }
    exports.getPositivePatterns = getPositivePatterns;
    function getNegativePatternsAsPositive(patterns, ignore2) {
      const negative = utils.pattern.getNegativePatterns(patterns).concat(ignore2);
      const positive = negative.map(utils.pattern.convertToPositivePattern);
      return positive;
    }
    exports.getNegativePatternsAsPositive = getNegativePatternsAsPositive;
    function groupPatternsByBaseDirectory(patterns) {
      const group = {};
      return patterns.reduce((collection, pattern) => {
        const base = utils.pattern.getBaseDirectory(pattern);
        if (base in collection) {
          collection[base].push(pattern);
        } else {
          collection[base] = [pattern];
        }
        return collection;
      }, group);
    }
    exports.groupPatternsByBaseDirectory = groupPatternsByBaseDirectory;
    function convertPatternGroupsToTasks(positive, negative, dynamic) {
      return Object.keys(positive).map((base) => {
        return convertPatternGroupToTask(base, positive[base], negative, dynamic);
      });
    }
    exports.convertPatternGroupsToTasks = convertPatternGroupsToTasks;
    function convertPatternGroupToTask(base, positive, negative, dynamic) {
      return {
        dynamic,
        positive,
        negative,
        base,
        patterns: [].concat(positive, negative.map(utils.pattern.convertToNegativePattern))
      };
    }
    exports.convertPatternGroupToTask = convertPatternGroupToTask;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/managers/patterns.js
var require_patterns = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/managers/patterns.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.removeDuplicateSlashes = exports.transform = void 0;
    var DOUBLE_SLASH_RE = /(?!^)\/{2,}/g;
    function transform(patterns) {
      return patterns.map((pattern) => removeDuplicateSlashes(pattern));
    }
    exports.transform = transform;
    function removeDuplicateSlashes(pattern) {
      return pattern.replace(DOUBLE_SLASH_RE, "/");
    }
    exports.removeDuplicateSlashes = removeDuplicateSlashes;
  }
});

// node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/async.js
var require_async = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.read = void 0;
    function read2(path3, settings, callback) {
      settings.fs.lstat(path3, (lstatError, lstat) => {
        if (lstatError !== null) {
          callFailureCallback(callback, lstatError);
          return;
        }
        if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
          callSuccessCallback(callback, lstat);
          return;
        }
        settings.fs.stat(path3, (statError, stat) => {
          if (statError !== null) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              callFailureCallback(callback, statError);
              return;
            }
            callSuccessCallback(callback, lstat);
            return;
          }
          if (settings.markSymbolicLink) {
            stat.isSymbolicLink = () => true;
          }
          callSuccessCallback(callback, stat);
        });
      });
    }
    exports.read = read2;
    function callFailureCallback(callback, error) {
      callback(error);
    }
    function callSuccessCallback(callback, result) {
      callback(null, result);
    }
  }
});

// node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/sync.js
var require_sync = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/providers/sync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.read = void 0;
    function read2(path3, settings) {
      const lstat = settings.fs.lstatSync(path3);
      if (!lstat.isSymbolicLink() || !settings.followSymbolicLink) {
        return lstat;
      }
      try {
        const stat = settings.fs.statSync(path3);
        if (settings.markSymbolicLink) {
          stat.isSymbolicLink = () => true;
        }
        return stat;
      } catch (error) {
        if (!settings.throwErrorOnBrokenSymbolicLink) {
          return lstat;
        }
        throw error;
      }
    }
    exports.read = read2;
  }
});

// node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/adapters/fs.js
var require_fs2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/adapters/fs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
    var fs4 = _chunkI7OK7DX6cjs.__require.call(void 0, "fs");
    exports.FILE_SYSTEM_ADAPTER = {
      lstat: fs4.lstat,
      stat: fs4.stat,
      lstatSync: fs4.lstatSync,
      statSync: fs4.statSync
    };
    function createFileSystemAdapter(fsMethods) {
      if (fsMethods === void 0) {
        return exports.FILE_SYSTEM_ADAPTER;
      }
      return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
    }
    exports.createFileSystemAdapter = createFileSystemAdapter;
  }
});

// node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/settings.js
var require_settings = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/settings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var fs4 = require_fs2();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLink = this._getValue(this._options.followSymbolicLink, true);
        this.fs = fs4.createFileSystemAdapter(this._options.fs);
        this.markSymbolicLink = this._getValue(this._options.markSymbolicLink, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
      }
      _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
      }
    };
    module.exports = Settings;
  }
});

// node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js
var require_out = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.stat@2.0.5/node_modules/@nodelib/fs.stat/out/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.statSync = exports.stat = exports.Settings = void 0;
    var async = require_async();
    var sync = require_sync();
    var settings_1 = require_settings();
    exports.Settings = settings_1.default;
    function stat(path3, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        async.read(path3, getSettings(), optionsOrSettingsOrCallback);
        return;
      }
      async.read(path3, getSettings(optionsOrSettingsOrCallback), callback);
    }
    exports.stat = stat;
    function statSync3(path3, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      return sync.read(path3, settings);
    }
    exports.statSync = statSync3;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// node_modules/.pnpm/queue-microtask@1.2.3/node_modules/queue-microtask/index.js
var require_queue_microtask = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/queue-microtask@1.2.3/node_modules/queue-microtask/index.js"(exports, module) {
    var promise;
    module.exports = typeof queueMicrotask === "function" ? queueMicrotask.bind(typeof window !== "undefined" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {
      throw err;
    }, 0));
  }
});

// node_modules/.pnpm/run-parallel@1.2.0/node_modules/run-parallel/index.js
var require_run_parallel = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/run-parallel@1.2.0/node_modules/run-parallel/index.js"(exports, module) {
    module.exports = runParallel;
    var queueMicrotask2 = require_queue_microtask();
    function runParallel(tasks, cb) {
      let results, pending, keys;
      let isSync = true;
      if (Array.isArray(tasks)) {
        results = [];
        pending = tasks.length;
      } else {
        keys = Object.keys(tasks);
        results = {};
        pending = keys.length;
      }
      function done(err) {
        function end() {
          if (cb)
            cb(err, results);
          cb = null;
        }
        if (isSync)
          queueMicrotask2(end);
        else
          end();
      }
      function each(i, err, result) {
        results[i] = result;
        if (--pending === 0 || err) {
          done(err);
        }
      }
      if (!pending) {
        done(null);
      } else if (keys) {
        keys.forEach(function(key) {
          tasks[key](function(err, result) {
            each(key, err, result);
          });
        });
      } else {
        tasks.forEach(function(task, i) {
          task(function(err, result) {
            each(i, err, result);
          });
        });
      }
      isSync = false;
    }
  }
});

// node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/constants.js
var require_constants4 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = void 0;
    var NODE_PROCESS_VERSION_PARTS = process.versions.node.split(".");
    if (NODE_PROCESS_VERSION_PARTS[0] === void 0 || NODE_PROCESS_VERSION_PARTS[1] === void 0) {
      throw new Error(`Unexpected behavior. The 'process.versions.node' variable has invalid value: ${process.versions.node}`);
    }
    var MAJOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[0], 10);
    var MINOR_VERSION = Number.parseInt(NODE_PROCESS_VERSION_PARTS[1], 10);
    var SUPPORTED_MAJOR_VERSION = 10;
    var SUPPORTED_MINOR_VERSION = 10;
    var IS_MATCHED_BY_MAJOR = MAJOR_VERSION > SUPPORTED_MAJOR_VERSION;
    var IS_MATCHED_BY_MAJOR_AND_MINOR = MAJOR_VERSION === SUPPORTED_MAJOR_VERSION && MINOR_VERSION >= SUPPORTED_MINOR_VERSION;
    exports.IS_SUPPORT_READDIR_WITH_FILE_TYPES = IS_MATCHED_BY_MAJOR || IS_MATCHED_BY_MAJOR_AND_MINOR;
  }
});

// node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/fs.js
var require_fs3 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/fs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createDirentFromStats = void 0;
    var DirentFromStats = class {
      constructor(name, stats) {
        this.name = name;
        this.isBlockDevice = stats.isBlockDevice.bind(stats);
        this.isCharacterDevice = stats.isCharacterDevice.bind(stats);
        this.isDirectory = stats.isDirectory.bind(stats);
        this.isFIFO = stats.isFIFO.bind(stats);
        this.isFile = stats.isFile.bind(stats);
        this.isSocket = stats.isSocket.bind(stats);
        this.isSymbolicLink = stats.isSymbolicLink.bind(stats);
      }
    };
    function createDirentFromStats(name, stats) {
      return new DirentFromStats(name, stats);
    }
    exports.createDirentFromStats = createDirentFromStats;
  }
});

// node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/index.js
var require_utils4 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.fs = void 0;
    var fs4 = require_fs3();
    exports.fs = fs4;
  }
});

// node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/common.js
var require_common = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/common.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.joinPathSegments = void 0;
    function joinPathSegments(a, b, separator) {
      if (a.endsWith(separator)) {
        return a + b;
      }
      return a + separator + b;
    }
    exports.joinPathSegments = joinPathSegments;
  }
});

// node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/async.js
var require_async2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
    var fsStat = require_out();
    var rpl = require_run_parallel();
    var constants_1 = require_constants4();
    var utils = require_utils4();
    var common2 = require_common();
    function read2(directory, settings, callback) {
      if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
        readdirWithFileTypes(directory, settings, callback);
        return;
      }
      readdir(directory, settings, callback);
    }
    exports.read = read2;
    function readdirWithFileTypes(directory, settings, callback) {
      settings.fs.readdir(directory, { withFileTypes: true }, (readdirError, dirents) => {
        if (readdirError !== null) {
          callFailureCallback(callback, readdirError);
          return;
        }
        const entries = dirents.map((dirent) => ({
          dirent,
          name: dirent.name,
          path: common2.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
        }));
        if (!settings.followSymbolicLinks) {
          callSuccessCallback(callback, entries);
          return;
        }
        const tasks = entries.map((entry) => makeRplTaskEntry(entry, settings));
        rpl(tasks, (rplError, rplEntries) => {
          if (rplError !== null) {
            callFailureCallback(callback, rplError);
            return;
          }
          callSuccessCallback(callback, rplEntries);
        });
      });
    }
    exports.readdirWithFileTypes = readdirWithFileTypes;
    function makeRplTaskEntry(entry, settings) {
      return (done) => {
        if (!entry.dirent.isSymbolicLink()) {
          done(null, entry);
          return;
        }
        settings.fs.stat(entry.path, (statError, stats) => {
          if (statError !== null) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              done(statError);
              return;
            }
            done(null, entry);
            return;
          }
          entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
          done(null, entry);
        });
      };
    }
    function readdir(directory, settings, callback) {
      settings.fs.readdir(directory, (readdirError, names) => {
        if (readdirError !== null) {
          callFailureCallback(callback, readdirError);
          return;
        }
        const tasks = names.map((name) => {
          const path3 = common2.joinPathSegments(directory, name, settings.pathSegmentSeparator);
          return (done) => {
            fsStat.stat(path3, settings.fsStatSettings, (error, stats) => {
              if (error !== null) {
                done(error);
                return;
              }
              const entry = {
                name,
                path: path3,
                dirent: utils.fs.createDirentFromStats(name, stats)
              };
              if (settings.stats) {
                entry.stats = stats;
              }
              done(null, entry);
            });
          };
        });
        rpl(tasks, (rplError, entries) => {
          if (rplError !== null) {
            callFailureCallback(callback, rplError);
            return;
          }
          callSuccessCallback(callback, entries);
        });
      });
    }
    exports.readdir = readdir;
    function callFailureCallback(callback, error) {
      callback(error);
    }
    function callSuccessCallback(callback, result) {
      callback(null, result);
    }
  }
});

// node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/sync.js
var require_sync2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/providers/sync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.readdir = exports.readdirWithFileTypes = exports.read = void 0;
    var fsStat = require_out();
    var constants_1 = require_constants4();
    var utils = require_utils4();
    var common2 = require_common();
    function read2(directory, settings) {
      if (!settings.stats && constants_1.IS_SUPPORT_READDIR_WITH_FILE_TYPES) {
        return readdirWithFileTypes(directory, settings);
      }
      return readdir(directory, settings);
    }
    exports.read = read2;
    function readdirWithFileTypes(directory, settings) {
      const dirents = settings.fs.readdirSync(directory, { withFileTypes: true });
      return dirents.map((dirent) => {
        const entry = {
          dirent,
          name: dirent.name,
          path: common2.joinPathSegments(directory, dirent.name, settings.pathSegmentSeparator)
        };
        if (entry.dirent.isSymbolicLink() && settings.followSymbolicLinks) {
          try {
            const stats = settings.fs.statSync(entry.path);
            entry.dirent = utils.fs.createDirentFromStats(entry.name, stats);
          } catch (error) {
            if (settings.throwErrorOnBrokenSymbolicLink) {
              throw error;
            }
          }
        }
        return entry;
      });
    }
    exports.readdirWithFileTypes = readdirWithFileTypes;
    function readdir(directory, settings) {
      const names = settings.fs.readdirSync(directory);
      return names.map((name) => {
        const entryPath = common2.joinPathSegments(directory, name, settings.pathSegmentSeparator);
        const stats = fsStat.statSync(entryPath, settings.fsStatSettings);
        const entry = {
          name,
          path: entryPath,
          dirent: utils.fs.createDirentFromStats(name, stats)
        };
        if (settings.stats) {
          entry.stats = stats;
        }
        return entry;
      });
    }
    exports.readdir = readdir;
  }
});

// node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/adapters/fs.js
var require_fs4 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/adapters/fs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createFileSystemAdapter = exports.FILE_SYSTEM_ADAPTER = void 0;
    var fs4 = _chunkI7OK7DX6cjs.__require.call(void 0, "fs");
    exports.FILE_SYSTEM_ADAPTER = {
      lstat: fs4.lstat,
      stat: fs4.stat,
      lstatSync: fs4.lstatSync,
      statSync: fs4.statSync,
      readdir: fs4.readdir,
      readdirSync: fs4.readdirSync
    };
    function createFileSystemAdapter(fsMethods) {
      if (fsMethods === void 0) {
        return exports.FILE_SYSTEM_ADAPTER;
      }
      return Object.assign(Object.assign({}, exports.FILE_SYSTEM_ADAPTER), fsMethods);
    }
    exports.createFileSystemAdapter = createFileSystemAdapter;
  }
});

// node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/settings.js
var require_settings2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/settings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var path3 = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
    var fsStat = require_out();
    var fs4 = require_fs4();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, false);
        this.fs = fs4.createFileSystemAdapter(this._options.fs);
        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path3.sep);
        this.stats = this._getValue(this._options.stats, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, true);
        this.fsStatSettings = new fsStat.Settings({
          followSymbolicLink: this.followSymbolicLinks,
          fs: this.fs,
          throwErrorOnBrokenSymbolicLink: this.throwErrorOnBrokenSymbolicLink
        });
      }
      _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
      }
    };
    exports.default = Settings;
  }
});

// node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js
var require_out2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.scandir@2.1.5/node_modules/@nodelib/fs.scandir/out/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Settings = exports.scandirSync = exports.scandir = void 0;
    var async = require_async2();
    var sync = require_sync2();
    var settings_1 = require_settings2();
    exports.Settings = settings_1.default;
    function scandir(path3, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        async.read(path3, getSettings(), optionsOrSettingsOrCallback);
        return;
      }
      async.read(path3, getSettings(optionsOrSettingsOrCallback), callback);
    }
    exports.scandir = scandir;
    function scandirSync(path3, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      return sync.read(path3, settings);
    }
    exports.scandirSync = scandirSync;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// node_modules/.pnpm/reusify@1.0.4/node_modules/reusify/reusify.js
var require_reusify = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/reusify@1.0.4/node_modules/reusify/reusify.js"(exports, module) {
    "use strict";
    function reusify(Constructor) {
      var head = new Constructor();
      var tail = head;
      function get() {
        var current2 = head;
        if (current2.next) {
          head = current2.next;
        } else {
          head = new Constructor();
          tail = head;
        }
        current2.next = null;
        return current2;
      }
      function release(obj) {
        tail.next = obj;
        tail = obj;
      }
      return {
        get,
        release
      };
    }
    module.exports = reusify;
  }
});

// node_modules/.pnpm/fastq@1.13.0/node_modules/fastq/queue.js
var require_queue = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fastq@1.13.0/node_modules/fastq/queue.js"(exports, module) {
    "use strict";
    var reusify = require_reusify();
    function fastqueue(context, worker, concurrency) {
      if (typeof context === "function") {
        concurrency = worker;
        worker = context;
        context = null;
      }
      if (concurrency < 1) {
        throw new Error("fastqueue concurrency must be greater than 1");
      }
      var cache = reusify(Task);
      var queueHead = null;
      var queueTail = null;
      var _running = 0;
      var errorHandler = null;
      var self2 = {
        push,
        drain: noop,
        saturated: noop,
        pause,
        paused: false,
        concurrency,
        running,
        resume,
        idle,
        length,
        getQueue,
        unshift,
        empty: noop,
        kill,
        killAndDrain,
        error
      };
      return self2;
      function running() {
        return _running;
      }
      function pause() {
        self2.paused = true;
      }
      function length() {
        var current2 = queueHead;
        var counter = 0;
        while (current2) {
          current2 = current2.next;
          counter++;
        }
        return counter;
      }
      function getQueue() {
        var current2 = queueHead;
        var tasks = [];
        while (current2) {
          tasks.push(current2.value);
          current2 = current2.next;
        }
        return tasks;
      }
      function resume() {
        if (!self2.paused)
          return;
        self2.paused = false;
        for (var i = 0; i < self2.concurrency; i++) {
          _running++;
          release();
        }
      }
      function idle() {
        return _running === 0 && self2.length() === 0;
      }
      function push(value, done) {
        var current2 = cache.get();
        current2.context = context;
        current2.release = release;
        current2.value = value;
        current2.callback = done || noop;
        current2.errorHandler = errorHandler;
        if (_running === self2.concurrency || self2.paused) {
          if (queueTail) {
            queueTail.next = current2;
            queueTail = current2;
          } else {
            queueHead = current2;
            queueTail = current2;
            self2.saturated();
          }
        } else {
          _running++;
          worker.call(context, current2.value, current2.worked);
        }
      }
      function unshift(value, done) {
        var current2 = cache.get();
        current2.context = context;
        current2.release = release;
        current2.value = value;
        current2.callback = done || noop;
        if (_running === self2.concurrency || self2.paused) {
          if (queueHead) {
            current2.next = queueHead;
            queueHead = current2;
          } else {
            queueHead = current2;
            queueTail = current2;
            self2.saturated();
          }
        } else {
          _running++;
          worker.call(context, current2.value, current2.worked);
        }
      }
      function release(holder) {
        if (holder) {
          cache.release(holder);
        }
        var next = queueHead;
        if (next) {
          if (!self2.paused) {
            if (queueTail === queueHead) {
              queueTail = null;
            }
            queueHead = next.next;
            next.next = null;
            worker.call(context, next.value, next.worked);
            if (queueTail === null) {
              self2.empty();
            }
          } else {
            _running--;
          }
        } else if (--_running === 0) {
          self2.drain();
        }
      }
      function kill() {
        queueHead = null;
        queueTail = null;
        self2.drain = noop;
      }
      function killAndDrain() {
        queueHead = null;
        queueTail = null;
        self2.drain();
        self2.drain = noop;
      }
      function error(handler) {
        errorHandler = handler;
      }
    }
    function noop() {
    }
    function Task() {
      this.value = null;
      this.callback = noop;
      this.next = null;
      this.release = noop;
      this.context = null;
      this.errorHandler = null;
      var self2 = this;
      this.worked = function worked(err, result) {
        var callback = self2.callback;
        var errorHandler = self2.errorHandler;
        var val = self2.value;
        self2.value = null;
        self2.callback = noop;
        if (self2.errorHandler) {
          errorHandler(err, val);
        }
        callback.call(self2.context, err, result);
        self2.release(self2);
      };
    }
    function queueAsPromised(context, worker, concurrency) {
      if (typeof context === "function") {
        concurrency = worker;
        worker = context;
        context = null;
      }
      function asyncWrapper(arg, cb) {
        worker.call(this, arg).then(function(res) {
          cb(null, res);
        }, cb);
      }
      var queue = fastqueue(context, asyncWrapper, concurrency);
      var pushCb = queue.push;
      var unshiftCb = queue.unshift;
      queue.push = push;
      queue.unshift = unshift;
      queue.drained = drained;
      return queue;
      function push(value) {
        var p = new Promise(function(resolve2, reject) {
          pushCb(value, function(err, result) {
            if (err) {
              reject(err);
              return;
            }
            resolve2(result);
          });
        });
        p.catch(noop);
        return p;
      }
      function unshift(value) {
        var p = new Promise(function(resolve2, reject) {
          unshiftCb(value, function(err, result) {
            if (err) {
              reject(err);
              return;
            }
            resolve2(result);
          });
        });
        p.catch(noop);
        return p;
      }
      function drained() {
        var previousDrain = queue.drain;
        var p = new Promise(function(resolve2) {
          queue.drain = function() {
            previousDrain();
            resolve2();
          };
        });
        return p;
      }
    }
    module.exports = fastqueue;
    module.exports.promise = queueAsPromised;
  }
});

// node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js
var require_common2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/common.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.joinPathSegments = exports.replacePathSegmentSeparator = exports.isAppliedFilter = exports.isFatalError = void 0;
    function isFatalError(settings, error) {
      if (settings.errorFilter === null) {
        return true;
      }
      return !settings.errorFilter(error);
    }
    exports.isFatalError = isFatalError;
    function isAppliedFilter(filter, value) {
      return filter === null || filter(value);
    }
    exports.isAppliedFilter = isAppliedFilter;
    function replacePathSegmentSeparator(filepath, separator) {
      return filepath.split(/[/\\]/).join(separator);
    }
    exports.replacePathSegmentSeparator = replacePathSegmentSeparator;
    function joinPathSegments(a, b, separator) {
      if (a === "") {
        return b;
      }
      if (a.endsWith(separator)) {
        return a + b;
      }
      return a + separator + b;
    }
    exports.joinPathSegments = joinPathSegments;
  }
});

// node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/reader.js
var require_reader = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/reader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var common2 = require_common2();
    var Reader = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._root = common2.replacePathSegmentSeparator(_root, _settings.pathSegmentSeparator);
      }
    };
    exports.default = Reader;
  }
});

// node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/async.js
var require_async3 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var events_1 = _chunkI7OK7DX6cjs.__require.call(void 0, "events");
    var fsScandir = require_out2();
    var fastq = require_queue();
    var common2 = require_common2();
    var reader_1 = require_reader();
    var AsyncReader = class extends reader_1.default {
      constructor(_root, _settings) {
        super(_root, _settings);
        this._settings = _settings;
        this._scandir = fsScandir.scandir;
        this._emitter = new events_1.EventEmitter();
        this._queue = fastq(this._worker.bind(this), this._settings.concurrency);
        this._isFatalError = false;
        this._isDestroyed = false;
        this._queue.drain = () => {
          if (!this._isFatalError) {
            this._emitter.emit("end");
          }
        };
      }
      read() {
        this._isFatalError = false;
        this._isDestroyed = false;
        setImmediate(() => {
          this._pushToQueue(this._root, this._settings.basePath);
        });
        return this._emitter;
      }
      get isDestroyed() {
        return this._isDestroyed;
      }
      destroy() {
        if (this._isDestroyed) {
          throw new Error("The reader is already destroyed");
        }
        this._isDestroyed = true;
        this._queue.killAndDrain();
      }
      onEntry(callback) {
        this._emitter.on("entry", callback);
      }
      onError(callback) {
        this._emitter.once("error", callback);
      }
      onEnd(callback) {
        this._emitter.once("end", callback);
      }
      _pushToQueue(directory, base) {
        const queueItem = { directory, base };
        this._queue.push(queueItem, (error) => {
          if (error !== null) {
            this._handleError(error);
          }
        });
      }
      _worker(item, done) {
        this._scandir(item.directory, this._settings.fsScandirSettings, (error, entries) => {
          if (error !== null) {
            done(error, void 0);
            return;
          }
          for (const entry of entries) {
            this._handleEntry(entry, item.base);
          }
          done(null, void 0);
        });
      }
      _handleError(error) {
        if (this._isDestroyed || !common2.isFatalError(this._settings, error)) {
          return;
        }
        this._isFatalError = true;
        this._isDestroyed = true;
        this._emitter.emit("error", error);
      }
      _handleEntry(entry, base) {
        if (this._isDestroyed || this._isFatalError) {
          return;
        }
        const fullpath = entry.path;
        if (base !== void 0) {
          entry.path = common2.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
        }
        if (common2.isAppliedFilter(this._settings.entryFilter, entry)) {
          this._emitEntry(entry);
        }
        if (entry.dirent.isDirectory() && common2.isAppliedFilter(this._settings.deepFilter, entry)) {
          this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
        }
      }
      _emitEntry(entry) {
        this._emitter.emit("entry", entry);
      }
    };
    exports.default = AsyncReader;
  }
});

// node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/async.js
var require_async4 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var async_1 = require_async3();
    var AsyncProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._storage = [];
      }
      read(callback) {
        this._reader.onError((error) => {
          callFailureCallback(callback, error);
        });
        this._reader.onEntry((entry) => {
          this._storage.push(entry);
        });
        this._reader.onEnd(() => {
          callSuccessCallback(callback, this._storage);
        });
        this._reader.read();
      }
    };
    exports.default = AsyncProvider;
    function callFailureCallback(callback, error) {
      callback(error);
    }
    function callSuccessCallback(callback, entries) {
      callback(null, entries);
    }
  }
});

// node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/stream.js
var require_stream2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var stream_1 = _chunkI7OK7DX6cjs.__require.call(void 0, "stream");
    var async_1 = require_async3();
    var StreamProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new async_1.default(this._root, this._settings);
        this._stream = new stream_1.Readable({
          objectMode: true,
          read: () => {
          },
          destroy: () => {
            if (!this._reader.isDestroyed) {
              this._reader.destroy();
            }
          }
        });
      }
      read() {
        this._reader.onError((error) => {
          this._stream.emit("error", error);
        });
        this._reader.onEntry((entry) => {
          this._stream.push(entry);
        });
        this._reader.onEnd(() => {
          this._stream.push(null);
        });
        this._reader.read();
        return this._stream;
      }
    };
    exports.default = StreamProvider;
  }
});

// node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/sync.js
var require_sync3 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/readers/sync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var fsScandir = require_out2();
    var common2 = require_common2();
    var reader_1 = require_reader();
    var SyncReader = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._scandir = fsScandir.scandirSync;
        this._storage = [];
        this._queue = /* @__PURE__ */ new Set();
      }
      read() {
        this._pushToQueue(this._root, this._settings.basePath);
        this._handleQueue();
        return this._storage;
      }
      _pushToQueue(directory, base) {
        this._queue.add({ directory, base });
      }
      _handleQueue() {
        for (const item of this._queue.values()) {
          this._handleDirectory(item.directory, item.base);
        }
      }
      _handleDirectory(directory, base) {
        try {
          const entries = this._scandir(directory, this._settings.fsScandirSettings);
          for (const entry of entries) {
            this._handleEntry(entry, base);
          }
        } catch (error) {
          this._handleError(error);
        }
      }
      _handleError(error) {
        if (!common2.isFatalError(this._settings, error)) {
          return;
        }
        throw error;
      }
      _handleEntry(entry, base) {
        const fullpath = entry.path;
        if (base !== void 0) {
          entry.path = common2.joinPathSegments(base, entry.name, this._settings.pathSegmentSeparator);
        }
        if (common2.isAppliedFilter(this._settings.entryFilter, entry)) {
          this._pushToStorage(entry);
        }
        if (entry.dirent.isDirectory() && common2.isAppliedFilter(this._settings.deepFilter, entry)) {
          this._pushToQueue(fullpath, base === void 0 ? void 0 : entry.path);
        }
      }
      _pushToStorage(entry) {
        this._storage.push(entry);
      }
    };
    exports.default = SyncReader;
  }
});

// node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/sync.js
var require_sync4 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/providers/sync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var sync_1 = require_sync3();
    var SyncProvider = class {
      constructor(_root, _settings) {
        this._root = _root;
        this._settings = _settings;
        this._reader = new sync_1.default(this._root, this._settings);
      }
      read() {
        return this._reader.read();
      }
    };
    exports.default = SyncProvider;
  }
});

// node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/settings.js
var require_settings3 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/settings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var path3 = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
    var fsScandir = require_out2();
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.basePath = this._getValue(this._options.basePath, void 0);
        this.concurrency = this._getValue(this._options.concurrency, Number.POSITIVE_INFINITY);
        this.deepFilter = this._getValue(this._options.deepFilter, null);
        this.entryFilter = this._getValue(this._options.entryFilter, null);
        this.errorFilter = this._getValue(this._options.errorFilter, null);
        this.pathSegmentSeparator = this._getValue(this._options.pathSegmentSeparator, path3.sep);
        this.fsScandirSettings = new fsScandir.Settings({
          followSymbolicLinks: this._options.followSymbolicLinks,
          fs: this._options.fs,
          pathSegmentSeparator: this._options.pathSegmentSeparator,
          stats: this._options.stats,
          throwErrorOnBrokenSymbolicLink: this._options.throwErrorOnBrokenSymbolicLink
        });
      }
      _getValue(option, value) {
        return option !== null && option !== void 0 ? option : value;
      }
    };
    exports.default = Settings;
  }
});

// node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js
var require_out3 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@nodelib+fs.walk@1.2.8/node_modules/@nodelib/fs.walk/out/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Settings = exports.walkStream = exports.walkSync = exports.walk = void 0;
    var async_1 = require_async4();
    var stream_1 = require_stream2();
    var sync_1 = require_sync4();
    var settings_1 = require_settings3();
    exports.Settings = settings_1.default;
    function walk(directory, optionsOrSettingsOrCallback, callback) {
      if (typeof optionsOrSettingsOrCallback === "function") {
        new async_1.default(directory, getSettings()).read(optionsOrSettingsOrCallback);
        return;
      }
      new async_1.default(directory, getSettings(optionsOrSettingsOrCallback)).read(callback);
    }
    exports.walk = walk;
    function walkSync(directory, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      const provider2 = new sync_1.default(directory, settings);
      return provider2.read();
    }
    exports.walkSync = walkSync;
    function walkStream(directory, optionsOrSettings) {
      const settings = getSettings(optionsOrSettings);
      const provider2 = new stream_1.default(directory, settings);
      return provider2.read();
    }
    exports.walkStream = walkStream;
    function getSettings(settingsOrOptions = {}) {
      if (settingsOrOptions instanceof settings_1.default) {
        return settingsOrOptions;
      }
      return new settings_1.default(settingsOrOptions);
    }
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/readers/reader.js
var require_reader2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/readers/reader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var path3 = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
    var fsStat = require_out();
    var utils = require_utils3();
    var Reader = class {
      constructor(_settings) {
        this._settings = _settings;
        this._fsStatSettings = new fsStat.Settings({
          followSymbolicLink: this._settings.followSymbolicLinks,
          fs: this._settings.fs,
          throwErrorOnBrokenSymbolicLink: this._settings.followSymbolicLinks
        });
      }
      _getFullEntryPath(filepath) {
        return path3.resolve(this._settings.cwd, filepath);
      }
      _makeEntry(stats, pattern) {
        const entry = {
          name: pattern,
          path: pattern,
          dirent: utils.fs.createDirentFromStats(pattern, stats)
        };
        if (this._settings.stats) {
          entry.stats = stats;
        }
        return entry;
      }
      _isFatalError(error) {
        return !utils.errno.isEnoentCodeError(error) && !this._settings.suppressErrors;
      }
    };
    exports.default = Reader;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/readers/stream.js
var require_stream3 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/readers/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var stream_1 = _chunkI7OK7DX6cjs.__require.call(void 0, "stream");
    var fsStat = require_out();
    var fsWalk = require_out3();
    var reader_1 = require_reader2();
    var ReaderStream = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._walkStream = fsWalk.walkStream;
        this._stat = fsStat.stat;
      }
      dynamic(root, options) {
        return this._walkStream(root, options);
      }
      static(patterns, options) {
        const filepaths = patterns.map(this._getFullEntryPath, this);
        const stream = new stream_1.PassThrough({ objectMode: true });
        stream._write = (index2, _enc, done) => {
          return this._getEntry(filepaths[index2], patterns[index2], options).then((entry) => {
            if (entry !== null && options.entryFilter(entry)) {
              stream.push(entry);
            }
            if (index2 === filepaths.length - 1) {
              stream.end();
            }
            done();
          }).catch(done);
        };
        for (let i = 0; i < filepaths.length; i++) {
          stream.write(i);
        }
        return stream;
      }
      _getEntry(filepath, pattern, options) {
        return this._getStat(filepath).then((stats) => this._makeEntry(stats, pattern)).catch((error) => {
          if (options.errorFilter(error)) {
            return null;
          }
          throw error;
        });
      }
      _getStat(filepath) {
        return new Promise((resolve2, reject) => {
          this._stat(filepath, this._fsStatSettings, (error, stats) => {
            return error === null ? resolve2(stats) : reject(error);
          });
        });
      }
    };
    exports.default = ReaderStream;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/readers/async.js
var require_async5 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/readers/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var fsWalk = require_out3();
    var reader_1 = require_reader2();
    var stream_1 = require_stream3();
    var ReaderAsync = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._walkAsync = fsWalk.walk;
        this._readerStream = new stream_1.default(this._settings);
      }
      dynamic(root, options) {
        return new Promise((resolve2, reject) => {
          this._walkAsync(root, options, (error, entries) => {
            if (error === null) {
              resolve2(entries);
            } else {
              reject(error);
            }
          });
        });
      }
      async static(patterns, options) {
        const entries = [];
        const stream = this._readerStream.static(patterns, options);
        return new Promise((resolve2, reject) => {
          stream.once("error", reject);
          stream.on("data", (entry) => entries.push(entry));
          stream.once("end", () => resolve2(entries));
        });
      }
    };
    exports.default = ReaderAsync;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/matchers/matcher.js
var require_matcher = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/matchers/matcher.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils = require_utils3();
    var Matcher = class {
      constructor(_patterns, _settings, _micromatchOptions) {
        this._patterns = _patterns;
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
        this._storage = [];
        this._fillStorage();
      }
      _fillStorage() {
        const patterns = utils.pattern.expandPatternsWithBraceExpansion(this._patterns);
        for (const pattern of patterns) {
          const segments = this._getPatternSegments(pattern);
          const sections = this._splitSegmentsIntoSections(segments);
          this._storage.push({
            complete: sections.length <= 1,
            pattern,
            segments,
            sections
          });
        }
      }
      _getPatternSegments(pattern) {
        const parts = utils.pattern.getPatternParts(pattern, this._micromatchOptions);
        return parts.map((part) => {
          const dynamic = utils.pattern.isDynamicPattern(part, this._settings);
          if (!dynamic) {
            return {
              dynamic: false,
              pattern: part
            };
          }
          return {
            dynamic: true,
            pattern: part,
            patternRe: utils.pattern.makeRe(part, this._micromatchOptions)
          };
        });
      }
      _splitSegmentsIntoSections(segments) {
        return utils.array.splitWhen(segments, (segment) => segment.dynamic && utils.pattern.hasGlobStar(segment.pattern));
      }
    };
    exports.default = Matcher;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/matchers/partial.js
var require_partial = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/matchers/partial.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var matcher_1 = require_matcher();
    var PartialMatcher = class extends matcher_1.default {
      match(filepath) {
        const parts = filepath.split("/");
        const levels = parts.length;
        const patterns = this._storage.filter((info) => !info.complete || info.segments.length > levels);
        for (const pattern of patterns) {
          const section = pattern.sections[0];
          if (!pattern.complete && levels > section.length) {
            return true;
          }
          const match = parts.every((part, index2) => {
            const segment = pattern.segments[index2];
            if (segment.dynamic && segment.patternRe.test(part)) {
              return true;
            }
            if (!segment.dynamic && segment.pattern === part) {
              return true;
            }
            return false;
          });
          if (match) {
            return true;
          }
        }
        return false;
      }
    };
    exports.default = PartialMatcher;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/filters/deep.js
var require_deep = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/filters/deep.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils = require_utils3();
    var partial_1 = require_partial();
    var DeepFilter = class {
      constructor(_settings, _micromatchOptions) {
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
      }
      getFilter(basePath, positive, negative) {
        const matcher = this._getMatcher(positive);
        const negativeRe = this._getNegativePatternsRe(negative);
        return (entry) => this._filter(basePath, entry, matcher, negativeRe);
      }
      _getMatcher(patterns) {
        return new partial_1.default(patterns, this._settings, this._micromatchOptions);
      }
      _getNegativePatternsRe(patterns) {
        const affectDepthOfReadingPatterns = patterns.filter(utils.pattern.isAffectDepthOfReadingPattern);
        return utils.pattern.convertPatternsToRe(affectDepthOfReadingPatterns, this._micromatchOptions);
      }
      _filter(basePath, entry, matcher, negativeRe) {
        if (this._isSkippedByDeep(basePath, entry.path)) {
          return false;
        }
        if (this._isSkippedSymbolicLink(entry)) {
          return false;
        }
        const filepath = utils.path.removeLeadingDotSegment(entry.path);
        if (this._isSkippedByPositivePatterns(filepath, matcher)) {
          return false;
        }
        return this._isSkippedByNegativePatterns(filepath, negativeRe);
      }
      _isSkippedByDeep(basePath, entryPath) {
        if (this._settings.deep === Infinity) {
          return false;
        }
        return this._getEntryLevel(basePath, entryPath) >= this._settings.deep;
      }
      _getEntryLevel(basePath, entryPath) {
        const entryPathDepth = entryPath.split("/").length;
        if (basePath === "") {
          return entryPathDepth;
        }
        const basePathDepth = basePath.split("/").length;
        return entryPathDepth - basePathDepth;
      }
      _isSkippedSymbolicLink(entry) {
        return !this._settings.followSymbolicLinks && entry.dirent.isSymbolicLink();
      }
      _isSkippedByPositivePatterns(entryPath, matcher) {
        return !this._settings.baseNameMatch && !matcher.match(entryPath);
      }
      _isSkippedByNegativePatterns(entryPath, patternsRe) {
        return !utils.pattern.matchAny(entryPath, patternsRe);
      }
    };
    exports.default = DeepFilter;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/filters/entry.js
var require_entry = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/filters/entry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils = require_utils3();
    var EntryFilter = class {
      constructor(_settings, _micromatchOptions) {
        this._settings = _settings;
        this._micromatchOptions = _micromatchOptions;
        this.index = /* @__PURE__ */ new Map();
      }
      getFilter(positive, negative) {
        const positiveRe = utils.pattern.convertPatternsToRe(positive, this._micromatchOptions);
        const negativeRe = utils.pattern.convertPatternsToRe(negative, this._micromatchOptions);
        return (entry) => this._filter(entry, positiveRe, negativeRe);
      }
      _filter(entry, positiveRe, negativeRe) {
        if (this._settings.unique && this._isDuplicateEntry(entry)) {
          return false;
        }
        if (this._onlyFileFilter(entry) || this._onlyDirectoryFilter(entry)) {
          return false;
        }
        if (this._isSkippedByAbsoluteNegativePatterns(entry.path, negativeRe)) {
          return false;
        }
        const filepath = this._settings.baseNameMatch ? entry.name : entry.path;
        const isDirectory = entry.dirent.isDirectory();
        const isMatched = this._isMatchToPatterns(filepath, positiveRe, isDirectory) && !this._isMatchToPatterns(entry.path, negativeRe, isDirectory);
        if (this._settings.unique && isMatched) {
          this._createIndexRecord(entry);
        }
        return isMatched;
      }
      _isDuplicateEntry(entry) {
        return this.index.has(entry.path);
      }
      _createIndexRecord(entry) {
        this.index.set(entry.path, void 0);
      }
      _onlyFileFilter(entry) {
        return this._settings.onlyFiles && !entry.dirent.isFile();
      }
      _onlyDirectoryFilter(entry) {
        return this._settings.onlyDirectories && !entry.dirent.isDirectory();
      }
      _isSkippedByAbsoluteNegativePatterns(entryPath, patternsRe) {
        if (!this._settings.absolute) {
          return false;
        }
        const fullpath = utils.path.makeAbsolute(this._settings.cwd, entryPath);
        return utils.pattern.matchAny(fullpath, patternsRe);
      }
      _isMatchToPatterns(entryPath, patternsRe, isDirectory) {
        const filepath = utils.path.removeLeadingDotSegment(entryPath);
        const isMatched = utils.pattern.matchAny(filepath, patternsRe);
        if (!isMatched && isDirectory) {
          return utils.pattern.matchAny(filepath + "/", patternsRe);
        }
        return isMatched;
      }
    };
    exports.default = EntryFilter;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/filters/error.js
var require_error = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/filters/error.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils = require_utils3();
    var ErrorFilter = class {
      constructor(_settings) {
        this._settings = _settings;
      }
      getFilter() {
        return (error) => this._isNonFatalError(error);
      }
      _isNonFatalError(error) {
        return utils.errno.isEnoentCodeError(error) || this._settings.suppressErrors;
      }
    };
    exports.default = ErrorFilter;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/transformers/entry.js
var require_entry2 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/transformers/entry.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var utils = require_utils3();
    var EntryTransformer = class {
      constructor(_settings) {
        this._settings = _settings;
      }
      getTransformer() {
        return (entry) => this._transform(entry);
      }
      _transform(entry) {
        let filepath = entry.path;
        if (this._settings.absolute) {
          filepath = utils.path.makeAbsolute(this._settings.cwd, filepath);
          filepath = utils.path.unixify(filepath);
        }
        if (this._settings.markDirectories && entry.dirent.isDirectory()) {
          filepath += "/";
        }
        if (!this._settings.objectMode) {
          return filepath;
        }
        return Object.assign(Object.assign({}, entry), { path: filepath });
      }
    };
    exports.default = EntryTransformer;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/provider.js
var require_provider = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/provider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var path3 = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
    var deep_1 = require_deep();
    var entry_1 = require_entry();
    var error_1 = require_error();
    var entry_2 = require_entry2();
    var Provider = class {
      constructor(_settings) {
        this._settings = _settings;
        this.errorFilter = new error_1.default(this._settings);
        this.entryFilter = new entry_1.default(this._settings, this._getMicromatchOptions());
        this.deepFilter = new deep_1.default(this._settings, this._getMicromatchOptions());
        this.entryTransformer = new entry_2.default(this._settings);
      }
      _getRootDirectory(task) {
        return path3.resolve(this._settings.cwd, task.base);
      }
      _getReaderOptions(task) {
        const basePath = task.base === "." ? "" : task.base;
        return {
          basePath,
          pathSegmentSeparator: "/",
          concurrency: this._settings.concurrency,
          deepFilter: this.deepFilter.getFilter(basePath, task.positive, task.negative),
          entryFilter: this.entryFilter.getFilter(task.positive, task.negative),
          errorFilter: this.errorFilter.getFilter(),
          followSymbolicLinks: this._settings.followSymbolicLinks,
          fs: this._settings.fs,
          stats: this._settings.stats,
          throwErrorOnBrokenSymbolicLink: this._settings.throwErrorOnBrokenSymbolicLink,
          transform: this.entryTransformer.getTransformer()
        };
      }
      _getMicromatchOptions() {
        return {
          dot: this._settings.dot,
          matchBase: this._settings.baseNameMatch,
          nobrace: !this._settings.braceExpansion,
          nocase: !this._settings.caseSensitiveMatch,
          noext: !this._settings.extglob,
          noglobstar: !this._settings.globstar,
          posix: true,
          strictSlashes: false
        };
      }
    };
    exports.default = Provider;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/async.js
var require_async6 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var async_1 = require_async5();
    var provider_1 = require_provider();
    var ProviderAsync = class extends provider_1.default {
      constructor() {
        super(...arguments);
        this._reader = new async_1.default(this._settings);
      }
      async read(task) {
        const root = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const entries = await this.api(root, task, options);
        return entries.map((entry) => options.transform(entry));
      }
      api(root, task, options) {
        if (task.dynamic) {
          return this._reader.dynamic(root, options);
        }
        return this._reader.static(task.patterns, options);
      }
    };
    exports.default = ProviderAsync;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/stream.js
var require_stream4 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/stream.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var stream_1 = _chunkI7OK7DX6cjs.__require.call(void 0, "stream");
    var stream_2 = require_stream3();
    var provider_1 = require_provider();
    var ProviderStream = class extends provider_1.default {
      constructor() {
        super(...arguments);
        this._reader = new stream_2.default(this._settings);
      }
      read(task) {
        const root = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const source = this.api(root, task, options);
        const destination = new stream_1.Readable({ objectMode: true, read: () => {
        } });
        source.once("error", (error) => destination.emit("error", error)).on("data", (entry) => destination.emit("data", options.transform(entry))).once("end", () => destination.emit("end"));
        destination.once("close", () => source.destroy());
        return destination;
      }
      api(root, task, options) {
        if (task.dynamic) {
          return this._reader.dynamic(root, options);
        }
        return this._reader.static(task.patterns, options);
      }
    };
    exports.default = ProviderStream;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/readers/sync.js
var require_sync5 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/readers/sync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var fsStat = require_out();
    var fsWalk = require_out3();
    var reader_1 = require_reader2();
    var ReaderSync = class extends reader_1.default {
      constructor() {
        super(...arguments);
        this._walkSync = fsWalk.walkSync;
        this._statSync = fsStat.statSync;
      }
      dynamic(root, options) {
        return this._walkSync(root, options);
      }
      static(patterns, options) {
        const entries = [];
        for (const pattern of patterns) {
          const filepath = this._getFullEntryPath(pattern);
          const entry = this._getEntry(filepath, pattern, options);
          if (entry === null || !options.entryFilter(entry)) {
            continue;
          }
          entries.push(entry);
        }
        return entries;
      }
      _getEntry(filepath, pattern, options) {
        try {
          const stats = this._getStat(filepath);
          return this._makeEntry(stats, pattern);
        } catch (error) {
          if (options.errorFilter(error)) {
            return null;
          }
          throw error;
        }
      }
      _getStat(filepath) {
        return this._statSync(filepath, this._fsStatSettings);
      }
    };
    exports.default = ReaderSync;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/sync.js
var require_sync6 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/providers/sync.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var sync_1 = require_sync5();
    var provider_1 = require_provider();
    var ProviderSync = class extends provider_1.default {
      constructor() {
        super(...arguments);
        this._reader = new sync_1.default(this._settings);
      }
      read(task) {
        const root = this._getRootDirectory(task);
        const options = this._getReaderOptions(task);
        const entries = this.api(root, task, options);
        return entries.map(options.transform);
      }
      api(root, task, options) {
        if (task.dynamic) {
          return this._reader.dynamic(root, options);
        }
        return this._reader.static(task.patterns, options);
      }
    };
    exports.default = ProviderSync;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/settings.js
var require_settings4 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/settings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_FILE_SYSTEM_ADAPTER = void 0;
    var fs4 = _chunkI7OK7DX6cjs.__require.call(void 0, "fs");
    var os = _chunkI7OK7DX6cjs.__require.call(void 0, "os");
    var CPU_COUNT = Math.max(os.cpus().length, 1);
    exports.DEFAULT_FILE_SYSTEM_ADAPTER = {
      lstat: fs4.lstat,
      lstatSync: fs4.lstatSync,
      stat: fs4.stat,
      statSync: fs4.statSync,
      readdir: fs4.readdir,
      readdirSync: fs4.readdirSync
    };
    var Settings = class {
      constructor(_options = {}) {
        this._options = _options;
        this.absolute = this._getValue(this._options.absolute, false);
        this.baseNameMatch = this._getValue(this._options.baseNameMatch, false);
        this.braceExpansion = this._getValue(this._options.braceExpansion, true);
        this.caseSensitiveMatch = this._getValue(this._options.caseSensitiveMatch, true);
        this.concurrency = this._getValue(this._options.concurrency, CPU_COUNT);
        this.cwd = this._getValue(this._options.cwd, process.cwd());
        this.deep = this._getValue(this._options.deep, Infinity);
        this.dot = this._getValue(this._options.dot, false);
        this.extglob = this._getValue(this._options.extglob, true);
        this.followSymbolicLinks = this._getValue(this._options.followSymbolicLinks, true);
        this.fs = this._getFileSystemMethods(this._options.fs);
        this.globstar = this._getValue(this._options.globstar, true);
        this.ignore = this._getValue(this._options.ignore, []);
        this.markDirectories = this._getValue(this._options.markDirectories, false);
        this.objectMode = this._getValue(this._options.objectMode, false);
        this.onlyDirectories = this._getValue(this._options.onlyDirectories, false);
        this.onlyFiles = this._getValue(this._options.onlyFiles, true);
        this.stats = this._getValue(this._options.stats, false);
        this.suppressErrors = this._getValue(this._options.suppressErrors, false);
        this.throwErrorOnBrokenSymbolicLink = this._getValue(this._options.throwErrorOnBrokenSymbolicLink, false);
        this.unique = this._getValue(this._options.unique, true);
        if (this.onlyDirectories) {
          this.onlyFiles = false;
        }
        if (this.stats) {
          this.objectMode = true;
        }
      }
      _getValue(option, value) {
        return option === void 0 ? value : option;
      }
      _getFileSystemMethods(methods = {}) {
        return Object.assign(Object.assign({}, exports.DEFAULT_FILE_SYSTEM_ADAPTER), methods);
      }
    };
    exports.default = Settings;
  }
});

// node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/index.js
var require_out4 = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/fast-glob@3.2.12/node_modules/fast-glob/out/index.js"(exports, module) {
    "use strict";
    var taskManager = require_tasks();
    var patternManager = require_patterns();
    var async_1 = require_async6();
    var stream_1 = require_stream4();
    var sync_1 = require_sync6();
    var settings_1 = require_settings4();
    var utils = require_utils3();
    async function FastGlob(source, options) {
      assertPatternsInput2(source);
      const works = getWorks(source, async_1.default, options);
      const result = await Promise.all(works);
      return utils.array.flatten(result);
    }
    (function(FastGlob2) {
      function sync(source, options) {
        assertPatternsInput2(source);
        const works = getWorks(source, sync_1.default, options);
        return utils.array.flatten(works);
      }
      FastGlob2.sync = sync;
      function stream(source, options) {
        assertPatternsInput2(source);
        const works = getWorks(source, stream_1.default, options);
        return utils.stream.merge(works);
      }
      FastGlob2.stream = stream;
      function generateTasks2(source, options) {
        assertPatternsInput2(source);
        const patterns = patternManager.transform([].concat(source));
        const settings = new settings_1.default(options);
        return taskManager.generate(patterns, settings);
      }
      FastGlob2.generateTasks = generateTasks2;
      function isDynamicPattern2(source, options) {
        assertPatternsInput2(source);
        const settings = new settings_1.default(options);
        return utils.pattern.isDynamicPattern(source, settings);
      }
      FastGlob2.isDynamicPattern = isDynamicPattern2;
      function escapePath(source) {
        assertPatternsInput2(source);
        return utils.path.escape(source);
      }
      FastGlob2.escapePath = escapePath;
    })(FastGlob || (FastGlob = {}));
    function getWorks(source, _Provider, options) {
      const patterns = patternManager.transform([].concat(source));
      const settings = new settings_1.default(options);
      const tasks = taskManager.generate(patterns, settings);
      const provider2 = new _Provider(settings);
      return tasks.map(provider2.read, provider2);
    }
    function assertPatternsInput2(input) {
      const source = [].concat(input);
      const isValidSource = source.every((item) => utils.string.isString(item) && !utils.string.isEmpty(item));
      if (!isValidSource) {
        throw new TypeError("Patterns must be a string (non empty) or an array of strings");
      }
    }
    module.exports = FastGlob;
  }
});

// node_modules/.pnpm/path-type@4.0.0/node_modules/path-type/index.js
var require_path_type = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/path-type@4.0.0/node_modules/path-type/index.js"(exports) {
    "use strict";
    var { promisify } = _chunkI7OK7DX6cjs.__require.call(void 0, "util");
    var fs4 = _chunkI7OK7DX6cjs.__require.call(void 0, "fs");
    async function isType(fsStatType, statsMethodName, filePath) {
      if (typeof filePath !== "string") {
        throw new TypeError(`Expected a string, got ${typeof filePath}`);
      }
      try {
        const stats = await promisify(fs4[fsStatType])(filePath);
        return stats[statsMethodName]();
      } catch (error) {
        if (error.code === "ENOENT") {
          return false;
        }
        throw error;
      }
    }
    function isTypeSync(fsStatType, statsMethodName, filePath) {
      if (typeof filePath !== "string") {
        throw new TypeError(`Expected a string, got ${typeof filePath}`);
      }
      try {
        return fs4[fsStatType](filePath)[statsMethodName]();
      } catch (error) {
        if (error.code === "ENOENT") {
          return false;
        }
        throw error;
      }
    }
    exports.isFile = isType.bind(null, "stat", "isFile");
    exports.isDirectory = isType.bind(null, "stat", "isDirectory");
    exports.isSymlink = isType.bind(null, "lstat", "isSymbolicLink");
    exports.isFileSync = isTypeSync.bind(null, "statSync", "isFile");
    exports.isDirectorySync = isTypeSync.bind(null, "statSync", "isDirectory");
    exports.isSymlinkSync = isTypeSync.bind(null, "lstatSync", "isSymbolicLink");
  }
});

// node_modules/.pnpm/dir-glob@3.0.1/node_modules/dir-glob/index.js
var require_dir_glob = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/dir-glob@3.0.1/node_modules/dir-glob/index.js"(exports, module) {
    "use strict";
    var path3 = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
    var pathType = require_path_type();
    var getExtensions = (extensions) => extensions.length > 1 ? `{${extensions.join(",")}}` : extensions[0];
    var getPath = (filepath, cwd) => {
      const pth = filepath[0] === "!" ? filepath.slice(1) : filepath;
      return path3.isAbsolute(pth) ? pth : path3.join(cwd, pth);
    };
    var addExtensions = (file, extensions) => {
      if (path3.extname(file)) {
        return `**/${file}`;
      }
      return `**/${file}.${getExtensions(extensions)}`;
    };
    var getGlob = (directory, options) => {
      if (options.files && !Array.isArray(options.files)) {
        throw new TypeError(`Expected \`files\` to be of type \`Array\` but received type \`${typeof options.files}\``);
      }
      if (options.extensions && !Array.isArray(options.extensions)) {
        throw new TypeError(`Expected \`extensions\` to be of type \`Array\` but received type \`${typeof options.extensions}\``);
      }
      if (options.files && options.extensions) {
        return options.files.map((x) => path3.posix.join(directory, addExtensions(x, options.extensions)));
      }
      if (options.files) {
        return options.files.map((x) => path3.posix.join(directory, `**/${x}`));
      }
      if (options.extensions) {
        return [path3.posix.join(directory, `**/*.${getExtensions(options.extensions)}`)];
      }
      return [path3.posix.join(directory, "**")];
    };
    module.exports = async (input, options) => {
      options = {
        cwd: process.cwd(),
        ...options
      };
      if (typeof options.cwd !== "string") {
        throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``);
      }
      const globs = await Promise.all([].concat(input).map(async (x) => {
        const isDirectory = await pathType.isDirectory(getPath(x, options.cwd));
        return isDirectory ? getGlob(x, options) : x;
      }));
      return [].concat.apply([], globs);
    };
    module.exports.sync = (input, options) => {
      options = {
        cwd: process.cwd(),
        ...options
      };
      if (typeof options.cwd !== "string") {
        throw new TypeError(`Expected \`cwd\` to be of type \`string\` but received type \`${typeof options.cwd}\``);
      }
      const globs = [].concat(input).map((x) => pathType.isDirectorySync(getPath(x, options.cwd)) ? getGlob(x, options) : x);
      return [].concat.apply([], globs);
    };
  }
});

// node_modules/.pnpm/ignore@5.2.0/node_modules/ignore/index.js
var require_ignore = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/ignore@5.2.0/node_modules/ignore/index.js"(exports, module) {
    function makeArray(subject) {
      return Array.isArray(subject) ? subject : [subject];
    }
    var EMPTY = "";
    var SPACE = " ";
    var ESCAPE = "\\";
    var REGEX_TEST_BLANK_LINE = /^\s+$/;
    var REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION = /^\\!/;
    var REGEX_REPLACE_LEADING_EXCAPED_HASH = /^\\#/;
    var REGEX_SPLITALL_CRLF = /\r?\n/g;
    var REGEX_TEST_INVALID_PATH = /^\.*\/|^\.+$/;
    var SLASH = "/";
    var KEY_IGNORE = typeof Symbol !== "undefined" ? Symbol.for("node-ignore") : "node-ignore";
    var define = (object, key, value) => Object.defineProperty(object, key, { value });
    var REGEX_REGEXP_RANGE = /([0-z])-([0-z])/g;
    var RETURN_FALSE = () => false;
    var sanitizeRange = (range) => range.replace(
      REGEX_REGEXP_RANGE,
      (match, from, to) => from.charCodeAt(0) <= to.charCodeAt(0) ? match : EMPTY
    );
    var cleanRangeBackSlash = (slashes) => {
      const { length } = slashes;
      return slashes.slice(0, length - length % 2);
    };
    var REPLACERS = [
      [
        /\\?\s+$/,
        (match) => match.indexOf("\\") === 0 ? SPACE : EMPTY
      ],
      [
        /\\\s/g,
        () => SPACE
      ],
      [
        /[\\$.|*+(){^]/g,
        (match) => `\\${match}`
      ],
      [
        /(?!\\)\?/g,
        () => "[^/]"
      ],
      [
        /^\//,
        () => "^"
      ],
      [
        /\//g,
        () => "\\/"
      ],
      [
        /^\^*\\\*\\\*\\\//,
        () => "^(?:.*\\/)?"
      ],
      [
        /^(?=[^^])/,
        function startingReplacer() {
          return !/\/(?!$)/.test(this) ? "(?:^|\\/)" : "^";
        }
      ],
      [
        /\\\/\\\*\\\*(?=\\\/|$)/g,
        (_, index2, str) => index2 + 6 < str.length ? "(?:\\/[^\\/]+)*" : "\\/.+"
      ],
      [
        /(^|[^\\]+)\\\*(?=.+)/g,
        (_, p1) => `${p1}[^\\/]*`
      ],
      [
        /\\\\\\(?=[$.|*+(){^])/g,
        () => ESCAPE
      ],
      [
        /\\\\/g,
        () => ESCAPE
      ],
      [
        /(\\)?\[([^\]/]*?)(\\*)($|\])/g,
        (match, leadEscape, range, endEscape, close) => leadEscape === ESCAPE ? `\\[${range}${cleanRangeBackSlash(endEscape)}${close}` : close === "]" ? endEscape.length % 2 === 0 ? `[${sanitizeRange(range)}${endEscape}]` : "[]" : "[]"
      ],
      [
        /(?:[^*])$/,
        (match) => /\/$/.test(match) ? `${match}$` : `${match}(?=$|\\/$)`
      ],
      [
        /(\^|\\\/)?\\\*$/,
        (_, p1) => {
          const prefix = p1 ? `${p1}[^/]+` : "[^/]*";
          return `${prefix}(?=$|\\/$)`;
        }
      ]
    ];
    var regexCache = /* @__PURE__ */ Object.create(null);
    var makeRegex = (pattern, ignoreCase) => {
      let source = regexCache[pattern];
      if (!source) {
        source = REPLACERS.reduce(
          (prev, current2) => prev.replace(current2[0], current2[1].bind(pattern)),
          pattern
        );
        regexCache[pattern] = source;
      }
      return ignoreCase ? new RegExp(source, "i") : new RegExp(source);
    };
    var isString = (subject) => typeof subject === "string";
    var checkPattern = (pattern) => pattern && isString(pattern) && !REGEX_TEST_BLANK_LINE.test(pattern) && pattern.indexOf("#") !== 0;
    var splitPattern = (pattern) => pattern.split(REGEX_SPLITALL_CRLF);
    var IgnoreRule = class {
      constructor(origin, pattern, negative, regex) {
        this.origin = origin;
        this.pattern = pattern;
        this.negative = negative;
        this.regex = regex;
      }
    };
    var createRule = (pattern, ignoreCase) => {
      const origin = pattern;
      let negative = false;
      if (pattern.indexOf("!") === 0) {
        negative = true;
        pattern = pattern.substr(1);
      }
      pattern = pattern.replace(REGEX_REPLACE_LEADING_EXCAPED_EXCLAMATION, "!").replace(REGEX_REPLACE_LEADING_EXCAPED_HASH, "#");
      const regex = makeRegex(pattern, ignoreCase);
      return new IgnoreRule(
        origin,
        pattern,
        negative,
        regex
      );
    };
    var throwError = (message, Ctor) => {
      throw new Ctor(message);
    };
    var checkPath = (path3, originalPath, doThrow) => {
      if (!isString(path3)) {
        return doThrow(
          `path must be a string, but got \`${originalPath}\``,
          TypeError
        );
      }
      if (!path3) {
        return doThrow(`path must not be empty`, TypeError);
      }
      if (checkPath.isNotRelative(path3)) {
        const r2 = "`path.relative()`d";
        return doThrow(
          `path should be a ${r2} string, but got "${originalPath}"`,
          RangeError
        );
      }
      return true;
    };
    var isNotRelative = (path3) => REGEX_TEST_INVALID_PATH.test(path3);
    checkPath.isNotRelative = isNotRelative;
    checkPath.convert = (p) => p;
    var Ignore = class {
      constructor({
        ignorecase = true,
        ignoreCase = ignorecase,
        allowRelativePaths = false
      } = {}) {
        define(this, KEY_IGNORE, true);
        this._rules = [];
        this._ignoreCase = ignoreCase;
        this._allowRelativePaths = allowRelativePaths;
        this._initCache();
      }
      _initCache() {
        this._ignoreCache = /* @__PURE__ */ Object.create(null);
        this._testCache = /* @__PURE__ */ Object.create(null);
      }
      _addPattern(pattern) {
        if (pattern && pattern[KEY_IGNORE]) {
          this._rules = this._rules.concat(pattern._rules);
          this._added = true;
          return;
        }
        if (checkPattern(pattern)) {
          const rule = createRule(pattern, this._ignoreCase);
          this._added = true;
          this._rules.push(rule);
        }
      }
      add(pattern) {
        this._added = false;
        makeArray(
          isString(pattern) ? splitPattern(pattern) : pattern
        ).forEach(this._addPattern, this);
        if (this._added) {
          this._initCache();
        }
        return this;
      }
      addPattern(pattern) {
        return this.add(pattern);
      }
      _testOne(path3, checkUnignored) {
        let ignored = false;
        let unignored = false;
        this._rules.forEach((rule) => {
          const { negative } = rule;
          if (unignored === negative && ignored !== unignored || negative && !ignored && !unignored && !checkUnignored) {
            return;
          }
          const matched = rule.regex.test(path3);
          if (matched) {
            ignored = !negative;
            unignored = negative;
          }
        });
        return {
          ignored,
          unignored
        };
      }
      _test(originalPath, cache, checkUnignored, slices) {
        const path3 = originalPath && checkPath.convert(originalPath);
        checkPath(
          path3,
          originalPath,
          this._allowRelativePaths ? RETURN_FALSE : throwError
        );
        return this._t(path3, cache, checkUnignored, slices);
      }
      _t(path3, cache, checkUnignored, slices) {
        if (path3 in cache) {
          return cache[path3];
        }
        if (!slices) {
          slices = path3.split(SLASH);
        }
        slices.pop();
        if (!slices.length) {
          return cache[path3] = this._testOne(path3, checkUnignored);
        }
        const parent = this._t(
          slices.join(SLASH) + SLASH,
          cache,
          checkUnignored,
          slices
        );
        return cache[path3] = parent.ignored ? parent : this._testOne(path3, checkUnignored);
      }
      ignores(path3) {
        return this._test(path3, this._ignoreCache, false).ignored;
      }
      createFilter() {
        return (path3) => !this.ignores(path3);
      }
      filter(paths) {
        return makeArray(paths).filter(this.createFilter());
      }
      test(path3) {
        return this._test(path3, this._testCache, true);
      }
    };
    var factory = (options) => new Ignore(options);
    var isPathValid = (path3) => checkPath(path3 && checkPath.convert(path3), path3, RETURN_FALSE);
    factory.isPathValid = isPathValid;
    factory.default = factory;
    module.exports = factory;
    if (typeof process !== "undefined" && (process.env && process.env.IGNORE_TEST_WIN32 || process.platform === "win32")) {
      const makePosix = (str) => /^\\\\\?\\/.test(str) || /["<>|\u0000-\u001F]+/u.test(str) ? str : str.replace(/\\/g, "/");
      checkPath.convert = makePosix;
      const REGIX_IS_WINDOWS_PATH_ABSOLUTE = /^[a-z]:\//i;
      checkPath.isNotRelative = (path3) => REGIX_IS_WINDOWS_PATH_ABSOLUTE.test(path3) || isNotRelative(path3);
    }
  }
});

// node_modules/.pnpm/tapable@1.1.3/node_modules/tapable/lib/Hook.js
var require_Hook = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/tapable@1.1.3/node_modules/tapable/lib/Hook.js"(exports, module) {
    "use strict";
    var Hook = class {
      constructor(args) {
        if (!Array.isArray(args))
          args = [];
        this._args = args;
        this.taps = [];
        this.interceptors = [];
        this.call = this._call;
        this.promise = this._promise;
        this.callAsync = this._callAsync;
        this._x = void 0;
      }
      compile(options) {
        throw new Error("Abstract: should be overriden");
      }
      _createCall(type) {
        return this.compile({
          taps: this.taps,
          interceptors: this.interceptors,
          args: this._args,
          type
        });
      }
      tap(options, fn) {
        if (typeof options === "string")
          options = { name: options };
        if (typeof options !== "object" || options === null)
          throw new Error(
            "Invalid arguments to tap(options: Object, fn: function)"
          );
        options = Object.assign({ type: "sync", fn }, options);
        if (typeof options.name !== "string" || options.name === "")
          throw new Error("Missing name for tap");
        options = this._runRegisterInterceptors(options);
        this._insert(options);
      }
      tapAsync(options, fn) {
        if (typeof options === "string")
          options = { name: options };
        if (typeof options !== "object" || options === null)
          throw new Error(
            "Invalid arguments to tapAsync(options: Object, fn: function)"
          );
        options = Object.assign({ type: "async", fn }, options);
        if (typeof options.name !== "string" || options.name === "")
          throw new Error("Missing name for tapAsync");
        options = this._runRegisterInterceptors(options);
        this._insert(options);
      }
      tapPromise(options, fn) {
        if (typeof options === "string")
          options = { name: options };
        if (typeof options !== "object" || options === null)
          throw new Error(
            "Invalid arguments to tapPromise(options: Object, fn: function)"
          );
        options = Object.assign({ type: "promise", fn }, options);
        if (typeof options.name !== "string" || options.name === "")
          throw new Error("Missing name for tapPromise");
        options = this._runRegisterInterceptors(options);
        this._insert(options);
      }
      _runRegisterInterceptors(options) {
        for (const interceptor of this.interceptors) {
          if (interceptor.register) {
            const newOptions = interceptor.register(options);
            if (newOptions !== void 0)
              options = newOptions;
          }
        }
        return options;
      }
      withOptions(options) {
        const mergeOptions = (opt) => Object.assign({}, options, typeof opt === "string" ? { name: opt } : opt);
        options = Object.assign({}, options, this._withOptions);
        const base = this._withOptionsBase || this;
        const newHook = Object.create(base);
        newHook.tapAsync = (opt, fn) => base.tapAsync(mergeOptions(opt), fn), newHook.tap = (opt, fn) => base.tap(mergeOptions(opt), fn);
        newHook.tapPromise = (opt, fn) => base.tapPromise(mergeOptions(opt), fn);
        newHook._withOptions = options;
        newHook._withOptionsBase = base;
        return newHook;
      }
      isUsed() {
        return this.taps.length > 0 || this.interceptors.length > 0;
      }
      intercept(interceptor) {
        this._resetCompilation();
        this.interceptors.push(Object.assign({}, interceptor));
        if (interceptor.register) {
          for (let i = 0; i < this.taps.length; i++)
            this.taps[i] = interceptor.register(this.taps[i]);
        }
      }
      _resetCompilation() {
        this.call = this._call;
        this.callAsync = this._callAsync;
        this.promise = this._promise;
      }
      _insert(item) {
        this._resetCompilation();
        let before;
        if (typeof item.before === "string")
          before = /* @__PURE__ */ new Set([item.before]);
        else if (Array.isArray(item.before)) {
          before = new Set(item.before);
        }
        let stage = 0;
        if (typeof item.stage === "number")
          stage = item.stage;
        let i = this.taps.length;
        while (i > 0) {
          i--;
          const x = this.taps[i];
          this.taps[i + 1] = x;
          const xStage = x.stage || 0;
          if (before) {
            if (before.has(x.name)) {
              before.delete(x.name);
              continue;
            }
            if (before.size > 0) {
              continue;
            }
          }
          if (xStage > stage) {
            continue;
          }
          i++;
          break;
        }
        this.taps[i] = item;
      }
    };
    function createCompileDelegate(name, type) {
      return function lazyCompileHook(...args) {
        this[name] = this._createCall(type);
        return this[name](...args);
      };
    }
    Object.defineProperties(Hook.prototype, {
      _call: {
        value: createCompileDelegate("call", "sync"),
        configurable: true,
        writable: true
      },
      _promise: {
        value: createCompileDelegate("promise", "promise"),
        configurable: true,
        writable: true
      },
      _callAsync: {
        value: createCompileDelegate("callAsync", "async"),
        configurable: true,
        writable: true
      }
    });
    module.exports = Hook;
  }
});

// node_modules/.pnpm/tapable@1.1.3/node_modules/tapable/lib/HookCodeFactory.js
var require_HookCodeFactory = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/tapable@1.1.3/node_modules/tapable/lib/HookCodeFactory.js"(exports, module) {
    "use strict";
    var HookCodeFactory = class {
      constructor(config) {
        this.config = config;
        this.options = void 0;
        this._args = void 0;
      }
      create(options) {
        this.init(options);
        let fn;
        switch (this.options.type) {
          case "sync":
            fn = new Function(
              this.args(),
              '"use strict";\n' + this.header() + this.content({
                onError: (err) => `throw ${err};
`,
                onResult: (result) => `return ${result};
`,
                resultReturns: true,
                onDone: () => "",
                rethrowIfPossible: true
              })
            );
            break;
          case "async":
            fn = new Function(
              this.args({
                after: "_callback"
              }),
              '"use strict";\n' + this.header() + this.content({
                onError: (err) => `_callback(${err});
`,
                onResult: (result) => `_callback(null, ${result});
`,
                onDone: () => "_callback();\n"
              })
            );
            break;
          case "promise":
            let errorHelperUsed = false;
            const content = this.content({
              onError: (err) => {
                errorHelperUsed = true;
                return `_error(${err});
`;
              },
              onResult: (result) => `_resolve(${result});
`,
              onDone: () => "_resolve();\n"
            });
            let code = "";
            code += '"use strict";\n';
            code += "return new Promise((_resolve, _reject) => {\n";
            if (errorHelperUsed) {
              code += "var _sync = true;\n";
              code += "function _error(_err) {\n";
              code += "if(_sync)\n";
              code += "_resolve(Promise.resolve().then(() => { throw _err; }));\n";
              code += "else\n";
              code += "_reject(_err);\n";
              code += "};\n";
            }
            code += this.header();
            code += content;
            if (errorHelperUsed) {
              code += "_sync = false;\n";
            }
            code += "});\n";
            fn = new Function(this.args(), code);
            break;
        }
        this.deinit();
        return fn;
      }
      setup(instance, options) {
        instance._x = options.taps.map((t) => t.fn);
      }
      init(options) {
        this.options = options;
        this._args = options.args.slice();
      }
      deinit() {
        this.options = void 0;
        this._args = void 0;
      }
      header() {
        let code = "";
        if (this.needContext()) {
          code += "var _context = {};\n";
        } else {
          code += "var _context;\n";
        }
        code += "var _x = this._x;\n";
        if (this.options.interceptors.length > 0) {
          code += "var _taps = this.taps;\n";
          code += "var _interceptors = this.interceptors;\n";
        }
        for (let i = 0; i < this.options.interceptors.length; i++) {
          const interceptor = this.options.interceptors[i];
          if (interceptor.call) {
            code += `${this.getInterceptor(i)}.call(${this.args({
              before: interceptor.context ? "_context" : void 0
            })});
`;
          }
        }
        return code;
      }
      needContext() {
        for (const tap of this.options.taps)
          if (tap.context)
            return true;
        return false;
      }
      callTap(tapIndex, { onError, onResult, onDone, rethrowIfPossible }) {
        let code = "";
        let hasTapCached = false;
        for (let i = 0; i < this.options.interceptors.length; i++) {
          const interceptor = this.options.interceptors[i];
          if (interceptor.tap) {
            if (!hasTapCached) {
              code += `var _tap${tapIndex} = ${this.getTap(tapIndex)};
`;
              hasTapCached = true;
            }
            code += `${this.getInterceptor(i)}.tap(${interceptor.context ? "_context, " : ""}_tap${tapIndex});
`;
          }
        }
        code += `var _fn${tapIndex} = ${this.getTapFn(tapIndex)};
`;
        const tap = this.options.taps[tapIndex];
        switch (tap.type) {
          case "sync":
            if (!rethrowIfPossible) {
              code += `var _hasError${tapIndex} = false;
`;
              code += "try {\n";
            }
            if (onResult) {
              code += `var _result${tapIndex} = _fn${tapIndex}(${this.args({
                before: tap.context ? "_context" : void 0
              })});
`;
            } else {
              code += `_fn${tapIndex}(${this.args({
                before: tap.context ? "_context" : void 0
              })});
`;
            }
            if (!rethrowIfPossible) {
              code += "} catch(_err) {\n";
              code += `_hasError${tapIndex} = true;
`;
              code += onError("_err");
              code += "}\n";
              code += `if(!_hasError${tapIndex}) {
`;
            }
            if (onResult) {
              code += onResult(`_result${tapIndex}`);
            }
            if (onDone) {
              code += onDone();
            }
            if (!rethrowIfPossible) {
              code += "}\n";
            }
            break;
          case "async":
            let cbCode = "";
            if (onResult)
              cbCode += `(_err${tapIndex}, _result${tapIndex}) => {
`;
            else
              cbCode += `_err${tapIndex} => {
`;
            cbCode += `if(_err${tapIndex}) {
`;
            cbCode += onError(`_err${tapIndex}`);
            cbCode += "} else {\n";
            if (onResult) {
              cbCode += onResult(`_result${tapIndex}`);
            }
            if (onDone) {
              cbCode += onDone();
            }
            cbCode += "}\n";
            cbCode += "}";
            code += `_fn${tapIndex}(${this.args({
              before: tap.context ? "_context" : void 0,
              after: cbCode
            })});
`;
            break;
          case "promise":
            code += `var _hasResult${tapIndex} = false;
`;
            code += `var _promise${tapIndex} = _fn${tapIndex}(${this.args({
              before: tap.context ? "_context" : void 0
            })});
`;
            code += `if (!_promise${tapIndex} || !_promise${tapIndex}.then)
`;
            code += `  throw new Error('Tap function (tapPromise) did not return promise (returned ' + _promise${tapIndex} + ')');
`;
            code += `_promise${tapIndex}.then(_result${tapIndex} => {
`;
            code += `_hasResult${tapIndex} = true;
`;
            if (onResult) {
              code += onResult(`_result${tapIndex}`);
            }
            if (onDone) {
              code += onDone();
            }
            code += `}, _err${tapIndex} => {
`;
            code += `if(_hasResult${tapIndex}) throw _err${tapIndex};
`;
            code += onError(`_err${tapIndex}`);
            code += "});\n";
            break;
        }
        return code;
      }
      callTapsSeries({
        onError,
        onResult,
        resultReturns,
        onDone,
        doneReturns,
        rethrowIfPossible
      }) {
        if (this.options.taps.length === 0)
          return onDone();
        const firstAsync = this.options.taps.findIndex((t) => t.type !== "sync");
        const somethingReturns = resultReturns || doneReturns || false;
        let code = "";
        let current2 = onDone;
        for (let j = this.options.taps.length - 1; j >= 0; j--) {
          const i = j;
          const unroll = current2 !== onDone && this.options.taps[i].type !== "sync";
          if (unroll) {
            code += `function _next${i}() {
`;
            code += current2();
            code += `}
`;
            current2 = () => `${somethingReturns ? "return " : ""}_next${i}();
`;
          }
          const done = current2;
          const doneBreak = (skipDone) => {
            if (skipDone)
              return "";
            return onDone();
          };
          const content = this.callTap(i, {
            onError: (error) => onError(i, error, done, doneBreak),
            onResult: onResult && ((result) => {
              return onResult(i, result, done, doneBreak);
            }),
            onDone: !onResult && done,
            rethrowIfPossible: rethrowIfPossible && (firstAsync < 0 || i < firstAsync)
          });
          current2 = () => content;
        }
        code += current2();
        return code;
      }
      callTapsLooping({ onError, onDone, rethrowIfPossible }) {
        if (this.options.taps.length === 0)
          return onDone();
        const syncOnly = this.options.taps.every((t) => t.type === "sync");
        let code = "";
        if (!syncOnly) {
          code += "var _looper = () => {\n";
          code += "var _loopAsync = false;\n";
        }
        code += "var _loop;\n";
        code += "do {\n";
        code += "_loop = false;\n";
        for (let i = 0; i < this.options.interceptors.length; i++) {
          const interceptor = this.options.interceptors[i];
          if (interceptor.loop) {
            code += `${this.getInterceptor(i)}.loop(${this.args({
              before: interceptor.context ? "_context" : void 0
            })});
`;
          }
        }
        code += this.callTapsSeries({
          onError,
          onResult: (i, result, next, doneBreak) => {
            let code2 = "";
            code2 += `if(${result} !== undefined) {
`;
            code2 += "_loop = true;\n";
            if (!syncOnly)
              code2 += "if(_loopAsync) _looper();\n";
            code2 += doneBreak(true);
            code2 += `} else {
`;
            code2 += next();
            code2 += `}
`;
            return code2;
          },
          onDone: onDone && (() => {
            let code2 = "";
            code2 += "if(!_loop) {\n";
            code2 += onDone();
            code2 += "}\n";
            return code2;
          }),
          rethrowIfPossible: rethrowIfPossible && syncOnly
        });
        code += "} while(_loop);\n";
        if (!syncOnly) {
          code += "_loopAsync = true;\n";
          code += "};\n";
          code += "_looper();\n";
        }
        return code;
      }
      callTapsParallel({
        onError,
        onResult,
        onDone,
        rethrowIfPossible,
        onTap = (i, run) => run()
      }) {
        if (this.options.taps.length <= 1) {
          return this.callTapsSeries({
            onError,
            onResult,
            onDone,
            rethrowIfPossible
          });
        }
        let code = "";
        code += "do {\n";
        code += `var _counter = ${this.options.taps.length};
`;
        if (onDone) {
          code += "var _done = () => {\n";
          code += onDone();
          code += "};\n";
        }
        for (let i = 0; i < this.options.taps.length; i++) {
          const done = () => {
            if (onDone)
              return "if(--_counter === 0) _done();\n";
            else
              return "--_counter;";
          };
          const doneBreak = (skipDone) => {
            if (skipDone || !onDone)
              return "_counter = 0;\n";
            else
              return "_counter = 0;\n_done();\n";
          };
          code += "if(_counter <= 0) break;\n";
          code += onTap(
            i,
            () => this.callTap(i, {
              onError: (error) => {
                let code2 = "";
                code2 += "if(_counter > 0) {\n";
                code2 += onError(i, error, done, doneBreak);
                code2 += "}\n";
                return code2;
              },
              onResult: onResult && ((result) => {
                let code2 = "";
                code2 += "if(_counter > 0) {\n";
                code2 += onResult(i, result, done, doneBreak);
                code2 += "}\n";
                return code2;
              }),
              onDone: !onResult && (() => {
                return done();
              }),
              rethrowIfPossible
            }),
            done,
            doneBreak
          );
        }
        code += "} while(false);\n";
        return code;
      }
      args({ before, after } = {}) {
        let allArgs = this._args;
        if (before)
          allArgs = [before].concat(allArgs);
        if (after)
          allArgs = allArgs.concat(after);
        if (allArgs.length === 0) {
          return "";
        } else {
          return allArgs.join(", ");
        }
      }
      getTapFn(idx) {
        return `_x[${idx}]`;
      }
      getTap(idx) {
        return `_taps[${idx}]`;
      }
      getInterceptor(idx) {
        return `_interceptors[${idx}]`;
      }
    };
    module.exports = HookCodeFactory;
  }
});

// node_modules/.pnpm/tapable@1.1.3/node_modules/tapable/lib/SyncBailHook.js
var require_SyncBailHook = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/tapable@1.1.3/node_modules/tapable/lib/SyncBailHook.js"(exports, module) {
    "use strict";
    var Hook = require_Hook();
    var HookCodeFactory = require_HookCodeFactory();
    var SyncBailHookCodeFactory = class extends HookCodeFactory {
      content({ onError, onResult, resultReturns, onDone, rethrowIfPossible }) {
        return this.callTapsSeries({
          onError: (i, err) => onError(err),
          onResult: (i, result, next) => `if(${result} !== undefined) {
${onResult(
            result
          )};
} else {
${next()}}
`,
          resultReturns,
          onDone,
          rethrowIfPossible
        });
      }
    };
    var factory = new SyncBailHookCodeFactory();
    var SyncBailHook = class extends Hook {
      tapAsync() {
        throw new Error("tapAsync is not supported on a SyncBailHook");
      }
      tapPromise() {
        throw new Error("tapPromise is not supported on a SyncBailHook");
      }
      compile(options) {
        factory.setup(this, options);
        return factory.create(options);
      }
    };
    module.exports = SyncBailHook;
  }
});

// node_modules/.pnpm/tapable@1.1.3/node_modules/tapable/lib/Tapable.js
var require_Tapable = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/tapable@1.1.3/node_modules/tapable/lib/Tapable.js"(exports, module) {
    "use strict";
    var util = _chunkI7OK7DX6cjs.__require.call(void 0, "util");
    var SyncBailHook = require_SyncBailHook();
    function Tapable() {
      this._pluginCompat = new SyncBailHook(["options"]);
      this._pluginCompat.tap(
        {
          name: "Tapable camelCase",
          stage: 100
        },
        (options) => {
          options.names.add(
            options.name.replace(/[- ]([a-z])/g, (str, ch) => ch.toUpperCase())
          );
        }
      );
      this._pluginCompat.tap(
        {
          name: "Tapable this.hooks",
          stage: 200
        },
        (options) => {
          let hook;
          for (const name of options.names) {
            hook = this.hooks[name];
            if (hook !== void 0) {
              break;
            }
          }
          if (hook !== void 0) {
            const tapOpt = {
              name: options.fn.name || "unnamed compat plugin",
              stage: options.stage || 0
            };
            if (options.async)
              hook.tapAsync(tapOpt, options.fn);
            else
              hook.tap(tapOpt, options.fn);
            return true;
          }
        }
      );
    }
    module.exports = Tapable;
    Tapable.addCompatLayer = function addCompatLayer(instance) {
      Tapable.call(instance);
      instance.plugin = Tapable.prototype.plugin;
      instance.apply = Tapable.prototype.apply;
    };
    Tapable.prototype.plugin = util.deprecate(function plugin(name, fn) {
      if (Array.isArray(name)) {
        name.forEach(function(name2) {
          this.plugin(name2, fn);
        }, this);
        return;
      }
      const result = this._pluginCompat.call({
        name,
        fn,
        names: /* @__PURE__ */ new Set([name])
      });
      if (!result) {
        throw new Error(
          `Plugin could not be registered at '${name}'. Hook was not found.
BREAKING CHANGE: There need to exist a hook at 'this.hooks'. To create a compatibility layer for this hook, hook into 'this._pluginCompat'.`
        );
      }
    }, "Tapable.plugin is deprecated. Use new API on `.hooks` instead");
    Tapable.prototype.apply = util.deprecate(function apply() {
      for (var i = 0; i < arguments.length; i++) {
        arguments[i].apply(this);
      }
    }, "Tapable.apply is deprecated. Call apply on the plugin directly instead");
  }
});

// node_modules/.pnpm/tapable@1.1.3/node_modules/tapable/lib/SyncHook.js
var require_SyncHook = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/tapable@1.1.3/node_modules/tapable/lib/SyncHook.js"(exports, module) {
    "use strict";
    var Hook = require_Hook();
    var HookCodeFactory = require_HookCodeFactory();
    var SyncHookCodeFactory = class extends HookCodeFactory {
      content({ onError, onDone, rethrowIfPossible }) {
        return this.callTapsSeries({
          onError: (i, err) => onError(err),
          onDone,
          rethrowIfPossible
        });
      }
    };
    var factory = new SyncHookCodeFactory();
    var SyncHook = class extends Hook {
      tapAsync() {
        throw new Error("tapAsync is not supported on a SyncHook");
      }
      tapPromise() {
        throw new Error("tapPromise is not supported on a SyncHook");
      }
      compile(options) {
        factory.setup(this, options);
        return factory.create(options);
      }
    };
    module.exports = SyncHook;
  }
});

// node_modules/.pnpm/tapable@1.1.3/node_modules/tapable/lib/AsyncSeriesBailHook.js
var require_AsyncSeriesBailHook = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/tapable@1.1.3/node_modules/tapable/lib/AsyncSeriesBailHook.js"(exports, module) {
    "use strict";
    var Hook = require_Hook();
    var HookCodeFactory = require_HookCodeFactory();
    var AsyncSeriesBailHookCodeFactory = class extends HookCodeFactory {
      content({ onError, onResult, resultReturns, onDone }) {
        return this.callTapsSeries({
          onError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),
          onResult: (i, result, next) => `if(${result} !== undefined) {
${onResult(
            result
          )};
} else {
${next()}}
`,
          resultReturns,
          onDone
        });
      }
    };
    var factory = new AsyncSeriesBailHookCodeFactory();
    var AsyncSeriesBailHook = class extends Hook {
      compile(options) {
        factory.setup(this, options);
        return factory.create(options);
      }
    };
    Object.defineProperties(AsyncSeriesBailHook.prototype, {
      _call: { value: void 0, configurable: true, writable: true }
    });
    module.exports = AsyncSeriesBailHook;
  }
});

// node_modules/.pnpm/tapable@1.1.3/node_modules/tapable/lib/AsyncSeriesHook.js
var require_AsyncSeriesHook = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/tapable@1.1.3/node_modules/tapable/lib/AsyncSeriesHook.js"(exports, module) {
    "use strict";
    var Hook = require_Hook();
    var HookCodeFactory = require_HookCodeFactory();
    var AsyncSeriesHookCodeFactory = class extends HookCodeFactory {
      content({ onError, onDone }) {
        return this.callTapsSeries({
          onError: (i, err, next, doneBreak) => onError(err) + doneBreak(true),
          onDone
        });
      }
    };
    var factory = new AsyncSeriesHookCodeFactory();
    var AsyncSeriesHook = class extends Hook {
      compile(options) {
        factory.setup(this, options);
        return factory.create(options);
      }
    };
    Object.defineProperties(AsyncSeriesHook.prototype, {
      _call: { value: void 0, configurable: true, writable: true }
    });
    module.exports = AsyncSeriesHook;
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/createInnerContext.js
var require_createInnerContext = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/createInnerContext.js"(exports, module) {
    "use strict";
    module.exports = function createInnerContext(options, message, messageOptional) {
      let messageReported = false;
      const childContext = {
        log: (() => {
          if (!options.log)
            return void 0;
          if (!message)
            return options.log;
          const logFunction = (msg) => {
            if (!messageReported) {
              options.log(message);
              messageReported = true;
            }
            options.log("  " + msg);
          };
          return logFunction;
        })(),
        stack: options.stack,
        missing: options.missing
      };
      return childContext;
    };
  }
});

// node_modules/.pnpm/memory-fs@0.5.0/node_modules/memory-fs/lib/normalize.js
var require_normalize = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/memory-fs@0.5.0/node_modules/memory-fs/lib/normalize.js"(exports, module) {
    "use strict";
    module.exports = function normalize2(path3) {
      var parts = path3.split(/(\\+|\/+)/);
      if (parts.length === 1)
        return path3;
      var result = [];
      var absolutePathStart = 0;
      for (var i = 0, sep = false; i < parts.length; i += 1, sep = !sep) {
        var part = parts[i];
        if (i === 0 && /^([A-Z]:)?$/i.test(part)) {
          result.push(part);
          absolutePathStart = 2;
        } else if (sep) {
          if (i === 1 && parts[0].length === 0 && part === "\\\\") {
            result.push(part);
          } else {
            result.push(part[0]);
          }
        } else if (part === "..") {
          switch (result.length) {
            case 0:
              result.push(part);
              break;
            case 2:
              if (result[0] !== ".") {
                i += 1;
                sep = !sep;
                result.length = absolutePathStart;
              } else {
                result.length = 0;
                result.push(part);
              }
              break;
            case 4:
              if (absolutePathStart === 0) {
                result.length -= 3;
              } else {
                i += 1;
                sep = !sep;
                result.length = 2;
              }
              break;
            default:
              result.length -= 3;
              break;
          }
        } else if (part === ".") {
          switch (result.length) {
            case 0:
              result.push(part);
              break;
            case 2:
              if (absolutePathStart === 0) {
                result.length -= 1;
              } else {
                i += 1;
                sep = !sep;
              }
              break;
            default:
              result.length -= 1;
              break;
          }
        } else if (part) {
          result.push(part);
        }
      }
      if (result.length === 1 && /^[A-Za-z]:$/.test(result[0]))
        return result[0] + "\\";
      return result.join("");
    };
  }
});

// node_modules/.pnpm/memory-fs@0.5.0/node_modules/memory-fs/lib/join.js
var require_join = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/memory-fs@0.5.0/node_modules/memory-fs/lib/join.js"(exports, module) {
    "use strict";
    var normalize2 = require_normalize();
    var absoluteWinRegExp = /^[A-Z]:([\\\/]|$)/i;
    var absoluteNixRegExp = /^\//i;
    module.exports = function join2(path3, request) {
      if (!request)
        return normalize2(path3);
      if (absoluteWinRegExp.test(request))
        return normalize2(request.replace(/\//g, "\\"));
      if (absoluteNixRegExp.test(request))
        return normalize2(request);
      if (path3 == "/")
        return normalize2(path3 + request);
      if (absoluteWinRegExp.test(path3))
        return normalize2(path3.replace(/\//g, "\\") + "\\" + request.replace(/\//g, "\\"));
      if (absoluteNixRegExp.test(path3))
        return normalize2(path3 + "/" + request);
      return normalize2(path3 + "/" + request);
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/Resolver.js
var require_Resolver = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/Resolver.js"(exports, module) {
    "use strict";
    var util = _chunkI7OK7DX6cjs.__require.call(void 0, "util");
    var Tapable = require_Tapable();
    var SyncHook = require_SyncHook();
    var AsyncSeriesBailHook = require_AsyncSeriesBailHook();
    var AsyncSeriesHook = require_AsyncSeriesHook();
    var createInnerContext = require_createInnerContext();
    var REGEXP_NOT_MODULE = /^\.$|^\.[\\/]|^\.\.$|^\.\.[\\/]|^\/|^[A-Z]:[\\/]/i;
    var REGEXP_DIRECTORY = /[\\/]$/i;
    var memoryFsJoin = require_join();
    var memoizedJoin = /* @__PURE__ */ new Map();
    var memoryFsNormalize = require_normalize();
    function withName(name, hook) {
      hook.name = name;
      return hook;
    }
    function toCamelCase(str) {
      return str.replace(/-([a-z])/g, (str2) => str2.substr(1).toUpperCase());
    }
    var deprecatedPushToMissing = util.deprecate((set, item) => {
      set.add(item);
    }, "Resolver: 'missing' is now a Set. Use add instead of push.");
    var deprecatedResolveContextInCallback = util.deprecate((x) => {
      return x;
    }, "Resolver: The callback argument was splitted into resolveContext and callback.");
    var deprecatedHookAsString = util.deprecate((x) => {
      return x;
    }, "Resolver#doResolve: The type arguments (string) is now a hook argument (Hook). Pass a reference to the hook instead.");
    var Resolver = class extends Tapable {
      constructor(fileSystem) {
        super();
        this.fileSystem = fileSystem;
        this.hooks = {
          resolveStep: withName("resolveStep", new SyncHook(["hook", "request"])),
          noResolve: withName("noResolve", new SyncHook(["request", "error"])),
          resolve: withName(
            "resolve",
            new AsyncSeriesBailHook(["request", "resolveContext"])
          ),
          result: new AsyncSeriesHook(["result", "resolveContext"])
        };
        this._pluginCompat.tap("Resolver: before/after", (options) => {
          if (/^before-/.test(options.name)) {
            options.name = options.name.substr(7);
            options.stage = -10;
          } else if (/^after-/.test(options.name)) {
            options.name = options.name.substr(6);
            options.stage = 10;
          }
        });
        this._pluginCompat.tap("Resolver: step hooks", (options) => {
          const name = options.name;
          const stepHook = !/^resolve(-s|S)tep$|^no(-r|R)esolve$/.test(name);
          if (stepHook) {
            options.async = true;
            this.ensureHook(name);
            const fn = options.fn;
            options.fn = (request, resolverContext, callback) => {
              const innerCallback = (err, result) => {
                if (err)
                  return callback(err);
                if (result !== void 0)
                  return callback(null, result);
                callback();
              };
              for (const key in resolverContext) {
                innerCallback[key] = resolverContext[key];
              }
              fn.call(this, request, innerCallback);
            };
          }
        });
      }
      ensureHook(name) {
        if (typeof name !== "string")
          return name;
        name = toCamelCase(name);
        if (/^before/.test(name)) {
          return this.ensureHook(
            name[6].toLowerCase() + name.substr(7)
          ).withOptions({
            stage: -10
          });
        }
        if (/^after/.test(name)) {
          return this.ensureHook(
            name[5].toLowerCase() + name.substr(6)
          ).withOptions({
            stage: 10
          });
        }
        const hook = this.hooks[name];
        if (!hook) {
          return this.hooks[name] = withName(
            name,
            new AsyncSeriesBailHook(["request", "resolveContext"])
          );
        }
        return hook;
      }
      getHook(name) {
        if (typeof name !== "string")
          return name;
        name = toCamelCase(name);
        if (/^before/.test(name)) {
          return this.getHook(name[6].toLowerCase() + name.substr(7)).withOptions({
            stage: -10
          });
        }
        if (/^after/.test(name)) {
          return this.getHook(name[5].toLowerCase() + name.substr(6)).withOptions({
            stage: 10
          });
        }
        const hook = this.hooks[name];
        if (!hook) {
          throw new Error(`Hook ${name} doesn't exist`);
        }
        return hook;
      }
      resolveSync(context, path3, request) {
        let err, result, sync = false;
        this.resolve(context, path3, request, {}, (e, r2) => {
          err = e;
          result = r2;
          sync = true;
        });
        if (!sync)
          throw new Error(
            "Cannot 'resolveSync' because the fileSystem is not sync. Use 'resolve'!"
          );
        if (err)
          throw err;
        return result;
      }
      resolve(context, path3, request, resolveContext, callback) {
        if (typeof callback !== "function") {
          callback = deprecatedResolveContextInCallback(resolveContext);
        }
        const obj = {
          context,
          path: path3,
          request
        };
        const message = "resolve '" + request + "' in '" + path3 + "'";
        return this.doResolve(
          this.hooks.resolve,
          obj,
          message,
          {
            missing: resolveContext.missing,
            stack: resolveContext.stack
          },
          (err, result) => {
            if (!err && result) {
              return callback(
                null,
                result.path === false ? false : result.path + (result.query || ""),
                result
              );
            }
            const localMissing = /* @__PURE__ */ new Set();
            localMissing.push = (item) => deprecatedPushToMissing(localMissing, item);
            const log = [];
            return this.doResolve(
              this.hooks.resolve,
              obj,
              message,
              {
                log: (msg) => {
                  if (resolveContext.log) {
                    resolveContext.log(msg);
                  }
                  log.push(msg);
                },
                missing: localMissing,
                stack: resolveContext.stack
              },
              (err2, result2) => {
                if (err2)
                  return callback(err2);
                const error = new Error("Can't " + message);
                error.details = log.join("\n");
                error.missing = Array.from(localMissing);
                this.hooks.noResolve.call(obj, error);
                return callback(error);
              }
            );
          }
        );
      }
      doResolve(hook, request, message, resolveContext, callback) {
        if (typeof callback !== "function") {
          callback = deprecatedResolveContextInCallback(resolveContext);
        }
        if (typeof hook === "string") {
          const name = toCamelCase(hook);
          hook = deprecatedHookAsString(this.hooks[name]);
          if (!hook) {
            throw new Error(`Hook "${name}" doesn't exist`);
          }
        }
        if (typeof callback !== "function")
          throw new Error("callback is not a function " + Array.from(arguments));
        if (!resolveContext)
          throw new Error(
            "resolveContext is not an object " + Array.from(arguments)
          );
        const stackLine = hook.name + ": (" + request.path + ") " + (request.request || "") + (request.query || "") + (request.directory ? " directory" : "") + (request.module ? " module" : "");
        let newStack;
        if (resolveContext.stack) {
          newStack = new Set(resolveContext.stack);
          if (resolveContext.stack.has(stackLine)) {
            const recursionError = new Error(
              "Recursion in resolving\nStack:\n  " + Array.from(newStack).join("\n  ")
            );
            recursionError.recursion = true;
            if (resolveContext.log)
              resolveContext.log("abort resolving because of recursion");
            return callback(recursionError);
          }
          newStack.add(stackLine);
        } else {
          newStack = /* @__PURE__ */ new Set([stackLine]);
        }
        this.hooks.resolveStep.call(hook, request);
        if (hook.isUsed()) {
          const innerContext = createInnerContext(
            {
              log: resolveContext.log,
              missing: resolveContext.missing,
              stack: newStack
            },
            message
          );
          return hook.callAsync(request, innerContext, (err, result) => {
            if (err)
              return callback(err);
            if (result)
              return callback(null, result);
            callback();
          });
        } else {
          callback();
        }
      }
      parse(identifier) {
        if (identifier === "")
          return null;
        const part = {
          request: "",
          query: "",
          module: false,
          directory: false,
          file: false
        };
        const idxQuery = identifier.indexOf("?");
        if (idxQuery === 0) {
          part.query = identifier;
        } else if (idxQuery > 0) {
          part.request = identifier.slice(0, idxQuery);
          part.query = identifier.slice(idxQuery);
        } else {
          part.request = identifier;
        }
        if (part.request) {
          part.module = this.isModule(part.request);
          part.directory = this.isDirectory(part.request);
          if (part.directory) {
            part.request = part.request.substr(0, part.request.length - 1);
          }
        }
        return part;
      }
      isModule(path3) {
        return !REGEXP_NOT_MODULE.test(path3);
      }
      isDirectory(path3) {
        return REGEXP_DIRECTORY.test(path3);
      }
      join(path3, request) {
        let cacheEntry;
        let pathCache = memoizedJoin.get(path3);
        if (typeof pathCache === "undefined") {
          memoizedJoin.set(path3, pathCache = /* @__PURE__ */ new Map());
        } else {
          cacheEntry = pathCache.get(request);
          if (typeof cacheEntry !== "undefined")
            return cacheEntry;
        }
        cacheEntry = memoryFsJoin(path3, request);
        pathCache.set(request, cacheEntry);
        return cacheEntry;
      }
      normalize(path3) {
        return memoryFsNormalize(path3);
      }
    };
    module.exports = Resolver;
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/SyncAsyncFileSystemDecorator.js
var require_SyncAsyncFileSystemDecorator = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/SyncAsyncFileSystemDecorator.js"(exports, module) {
    "use strict";
    function SyncAsyncFileSystemDecorator(fs4) {
      this.fs = fs4;
      if (fs4.statSync) {
        this.stat = function(arg, callback) {
          let result;
          try {
            result = fs4.statSync(arg);
          } catch (e) {
            return callback(e);
          }
          callback(null, result);
        };
      }
      if (fs4.readdirSync) {
        this.readdir = function(arg, callback) {
          let result;
          try {
            result = fs4.readdirSync(arg);
          } catch (e) {
            return callback(e);
          }
          callback(null, result);
        };
      }
      if (fs4.readFileSync) {
        this.readFile = function(arg, callback) {
          let result;
          try {
            result = fs4.readFileSync(arg);
          } catch (e) {
            return callback(e);
          }
          callback(null, result);
        };
      }
      if (fs4.readlinkSync) {
        this.readlink = function(arg, callback) {
          let result;
          try {
            result = fs4.readlinkSync(arg);
          } catch (e) {
            return callback(e);
          }
          callback(null, result);
        };
      }
      if (fs4.readJsonSync) {
        this.readJson = function(arg, callback) {
          let result;
          try {
            result = fs4.readJsonSync(arg);
          } catch (e) {
            return callback(e);
          }
          callback(null, result);
        };
      }
    }
    module.exports = SyncAsyncFileSystemDecorator;
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ParsePlugin.js
var require_ParsePlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ParsePlugin.js"(exports, module) {
    "use strict";
    module.exports = class ParsePlugin {
      constructor(source, target) {
        this.source = source;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("ParsePlugin", (request, resolveContext, callback) => {
          const parsed = resolver.parse(request.request);
          const obj = Object.assign({}, request, parsed);
          if (request.query && !parsed.query) {
            obj.query = request.query;
          }
          if (parsed && resolveContext.log) {
            if (parsed.module)
              resolveContext.log("Parsed request is a module");
            if (parsed.directory)
              resolveContext.log("Parsed request is a directory");
          }
          resolver.doResolve(target, obj, null, resolveContext, callback);
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/forEachBail.js
var require_forEachBail = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/forEachBail.js"(exports, module) {
    "use strict";
    module.exports = function forEachBail(array, iterator, callback) {
      if (array.length === 0)
        return callback();
      let currentPos = array.length;
      let currentResult;
      let done = [];
      for (let i = 0; i < array.length; i++) {
        const itCb = createIteratorCallback(i);
        iterator(array[i], itCb);
        if (currentPos === 0)
          break;
      }
      function createIteratorCallback(i) {
        return (...args) => {
          if (i >= currentPos)
            return;
          done.push(i);
          if (args.length > 0) {
            currentPos = i + 1;
            done = done.filter((item) => {
              return item <= i;
            });
            currentResult = args;
          }
          if (done.length === currentPos) {
            callback.apply(null, currentResult);
            currentPos = 0;
          }
        };
      }
    };
    module.exports.withIndex = function forEachBailWithIndex(array, iterator, callback) {
      if (array.length === 0)
        return callback();
      let currentPos = array.length;
      let currentResult;
      let done = [];
      for (let i = 0; i < array.length; i++) {
        const itCb = createIteratorCallback(i);
        iterator(array[i], i, itCb);
        if (currentPos === 0)
          break;
      }
      function createIteratorCallback(i) {
        return (...args) => {
          if (i >= currentPos)
            return;
          done.push(i);
          if (args.length > 0) {
            currentPos = i + 1;
            done = done.filter((item) => {
              return item <= i;
            });
            currentResult = args;
          }
          if (done.length === currentPos) {
            callback.apply(null, currentResult);
            currentPos = 0;
          }
        };
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/DescriptionFileUtils.js
var require_DescriptionFileUtils = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/DescriptionFileUtils.js"(exports) {
    "use strict";
    var forEachBail = require_forEachBail();
    function loadDescriptionFile(resolver, directory, filenames, resolveContext, callback) {
      (function findDescriptionFile() {
        forEachBail(
          filenames,
          (filename, callback2) => {
            const descriptionFilePath = resolver.join(directory, filename);
            if (resolver.fileSystem.readJson) {
              resolver.fileSystem.readJson(descriptionFilePath, (err, content) => {
                if (err) {
                  if (typeof err.code !== "undefined")
                    return callback2();
                  return onJson(err);
                }
                onJson(null, content);
              });
            } else {
              resolver.fileSystem.readFile(descriptionFilePath, (err, content) => {
                if (err)
                  return callback2();
                let json;
                try {
                  json = JSON.parse(content);
                } catch (e) {
                  onJson(e);
                }
                onJson(null, json);
              });
            }
            function onJson(err, content) {
              if (err) {
                if (resolveContext.log)
                  resolveContext.log(
                    descriptionFilePath + " (directory description file): " + err
                  );
                else
                  err.message = descriptionFilePath + " (directory description file): " + err;
                return callback2(err);
              }
              callback2(null, {
                content,
                directory,
                path: descriptionFilePath
              });
            }
          },
          (err, result) => {
            if (err)
              return callback(err);
            if (result) {
              return callback(null, result);
            } else {
              directory = cdUp(directory);
              if (!directory) {
                return callback();
              } else {
                return findDescriptionFile();
              }
            }
          }
        );
      })();
    }
    function getField(content, field) {
      if (!content)
        return void 0;
      if (Array.isArray(field)) {
        let current2 = content;
        for (let j = 0; j < field.length; j++) {
          if (current2 === null || typeof current2 !== "object") {
            current2 = null;
            break;
          }
          current2 = current2[field[j]];
        }
        if (typeof current2 === "object") {
          return current2;
        }
      } else {
        if (typeof content[field] === "object") {
          return content[field];
        }
      }
    }
    function cdUp(directory) {
      if (directory === "/")
        return null;
      const i = directory.lastIndexOf("/"), j = directory.lastIndexOf("\\");
      const p = i < 0 ? j : j < 0 ? i : i < j ? j : i;
      if (p < 0)
        return null;
      return directory.substr(0, p || 1);
    }
    exports.loadDescriptionFile = loadDescriptionFile;
    exports.getField = getField;
    exports.cdUp = cdUp;
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/DescriptionFilePlugin.js
var require_DescriptionFilePlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/DescriptionFilePlugin.js"(exports, module) {
    "use strict";
    var DescriptionFileUtils = require_DescriptionFileUtils();
    module.exports = class DescriptionFilePlugin {
      constructor(source, filenames, target) {
        this.source = source;
        this.filenames = [].concat(filenames);
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync(
          "DescriptionFilePlugin",
          (request, resolveContext, callback) => {
            const directory = request.path;
            DescriptionFileUtils.loadDescriptionFile(
              resolver,
              directory,
              this.filenames,
              resolveContext,
              (err, result) => {
                if (err)
                  return callback(err);
                if (!result) {
                  if (resolveContext.missing) {
                    this.filenames.forEach((filename) => {
                      resolveContext.missing.add(
                        resolver.join(directory, filename)
                      );
                    });
                  }
                  if (resolveContext.log)
                    resolveContext.log("No description file found");
                  return callback();
                }
                const relativePath = "." + request.path.substr(result.directory.length).replace(/\\/g, "/");
                const obj = Object.assign({}, request, {
                  descriptionFilePath: result.path,
                  descriptionFileData: result.content,
                  descriptionFileRoot: result.directory,
                  relativePath
                });
                resolver.doResolve(
                  target,
                  obj,
                  "using description file: " + result.path + " (relative path: " + relativePath + ")",
                  resolveContext,
                  (err2, result2) => {
                    if (err2)
                      return callback(err2);
                    if (result2 === void 0)
                      return callback(null, null);
                    callback(null, result2);
                  }
                );
              }
            );
          }
        );
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/NextPlugin.js
var require_NextPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/NextPlugin.js"(exports, module) {
    "use strict";
    module.exports = class NextPlugin {
      constructor(source, target) {
        this.source = source;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("NextPlugin", (request, resolveContext, callback) => {
          resolver.doResolve(target, request, null, resolveContext, callback);
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/TryNextPlugin.js
var require_TryNextPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/TryNextPlugin.js"(exports, module) {
    "use strict";
    module.exports = class TryNextPlugin {
      constructor(source, message, target) {
        this.source = source;
        this.message = message;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("TryNextPlugin", (request, resolveContext, callback) => {
          resolver.doResolve(
            target,
            request,
            this.message,
            resolveContext,
            callback
          );
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ModuleKindPlugin.js
var require_ModuleKindPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ModuleKindPlugin.js"(exports, module) {
    "use strict";
    module.exports = class ModuleKindPlugin {
      constructor(source, target) {
        this.source = source;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("ModuleKindPlugin", (request, resolveContext, callback) => {
          if (!request.module)
            return callback();
          const obj = Object.assign({}, request);
          delete obj.module;
          resolver.doResolve(
            target,
            obj,
            "resolve as module",
            resolveContext,
            (err, result) => {
              if (err)
                return callback(err);
              if (result === void 0)
                return callback(null, null);
              callback(null, result);
            }
          );
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/FileKindPlugin.js
var require_FileKindPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/FileKindPlugin.js"(exports, module) {
    "use strict";
    module.exports = class FileKindPlugin {
      constructor(source, target) {
        this.source = source;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("FileKindPlugin", (request, resolveContext, callback) => {
          if (request.directory)
            return callback();
          const obj = Object.assign({}, request);
          delete obj.directory;
          resolver.doResolve(target, obj, null, resolveContext, callback);
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/JoinRequestPlugin.js
var require_JoinRequestPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/JoinRequestPlugin.js"(exports, module) {
    "use strict";
    module.exports = class JoinRequestPlugin {
      constructor(source, target) {
        this.source = source;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("JoinRequestPlugin", (request, resolveContext, callback) => {
          const obj = Object.assign({}, request, {
            path: resolver.join(request.path, request.request),
            relativePath: request.relativePath && resolver.join(request.relativePath, request.request),
            request: void 0
          });
          resolver.doResolve(target, obj, null, resolveContext, callback);
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/getPaths.js
var require_getPaths = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/getPaths.js"(exports, module) {
    "use strict";
    module.exports = function getPaths(path3) {
      const parts = path3.split(/(.*?[\\/]+)/);
      const paths = [path3];
      const seqments = [parts[parts.length - 1]];
      let part = parts[parts.length - 1];
      path3 = path3.substr(0, path3.length - part.length - 1);
      for (let i = parts.length - 2; i > 2; i -= 2) {
        paths.push(path3);
        part = parts[i];
        path3 = path3.substr(0, path3.length - part.length) || "/";
        seqments.push(part.substr(0, part.length - 1));
      }
      part = parts[1];
      seqments.push(part);
      paths.push(part);
      return {
        paths,
        seqments
      };
    };
    module.exports.basename = function basename2(path3) {
      const i = path3.lastIndexOf("/"), j = path3.lastIndexOf("\\");
      const p = i < 0 ? j : j < 0 ? i : i < j ? j : i;
      if (p < 0)
        return null;
      const s = path3.substr(p + 1);
      return s;
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ModulesInHierachicDirectoriesPlugin.js
var require_ModulesInHierachicDirectoriesPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ModulesInHierachicDirectoriesPlugin.js"(exports, module) {
    "use strict";
    var forEachBail = require_forEachBail();
    var getPaths = require_getPaths();
    module.exports = class ModulesInHierachicDirectoriesPlugin {
      constructor(source, directories, target) {
        this.source = source;
        this.directories = [].concat(directories);
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync(
          "ModulesInHierachicDirectoriesPlugin",
          (request, resolveContext, callback) => {
            const fs4 = resolver.fileSystem;
            const addrs = getPaths(request.path).paths.map((p) => {
              return this.directories.map((d) => resolver.join(p, d));
            }).reduce((array, p) => {
              array.push.apply(array, p);
              return array;
            }, []);
            forEachBail(
              addrs,
              (addr, callback2) => {
                fs4.stat(addr, (err, stat) => {
                  if (!err && stat && stat.isDirectory()) {
                    const obj = Object.assign({}, request, {
                      path: addr,
                      request: "./" + request.request
                    });
                    const message = "looking for modules in " + addr;
                    return resolver.doResolve(
                      target,
                      obj,
                      message,
                      resolveContext,
                      callback2
                    );
                  }
                  if (resolveContext.log)
                    resolveContext.log(
                      addr + " doesn't exist or is not a directory"
                    );
                  if (resolveContext.missing)
                    resolveContext.missing.add(addr);
                  return callback2();
                });
              },
              callback
            );
          }
        );
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ModulesInRootPlugin.js
var require_ModulesInRootPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ModulesInRootPlugin.js"(exports, module) {
    "use strict";
    module.exports = class ModulesInRootPlugin {
      constructor(source, path3, target) {
        this.source = source;
        this.path = path3;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("ModulesInRootPlugin", (request, resolveContext, callback) => {
          const obj = Object.assign({}, request, {
            path: this.path,
            request: "./" + request.request
          });
          resolver.doResolve(
            target,
            obj,
            "looking for modules in " + this.path,
            resolveContext,
            callback
          );
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/AliasPlugin.js
var require_AliasPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/AliasPlugin.js"(exports, module) {
    "use strict";
    function startsWith(string, searchString) {
      const stringLength = string.length;
      const searchLength = searchString.length;
      if (searchLength > stringLength) {
        return false;
      }
      let index2 = -1;
      while (++index2 < searchLength) {
        if (string.charCodeAt(index2) !== searchString.charCodeAt(index2)) {
          return false;
        }
      }
      return true;
    }
    module.exports = class AliasPlugin {
      constructor(source, options, target) {
        this.source = source;
        this.options = Array.isArray(options) ? options : [options];
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("AliasPlugin", (request, resolveContext, callback) => {
          const innerRequest = request.request || request.path;
          if (!innerRequest)
            return callback();
          for (const item of this.options) {
            if (innerRequest === item.name || !item.onlyModule && startsWith(innerRequest, item.name + "/")) {
              if (innerRequest !== item.alias && !startsWith(innerRequest, item.alias + "/")) {
                const newRequestStr = item.alias + innerRequest.substr(item.name.length);
                const obj = Object.assign({}, request, {
                  request: newRequestStr
                });
                return resolver.doResolve(
                  target,
                  obj,
                  "aliased with mapping '" + item.name + "': '" + item.alias + "' to '" + newRequestStr + "'",
                  resolveContext,
                  (err, result) => {
                    if (err)
                      return callback(err);
                    if (result === void 0)
                      return callback(null, null);
                    callback(null, result);
                  }
                );
              }
            }
          }
          return callback();
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/getInnerRequest.js
var require_getInnerRequest = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/getInnerRequest.js"(exports, module) {
    "use strict";
    module.exports = function getInnerRequest(resolver, request) {
      if (typeof request.__innerRequest === "string" && request.__innerRequest_request === request.request && request.__innerRequest_relativePath === request.relativePath)
        return request.__innerRequest;
      let innerRequest;
      if (request.request) {
        innerRequest = request.request;
        if (/^\.\.?\//.test(innerRequest) && request.relativePath) {
          innerRequest = resolver.join(request.relativePath, innerRequest);
        }
      } else {
        innerRequest = request.relativePath;
      }
      request.__innerRequest_request = request.request;
      request.__innerRequest_relativePath = request.relativePath;
      return request.__innerRequest = innerRequest;
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/AliasFieldPlugin.js
var require_AliasFieldPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/AliasFieldPlugin.js"(exports, module) {
    "use strict";
    var DescriptionFileUtils = require_DescriptionFileUtils();
    var getInnerRequest = require_getInnerRequest();
    module.exports = class AliasFieldPlugin {
      constructor(source, field, target) {
        this.source = source;
        this.field = field;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("AliasFieldPlugin", (request, resolveContext, callback) => {
          if (!request.descriptionFileData)
            return callback();
          const innerRequest = getInnerRequest(resolver, request);
          if (!innerRequest)
            return callback();
          const fieldData = DescriptionFileUtils.getField(
            request.descriptionFileData,
            this.field
          );
          if (typeof fieldData !== "object") {
            if (resolveContext.log)
              resolveContext.log(
                "Field '" + this.field + "' doesn't contain a valid alias configuration"
              );
            return callback();
          }
          const data1 = fieldData[innerRequest];
          const data2 = fieldData[innerRequest.replace(/^\.\//, "")];
          const data3 = typeof data1 !== "undefined" ? data1 : data2;
          if (data3 === innerRequest)
            return callback();
          if (data3 === void 0)
            return callback();
          if (data3 === false) {
            const ignoreObj = Object.assign({}, request, {
              path: false
            });
            return callback(null, ignoreObj);
          }
          const obj = Object.assign({}, request, {
            path: request.descriptionFileRoot,
            request: data3
          });
          resolver.doResolve(
            target,
            obj,
            "aliased from description file " + request.descriptionFilePath + " with mapping '" + innerRequest + "' to '" + data3 + "'",
            resolveContext,
            (err, result) => {
              if (err)
                return callback(err);
              if (result === void 0)
                return callback(null, null);
              callback(null, result);
            }
          );
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/globToRegExp.js
var require_globToRegExp = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/globToRegExp.js"(exports) {
    "use strict";
    function globToRegExp(glob) {
      if (/^\(.+\)$/.test(glob)) {
        return new RegExp(glob.substr(1, glob.length - 2));
      }
      const tokens = tokenize(glob);
      const process3 = createRoot();
      const regExpStr = tokens.map(process3).join("");
      return new RegExp("^" + regExpStr + "$");
    }
    var SIMPLE_TOKENS = {
      "@(": "one",
      "?(": "zero-one",
      "+(": "one-many",
      "*(": "zero-many",
      "|": "segment-sep",
      "/**/": "any-path-segments",
      "**": "any-path",
      "*": "any-path-segment",
      "?": "any-char",
      "{": "or",
      "/": "path-sep",
      ",": "comma",
      ")": "closing-segment",
      "}": "closing-or"
    };
    function tokenize(glob) {
      return glob.split(
        /([@?+*]\(|\/\*\*\/|\*\*|[?*]|\[[!^]?(?:[^\]\\]|\\.)+\]|\{|,|\/|[|)}])/g
      ).map((item) => {
        if (!item)
          return null;
        const t = SIMPLE_TOKENS[item];
        if (t) {
          return {
            type: t
          };
        }
        if (item[0] === "[") {
          if (item[1] === "^" || item[1] === "!") {
            return {
              type: "inverted-char-set",
              value: item.substr(2, item.length - 3)
            };
          } else {
            return {
              type: "char-set",
              value: item.substr(1, item.length - 2)
            };
          }
        }
        return {
          type: "string",
          value: item
        };
      }).filter(Boolean).concat({
        type: "end"
      });
    }
    function createRoot() {
      const inOr = [];
      const process3 = createSeqment();
      let initial = true;
      return function(token) {
        switch (token.type) {
          case "or":
            inOr.push(initial);
            return "(";
          case "comma":
            if (inOr.length) {
              initial = inOr[inOr.length - 1];
              return "|";
            } else {
              return process3(
                {
                  type: "string",
                  value: ","
                },
                initial
              );
            }
          case "closing-or":
            if (inOr.length === 0)
              throw new Error("Unmatched '}'");
            inOr.pop();
            return ")";
          case "end":
            if (inOr.length)
              throw new Error("Unmatched '{'");
            return process3(token, initial);
          default: {
            const result = process3(token, initial);
            initial = false;
            return result;
          }
        }
      };
    }
    function createSeqment() {
      const inSeqment = [];
      const process3 = createSimple();
      return function(token, initial) {
        switch (token.type) {
          case "one":
          case "one-many":
          case "zero-many":
          case "zero-one":
            inSeqment.push(token.type);
            return "(";
          case "segment-sep":
            if (inSeqment.length) {
              return "|";
            } else {
              return process3(
                {
                  type: "string",
                  value: "|"
                },
                initial
              );
            }
          case "closing-segment": {
            const segment = inSeqment.pop();
            switch (segment) {
              case "one":
                return ")";
              case "one-many":
                return ")+";
              case "zero-many":
                return ")*";
              case "zero-one":
                return ")?";
            }
            throw new Error("Unexcepted segment " + segment);
          }
          case "end":
            if (inSeqment.length > 0) {
              throw new Error("Unmatched segment, missing ')'");
            }
            return process3(token, initial);
          default:
            return process3(token, initial);
        }
      };
    }
    function createSimple() {
      return function(token, initial) {
        switch (token.type) {
          case "path-sep":
            return "[\\\\/]+";
          case "any-path-segments":
            return "[\\\\/]+(?:(.+)[\\\\/]+)?";
          case "any-path":
            return "(.*)";
          case "any-path-segment":
            if (initial) {
              return "\\.[\\\\/]+(?:.*[\\\\/]+)?([^\\\\/]+)";
            } else {
              return "([^\\\\/]*)";
            }
          case "any-char":
            return "[^\\\\/]";
          case "inverted-char-set":
            return "[^" + token.value + "]";
          case "char-set":
            return "[" + token.value + "]";
          case "string":
            return token.value.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
          case "end":
            return "";
          default:
            throw new Error("Unsupported token '" + token.type + "'");
        }
      };
    }
    exports.globToRegExp = globToRegExp;
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/concord.js
var require_concord = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/concord.js"(exports) {
    "use strict";
    var globToRegExp = require_globToRegExp().globToRegExp;
    function parseType(type) {
      const items = type.split("+");
      const t = items.shift();
      return {
        type: t === "*" ? null : t,
        features: items
      };
    }
    function isTypeMatched(baseType, testedType) {
      if (typeof baseType === "string")
        baseType = parseType(baseType);
      if (typeof testedType === "string")
        testedType = parseType(testedType);
      if (testedType.type && testedType.type !== baseType.type)
        return false;
      return testedType.features.every((requiredFeature) => {
        return baseType.features.indexOf(requiredFeature) >= 0;
      });
    }
    function isResourceTypeMatched(baseType, testedType) {
      baseType = baseType.split("/");
      testedType = testedType.split("/");
      if (baseType.length !== testedType.length)
        return false;
      for (let i = 0; i < baseType.length; i++) {
        if (!isTypeMatched(baseType[i], testedType[i]))
          return false;
      }
      return true;
    }
    function isResourceTypeSupported(context, type) {
      return context.supportedResourceTypes && context.supportedResourceTypes.some((supportedType) => {
        return isResourceTypeMatched(supportedType, type);
      });
    }
    function isEnvironment(context, env) {
      return context.environments && context.environments.every((environment) => {
        return isTypeMatched(environment, env);
      });
    }
    var globCache = {};
    function getGlobRegExp(glob) {
      const regExp = globCache[glob] || (globCache[glob] = globToRegExp(glob));
      return regExp;
    }
    function matchGlob(glob, relativePath) {
      const regExp = getGlobRegExp(glob);
      return regExp.exec(relativePath);
    }
    function isGlobMatched(glob, relativePath) {
      return !!matchGlob(glob, relativePath);
    }
    function isConditionMatched(context, condition) {
      const items = condition.split("|");
      return items.some(function testFn(item) {
        item = item.trim();
        const inverted = /^!/.test(item);
        if (inverted)
          return !testFn(item.substr(1));
        if (/^[a-z]+:/.test(item)) {
          const match = /^([a-z]+):\s*/.exec(item);
          const value = item.substr(match[0].length);
          const name = match[1];
          switch (name) {
            case "referrer":
              return isGlobMatched(value, context.referrer);
            default:
              return false;
          }
        } else if (item.indexOf("/") >= 0) {
          return isResourceTypeSupported(context, item);
        } else {
          return isEnvironment(context, item);
        }
      });
    }
    function isKeyMatched(context, key) {
      for (; ; ) {
        const match = /^\[([^\]]+)\]\s*/.exec(key);
        if (!match)
          return key;
        key = key.substr(match[0].length);
        const condition = match[1];
        if (!isConditionMatched(context, condition)) {
          return false;
        }
      }
    }
    function getField(context, configuration, field) {
      let value;
      Object.keys(configuration).forEach((key) => {
        const pureKey = isKeyMatched(context, key);
        if (pureKey === field) {
          value = configuration[key];
        }
      });
      return value;
    }
    function getMain(context, configuration) {
      return getField(context, configuration, "main");
    }
    function getExtensions(context, configuration) {
      return getField(context, configuration, "extensions");
    }
    function matchModule(context, configuration, request) {
      const modulesField = getField(context, configuration, "modules");
      if (!modulesField)
        return request;
      let newRequest = request;
      const keys = Object.keys(modulesField);
      let iteration = 0;
      let match;
      let index2;
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        const pureKey = isKeyMatched(context, key);
        match = matchGlob(pureKey, newRequest);
        if (match) {
          const value = modulesField[key];
          if (typeof value !== "string") {
            return value;
          } else if (/^\(.+\)$/.test(pureKey)) {
            newRequest = newRequest.replace(getGlobRegExp(pureKey), value);
          } else {
            index2 = 1;
            newRequest = value.replace(/(\/?\*)?\*/g, replaceMatcher);
          }
          i = -1;
          if (iteration++ > keys.length) {
            throw new Error("Request '" + request + "' matches recursively");
          }
        }
      }
      return newRequest;
      function replaceMatcher(find2) {
        switch (find2) {
          case "/**": {
            const m = match[index2++];
            return m ? "/" + m : "";
          }
          case "**":
          case "*":
            return match[index2++];
        }
      }
    }
    function matchType(context, configuration, relativePath) {
      const typesField = getField(context, configuration, "types");
      if (!typesField)
        return void 0;
      let type;
      Object.keys(typesField).forEach((key) => {
        const pureKey = isKeyMatched(context, key);
        if (isGlobMatched(pureKey, relativePath)) {
          const value = typesField[key];
          if (!type && /\/\*$/.test(value))
            throw new Error(
              "value ('" + value + "') of key '" + key + "' contains '*', but there is no previous value defined"
            );
          type = value.replace(/\/\*$/, "/" + type);
        }
      });
      return type;
    }
    exports.parseType = parseType;
    exports.isTypeMatched = isTypeMatched;
    exports.isResourceTypeSupported = isResourceTypeSupported;
    exports.isEnvironment = isEnvironment;
    exports.isGlobMatched = isGlobMatched;
    exports.isConditionMatched = isConditionMatched;
    exports.isKeyMatched = isKeyMatched;
    exports.getField = getField;
    exports.getMain = getMain;
    exports.getExtensions = getExtensions;
    exports.matchModule = matchModule;
    exports.matchType = matchType;
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ConcordExtensionsPlugin.js
var require_ConcordExtensionsPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ConcordExtensionsPlugin.js"(exports, module) {
    "use strict";
    var concord = require_concord();
    var DescriptionFileUtils = require_DescriptionFileUtils();
    var forEachBail = require_forEachBail();
    module.exports = class ConcordExtensionsPlugin {
      constructor(source, options, target) {
        this.source = source;
        this.options = options;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync(
          "ConcordExtensionsPlugin",
          (request, resolveContext, callback) => {
            const concordField = DescriptionFileUtils.getField(
              request.descriptionFileData,
              "concord"
            );
            if (!concordField)
              return callback();
            const extensions = concord.getExtensions(
              request.context,
              concordField
            );
            if (!extensions)
              return callback();
            forEachBail(
              extensions,
              (appending, callback2) => {
                const obj = Object.assign({}, request, {
                  path: request.path + appending,
                  relativePath: request.relativePath && request.relativePath + appending
                });
                resolver.doResolve(
                  target,
                  obj,
                  "concord extension: " + appending,
                  resolveContext,
                  callback2
                );
              },
              (err, result) => {
                if (err)
                  return callback(err);
                if (result === void 0)
                  return callback(null, null);
                callback(null, result);
              }
            );
          }
        );
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ConcordMainPlugin.js
var require_ConcordMainPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ConcordMainPlugin.js"(exports, module) {
    "use strict";
    var path3 = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
    var concord = require_concord();
    var DescriptionFileUtils = require_DescriptionFileUtils();
    module.exports = class ConcordMainPlugin {
      constructor(source, options, target) {
        this.source = source;
        this.options = options;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("ConcordMainPlugin", (request, resolveContext, callback) => {
          if (request.path !== request.descriptionFileRoot)
            return callback();
          const concordField = DescriptionFileUtils.getField(
            request.descriptionFileData,
            "concord"
          );
          if (!concordField)
            return callback();
          const mainModule = concord.getMain(request.context, concordField);
          if (!mainModule)
            return callback();
          const obj = Object.assign({}, request, {
            request: mainModule
          });
          const filename = path3.basename(request.descriptionFilePath);
          return resolver.doResolve(
            target,
            obj,
            "use " + mainModule + " from " + filename,
            resolveContext,
            callback
          );
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ConcordModulesPlugin.js
var require_ConcordModulesPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ConcordModulesPlugin.js"(exports, module) {
    "use strict";
    var concord = require_concord();
    var DescriptionFileUtils = require_DescriptionFileUtils();
    var getInnerRequest = require_getInnerRequest();
    module.exports = class ConcordModulesPlugin {
      constructor(source, options, target) {
        this.source = source;
        this.options = options;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("ConcordModulesPlugin", (request, resolveContext, callback) => {
          const innerRequest = getInnerRequest(resolver, request);
          if (!innerRequest)
            return callback();
          const concordField = DescriptionFileUtils.getField(
            request.descriptionFileData,
            "concord"
          );
          if (!concordField)
            return callback();
          const data2 = concord.matchModule(
            request.context,
            concordField,
            innerRequest
          );
          if (data2 === innerRequest)
            return callback();
          if (data2 === void 0)
            return callback();
          if (data2 === false) {
            const ignoreObj = Object.assign({}, request, {
              path: false
            });
            return callback(null, ignoreObj);
          }
          const obj = Object.assign({}, request, {
            path: request.descriptionFileRoot,
            request: data2
          });
          resolver.doResolve(
            target,
            obj,
            "aliased from description file " + request.descriptionFilePath + " with mapping '" + innerRequest + "' to '" + data2 + "'",
            resolveContext,
            (err, result) => {
              if (err)
                return callback(err);
              if (result === void 0)
                return callback(null, null);
              callback(null, result);
            }
          );
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/DirectoryExistsPlugin.js
var require_DirectoryExistsPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/DirectoryExistsPlugin.js"(exports, module) {
    "use strict";
    module.exports = class DirectoryExistsPlugin {
      constructor(source, target) {
        this.source = source;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync(
          "DirectoryExistsPlugin",
          (request, resolveContext, callback) => {
            const fs4 = resolver.fileSystem;
            const directory = request.path;
            fs4.stat(directory, (err, stat) => {
              if (err || !stat) {
                if (resolveContext.missing)
                  resolveContext.missing.add(directory);
                if (resolveContext.log)
                  resolveContext.log(directory + " doesn't exist");
                return callback();
              }
              if (!stat.isDirectory()) {
                if (resolveContext.missing)
                  resolveContext.missing.add(directory);
                if (resolveContext.log)
                  resolveContext.log(directory + " is not a directory");
                return callback();
              }
              resolver.doResolve(
                target,
                request,
                "existing directory",
                resolveContext,
                callback
              );
            });
          }
        );
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/FileExistsPlugin.js
var require_FileExistsPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/FileExistsPlugin.js"(exports, module) {
    "use strict";
    module.exports = class FileExistsPlugin {
      constructor(source, target) {
        this.source = source;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        const fs4 = resolver.fileSystem;
        resolver.getHook(this.source).tapAsync("FileExistsPlugin", (request, resolveContext, callback) => {
          const file = request.path;
          fs4.stat(file, (err, stat) => {
            if (err || !stat) {
              if (resolveContext.missing)
                resolveContext.missing.add(file);
              if (resolveContext.log)
                resolveContext.log(file + " doesn't exist");
              return callback();
            }
            if (!stat.isFile()) {
              if (resolveContext.missing)
                resolveContext.missing.add(file);
              if (resolveContext.log)
                resolveContext.log(file + " is not a file");
              return callback();
            }
            resolver.doResolve(
              target,
              request,
              "existing file: " + file,
              resolveContext,
              callback
            );
          });
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/SymlinkPlugin.js
var require_SymlinkPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/SymlinkPlugin.js"(exports, module) {
    "use strict";
    var getPaths = require_getPaths();
    var forEachBail = require_forEachBail();
    module.exports = class SymlinkPlugin {
      constructor(source, target) {
        this.source = source;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        const fs4 = resolver.fileSystem;
        resolver.getHook(this.source).tapAsync("SymlinkPlugin", (request, resolveContext, callback) => {
          const pathsResult = getPaths(request.path);
          const pathSeqments = pathsResult.seqments;
          const paths = pathsResult.paths;
          let containsSymlink = false;
          forEachBail.withIndex(
            paths,
            (path3, idx, callback2) => {
              fs4.readlink(path3, (err, result) => {
                if (!err && result) {
                  pathSeqments[idx] = result;
                  containsSymlink = true;
                  if (/^(\/|[a-zA-Z]:($|\\))/.test(result))
                    return callback2(null, idx);
                }
                callback2();
              });
            },
            (err, idx) => {
              if (!containsSymlink)
                return callback();
              const resultSeqments = typeof idx === "number" ? pathSeqments.slice(0, idx + 1) : pathSeqments.slice();
              const result = resultSeqments.reverse().reduce((a, b) => {
                return resolver.join(a, b);
              });
              const obj = Object.assign({}, request, {
                path: result
              });
              resolver.doResolve(
                target,
                obj,
                "resolved symlink to " + result,
                resolveContext,
                callback
              );
            }
          );
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/MainFieldPlugin.js
var require_MainFieldPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/MainFieldPlugin.js"(exports, module) {
    "use strict";
    var path3 = _chunkI7OK7DX6cjs.__require.call(void 0, "path");
    module.exports = class MainFieldPlugin {
      constructor(source, options, target) {
        this.source = source;
        this.options = options;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("MainFieldPlugin", (request, resolveContext, callback) => {
          if (request.path !== request.descriptionFileRoot)
            return callback();
          if (request.alreadyTriedMainField === request.descriptionFilePath)
            return callback();
          const content = request.descriptionFileData;
          const filename = path3.basename(request.descriptionFilePath);
          let mainModule;
          const field = this.options.name;
          if (Array.isArray(field)) {
            let current2 = content;
            for (let j = 0; j < field.length; j++) {
              if (current2 === null || typeof current2 !== "object") {
                current2 = null;
                break;
              }
              current2 = current2[field[j]];
            }
            if (typeof current2 === "string") {
              mainModule = current2;
            }
          } else {
            if (typeof content[field] === "string") {
              mainModule = content[field];
            }
          }
          if (!mainModule)
            return callback();
          if (this.options.forceRelative && !/^\.\.?\//.test(mainModule))
            mainModule = "./" + mainModule;
          const obj = Object.assign({}, request, {
            request: mainModule,
            alreadyTriedMainField: request.descriptionFilePath
          });
          return resolver.doResolve(
            target,
            obj,
            "use " + mainModule + " from " + this.options.name + " in " + filename,
            resolveContext,
            callback
          );
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/UseFilePlugin.js
var require_UseFilePlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/UseFilePlugin.js"(exports, module) {
    "use strict";
    module.exports = class UseFilePlugin {
      constructor(source, filename, target) {
        this.source = source;
        this.filename = filename;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("UseFilePlugin", (request, resolveContext, callback) => {
          const filePath = resolver.join(request.path, this.filename);
          const obj = Object.assign({}, request, {
            path: filePath,
            relativePath: request.relativePath && resolver.join(request.relativePath, this.filename)
          });
          resolver.doResolve(
            target,
            obj,
            "using path: " + filePath,
            resolveContext,
            callback
          );
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/AppendPlugin.js
var require_AppendPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/AppendPlugin.js"(exports, module) {
    "use strict";
    module.exports = class AppendPlugin {
      constructor(source, appending, target) {
        this.source = source;
        this.appending = appending;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("AppendPlugin", (request, resolveContext, callback) => {
          const obj = Object.assign({}, request, {
            path: request.path + this.appending,
            relativePath: request.relativePath && request.relativePath + this.appending
          });
          resolver.doResolve(
            target,
            obj,
            this.appending,
            resolveContext,
            callback
          );
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/RootPlugin.js
var require_RootPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/RootPlugin.js"(exports, module) {
    "use strict";
    var RootPlugin = class {
      constructor(source, root, target, ignoreErrors) {
        this.root = root;
        this.source = source;
        this.target = target;
        this._ignoreErrors = ignoreErrors;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("RootPlugin", (request, resolveContext, callback) => {
          const req = request.request;
          if (!req)
            return callback();
          if (!req.startsWith("/"))
            return callback();
          const path3 = resolver.join(this.root, req.slice(1));
          const obj = Object.assign(request, {
            path: path3,
            relativePath: request.relativePath && path3
          });
          resolver.doResolve(
            target,
            obj,
            `root path ${this.root}`,
            resolveContext,
            this._ignoreErrors ? (err, result) => {
              if (err) {
                if (resolveContext.log) {
                  resolveContext.log(
                    `Ignored fatal error while resolving root path:
${err}`
                  );
                }
                return callback();
              }
              if (result)
                return callback(null, result);
              callback();
            } : callback
          );
        });
      }
    };
    module.exports = RootPlugin;
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/RestrictionsPlugin.js
var require_RestrictionsPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/RestrictionsPlugin.js"(exports, module) {
    "use strict";
    var slashCode = "/".charCodeAt(0);
    var backslashCode = "\\".charCodeAt(0);
    var isInside = (path3, parent) => {
      if (!path3.startsWith(parent))
        return false;
      if (path3.length === parent.length)
        return true;
      const charCode = path3.charCodeAt(parent.length);
      return charCode === slashCode || charCode === backslashCode;
    };
    module.exports = class RestrictionsPlugin {
      constructor(source, restrictions) {
        this.source = source;
        this.restrictions = restrictions;
      }
      apply(resolver) {
        resolver.getHook(this.source).tapAsync("RestrictionsPlugin", (request, resolveContext, callback) => {
          if (typeof request.path === "string") {
            const path3 = request.path;
            for (let i = 0; i < this.restrictions.length; i++) {
              const rule = this.restrictions[i];
              if (typeof rule === "string") {
                if (!isInside(path3, rule)) {
                  if (resolveContext.log) {
                    resolveContext.log(
                      `${path3} is not inside of the restriction ${rule}`
                    );
                  }
                  return callback(null, null);
                }
              } else if (!rule.test(path3)) {
                if (resolveContext.log) {
                  resolveContext.log(
                    `${path3} doesn't match the restriction ${rule}`
                  );
                }
                return callback(null, null);
              }
            }
          }
          callback();
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ResultPlugin.js
var require_ResultPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ResultPlugin.js"(exports, module) {
    "use strict";
    module.exports = class ResultPlugin {
      constructor(source) {
        this.source = source;
      }
      apply(resolver) {
        this.source.tapAsync(
          "ResultPlugin",
          (request, resolverContext, callback) => {
            const obj = Object.assign({}, request);
            if (resolverContext.log)
              resolverContext.log("reporting result " + obj.path);
            resolver.hooks.result.callAsync(obj, resolverContext, (err) => {
              if (err)
                return callback(err);
              callback(null, obj);
            });
          }
        );
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ModuleAppendPlugin.js
var require_ModuleAppendPlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ModuleAppendPlugin.js"(exports, module) {
    "use strict";
    module.exports = class ModuleAppendPlugin {
      constructor(source, appending, target) {
        this.source = source;
        this.appending = appending;
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("ModuleAppendPlugin", (request, resolveContext, callback) => {
          const i = request.request.indexOf("/"), j = request.request.indexOf("\\");
          const p = i < 0 ? j : j < 0 ? i : i < j ? i : j;
          let moduleName, remainingRequest;
          if (p < 0) {
            moduleName = request.request;
            remainingRequest = "";
          } else {
            moduleName = request.request.substr(0, p);
            remainingRequest = request.request.substr(p);
          }
          if (moduleName === "." || moduleName === "..")
            return callback();
          const moduleFinalName = moduleName + this.appending;
          const obj = Object.assign({}, request, {
            request: moduleFinalName + remainingRequest
          });
          resolver.doResolve(
            target,
            obj,
            "module variation " + moduleFinalName,
            resolveContext,
            callback
          );
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/UnsafeCachePlugin.js
var require_UnsafeCachePlugin = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/UnsafeCachePlugin.js"(exports, module) {
    "use strict";
    function getCacheId(request, withContext) {
      return JSON.stringify({
        context: withContext ? request.context : "",
        path: request.path,
        query: request.query,
        request: request.request
      });
    }
    module.exports = class UnsafeCachePlugin {
      constructor(source, filterPredicate, cache, withContext, target) {
        this.source = source;
        this.filterPredicate = filterPredicate;
        this.withContext = withContext;
        this.cache = cache || {};
        this.target = target;
      }
      apply(resolver) {
        const target = resolver.ensureHook(this.target);
        resolver.getHook(this.source).tapAsync("UnsafeCachePlugin", (request, resolveContext, callback) => {
          if (!this.filterPredicate(request))
            return callback();
          const cacheId = getCacheId(request, this.withContext);
          const cacheEntry = this.cache[cacheId];
          if (cacheEntry) {
            return callback(null, cacheEntry);
          }
          resolver.doResolve(
            target,
            request,
            null,
            resolveContext,
            (err, result) => {
              if (err)
                return callback(err);
              if (result)
                return callback(null, this.cache[cacheId] = result);
              callback();
            }
          );
        });
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ResolverFactory.js
var require_ResolverFactory = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/ResolverFactory.js"(exports) {
    "use strict";
    var Resolver = require_Resolver();
    var SyncAsyncFileSystemDecorator = require_SyncAsyncFileSystemDecorator();
    var ParsePlugin = require_ParsePlugin();
    var DescriptionFilePlugin = require_DescriptionFilePlugin();
    var NextPlugin = require_NextPlugin();
    var TryNextPlugin = require_TryNextPlugin();
    var ModuleKindPlugin = require_ModuleKindPlugin();
    var FileKindPlugin = require_FileKindPlugin();
    var JoinRequestPlugin = require_JoinRequestPlugin();
    var ModulesInHierachicDirectoriesPlugin = require_ModulesInHierachicDirectoriesPlugin();
    var ModulesInRootPlugin = require_ModulesInRootPlugin();
    var AliasPlugin = require_AliasPlugin();
    var AliasFieldPlugin = require_AliasFieldPlugin();
    var ConcordExtensionsPlugin = require_ConcordExtensionsPlugin();
    var ConcordMainPlugin = require_ConcordMainPlugin();
    var ConcordModulesPlugin = require_ConcordModulesPlugin();
    var DirectoryExistsPlugin = require_DirectoryExistsPlugin();
    var FileExistsPlugin = require_FileExistsPlugin();
    var SymlinkPlugin = require_SymlinkPlugin();
    var MainFieldPlugin = require_MainFieldPlugin();
    var UseFilePlugin = require_UseFilePlugin();
    var AppendPlugin = require_AppendPlugin();
    var RootPlugin = require_RootPlugin();
    var RestrictionsPlugin = require_RestrictionsPlugin();
    var ResultPlugin = require_ResultPlugin();
    var ModuleAppendPlugin = require_ModuleAppendPlugin();
    var UnsafeCachePlugin = require_UnsafeCachePlugin();
    exports.createResolver = function(options) {
      let modules = options.modules || ["node_modules"];
      const descriptionFiles = options.descriptionFiles || ["package.json"];
      const plugins = options.plugins && options.plugins.slice() || [];
      let mainFields = options.mainFields || ["main"];
      const aliasFields = options.aliasFields || [];
      const mainFiles = options.mainFiles || ["index"];
      let extensions = options.extensions || [".js", ".json", ".node"];
      const enforceExtension = options.enforceExtension || false;
      let moduleExtensions = options.moduleExtensions || [];
      const enforceModuleExtension = options.enforceModuleExtension || false;
      let alias = options.alias || [];
      const symlinks = typeof options.symlinks !== "undefined" ? options.symlinks : true;
      const resolveToContext = options.resolveToContext || false;
      const roots = options.roots || [];
      const ignoreRootsErrors = options.ignoreRootsErrors || false;
      const preferAbsolute = options.preferAbsolute || false;
      const restrictions = options.restrictions || [];
      let unsafeCache = options.unsafeCache || false;
      const cacheWithContext = typeof options.cacheWithContext !== "undefined" ? options.cacheWithContext : true;
      const enableConcord = options.concord || false;
      const cachePredicate = options.cachePredicate || function() {
        return true;
      };
      const fileSystem = options.fileSystem;
      const useSyncFileSystemCalls = options.useSyncFileSystemCalls;
      let resolver = options.resolver;
      if (!resolver) {
        resolver = new Resolver(
          useSyncFileSystemCalls ? new SyncAsyncFileSystemDecorator(fileSystem) : fileSystem
        );
      }
      extensions = [].concat(extensions);
      moduleExtensions = [].concat(moduleExtensions);
      modules = mergeFilteredToArray([].concat(modules), (item) => {
        return !isAbsolutePath(item);
      });
      mainFields = mainFields.map((item) => {
        if (typeof item === "string" || Array.isArray(item)) {
          item = {
            name: item,
            forceRelative: true
          };
        }
        return item;
      });
      if (typeof alias === "object" && !Array.isArray(alias)) {
        alias = Object.keys(alias).map((key) => {
          let onlyModule = false;
          let obj = alias[key];
          if (/\$$/.test(key)) {
            onlyModule = true;
            key = key.substr(0, key.length - 1);
          }
          if (typeof obj === "string") {
            obj = {
              alias: obj
            };
          }
          obj = Object.assign(
            {
              name: key,
              onlyModule
            },
            obj
          );
          return obj;
        });
      }
      if (unsafeCache && typeof unsafeCache !== "object") {
        unsafeCache = {};
      }
      resolver.ensureHook("resolve");
      resolver.ensureHook("parsedResolve");
      resolver.ensureHook("describedResolve");
      resolver.ensureHook("rawModule");
      resolver.ensureHook("module");
      resolver.ensureHook("relative");
      resolver.ensureHook("describedRelative");
      resolver.ensureHook("directory");
      resolver.ensureHook("existingDirectory");
      resolver.ensureHook("undescribedRawFile");
      resolver.ensureHook("rawFile");
      resolver.ensureHook("file");
      resolver.ensureHook("existingFile");
      resolver.ensureHook("resolved");
      if (unsafeCache) {
        plugins.push(
          new UnsafeCachePlugin(
            "resolve",
            cachePredicate,
            unsafeCache,
            cacheWithContext,
            "new-resolve"
          )
        );
        plugins.push(new ParsePlugin("new-resolve", "parsed-resolve"));
      } else {
        plugins.push(new ParsePlugin("resolve", "parsed-resolve"));
      }
      plugins.push(
        new DescriptionFilePlugin(
          "parsed-resolve",
          descriptionFiles,
          "described-resolve"
        )
      );
      plugins.push(new NextPlugin("after-parsed-resolve", "described-resolve"));
      if (alias.length > 0)
        plugins.push(new AliasPlugin("described-resolve", alias, "resolve"));
      if (enableConcord) {
        plugins.push(new ConcordModulesPlugin("described-resolve", {}, "resolve"));
      }
      aliasFields.forEach((item) => {
        plugins.push(new AliasFieldPlugin("described-resolve", item, "resolve"));
      });
      plugins.push(new ModuleKindPlugin("after-described-resolve", "raw-module"));
      if (preferAbsolute) {
        plugins.push(new JoinRequestPlugin("after-described-resolve", "relative"));
      }
      roots.forEach((root) => {
        plugins.push(
          new RootPlugin(
            "after-described-resolve",
            root,
            "relative",
            ignoreRootsErrors
          )
        );
      });
      if (!preferAbsolute) {
        plugins.push(new JoinRequestPlugin("after-described-resolve", "relative"));
      }
      moduleExtensions.forEach((item) => {
        plugins.push(new ModuleAppendPlugin("raw-module", item, "module"));
      });
      if (!enforceModuleExtension)
        plugins.push(new TryNextPlugin("raw-module", null, "module"));
      modules.forEach((item) => {
        if (Array.isArray(item))
          plugins.push(
            new ModulesInHierachicDirectoriesPlugin("module", item, "resolve")
          );
        else
          plugins.push(new ModulesInRootPlugin("module", item, "resolve"));
      });
      plugins.push(
        new DescriptionFilePlugin(
          "relative",
          descriptionFiles,
          "described-relative"
        )
      );
      plugins.push(new NextPlugin("after-relative", "described-relative"));
      plugins.push(new FileKindPlugin("described-relative", "raw-file"));
      plugins.push(
        new TryNextPlugin("described-relative", "as directory", "directory")
      );
      plugins.push(new DirectoryExistsPlugin("directory", "existing-directory"));
      if (resolveToContext) {
        plugins.push(new NextPlugin("existing-directory", "resolved"));
      } else {
        if (enableConcord) {
          plugins.push(new ConcordMainPlugin("existing-directory", {}, "resolve"));
        }
        mainFields.forEach((item) => {
          plugins.push(new MainFieldPlugin("existing-directory", item, "resolve"));
        });
        mainFiles.forEach((item) => {
          plugins.push(
            new UseFilePlugin("existing-directory", item, "undescribed-raw-file")
          );
        });
        plugins.push(
          new DescriptionFilePlugin(
            "undescribed-raw-file",
            descriptionFiles,
            "raw-file"
          )
        );
        plugins.push(new NextPlugin("after-undescribed-raw-file", "raw-file"));
        if (!enforceExtension) {
          plugins.push(new TryNextPlugin("raw-file", "no extension", "file"));
        }
        if (enableConcord) {
          plugins.push(new ConcordExtensionsPlugin("raw-file", {}, "file"));
        }
        extensions.forEach((item) => {
          plugins.push(new AppendPlugin("raw-file", item, "file"));
        });
        if (alias.length > 0)
          plugins.push(new AliasPlugin("file", alias, "resolve"));
        if (enableConcord) {
          plugins.push(new ConcordModulesPlugin("file", {}, "resolve"));
        }
        aliasFields.forEach((item) => {
          plugins.push(new AliasFieldPlugin("file", item, "resolve"));
        });
        if (symlinks)
          plugins.push(new SymlinkPlugin("file", "relative"));
        plugins.push(new FileExistsPlugin("file", "existing-file"));
        plugins.push(new NextPlugin("existing-file", "resolved"));
      }
      if (restrictions.length > 0) {
        plugins.push(new RestrictionsPlugin(resolver.hooks.resolved, restrictions));
      }
      plugins.push(new ResultPlugin(resolver.hooks.resolved));
      plugins.forEach((plugin) => {
        plugin.apply(resolver);
      });
      return resolver;
    };
    function mergeFilteredToArray(array, filter) {
      return array.reduce((array2, item) => {
        if (filter(item)) {
          const lastElement = array2[array2.length - 1];
          if (Array.isArray(lastElement)) {
            lastElement.push(item);
          } else {
            array2.push([item]);
          }
          return array2;
        } else {
          array2.push(item);
          return array2;
        }
      }, []);
    }
    function isAbsolutePath(path3) {
      return /^[A-Z]:|^\//.test(path3);
    }
  }
});

// node_modules/.pnpm/graceful-fs@4.2.10/node_modules/graceful-fs/polyfills.js
var require_polyfills = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/graceful-fs@4.2.10/node_modules/graceful-fs/polyfills.js"(exports, module) {
    var constants = _chunkI7OK7DX6cjs.__require.call(void 0, "constants");
    var origCwd = process.cwd;
    var cwd = null;
    var platform2 = process.env.GRACEFUL_FS_PLATFORM || process.platform;
    process.cwd = function() {
      if (!cwd)
        cwd = origCwd.call(process);
      return cwd;
    };
    try {
      process.cwd();
    } catch (er) {
    }
    if (typeof process.chdir === "function") {
      chdir = process.chdir;
      process.chdir = function(d) {
        cwd = null;
        chdir.call(process, d);
      };
      if (Object.setPrototypeOf)
        Object.setPrototypeOf(process.chdir, chdir);
    }
    var chdir;
    module.exports = patch;
    function patch(fs4) {
      if (constants.hasOwnProperty("O_SYMLINK") && process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
        patchLchmod(fs4);
      }
      if (!fs4.lutimes) {
        patchLutimes(fs4);
      }
      fs4.chown = chownFix(fs4.chown);
      fs4.fchown = chownFix(fs4.fchown);
      fs4.lchown = chownFix(fs4.lchown);
      fs4.chmod = chmodFix(fs4.chmod);
      fs4.fchmod = chmodFix(fs4.fchmod);
      fs4.lchmod = chmodFix(fs4.lchmod);
      fs4.chownSync = chownFixSync(fs4.chownSync);
      fs4.fchownSync = chownFixSync(fs4.fchownSync);
      fs4.lchownSync = chownFixSync(fs4.lchownSync);
      fs4.chmodSync = chmodFixSync(fs4.chmodSync);
      fs4.fchmodSync = chmodFixSync(fs4.fchmodSync);
      fs4.lchmodSync = chmodFixSync(fs4.lchmodSync);
      fs4.stat = statFix(fs4.stat);
      fs4.fstat = statFix(fs4.fstat);
      fs4.lstat = statFix(fs4.lstat);
      fs4.statSync = statFixSync(fs4.statSync);
      fs4.fstatSync = statFixSync(fs4.fstatSync);
      fs4.lstatSync = statFixSync(fs4.lstatSync);
      if (fs4.chmod && !fs4.lchmod) {
        fs4.lchmod = function(path3, mode, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs4.lchmodSync = function() {
        };
      }
      if (fs4.chown && !fs4.lchown) {
        fs4.lchown = function(path3, uid, gid, cb) {
          if (cb)
            process.nextTick(cb);
        };
        fs4.lchownSync = function() {
        };
      }
      if (platform2 === "win32") {
        fs4.rename = typeof fs4.rename !== "function" ? fs4.rename : function(fs$rename) {
          function rename(from, to, cb) {
            var start = Date.now();
            var backoff = 0;
            fs$rename(from, to, function CB(er) {
              if (er && (er.code === "EACCES" || er.code === "EPERM") && Date.now() - start < 6e4) {
                setTimeout(function() {
                  fs4.stat(to, function(stater, st) {
                    if (stater && stater.code === "ENOENT")
                      fs$rename(from, to, CB);
                    else
                      cb(er);
                  });
                }, backoff);
                if (backoff < 100)
                  backoff += 10;
                return;
              }
              if (cb)
                cb(er);
            });
          }
          if (Object.setPrototypeOf)
            Object.setPrototypeOf(rename, fs$rename);
          return rename;
        }(fs4.rename);
      }
      fs4.read = typeof fs4.read !== "function" ? fs4.read : function(fs$read) {
        function read2(fd, buffer, offset2, length, position, callback_) {
          var callback;
          if (callback_ && typeof callback_ === "function") {
            var eagCounter = 0;
            callback = function(er, _, __) {
              if (er && er.code === "EAGAIN" && eagCounter < 10) {
                eagCounter++;
                return fs$read.call(fs4, fd, buffer, offset2, length, position, callback);
              }
              callback_.apply(this, arguments);
            };
          }
          return fs$read.call(fs4, fd, buffer, offset2, length, position, callback);
        }
        if (Object.setPrototypeOf)
          Object.setPrototypeOf(read2, fs$read);
        return read2;
      }(fs4.read);
      fs4.readSync = typeof fs4.readSync !== "function" ? fs4.readSync : function(fs$readSync) {
        return function(fd, buffer, offset2, length, position) {
          var eagCounter = 0;
          while (true) {
            try {
              return fs$readSync.call(fs4, fd, buffer, offset2, length, position);
            } catch (er) {
              if (er.code === "EAGAIN" && eagCounter < 10) {
                eagCounter++;
                continue;
              }
              throw er;
            }
          }
        };
      }(fs4.readSync);
      function patchLchmod(fs5) {
        fs5.lchmod = function(path3, mode, callback) {
          fs5.open(
            path3,
            constants.O_WRONLY | constants.O_SYMLINK,
            mode,
            function(err, fd) {
              if (err) {
                if (callback)
                  callback(err);
                return;
              }
              fs5.fchmod(fd, mode, function(err2) {
                fs5.close(fd, function(err22) {
                  if (callback)
                    callback(err2 || err22);
                });
              });
            }
          );
        };
        fs5.lchmodSync = function(path3, mode) {
          var fd = fs5.openSync(path3, constants.O_WRONLY | constants.O_SYMLINK, mode);
          var threw = true;
          var ret;
          try {
            ret = fs5.fchmodSync(fd, mode);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs5.closeSync(fd);
              } catch (er) {
              }
            } else {
              fs5.closeSync(fd);
            }
          }
          return ret;
        };
      }
      function patchLutimes(fs5) {
        if (constants.hasOwnProperty("O_SYMLINK") && fs5.futimes) {
          fs5.lutimes = function(path3, at2, mt, cb) {
            fs5.open(path3, constants.O_SYMLINK, function(er, fd) {
              if (er) {
                if (cb)
                  cb(er);
                return;
              }
              fs5.futimes(fd, at2, mt, function(er2) {
                fs5.close(fd, function(er22) {
                  if (cb)
                    cb(er2 || er22);
                });
              });
            });
          };
          fs5.lutimesSync = function(path3, at2, mt) {
            var fd = fs5.openSync(path3, constants.O_SYMLINK);
            var ret;
            var threw = true;
            try {
              ret = fs5.futimesSync(fd, at2, mt);
              threw = false;
            } finally {
              if (threw) {
                try {
                  fs5.closeSync(fd);
                } catch (er) {
                }
              } else {
                fs5.closeSync(fd);
              }
            }
            return ret;
          };
        } else if (fs5.futimes) {
          fs5.lutimes = function(_a, _b, _c, cb) {
            if (cb)
              process.nextTick(cb);
          };
          fs5.lutimesSync = function() {
          };
        }
      }
      function chmodFix(orig) {
        if (!orig)
          return orig;
        return function(target, mode, cb) {
          return orig.call(fs4, target, mode, function(er) {
            if (chownErOk(er))
              er = null;
            if (cb)
              cb.apply(this, arguments);
          });
        };
      }
      function chmodFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, mode) {
          try {
            return orig.call(fs4, target, mode);
          } catch (er) {
            if (!chownErOk(er))
              throw er;
          }
        };
      }
      function chownFix(orig) {
        if (!orig)
          return orig;
        return function(target, uid, gid, cb) {
          return orig.call(fs4, target, uid, gid, function(er) {
            if (chownErOk(er))
              er = null;
            if (cb)
              cb.apply(this, arguments);
          });
        };
      }
      function chownFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, uid, gid) {
          try {
            return orig.call(fs4, target, uid, gid);
          } catch (er) {
            if (!chownErOk(er))
              throw er;
          }
        };
      }
      function statFix(orig) {
        if (!orig)
          return orig;
        return function(target, options, cb) {
          if (typeof options === "function") {
            cb = options;
            options = null;
          }
          function callback(er, stats) {
            if (stats) {
              if (stats.uid < 0)
                stats.uid += 4294967296;
              if (stats.gid < 0)
                stats.gid += 4294967296;
            }
            if (cb)
              cb.apply(this, arguments);
          }
          return options ? orig.call(fs4, target, options, callback) : orig.call(fs4, target, callback);
        };
      }
      function statFixSync(orig) {
        if (!orig)
          return orig;
        return function(target, options) {
          var stats = options ? orig.call(fs4, target, options) : orig.call(fs4, target);
          if (stats) {
            if (stats.uid < 0)
              stats.uid += 4294967296;
            if (stats.gid < 0)
              stats.gid += 4294967296;
          }
          return stats;
        };
      }
      function chownErOk(er) {
        if (!er)
          return true;
        if (er.code === "ENOSYS")
          return true;
        var nonroot = !process.getuid || process.getuid() !== 0;
        if (nonroot) {
          if (er.code === "EINVAL" || er.code === "EPERM")
            return true;
        }
        return false;
      }
    }
  }
});

// node_modules/.pnpm/graceful-fs@4.2.10/node_modules/graceful-fs/legacy-streams.js
var require_legacy_streams = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/graceful-fs@4.2.10/node_modules/graceful-fs/legacy-streams.js"(exports, module) {
    var Stream = _chunkI7OK7DX6cjs.__require.call(void 0, "stream").Stream;
    module.exports = legacy;
    function legacy(fs4) {
      return {
        ReadStream,
        WriteStream
      };
      function ReadStream(path3, options) {
        if (!(this instanceof ReadStream))
          return new ReadStream(path3, options);
        Stream.call(this);
        var self2 = this;
        this.path = path3;
        this.fd = null;
        this.readable = true;
        this.paused = false;
        this.flags = "r";
        this.mode = 438;
        this.bufferSize = 64 * 1024;
        options = options || {};
        var keys = Object.keys(options);
        for (var index2 = 0, length = keys.length; index2 < length; index2++) {
          var key = keys[index2];
          this[key] = options[key];
        }
        if (this.encoding)
          this.setEncoding(this.encoding);
        if (this.start !== void 0) {
          if ("number" !== typeof this.start) {
            throw TypeError("start must be a Number");
          }
          if (this.end === void 0) {
            this.end = Infinity;
          } else if ("number" !== typeof this.end) {
            throw TypeError("end must be a Number");
          }
          if (this.start > this.end) {
            throw new Error("start must be <= end");
          }
          this.pos = this.start;
        }
        if (this.fd !== null) {
          process.nextTick(function() {
            self2._read();
          });
          return;
        }
        fs4.open(this.path, this.flags, this.mode, function(err, fd) {
          if (err) {
            self2.emit("error", err);
            self2.readable = false;
            return;
          }
          self2.fd = fd;
          self2.emit("open", fd);
          self2._read();
        });
      }
      function WriteStream(path3, options) {
        if (!(this instanceof WriteStream))
          return new WriteStream(path3, options);
        Stream.call(this);
        this.path = path3;
        this.fd = null;
        this.writable = true;
        this.flags = "w";
        this.encoding = "binary";
        this.mode = 438;
        this.bytesWritten = 0;
        options = options || {};
        var keys = Object.keys(options);
        for (var index2 = 0, length = keys.length; index2 < length; index2++) {
          var key = keys[index2];
          this[key] = options[key];
        }
        if (this.start !== void 0) {
          if ("number" !== typeof this.start) {
            throw TypeError("start must be a Number");
          }
          if (this.start < 0) {
            throw new Error("start must be >= zero");
          }
          this.pos = this.start;
        }
        this.busy = false;
        this._queue = [];
        if (this.fd === null) {
          this._open = fs4.open;
          this._queue.push([this._open, this.path, this.flags, this.mode, void 0]);
          this.flush();
        }
      }
    }
  }
});

// node_modules/.pnpm/graceful-fs@4.2.10/node_modules/graceful-fs/clone.js
var require_clone = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/graceful-fs@4.2.10/node_modules/graceful-fs/clone.js"(exports, module) {
    "use strict";
    module.exports = clone;
    var getPrototypeOf = Object.getPrototypeOf || function(obj) {
      return obj.__proto__;
    };
    function clone(obj) {
      if (obj === null || typeof obj !== "object")
        return obj;
      if (obj instanceof Object)
        var copy = { __proto__: getPrototypeOf(obj) };
      else
        var copy = /* @__PURE__ */ Object.create(null);
      Object.getOwnPropertyNames(obj).forEach(function(key) {
        Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
      });
      return copy;
    }
  }
});

// node_modules/.pnpm/graceful-fs@4.2.10/node_modules/graceful-fs/graceful-fs.js
var require_graceful_fs = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/graceful-fs@4.2.10/node_modules/graceful-fs/graceful-fs.js"(exports, module) {
    var fs4 = _chunkI7OK7DX6cjs.__require.call(void 0, "fs");
    var polyfills = require_polyfills();
    var legacy = require_legacy_streams();
    var clone = require_clone();
    var util = _chunkI7OK7DX6cjs.__require.call(void 0, "util");
    var gracefulQueue;
    var previousSymbol;
    if (typeof Symbol === "function" && typeof Symbol.for === "function") {
      gracefulQueue = Symbol.for("graceful-fs.queue");
      previousSymbol = Symbol.for("graceful-fs.previous");
    } else {
      gracefulQueue = "___graceful-fs.queue";
      previousSymbol = "___graceful-fs.previous";
    }
    function noop() {
    }
    function publishQueue(context, queue2) {
      Object.defineProperty(context, gracefulQueue, {
        get: function() {
          return queue2;
        }
      });
    }
    var debug = noop;
    if (util.debuglog)
      debug = util.debuglog("gfs4");
    else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ""))
      debug = function() {
        var m = util.format.apply(util, arguments);
        m = "GFS4: " + m.split(/\n/).join("\nGFS4: ");
        console.error(m);
      };
    if (!fs4[gracefulQueue]) {
      queue = global[gracefulQueue] || [];
      publishQueue(fs4, queue);
      fs4.close = function(fs$close) {
        function close(fd, cb) {
          return fs$close.call(fs4, fd, function(err) {
            if (!err) {
              resetQueue();
            }
            if (typeof cb === "function")
              cb.apply(this, arguments);
          });
        }
        Object.defineProperty(close, previousSymbol, {
          value: fs$close
        });
        return close;
      }(fs4.close);
      fs4.closeSync = function(fs$closeSync) {
        function closeSync(fd) {
          fs$closeSync.apply(fs4, arguments);
          resetQueue();
        }
        Object.defineProperty(closeSync, previousSymbol, {
          value: fs$closeSync
        });
        return closeSync;
      }(fs4.closeSync);
      if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || "")) {
        process.on("exit", function() {
          debug(fs4[gracefulQueue]);
          _chunkI7OK7DX6cjs.__require.call(void 0, "assert").equal(fs4[gracefulQueue].length, 0);
        });
      }
    }
    var queue;
    if (!global[gracefulQueue]) {
      publishQueue(global, fs4[gracefulQueue]);
    }
    module.exports = patch(clone(fs4));
    if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs4.__patched) {
      module.exports = patch(fs4);
      fs4.__patched = true;
    }
    function patch(fs5) {
      polyfills(fs5);
      fs5.gracefulify = patch;
      fs5.createReadStream = createReadStream;
      fs5.createWriteStream = createWriteStream;
      var fs$readFile = fs5.readFile;
      fs5.readFile = readFile;
      function readFile(path3, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$readFile(path3, options, cb);
        function go$readFile(path4, options2, cb2, startTime) {
          return fs$readFile(path4, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$readFile, [path4, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$writeFile = fs5.writeFile;
      fs5.writeFile = writeFile;
      function writeFile(path3, data2, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$writeFile(path3, data2, options, cb);
        function go$writeFile(path4, data3, options2, cb2, startTime) {
          return fs$writeFile(path4, data3, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$writeFile, [path4, data3, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$appendFile = fs5.appendFile;
      if (fs$appendFile)
        fs5.appendFile = appendFile;
      function appendFile(path3, data2, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        return go$appendFile(path3, data2, options, cb);
        function go$appendFile(path4, data3, options2, cb2, startTime) {
          return fs$appendFile(path4, data3, options2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$appendFile, [path4, data3, options2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$copyFile = fs5.copyFile;
      if (fs$copyFile)
        fs5.copyFile = copyFile;
      function copyFile(src, dest, flags, cb) {
        if (typeof flags === "function") {
          cb = flags;
          flags = 0;
        }
        return go$copyFile(src, dest, flags, cb);
        function go$copyFile(src2, dest2, flags2, cb2, startTime) {
          return fs$copyFile(src2, dest2, flags2, function(err) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$copyFile, [src2, dest2, flags2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      var fs$readdir = fs5.readdir;
      fs5.readdir = readdir;
      var noReaddirOptionVersions = /^v[0-5]\./;
      function readdir(path3, options, cb) {
        if (typeof options === "function")
          cb = options, options = null;
        var go$readdir = noReaddirOptionVersions.test(process.version) ? function go$readdir2(path4, options2, cb2, startTime) {
          return fs$readdir(path4, fs$readdirCallback(
            path4,
            options2,
            cb2,
            startTime
          ));
        } : function go$readdir2(path4, options2, cb2, startTime) {
          return fs$readdir(path4, options2, fs$readdirCallback(
            path4,
            options2,
            cb2,
            startTime
          ));
        };
        return go$readdir(path3, options, cb);
        function fs$readdirCallback(path4, options2, cb2, startTime) {
          return function(err, files) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([
                go$readdir,
                [path4, options2, cb2],
                err,
                startTime || Date.now(),
                Date.now()
              ]);
            else {
              if (files && files.sort)
                files.sort();
              if (typeof cb2 === "function")
                cb2.call(this, err, files);
            }
          };
        }
      }
      if (process.version.substr(0, 4) === "v0.8") {
        var legStreams = legacy(fs5);
        ReadStream = legStreams.ReadStream;
        WriteStream = legStreams.WriteStream;
      }
      var fs$ReadStream = fs5.ReadStream;
      if (fs$ReadStream) {
        ReadStream.prototype = Object.create(fs$ReadStream.prototype);
        ReadStream.prototype.open = ReadStream$open;
      }
      var fs$WriteStream = fs5.WriteStream;
      if (fs$WriteStream) {
        WriteStream.prototype = Object.create(fs$WriteStream.prototype);
        WriteStream.prototype.open = WriteStream$open;
      }
      Object.defineProperty(fs5, "ReadStream", {
        get: function() {
          return ReadStream;
        },
        set: function(val) {
          ReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(fs5, "WriteStream", {
        get: function() {
          return WriteStream;
        },
        set: function(val) {
          WriteStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileReadStream = ReadStream;
      Object.defineProperty(fs5, "FileReadStream", {
        get: function() {
          return FileReadStream;
        },
        set: function(val) {
          FileReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileWriteStream = WriteStream;
      Object.defineProperty(fs5, "FileWriteStream", {
        get: function() {
          return FileWriteStream;
        },
        set: function(val) {
          FileWriteStream = val;
        },
        enumerable: true,
        configurable: true
      });
      function ReadStream(path3, options) {
        if (this instanceof ReadStream)
          return fs$ReadStream.apply(this, arguments), this;
        else
          return ReadStream.apply(Object.create(ReadStream.prototype), arguments);
      }
      function ReadStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err, fd) {
          if (err) {
            if (that.autoClose)
              that.destroy();
            that.emit("error", err);
          } else {
            that.fd = fd;
            that.emit("open", fd);
            that.read();
          }
        });
      }
      function WriteStream(path3, options) {
        if (this instanceof WriteStream)
          return fs$WriteStream.apply(this, arguments), this;
        else
          return WriteStream.apply(Object.create(WriteStream.prototype), arguments);
      }
      function WriteStream$open() {
        var that = this;
        open(that.path, that.flags, that.mode, function(err, fd) {
          if (err) {
            that.destroy();
            that.emit("error", err);
          } else {
            that.fd = fd;
            that.emit("open", fd);
          }
        });
      }
      function createReadStream(path3, options) {
        return new fs5.ReadStream(path3, options);
      }
      function createWriteStream(path3, options) {
        return new fs5.WriteStream(path3, options);
      }
      var fs$open = fs5.open;
      fs5.open = open;
      function open(path3, flags, mode, cb) {
        if (typeof mode === "function")
          cb = mode, mode = null;
        return go$open(path3, flags, mode, cb);
        function go$open(path4, flags2, mode2, cb2, startTime) {
          return fs$open(path4, flags2, mode2, function(err, fd) {
            if (err && (err.code === "EMFILE" || err.code === "ENFILE"))
              enqueue([go$open, [path4, flags2, mode2, cb2], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb2 === "function")
                cb2.apply(this, arguments);
            }
          });
        }
      }
      return fs5;
    }
    function enqueue(elem) {
      debug("ENQUEUE", elem[0].name, elem[1]);
      fs4[gracefulQueue].push(elem);
      retry();
    }
    var retryTimer;
    function resetQueue() {
      var now = Date.now();
      for (var i = 0; i < fs4[gracefulQueue].length; ++i) {
        if (fs4[gracefulQueue][i].length > 2) {
          fs4[gracefulQueue][i][3] = now;
          fs4[gracefulQueue][i][4] = now;
        }
      }
      retry();
    }
    function retry() {
      clearTimeout(retryTimer);
      retryTimer = void 0;
      if (fs4[gracefulQueue].length === 0)
        return;
      var elem = fs4[gracefulQueue].shift();
      var fn = elem[0];
      var args = elem[1];
      var err = elem[2];
      var startTime = elem[3];
      var lastTime = elem[4];
      if (startTime === void 0) {
        debug("RETRY", fn.name, args);
        fn.apply(null, args);
      } else if (Date.now() - startTime >= 6e4) {
        debug("TIMEOUT", fn.name, args);
        var cb = args.pop();
        if (typeof cb === "function")
          cb.call(null, err);
      } else {
        var sinceAttempt = Date.now() - lastTime;
        var sinceStart = Math.max(lastTime - startTime, 1);
        var desiredDelay = Math.min(sinceStart * 1.2, 100);
        if (sinceAttempt >= desiredDelay) {
          debug("RETRY", fn.name, args);
          fn.apply(null, args.concat([startTime]));
        } else {
          fs4[gracefulQueue].push(elem);
        }
      }
      if (retryTimer === void 0) {
        retryTimer = setTimeout(retry, 0);
      }
    }
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/NodeJsInputFileSystem.js
var require_NodeJsInputFileSystem = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/NodeJsInputFileSystem.js"(exports, module) {
    "use strict";
    var fs4 = require_graceful_fs();
    var NodeJsInputFileSystem = class {
      readdir(path3, callback) {
        fs4.readdir(path3, (err, files) => {
          callback(
            err,
            files && files.map((file) => {
              return file.normalize ? file.normalize("NFC") : file;
            })
          );
        });
      }
      readdirSync(path3) {
        const files = fs4.readdirSync(path3);
        return files && files.map((file) => {
          return file.normalize ? file.normalize("NFC") : file;
        });
      }
    };
    var fsMethods = [
      "stat",
      "statSync",
      "readFile",
      "readFileSync",
      "readlink",
      "readlinkSync"
    ];
    for (const key of fsMethods) {
      Object.defineProperty(NodeJsInputFileSystem.prototype, key, {
        configurable: true,
        writable: true,
        value: fs4[key].bind(fs4)
      });
    }
    module.exports = NodeJsInputFileSystem;
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js
var require_CachedInputFileSystem = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/CachedInputFileSystem.js"(exports, module) {
    "use strict";
    var Storage = class {
      constructor(duration) {
        this.duration = duration;
        this.running = /* @__PURE__ */ new Map();
        this.data = /* @__PURE__ */ new Map();
        this.levels = [];
        if (duration > 0) {
          this.levels.push(
            /* @__PURE__ */ new Set(),
            /* @__PURE__ */ new Set(),
            /* @__PURE__ */ new Set(),
            /* @__PURE__ */ new Set(),
            /* @__PURE__ */ new Set(),
            /* @__PURE__ */ new Set(),
            /* @__PURE__ */ new Set(),
            /* @__PURE__ */ new Set(),
            /* @__PURE__ */ new Set()
          );
          for (let i = 8e3; i < duration; i += 500)
            this.levels.push(/* @__PURE__ */ new Set());
        }
        this.count = 0;
        this.interval = null;
        this.needTickCheck = false;
        this.nextTick = null;
        this.passive = true;
        this.tick = this.tick.bind(this);
      }
      ensureTick() {
        if (!this.interval && this.duration > 0 && !this.nextTick)
          this.interval = setInterval(
            this.tick,
            Math.floor(this.duration / this.levels.length)
          );
      }
      finished(name, err, result) {
        const callbacks = this.running.get(name);
        this.running.delete(name);
        if (this.duration > 0) {
          this.data.set(name, [err, result]);
          const levelData = this.levels[0];
          this.count -= levelData.size;
          levelData.add(name);
          this.count += levelData.size;
          this.ensureTick();
        }
        for (let i = 0; i < callbacks.length; i++) {
          callbacks[i](err, result);
        }
      }
      finishedSync(name, err, result) {
        if (this.duration > 0) {
          this.data.set(name, [err, result]);
          const levelData = this.levels[0];
          this.count -= levelData.size;
          levelData.add(name);
          this.count += levelData.size;
          this.ensureTick();
        }
      }
      provide(name, provider2, callback) {
        if (typeof name !== "string") {
          callback(new TypeError("path must be a string"));
          return;
        }
        let running = this.running.get(name);
        if (running) {
          running.push(callback);
          return;
        }
        if (this.duration > 0) {
          this.checkTicks();
          const data2 = this.data.get(name);
          if (data2) {
            return process.nextTick(() => {
              callback.apply(null, data2);
            });
          }
        }
        this.running.set(name, running = [callback]);
        provider2(name, (err, result) => {
          this.finished(name, err, result);
        });
      }
      provideSync(name, provider2) {
        if (typeof name !== "string") {
          throw new TypeError("path must be a string");
        }
        if (this.duration > 0) {
          this.checkTicks();
          const data2 = this.data.get(name);
          if (data2) {
            if (data2[0])
              throw data2[0];
            return data2[1];
          }
        }
        let result;
        try {
          result = provider2(name);
        } catch (e) {
          this.finishedSync(name, e);
          throw e;
        }
        this.finishedSync(name, null, result);
        return result;
      }
      tick() {
        const decay = this.levels.pop();
        for (let item of decay) {
          this.data.delete(item);
        }
        this.count -= decay.size;
        decay.clear();
        this.levels.unshift(decay);
        if (this.count === 0) {
          clearInterval(this.interval);
          this.interval = null;
          this.nextTick = null;
          return true;
        } else if (this.nextTick) {
          this.nextTick += Math.floor(this.duration / this.levels.length);
          const time = new Date().getTime();
          if (this.nextTick > time) {
            this.nextTick = null;
            this.interval = setInterval(
              this.tick,
              Math.floor(this.duration / this.levels.length)
            );
            return true;
          }
        } else if (this.passive) {
          clearInterval(this.interval);
          this.interval = null;
          this.nextTick = new Date().getTime() + Math.floor(this.duration / this.levels.length);
        } else {
          this.passive = true;
        }
      }
      checkTicks() {
        this.passive = false;
        if (this.nextTick) {
          while (!this.tick())
            ;
        }
      }
      purge(what) {
        if (!what) {
          this.count = 0;
          clearInterval(this.interval);
          this.nextTick = null;
          this.data.clear();
          this.levels.forEach((level) => {
            level.clear();
          });
        } else if (typeof what === "string") {
          for (let key of this.data.keys()) {
            if (key.startsWith(what))
              this.data.delete(key);
          }
        } else {
          for (let i = what.length - 1; i >= 0; i--) {
            this.purge(what[i]);
          }
        }
      }
    };
    module.exports = class CachedInputFileSystem {
      constructor(fileSystem, duration) {
        this.fileSystem = fileSystem;
        this._statStorage = new Storage(duration);
        this._readdirStorage = new Storage(duration);
        this._readFileStorage = new Storage(duration);
        this._readJsonStorage = new Storage(duration);
        this._readlinkStorage = new Storage(duration);
        this._stat = this.fileSystem.stat ? this.fileSystem.stat.bind(this.fileSystem) : null;
        if (!this._stat)
          this.stat = null;
        this._statSync = this.fileSystem.statSync ? this.fileSystem.statSync.bind(this.fileSystem) : null;
        if (!this._statSync)
          this.statSync = null;
        this._readdir = this.fileSystem.readdir ? this.fileSystem.readdir.bind(this.fileSystem) : null;
        if (!this._readdir)
          this.readdir = null;
        this._readdirSync = this.fileSystem.readdirSync ? this.fileSystem.readdirSync.bind(this.fileSystem) : null;
        if (!this._readdirSync)
          this.readdirSync = null;
        this._readFile = this.fileSystem.readFile ? this.fileSystem.readFile.bind(this.fileSystem) : null;
        if (!this._readFile)
          this.readFile = null;
        this._readFileSync = this.fileSystem.readFileSync ? this.fileSystem.readFileSync.bind(this.fileSystem) : null;
        if (!this._readFileSync)
          this.readFileSync = null;
        if (this.fileSystem.readJson) {
          this._readJson = this.fileSystem.readJson.bind(this.fileSystem);
        } else if (this.readFile) {
          this._readJson = (path3, callback) => {
            this.readFile(path3, (err, buffer) => {
              if (err)
                return callback(err);
              let data2;
              try {
                data2 = JSON.parse(buffer.toString("utf-8"));
              } catch (e) {
                return callback(e);
              }
              callback(null, data2);
            });
          };
        } else {
          this.readJson = null;
        }
        if (this.fileSystem.readJsonSync) {
          this._readJsonSync = this.fileSystem.readJsonSync.bind(this.fileSystem);
        } else if (this.readFileSync) {
          this._readJsonSync = (path3) => {
            const buffer = this.readFileSync(path3);
            const data2 = JSON.parse(buffer.toString("utf-8"));
            return data2;
          };
        } else {
          this.readJsonSync = null;
        }
        this._readlink = this.fileSystem.readlink ? this.fileSystem.readlink.bind(this.fileSystem) : null;
        if (!this._readlink)
          this.readlink = null;
        this._readlinkSync = this.fileSystem.readlinkSync ? this.fileSystem.readlinkSync.bind(this.fileSystem) : null;
        if (!this._readlinkSync)
          this.readlinkSync = null;
      }
      stat(path3, callback) {
        this._statStorage.provide(path3, this._stat, callback);
      }
      readdir(path3, callback) {
        this._readdirStorage.provide(path3, this._readdir, callback);
      }
      readFile(path3, callback) {
        this._readFileStorage.provide(path3, this._readFile, callback);
      }
      readJson(path3, callback) {
        this._readJsonStorage.provide(path3, this._readJson, callback);
      }
      readlink(path3, callback) {
        this._readlinkStorage.provide(path3, this._readlink, callback);
      }
      statSync(path3) {
        return this._statStorage.provideSync(path3, this._statSync);
      }
      readdirSync(path3) {
        return this._readdirStorage.provideSync(path3, this._readdirSync);
      }
      readFileSync(path3) {
        return this._readFileStorage.provideSync(path3, this._readFileSync);
      }
      readJsonSync(path3) {
        return this._readJsonStorage.provideSync(path3, this._readJsonSync);
      }
      readlinkSync(path3) {
        return this._readlinkStorage.provideSync(path3, this._readlinkSync);
      }
      purge(what) {
        this._statStorage.purge(what);
        this._readdirStorage.purge(what);
        this._readFileStorage.purge(what);
        this._readlinkStorage.purge(what);
        this._readJsonStorage.purge(what);
      }
    };
  }
});

// node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/node.js
var require_node = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/enhanced-resolve@4.5.0/node_modules/enhanced-resolve/lib/node.js"(exports, module) {
    "use strict";
    var ResolverFactory = require_ResolverFactory();
    var NodeJsInputFileSystem = require_NodeJsInputFileSystem();
    var CachedInputFileSystem = require_CachedInputFileSystem();
    var nodeFileSystem = new CachedInputFileSystem(
      new NodeJsInputFileSystem(),
      4e3
    );
    var nodeContext = {
      environments: ["node+es3+es5+process+native"]
    };
    var asyncResolver = ResolverFactory.createResolver({
      extensions: [".js", ".json", ".node"],
      fileSystem: nodeFileSystem
    });
    module.exports = function resolve2(context, path3, request, resolveContext, callback) {
      if (typeof context === "string") {
        callback = resolveContext;
        resolveContext = request;
        request = path3;
        path3 = context;
        context = nodeContext;
      }
      if (typeof callback !== "function") {
        callback = resolveContext;
      }
      asyncResolver.resolve(context, path3, request, resolveContext, callback);
    };
    var syncResolver = ResolverFactory.createResolver({
      extensions: [".js", ".json", ".node"],
      useSyncFileSystemCalls: true,
      fileSystem: nodeFileSystem
    });
    module.exports.sync = function resolveSync2(context, path3, request) {
      if (typeof context === "string") {
        request = path3;
        path3 = context;
        context = nodeContext;
      }
      return syncResolver.resolveSync(context, path3, request);
    };
    var asyncContextResolver = ResolverFactory.createResolver({
      extensions: [".js", ".json", ".node"],
      resolveToContext: true,
      fileSystem: nodeFileSystem
    });
    module.exports.context = function resolveContext(context, path3, request, resolveContext, callback) {
      if (typeof context === "string") {
        callback = resolveContext;
        resolveContext = request;
        request = path3;
        path3 = context;
        context = nodeContext;
      }
      if (typeof callback !== "function") {
        callback = resolveContext;
      }
      asyncContextResolver.resolve(
        context,
        path3,
        request,
        resolveContext,
        callback
      );
    };
    var syncContextResolver = ResolverFactory.createResolver({
      extensions: [".js", ".json", ".node"],
      resolveToContext: true,
      useSyncFileSystemCalls: true,
      fileSystem: nodeFileSystem
    });
    module.exports.context.sync = function resolveContextSync(context, path3, request) {
      if (typeof context === "string") {
        request = path3;
        path3 = context;
        context = nodeContext;
      }
      return syncContextResolver.resolveSync(context, path3, request);
    };
    var asyncLoaderResolver = ResolverFactory.createResolver({
      extensions: [".js", ".json", ".node"],
      moduleExtensions: ["-loader"],
      mainFields: ["loader", "main"],
      fileSystem: nodeFileSystem
    });
    module.exports.loader = function resolveLoader(context, path3, request, resolveContext, callback) {
      if (typeof context === "string") {
        callback = resolveContext;
        resolveContext = request;
        request = path3;
        path3 = context;
        context = nodeContext;
      }
      if (typeof callback !== "function") {
        callback = resolveContext;
      }
      asyncLoaderResolver.resolve(context, path3, request, resolveContext, callback);
    };
    var syncLoaderResolver = ResolverFactory.createResolver({
      extensions: [".js", ".json", ".node"],
      moduleExtensions: ["-loader"],
      mainFields: ["loader", "main"],
      useSyncFileSystemCalls: true,
      fileSystem: nodeFileSystem
    });
    module.exports.loader.sync = function resolveLoaderSync(context, path3, request) {
      if (typeof context === "string") {
        request = path3;
        path3 = context;
        context = nodeContext;
      }
      return syncLoaderResolver.resolveSync(context, path3, request);
    };
    module.exports.create = function create(options) {
      options = Object.assign(
        {
          fileSystem: nodeFileSystem
        },
        options
      );
      const resolver = ResolverFactory.createResolver(options);
      return function(context, path3, request, resolveContext, callback) {
        if (typeof context === "string") {
          callback = resolveContext;
          resolveContext = request;
          request = path3;
          path3 = context;
          context = nodeContext;
        }
        if (typeof callback !== "function") {
          callback = resolveContext;
        }
        resolver.resolve(context, path3, request, resolveContext, callback);
      };
    };
    module.exports.create.sync = function createSync(options) {
      options = Object.assign(
        {
          useSyncFileSystemCalls: true,
          fileSystem: nodeFileSystem
        },
        options
      );
      const resolver = ResolverFactory.createResolver(options);
      return function(context, path3, request) {
        if (typeof context === "string") {
          request = path3;
          path3 = context;
          context = nodeContext;
        }
        return resolver.resolveSync(context, path3, request);
      };
    };
    module.exports.ResolverFactory = ResolverFactory;
    module.exports.NodeJsInputFileSystem = NodeJsInputFileSystem;
    module.exports.CachedInputFileSystem = CachedInputFileSystem;
  }
});

// node_modules/.pnpm/postcss-import-resolver@2.0.0/node_modules/postcss-import-resolver/index.js
var require_postcss_import_resolver = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/postcss-import-resolver@2.0.0/node_modules/postcss-import-resolver/index.js"(exports, module) {
    var {
      NodeJsInputFileSystem,
      CachedInputFileSystem,
      ResolverFactory
    } = require_node();
    module.exports = (config = {}) => {
      const defaultConfig = {
        extensions: [".css"],
        mainFields: ["style", "main"],
        modules: ["node_modules"],
        fileSystem: config.fileSystem ? null : new CachedInputFileSystem(new NodeJsInputFileSystem(), 4e3),
        useSyncFileSystemCalls: true
      };
      const resolver = ResolverFactory.createResolver(
        Object.assign(defaultConfig, config)
      );
      return (id, basedir) => resolver.resolveSync({}, basedir, id);
    };
  }
});

// node_modules/.pnpm/hash-sum@2.0.0/node_modules/hash-sum/hash-sum.js
var require_hash_sum = _chunkI7OK7DX6cjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/hash-sum@2.0.0/node_modules/hash-sum/hash-sum.js"(exports, module) {
    "use strict";
    function pad(hash2, len) {
      while (hash2.length < len) {
        hash2 = "0" + hash2;
      }
      return hash2;
    }
    function fold(hash2, text) {
      var i;
      var chr;
      var len;
      if (text.length === 0) {
        return hash2;
      }
      for (i = 0, len = text.length; i < len; i++) {
        chr = text.charCodeAt(i);
        hash2 = (hash2 << 5) - hash2 + chr;
        hash2 |= 0;
      }
      return hash2 < 0 ? hash2 * -2 : hash2;
    }
    function foldObject(hash2, o, seen) {
      return Object.keys(o).sort().reduce(foldKey, hash2);
      function foldKey(hash3, key) {
        return foldValue(hash3, o[key], key, seen);
      }
    }
    function foldValue(input, value, key, seen) {
      var hash2 = fold(fold(fold(input, key), toString2(value)), typeof value);
      if (value === null) {
        return fold(hash2, "null");
      }
      if (value === void 0) {
        return fold(hash2, "undefined");
      }
      if (typeof value === "object" || typeof value === "function") {
        if (seen.indexOf(value) !== -1) {
          return fold(hash2, "[Circular]" + key);
        }
        seen.push(value);
        var objHash = foldObject(hash2, value, seen);
        if (!("valueOf" in value) || typeof value.valueOf !== "function") {
          return objHash;
        }
        try {
          return fold(objHash, String(value.valueOf()));
        } catch (err) {
          return fold(objHash, "[valueOf exception]" + (err.stack || err.message));
        }
      }
      return fold(hash2, value.toString());
    }
    function toString2(o) {
      return Object.prototype.toString.call(o);
    }
    function sum(o) {
      return pad(foldValue(0, o, "", []).toString(16), 8);
    }
    module.exports = sum;
  }
});

// node_modules/.pnpm/@nuxt+kit@3.0.0_rollup@3.7.3/node_modules/@nuxt/kit/dist/index.mjs
var _fs3 = require('fs'); var _fs4 = _interopRequireDefault2(_fs3);

// node_modules/.pnpm/untyped@1.2.0/node_modules/untyped/dist/shared/untyped.939af307.mjs
function defineUntypedSchema(options) {
  return options;
}
function getType(val) {
  const type = typeof val;
  if (type === "undefined" || val === null) {
    return void 0;
  }
  if (Array.isArray(val)) {
    return "array";
  }
  return type;
}
function isObject(val) {
  return val !== null && !Array.isArray(val) && typeof val === "object";
}
function nonEmpty(arr) {
  return arr.filter(Boolean);
}
function unique(arr) {
  return [...new Set(arr)];
}
function joinPath(a, b = "", sep = ".") {
  return a ? a + sep + b : b;
}
function setValue(obj, path3, val) {
  const keys = path3.split(".");
  const _key = keys.pop();
  for (const key of keys) {
    if (!obj || typeof obj !== "object") {
      return;
    }
    if (!(key in obj)) {
      obj[key] = {};
    }
    obj = obj[key];
  }
  if (_key) {
    if (!obj || typeof obj !== "object") {
      return;
    }
    obj[_key] = val;
  }
}
function getValue(obj, path3) {
  for (const key of path3.split(".")) {
    if (!obj || typeof obj !== "object" || !(key in obj)) {
      return;
    }
    obj = obj[key];
  }
  return obj;
}

// node_modules/.pnpm/untyped@1.2.0/node_modules/untyped/dist/index.mjs
async function resolveSchema(obj, defaults) {
  const schema = await _resolveSchema(obj, "", {
    root: obj,
    defaults,
    resolveCache: {}
  });
  return schema;
}
async function _resolveSchema(input, id, ctx) {
  if (id in ctx.resolveCache) {
    return ctx.resolveCache[id];
  }
  if (!isObject(input)) {
    const schema2 = {
      type: getType(input),
      default: Array.isArray(input) ? [...input] : input
    };
    normalizeSchema(schema2);
    ctx.resolveCache[id] = schema2;
    if (ctx.defaults && getValue(ctx.defaults, id) === void 0) {
      setValue(ctx.defaults, id, schema2.default);
    }
    return schema2;
  }
  const node = { ...input };
  const schema = ctx.resolveCache[id] = {
    ...node.$schema,
    id: "#" + id.replace(/\./g, "/")
  };
  for (const key in node) {
    if (key === "$resolve" || key === "$schema" || key === "$default") {
      continue;
    }
    schema.properties = schema.properties || {};
    if (!schema.properties[key]) {
      const child = schema.properties[key] = await _resolveSchema(
        node[key],
        joinPath(id, key),
        ctx
      );
      if (Array.isArray(child.tags) && child.tags.includes("@required")) {
        schema.required = schema.required || [];
        if (!schema.required.includes(key)) {
          schema.required.push(key);
        }
      }
    }
  }
  if (ctx.defaults) {
    schema.default = getValue(ctx.defaults, id);
  }
  if (schema.default === void 0 && "$default" in node) {
    schema.default = node.$default;
  }
  if (typeof node.$resolve === "function") {
    schema.default = await node.$resolve(schema.default, async (key) => {
      return (await _resolveSchema(getValue(ctx.root, key), key, ctx)).default;
    });
  }
  if (ctx.defaults) {
    setValue(ctx.defaults, id, schema.default);
  }
  if (!schema.type) {
    schema.type = getType(schema.default) || (schema.properties ? "object" : "any");
  }
  normalizeSchema(schema);
  if (ctx.defaults && getValue(ctx.defaults, id) === void 0) {
    setValue(ctx.defaults, id, schema.default);
  }
  return schema;
}
async function applyDefaults(ref2, input) {
  await resolveSchema(ref2, input);
  return input;
}
function normalizeSchema(schema) {
  if (schema.type === "array" && !("items" in schema)) {
    schema.items = {
      type: nonEmpty(unique(schema.default.map((i) => getType(i))))
    };
    if (schema.items.type) {
      if (schema.items.type.length === 0) {
        schema.items.type = "any";
      } else if (schema.items.type.length === 1) {
        schema.items.type = schema.items.type[0];
      }
    }
  }
  if (schema.default === void 0 && ("properties" in schema || schema.type === "object" || schema.type === "any")) {
    const propsWithDefaults = Object.entries(schema.properties || {}).filter(([, prop]) => "default" in prop).map(([key, value]) => [key, value.default]);
    schema.default = Object.fromEntries(propsWithDefaults);
  }
}

// node_modules/.pnpm/@nuxt+kit@3.0.0_rollup@3.7.3/node_modules/@nuxt/kit/dist/index.mjs
var import_consola = _chunkI7OK7DX6cjs.__toESM.call(void 0, require_consola(), 1);

// node_modules/.pnpm/unctx@2.1.1/node_modules/unctx/dist/index.mjs
function createContext() {
  let currentInstance;
  let isSingleton = false;
  const checkConflict = (instance) => {
    if (currentInstance && currentInstance !== instance) {
      throw new Error("Context conflict");
    }
  };
  return {
    use: () => {
      if (currentInstance === void 0) {
        throw new Error("Context is not available");
      }
      return currentInstance;
    },
    tryUse: () => {
      return currentInstance;
    },
    set: (instance, replace) => {
      if (!replace) {
        checkConflict(instance);
      }
      currentInstance = instance;
      isSingleton = true;
    },
    unset: () => {
      currentInstance = void 0;
      isSingleton = false;
    },
    call: (instance, callback) => {
      checkConflict(instance);
      currentInstance = instance;
      try {
        return callback();
      } finally {
        if (!isSingleton) {
          currentInstance = void 0;
        }
      }
    },
    async callAsync(instance, callback) {
      currentInstance = instance;
      const onRestore = () => {
        currentInstance = instance;
      };
      const onLeave = () => currentInstance === instance ? onRestore : void 0;
      asyncHandlers.add(onLeave);
      try {
        const r2 = callback();
        if (!isSingleton) {
          currentInstance = void 0;
        }
        return await r2;
      } finally {
        asyncHandlers.delete(onLeave);
      }
    }
  };
}
function createNamespace() {
  const contexts = {};
  return {
    get(key) {
      if (!contexts[key]) {
        contexts[key] = createContext();
      }
      contexts[key];
      return contexts[key];
    }
  };
}
var _globalThis = typeof globalThis !== "undefined" ? globalThis : typeof self !== "undefined" ? self : typeof global !== "undefined" ? global : typeof window !== "undefined" ? window : {};
var globalKey = "__unctx__";
var defaultNamespace = _globalThis[globalKey] || (_globalThis[globalKey] = createNamespace());
var getContext = (key) => defaultNamespace.get(key);
var asyncHandlersKey = "__unctx_async_handlers__";
var asyncHandlers = _globalThis[asyncHandlersKey] || (_globalThis[asyncHandlersKey] = /* @__PURE__ */ new Set());

// node_modules/.pnpm/@nuxt+kit@3.0.0_rollup@3.7.3/node_modules/@nuxt/kit/dist/index.mjs
var import_satisfies = _chunkI7OK7DX6cjs.__toESM.call(void 0, require_satisfies(), 1);
var import_lodash = _chunkI7OK7DX6cjs.__toESM.call(void 0, require_lodash3(), 1);

// node_modules/.pnpm/knitwork@1.0.0/node_modules/knitwork/dist/index.mjs
function genString(input, options = {}) {
  const string_ = JSON.stringify(input);
  if (!options.singleQuotes) {
    return JSON.stringify(input);
  }
  return `'${escapeString(string_)}'`;
}
var NEEDS_ESCAPE_RE = /[\n\r'\\\u2028\u2029]/;
var QUOTE_NEWLINE_RE = /([\n\r'\u2028\u2029])/g;
var BACKSLASH_RE = /\\/g;
function escapeString(id) {
  if (!NEEDS_ESCAPE_RE.test(id)) {
    return id;
  }
  return id.replace(BACKSLASH_RE, "\\\\").replace(QUOTE_NEWLINE_RE, "\\$1");
}
function genImport(specifier, imports, options = {}) {
  return _genStatement("import", specifier, imports, options);
}
function _genStatement(type, specifier, names, options = {}) {
  const specifierString = genString(specifier, options);
  if (!names) {
    return `${type} ${specifierString};`;
  }
  const nameArray = Array.isArray(names);
  const _names = (nameArray ? names : [names]).map((index2) => {
    if (typeof index2 === "string") {
      return { name: index2 };
    }
    if (index2.name === index2.as) {
      index2 = { name: index2.name };
    }
    return index2;
  });
  const namesString = _names.map((index2) => index2.as ? `${index2.name} as ${index2.as}` : index2.name).join(", ");
  if (nameArray) {
    return `${type} { ${namesString} } from ${genString(specifier, options)}${_genAssertClause(type, options.assert)};`;
  }
  return `${type} ${namesString} from ${genString(specifier, options)}${_genAssertClause(type, options.assert)};`;
}
function _genAssertClause(type, assert2) {
  if (type === "import type" || type === "export type") {
    return "";
  }
  if (!assert2 || typeof assert2 !== "object") {
    return "";
  }
  return ` assert { type: ${genString(assert2.type)} }`;
}
function genDynamicImport(specifier, options = {}) {
  const commentString = options.comment ? ` /* ${options.comment} */` : "";
  const wrapperString = options.wrapper === false ? "" : "() => ";
  const ineropString = options.interopDefault ? ".then(m => m.default || m)" : "";
  const optionsString = _genDynamicImportOptions(options);
  return `${wrapperString}import(${genString(specifier, options)}${commentString}${optionsString})${ineropString}`;
}
function _genDynamicImportOptions(options = {}) {
  return options.assert && typeof options.assert === "object" ? `, { assert: { type: ${genString(options.assert.type)} } }` : "";
}
function genSafeVariableName(name) {
  if (reservedNames.has(name)) {
    return `_${name}`;
  }
  return name.replace(/^\d/, (r2) => `_${r2}`).replace(/\W/g, (r2) => "_" + r2.charCodeAt(0));
}
var reservedNames = /* @__PURE__ */ new Set([
  "Infinity",
  "NaN",
  "arguments",
  "await",
  "break",
  "case",
  "catch",
  "class",
  "const",
  "continue",
  "debugger",
  "default",
  "delete",
  "do",
  "else",
  "enum",
  "eval",
  "export",
  "extends",
  "false",
  "finally",
  "for",
  "function",
  "if",
  "implements",
  "import",
  "in",
  "instanceof",
  "interface",
  "let",
  "new",
  "null",
  "package",
  "private",
  "protected",
  "public",
  "return",
  "static",
  "super",
  "switch",
  "this",
  "throw",
  "true",
  "try",
  "typeof",
  "undefined",
  "var",
  "void",
  "while",
  "with",
  "yield"
]);

// node_modules/.pnpm/@nuxt+kit@3.0.0_rollup@3.7.3/node_modules/@nuxt/kit/dist/index.mjs
var _url2 = require('url');

// node_modules/.pnpm/acorn@8.8.1/node_modules/acorn/dist/acorn.mjs
var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u0898-\u089F\u08CA-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3C\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1715\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u180F-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF-\u1ACE\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
var reservedWords = {
  3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
  5: "class enum extends super const export import",
  6: "enum",
  strict: "implements interface let package private protected public static yield",
  strictBind: "eval arguments"
};
var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
var keywords$1 = {
  5: ecma5AndLessKeywords,
  "5module": ecma5AndLessKeywords + " export import",
  6: ecma5AndLessKeywords + " const class extends export import super"
};
var keywordRelationalOperator = /^in(stanceof)?$/;
var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
function isInAstralSet(code, set) {
  var pos = 65536;
  for (var i = 0; i < set.length; i += 2) {
    pos += set[i];
    if (pos > code) {
      return false;
    }
    pos += set[i + 1];
    if (pos >= code) {
      return true;
    }
  }
}
function isIdentifierStart(code, astral) {
  if (code < 65) {
    return code === 36;
  }
  if (code < 91) {
    return true;
  }
  if (code < 97) {
    return code === 95;
  }
  if (code < 123) {
    return true;
  }
  if (code <= 65535) {
    return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
  }
  if (astral === false) {
    return false;
  }
  return isInAstralSet(code, astralIdentifierStartCodes);
}
function isIdentifierChar(code, astral) {
  if (code < 48) {
    return code === 36;
  }
  if (code < 58) {
    return true;
  }
  if (code < 65) {
    return false;
  }
  if (code < 91) {
    return true;
  }
  if (code < 97) {
    return code === 95;
  }
  if (code < 123) {
    return true;
  }
  if (code <= 65535) {
    return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
  }
  if (astral === false) {
    return false;
  }
  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
}
var TokenType = function TokenType2(label, conf) {
  if (conf === void 0)
    conf = {};
  this.label = label;
  this.keyword = conf.keyword;
  this.beforeExpr = !!conf.beforeExpr;
  this.startsExpr = !!conf.startsExpr;
  this.isLoop = !!conf.isLoop;
  this.isAssign = !!conf.isAssign;
  this.prefix = !!conf.prefix;
  this.postfix = !!conf.postfix;
  this.binop = conf.binop || null;
  this.updateContext = null;
};
function binop(name, prec) {
  return new TokenType(name, { beforeExpr: true, binop: prec });
}
var beforeExpr = { beforeExpr: true };
var startsExpr = { startsExpr: true };
var keywords = {};
function kw(name, options) {
  if (options === void 0)
    options = {};
  options.keyword = name;
  return keywords[name] = new TokenType(name, options);
}
var types$1 = {
  num: new TokenType("num", startsExpr),
  regexp: new TokenType("regexp", startsExpr),
  string: new TokenType("string", startsExpr),
  name: new TokenType("name", startsExpr),
  privateId: new TokenType("privateId", startsExpr),
  eof: new TokenType("eof"),
  bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
  bracketR: new TokenType("]"),
  braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
  braceR: new TokenType("}"),
  parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
  parenR: new TokenType(")"),
  comma: new TokenType(",", beforeExpr),
  semi: new TokenType(";", beforeExpr),
  colon: new TokenType(":", beforeExpr),
  dot: new TokenType("."),
  question: new TokenType("?", beforeExpr),
  questionDot: new TokenType("?."),
  arrow: new TokenType("=>", beforeExpr),
  template: new TokenType("template"),
  invalidTemplate: new TokenType("invalidTemplate"),
  ellipsis: new TokenType("...", beforeExpr),
  backQuote: new TokenType("`", startsExpr),
  dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
  eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
  assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
  incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
  prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }),
  logicalOR: binop("||", 1),
  logicalAND: binop("&&", 2),
  bitwiseOR: binop("|", 3),
  bitwiseXOR: binop("^", 4),
  bitwiseAND: binop("&", 5),
  equality: binop("==/!=/===/!==", 6),
  relational: binop("</>/<=/>=", 7),
  bitShift: binop("<</>>/>>>", 8),
  plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
  modulo: binop("%", 10),
  star: binop("*", 10),
  slash: binop("/", 10),
  starstar: new TokenType("**", { beforeExpr: true }),
  coalesce: binop("??", 1),
  _break: kw("break"),
  _case: kw("case", beforeExpr),
  _catch: kw("catch"),
  _continue: kw("continue"),
  _debugger: kw("debugger"),
  _default: kw("default", beforeExpr),
  _do: kw("do", { isLoop: true, beforeExpr: true }),
  _else: kw("else", beforeExpr),
  _finally: kw("finally"),
  _for: kw("for", { isLoop: true }),
  _function: kw("function", startsExpr),
  _if: kw("if"),
  _return: kw("return", beforeExpr),
  _switch: kw("switch"),
  _throw: kw("throw", beforeExpr),
  _try: kw("try"),
  _var: kw("var"),
  _const: kw("const"),
  _while: kw("while", { isLoop: true }),
  _with: kw("with"),
  _new: kw("new", { beforeExpr: true, startsExpr: true }),
  _this: kw("this", startsExpr),
  _super: kw("super", startsExpr),
  _class: kw("class", startsExpr),
  _extends: kw("extends", beforeExpr),
  _export: kw("export"),
  _import: kw("import", startsExpr),
  _null: kw("null", startsExpr),
  _true: kw("true", startsExpr),
  _false: kw("false", startsExpr),
  _in: kw("in", { beforeExpr: true, binop: 7 }),
  _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }),
  _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
  _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }),
  _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true })
};
var lineBreak = /\r\n?|\n|\u2028|\u2029/;
var lineBreakG = new RegExp(lineBreak.source, "g");
function isNewLine(code) {
  return code === 10 || code === 13 || code === 8232 || code === 8233;
}
function nextLineBreak(code, from, end) {
  if (end === void 0)
    end = code.length;
  for (var i = from; i < end; i++) {
    var next = code.charCodeAt(i);
    if (isNewLine(next)) {
      return i < end - 1 && next === 13 && code.charCodeAt(i + 1) === 10 ? i + 2 : i + 1;
    }
  }
  return -1;
}
var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
var ref = Object.prototype;
var hasOwnProperty = ref.hasOwnProperty;
var toString = ref.toString;
var hasOwn = Object.hasOwn || function(obj, propName) {
  return hasOwnProperty.call(obj, propName);
};
var isArray = Array.isArray || function(obj) {
  return toString.call(obj) === "[object Array]";
};
function wordsRegexp(words) {
  return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
}
function codePointToString(code) {
  if (code <= 65535) {
    return String.fromCharCode(code);
  }
  code -= 65536;
  return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
}
var loneSurrogate = /(?:[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/;
var Position = function Position2(line, col) {
  this.line = line;
  this.column = col;
};
Position.prototype.offset = function offset(n) {
  return new Position(this.line, this.column + n);
};
var SourceLocation = function SourceLocation2(p, start, end) {
  this.start = start;
  this.end = end;
  if (p.sourceFile !== null) {
    this.source = p.sourceFile;
  }
};
function getLineInfo(input, offset2) {
  for (var line = 1, cur = 0; ; ) {
    var nextBreak = nextLineBreak(input, cur, offset2);
    if (nextBreak < 0) {
      return new Position(line, offset2 - cur);
    }
    ++line;
    cur = nextBreak;
  }
}
var defaultOptions = {
  ecmaVersion: null,
  sourceType: "script",
  onInsertedSemicolon: null,
  onTrailingComma: null,
  allowReserved: null,
  allowReturnOutsideFunction: false,
  allowImportExportEverywhere: false,
  allowAwaitOutsideFunction: null,
  allowSuperOutsideMethod: null,
  allowHashBang: false,
  locations: false,
  onToken: null,
  onComment: null,
  ranges: false,
  program: null,
  sourceFile: null,
  directSourceFile: null,
  preserveParens: false
};
var warnedAboutEcmaVersion = false;
function getOptions(opts) {
  var options = {};
  for (var opt in defaultOptions) {
    options[opt] = opts && hasOwn(opts, opt) ? opts[opt] : defaultOptions[opt];
  }
  if (options.ecmaVersion === "latest") {
    options.ecmaVersion = 1e8;
  } else if (options.ecmaVersion == null) {
    if (!warnedAboutEcmaVersion && typeof console === "object" && console.warn) {
      warnedAboutEcmaVersion = true;
      console.warn("Since Acorn 8.0.0, options.ecmaVersion is required.\nDefaulting to 2020, but this will stop working in the future.");
    }
    options.ecmaVersion = 11;
  } else if (options.ecmaVersion >= 2015) {
    options.ecmaVersion -= 2009;
  }
  if (options.allowReserved == null) {
    options.allowReserved = options.ecmaVersion < 5;
  }
  if (opts.allowHashBang == null) {
    options.allowHashBang = options.ecmaVersion >= 14;
  }
  if (isArray(options.onToken)) {
    var tokens = options.onToken;
    options.onToken = function(token) {
      return tokens.push(token);
    };
  }
  if (isArray(options.onComment)) {
    options.onComment = pushComment(options, options.onComment);
  }
  return options;
}
function pushComment(options, array) {
  return function(block, text, start, end, startLoc, endLoc) {
    var comment = {
      type: block ? "Block" : "Line",
      value: text,
      start,
      end
    };
    if (options.locations) {
      comment.loc = new SourceLocation(this, startLoc, endLoc);
    }
    if (options.ranges) {
      comment.range = [start, end];
    }
    array.push(comment);
  };
}
var SCOPE_TOP = 1;
var SCOPE_FUNCTION = 2;
var SCOPE_ASYNC = 4;
var SCOPE_GENERATOR = 8;
var SCOPE_ARROW = 16;
var SCOPE_SIMPLE_CATCH = 32;
var SCOPE_SUPER = 64;
var SCOPE_DIRECT_SUPER = 128;
var SCOPE_CLASS_STATIC_BLOCK = 256;
var SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK;
function functionFlags(async, generator) {
  return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
}
var BIND_NONE = 0;
var BIND_VAR = 1;
var BIND_LEXICAL = 2;
var BIND_FUNCTION = 3;
var BIND_SIMPLE_CATCH = 4;
var BIND_OUTSIDE = 5;
var Parser = function Parser2(options, input, startPos) {
  this.options = options = getOptions(options);
  this.sourceFile = options.sourceFile;
  this.keywords = wordsRegexp(keywords$1[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
  var reserved = "";
  if (options.allowReserved !== true) {
    reserved = reservedWords[options.ecmaVersion >= 6 ? 6 : options.ecmaVersion === 5 ? 5 : 3];
    if (options.sourceType === "module") {
      reserved += " await";
    }
  }
  this.reservedWords = wordsRegexp(reserved);
  var reservedStrict = (reserved ? reserved + " " : "") + reservedWords.strict;
  this.reservedWordsStrict = wordsRegexp(reservedStrict);
  this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords.strictBind);
  this.input = String(input);
  this.containsEsc = false;
  if (startPos) {
    this.pos = startPos;
    this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
    this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
  } else {
    this.pos = this.lineStart = 0;
    this.curLine = 1;
  }
  this.type = types$1.eof;
  this.value = null;
  this.start = this.end = this.pos;
  this.startLoc = this.endLoc = this.curPosition();
  this.lastTokEndLoc = this.lastTokStartLoc = null;
  this.lastTokStart = this.lastTokEnd = this.pos;
  this.context = this.initialContext();
  this.exprAllowed = true;
  this.inModule = options.sourceType === "module";
  this.strict = this.inModule || this.strictDirective(this.pos);
  this.potentialArrowAt = -1;
  this.potentialArrowInForAwait = false;
  this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
  this.labels = [];
  this.undefinedExports = /* @__PURE__ */ Object.create(null);
  if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
    this.skipLineComment(2);
  }
  this.scopeStack = [];
  this.enterScope(SCOPE_TOP);
  this.regexpState = null;
  this.privateNameStack = [];
};
var prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, canAwait: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true }, allowNewDotTarget: { configurable: true }, inClassStaticBlock: { configurable: true } };
Parser.prototype.parse = function parse() {
  var node = this.options.program || this.startNode();
  this.nextToken();
  return this.parseTopLevel(node);
};
prototypeAccessors.inFunction.get = function() {
  return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
};
prototypeAccessors.inGenerator.get = function() {
  return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0 && !this.currentVarScope().inClassFieldInit;
};
prototypeAccessors.inAsync.get = function() {
  return (this.currentVarScope().flags & SCOPE_ASYNC) > 0 && !this.currentVarScope().inClassFieldInit;
};
prototypeAccessors.canAwait.get = function() {
  for (var i = this.scopeStack.length - 1; i >= 0; i--) {
    var scope = this.scopeStack[i];
    if (scope.inClassFieldInit || scope.flags & SCOPE_CLASS_STATIC_BLOCK) {
      return false;
    }
    if (scope.flags & SCOPE_FUNCTION) {
      return (scope.flags & SCOPE_ASYNC) > 0;
    }
  }
  return this.inModule && this.options.ecmaVersion >= 13 || this.options.allowAwaitOutsideFunction;
};
prototypeAccessors.allowSuper.get = function() {
  var ref2 = this.currentThisScope();
  var flags = ref2.flags;
  var inClassFieldInit = ref2.inClassFieldInit;
  return (flags & SCOPE_SUPER) > 0 || inClassFieldInit || this.options.allowSuperOutsideMethod;
};
prototypeAccessors.allowDirectSuper.get = function() {
  return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
};
prototypeAccessors.treatFunctionsAsVar.get = function() {
  return this.treatFunctionsAsVarInScope(this.currentScope());
};
prototypeAccessors.allowNewDotTarget.get = function() {
  var ref2 = this.currentThisScope();
  var flags = ref2.flags;
  var inClassFieldInit = ref2.inClassFieldInit;
  return (flags & (SCOPE_FUNCTION | SCOPE_CLASS_STATIC_BLOCK)) > 0 || inClassFieldInit;
};
prototypeAccessors.inClassStaticBlock.get = function() {
  return (this.currentVarScope().flags & SCOPE_CLASS_STATIC_BLOCK) > 0;
};
Parser.extend = function extend() {
  var plugins = [], len = arguments.length;
  while (len--)
    plugins[len] = arguments[len];
  var cls = this;
  for (var i = 0; i < plugins.length; i++) {
    cls = plugins[i](cls);
  }
  return cls;
};
Parser.parse = function parse2(input, options) {
  return new this(options, input).parse();
};
Parser.parseExpressionAt = function parseExpressionAt(input, pos, options) {
  var parser = new this(options, input, pos);
  parser.nextToken();
  return parser.parseExpression();
};
Parser.tokenizer = function tokenizer(input, options) {
  return new this(options, input);
};
Object.defineProperties(Parser.prototype, prototypeAccessors);
var pp$9 = Parser.prototype;
var literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
pp$9.strictDirective = function(start) {
  if (this.options.ecmaVersion < 5) {
    return false;
  }
  for (; ; ) {
    skipWhiteSpace.lastIndex = start;
    start += skipWhiteSpace.exec(this.input)[0].length;
    var match = literal.exec(this.input.slice(start));
    if (!match) {
      return false;
    }
    if ((match[1] || match[2]) === "use strict") {
      skipWhiteSpace.lastIndex = start + match[0].length;
      var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
      var next = this.input.charAt(end);
      return next === ";" || next === "}" || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "=");
    }
    start += match[0].length;
    skipWhiteSpace.lastIndex = start;
    start += skipWhiteSpace.exec(this.input)[0].length;
    if (this.input[start] === ";") {
      start++;
    }
  }
};
pp$9.eat = function(type) {
  if (this.type === type) {
    this.next();
    return true;
  } else {
    return false;
  }
};
pp$9.isContextual = function(name) {
  return this.type === types$1.name && this.value === name && !this.containsEsc;
};
pp$9.eatContextual = function(name) {
  if (!this.isContextual(name)) {
    return false;
  }
  this.next();
  return true;
};
pp$9.expectContextual = function(name) {
  if (!this.eatContextual(name)) {
    this.unexpected();
  }
};
pp$9.canInsertSemicolon = function() {
  return this.type === types$1.eof || this.type === types$1.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
};
pp$9.insertSemicolon = function() {
  if (this.canInsertSemicolon()) {
    if (this.options.onInsertedSemicolon) {
      this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
    }
    return true;
  }
};
pp$9.semicolon = function() {
  if (!this.eat(types$1.semi) && !this.insertSemicolon()) {
    this.unexpected();
  }
};
pp$9.afterTrailingComma = function(tokType, notNext) {
  if (this.type === tokType) {
    if (this.options.onTrailingComma) {
      this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
    }
    if (!notNext) {
      this.next();
    }
    return true;
  }
};
pp$9.expect = function(type) {
  this.eat(type) || this.unexpected();
};
pp$9.unexpected = function(pos) {
  this.raise(pos != null ? pos : this.start, "Unexpected token");
};
var DestructuringErrors = function DestructuringErrors2() {
  this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
};
pp$9.checkPatternErrors = function(refDestructuringErrors, isAssign) {
  if (!refDestructuringErrors) {
    return;
  }
  if (refDestructuringErrors.trailingComma > -1) {
    this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
  }
  var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
  if (parens > -1) {
    this.raiseRecoverable(parens, isAssign ? "Assigning to rvalue" : "Parenthesized pattern");
  }
};
pp$9.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
  if (!refDestructuringErrors) {
    return false;
  }
  var shorthandAssign = refDestructuringErrors.shorthandAssign;
  var doubleProto = refDestructuringErrors.doubleProto;
  if (!andThrow) {
    return shorthandAssign >= 0 || doubleProto >= 0;
  }
  if (shorthandAssign >= 0) {
    this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
  }
  if (doubleProto >= 0) {
    this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
  }
};
pp$9.checkYieldAwaitInDefaultParams = function() {
  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
    this.raise(this.yieldPos, "Yield expression cannot be a default value");
  }
  if (this.awaitPos) {
    this.raise(this.awaitPos, "Await expression cannot be a default value");
  }
};
pp$9.isSimpleAssignTarget = function(expr) {
  if (expr.type === "ParenthesizedExpression") {
    return this.isSimpleAssignTarget(expr.expression);
  }
  return expr.type === "Identifier" || expr.type === "MemberExpression";
};
var pp$8 = Parser.prototype;
pp$8.parseTopLevel = function(node) {
  var exports = /* @__PURE__ */ Object.create(null);
  if (!node.body) {
    node.body = [];
  }
  while (this.type !== types$1.eof) {
    var stmt = this.parseStatement(null, true, exports);
    node.body.push(stmt);
  }
  if (this.inModule) {
    for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1) {
      var name = list[i];
      this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
    }
  }
  this.adaptDirectivePrologue(node.body);
  this.next();
  node.sourceType = this.options.sourceType;
  return this.finishNode(node, "Program");
};
var loopLabel = { kind: "loop" };
var switchLabel = { kind: "switch" };
pp$8.isLet = function(context) {
  if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
    return false;
  }
  skipWhiteSpace.lastIndex = this.pos;
  var skip = skipWhiteSpace.exec(this.input);
  var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
  if (nextCh === 91 || nextCh === 92 || nextCh > 55295 && nextCh < 56320) {
    return true;
  }
  if (context) {
    return false;
  }
  if (nextCh === 123) {
    return true;
  }
  if (isIdentifierStart(nextCh, true)) {
    var pos = next + 1;
    while (isIdentifierChar(nextCh = this.input.charCodeAt(pos), true)) {
      ++pos;
    }
    if (nextCh === 92 || nextCh > 55295 && nextCh < 56320) {
      return true;
    }
    var ident = this.input.slice(next, pos);
    if (!keywordRelationalOperator.test(ident)) {
      return true;
    }
  }
  return false;
};
pp$8.isAsyncFunction = function() {
  if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
    return false;
  }
  skipWhiteSpace.lastIndex = this.pos;
  var skip = skipWhiteSpace.exec(this.input);
  var next = this.pos + skip[0].length, after;
  return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !(isIdentifierChar(after = this.input.charCodeAt(next + 8)) || after > 55295 && after < 56320));
};
pp$8.parseStatement = function(context, topLevel, exports) {
  var starttype = this.type, node = this.startNode(), kind;
  if (this.isLet(context)) {
    starttype = types$1._var;
    kind = "let";
  }
  switch (starttype) {
    case types$1._break:
    case types$1._continue:
      return this.parseBreakContinueStatement(node, starttype.keyword);
    case types$1._debugger:
      return this.parseDebuggerStatement(node);
    case types$1._do:
      return this.parseDoStatement(node);
    case types$1._for:
      return this.parseForStatement(node);
    case types$1._function:
      if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) {
        this.unexpected();
      }
      return this.parseFunctionStatement(node, false, !context);
    case types$1._class:
      if (context) {
        this.unexpected();
      }
      return this.parseClass(node, true);
    case types$1._if:
      return this.parseIfStatement(node);
    case types$1._return:
      return this.parseReturnStatement(node);
    case types$1._switch:
      return this.parseSwitchStatement(node);
    case types$1._throw:
      return this.parseThrowStatement(node);
    case types$1._try:
      return this.parseTryStatement(node);
    case types$1._const:
    case types$1._var:
      kind = kind || this.value;
      if (context && kind !== "var") {
        this.unexpected();
      }
      return this.parseVarStatement(node, kind);
    case types$1._while:
      return this.parseWhileStatement(node);
    case types$1._with:
      return this.parseWithStatement(node);
    case types$1.braceL:
      return this.parseBlock(true, node);
    case types$1.semi:
      return this.parseEmptyStatement(node);
    case types$1._export:
    case types$1._import:
      if (this.options.ecmaVersion > 10 && starttype === types$1._import) {
        skipWhiteSpace.lastIndex = this.pos;
        var skip = skipWhiteSpace.exec(this.input);
        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
        if (nextCh === 40 || nextCh === 46) {
          return this.parseExpressionStatement(node, this.parseExpression());
        }
      }
      if (!this.options.allowImportExportEverywhere) {
        if (!topLevel) {
          this.raise(this.start, "'import' and 'export' may only appear at the top level");
        }
        if (!this.inModule) {
          this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
        }
      }
      return starttype === types$1._import ? this.parseImport(node) : this.parseExport(node, exports);
    default:
      if (this.isAsyncFunction()) {
        if (context) {
          this.unexpected();
        }
        this.next();
        return this.parseFunctionStatement(node, true, !context);
      }
      var maybeName = this.value, expr = this.parseExpression();
      if (starttype === types$1.name && expr.type === "Identifier" && this.eat(types$1.colon)) {
        return this.parseLabeledStatement(node, maybeName, expr, context);
      } else {
        return this.parseExpressionStatement(node, expr);
      }
  }
};
pp$8.parseBreakContinueStatement = function(node, keyword) {
  var isBreak = keyword === "break";
  this.next();
  if (this.eat(types$1.semi) || this.insertSemicolon()) {
    node.label = null;
  } else if (this.type !== types$1.name) {
    this.unexpected();
  } else {
    node.label = this.parseIdent();
    this.semicolon();
  }
  var i = 0;
  for (; i < this.labels.length; ++i) {
    var lab = this.labels[i];
    if (node.label == null || lab.name === node.label.name) {
      if (lab.kind != null && (isBreak || lab.kind === "loop")) {
        break;
      }
      if (node.label && isBreak) {
        break;
      }
    }
  }
  if (i === this.labels.length) {
    this.raise(node.start, "Unsyntactic " + keyword);
  }
  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
};
pp$8.parseDebuggerStatement = function(node) {
  this.next();
  this.semicolon();
  return this.finishNode(node, "DebuggerStatement");
};
pp$8.parseDoStatement = function(node) {
  this.next();
  this.labels.push(loopLabel);
  node.body = this.parseStatement("do");
  this.labels.pop();
  this.expect(types$1._while);
  node.test = this.parseParenExpression();
  if (this.options.ecmaVersion >= 6) {
    this.eat(types$1.semi);
  } else {
    this.semicolon();
  }
  return this.finishNode(node, "DoWhileStatement");
};
pp$8.parseForStatement = function(node) {
  this.next();
  var awaitAt = this.options.ecmaVersion >= 9 && this.canAwait && this.eatContextual("await") ? this.lastTokStart : -1;
  this.labels.push(loopLabel);
  this.enterScope(0);
  this.expect(types$1.parenL);
  if (this.type === types$1.semi) {
    if (awaitAt > -1) {
      this.unexpected(awaitAt);
    }
    return this.parseFor(node, null);
  }
  var isLet = this.isLet();
  if (this.type === types$1._var || this.type === types$1._const || isLet) {
    var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
    this.next();
    this.parseVar(init$1, true, kind);
    this.finishNode(init$1, "VariableDeclaration");
    if ((this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
      if (this.options.ecmaVersion >= 9) {
        if (this.type === types$1._in) {
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
        } else {
          node.await = awaitAt > -1;
        }
      }
      return this.parseForIn(node, init$1);
    }
    if (awaitAt > -1) {
      this.unexpected(awaitAt);
    }
    return this.parseFor(node, init$1);
  }
  var startsWithLet = this.isContextual("let"), isForOf = false;
  var refDestructuringErrors = new DestructuringErrors();
  var init = this.parseExpression(awaitAt > -1 ? "await" : true, refDestructuringErrors);
  if (this.type === types$1._in || (isForOf = this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
    if (this.options.ecmaVersion >= 9) {
      if (this.type === types$1._in) {
        if (awaitAt > -1) {
          this.unexpected(awaitAt);
        }
      } else {
        node.await = awaitAt > -1;
      }
    }
    if (startsWithLet && isForOf) {
      this.raise(init.start, "The left-hand side of a for-of loop may not start with 'let'.");
    }
    this.toAssignable(init, false, refDestructuringErrors);
    this.checkLValPattern(init);
    return this.parseForIn(node, init);
  } else {
    this.checkExpressionErrors(refDestructuringErrors, true);
  }
  if (awaitAt > -1) {
    this.unexpected(awaitAt);
  }
  return this.parseFor(node, init);
};
pp$8.parseFunctionStatement = function(node, isAsync, declarationPosition) {
  this.next();
  return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
};
pp$8.parseIfStatement = function(node) {
  this.next();
  node.test = this.parseParenExpression();
  node.consequent = this.parseStatement("if");
  node.alternate = this.eat(types$1._else) ? this.parseStatement("if") : null;
  return this.finishNode(node, "IfStatement");
};
pp$8.parseReturnStatement = function(node) {
  if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
    this.raise(this.start, "'return' outside of function");
  }
  this.next();
  if (this.eat(types$1.semi) || this.insertSemicolon()) {
    node.argument = null;
  } else {
    node.argument = this.parseExpression();
    this.semicolon();
  }
  return this.finishNode(node, "ReturnStatement");
};
pp$8.parseSwitchStatement = function(node) {
  this.next();
  node.discriminant = this.parseParenExpression();
  node.cases = [];
  this.expect(types$1.braceL);
  this.labels.push(switchLabel);
  this.enterScope(0);
  var cur;
  for (var sawDefault = false; this.type !== types$1.braceR; ) {
    if (this.type === types$1._case || this.type === types$1._default) {
      var isCase = this.type === types$1._case;
      if (cur) {
        this.finishNode(cur, "SwitchCase");
      }
      node.cases.push(cur = this.startNode());
      cur.consequent = [];
      this.next();
      if (isCase) {
        cur.test = this.parseExpression();
      } else {
        if (sawDefault) {
          this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
        }
        sawDefault = true;
        cur.test = null;
      }
      this.expect(types$1.colon);
    } else {
      if (!cur) {
        this.unexpected();
      }
      cur.consequent.push(this.parseStatement(null));
    }
  }
  this.exitScope();
  if (cur) {
    this.finishNode(cur, "SwitchCase");
  }
  this.next();
  this.labels.pop();
  return this.finishNode(node, "SwitchStatement");
};
pp$8.parseThrowStatement = function(node) {
  this.next();
  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
    this.raise(this.lastTokEnd, "Illegal newline after throw");
  }
  node.argument = this.parseExpression();
  this.semicolon();
  return this.finishNode(node, "ThrowStatement");
};
var empty$1 = [];
pp$8.parseTryStatement = function(node) {
  this.next();
  node.block = this.parseBlock();
  node.handler = null;
  if (this.type === types$1._catch) {
    var clause = this.startNode();
    this.next();
    if (this.eat(types$1.parenL)) {
      clause.param = this.parseBindingAtom();
      var simple = clause.param.type === "Identifier";
      this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
      this.checkLValPattern(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
      this.expect(types$1.parenR);
    } else {
      if (this.options.ecmaVersion < 10) {
        this.unexpected();
      }
      clause.param = null;
      this.enterScope(0);
    }
    clause.body = this.parseBlock(false);
    this.exitScope();
    node.handler = this.finishNode(clause, "CatchClause");
  }
  node.finalizer = this.eat(types$1._finally) ? this.parseBlock() : null;
  if (!node.handler && !node.finalizer) {
    this.raise(node.start, "Missing catch or finally clause");
  }
  return this.finishNode(node, "TryStatement");
};
pp$8.parseVarStatement = function(node, kind) {
  this.next();
  this.parseVar(node, false, kind);
  this.semicolon();
  return this.finishNode(node, "VariableDeclaration");
};
pp$8.parseWhileStatement = function(node) {
  this.next();
  node.test = this.parseParenExpression();
  this.labels.push(loopLabel);
  node.body = this.parseStatement("while");
  this.labels.pop();
  return this.finishNode(node, "WhileStatement");
};
pp$8.parseWithStatement = function(node) {
  if (this.strict) {
    this.raise(this.start, "'with' in strict mode");
  }
  this.next();
  node.object = this.parseParenExpression();
  node.body = this.parseStatement("with");
  return this.finishNode(node, "WithStatement");
};
pp$8.parseEmptyStatement = function(node) {
  this.next();
  return this.finishNode(node, "EmptyStatement");
};
pp$8.parseLabeledStatement = function(node, maybeName, expr, context) {
  for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1) {
    var label = list[i$1];
    if (label.name === maybeName) {
      this.raise(expr.start, "Label '" + maybeName + "' is already declared");
    }
  }
  var kind = this.type.isLoop ? "loop" : this.type === types$1._switch ? "switch" : null;
  for (var i = this.labels.length - 1; i >= 0; i--) {
    var label$1 = this.labels[i];
    if (label$1.statementStart === node.start) {
      label$1.statementStart = this.start;
      label$1.kind = kind;
    } else {
      break;
    }
  }
  this.labels.push({ name: maybeName, kind, statementStart: this.start });
  node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
  this.labels.pop();
  node.label = expr;
  return this.finishNode(node, "LabeledStatement");
};
pp$8.parseExpressionStatement = function(node, expr) {
  node.expression = expr;
  this.semicolon();
  return this.finishNode(node, "ExpressionStatement");
};
pp$8.parseBlock = function(createNewLexicalScope, node, exitStrict) {
  if (createNewLexicalScope === void 0)
    createNewLexicalScope = true;
  if (node === void 0)
    node = this.startNode();
  node.body = [];
  this.expect(types$1.braceL);
  if (createNewLexicalScope) {
    this.enterScope(0);
  }
  while (this.type !== types$1.braceR) {
    var stmt = this.parseStatement(null);
    node.body.push(stmt);
  }
  if (exitStrict) {
    this.strict = false;
  }
  this.next();
  if (createNewLexicalScope) {
    this.exitScope();
  }
  return this.finishNode(node, "BlockStatement");
};
pp$8.parseFor = function(node, init) {
  node.init = init;
  this.expect(types$1.semi);
  node.test = this.type === types$1.semi ? null : this.parseExpression();
  this.expect(types$1.semi);
  node.update = this.type === types$1.parenR ? null : this.parseExpression();
  this.expect(types$1.parenR);
  node.body = this.parseStatement("for");
  this.exitScope();
  this.labels.pop();
  return this.finishNode(node, "ForStatement");
};
pp$8.parseForIn = function(node, init) {
  var isForIn = this.type === types$1._in;
  this.next();
  if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
    this.raise(
      init.start,
      (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer"
    );
  }
  node.left = init;
  node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
  this.expect(types$1.parenR);
  node.body = this.parseStatement("for");
  this.exitScope();
  this.labels.pop();
  return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
};
pp$8.parseVar = function(node, isFor, kind) {
  node.declarations = [];
  node.kind = kind;
  for (; ; ) {
    var decl = this.startNode();
    this.parseVarId(decl, kind);
    if (this.eat(types$1.eq)) {
      decl.init = this.parseMaybeAssign(isFor);
    } else if (kind === "const" && !(this.type === types$1._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
      this.unexpected();
    } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types$1._in || this.isContextual("of")))) {
      this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
    } else {
      decl.init = null;
    }
    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
    if (!this.eat(types$1.comma)) {
      break;
    }
  }
  return node;
};
pp$8.parseVarId = function(decl, kind) {
  decl.id = this.parseBindingAtom();
  this.checkLValPattern(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
};
var FUNC_STATEMENT = 1;
var FUNC_HANGING_STATEMENT = 2;
var FUNC_NULLABLE_ID = 4;
pp$8.parseFunction = function(node, statement, allowExpressionBody, isAsync, forInit) {
  this.initFunction(node);
  if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
    if (this.type === types$1.star && statement & FUNC_HANGING_STATEMENT) {
      this.unexpected();
    }
    node.generator = this.eat(types$1.star);
  }
  if (this.options.ecmaVersion >= 8) {
    node.async = !!isAsync;
  }
  if (statement & FUNC_STATEMENT) {
    node.id = statement & FUNC_NULLABLE_ID && this.type !== types$1.name ? null : this.parseIdent();
    if (node.id && !(statement & FUNC_HANGING_STATEMENT)) {
      this.checkLValSimple(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);
    }
  }
  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
  this.yieldPos = 0;
  this.awaitPos = 0;
  this.awaitIdentPos = 0;
  this.enterScope(functionFlags(node.async, node.generator));
  if (!(statement & FUNC_STATEMENT)) {
    node.id = this.type === types$1.name ? this.parseIdent() : null;
  }
  this.parseFunctionParams(node);
  this.parseFunctionBody(node, allowExpressionBody, false, forInit);
  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.awaitIdentPos = oldAwaitIdentPos;
  return this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
};
pp$8.parseFunctionParams = function(node) {
  this.expect(types$1.parenL);
  node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
  this.checkYieldAwaitInDefaultParams();
};
pp$8.parseClass = function(node, isStatement) {
  this.next();
  var oldStrict = this.strict;
  this.strict = true;
  this.parseClassId(node, isStatement);
  this.parseClassSuper(node);
  var privateNameMap = this.enterClassBody();
  var classBody = this.startNode();
  var hadConstructor = false;
  classBody.body = [];
  this.expect(types$1.braceL);
  while (this.type !== types$1.braceR) {
    var element = this.parseClassElement(node.superClass !== null);
    if (element) {
      classBody.body.push(element);
      if (element.type === "MethodDefinition" && element.kind === "constructor") {
        if (hadConstructor) {
          this.raise(element.start, "Duplicate constructor in the same class");
        }
        hadConstructor = true;
      } else if (element.key && element.key.type === "PrivateIdentifier" && isPrivateNameConflicted(privateNameMap, element)) {
        this.raiseRecoverable(element.key.start, "Identifier '#" + element.key.name + "' has already been declared");
      }
    }
  }
  this.strict = oldStrict;
  this.next();
  node.body = this.finishNode(classBody, "ClassBody");
  this.exitClassBody();
  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
};
pp$8.parseClassElement = function(constructorAllowsSuper) {
  if (this.eat(types$1.semi)) {
    return null;
  }
  var ecmaVersion = this.options.ecmaVersion;
  var node = this.startNode();
  var keyName = "";
  var isGenerator = false;
  var isAsync = false;
  var kind = "method";
  var isStatic = false;
  if (this.eatContextual("static")) {
    if (ecmaVersion >= 13 && this.eat(types$1.braceL)) {
      this.parseClassStaticBlock(node);
      return node;
    }
    if (this.isClassElementNameStart() || this.type === types$1.star) {
      isStatic = true;
    } else {
      keyName = "static";
    }
  }
  node.static = isStatic;
  if (!keyName && ecmaVersion >= 8 && this.eatContextual("async")) {
    if ((this.isClassElementNameStart() || this.type === types$1.star) && !this.canInsertSemicolon()) {
      isAsync = true;
    } else {
      keyName = "async";
    }
  }
  if (!keyName && (ecmaVersion >= 9 || !isAsync) && this.eat(types$1.star)) {
    isGenerator = true;
  }
  if (!keyName && !isAsync && !isGenerator) {
    var lastValue = this.value;
    if (this.eatContextual("get") || this.eatContextual("set")) {
      if (this.isClassElementNameStart()) {
        kind = lastValue;
      } else {
        keyName = lastValue;
      }
    }
  }
  if (keyName) {
    node.computed = false;
    node.key = this.startNodeAt(this.lastTokStart, this.lastTokStartLoc);
    node.key.name = keyName;
    this.finishNode(node.key, "Identifier");
  } else {
    this.parseClassElementName(node);
  }
  if (ecmaVersion < 13 || this.type === types$1.parenL || kind !== "method" || isGenerator || isAsync) {
    var isConstructor = !node.static && checkKeyName(node, "constructor");
    var allowsDirectSuper = isConstructor && constructorAllowsSuper;
    if (isConstructor && kind !== "method") {
      this.raise(node.key.start, "Constructor can't have get/set modifier");
    }
    node.kind = isConstructor ? "constructor" : kind;
    this.parseClassMethod(node, isGenerator, isAsync, allowsDirectSuper);
  } else {
    this.parseClassField(node);
  }
  return node;
};
pp$8.isClassElementNameStart = function() {
  return this.type === types$1.name || this.type === types$1.privateId || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword;
};
pp$8.parseClassElementName = function(element) {
  if (this.type === types$1.privateId) {
    if (this.value === "constructor") {
      this.raise(this.start, "Classes can't have an element named '#constructor'");
    }
    element.computed = false;
    element.key = this.parsePrivateIdent();
  } else {
    this.parsePropertyName(element);
  }
};
pp$8.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
  var key = method.key;
  if (method.kind === "constructor") {
    if (isGenerator) {
      this.raise(key.start, "Constructor can't be a generator");
    }
    if (isAsync) {
      this.raise(key.start, "Constructor can't be an async method");
    }
  } else if (method.static && checkKeyName(method, "prototype")) {
    this.raise(key.start, "Classes may not have a static property named prototype");
  }
  var value = method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
  if (method.kind === "get" && value.params.length !== 0) {
    this.raiseRecoverable(value.start, "getter should have no params");
  }
  if (method.kind === "set" && value.params.length !== 1) {
    this.raiseRecoverable(value.start, "setter should have exactly one param");
  }
  if (method.kind === "set" && value.params[0].type === "RestElement") {
    this.raiseRecoverable(value.params[0].start, "Setter cannot use rest params");
  }
  return this.finishNode(method, "MethodDefinition");
};
pp$8.parseClassField = function(field) {
  if (checkKeyName(field, "constructor")) {
    this.raise(field.key.start, "Classes can't have a field named 'constructor'");
  } else if (field.static && checkKeyName(field, "prototype")) {
    this.raise(field.key.start, "Classes can't have a static field named 'prototype'");
  }
  if (this.eat(types$1.eq)) {
    var scope = this.currentThisScope();
    var inClassFieldInit = scope.inClassFieldInit;
    scope.inClassFieldInit = true;
    field.value = this.parseMaybeAssign();
    scope.inClassFieldInit = inClassFieldInit;
  } else {
    field.value = null;
  }
  this.semicolon();
  return this.finishNode(field, "PropertyDefinition");
};
pp$8.parseClassStaticBlock = function(node) {
  node.body = [];
  var oldLabels = this.labels;
  this.labels = [];
  this.enterScope(SCOPE_CLASS_STATIC_BLOCK | SCOPE_SUPER);
  while (this.type !== types$1.braceR) {
    var stmt = this.parseStatement(null);
    node.body.push(stmt);
  }
  this.next();
  this.exitScope();
  this.labels = oldLabels;
  return this.finishNode(node, "StaticBlock");
};
pp$8.parseClassId = function(node, isStatement) {
  if (this.type === types$1.name) {
    node.id = this.parseIdent();
    if (isStatement) {
      this.checkLValSimple(node.id, BIND_LEXICAL, false);
    }
  } else {
    if (isStatement === true) {
      this.unexpected();
    }
    node.id = null;
  }
};
pp$8.parseClassSuper = function(node) {
  node.superClass = this.eat(types$1._extends) ? this.parseExprSubscripts(false) : null;
};
pp$8.enterClassBody = function() {
  var element = { declared: /* @__PURE__ */ Object.create(null), used: [] };
  this.privateNameStack.push(element);
  return element.declared;
};
pp$8.exitClassBody = function() {
  var ref2 = this.privateNameStack.pop();
  var declared = ref2.declared;
  var used = ref2.used;
  var len = this.privateNameStack.length;
  var parent = len === 0 ? null : this.privateNameStack[len - 1];
  for (var i = 0; i < used.length; ++i) {
    var id = used[i];
    if (!hasOwn(declared, id.name)) {
      if (parent) {
        parent.used.push(id);
      } else {
        this.raiseRecoverable(id.start, "Private field '#" + id.name + "' must be declared in an enclosing class");
      }
    }
  }
};
function isPrivateNameConflicted(privateNameMap, element) {
  var name = element.key.name;
  var curr = privateNameMap[name];
  var next = "true";
  if (element.type === "MethodDefinition" && (element.kind === "get" || element.kind === "set")) {
    next = (element.static ? "s" : "i") + element.kind;
  }
  if (curr === "iget" && next === "iset" || curr === "iset" && next === "iget" || curr === "sget" && next === "sset" || curr === "sset" && next === "sget") {
    privateNameMap[name] = "true";
    return false;
  } else if (!curr) {
    privateNameMap[name] = next;
    return false;
  } else {
    return true;
  }
}
function checkKeyName(node, name) {
  var computed = node.computed;
  var key = node.key;
  return !computed && (key.type === "Identifier" && key.name === name || key.type === "Literal" && key.value === name);
}
pp$8.parseExport = function(node, exports) {
  this.next();
  if (this.eat(types$1.star)) {
    if (this.options.ecmaVersion >= 11) {
      if (this.eatContextual("as")) {
        node.exported = this.parseModuleExportName();
        this.checkExport(exports, node.exported, this.lastTokStart);
      } else {
        node.exported = null;
      }
    }
    this.expectContextual("from");
    if (this.type !== types$1.string) {
      this.unexpected();
    }
    node.source = this.parseExprAtom();
    this.semicolon();
    return this.finishNode(node, "ExportAllDeclaration");
  }
  if (this.eat(types$1._default)) {
    this.checkExport(exports, "default", this.lastTokStart);
    var isAsync;
    if (this.type === types$1._function || (isAsync = this.isAsyncFunction())) {
      var fNode = this.startNode();
      this.next();
      if (isAsync) {
        this.next();
      }
      node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
    } else if (this.type === types$1._class) {
      var cNode = this.startNode();
      node.declaration = this.parseClass(cNode, "nullableID");
    } else {
      node.declaration = this.parseMaybeAssign();
      this.semicolon();
    }
    return this.finishNode(node, "ExportDefaultDeclaration");
  }
  if (this.shouldParseExportStatement()) {
    node.declaration = this.parseStatement(null);
    if (node.declaration.type === "VariableDeclaration") {
      this.checkVariableExport(exports, node.declaration.declarations);
    } else {
      this.checkExport(exports, node.declaration.id, node.declaration.id.start);
    }
    node.specifiers = [];
    node.source = null;
  } else {
    node.declaration = null;
    node.specifiers = this.parseExportSpecifiers(exports);
    if (this.eatContextual("from")) {
      if (this.type !== types$1.string) {
        this.unexpected();
      }
      node.source = this.parseExprAtom();
    } else {
      for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
        var spec = list[i];
        this.checkUnreserved(spec.local);
        this.checkLocalExport(spec.local);
        if (spec.local.type === "Literal") {
          this.raise(spec.local.start, "A string literal cannot be used as an exported binding without `from`.");
        }
      }
      node.source = null;
    }
    this.semicolon();
  }
  return this.finishNode(node, "ExportNamedDeclaration");
};
pp$8.checkExport = function(exports, name, pos) {
  if (!exports) {
    return;
  }
  if (typeof name !== "string") {
    name = name.type === "Identifier" ? name.name : name.value;
  }
  if (hasOwn(exports, name)) {
    this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
  }
  exports[name] = true;
};
pp$8.checkPatternExport = function(exports, pat) {
  var type = pat.type;
  if (type === "Identifier") {
    this.checkExport(exports, pat, pat.start);
  } else if (type === "ObjectPattern") {
    for (var i = 0, list = pat.properties; i < list.length; i += 1) {
      var prop = list[i];
      this.checkPatternExport(exports, prop);
    }
  } else if (type === "ArrayPattern") {
    for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
      var elt = list$1[i$1];
      if (elt) {
        this.checkPatternExport(exports, elt);
      }
    }
  } else if (type === "Property") {
    this.checkPatternExport(exports, pat.value);
  } else if (type === "AssignmentPattern") {
    this.checkPatternExport(exports, pat.left);
  } else if (type === "RestElement") {
    this.checkPatternExport(exports, pat.argument);
  } else if (type === "ParenthesizedExpression") {
    this.checkPatternExport(exports, pat.expression);
  }
};
pp$8.checkVariableExport = function(exports, decls) {
  if (!exports) {
    return;
  }
  for (var i = 0, list = decls; i < list.length; i += 1) {
    var decl = list[i];
    this.checkPatternExport(exports, decl.id);
  }
};
pp$8.shouldParseExportStatement = function() {
  return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
};
pp$8.parseExportSpecifiers = function(exports) {
  var nodes = [], first = true;
  this.expect(types$1.braceL);
  while (!this.eat(types$1.braceR)) {
    if (!first) {
      this.expect(types$1.comma);
      if (this.afterTrailingComma(types$1.braceR)) {
        break;
      }
    } else {
      first = false;
    }
    var node = this.startNode();
    node.local = this.parseModuleExportName();
    node.exported = this.eatContextual("as") ? this.parseModuleExportName() : node.local;
    this.checkExport(
      exports,
      node.exported,
      node.exported.start
    );
    nodes.push(this.finishNode(node, "ExportSpecifier"));
  }
  return nodes;
};
pp$8.parseImport = function(node) {
  this.next();
  if (this.type === types$1.string) {
    node.specifiers = empty$1;
    node.source = this.parseExprAtom();
  } else {
    node.specifiers = this.parseImportSpecifiers();
    this.expectContextual("from");
    node.source = this.type === types$1.string ? this.parseExprAtom() : this.unexpected();
  }
  this.semicolon();
  return this.finishNode(node, "ImportDeclaration");
};
pp$8.parseImportSpecifiers = function() {
  var nodes = [], first = true;
  if (this.type === types$1.name) {
    var node = this.startNode();
    node.local = this.parseIdent();
    this.checkLValSimple(node.local, BIND_LEXICAL);
    nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
    if (!this.eat(types$1.comma)) {
      return nodes;
    }
  }
  if (this.type === types$1.star) {
    var node$1 = this.startNode();
    this.next();
    this.expectContextual("as");
    node$1.local = this.parseIdent();
    this.checkLValSimple(node$1.local, BIND_LEXICAL);
    nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
    return nodes;
  }
  this.expect(types$1.braceL);
  while (!this.eat(types$1.braceR)) {
    if (!first) {
      this.expect(types$1.comma);
      if (this.afterTrailingComma(types$1.braceR)) {
        break;
      }
    } else {
      first = false;
    }
    var node$2 = this.startNode();
    node$2.imported = this.parseModuleExportName();
    if (this.eatContextual("as")) {
      node$2.local = this.parseIdent();
    } else {
      this.checkUnreserved(node$2.imported);
      node$2.local = node$2.imported;
    }
    this.checkLValSimple(node$2.local, BIND_LEXICAL);
    nodes.push(this.finishNode(node$2, "ImportSpecifier"));
  }
  return nodes;
};
pp$8.parseModuleExportName = function() {
  if (this.options.ecmaVersion >= 13 && this.type === types$1.string) {
    var stringLiteral = this.parseLiteral(this.value);
    if (loneSurrogate.test(stringLiteral.value)) {
      this.raise(stringLiteral.start, "An export name cannot include a lone surrogate.");
    }
    return stringLiteral;
  }
  return this.parseIdent(true);
};
pp$8.adaptDirectivePrologue = function(statements) {
  for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
    statements[i].directive = statements[i].expression.raw.slice(1, -1);
  }
};
pp$8.isDirectiveCandidate = function(statement) {
  return this.options.ecmaVersion >= 5 && statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && (this.input[statement.start] === '"' || this.input[statement.start] === "'");
};
var pp$7 = Parser.prototype;
pp$7.toAssignable = function(node, isBinding, refDestructuringErrors) {
  if (this.options.ecmaVersion >= 6 && node) {
    switch (node.type) {
      case "Identifier":
        if (this.inAsync && node.name === "await") {
          this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
        }
        break;
      case "ObjectPattern":
      case "ArrayPattern":
      case "AssignmentPattern":
      case "RestElement":
        break;
      case "ObjectExpression":
        node.type = "ObjectPattern";
        if (refDestructuringErrors) {
          this.checkPatternErrors(refDestructuringErrors, true);
        }
        for (var i = 0, list = node.properties; i < list.length; i += 1) {
          var prop = list[i];
          this.toAssignable(prop, isBinding);
          if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
            this.raise(prop.argument.start, "Unexpected token");
          }
        }
        break;
      case "Property":
        if (node.kind !== "init") {
          this.raise(node.key.start, "Object pattern can't contain getter or setter");
        }
        this.toAssignable(node.value, isBinding);
        break;
      case "ArrayExpression":
        node.type = "ArrayPattern";
        if (refDestructuringErrors) {
          this.checkPatternErrors(refDestructuringErrors, true);
        }
        this.toAssignableList(node.elements, isBinding);
        break;
      case "SpreadElement":
        node.type = "RestElement";
        this.toAssignable(node.argument, isBinding);
        if (node.argument.type === "AssignmentPattern") {
          this.raise(node.argument.start, "Rest elements cannot have a default value");
        }
        break;
      case "AssignmentExpression":
        if (node.operator !== "=") {
          this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
        }
        node.type = "AssignmentPattern";
        delete node.operator;
        this.toAssignable(node.left, isBinding);
        break;
      case "ParenthesizedExpression":
        this.toAssignable(node.expression, isBinding, refDestructuringErrors);
        break;
      case "ChainExpression":
        this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
        break;
      case "MemberExpression":
        if (!isBinding) {
          break;
        }
      default:
        this.raise(node.start, "Assigning to rvalue");
    }
  } else if (refDestructuringErrors) {
    this.checkPatternErrors(refDestructuringErrors, true);
  }
  return node;
};
pp$7.toAssignableList = function(exprList, isBinding) {
  var end = exprList.length;
  for (var i = 0; i < end; i++) {
    var elt = exprList[i];
    if (elt) {
      this.toAssignable(elt, isBinding);
    }
  }
  if (end) {
    var last = exprList[end - 1];
    if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
      this.unexpected(last.argument.start);
    }
  }
  return exprList;
};
pp$7.parseSpread = function(refDestructuringErrors) {
  var node = this.startNode();
  this.next();
  node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
  return this.finishNode(node, "SpreadElement");
};
pp$7.parseRestBinding = function() {
  var node = this.startNode();
  this.next();
  if (this.options.ecmaVersion === 6 && this.type !== types$1.name) {
    this.unexpected();
  }
  node.argument = this.parseBindingAtom();
  return this.finishNode(node, "RestElement");
};
pp$7.parseBindingAtom = function() {
  if (this.options.ecmaVersion >= 6) {
    switch (this.type) {
      case types$1.bracketL:
        var node = this.startNode();
        this.next();
        node.elements = this.parseBindingList(types$1.bracketR, true, true);
        return this.finishNode(node, "ArrayPattern");
      case types$1.braceL:
        return this.parseObj(true);
    }
  }
  return this.parseIdent();
};
pp$7.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
  var elts = [], first = true;
  while (!this.eat(close)) {
    if (first) {
      first = false;
    } else {
      this.expect(types$1.comma);
    }
    if (allowEmpty && this.type === types$1.comma) {
      elts.push(null);
    } else if (allowTrailingComma && this.afterTrailingComma(close)) {
      break;
    } else if (this.type === types$1.ellipsis) {
      var rest = this.parseRestBinding();
      this.parseBindingListItem(rest);
      elts.push(rest);
      if (this.type === types$1.comma) {
        this.raise(this.start, "Comma is not permitted after the rest element");
      }
      this.expect(close);
      break;
    } else {
      var elem = this.parseMaybeDefault(this.start, this.startLoc);
      this.parseBindingListItem(elem);
      elts.push(elem);
    }
  }
  return elts;
};
pp$7.parseBindingListItem = function(param) {
  return param;
};
pp$7.parseMaybeDefault = function(startPos, startLoc, left) {
  left = left || this.parseBindingAtom();
  if (this.options.ecmaVersion < 6 || !this.eat(types$1.eq)) {
    return left;
  }
  var node = this.startNodeAt(startPos, startLoc);
  node.left = left;
  node.right = this.parseMaybeAssign();
  return this.finishNode(node, "AssignmentPattern");
};
pp$7.checkLValSimple = function(expr, bindingType, checkClashes) {
  if (bindingType === void 0)
    bindingType = BIND_NONE;
  var isBind = bindingType !== BIND_NONE;
  switch (expr.type) {
    case "Identifier":
      if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
        this.raiseRecoverable(expr.start, (isBind ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
      }
      if (isBind) {
        if (bindingType === BIND_LEXICAL && expr.name === "let") {
          this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
        }
        if (checkClashes) {
          if (hasOwn(checkClashes, expr.name)) {
            this.raiseRecoverable(expr.start, "Argument name clash");
          }
          checkClashes[expr.name] = true;
        }
        if (bindingType !== BIND_OUTSIDE) {
          this.declareName(expr.name, bindingType, expr.start);
        }
      }
      break;
    case "ChainExpression":
      this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
      break;
    case "MemberExpression":
      if (isBind) {
        this.raiseRecoverable(expr.start, "Binding member expression");
      }
      break;
    case "ParenthesizedExpression":
      if (isBind) {
        this.raiseRecoverable(expr.start, "Binding parenthesized expression");
      }
      return this.checkLValSimple(expr.expression, bindingType, checkClashes);
    default:
      this.raise(expr.start, (isBind ? "Binding" : "Assigning to") + " rvalue");
  }
};
pp$7.checkLValPattern = function(expr, bindingType, checkClashes) {
  if (bindingType === void 0)
    bindingType = BIND_NONE;
  switch (expr.type) {
    case "ObjectPattern":
      for (var i = 0, list = expr.properties; i < list.length; i += 1) {
        var prop = list[i];
        this.checkLValInnerPattern(prop, bindingType, checkClashes);
      }
      break;
    case "ArrayPattern":
      for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
        var elem = list$1[i$1];
        if (elem) {
          this.checkLValInnerPattern(elem, bindingType, checkClashes);
        }
      }
      break;
    default:
      this.checkLValSimple(expr, bindingType, checkClashes);
  }
};
pp$7.checkLValInnerPattern = function(expr, bindingType, checkClashes) {
  if (bindingType === void 0)
    bindingType = BIND_NONE;
  switch (expr.type) {
    case "Property":
      this.checkLValInnerPattern(expr.value, bindingType, checkClashes);
      break;
    case "AssignmentPattern":
      this.checkLValPattern(expr.left, bindingType, checkClashes);
      break;
    case "RestElement":
      this.checkLValPattern(expr.argument, bindingType, checkClashes);
      break;
    default:
      this.checkLValPattern(expr, bindingType, checkClashes);
  }
};
var TokContext = function TokContext2(token, isExpr, preserveSpace, override, generator) {
  this.token = token;
  this.isExpr = !!isExpr;
  this.preserveSpace = !!preserveSpace;
  this.override = override;
  this.generator = !!generator;
};
var types = {
  b_stat: new TokContext("{", false),
  b_expr: new TokContext("{", true),
  b_tmpl: new TokContext("${", false),
  p_stat: new TokContext("(", false),
  p_expr: new TokContext("(", true),
  q_tmpl: new TokContext("`", true, true, function(p) {
    return p.tryReadTemplateToken();
  }),
  f_stat: new TokContext("function", false),
  f_expr: new TokContext("function", true),
  f_expr_gen: new TokContext("function", true, false, null, true),
  f_gen: new TokContext("function", false, false, null, true)
};
var pp$6 = Parser.prototype;
pp$6.initialContext = function() {
  return [types.b_stat];
};
pp$6.curContext = function() {
  return this.context[this.context.length - 1];
};
pp$6.braceIsBlock = function(prevType) {
  var parent = this.curContext();
  if (parent === types.f_expr || parent === types.f_stat) {
    return true;
  }
  if (prevType === types$1.colon && (parent === types.b_stat || parent === types.b_expr)) {
    return !parent.isExpr;
  }
  if (prevType === types$1._return || prevType === types$1.name && this.exprAllowed) {
    return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
  }
  if (prevType === types$1._else || prevType === types$1.semi || prevType === types$1.eof || prevType === types$1.parenR || prevType === types$1.arrow) {
    return true;
  }
  if (prevType === types$1.braceL) {
    return parent === types.b_stat;
  }
  if (prevType === types$1._var || prevType === types$1._const || prevType === types$1.name) {
    return false;
  }
  return !this.exprAllowed;
};
pp$6.inGeneratorContext = function() {
  for (var i = this.context.length - 1; i >= 1; i--) {
    var context = this.context[i];
    if (context.token === "function") {
      return context.generator;
    }
  }
  return false;
};
pp$6.updateContext = function(prevType) {
  var update, type = this.type;
  if (type.keyword && prevType === types$1.dot) {
    this.exprAllowed = false;
  } else if (update = type.updateContext) {
    update.call(this, prevType);
  } else {
    this.exprAllowed = type.beforeExpr;
  }
};
pp$6.overrideContext = function(tokenCtx) {
  if (this.curContext() !== tokenCtx) {
    this.context[this.context.length - 1] = tokenCtx;
  }
};
types$1.parenR.updateContext = types$1.braceR.updateContext = function() {
  if (this.context.length === 1) {
    this.exprAllowed = true;
    return;
  }
  var out = this.context.pop();
  if (out === types.b_stat && this.curContext().token === "function") {
    out = this.context.pop();
  }
  this.exprAllowed = !out.isExpr;
};
types$1.braceL.updateContext = function(prevType) {
  this.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
  this.exprAllowed = true;
};
types$1.dollarBraceL.updateContext = function() {
  this.context.push(types.b_tmpl);
  this.exprAllowed = true;
};
types$1.parenL.updateContext = function(prevType) {
  var statementParens = prevType === types$1._if || prevType === types$1._for || prevType === types$1._with || prevType === types$1._while;
  this.context.push(statementParens ? types.p_stat : types.p_expr);
  this.exprAllowed = true;
};
types$1.incDec.updateContext = function() {
};
types$1._function.updateContext = types$1._class.updateContext = function(prevType) {
  if (prevType.beforeExpr && prevType !== types$1._else && !(prevType === types$1.semi && this.curContext() !== types.p_stat) && !(prevType === types$1._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types$1.colon || prevType === types$1.braceL) && this.curContext() === types.b_stat)) {
    this.context.push(types.f_expr);
  } else {
    this.context.push(types.f_stat);
  }
  this.exprAllowed = false;
};
types$1.backQuote.updateContext = function() {
  if (this.curContext() === types.q_tmpl) {
    this.context.pop();
  } else {
    this.context.push(types.q_tmpl);
  }
  this.exprAllowed = false;
};
types$1.star.updateContext = function(prevType) {
  if (prevType === types$1._function) {
    var index2 = this.context.length - 1;
    if (this.context[index2] === types.f_expr) {
      this.context[index2] = types.f_expr_gen;
    } else {
      this.context[index2] = types.f_gen;
    }
  }
  this.exprAllowed = true;
};
types$1.name.updateContext = function(prevType) {
  var allowed = false;
  if (this.options.ecmaVersion >= 6 && prevType !== types$1.dot) {
    if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
      allowed = true;
    }
  }
  this.exprAllowed = allowed;
};
var pp$5 = Parser.prototype;
pp$5.checkPropClash = function(prop, propHash, refDestructuringErrors) {
  if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
    return;
  }
  if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
    return;
  }
  var key = prop.key;
  var name;
  switch (key.type) {
    case "Identifier":
      name = key.name;
      break;
    case "Literal":
      name = String(key.value);
      break;
    default:
      return;
  }
  var kind = prop.kind;
  if (this.options.ecmaVersion >= 6) {
    if (name === "__proto__" && kind === "init") {
      if (propHash.proto) {
        if (refDestructuringErrors) {
          if (refDestructuringErrors.doubleProto < 0) {
            refDestructuringErrors.doubleProto = key.start;
          }
        } else {
          this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
        }
      }
      propHash.proto = true;
    }
    return;
  }
  name = "$" + name;
  var other = propHash[name];
  if (other) {
    var redefinition;
    if (kind === "init") {
      redefinition = this.strict && other.init || other.get || other.set;
    } else {
      redefinition = other.init || other[kind];
    }
    if (redefinition) {
      this.raiseRecoverable(key.start, "Redefinition of property");
    }
  } else {
    other = propHash[name] = {
      init: false,
      get: false,
      set: false
    };
  }
  other[kind] = true;
};
pp$5.parseExpression = function(forInit, refDestructuringErrors) {
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseMaybeAssign(forInit, refDestructuringErrors);
  if (this.type === types$1.comma) {
    var node = this.startNodeAt(startPos, startLoc);
    node.expressions = [expr];
    while (this.eat(types$1.comma)) {
      node.expressions.push(this.parseMaybeAssign(forInit, refDestructuringErrors));
    }
    return this.finishNode(node, "SequenceExpression");
  }
  return expr;
};
pp$5.parseMaybeAssign = function(forInit, refDestructuringErrors, afterLeftParse) {
  if (this.isContextual("yield")) {
    if (this.inGenerator) {
      return this.parseYield(forInit);
    } else {
      this.exprAllowed = false;
    }
  }
  var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1, oldDoubleProto = -1;
  if (refDestructuringErrors) {
    oldParenAssign = refDestructuringErrors.parenthesizedAssign;
    oldTrailingComma = refDestructuringErrors.trailingComma;
    oldDoubleProto = refDestructuringErrors.doubleProto;
    refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
  } else {
    refDestructuringErrors = new DestructuringErrors();
    ownDestructuringErrors = true;
  }
  var startPos = this.start, startLoc = this.startLoc;
  if (this.type === types$1.parenL || this.type === types$1.name) {
    this.potentialArrowAt = this.start;
    this.potentialArrowInForAwait = forInit === "await";
  }
  var left = this.parseMaybeConditional(forInit, refDestructuringErrors);
  if (afterLeftParse) {
    left = afterLeftParse.call(this, left, startPos, startLoc);
  }
  if (this.type.isAssign) {
    var node = this.startNodeAt(startPos, startLoc);
    node.operator = this.value;
    if (this.type === types$1.eq) {
      left = this.toAssignable(left, false, refDestructuringErrors);
    }
    if (!ownDestructuringErrors) {
      refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
    }
    if (refDestructuringErrors.shorthandAssign >= left.start) {
      refDestructuringErrors.shorthandAssign = -1;
    }
    if (this.type === types$1.eq) {
      this.checkLValPattern(left);
    } else {
      this.checkLValSimple(left);
    }
    node.left = left;
    this.next();
    node.right = this.parseMaybeAssign(forInit);
    if (oldDoubleProto > -1) {
      refDestructuringErrors.doubleProto = oldDoubleProto;
    }
    return this.finishNode(node, "AssignmentExpression");
  } else {
    if (ownDestructuringErrors) {
      this.checkExpressionErrors(refDestructuringErrors, true);
    }
  }
  if (oldParenAssign > -1) {
    refDestructuringErrors.parenthesizedAssign = oldParenAssign;
  }
  if (oldTrailingComma > -1) {
    refDestructuringErrors.trailingComma = oldTrailingComma;
  }
  return left;
};
pp$5.parseMaybeConditional = function(forInit, refDestructuringErrors) {
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseExprOps(forInit, refDestructuringErrors);
  if (this.checkExpressionErrors(refDestructuringErrors)) {
    return expr;
  }
  if (this.eat(types$1.question)) {
    var node = this.startNodeAt(startPos, startLoc);
    node.test = expr;
    node.consequent = this.parseMaybeAssign();
    this.expect(types$1.colon);
    node.alternate = this.parseMaybeAssign(forInit);
    return this.finishNode(node, "ConditionalExpression");
  }
  return expr;
};
pp$5.parseExprOps = function(forInit, refDestructuringErrors) {
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseMaybeUnary(refDestructuringErrors, false, false, forInit);
  if (this.checkExpressionErrors(refDestructuringErrors)) {
    return expr;
  }
  return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, forInit);
};
pp$5.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, forInit) {
  var prec = this.type.binop;
  if (prec != null && (!forInit || this.type !== types$1._in)) {
    if (prec > minPrec) {
      var logical = this.type === types$1.logicalOR || this.type === types$1.logicalAND;
      var coalesce = this.type === types$1.coalesce;
      if (coalesce) {
        prec = types$1.logicalAND.binop;
      }
      var op = this.value;
      this.next();
      var startPos = this.start, startLoc = this.startLoc;
      var right = this.parseExprOp(this.parseMaybeUnary(null, false, false, forInit), startPos, startLoc, prec, forInit);
      var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
      if (logical && this.type === types$1.coalesce || coalesce && (this.type === types$1.logicalOR || this.type === types$1.logicalAND)) {
        this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
      }
      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, forInit);
    }
  }
  return left;
};
pp$5.buildBinary = function(startPos, startLoc, left, right, op, logical) {
  if (right.type === "PrivateIdentifier") {
    this.raise(right.start, "Private identifier can only be left side of binary expression");
  }
  var node = this.startNodeAt(startPos, startLoc);
  node.left = left;
  node.operator = op;
  node.right = right;
  return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
};
pp$5.parseMaybeUnary = function(refDestructuringErrors, sawUnary, incDec, forInit) {
  var startPos = this.start, startLoc = this.startLoc, expr;
  if (this.isContextual("await") && this.canAwait) {
    expr = this.parseAwait(forInit);
    sawUnary = true;
  } else if (this.type.prefix) {
    var node = this.startNode(), update = this.type === types$1.incDec;
    node.operator = this.value;
    node.prefix = true;
    this.next();
    node.argument = this.parseMaybeUnary(null, true, update, forInit);
    this.checkExpressionErrors(refDestructuringErrors, true);
    if (update) {
      this.checkLValSimple(node.argument);
    } else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
      this.raiseRecoverable(node.start, "Deleting local variable in strict mode");
    } else if (node.operator === "delete" && isPrivateFieldAccess(node.argument)) {
      this.raiseRecoverable(node.start, "Private fields can not be deleted");
    } else {
      sawUnary = true;
    }
    expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
  } else if (!sawUnary && this.type === types$1.privateId) {
    if (forInit || this.privateNameStack.length === 0) {
      this.unexpected();
    }
    expr = this.parsePrivateIdent();
    if (this.type !== types$1._in) {
      this.unexpected();
    }
  } else {
    expr = this.parseExprSubscripts(refDestructuringErrors, forInit);
    if (this.checkExpressionErrors(refDestructuringErrors)) {
      return expr;
    }
    while (this.type.postfix && !this.canInsertSemicolon()) {
      var node$1 = this.startNodeAt(startPos, startLoc);
      node$1.operator = this.value;
      node$1.prefix = false;
      node$1.argument = expr;
      this.checkLValSimple(expr);
      this.next();
      expr = this.finishNode(node$1, "UpdateExpression");
    }
  }
  if (!incDec && this.eat(types$1.starstar)) {
    if (sawUnary) {
      this.unexpected(this.lastTokStart);
    } else {
      return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false, false, forInit), "**", false);
    }
  } else {
    return expr;
  }
};
function isPrivateFieldAccess(node) {
  return node.type === "MemberExpression" && node.property.type === "PrivateIdentifier" || node.type === "ChainExpression" && isPrivateFieldAccess(node.expression);
}
pp$5.parseExprSubscripts = function(refDestructuringErrors, forInit) {
  var startPos = this.start, startLoc = this.startLoc;
  var expr = this.parseExprAtom(refDestructuringErrors, forInit);
  if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")") {
    return expr;
  }
  var result = this.parseSubscripts(expr, startPos, startLoc, false, forInit);
  if (refDestructuringErrors && result.type === "MemberExpression") {
    if (refDestructuringErrors.parenthesizedAssign >= result.start) {
      refDestructuringErrors.parenthesizedAssign = -1;
    }
    if (refDestructuringErrors.parenthesizedBind >= result.start) {
      refDestructuringErrors.parenthesizedBind = -1;
    }
    if (refDestructuringErrors.trailingComma >= result.start) {
      refDestructuringErrors.trailingComma = -1;
    }
  }
  return result;
};
pp$5.parseSubscripts = function(base, startPos, startLoc, noCalls, forInit) {
  var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.potentialArrowAt === base.start;
  var optionalChained = false;
  while (true) {
    var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit);
    if (element.optional) {
      optionalChained = true;
    }
    if (element === base || element.type === "ArrowFunctionExpression") {
      if (optionalChained) {
        var chainNode = this.startNodeAt(startPos, startLoc);
        chainNode.expression = element;
        element = this.finishNode(chainNode, "ChainExpression");
      }
      return element;
    }
    base = element;
  }
};
pp$5.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained, forInit) {
  var optionalSupported = this.options.ecmaVersion >= 11;
  var optional = optionalSupported && this.eat(types$1.questionDot);
  if (noCalls && optional) {
    this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
  }
  var computed = this.eat(types$1.bracketL);
  if (computed || optional && this.type !== types$1.parenL && this.type !== types$1.backQuote || this.eat(types$1.dot)) {
    var node = this.startNodeAt(startPos, startLoc);
    node.object = base;
    if (computed) {
      node.property = this.parseExpression();
      this.expect(types$1.bracketR);
    } else if (this.type === types$1.privateId && base.type !== "Super") {
      node.property = this.parsePrivateIdent();
    } else {
      node.property = this.parseIdent(this.options.allowReserved !== "never");
    }
    node.computed = !!computed;
    if (optionalSupported) {
      node.optional = optional;
    }
    base = this.finishNode(node, "MemberExpression");
  } else if (!noCalls && this.eat(types$1.parenL)) {
    var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
    this.yieldPos = 0;
    this.awaitPos = 0;
    this.awaitIdentPos = 0;
    var exprList = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
    if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {
      this.checkPatternErrors(refDestructuringErrors, false);
      this.checkYieldAwaitInDefaultParams();
      if (this.awaitIdentPos > 0) {
        this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
      }
      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      this.awaitIdentPos = oldAwaitIdentPos;
      return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true, forInit);
    }
    this.checkExpressionErrors(refDestructuringErrors, true);
    this.yieldPos = oldYieldPos || this.yieldPos;
    this.awaitPos = oldAwaitPos || this.awaitPos;
    this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
    var node$1 = this.startNodeAt(startPos, startLoc);
    node$1.callee = base;
    node$1.arguments = exprList;
    if (optionalSupported) {
      node$1.optional = optional;
    }
    base = this.finishNode(node$1, "CallExpression");
  } else if (this.type === types$1.backQuote) {
    if (optional || optionalChained) {
      this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
    }
    var node$2 = this.startNodeAt(startPos, startLoc);
    node$2.tag = base;
    node$2.quasi = this.parseTemplate({ isTagged: true });
    base = this.finishNode(node$2, "TaggedTemplateExpression");
  }
  return base;
};
pp$5.parseExprAtom = function(refDestructuringErrors, forInit) {
  if (this.type === types$1.slash) {
    this.readRegexp();
  }
  var node, canBeArrow = this.potentialArrowAt === this.start;
  switch (this.type) {
    case types$1._super:
      if (!this.allowSuper) {
        this.raise(this.start, "'super' keyword outside a method");
      }
      node = this.startNode();
      this.next();
      if (this.type === types$1.parenL && !this.allowDirectSuper) {
        this.raise(node.start, "super() call outside constructor of a subclass");
      }
      if (this.type !== types$1.dot && this.type !== types$1.bracketL && this.type !== types$1.parenL) {
        this.unexpected();
      }
      return this.finishNode(node, "Super");
    case types$1._this:
      node = this.startNode();
      this.next();
      return this.finishNode(node, "ThisExpression");
    case types$1.name:
      var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
      var id = this.parseIdent(false);
      if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types$1._function)) {
        this.overrideContext(types.f_expr);
        return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true, forInit);
      }
      if (canBeArrow && !this.canInsertSemicolon()) {
        if (this.eat(types$1.arrow)) {
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false, forInit);
        }
        if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types$1.name && !containsEsc && (!this.potentialArrowInForAwait || this.value !== "of" || this.containsEsc)) {
          id = this.parseIdent(false);
          if (this.canInsertSemicolon() || !this.eat(types$1.arrow)) {
            this.unexpected();
          }
          return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true, forInit);
        }
      }
      return id;
    case types$1.regexp:
      var value = this.value;
      node = this.parseLiteral(value.value);
      node.regex = { pattern: value.pattern, flags: value.flags };
      return node;
    case types$1.num:
    case types$1.string:
      return this.parseLiteral(this.value);
    case types$1._null:
    case types$1._true:
    case types$1._false:
      node = this.startNode();
      node.value = this.type === types$1._null ? null : this.type === types$1._true;
      node.raw = this.type.keyword;
      this.next();
      return this.finishNode(node, "Literal");
    case types$1.parenL:
      var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow, forInit);
      if (refDestructuringErrors) {
        if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
          refDestructuringErrors.parenthesizedAssign = start;
        }
        if (refDestructuringErrors.parenthesizedBind < 0) {
          refDestructuringErrors.parenthesizedBind = start;
        }
      }
      return expr;
    case types$1.bracketL:
      node = this.startNode();
      this.next();
      node.elements = this.parseExprList(types$1.bracketR, true, true, refDestructuringErrors);
      return this.finishNode(node, "ArrayExpression");
    case types$1.braceL:
      this.overrideContext(types.b_expr);
      return this.parseObj(false, refDestructuringErrors);
    case types$1._function:
      node = this.startNode();
      this.next();
      return this.parseFunction(node, 0);
    case types$1._class:
      return this.parseClass(this.startNode(), false);
    case types$1._new:
      return this.parseNew();
    case types$1.backQuote:
      return this.parseTemplate();
    case types$1._import:
      if (this.options.ecmaVersion >= 11) {
        return this.parseExprImport();
      } else {
        return this.unexpected();
      }
    default:
      this.unexpected();
  }
};
pp$5.parseExprImport = function() {
  var node = this.startNode();
  if (this.containsEsc) {
    this.raiseRecoverable(this.start, "Escape sequence in keyword import");
  }
  var meta = this.parseIdent(true);
  switch (this.type) {
    case types$1.parenL:
      return this.parseDynamicImport(node);
    case types$1.dot:
      node.meta = meta;
      return this.parseImportMeta(node);
    default:
      this.unexpected();
  }
};
pp$5.parseDynamicImport = function(node) {
  this.next();
  node.source = this.parseMaybeAssign();
  if (!this.eat(types$1.parenR)) {
    var errorPos = this.start;
    if (this.eat(types$1.comma) && this.eat(types$1.parenR)) {
      this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
    } else {
      this.unexpected(errorPos);
    }
  }
  return this.finishNode(node, "ImportExpression");
};
pp$5.parseImportMeta = function(node) {
  this.next();
  var containsEsc = this.containsEsc;
  node.property = this.parseIdent(true);
  if (node.property.name !== "meta") {
    this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'");
  }
  if (containsEsc) {
    this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters");
  }
  if (this.options.sourceType !== "module" && !this.options.allowImportExportEverywhere) {
    this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module");
  }
  return this.finishNode(node, "MetaProperty");
};
pp$5.parseLiteral = function(value) {
  var node = this.startNode();
  node.value = value;
  node.raw = this.input.slice(this.start, this.end);
  if (node.raw.charCodeAt(node.raw.length - 1) === 110) {
    node.bigint = node.raw.slice(0, -1).replace(/_/g, "");
  }
  this.next();
  return this.finishNode(node, "Literal");
};
pp$5.parseParenExpression = function() {
  this.expect(types$1.parenL);
  var val = this.parseExpression();
  this.expect(types$1.parenR);
  return val;
};
pp$5.parseParenAndDistinguishExpression = function(canBeArrow, forInit) {
  var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
  if (this.options.ecmaVersion >= 6) {
    this.next();
    var innerStartPos = this.start, innerStartLoc = this.startLoc;
    var exprList = [], first = true, lastIsComma = false;
    var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
    this.yieldPos = 0;
    this.awaitPos = 0;
    while (this.type !== types$1.parenR) {
      first ? first = false : this.expect(types$1.comma);
      if (allowTrailingComma && this.afterTrailingComma(types$1.parenR, true)) {
        lastIsComma = true;
        break;
      } else if (this.type === types$1.ellipsis) {
        spreadStart = this.start;
        exprList.push(this.parseParenItem(this.parseRestBinding()));
        if (this.type === types$1.comma) {
          this.raise(this.start, "Comma is not permitted after the rest element");
        }
        break;
      } else {
        exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
      }
    }
    var innerEndPos = this.lastTokEnd, innerEndLoc = this.lastTokEndLoc;
    this.expect(types$1.parenR);
    if (canBeArrow && !this.canInsertSemicolon() && this.eat(types$1.arrow)) {
      this.checkPatternErrors(refDestructuringErrors, false);
      this.checkYieldAwaitInDefaultParams();
      this.yieldPos = oldYieldPos;
      this.awaitPos = oldAwaitPos;
      return this.parseParenArrowList(startPos, startLoc, exprList, forInit);
    }
    if (!exprList.length || lastIsComma) {
      this.unexpected(this.lastTokStart);
    }
    if (spreadStart) {
      this.unexpected(spreadStart);
    }
    this.checkExpressionErrors(refDestructuringErrors, true);
    this.yieldPos = oldYieldPos || this.yieldPos;
    this.awaitPos = oldAwaitPos || this.awaitPos;
    if (exprList.length > 1) {
      val = this.startNodeAt(innerStartPos, innerStartLoc);
      val.expressions = exprList;
      this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
    } else {
      val = exprList[0];
    }
  } else {
    val = this.parseParenExpression();
  }
  if (this.options.preserveParens) {
    var par = this.startNodeAt(startPos, startLoc);
    par.expression = val;
    return this.finishNode(par, "ParenthesizedExpression");
  } else {
    return val;
  }
};
pp$5.parseParenItem = function(item) {
  return item;
};
pp$5.parseParenArrowList = function(startPos, startLoc, exprList, forInit) {
  return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, false, forInit);
};
var empty = [];
pp$5.parseNew = function() {
  if (this.containsEsc) {
    this.raiseRecoverable(this.start, "Escape sequence in keyword new");
  }
  var node = this.startNode();
  var meta = this.parseIdent(true);
  if (this.options.ecmaVersion >= 6 && this.eat(types$1.dot)) {
    node.meta = meta;
    var containsEsc = this.containsEsc;
    node.property = this.parseIdent(true);
    if (node.property.name !== "target") {
      this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'");
    }
    if (containsEsc) {
      this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters");
    }
    if (!this.allowNewDotTarget) {
      this.raiseRecoverable(node.start, "'new.target' can only be used in functions and class static block");
    }
    return this.finishNode(node, "MetaProperty");
  }
  var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types$1._import;
  node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true, false);
  if (isImport && node.callee.type === "ImportExpression") {
    this.raise(startPos, "Cannot use new with import()");
  }
  if (this.eat(types$1.parenL)) {
    node.arguments = this.parseExprList(types$1.parenR, this.options.ecmaVersion >= 8, false);
  } else {
    node.arguments = empty;
  }
  return this.finishNode(node, "NewExpression");
};
pp$5.parseTemplateElement = function(ref2) {
  var isTagged = ref2.isTagged;
  var elem = this.startNode();
  if (this.type === types$1.invalidTemplate) {
    if (!isTagged) {
      this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
    }
    elem.value = {
      raw: this.value,
      cooked: null
    };
  } else {
    elem.value = {
      raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
      cooked: this.value
    };
  }
  this.next();
  elem.tail = this.type === types$1.backQuote;
  return this.finishNode(elem, "TemplateElement");
};
pp$5.parseTemplate = function(ref2) {
  if (ref2 === void 0)
    ref2 = {};
  var isTagged = ref2.isTagged;
  if (isTagged === void 0)
    isTagged = false;
  var node = this.startNode();
  this.next();
  node.expressions = [];
  var curElt = this.parseTemplateElement({ isTagged });
  node.quasis = [curElt];
  while (!curElt.tail) {
    if (this.type === types$1.eof) {
      this.raise(this.pos, "Unterminated template literal");
    }
    this.expect(types$1.dollarBraceL);
    node.expressions.push(this.parseExpression());
    this.expect(types$1.braceR);
    node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
  }
  this.next();
  return this.finishNode(node, "TemplateLiteral");
};
pp$5.isAsyncProp = function(prop) {
  return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types$1.name || this.type === types$1.num || this.type === types$1.string || this.type === types$1.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types$1.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
};
pp$5.parseObj = function(isPattern, refDestructuringErrors) {
  var node = this.startNode(), first = true, propHash = {};
  node.properties = [];
  this.next();
  while (!this.eat(types$1.braceR)) {
    if (!first) {
      this.expect(types$1.comma);
      if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types$1.braceR)) {
        break;
      }
    } else {
      first = false;
    }
    var prop = this.parseProperty(isPattern, refDestructuringErrors);
    if (!isPattern) {
      this.checkPropClash(prop, propHash, refDestructuringErrors);
    }
    node.properties.push(prop);
  }
  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
};
pp$5.parseProperty = function(isPattern, refDestructuringErrors) {
  var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
  if (this.options.ecmaVersion >= 9 && this.eat(types$1.ellipsis)) {
    if (isPattern) {
      prop.argument = this.parseIdent(false);
      if (this.type === types$1.comma) {
        this.raise(this.start, "Comma is not permitted after the rest element");
      }
      return this.finishNode(prop, "RestElement");
    }
    prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
    if (this.type === types$1.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
      refDestructuringErrors.trailingComma = this.start;
    }
    return this.finishNode(prop, "SpreadElement");
  }
  if (this.options.ecmaVersion >= 6) {
    prop.method = false;
    prop.shorthand = false;
    if (isPattern || refDestructuringErrors) {
      startPos = this.start;
      startLoc = this.startLoc;
    }
    if (!isPattern) {
      isGenerator = this.eat(types$1.star);
    }
  }
  var containsEsc = this.containsEsc;
  this.parsePropertyName(prop);
  if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
    isAsync = true;
    isGenerator = this.options.ecmaVersion >= 9 && this.eat(types$1.star);
    this.parsePropertyName(prop, refDestructuringErrors);
  } else {
    isAsync = false;
  }
  this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
  return this.finishNode(prop, "Property");
};
pp$5.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
  if ((isGenerator || isAsync) && this.type === types$1.colon) {
    this.unexpected();
  }
  if (this.eat(types$1.colon)) {
    prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
    prop.kind = "init";
  } else if (this.options.ecmaVersion >= 6 && this.type === types$1.parenL) {
    if (isPattern) {
      this.unexpected();
    }
    prop.kind = "init";
    prop.method = true;
    prop.value = this.parseMethod(isGenerator, isAsync);
  } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && (this.type !== types$1.comma && this.type !== types$1.braceR && this.type !== types$1.eq)) {
    if (isGenerator || isAsync) {
      this.unexpected();
    }
    prop.kind = prop.key.name;
    this.parsePropertyName(prop);
    prop.value = this.parseMethod(false);
    var paramCount = prop.kind === "get" ? 0 : 1;
    if (prop.value.params.length !== paramCount) {
      var start = prop.value.start;
      if (prop.kind === "get") {
        this.raiseRecoverable(start, "getter should have no params");
      } else {
        this.raiseRecoverable(start, "setter should have exactly one param");
      }
    } else {
      if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
        this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
      }
    }
  } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
    if (isGenerator || isAsync) {
      this.unexpected();
    }
    this.checkUnreserved(prop.key);
    if (prop.key.name === "await" && !this.awaitIdentPos) {
      this.awaitIdentPos = startPos;
    }
    prop.kind = "init";
    if (isPattern) {
      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
    } else if (this.type === types$1.eq && refDestructuringErrors) {
      if (refDestructuringErrors.shorthandAssign < 0) {
        refDestructuringErrors.shorthandAssign = this.start;
      }
      prop.value = this.parseMaybeDefault(startPos, startLoc, this.copyNode(prop.key));
    } else {
      prop.value = this.copyNode(prop.key);
    }
    prop.shorthand = true;
  } else {
    this.unexpected();
  }
};
pp$5.parsePropertyName = function(prop) {
  if (this.options.ecmaVersion >= 6) {
    if (this.eat(types$1.bracketL)) {
      prop.computed = true;
      prop.key = this.parseMaybeAssign();
      this.expect(types$1.bracketR);
      return prop.key;
    } else {
      prop.computed = false;
    }
  }
  return prop.key = this.type === types$1.num || this.type === types$1.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
};
pp$5.initFunction = function(node) {
  node.id = null;
  if (this.options.ecmaVersion >= 6) {
    node.generator = node.expression = false;
  }
  if (this.options.ecmaVersion >= 8) {
    node.async = false;
  }
};
pp$5.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
  var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
  this.initFunction(node);
  if (this.options.ecmaVersion >= 6) {
    node.generator = isGenerator;
  }
  if (this.options.ecmaVersion >= 8) {
    node.async = !!isAsync;
  }
  this.yieldPos = 0;
  this.awaitPos = 0;
  this.awaitIdentPos = 0;
  this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
  this.expect(types$1.parenL);
  node.params = this.parseBindingList(types$1.parenR, false, this.options.ecmaVersion >= 8);
  this.checkYieldAwaitInDefaultParams();
  this.parseFunctionBody(node, false, true, false);
  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.awaitIdentPos = oldAwaitIdentPos;
  return this.finishNode(node, "FunctionExpression");
};
pp$5.parseArrowExpression = function(node, params, isAsync, forInit) {
  var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
  this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
  this.initFunction(node);
  if (this.options.ecmaVersion >= 8) {
    node.async = !!isAsync;
  }
  this.yieldPos = 0;
  this.awaitPos = 0;
  this.awaitIdentPos = 0;
  node.params = this.toAssignableList(params, true);
  this.parseFunctionBody(node, true, false, forInit);
  this.yieldPos = oldYieldPos;
  this.awaitPos = oldAwaitPos;
  this.awaitIdentPos = oldAwaitIdentPos;
  return this.finishNode(node, "ArrowFunctionExpression");
};
pp$5.parseFunctionBody = function(node, isArrowFunction, isMethod, forInit) {
  var isExpression = isArrowFunction && this.type !== types$1.braceL;
  var oldStrict = this.strict, useStrict = false;
  if (isExpression) {
    node.body = this.parseMaybeAssign(forInit);
    node.expression = true;
    this.checkParams(node, false);
  } else {
    var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
    if (!oldStrict || nonSimple) {
      useStrict = this.strictDirective(this.end);
      if (useStrict && nonSimple) {
        this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
      }
    }
    var oldLabels = this.labels;
    this.labels = [];
    if (useStrict) {
      this.strict = true;
    }
    this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
    if (this.strict && node.id) {
      this.checkLValSimple(node.id, BIND_OUTSIDE);
    }
    node.body = this.parseBlock(false, void 0, useStrict && !oldStrict);
    node.expression = false;
    this.adaptDirectivePrologue(node.body.body);
    this.labels = oldLabels;
  }
  this.exitScope();
};
pp$5.isSimpleParamList = function(params) {
  for (var i = 0, list = params; i < list.length; i += 1) {
    var param = list[i];
    if (param.type !== "Identifier") {
      return false;
    }
  }
  return true;
};
pp$5.checkParams = function(node, allowDuplicates) {
  var nameHash = /* @__PURE__ */ Object.create(null);
  for (var i = 0, list = node.params; i < list.length; i += 1) {
    var param = list[i];
    this.checkLValInnerPattern(param, BIND_VAR, allowDuplicates ? null : nameHash);
  }
};
pp$5.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
  var elts = [], first = true;
  while (!this.eat(close)) {
    if (!first) {
      this.expect(types$1.comma);
      if (allowTrailingComma && this.afterTrailingComma(close)) {
        break;
      }
    } else {
      first = false;
    }
    var elt = void 0;
    if (allowEmpty && this.type === types$1.comma) {
      elt = null;
    } else if (this.type === types$1.ellipsis) {
      elt = this.parseSpread(refDestructuringErrors);
      if (refDestructuringErrors && this.type === types$1.comma && refDestructuringErrors.trailingComma < 0) {
        refDestructuringErrors.trailingComma = this.start;
      }
    } else {
      elt = this.parseMaybeAssign(false, refDestructuringErrors);
    }
    elts.push(elt);
  }
  return elts;
};
pp$5.checkUnreserved = function(ref2) {
  var start = ref2.start;
  var end = ref2.end;
  var name = ref2.name;
  if (this.inGenerator && name === "yield") {
    this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
  }
  if (this.inAsync && name === "await") {
    this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
  }
  if (this.currentThisScope().inClassFieldInit && name === "arguments") {
    this.raiseRecoverable(start, "Cannot use 'arguments' in class field initializer");
  }
  if (this.inClassStaticBlock && (name === "arguments" || name === "await")) {
    this.raise(start, "Cannot use " + name + " in class static initialization block");
  }
  if (this.keywords.test(name)) {
    this.raise(start, "Unexpected keyword '" + name + "'");
  }
  if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) {
    return;
  }
  var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
  if (re.test(name)) {
    if (!this.inAsync && name === "await") {
      this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
    }
    this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
  }
};
pp$5.parseIdent = function(liberal, isBinding) {
  var node = this.startNode();
  if (this.type === types$1.name) {
    node.name = this.value;
  } else if (this.type.keyword) {
    node.name = this.type.keyword;
    if ((node.name === "class" || node.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
      this.context.pop();
    }
  } else {
    this.unexpected();
  }
  this.next(!!liberal);
  this.finishNode(node, "Identifier");
  if (!liberal) {
    this.checkUnreserved(node);
    if (node.name === "await" && !this.awaitIdentPos) {
      this.awaitIdentPos = node.start;
    }
  }
  return node;
};
pp$5.parsePrivateIdent = function() {
  var node = this.startNode();
  if (this.type === types$1.privateId) {
    node.name = this.value;
  } else {
    this.unexpected();
  }
  this.next();
  this.finishNode(node, "PrivateIdentifier");
  if (this.privateNameStack.length === 0) {
    this.raise(node.start, "Private field '#" + node.name + "' must be declared in an enclosing class");
  } else {
    this.privateNameStack[this.privateNameStack.length - 1].used.push(node);
  }
  return node;
};
pp$5.parseYield = function(forInit) {
  if (!this.yieldPos) {
    this.yieldPos = this.start;
  }
  var node = this.startNode();
  this.next();
  if (this.type === types$1.semi || this.canInsertSemicolon() || this.type !== types$1.star && !this.type.startsExpr) {
    node.delegate = false;
    node.argument = null;
  } else {
    node.delegate = this.eat(types$1.star);
    node.argument = this.parseMaybeAssign(forInit);
  }
  return this.finishNode(node, "YieldExpression");
};
pp$5.parseAwait = function(forInit) {
  if (!this.awaitPos) {
    this.awaitPos = this.start;
  }
  var node = this.startNode();
  this.next();
  node.argument = this.parseMaybeUnary(null, true, false, forInit);
  return this.finishNode(node, "AwaitExpression");
};
var pp$4 = Parser.prototype;
pp$4.raise = function(pos, message) {
  var loc = getLineInfo(this.input, pos);
  message += " (" + loc.line + ":" + loc.column + ")";
  var err = new SyntaxError(message);
  err.pos = pos;
  err.loc = loc;
  err.raisedAt = this.pos;
  throw err;
};
pp$4.raiseRecoverable = pp$4.raise;
pp$4.curPosition = function() {
  if (this.options.locations) {
    return new Position(this.curLine, this.pos - this.lineStart);
  }
};
var pp$3 = Parser.prototype;
var Scope = function Scope2(flags) {
  this.flags = flags;
  this.var = [];
  this.lexical = [];
  this.functions = [];
  this.inClassFieldInit = false;
};
pp$3.enterScope = function(flags) {
  this.scopeStack.push(new Scope(flags));
};
pp$3.exitScope = function() {
  this.scopeStack.pop();
};
pp$3.treatFunctionsAsVarInScope = function(scope) {
  return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;
};
pp$3.declareName = function(name, bindingType, pos) {
  var redeclared = false;
  if (bindingType === BIND_LEXICAL) {
    var scope = this.currentScope();
    redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
    scope.lexical.push(name);
    if (this.inModule && scope.flags & SCOPE_TOP) {
      delete this.undefinedExports[name];
    }
  } else if (bindingType === BIND_SIMPLE_CATCH) {
    var scope$1 = this.currentScope();
    scope$1.lexical.push(name);
  } else if (bindingType === BIND_FUNCTION) {
    var scope$2 = this.currentScope();
    if (this.treatFunctionsAsVar) {
      redeclared = scope$2.lexical.indexOf(name) > -1;
    } else {
      redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;
    }
    scope$2.functions.push(name);
  } else {
    for (var i = this.scopeStack.length - 1; i >= 0; --i) {
      var scope$3 = this.scopeStack[i];
      if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
        redeclared = true;
        break;
      }
      scope$3.var.push(name);
      if (this.inModule && scope$3.flags & SCOPE_TOP) {
        delete this.undefinedExports[name];
      }
      if (scope$3.flags & SCOPE_VAR) {
        break;
      }
    }
  }
  if (redeclared) {
    this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
  }
};
pp$3.checkLocalExport = function(id) {
  if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {
    this.undefinedExports[id.name] = id;
  }
};
pp$3.currentScope = function() {
  return this.scopeStack[this.scopeStack.length - 1];
};
pp$3.currentVarScope = function() {
  for (var i = this.scopeStack.length - 1; ; i--) {
    var scope = this.scopeStack[i];
    if (scope.flags & SCOPE_VAR) {
      return scope;
    }
  }
};
pp$3.currentThisScope = function() {
  for (var i = this.scopeStack.length - 1; ; i--) {
    var scope = this.scopeStack[i];
    if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {
      return scope;
    }
  }
};
var Node = function Node2(parser, pos, loc) {
  this.type = "";
  this.start = pos;
  this.end = 0;
  if (parser.options.locations) {
    this.loc = new SourceLocation(parser, loc);
  }
  if (parser.options.directSourceFile) {
    this.sourceFile = parser.options.directSourceFile;
  }
  if (parser.options.ranges) {
    this.range = [pos, 0];
  }
};
var pp$2 = Parser.prototype;
pp$2.startNode = function() {
  return new Node(this, this.start, this.startLoc);
};
pp$2.startNodeAt = function(pos, loc) {
  return new Node(this, pos, loc);
};
function finishNodeAt(node, type, pos, loc) {
  node.type = type;
  node.end = pos;
  if (this.options.locations) {
    node.loc.end = loc;
  }
  if (this.options.ranges) {
    node.range[1] = pos;
  }
  return node;
}
pp$2.finishNode = function(node, type) {
  return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
};
pp$2.finishNodeAt = function(node, type, pos, loc) {
  return finishNodeAt.call(this, node, type, pos, loc);
};
pp$2.copyNode = function(node) {
  var newNode = new Node(this, node.start, this.startLoc);
  for (var prop in node) {
    newNode[prop] = node[prop];
  }
  return newNode;
};
var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
var ecma11BinaryProperties = ecma10BinaryProperties;
var ecma12BinaryProperties = ecma11BinaryProperties + " EBase EComp EMod EPres ExtPict";
var ecma13BinaryProperties = ecma12BinaryProperties;
var unicodeBinaryProperties = {
  9: ecma9BinaryProperties,
  10: ecma10BinaryProperties,
  11: ecma11BinaryProperties,
  12: ecma12BinaryProperties,
  13: ecma13BinaryProperties
};
var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
var ecma9ScriptValues = "Adlam Adlm Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
var ecma12ScriptValues = ecma11ScriptValues + " Chorasmian Chrs Diak Dives_Akuru Khitan_Small_Script Kits Yezi Yezidi";
var ecma13ScriptValues = ecma12ScriptValues + " Cypro_Minoan Cpmn Old_Uyghur Ougr Tangsa Tnsa Toto Vithkuqi Vith";
var unicodeScriptValues = {
  9: ecma9ScriptValues,
  10: ecma10ScriptValues,
  11: ecma11ScriptValues,
  12: ecma12ScriptValues,
  13: ecma13ScriptValues
};
var data = {};
function buildUnicodeData(ecmaVersion) {
  var d = data[ecmaVersion] = {
    binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
    nonBinary: {
      General_Category: wordsRegexp(unicodeGeneralCategoryValues),
      Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
    }
  };
  d.nonBinary.Script_Extensions = d.nonBinary.Script;
  d.nonBinary.gc = d.nonBinary.General_Category;
  d.nonBinary.sc = d.nonBinary.Script;
  d.nonBinary.scx = d.nonBinary.Script_Extensions;
}
for (i = 0, list = [9, 10, 11, 12, 13]; i < list.length; i += 1) {
  ecmaVersion = list[i];
  buildUnicodeData(ecmaVersion);
}
var ecmaVersion;
var i;
var list;
var pp$1 = Parser.prototype;
var RegExpValidationState = function RegExpValidationState2(parser) {
  this.parser = parser;
  this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "") + (parser.options.ecmaVersion >= 13 ? "d" : "");
  this.unicodeProperties = data[parser.options.ecmaVersion >= 13 ? 13 : parser.options.ecmaVersion];
  this.source = "";
  this.flags = "";
  this.start = 0;
  this.switchU = false;
  this.switchN = false;
  this.pos = 0;
  this.lastIntValue = 0;
  this.lastStringValue = "";
  this.lastAssertionIsQuantifiable = false;
  this.numCapturingParens = 0;
  this.maxBackReference = 0;
  this.groupNames = [];
  this.backReferenceNames = [];
};
RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
  var unicode = flags.indexOf("u") !== -1;
  this.start = start | 0;
  this.source = pattern + "";
  this.flags = flags;
  this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
  this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
};
RegExpValidationState.prototype.raise = function raise(message) {
  this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
};
RegExpValidationState.prototype.at = function at(i, forceU) {
  if (forceU === void 0)
    forceU = false;
  var s = this.source;
  var l = s.length;
  if (i >= l) {
    return -1;
  }
  var c = s.charCodeAt(i);
  if (!(forceU || this.switchU) || c <= 55295 || c >= 57344 || i + 1 >= l) {
    return c;
  }
  var next = s.charCodeAt(i + 1);
  return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
};
RegExpValidationState.prototype.nextIndex = function nextIndex(i, forceU) {
  if (forceU === void 0)
    forceU = false;
  var s = this.source;
  var l = s.length;
  if (i >= l) {
    return l;
  }
  var c = s.charCodeAt(i), next;
  if (!(forceU || this.switchU) || c <= 55295 || c >= 57344 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 56320 || next > 57343) {
    return i + 1;
  }
  return i + 2;
};
RegExpValidationState.prototype.current = function current(forceU) {
  if (forceU === void 0)
    forceU = false;
  return this.at(this.pos, forceU);
};
RegExpValidationState.prototype.lookahead = function lookahead(forceU) {
  if (forceU === void 0)
    forceU = false;
  return this.at(this.nextIndex(this.pos, forceU), forceU);
};
RegExpValidationState.prototype.advance = function advance(forceU) {
  if (forceU === void 0)
    forceU = false;
  this.pos = this.nextIndex(this.pos, forceU);
};
RegExpValidationState.prototype.eat = function eat(ch, forceU) {
  if (forceU === void 0)
    forceU = false;
  if (this.current(forceU) === ch) {
    this.advance(forceU);
    return true;
  }
  return false;
};
pp$1.validateRegExpFlags = function(state) {
  var validFlags = state.validFlags;
  var flags = state.flags;
  for (var i = 0; i < flags.length; i++) {
    var flag = flags.charAt(i);
    if (validFlags.indexOf(flag) === -1) {
      this.raise(state.start, "Invalid regular expression flag");
    }
    if (flags.indexOf(flag, i + 1) > -1) {
      this.raise(state.start, "Duplicate regular expression flag");
    }
  }
};
pp$1.validateRegExpPattern = function(state) {
  this.regexp_pattern(state);
  if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
    state.switchN = true;
    this.regexp_pattern(state);
  }
};
pp$1.regexp_pattern = function(state) {
  state.pos = 0;
  state.lastIntValue = 0;
  state.lastStringValue = "";
  state.lastAssertionIsQuantifiable = false;
  state.numCapturingParens = 0;
  state.maxBackReference = 0;
  state.groupNames.length = 0;
  state.backReferenceNames.length = 0;
  this.regexp_disjunction(state);
  if (state.pos !== state.source.length) {
    if (state.eat(41)) {
      state.raise("Unmatched ')'");
    }
    if (state.eat(93) || state.eat(125)) {
      state.raise("Lone quantifier brackets");
    }
  }
  if (state.maxBackReference > state.numCapturingParens) {
    state.raise("Invalid escape");
  }
  for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
    var name = list[i];
    if (state.groupNames.indexOf(name) === -1) {
      state.raise("Invalid named capture referenced");
    }
  }
};
pp$1.regexp_disjunction = function(state) {
  this.regexp_alternative(state);
  while (state.eat(124)) {
    this.regexp_alternative(state);
  }
  if (this.regexp_eatQuantifier(state, true)) {
    state.raise("Nothing to repeat");
  }
  if (state.eat(123)) {
    state.raise("Lone quantifier brackets");
  }
};
pp$1.regexp_alternative = function(state) {
  while (state.pos < state.source.length && this.regexp_eatTerm(state)) {
  }
};
pp$1.regexp_eatTerm = function(state) {
  if (this.regexp_eatAssertion(state)) {
    if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
      if (state.switchU) {
        state.raise("Invalid quantifier");
      }
    }
    return true;
  }
  if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
    this.regexp_eatQuantifier(state);
    return true;
  }
  return false;
};
pp$1.regexp_eatAssertion = function(state) {
  var start = state.pos;
  state.lastAssertionIsQuantifiable = false;
  if (state.eat(94) || state.eat(36)) {
    return true;
  }
  if (state.eat(92)) {
    if (state.eat(66) || state.eat(98)) {
      return true;
    }
    state.pos = start;
  }
  if (state.eat(40) && state.eat(63)) {
    var lookbehind = false;
    if (this.options.ecmaVersion >= 9) {
      lookbehind = state.eat(60);
    }
    if (state.eat(61) || state.eat(33)) {
      this.regexp_disjunction(state);
      if (!state.eat(41)) {
        state.raise("Unterminated group");
      }
      state.lastAssertionIsQuantifiable = !lookbehind;
      return true;
    }
  }
  state.pos = start;
  return false;
};
pp$1.regexp_eatQuantifier = function(state, noError) {
  if (noError === void 0)
    noError = false;
  if (this.regexp_eatQuantifierPrefix(state, noError)) {
    state.eat(63);
    return true;
  }
  return false;
};
pp$1.regexp_eatQuantifierPrefix = function(state, noError) {
  return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
};
pp$1.regexp_eatBracedQuantifier = function(state, noError) {
  var start = state.pos;
  if (state.eat(123)) {
    var min = 0, max = -1;
    if (this.regexp_eatDecimalDigits(state)) {
      min = state.lastIntValue;
      if (state.eat(44) && this.regexp_eatDecimalDigits(state)) {
        max = state.lastIntValue;
      }
      if (state.eat(125)) {
        if (max !== -1 && max < min && !noError) {
          state.raise("numbers out of order in {} quantifier");
        }
        return true;
      }
    }
    if (state.switchU && !noError) {
      state.raise("Incomplete quantifier");
    }
    state.pos = start;
  }
  return false;
};
pp$1.regexp_eatAtom = function(state) {
  return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
};
pp$1.regexp_eatReverseSolidusAtomEscape = function(state) {
  var start = state.pos;
  if (state.eat(92)) {
    if (this.regexp_eatAtomEscape(state)) {
      return true;
    }
    state.pos = start;
  }
  return false;
};
pp$1.regexp_eatUncapturingGroup = function(state) {
  var start = state.pos;
  if (state.eat(40)) {
    if (state.eat(63) && state.eat(58)) {
      this.regexp_disjunction(state);
      if (state.eat(41)) {
        return true;
      }
      state.raise("Unterminated group");
    }
    state.pos = start;
  }
  return false;
};
pp$1.regexp_eatCapturingGroup = function(state) {
  if (state.eat(40)) {
    if (this.options.ecmaVersion >= 9) {
      this.regexp_groupSpecifier(state);
    } else if (state.current() === 63) {
      state.raise("Invalid group");
    }
    this.regexp_disjunction(state);
    if (state.eat(41)) {
      state.numCapturingParens += 1;
      return true;
    }
    state.raise("Unterminated group");
  }
  return false;
};
pp$1.regexp_eatExtendedAtom = function(state) {
  return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
};
pp$1.regexp_eatInvalidBracedQuantifier = function(state) {
  if (this.regexp_eatBracedQuantifier(state, true)) {
    state.raise("Nothing to repeat");
  }
  return false;
};
pp$1.regexp_eatSyntaxCharacter = function(state) {
  var ch = state.current();
  if (isSyntaxCharacter(ch)) {
    state.lastIntValue = ch;
    state.advance();
    return true;
  }
  return false;
};
function isSyntaxCharacter(ch) {
  return ch === 36 || ch >= 40 && ch <= 43 || ch === 46 || ch === 63 || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
}
pp$1.regexp_eatPatternCharacters = function(state) {
  var start = state.pos;
  var ch = 0;
  while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
    state.advance();
  }
  return state.pos !== start;
};
pp$1.regexp_eatExtendedPatternCharacter = function(state) {
  var ch = state.current();
  if (ch !== -1 && ch !== 36 && !(ch >= 40 && ch <= 43) && ch !== 46 && ch !== 63 && ch !== 91 && ch !== 94 && ch !== 124) {
    state.advance();
    return true;
  }
  return false;
};
pp$1.regexp_groupSpecifier = function(state) {
  if (state.eat(63)) {
    if (this.regexp_eatGroupName(state)) {
      if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
        state.raise("Duplicate capture group name");
      }
      state.groupNames.push(state.lastStringValue);
      return;
    }
    state.raise("Invalid group");
  }
};
pp$1.regexp_eatGroupName = function(state) {
  state.lastStringValue = "";
  if (state.eat(60)) {
    if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62)) {
      return true;
    }
    state.raise("Invalid capture group name");
  }
  return false;
};
pp$1.regexp_eatRegExpIdentifierName = function(state) {
  state.lastStringValue = "";
  if (this.regexp_eatRegExpIdentifierStart(state)) {
    state.lastStringValue += codePointToString(state.lastIntValue);
    while (this.regexp_eatRegExpIdentifierPart(state)) {
      state.lastStringValue += codePointToString(state.lastIntValue);
    }
    return true;
  }
  return false;
};
pp$1.regexp_eatRegExpIdentifierStart = function(state) {
  var start = state.pos;
  var forceU = this.options.ecmaVersion >= 11;
  var ch = state.current(forceU);
  state.advance(forceU);
  if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
    ch = state.lastIntValue;
  }
  if (isRegExpIdentifierStart(ch)) {
    state.lastIntValue = ch;
    return true;
  }
  state.pos = start;
  return false;
};
function isRegExpIdentifierStart(ch) {
  return isIdentifierStart(ch, true) || ch === 36 || ch === 95;
}
pp$1.regexp_eatRegExpIdentifierPart = function(state) {
  var start = state.pos;
  var forceU = this.options.ecmaVersion >= 11;
  var ch = state.current(forceU);
  state.advance(forceU);
  if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
    ch = state.lastIntValue;
  }
  if (isRegExpIdentifierPart(ch)) {
    state.lastIntValue = ch;
    return true;
  }
  state.pos = start;
  return false;
};
function isRegExpIdentifierPart(ch) {
  return isIdentifierChar(ch, true) || ch === 36 || ch === 95 || ch === 8204 || ch === 8205;
}
pp$1.regexp_eatAtomEscape = function(state) {
  if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
    return true;
  }
  if (state.switchU) {
    if (state.current() === 99) {
      state.raise("Invalid unicode escape");
    }
    state.raise("Invalid escape");
  }
  return false;
};
pp$1.regexp_eatBackReference = function(state) {
  var start = state.pos;
  if (this.regexp_eatDecimalEscape(state)) {
    var n = state.lastIntValue;
    if (state.switchU) {
      if (n > state.maxBackReference) {
        state.maxBackReference = n;
      }
      return true;
    }
    if (n <= state.numCapturingParens) {
      return true;
    }
    state.pos = start;
  }
  return false;
};
pp$1.regexp_eatKGroupName = function(state) {
  if (state.eat(107)) {
    if (this.regexp_eatGroupName(state)) {
      state.backReferenceNames.push(state.lastStringValue);
      return true;
    }
    state.raise("Invalid named reference");
  }
  return false;
};
pp$1.regexp_eatCharacterEscape = function(state) {
  return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
};
pp$1.regexp_eatCControlLetter = function(state) {
  var start = state.pos;
  if (state.eat(99)) {
    if (this.regexp_eatControlLetter(state)) {
      return true;
    }
    state.pos = start;
  }
  return false;
};
pp$1.regexp_eatZero = function(state) {
  if (state.current() === 48 && !isDecimalDigit(state.lookahead())) {
    state.lastIntValue = 0;
    state.advance();
    return true;
  }
  return false;
};
pp$1.regexp_eatControlEscape = function(state) {
  var ch = state.current();
  if (ch === 116) {
    state.lastIntValue = 9;
    state.advance();
    return true;
  }
  if (ch === 110) {
    state.lastIntValue = 10;
    state.advance();
    return true;
  }
  if (ch === 118) {
    state.lastIntValue = 11;
    state.advance();
    return true;
  }
  if (ch === 102) {
    state.lastIntValue = 12;
    state.advance();
    return true;
  }
  if (ch === 114) {
    state.lastIntValue = 13;
    state.advance();
    return true;
  }
  return false;
};
pp$1.regexp_eatControlLetter = function(state) {
  var ch = state.current();
  if (isControlLetter(ch)) {
    state.lastIntValue = ch % 32;
    state.advance();
    return true;
  }
  return false;
};
function isControlLetter(ch) {
  return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
}
pp$1.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
  if (forceU === void 0)
    forceU = false;
  var start = state.pos;
  var switchU = forceU || state.switchU;
  if (state.eat(117)) {
    if (this.regexp_eatFixedHexDigits(state, 4)) {
      var lead = state.lastIntValue;
      if (switchU && lead >= 55296 && lead <= 56319) {
        var leadSurrogateEnd = state.pos;
        if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
          var trail = state.lastIntValue;
          if (trail >= 56320 && trail <= 57343) {
            state.lastIntValue = (lead - 55296) * 1024 + (trail - 56320) + 65536;
            return true;
          }
        }
        state.pos = leadSurrogateEnd;
        state.lastIntValue = lead;
      }
      return true;
    }
    if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && isValidUnicode(state.lastIntValue)) {
      return true;
    }
    if (switchU) {
      state.raise("Invalid unicode escape");
    }
    state.pos = start;
  }
  return false;
};
function isValidUnicode(ch) {
  return ch >= 0 && ch <= 1114111;
}
pp$1.regexp_eatIdentityEscape = function(state) {
  if (state.switchU) {
    if (this.regexp_eatSyntaxCharacter(state)) {
      return true;
    }
    if (state.eat(47)) {
      state.lastIntValue = 47;
      return true;
    }
    return false;
  }
  var ch = state.current();
  if (ch !== 99 && (!state.switchN || ch !== 107)) {
    state.lastIntValue = ch;
    state.advance();
    return true;
  }
  return false;
};
pp$1.regexp_eatDecimalEscape = function(state) {
  state.lastIntValue = 0;
  var ch = state.current();
  if (ch >= 49 && ch <= 57) {
    do {
      state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
      state.advance();
    } while ((ch = state.current()) >= 48 && ch <= 57);
    return true;
  }
  return false;
};
pp$1.regexp_eatCharacterClassEscape = function(state) {
  var ch = state.current();
  if (isCharacterClassEscape(ch)) {
    state.lastIntValue = -1;
    state.advance();
    return true;
  }
  if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 80 || ch === 112)) {
    state.lastIntValue = -1;
    state.advance();
    if (state.eat(123) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(125)) {
      return true;
    }
    state.raise("Invalid property name");
  }
  return false;
};
function isCharacterClassEscape(ch) {
  return ch === 100 || ch === 68 || ch === 115 || ch === 83 || ch === 119 || ch === 87;
}
pp$1.regexp_eatUnicodePropertyValueExpression = function(state) {
  var start = state.pos;
  if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
    var name = state.lastStringValue;
    if (this.regexp_eatUnicodePropertyValue(state)) {
      var value = state.lastStringValue;
      this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
      return true;
    }
  }
  state.pos = start;
  if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
    var nameOrValue = state.lastStringValue;
    this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
    return true;
  }
  return false;
};
pp$1.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
  if (!hasOwn(state.unicodeProperties.nonBinary, name)) {
    state.raise("Invalid property name");
  }
  if (!state.unicodeProperties.nonBinary[name].test(value)) {
    state.raise("Invalid property value");
  }
};
pp$1.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
  if (!state.unicodeProperties.binary.test(nameOrValue)) {
    state.raise("Invalid property name");
  }
};
pp$1.regexp_eatUnicodePropertyName = function(state) {
  var ch = 0;
  state.lastStringValue = "";
  while (isUnicodePropertyNameCharacter(ch = state.current())) {
    state.lastStringValue += codePointToString(ch);
    state.advance();
  }
  return state.lastStringValue !== "";
};
function isUnicodePropertyNameCharacter(ch) {
  return isControlLetter(ch) || ch === 95;
}
pp$1.regexp_eatUnicodePropertyValue = function(state) {
  var ch = 0;
  state.lastStringValue = "";
  while (isUnicodePropertyValueCharacter(ch = state.current())) {
    state.lastStringValue += codePointToString(ch);
    state.advance();
  }
  return state.lastStringValue !== "";
};
function isUnicodePropertyValueCharacter(ch) {
  return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
}
pp$1.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
  return this.regexp_eatUnicodePropertyValue(state);
};
pp$1.regexp_eatCharacterClass = function(state) {
  if (state.eat(91)) {
    state.eat(94);
    this.regexp_classRanges(state);
    if (state.eat(93)) {
      return true;
    }
    state.raise("Unterminated character class");
  }
  return false;
};
pp$1.regexp_classRanges = function(state) {
  while (this.regexp_eatClassAtom(state)) {
    var left = state.lastIntValue;
    if (state.eat(45) && this.regexp_eatClassAtom(state)) {
      var right = state.lastIntValue;
      if (state.switchU && (left === -1 || right === -1)) {
        state.raise("Invalid character class");
      }
      if (left !== -1 && right !== -1 && left > right) {
        state.raise("Range out of order in character class");
      }
    }
  }
};
pp$1.regexp_eatClassAtom = function(state) {
  var start = state.pos;
  if (state.eat(92)) {
    if (this.regexp_eatClassEscape(state)) {
      return true;
    }
    if (state.switchU) {
      var ch$1 = state.current();
      if (ch$1 === 99 || isOctalDigit(ch$1)) {
        state.raise("Invalid class escape");
      }
      state.raise("Invalid escape");
    }
    state.pos = start;
  }
  var ch = state.current();
  if (ch !== 93) {
    state.lastIntValue = ch;
    state.advance();
    return true;
  }
  return false;
};
pp$1.regexp_eatClassEscape = function(state) {
  var start = state.pos;
  if (state.eat(98)) {
    state.lastIntValue = 8;
    return true;
  }
  if (state.switchU && state.eat(45)) {
    state.lastIntValue = 45;
    return true;
  }
  if (!state.switchU && state.eat(99)) {
    if (this.regexp_eatClassControlLetter(state)) {
      return true;
    }
    state.pos = start;
  }
  return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
};
pp$1.regexp_eatClassControlLetter = function(state) {
  var ch = state.current();
  if (isDecimalDigit(ch) || ch === 95) {
    state.lastIntValue = ch % 32;
    state.advance();
    return true;
  }
  return false;
};
pp$1.regexp_eatHexEscapeSequence = function(state) {
  var start = state.pos;
  if (state.eat(120)) {
    if (this.regexp_eatFixedHexDigits(state, 2)) {
      return true;
    }
    if (state.switchU) {
      state.raise("Invalid escape");
    }
    state.pos = start;
  }
  return false;
};
pp$1.regexp_eatDecimalDigits = function(state) {
  var start = state.pos;
  var ch = 0;
  state.lastIntValue = 0;
  while (isDecimalDigit(ch = state.current())) {
    state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
    state.advance();
  }
  return state.pos !== start;
};
function isDecimalDigit(ch) {
  return ch >= 48 && ch <= 57;
}
pp$1.regexp_eatHexDigits = function(state) {
  var start = state.pos;
  var ch = 0;
  state.lastIntValue = 0;
  while (isHexDigit(ch = state.current())) {
    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
    state.advance();
  }
  return state.pos !== start;
};
function isHexDigit(ch) {
  return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
}
function hexToInt(ch) {
  if (ch >= 65 && ch <= 70) {
    return 10 + (ch - 65);
  }
  if (ch >= 97 && ch <= 102) {
    return 10 + (ch - 97);
  }
  return ch - 48;
}
pp$1.regexp_eatLegacyOctalEscapeSequence = function(state) {
  if (this.regexp_eatOctalDigit(state)) {
    var n1 = state.lastIntValue;
    if (this.regexp_eatOctalDigit(state)) {
      var n2 = state.lastIntValue;
      if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
        state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
      } else {
        state.lastIntValue = n1 * 8 + n2;
      }
    } else {
      state.lastIntValue = n1;
    }
    return true;
  }
  return false;
};
pp$1.regexp_eatOctalDigit = function(state) {
  var ch = state.current();
  if (isOctalDigit(ch)) {
    state.lastIntValue = ch - 48;
    state.advance();
    return true;
  }
  state.lastIntValue = 0;
  return false;
};
function isOctalDigit(ch) {
  return ch >= 48 && ch <= 55;
}
pp$1.regexp_eatFixedHexDigits = function(state, length) {
  var start = state.pos;
  state.lastIntValue = 0;
  for (var i = 0; i < length; ++i) {
    var ch = state.current();
    if (!isHexDigit(ch)) {
      state.pos = start;
      return false;
    }
    state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
    state.advance();
  }
  return true;
};
var Token = function Token2(p) {
  this.type = p.type;
  this.value = p.value;
  this.start = p.start;
  this.end = p.end;
  if (p.options.locations) {
    this.loc = new SourceLocation(p, p.startLoc, p.endLoc);
  }
  if (p.options.ranges) {
    this.range = [p.start, p.end];
  }
};
var pp = Parser.prototype;
pp.next = function(ignoreEscapeSequenceInKeyword) {
  if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {
    this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword);
  }
  if (this.options.onToken) {
    this.options.onToken(new Token(this));
  }
  this.lastTokEnd = this.end;
  this.lastTokStart = this.start;
  this.lastTokEndLoc = this.endLoc;
  this.lastTokStartLoc = this.startLoc;
  this.nextToken();
};
pp.getToken = function() {
  this.next();
  return new Token(this);
};
if (typeof Symbol !== "undefined") {
  pp[Symbol.iterator] = function() {
    var this$1$1 = this;
    return {
      next: function() {
        var token = this$1$1.getToken();
        return {
          done: token.type === types$1.eof,
          value: token
        };
      }
    };
  };
}
pp.nextToken = function() {
  var curContext = this.curContext();
  if (!curContext || !curContext.preserveSpace) {
    this.skipSpace();
  }
  this.start = this.pos;
  if (this.options.locations) {
    this.startLoc = this.curPosition();
  }
  if (this.pos >= this.input.length) {
    return this.finishToken(types$1.eof);
  }
  if (curContext.override) {
    return curContext.override(this);
  } else {
    this.readToken(this.fullCharCodeAtPos());
  }
};
pp.readToken = function(code) {
  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92) {
    return this.readWord();
  }
  return this.getTokenFromCode(code);
};
pp.fullCharCodeAtPos = function() {
  var code = this.input.charCodeAt(this.pos);
  if (code <= 55295 || code >= 56320) {
    return code;
  }
  var next = this.input.charCodeAt(this.pos + 1);
  return next <= 56319 || next >= 57344 ? code : (code << 10) + next - 56613888;
};
pp.skipBlockComment = function() {
  var startLoc = this.options.onComment && this.curPosition();
  var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
  if (end === -1) {
    this.raise(this.pos - 2, "Unterminated comment");
  }
  this.pos = end + 2;
  if (this.options.locations) {
    for (var nextBreak = void 0, pos = start; (nextBreak = nextLineBreak(this.input, pos, this.pos)) > -1; ) {
      ++this.curLine;
      pos = this.lineStart = nextBreak;
    }
  }
  if (this.options.onComment) {
    this.options.onComment(
      true,
      this.input.slice(start + 2, end),
      start,
      this.pos,
      startLoc,
      this.curPosition()
    );
  }
};
pp.skipLineComment = function(startSkip) {
  var start = this.pos;
  var startLoc = this.options.onComment && this.curPosition();
  var ch = this.input.charCodeAt(this.pos += startSkip);
  while (this.pos < this.input.length && !isNewLine(ch)) {
    ch = this.input.charCodeAt(++this.pos);
  }
  if (this.options.onComment) {
    this.options.onComment(
      false,
      this.input.slice(start + startSkip, this.pos),
      start,
      this.pos,
      startLoc,
      this.curPosition()
    );
  }
};
pp.skipSpace = function() {
  loop:
    while (this.pos < this.input.length) {
      var ch = this.input.charCodeAt(this.pos);
      switch (ch) {
        case 32:
        case 160:
          ++this.pos;
          break;
        case 13:
          if (this.input.charCodeAt(this.pos + 1) === 10) {
            ++this.pos;
          }
        case 10:
        case 8232:
        case 8233:
          ++this.pos;
          if (this.options.locations) {
            ++this.curLine;
            this.lineStart = this.pos;
          }
          break;
        case 47:
          switch (this.input.charCodeAt(this.pos + 1)) {
            case 42:
              this.skipBlockComment();
              break;
            case 47:
              this.skipLineComment(2);
              break;
            default:
              break loop;
          }
          break;
        default:
          if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
            ++this.pos;
          } else {
            break loop;
          }
      }
    }
};
pp.finishToken = function(type, val) {
  this.end = this.pos;
  if (this.options.locations) {
    this.endLoc = this.curPosition();
  }
  var prevType = this.type;
  this.type = type;
  this.value = val;
  this.updateContext(prevType);
};
pp.readToken_dot = function() {
  var next = this.input.charCodeAt(this.pos + 1);
  if (next >= 48 && next <= 57) {
    return this.readNumber(true);
  }
  var next2 = this.input.charCodeAt(this.pos + 2);
  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
    this.pos += 3;
    return this.finishToken(types$1.ellipsis);
  } else {
    ++this.pos;
    return this.finishToken(types$1.dot);
  }
};
pp.readToken_slash = function() {
  var next = this.input.charCodeAt(this.pos + 1);
  if (this.exprAllowed) {
    ++this.pos;
    return this.readRegexp();
  }
  if (next === 61) {
    return this.finishOp(types$1.assign, 2);
  }
  return this.finishOp(types$1.slash, 1);
};
pp.readToken_mult_modulo_exp = function(code) {
  var next = this.input.charCodeAt(this.pos + 1);
  var size = 1;
  var tokentype = code === 42 ? types$1.star : types$1.modulo;
  if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
    ++size;
    tokentype = types$1.starstar;
    next = this.input.charCodeAt(this.pos + 2);
  }
  if (next === 61) {
    return this.finishOp(types$1.assign, size + 1);
  }
  return this.finishOp(tokentype, size);
};
pp.readToken_pipe_amp = function(code) {
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === code) {
    if (this.options.ecmaVersion >= 12) {
      var next2 = this.input.charCodeAt(this.pos + 2);
      if (next2 === 61) {
        return this.finishOp(types$1.assign, 3);
      }
    }
    return this.finishOp(code === 124 ? types$1.logicalOR : types$1.logicalAND, 2);
  }
  if (next === 61) {
    return this.finishOp(types$1.assign, 2);
  }
  return this.finishOp(code === 124 ? types$1.bitwiseOR : types$1.bitwiseAND, 1);
};
pp.readToken_caret = function() {
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === 61) {
    return this.finishOp(types$1.assign, 2);
  }
  return this.finishOp(types$1.bitwiseXOR, 1);
};
pp.readToken_plus_min = function(code) {
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === code) {
    if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
      this.skipLineComment(3);
      this.skipSpace();
      return this.nextToken();
    }
    return this.finishOp(types$1.incDec, 2);
  }
  if (next === 61) {
    return this.finishOp(types$1.assign, 2);
  }
  return this.finishOp(types$1.plusMin, 1);
};
pp.readToken_lt_gt = function(code) {
  var next = this.input.charCodeAt(this.pos + 1);
  var size = 1;
  if (next === code) {
    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
    if (this.input.charCodeAt(this.pos + size) === 61) {
      return this.finishOp(types$1.assign, size + 1);
    }
    return this.finishOp(types$1.bitShift, size);
  }
  if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
    this.skipLineComment(4);
    this.skipSpace();
    return this.nextToken();
  }
  if (next === 61) {
    size = 2;
  }
  return this.finishOp(types$1.relational, size);
};
pp.readToken_eq_excl = function(code) {
  var next = this.input.charCodeAt(this.pos + 1);
  if (next === 61) {
    return this.finishOp(types$1.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
  }
  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
    this.pos += 2;
    return this.finishToken(types$1.arrow);
  }
  return this.finishOp(code === 61 ? types$1.eq : types$1.prefix, 1);
};
pp.readToken_question = function() {
  var ecmaVersion = this.options.ecmaVersion;
  if (ecmaVersion >= 11) {
    var next = this.input.charCodeAt(this.pos + 1);
    if (next === 46) {
      var next2 = this.input.charCodeAt(this.pos + 2);
      if (next2 < 48 || next2 > 57) {
        return this.finishOp(types$1.questionDot, 2);
      }
    }
    if (next === 63) {
      if (ecmaVersion >= 12) {
        var next2$1 = this.input.charCodeAt(this.pos + 2);
        if (next2$1 === 61) {
          return this.finishOp(types$1.assign, 3);
        }
      }
      return this.finishOp(types$1.coalesce, 2);
    }
  }
  return this.finishOp(types$1.question, 1);
};
pp.readToken_numberSign = function() {
  var ecmaVersion = this.options.ecmaVersion;
  var code = 35;
  if (ecmaVersion >= 13) {
    ++this.pos;
    code = this.fullCharCodeAtPos();
    if (isIdentifierStart(code, true) || code === 92) {
      return this.finishToken(types$1.privateId, this.readWord1());
    }
  }
  this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
};
pp.getTokenFromCode = function(code) {
  switch (code) {
    case 46:
      return this.readToken_dot();
    case 40:
      ++this.pos;
      return this.finishToken(types$1.parenL);
    case 41:
      ++this.pos;
      return this.finishToken(types$1.parenR);
    case 59:
      ++this.pos;
      return this.finishToken(types$1.semi);
    case 44:
      ++this.pos;
      return this.finishToken(types$1.comma);
    case 91:
      ++this.pos;
      return this.finishToken(types$1.bracketL);
    case 93:
      ++this.pos;
      return this.finishToken(types$1.bracketR);
    case 123:
      ++this.pos;
      return this.finishToken(types$1.braceL);
    case 125:
      ++this.pos;
      return this.finishToken(types$1.braceR);
    case 58:
      ++this.pos;
      return this.finishToken(types$1.colon);
    case 96:
      if (this.options.ecmaVersion < 6) {
        break;
      }
      ++this.pos;
      return this.finishToken(types$1.backQuote);
    case 48:
      var next = this.input.charCodeAt(this.pos + 1);
      if (next === 120 || next === 88) {
        return this.readRadixNumber(16);
      }
      if (this.options.ecmaVersion >= 6) {
        if (next === 111 || next === 79) {
          return this.readRadixNumber(8);
        }
        if (next === 98 || next === 66) {
          return this.readRadixNumber(2);
        }
      }
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
      return this.readNumber(false);
    case 34:
    case 39:
      return this.readString(code);
    case 47:
      return this.readToken_slash();
    case 37:
    case 42:
      return this.readToken_mult_modulo_exp(code);
    case 124:
    case 38:
      return this.readToken_pipe_amp(code);
    case 94:
      return this.readToken_caret();
    case 43:
    case 45:
      return this.readToken_plus_min(code);
    case 60:
    case 62:
      return this.readToken_lt_gt(code);
    case 61:
    case 33:
      return this.readToken_eq_excl(code);
    case 63:
      return this.readToken_question();
    case 126:
      return this.finishOp(types$1.prefix, 1);
    case 35:
      return this.readToken_numberSign();
  }
  this.raise(this.pos, "Unexpected character '" + codePointToString(code) + "'");
};
pp.finishOp = function(type, size) {
  var str = this.input.slice(this.pos, this.pos + size);
  this.pos += size;
  return this.finishToken(type, str);
};
pp.readRegexp = function() {
  var escaped, inClass, start = this.pos;
  for (; ; ) {
    if (this.pos >= this.input.length) {
      this.raise(start, "Unterminated regular expression");
    }
    var ch = this.input.charAt(this.pos);
    if (lineBreak.test(ch)) {
      this.raise(start, "Unterminated regular expression");
    }
    if (!escaped) {
      if (ch === "[") {
        inClass = true;
      } else if (ch === "]" && inClass) {
        inClass = false;
      } else if (ch === "/" && !inClass) {
        break;
      }
      escaped = ch === "\\";
    } else {
      escaped = false;
    }
    ++this.pos;
  }
  var pattern = this.input.slice(start, this.pos);
  ++this.pos;
  var flagsStart = this.pos;
  var flags = this.readWord1();
  if (this.containsEsc) {
    this.unexpected(flagsStart);
  }
  var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
  state.reset(start, pattern, flags);
  this.validateRegExpFlags(state);
  this.validateRegExpPattern(state);
  var value = null;
  try {
    value = new RegExp(pattern, flags);
  } catch (e) {
  }
  return this.finishToken(types$1.regexp, { pattern, flags, value });
};
pp.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
  var allowSeparators = this.options.ecmaVersion >= 12 && len === void 0;
  var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;
  var start = this.pos, total = 0, lastCode = 0;
  for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {
    var code = this.input.charCodeAt(this.pos), val = void 0;
    if (allowSeparators && code === 95) {
      if (isLegacyOctalNumericLiteral) {
        this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals");
      }
      if (lastCode === 95) {
        this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore");
      }
      if (i === 0) {
        this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits");
      }
      lastCode = code;
      continue;
    }
    if (code >= 97) {
      val = code - 97 + 10;
    } else if (code >= 65) {
      val = code - 65 + 10;
    } else if (code >= 48 && code <= 57) {
      val = code - 48;
    } else {
      val = Infinity;
    }
    if (val >= radix) {
      break;
    }
    lastCode = code;
    total = total * radix + val;
  }
  if (allowSeparators && lastCode === 95) {
    this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits");
  }
  if (this.pos === start || len != null && this.pos - start !== len) {
    return null;
  }
  return total;
};
function stringToNumber(str, isLegacyOctalNumericLiteral) {
  if (isLegacyOctalNumericLiteral) {
    return parseInt(str, 8);
  }
  return parseFloat(str.replace(/_/g, ""));
}
function stringToBigInt(str) {
  if (typeof BigInt !== "function") {
    return null;
  }
  return BigInt(str.replace(/_/g, ""));
}
pp.readRadixNumber = function(radix) {
  var start = this.pos;
  this.pos += 2;
  var val = this.readInt(radix);
  if (val == null) {
    this.raise(this.start + 2, "Expected number in radix " + radix);
  }
  if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
    val = stringToBigInt(this.input.slice(start, this.pos));
    ++this.pos;
  } else if (isIdentifierStart(this.fullCharCodeAtPos())) {
    this.raise(this.pos, "Identifier directly after number");
  }
  return this.finishToken(types$1.num, val);
};
pp.readNumber = function(startsWithDot) {
  var start = this.pos;
  if (!startsWithDot && this.readInt(10, void 0, true) === null) {
    this.raise(start, "Invalid number");
  }
  var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
  if (octal && this.strict) {
    this.raise(start, "Invalid number");
  }
  var next = this.input.charCodeAt(this.pos);
  if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
    var val$1 = stringToBigInt(this.input.slice(start, this.pos));
    ++this.pos;
    if (isIdentifierStart(this.fullCharCodeAtPos())) {
      this.raise(this.pos, "Identifier directly after number");
    }
    return this.finishToken(types$1.num, val$1);
  }
  if (octal && /[89]/.test(this.input.slice(start, this.pos))) {
    octal = false;
  }
  if (next === 46 && !octal) {
    ++this.pos;
    this.readInt(10);
    next = this.input.charCodeAt(this.pos);
  }
  if ((next === 69 || next === 101) && !octal) {
    next = this.input.charCodeAt(++this.pos);
    if (next === 43 || next === 45) {
      ++this.pos;
    }
    if (this.readInt(10) === null) {
      this.raise(start, "Invalid number");
    }
  }
  if (isIdentifierStart(this.fullCharCodeAtPos())) {
    this.raise(this.pos, "Identifier directly after number");
  }
  var val = stringToNumber(this.input.slice(start, this.pos), octal);
  return this.finishToken(types$1.num, val);
};
pp.readCodePoint = function() {
  var ch = this.input.charCodeAt(this.pos), code;
  if (ch === 123) {
    if (this.options.ecmaVersion < 6) {
      this.unexpected();
    }
    var codePos = ++this.pos;
    code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
    ++this.pos;
    if (code > 1114111) {
      this.invalidStringToken(codePos, "Code point out of bounds");
    }
  } else {
    code = this.readHexChar(4);
  }
  return code;
};
pp.readString = function(quote) {
  var out = "", chunkStart = ++this.pos;
  for (; ; ) {
    if (this.pos >= this.input.length) {
      this.raise(this.start, "Unterminated string constant");
    }
    var ch = this.input.charCodeAt(this.pos);
    if (ch === quote) {
      break;
    }
    if (ch === 92) {
      out += this.input.slice(chunkStart, this.pos);
      out += this.readEscapedChar(false);
      chunkStart = this.pos;
    } else if (ch === 8232 || ch === 8233) {
      if (this.options.ecmaVersion < 10) {
        this.raise(this.start, "Unterminated string constant");
      }
      ++this.pos;
      if (this.options.locations) {
        this.curLine++;
        this.lineStart = this.pos;
      }
    } else {
      if (isNewLine(ch)) {
        this.raise(this.start, "Unterminated string constant");
      }
      ++this.pos;
    }
  }
  out += this.input.slice(chunkStart, this.pos++);
  return this.finishToken(types$1.string, out);
};
var INVALID_TEMPLATE_ESCAPE_ERROR = {};
pp.tryReadTemplateToken = function() {
  this.inTemplateElement = true;
  try {
    this.readTmplToken();
  } catch (err) {
    if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
      this.readInvalidTemplateToken();
    } else {
      throw err;
    }
  }
  this.inTemplateElement = false;
};
pp.invalidStringToken = function(position, message) {
  if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
    throw INVALID_TEMPLATE_ESCAPE_ERROR;
  } else {
    this.raise(position, message);
  }
};
pp.readTmplToken = function() {
  var out = "", chunkStart = this.pos;
  for (; ; ) {
    if (this.pos >= this.input.length) {
      this.raise(this.start, "Unterminated template");
    }
    var ch = this.input.charCodeAt(this.pos);
    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
      if (this.pos === this.start && (this.type === types$1.template || this.type === types$1.invalidTemplate)) {
        if (ch === 36) {
          this.pos += 2;
          return this.finishToken(types$1.dollarBraceL);
        } else {
          ++this.pos;
          return this.finishToken(types$1.backQuote);
        }
      }
      out += this.input.slice(chunkStart, this.pos);
      return this.finishToken(types$1.template, out);
    }
    if (ch === 92) {
      out += this.input.slice(chunkStart, this.pos);
      out += this.readEscapedChar(true);
      chunkStart = this.pos;
    } else if (isNewLine(ch)) {
      out += this.input.slice(chunkStart, this.pos);
      ++this.pos;
      switch (ch) {
        case 13:
          if (this.input.charCodeAt(this.pos) === 10) {
            ++this.pos;
          }
        case 10:
          out += "\n";
          break;
        default:
          out += String.fromCharCode(ch);
          break;
      }
      if (this.options.locations) {
        ++this.curLine;
        this.lineStart = this.pos;
      }
      chunkStart = this.pos;
    } else {
      ++this.pos;
    }
  }
};
pp.readInvalidTemplateToken = function() {
  for (; this.pos < this.input.length; this.pos++) {
    switch (this.input[this.pos]) {
      case "\\":
        ++this.pos;
        break;
      case "$":
        if (this.input[this.pos + 1] !== "{") {
          break;
        }
      case "`":
        return this.finishToken(types$1.invalidTemplate, this.input.slice(this.start, this.pos));
    }
  }
  this.raise(this.start, "Unterminated template");
};
pp.readEscapedChar = function(inTemplate) {
  var ch = this.input.charCodeAt(++this.pos);
  ++this.pos;
  switch (ch) {
    case 110:
      return "\n";
    case 114:
      return "\r";
    case 120:
      return String.fromCharCode(this.readHexChar(2));
    case 117:
      return codePointToString(this.readCodePoint());
    case 116:
      return "	";
    case 98:
      return "\b";
    case 118:
      return "\v";
    case 102:
      return "\f";
    case 13:
      if (this.input.charCodeAt(this.pos) === 10) {
        ++this.pos;
      }
    case 10:
      if (this.options.locations) {
        this.lineStart = this.pos;
        ++this.curLine;
      }
      return "";
    case 56:
    case 57:
      if (this.strict) {
        this.invalidStringToken(
          this.pos - 1,
          "Invalid escape sequence"
        );
      }
      if (inTemplate) {
        var codePos = this.pos - 1;
        this.invalidStringToken(
          codePos,
          "Invalid escape sequence in template string"
        );
        return null;
      }
    default:
      if (ch >= 48 && ch <= 55) {
        var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
        var octal = parseInt(octalStr, 8);
        if (octal > 255) {
          octalStr = octalStr.slice(0, -1);
          octal = parseInt(octalStr, 8);
        }
        this.pos += octalStr.length - 1;
        ch = this.input.charCodeAt(this.pos);
        if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
          this.invalidStringToken(
            this.pos - 1 - octalStr.length,
            inTemplate ? "Octal literal in template string" : "Octal literal in strict mode"
          );
        }
        return String.fromCharCode(octal);
      }
      if (isNewLine(ch)) {
        return "";
      }
      return String.fromCharCode(ch);
  }
};
pp.readHexChar = function(len) {
  var codePos = this.pos;
  var n = this.readInt(16, len);
  if (n === null) {
    this.invalidStringToken(codePos, "Bad character escape sequence");
  }
  return n;
};
pp.readWord1 = function() {
  this.containsEsc = false;
  var word = "", first = true, chunkStart = this.pos;
  var astral = this.options.ecmaVersion >= 6;
  while (this.pos < this.input.length) {
    var ch = this.fullCharCodeAtPos();
    if (isIdentifierChar(ch, astral)) {
      this.pos += ch <= 65535 ? 1 : 2;
    } else if (ch === 92) {
      this.containsEsc = true;
      word += this.input.slice(chunkStart, this.pos);
      var escStart = this.pos;
      if (this.input.charCodeAt(++this.pos) !== 117) {
        this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
      }
      ++this.pos;
      var esc = this.readCodePoint();
      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
        this.invalidStringToken(escStart, "Invalid Unicode escape");
      }
      word += codePointToString(esc);
      chunkStart = this.pos;
    } else {
      break;
    }
    first = false;
  }
  return word + this.input.slice(chunkStart, this.pos);
};
pp.readWord = function() {
  var word = this.readWord1();
  var type = types$1.name;
  if (this.keywords.test(word)) {
    type = keywords[word];
  }
  return this.finishToken(type, word);
};
var version = "8.8.1";
Parser.acorn = {
  Parser,
  version,
  defaultOptions,
  Position,
  SourceLocation,
  getLineInfo,
  Node,
  TokenType,
  tokTypes: types$1,
  keywordTypes: keywords,
  TokContext,
  tokContexts: types,
  isIdentifierChar,
  isIdentifierStart,
  Token,
  isNewLine,
  lineBreak,
  lineBreakG,
  nonASCIIwhitespace
};

// node_modules/.pnpm/mlly@1.0.0/node_modules/mlly/dist/index.mjs
var _module2 = require('module');



// node_modules/.pnpm/ufo@1.0.0/node_modules/ufo/dist/index.mjs
var r = String.fromCharCode;
var TRAILING_SLASH_RE = /\/$|\/\?/;
function hasTrailingSlash(input = "", queryParameters = false) {
  if (!queryParameters) {
    return input.endsWith("/");
  }
  return TRAILING_SLASH_RE.test(input);
}
function withTrailingSlash(input = "", queryParameters = false) {
  if (!queryParameters) {
    return input.endsWith("/") ? input : input + "/";
  }
  if (hasTrailingSlash(input, true)) {
    return input || "/";
  }
  const [s0, ...s] = input.split("?");
  return s0 + "/" + (s.length > 0 ? `?${s.join("?")}` : "");
}
function hasLeadingSlash(input = "") {
  return input.startsWith("/");
}
function withoutLeadingSlash(input = "") {
  return (hasLeadingSlash(input) ? input.slice(1) : input) || "/";
}
function isNonEmptyURL(url) {
  return url && url !== "/";
}
function joinURL(base, ...input) {
  let url = base || "";
  for (const index2 of input.filter((url2) => isNonEmptyURL(url2))) {
    url = url ? withTrailingSlash(url) + withoutLeadingSlash(index2) : index2;
  }
  return url;
}

// node_modules/.pnpm/mlly@1.0.0/node_modules/mlly/dist/index.mjs


var _path2 = require('path'); var _path3 = _interopRequireDefault2(_path2);
var _assert2 = require('assert'); var _assert3 = _interopRequireDefault2(_assert2);
var _util2 = require('util');


// node_modules/.pnpm/pkg-types@1.0.1/node_modules/pkg-types/dist/index.mjs


var defaultFindOptions = {
  startingFrom: ".",
  rootPattern: /^node_modules$/,
  reverse: false,
  test: (filePath) => {
    try {
      if (_fs3.statSync.call(void 0, filePath).isFile()) {
        return true;
      }
    } catch (e) {
    }
  }
};
async function findFile(filename, _options = {}) {
  const options = { ...defaultFindOptions, ..._options };
  const basePath = _chunkKL7XZQQ2cjs.resolve.call(void 0, options.startingFrom);
  const leadingSlash = basePath[0] === "/";
  const segments = basePath.split("/").filter(Boolean);
  if (leadingSlash) {
    segments[0] = "/" + segments[0];
  }
  let root = segments.findIndex((r2) => r2.match(options.rootPattern));
  if (root === -1) {
    root = 0;
  }
  if (!options.reverse) {
    for (let index2 = segments.length; index2 > root; index2--) {
      const filePath = _chunkKL7XZQQ2cjs.join.call(void 0, ...segments.slice(0, index2), filename);
      if (await options.test(filePath)) {
        return filePath;
      }
    }
  } else {
    for (let index2 = root + 1; index2 <= segments.length; index2++) {
      const filePath = _chunkKL7XZQQ2cjs.join.call(void 0, ...segments.slice(0, index2), filename);
      if (await options.test(filePath)) {
        return filePath;
      }
    }
  }
  throw new Error(`Cannot find matching ${filename} in ${options.startingFrom} or parent directories`);
}
function findNearestFile(filename, _options = {}) {
  return findFile(filename, _options);
}
var lockFiles = ["yarn.lock", "package-lock.json", "pnpm-lock.yaml", "npm-shrinkwrap.json", "bun.lockb"];
async function resolveLockfile(id = process.cwd(), options = {}) {
  const resolvedPath = _chunkKL7XZQQ2cjs.isAbsolute.call(void 0, id) ? id : await resolvePath(id, options);
  const _options = { startingFrom: resolvedPath, ...options };
  for (const lockFile of lockFiles) {
    try {
      return await findNearestFile(lockFile, _options);
    } catch (e) {
    }
  }
  throw new Error("No lockfile found from " + id);
}
async function findWorkspaceDir(id = process.cwd(), options = {}) {
  const resolvedPath = _chunkKL7XZQQ2cjs.isAbsolute.call(void 0, id) ? id : await resolvePath(id, options);
  const _options = { startingFrom: resolvedPath, ...options };
  try {
    const r2 = await findNearestFile(".git/config", _options);
    return _path2.resolve.call(void 0, r2, "../..");
  } catch (e) {
  }
  try {
    const r2 = await resolveLockfile(resolvedPath, { ..._options, reverse: true });
    return _path2.dirname.call(void 0, r2);
  } catch (e) {
  }
  try {
    const r2 = await findFile(resolvedPath, _options);
    return _path2.dirname.call(void 0, r2);
  } catch (e) {
  }
  throw new Error("Cannot detect workspace root from " + id);
}

// node_modules/.pnpm/mlly@1.0.0/node_modules/mlly/dist/index.mjs
var BUILTIN_MODULES = new Set(_module2.builtinModules);
function normalizeSlash(string_) {
  return string_.replace(/\\/g, "/");
}
function pcall(function_, ...arguments_) {
  try {
    return Promise.resolve(function_(...arguments_)).catch((error) => perr(error));
  } catch (error) {
    return perr(error);
  }
}
function perr(_error) {
  const error = new Error(_error);
  error.code = _error.code;
  Error.captureStackTrace(error, pcall);
  return Promise.reject(error);
}
var reader = { read };
var packageJsonReader = reader;
function read(jsonPath) {
  return find(_path3.default.dirname(jsonPath));
}
function find(dir) {
  try {
    const string = _fs4.default.readFileSync(
      _path3.default.toNamespacedPath(_path3.default.join(dir, "package.json")),
      "utf8"
    );
    return { string };
  } catch (error) {
    if (error.code === "ENOENT") {
      const parent = _path3.default.dirname(dir);
      if (dir !== parent) {
        return find(parent);
      }
      return { string: void 0 };
    }
    throw error;
  }
}
var isWindows = process.platform === "win32";
var own$1 = {}.hasOwnProperty;
var codes = {};
var messages = /* @__PURE__ */ new Map();
var nodeInternalPrefix = "__node_internal_";
var userStackTraceLimit;
codes.ERR_INVALID_MODULE_SPECIFIER = createError(
  "ERR_INVALID_MODULE_SPECIFIER",
  (request, reason, base = void 0) => {
    return `Invalid module "${request}" ${reason}${base ? ` imported from ${base}` : ""}`;
  },
  TypeError
);
codes.ERR_INVALID_PACKAGE_CONFIG = createError(
  "ERR_INVALID_PACKAGE_CONFIG",
  (path3, base, message) => {
    return `Invalid package config ${path3}${base ? ` while importing ${base}` : ""}${message ? `. ${message}` : ""}`;
  },
  Error
);
codes.ERR_INVALID_PACKAGE_TARGET = createError(
  "ERR_INVALID_PACKAGE_TARGET",
  (pkgPath, key, target, isImport = false, base = void 0) => {
    const relError = typeof target === "string" && !isImport && target.length > 0 && !target.startsWith("./");
    if (key === ".") {
      _assert3.default.call(void 0, isImport === false);
      return `Invalid "exports" main target ${JSON.stringify(target)} defined in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ""}${relError ? '; targets must start with "./"' : ""}`;
    }
    return `Invalid "${isImport ? "imports" : "exports"}" target ${JSON.stringify(
      target
    )} defined for '${key}' in the package config ${pkgPath}package.json${base ? ` imported from ${base}` : ""}${relError ? '; targets must start with "./"' : ""}`;
  },
  Error
);
codes.ERR_MODULE_NOT_FOUND = createError(
  "ERR_MODULE_NOT_FOUND",
  (path3, base, type = "package") => {
    return `Cannot find ${type} '${path3}' imported from ${base}`;
  },
  Error
);
codes.ERR_PACKAGE_IMPORT_NOT_DEFINED = createError(
  "ERR_PACKAGE_IMPORT_NOT_DEFINED",
  (specifier, packagePath, base) => {
    return `Package import specifier "${specifier}" is not defined${packagePath ? ` in package ${packagePath}package.json` : ""} imported from ${base}`;
  },
  TypeError
);
codes.ERR_PACKAGE_PATH_NOT_EXPORTED = createError(
  "ERR_PACKAGE_PATH_NOT_EXPORTED",
  (pkgPath, subpath, base = void 0) => {
    if (subpath === ".") {
      return `No "exports" main defined in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}`;
    }
    return `Package subpath '${subpath}' is not defined by "exports" in ${pkgPath}package.json${base ? ` imported from ${base}` : ""}`;
  },
  Error
);
codes.ERR_UNSUPPORTED_DIR_IMPORT = createError(
  "ERR_UNSUPPORTED_DIR_IMPORT",
  "Directory import '%s' is not supported resolving ES modules imported from %s",
  Error
);
codes.ERR_UNKNOWN_FILE_EXTENSION = createError(
  "ERR_UNKNOWN_FILE_EXTENSION",
  'Unknown file extension "%s" for %s',
  TypeError
);
codes.ERR_INVALID_ARG_VALUE = createError(
  "ERR_INVALID_ARG_VALUE",
  (name, value, reason = "is invalid") => {
    let inspected = _util2.inspect.call(void 0, value);
    if (inspected.length > 128) {
      inspected = `${inspected.slice(0, 128)}...`;
    }
    const type = name.includes(".") ? "property" : "argument";
    return `The ${type} '${name}' ${reason}. Received ${inspected}`;
  },
  TypeError
);
codes.ERR_UNSUPPORTED_ESM_URL_SCHEME = createError(
  "ERR_UNSUPPORTED_ESM_URL_SCHEME",
  (url) => {
    let message = "Only file and data URLs are supported by the default ESM loader";
    if (isWindows && url.protocol.length === 2) {
      message += ". On Windows, absolute paths must be valid file:// URLs";
    }
    message += `. Received protocol '${url.protocol}'`;
    return message;
  },
  Error
);
function createError(sym, value, def) {
  messages.set(sym, value);
  return makeNodeErrorWithCode(def, sym);
}
function makeNodeErrorWithCode(Base, key) {
  return NodeError;
  function NodeError(...args) {
    const limit = Error.stackTraceLimit;
    if (isErrorStackTraceLimitWritable()) {
      Error.stackTraceLimit = 0;
    }
    const error = new Base();
    if (isErrorStackTraceLimitWritable()) {
      Error.stackTraceLimit = limit;
    }
    const message = getMessage(key, args, error);
    Object.defineProperty(error, "message", {
      value: message,
      enumerable: false,
      writable: true,
      configurable: true
    });
    Object.defineProperty(error, "toString", {
      value() {
        return `${this.name} [${key}]: ${this.message}`;
      },
      enumerable: false,
      writable: true,
      configurable: true
    });
    addCodeToName(error, Base.name, key);
    error.code = key;
    return error;
  }
}
var addCodeToName = hideStackFrames(
  function(error, name, code) {
    error = captureLargerStackTrace(error);
    error.name = `${name} [${code}]`;
    error.stack;
    if (name === "SystemError") {
      Object.defineProperty(error, "name", {
        value: name,
        enumerable: false,
        writable: true,
        configurable: true
      });
    } else {
      delete error.name;
    }
  }
);
function isErrorStackTraceLimitWritable() {
  const desc = Object.getOwnPropertyDescriptor(Error, "stackTraceLimit");
  if (desc === void 0) {
    return Object.isExtensible(Error);
  }
  return own$1.call(desc, "writable") ? desc.writable : desc.set !== void 0;
}
function hideStackFrames(fn) {
  const hidden = nodeInternalPrefix + fn.name;
  Object.defineProperty(fn, "name", { value: hidden });
  return fn;
}
var captureLargerStackTrace = hideStackFrames(
  function(error) {
    const stackTraceLimitIsWritable = isErrorStackTraceLimitWritable();
    if (stackTraceLimitIsWritable) {
      userStackTraceLimit = Error.stackTraceLimit;
      Error.stackTraceLimit = Number.POSITIVE_INFINITY;
    }
    Error.captureStackTrace(error);
    if (stackTraceLimitIsWritable) {
      Error.stackTraceLimit = userStackTraceLimit;
    }
    return error;
  }
);
function getMessage(key, args, self2) {
  const message = messages.get(key);
  if (typeof message === "function") {
    _assert3.default.call(void 0, 
      message.length <= args.length,
      `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${message.length}).`
    );
    return Reflect.apply(message, self2, args);
  }
  const expectedLength = (message.match(/%[dfijoOs]/g) || []).length;
  _assert3.default.call(void 0, 
    expectedLength === args.length,
    `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`
  );
  if (args.length === 0) {
    return message;
  }
  args.unshift(message);
  return Reflect.apply(_util2.format, null, args);
}
var { ERR_UNKNOWN_FILE_EXTENSION } = codes;
var extensionFormatMap = {
  __proto__: null,
  ".cjs": "commonjs",
  ".js": "module",
  ".mjs": "module"
};
function defaultGetFormat(url) {
  if (url.startsWith("node:")) {
    return { format: "builtin" };
  }
  const parsed = new (0, _url2.URL)(url);
  if (parsed.protocol === "data:") {
    const { 1: mime } = /^([^/]+\/[^;,]+)[^,]*?(;base64)?,/.exec(
      parsed.pathname
    ) || [null, null];
    const format2 = mime === "text/javascript" ? "module" : null;
    return { format: format2 };
  }
  if (parsed.protocol === "file:") {
    const ext = _path3.default.extname(parsed.pathname);
    let format2;
    if (ext === ".js") {
      format2 = getPackageType(parsed.href) === "module" ? "module" : "commonjs";
    } else {
      format2 = extensionFormatMap[ext];
    }
    if (!format2) {
      throw new ERR_UNKNOWN_FILE_EXTENSION(ext, _url2.fileURLToPath.call(void 0, url));
    }
    return { format: format2 || null };
  }
  return { format: null };
}
var {
  ERR_INVALID_MODULE_SPECIFIER,
  ERR_INVALID_PACKAGE_CONFIG,
  ERR_INVALID_PACKAGE_TARGET,
  ERR_MODULE_NOT_FOUND,
  ERR_PACKAGE_IMPORT_NOT_DEFINED,
  ERR_PACKAGE_PATH_NOT_EXPORTED,
  ERR_UNSUPPORTED_DIR_IMPORT,
  ERR_UNSUPPORTED_ESM_URL_SCHEME,
  ERR_INVALID_ARG_VALUE
} = codes;
var own = {}.hasOwnProperty;
Object.freeze(["node", "import"]);
var invalidSegmentRegEx = /(^|\\|\/)(\.\.?|node_modules)(\\|\/|$)/;
var patternRegEx = /\*/g;
var encodedSepRegEx = /%2f|%2c/i;
var emittedPackageWarnings = /* @__PURE__ */ new Set();
var packageJsonCache = /* @__PURE__ */ new Map();
function emitFolderMapDeprecation(match, pjsonUrl, isExports, base) {
  const pjsonPath = _url2.fileURLToPath.call(void 0, pjsonUrl);
  if (emittedPackageWarnings.has(pjsonPath + "|" + match)) {
    return;
  }
  emittedPackageWarnings.add(pjsonPath + "|" + match);
  process.emitWarning(
    `Use of deprecated folder mapping "${match}" in the ${isExports ? '"exports"' : '"imports"'} field module resolution of the package at ${pjsonPath}${base ? ` imported from ${_url2.fileURLToPath.call(void 0, base)}` : ""}.
Update this package.json to use a subpath pattern like "${match}*".`,
    "DeprecationWarning",
    "DEP0148"
  );
}
function emitLegacyIndexDeprecation(url, packageJsonUrl, base, main) {
  const { format: format2 } = defaultGetFormat(url.href);
  if (format2 !== "module") {
    return;
  }
  const path22 = _url2.fileURLToPath.call(void 0, url.href);
  const pkgPath = _url2.fileURLToPath.call(void 0, new URL(".", packageJsonUrl));
  const basePath = _url2.fileURLToPath.call(void 0, base);
  if (main) {
    process.emitWarning(
      `Package ${pkgPath} has a "main" field set to ${JSON.stringify(main)}, excluding the full filename and extension to the resolved file at "${path22.slice(
        pkgPath.length
      )}", imported from ${basePath}.
 Automatic extension resolution of the "main" field isdeprecated for ES modules.`,
      "DeprecationWarning",
      "DEP0151"
    );
  } else {
    process.emitWarning(
      `No "main" or "exports" field defined in the package.json for ${pkgPath} resolving the main entry point "${path22.slice(
        pkgPath.length
      )}", imported from ${basePath}.
Default "index" lookups for the main are deprecated for ES modules.`,
      "DeprecationWarning",
      "DEP0151"
    );
  }
}
function tryStatSync(path22) {
  try {
    return _fs3.statSync.call(void 0, path22);
  } catch (e) {
    return new (0, _fs3.Stats)();
  }
}
function getPackageConfig(path22, specifier, base) {
  const existing = packageJsonCache.get(path22);
  if (existing !== void 0) {
    return existing;
  }
  const source = packageJsonReader.read(path22).string;
  if (source === void 0) {
    const packageConfig2 = {
      pjsonPath: path22,
      exists: false,
      main: void 0,
      name: void 0,
      type: "none",
      exports: void 0,
      imports: void 0
    };
    packageJsonCache.set(path22, packageConfig2);
    return packageConfig2;
  }
  let packageJson;
  try {
    packageJson = JSON.parse(source);
  } catch (error) {
    throw new ERR_INVALID_PACKAGE_CONFIG(
      path22,
      (base ? `"${specifier}" from ` : "") + _url2.fileURLToPath.call(void 0, base || specifier),
      error.message
    );
  }
  const { exports, imports, main, name, type } = packageJson;
  const packageConfig = {
    pjsonPath: path22,
    exists: true,
    main: typeof main === "string" ? main : void 0,
    name: typeof name === "string" ? name : void 0,
    type: type === "module" || type === "commonjs" ? type : "none",
    exports,
    imports: imports && typeof imports === "object" ? imports : void 0
  };
  packageJsonCache.set(path22, packageConfig);
  return packageConfig;
}
function getPackageScopeConfig(resolved) {
  let packageJsonUrl = new URL("./package.json", resolved);
  while (true) {
    const packageJsonPath2 = packageJsonUrl.pathname;
    if (packageJsonPath2.endsWith("node_modules/package.json")) {
      break;
    }
    const packageConfig2 = getPackageConfig(
      _url2.fileURLToPath.call(void 0, packageJsonUrl),
      resolved
    );
    if (packageConfig2.exists) {
      return packageConfig2;
    }
    const lastPackageJsonUrl = packageJsonUrl;
    packageJsonUrl = new URL("../package.json", packageJsonUrl);
    if (packageJsonUrl.pathname === lastPackageJsonUrl.pathname) {
      break;
    }
  }
  const packageJsonPath = _url2.fileURLToPath.call(void 0, packageJsonUrl);
  const packageConfig = {
    pjsonPath: packageJsonPath,
    exists: false,
    main: void 0,
    name: void 0,
    type: "none",
    exports: void 0,
    imports: void 0
  };
  packageJsonCache.set(packageJsonPath, packageConfig);
  return packageConfig;
}
function fileExists(url) {
  return tryStatSync(_url2.fileURLToPath.call(void 0, url)).isFile();
}
function legacyMainResolve(packageJsonUrl, packageConfig, base) {
  let guess;
  if (packageConfig.main !== void 0) {
    guess = new URL(`./${packageConfig.main}`, packageJsonUrl);
    if (fileExists(guess)) {
      return guess;
    }
    const tries2 = [
      `./${packageConfig.main}.js`,
      `./${packageConfig.main}.json`,
      `./${packageConfig.main}.node`,
      `./${packageConfig.main}/index.js`,
      `./${packageConfig.main}/index.json`,
      `./${packageConfig.main}/index.node`
    ];
    let i2 = -1;
    while (++i2 < tries2.length) {
      guess = new URL(tries2[i2], packageJsonUrl);
      if (fileExists(guess)) {
        break;
      }
      guess = void 0;
    }
    if (guess) {
      emitLegacyIndexDeprecation(
        guess,
        packageJsonUrl,
        base,
        packageConfig.main
      );
      return guess;
    }
  }
  const tries = ["./index.js", "./index.json", "./index.node"];
  let i = -1;
  while (++i < tries.length) {
    guess = new URL(tries[i], packageJsonUrl);
    if (fileExists(guess)) {
      break;
    }
    guess = void 0;
  }
  if (guess) {
    emitLegacyIndexDeprecation(guess, packageJsonUrl, base, packageConfig.main);
    return guess;
  }
  throw new ERR_MODULE_NOT_FOUND(
    _url2.fileURLToPath.call(void 0, new URL(".", packageJsonUrl)),
    _url2.fileURLToPath.call(void 0, base)
  );
}
function finalizeResolution(resolved, base) {
  if (encodedSepRegEx.test(resolved.pathname)) {
    throw new ERR_INVALID_MODULE_SPECIFIER(
      resolved.pathname,
      'must not include encoded "/" or "\\" characters',
      _url2.fileURLToPath.call(void 0, base)
    );
  }
  const path22 = _url2.fileURLToPath.call(void 0, resolved);
  const stats = tryStatSync(path22.endsWith("/") ? path22.slice(-1) : path22);
  if (stats.isDirectory()) {
    const error = new ERR_UNSUPPORTED_DIR_IMPORT(path22, _url2.fileURLToPath.call(void 0, base));
    error.url = String(resolved);
    throw error;
  }
  if (!stats.isFile()) {
    throw new ERR_MODULE_NOT_FOUND(
      path22 || resolved.pathname,
      base && _url2.fileURLToPath.call(void 0, base),
      "module"
    );
  }
  return resolved;
}
function throwImportNotDefined(specifier, packageJsonUrl, base) {
  throw new ERR_PACKAGE_IMPORT_NOT_DEFINED(
    specifier,
    packageJsonUrl && _url2.fileURLToPath.call(void 0, new URL(".", packageJsonUrl)),
    _url2.fileURLToPath.call(void 0, base)
  );
}
function throwExportsNotFound(subpath, packageJsonUrl, base) {
  throw new ERR_PACKAGE_PATH_NOT_EXPORTED(
    _url2.fileURLToPath.call(void 0, new URL(".", packageJsonUrl)),
    subpath,
    base && _url2.fileURLToPath.call(void 0, base)
  );
}
function throwInvalidSubpath(subpath, packageJsonUrl, internal2, base) {
  const reason = `request is not a valid subpath for the "${internal2 ? "imports" : "exports"}" resolution of ${_url2.fileURLToPath.call(void 0, packageJsonUrl)}`;
  throw new ERR_INVALID_MODULE_SPECIFIER(
    subpath,
    reason,
    base && _url2.fileURLToPath.call(void 0, base)
  );
}
function throwInvalidPackageTarget(subpath, target, packageJsonUrl, internal2, base) {
  target = typeof target === "object" && target !== null ? JSON.stringify(target, null, "") : `${target}`;
  throw new ERR_INVALID_PACKAGE_TARGET(
    _url2.fileURLToPath.call(void 0, new URL(".", packageJsonUrl)),
    subpath,
    target,
    internal2,
    base && _url2.fileURLToPath.call(void 0, base)
  );
}
function resolvePackageTargetString(target, subpath, match, packageJsonUrl, base, pattern, internal2, conditions) {
  if (subpath !== "" && !pattern && target[target.length - 1] !== "/") {
    throwInvalidPackageTarget(match, target, packageJsonUrl, internal2, base);
  }
  if (!target.startsWith("./")) {
    if (internal2 && !target.startsWith("../") && !target.startsWith("/")) {
      let isURL = false;
      try {
        new URL(target);
        isURL = true;
      } catch (e) {
      }
      if (!isURL) {
        const exportTarget = pattern ? target.replace(patternRegEx, subpath) : target + subpath;
        return packageResolve(exportTarget, packageJsonUrl, conditions);
      }
    }
    throwInvalidPackageTarget(match, target, packageJsonUrl, internal2, base);
  }
  if (invalidSegmentRegEx.test(target.slice(2))) {
    throwInvalidPackageTarget(match, target, packageJsonUrl, internal2, base);
  }
  const resolved = new URL(target, packageJsonUrl);
  const resolvedPath = resolved.pathname;
  const packagePath = new URL(".", packageJsonUrl).pathname;
  if (!resolvedPath.startsWith(packagePath)) {
    throwInvalidPackageTarget(match, target, packageJsonUrl, internal2, base);
  }
  if (subpath === "") {
    return resolved;
  }
  if (invalidSegmentRegEx.test(subpath)) {
    throwInvalidSubpath(match + subpath, packageJsonUrl, internal2, base);
  }
  if (pattern) {
    return new URL(resolved.href.replace(patternRegEx, subpath));
  }
  return new URL(subpath, resolved);
}
function isArrayIndex(key) {
  const keyNumber = Number(key);
  if (`${keyNumber}` !== key) {
    return false;
  }
  return keyNumber >= 0 && keyNumber < 4294967295;
}
function resolvePackageTarget(packageJsonUrl, target, subpath, packageSubpath, base, pattern, internal2, conditions) {
  if (typeof target === "string") {
    return resolvePackageTargetString(
      target,
      subpath,
      packageSubpath,
      packageJsonUrl,
      base,
      pattern,
      internal2,
      conditions
    );
  }
  if (Array.isArray(target)) {
    const targetList = target;
    if (targetList.length === 0) {
      return null;
    }
    let lastException;
    let i = -1;
    while (++i < targetList.length) {
      const targetItem = targetList[i];
      let resolved;
      try {
        resolved = resolvePackageTarget(
          packageJsonUrl,
          targetItem,
          subpath,
          packageSubpath,
          base,
          pattern,
          internal2,
          conditions
        );
      } catch (error) {
        lastException = error;
        if (error.code === "ERR_INVALID_PACKAGE_TARGET") {
          continue;
        }
        throw error;
      }
      if (resolved === void 0) {
        continue;
      }
      if (resolved === null) {
        lastException = null;
        continue;
      }
      return resolved;
    }
    if (lastException === void 0 || lastException === null) {
      return lastException;
    }
    throw lastException;
  }
  if (typeof target === "object" && target !== null) {
    const keys = Object.getOwnPropertyNames(target);
    let i = -1;
    while (++i < keys.length) {
      const key = keys[i];
      if (isArrayIndex(key)) {
        throw new ERR_INVALID_PACKAGE_CONFIG(
          _url2.fileURLToPath.call(void 0, packageJsonUrl),
          base,
          '"exports" cannot contain numeric property keys.'
        );
      }
    }
    i = -1;
    while (++i < keys.length) {
      const key = keys[i];
      if (key === "default" || conditions && conditions.has(key)) {
        const conditionalTarget = target[key];
        const resolved = resolvePackageTarget(
          packageJsonUrl,
          conditionalTarget,
          subpath,
          packageSubpath,
          base,
          pattern,
          internal2,
          conditions
        );
        if (resolved === void 0) {
          continue;
        }
        return resolved;
      }
    }
    return void 0;
  }
  if (target === null) {
    return null;
  }
  throwInvalidPackageTarget(
    packageSubpath,
    target,
    packageJsonUrl,
    internal2,
    base
  );
}
function isConditionalExportsMainSugar(exports, packageJsonUrl, base) {
  if (typeof exports === "string" || Array.isArray(exports)) {
    return true;
  }
  if (typeof exports !== "object" || exports === null) {
    return false;
  }
  const keys = Object.getOwnPropertyNames(exports);
  let isConditionalSugar = false;
  let i = 0;
  let j = -1;
  while (++j < keys.length) {
    const key = keys[j];
    const curIsConditionalSugar = key === "" || key[0] !== ".";
    if (i++ === 0) {
      isConditionalSugar = curIsConditionalSugar;
    } else if (isConditionalSugar !== curIsConditionalSugar) {
      throw new ERR_INVALID_PACKAGE_CONFIG(
        _url2.fileURLToPath.call(void 0, packageJsonUrl),
        base,
        `"exports" cannot contain some keys starting with '.' and some not. The exports object must either be an object of package subpath keys or an object of main entry condition name keys only.`
      );
    }
  }
  return isConditionalSugar;
}
function packageExportsResolve(packageJsonUrl, packageSubpath, packageConfig, base, conditions) {
  let exports = packageConfig.exports;
  if (isConditionalExportsMainSugar(exports, packageJsonUrl, base)) {
    exports = { ".": exports };
  }
  if (own.call(exports, packageSubpath)) {
    const target = exports[packageSubpath];
    const resolved = resolvePackageTarget(
      packageJsonUrl,
      target,
      "",
      packageSubpath,
      base,
      false,
      false,
      conditions
    );
    if (resolved === null || resolved === void 0) {
      throwExportsNotFound(packageSubpath, packageJsonUrl, base);
    }
    return { resolved, exact: true };
  }
  let bestMatch = "";
  const keys = Object.getOwnPropertyNames(exports);
  let i = -1;
  while (++i < keys.length) {
    const key = keys[i];
    if (key[key.length - 1] === "*" && packageSubpath.startsWith(key.slice(0, -1)) && packageSubpath.length >= key.length && key.length > bestMatch.length) {
      bestMatch = key;
    } else if (key[key.length - 1] === "/" && packageSubpath.startsWith(key) && key.length > bestMatch.length) {
      bestMatch = key;
    }
  }
  if (bestMatch) {
    const target = exports[bestMatch];
    const pattern = bestMatch[bestMatch.length - 1] === "*";
    const subpath = packageSubpath.slice(bestMatch.length - (pattern ? 1 : 0));
    const resolved = resolvePackageTarget(
      packageJsonUrl,
      target,
      subpath,
      bestMatch,
      base,
      pattern,
      false,
      conditions
    );
    if (resolved === null || resolved === void 0) {
      throwExportsNotFound(packageSubpath, packageJsonUrl, base);
    }
    if (!pattern) {
      emitFolderMapDeprecation(bestMatch, packageJsonUrl, true, base);
    }
    return { resolved, exact: pattern };
  }
  throwExportsNotFound(packageSubpath, packageJsonUrl, base);
}
function packageImportsResolve(name, base, conditions) {
  if (name === "#" || name.startsWith("#/")) {
    const reason = "is not a valid internal imports specifier name";
    throw new ERR_INVALID_MODULE_SPECIFIER(name, reason, _url2.fileURLToPath.call(void 0, base));
  }
  let packageJsonUrl;
  const packageConfig = getPackageScopeConfig(base);
  if (packageConfig.exists) {
    packageJsonUrl = _url2.pathToFileURL.call(void 0, packageConfig.pjsonPath);
    const imports = packageConfig.imports;
    if (imports) {
      if (own.call(imports, name)) {
        const resolved = resolvePackageTarget(
          packageJsonUrl,
          imports[name],
          "",
          name,
          base,
          false,
          true,
          conditions
        );
        if (resolved !== null) {
          return { resolved, exact: true };
        }
      } else {
        let bestMatch = "";
        const keys = Object.getOwnPropertyNames(imports);
        let i = -1;
        while (++i < keys.length) {
          const key = keys[i];
          if (key[key.length - 1] === "*" && name.startsWith(key.slice(0, -1)) && name.length >= key.length && key.length > bestMatch.length) {
            bestMatch = key;
          } else if (key[key.length - 1] === "/" && name.startsWith(key) && key.length > bestMatch.length) {
            bestMatch = key;
          }
        }
        if (bestMatch) {
          const target = imports[bestMatch];
          const pattern = bestMatch[bestMatch.length - 1] === "*";
          const subpath = name.slice(bestMatch.length - (pattern ? 1 : 0));
          const resolved = resolvePackageTarget(
            packageJsonUrl,
            target,
            subpath,
            bestMatch,
            base,
            pattern,
            true,
            conditions
          );
          if (resolved !== null) {
            if (!pattern) {
              emitFolderMapDeprecation(bestMatch, packageJsonUrl, false, base);
            }
            return { resolved, exact: pattern };
          }
        }
      }
    }
  }
  throwImportNotDefined(name, packageJsonUrl, base);
}
function getPackageType(url) {
  const packageConfig = getPackageScopeConfig(url);
  return packageConfig.type;
}
function parsePackageName(specifier, base) {
  let separatorIndex = specifier.indexOf("/");
  let validPackageName = true;
  let isScoped = false;
  if (specifier[0] === "@") {
    isScoped = true;
    if (separatorIndex === -1 || specifier.length === 0) {
      validPackageName = false;
    } else {
      separatorIndex = specifier.indexOf("/", separatorIndex + 1);
    }
  }
  const packageName = separatorIndex === -1 ? specifier : specifier.slice(0, separatorIndex);
  let i = -1;
  while (++i < packageName.length) {
    if (packageName[i] === "%" || packageName[i] === "\\") {
      validPackageName = false;
      break;
    }
  }
  if (!validPackageName) {
    throw new ERR_INVALID_MODULE_SPECIFIER(
      specifier,
      "is not a valid package name",
      _url2.fileURLToPath.call(void 0, base)
    );
  }
  const packageSubpath = "." + (separatorIndex === -1 ? "" : specifier.slice(separatorIndex));
  return { packageName, packageSubpath, isScoped };
}
function packageResolve(specifier, base, conditions) {
  const { packageName, packageSubpath, isScoped } = parsePackageName(
    specifier,
    base
  );
  const packageConfig = getPackageScopeConfig(base);
  if (packageConfig.exists) {
    const packageJsonUrl2 = _url2.pathToFileURL.call(void 0, packageConfig.pjsonPath);
    if (packageConfig.name === packageName && packageConfig.exports !== void 0 && packageConfig.exports !== null) {
      return packageExportsResolve(
        packageJsonUrl2,
        packageSubpath,
        packageConfig,
        base,
        conditions
      ).resolved;
    }
  }
  let packageJsonUrl = new URL(
    "./node_modules/" + packageName + "/package.json",
    base
  );
  let packageJsonPath = _url2.fileURLToPath.call(void 0, packageJsonUrl);
  let lastPath;
  do {
    const stat = tryStatSync(packageJsonPath.slice(0, -13));
    if (!stat.isDirectory()) {
      lastPath = packageJsonPath;
      packageJsonUrl = new URL(
        (isScoped ? "../../../../node_modules/" : "../../../node_modules/") + packageName + "/package.json",
        packageJsonUrl
      );
      packageJsonPath = _url2.fileURLToPath.call(void 0, packageJsonUrl);
      continue;
    }
    const packageConfig2 = getPackageConfig(packageJsonPath, specifier, base);
    if (packageConfig2.exports !== void 0 && packageConfig2.exports !== null) {
      return packageExportsResolve(
        packageJsonUrl,
        packageSubpath,
        packageConfig2,
        base,
        conditions
      ).resolved;
    }
    if (packageSubpath === ".") {
      return legacyMainResolve(packageJsonUrl, packageConfig2, base);
    }
    return new URL(packageSubpath, packageJsonUrl);
  } while (packageJsonPath.length !== lastPath.length);
  throw new ERR_MODULE_NOT_FOUND(packageName, _url2.fileURLToPath.call(void 0, base));
}
function isRelativeSpecifier(specifier) {
  if (specifier[0] === ".") {
    if (specifier.length === 1 || specifier[1] === "/") {
      return true;
    }
    if (specifier[1] === "." && (specifier.length === 2 || specifier[2] === "/")) {
      return true;
    }
  }
  return false;
}
function shouldBeTreatedAsRelativeOrAbsolutePath(specifier) {
  if (specifier === "") {
    return false;
  }
  if (specifier[0] === "/") {
    return true;
  }
  return isRelativeSpecifier(specifier);
}
function moduleResolve(specifier, base, conditions) {
  let resolved;
  if (shouldBeTreatedAsRelativeOrAbsolutePath(specifier)) {
    resolved = new URL(specifier, base);
  } else if (specifier[0] === "#") {
    ({ resolved } = packageImportsResolve(specifier, base, conditions));
  } else {
    try {
      resolved = new URL(specifier);
    } catch (e) {
      resolved = packageResolve(specifier, base, conditions);
    }
  }
  return finalizeResolution(resolved, base);
}
function fileURLToPath(id) {
  if (typeof id === "string" && !id.startsWith("file://")) {
    return normalizeSlash(id);
  }
  return normalizeSlash(_url2.fileURLToPath.call(void 0, id));
}
function normalizeid(id) {
  if (typeof id !== "string") {
    id = id.toString();
  }
  if (/(node|data|http|https|file):/.test(id)) {
    return id;
  }
  if (BUILTIN_MODULES.has(id)) {
    return "node:" + id;
  }
  return "file://" + encodeURI(normalizeSlash(id));
}
var DEFAULT_CONDITIONS_SET = /* @__PURE__ */ new Set(["node", "import"]);
var DEFAULT_URL = _url2.pathToFileURL.call(void 0, process.cwd());
var DEFAULT_EXTENSIONS = [".mjs", ".cjs", ".js", ".json"];
var NOT_FOUND_ERRORS = /* @__PURE__ */ new Set(["ERR_MODULE_NOT_FOUND", "ERR_UNSUPPORTED_DIR_IMPORT", "MODULE_NOT_FOUND", "ERR_PACKAGE_PATH_NOT_EXPORTED"]);
function _tryModuleResolve(id, url, conditions) {
  try {
    return moduleResolve(id, url, conditions);
  } catch (error) {
    if (!NOT_FOUND_ERRORS.has(error.code)) {
      throw error;
    }
  }
}
function _resolve(id, options = {}) {
  if (/(node|data|http|https):/.test(id)) {
    return id;
  }
  if (BUILTIN_MODULES.has(id)) {
    return "node:" + id;
  }
  if (_chunkKL7XZQQ2cjs.isAbsolute.call(void 0, id) && _fs3.existsSync.call(void 0, id)) {
    const realPath2 = _fs3.realpathSync.call(void 0, fileURLToPath(id));
    return _url2.pathToFileURL.call(void 0, realPath2).toString();
  }
  const conditionsSet = options.conditions ? new Set(options.conditions) : DEFAULT_CONDITIONS_SET;
  const _urls = (Array.isArray(options.url) ? options.url : [options.url]).filter(Boolean).map((u) => new URL(normalizeid(u.toString())));
  if (_urls.length === 0) {
    _urls.push(DEFAULT_URL);
  }
  const urls = [..._urls];
  for (const url of _urls) {
    if (url.protocol === "file:") {
      urls.push(
        new URL("./", url),
        new URL(joinURL(url.pathname, "_index.js"), url),
        new URL("node_modules", url)
      );
    }
  }
  let resolved;
  for (const url of urls) {
    resolved = _tryModuleResolve(id, url, conditionsSet);
    if (resolved) {
      break;
    }
    for (const prefix of ["", "/index"]) {
      for (const extension of options.extensions || DEFAULT_EXTENSIONS) {
        resolved = _tryModuleResolve(id + prefix + extension, url, conditionsSet);
        if (resolved) {
          break;
        }
      }
      if (resolved) {
        break;
      }
    }
  }
  if (!resolved) {
    const error = new Error(`Cannot find module ${id} imported from ${urls.join(", ")}`);
    error.code = "ERR_MODULE_NOT_FOUND";
    throw error;
  }
  const realPath = _fs3.realpathSync.call(void 0, fileURLToPath(resolved));
  return _url2.pathToFileURL.call(void 0, realPath).toString();
}
function resolveSync(id, options) {
  return _resolve(id, options);
}
function resolvePathSync(id, options) {
  return fileURLToPath(resolveSync(id, options));
}
function resolvePath(id, options) {
  return pcall(resolvePathSync, id, options);
}

// node_modules/.pnpm/@nuxt+kit@3.0.0_rollup@3.7.3/node_modules/@nuxt/kit/dist/index.mjs
var import_jiti = _chunkI7OK7DX6cjs.__toESM.call(void 0, require_lib(), 1);

// node_modules/.pnpm/globby@13.1.3/node_modules/globby/index.js
var import_merge2 = _chunkI7OK7DX6cjs.__toESM.call(void 0, require_merge2(), 1);
var import_fast_glob2 = _chunkI7OK7DX6cjs.__toESM.call(void 0, require_out4(), 1);
var import_dir_glob = _chunkI7OK7DX6cjs.__toESM.call(void 0, require_dir_glob(), 1);



// node_modules/.pnpm/globby@13.1.3/node_modules/globby/ignore.js
var import_fast_glob = _chunkI7OK7DX6cjs.__toESM.call(void 0, require_out4(), 1);
var import_ignore = _chunkI7OK7DX6cjs.__toESM.call(void 0, require_ignore(), 1);
var _process2 = require('process'); var _process3 = _interopRequireDefault2(_process2);



// node_modules/.pnpm/slash@4.0.0/node_modules/slash/index.js
function slash(path3) {
  const isExtendedLengthPath = /^\\\\\?\\/.test(path3);
  const hasNonAscii = /[^\u0000-\u0080]+/.test(path3);
  if (isExtendedLengthPath || hasNonAscii) {
    return path3;
  }
  return path3.replace(/\\/g, "/");
}

// node_modules/.pnpm/globby@13.1.3/node_modules/globby/utilities.js

var _stream2 = require('stream');
var toPath = (urlOrPath) => urlOrPath instanceof URL ? _url2.fileURLToPath.call(void 0, urlOrPath) : urlOrPath;
var FilterStream = class extends _stream2.Transform {
  constructor(filter) {
    super({
      objectMode: true,
      transform(data2, encoding, callback) {
        callback(void 0, filter(data2) ? data2 : void 0);
      }
    });
  }
};
var isNegativePattern = (pattern) => pattern[0] === "!";

// node_modules/.pnpm/globby@13.1.3/node_modules/globby/ignore.js
var ignoreFilesGlobOptions = {
  ignore: [
    "**/node_modules",
    "**/flow-typed",
    "**/coverage",
    "**/.git"
  ],
  absolute: true,
  dot: true
};
var GITIGNORE_FILES_PATTERN = "**/.gitignore";
var applyBaseToPattern = (pattern, base) => isNegativePattern(pattern) ? "!" + _path3.default.posix.join(base, pattern.slice(1)) : _path3.default.posix.join(base, pattern);
var parseIgnoreFile = (file, cwd) => {
  const base = slash(_path3.default.relative(cwd, _path3.default.dirname(file.filePath)));
  return file.content.split(/\r?\n/).filter((line) => line && !line.startsWith("#")).map((pattern) => applyBaseToPattern(pattern, base));
};
var toRelativePath = (fileOrDirectory, cwd) => {
  cwd = slash(cwd);
  if (_path3.default.isAbsolute(fileOrDirectory)) {
    if (slash(fileOrDirectory).startsWith(cwd)) {
      return _path3.default.relative(cwd, fileOrDirectory);
    }
    throw new Error(`Path ${fileOrDirectory} is not in cwd ${cwd}`);
  }
  return fileOrDirectory;
};
var getIsIgnoredPredicate = (files, cwd) => {
  const patterns = files.flatMap((file) => parseIgnoreFile(file, cwd));
  const ignores = (0, import_ignore.default)().add(patterns);
  return (fileOrDirectory) => {
    fileOrDirectory = toPath(fileOrDirectory);
    fileOrDirectory = toRelativePath(fileOrDirectory, cwd);
    return fileOrDirectory ? ignores.ignores(slash(fileOrDirectory)) : false;
  };
};
var normalizeOptions = (options = {}) => ({
  cwd: toPath(options.cwd) || _process3.default.cwd()
});
var isIgnoredByIgnoreFiles = async (patterns, options) => {
  const { cwd } = normalizeOptions(options);
  const paths = await (0, import_fast_glob.default)(patterns, { cwd, ...ignoreFilesGlobOptions });
  const files = await Promise.all(
    paths.map(async (filePath) => ({
      filePath,
      content: await _fs4.default.promises.readFile(filePath, "utf8")
    }))
  );
  return getIsIgnoredPredicate(files, cwd);
};
var isIgnoredByIgnoreFilesSync = (patterns, options) => {
  const { cwd } = normalizeOptions(options);
  const paths = import_fast_glob.default.sync(patterns, { cwd, ...ignoreFilesGlobOptions });
  const files = paths.map((filePath) => ({
    filePath,
    content: _fs4.default.readFileSync(filePath, "utf8")
  }));
  return getIsIgnoredPredicate(files, cwd);
};

// node_modules/.pnpm/globby@13.1.3/node_modules/globby/index.js
var assertPatternsInput = (patterns) => {
  if (patterns.some((pattern) => typeof pattern !== "string")) {
    throw new TypeError("Patterns must be a string or an array of strings");
  }
};
var toPatternsArray = (patterns) => {
  patterns = [...new Set([patterns].flat())];
  assertPatternsInput(patterns);
  return patterns;
};
var checkCwdOption = (options) => {
  if (!options.cwd) {
    return;
  }
  let stat;
  try {
    stat = _fs4.default.statSync(options.cwd);
  } catch (e) {
    return;
  }
  if (!stat.isDirectory()) {
    throw new Error("The `cwd` option must be a path to a directory");
  }
};
var normalizeOptions2 = (options = {}) => {
  options = {
    ignore: [],
    expandDirectories: true,
    ...options,
    cwd: toPath(options.cwd)
  };
  checkCwdOption(options);
  return options;
};
var normalizeArguments = (fn) => async (patterns, options) => fn(toPatternsArray(patterns), normalizeOptions2(options));
var normalizeArgumentsSync = (fn) => (patterns, options) => fn(toPatternsArray(patterns), normalizeOptions2(options));
var getIgnoreFilesPatterns = (options) => {
  const { ignoreFiles, gitignore } = options;
  const patterns = ignoreFiles ? toPatternsArray(ignoreFiles) : [];
  if (gitignore) {
    patterns.push(GITIGNORE_FILES_PATTERN);
  }
  return patterns;
};
var getFilter = async (options) => {
  const ignoreFilesPatterns = getIgnoreFilesPatterns(options);
  return createFilterFunction(
    ignoreFilesPatterns.length > 0 && await isIgnoredByIgnoreFiles(ignoreFilesPatterns, { cwd: options.cwd })
  );
};
var getFilterSync = (options) => {
  const ignoreFilesPatterns = getIgnoreFilesPatterns(options);
  return createFilterFunction(
    ignoreFilesPatterns.length > 0 && isIgnoredByIgnoreFilesSync(ignoreFilesPatterns, { cwd: options.cwd })
  );
};
var createFilterFunction = (isIgnored) => {
  const seen = /* @__PURE__ */ new Set();
  return (fastGlobResult) => {
    const path3 = fastGlobResult.path || fastGlobResult;
    const pathKey = _path3.default.normalize(path3);
    const seenOrIgnored = seen.has(pathKey) || isIgnored && isIgnored(path3);
    seen.add(pathKey);
    return !seenOrIgnored;
  };
};
var unionFastGlobResults = (results, filter) => results.flat().filter((fastGlobResult) => filter(fastGlobResult));
var unionFastGlobStreams = (streams, filter) => (0, import_merge2.default)(streams).pipe(new FilterStream((fastGlobResult) => filter(fastGlobResult)));
var convertNegativePatterns = (patterns, options) => {
  const tasks = [];
  while (patterns.length > 0) {
    const index2 = patterns.findIndex((pattern) => isNegativePattern(pattern));
    if (index2 === -1) {
      tasks.push({ patterns, options });
      break;
    }
    const ignorePattern = patterns[index2].slice(1);
    for (const task of tasks) {
      task.options.ignore.push(ignorePattern);
    }
    if (index2 !== 0) {
      tasks.push({
        patterns: patterns.slice(0, index2),
        options: {
          ...options,
          ignore: [
            ...options.ignore,
            ignorePattern
          ]
        }
      });
    }
    patterns = patterns.slice(index2 + 1);
  }
  return tasks;
};
var getDirGlobOptions = (options, cwd) => ({
  ...cwd ? { cwd } : {},
  ...Array.isArray(options) ? { files: options } : options
});
var generateTasks = async (patterns, options) => {
  const globTasks = convertNegativePatterns(patterns, options);
  const { cwd, expandDirectories } = options;
  if (!expandDirectories) {
    return globTasks;
  }
  const patternExpandOptions = getDirGlobOptions(expandDirectories, cwd);
  const ignoreExpandOptions = cwd ? { cwd } : void 0;
  return Promise.all(
    globTasks.map(async (task) => {
      let { patterns: patterns2, options: options2 } = task;
      [
        patterns2,
        options2.ignore
      ] = await Promise.all([
        (0, import_dir_glob.default)(patterns2, patternExpandOptions),
        (0, import_dir_glob.default)(options2.ignore, ignoreExpandOptions)
      ]);
      return { patterns: patterns2, options: options2 };
    })
  );
};
var generateTasksSync = (patterns, options) => {
  const globTasks = convertNegativePatterns(patterns, options);
  const { cwd, expandDirectories } = options;
  if (!expandDirectories) {
    return globTasks;
  }
  const patternExpandOptions = getDirGlobOptions(expandDirectories, cwd);
  const ignoreExpandOptions = cwd ? { cwd } : void 0;
  return globTasks.map((task) => {
    let { patterns: patterns2, options: options2 } = task;
    patterns2 = import_dir_glob.default.sync(patterns2, patternExpandOptions);
    options2.ignore = import_dir_glob.default.sync(options2.ignore, ignoreExpandOptions);
    return { patterns: patterns2, options: options2 };
  });
};
var globby = normalizeArguments(async (patterns, options) => {
  const [
    tasks,
    filter
  ] = await Promise.all([
    generateTasks(patterns, options),
    getFilter(options)
  ]);
  const results = await Promise.all(tasks.map((task) => (0, import_fast_glob2.default)(task.patterns, task.options)));
  return unionFastGlobResults(results, filter);
});
var globbySync = normalizeArgumentsSync((patterns, options) => {
  const tasks = generateTasksSync(patterns, options);
  const filter = getFilterSync(options);
  const results = tasks.map((task) => import_fast_glob2.default.sync(task.patterns, task.options));
  return unionFastGlobResults(results, filter);
});
var globbyStream = normalizeArgumentsSync((patterns, options) => {
  const tasks = generateTasksSync(patterns, options);
  const filter = getFilterSync(options);
  const streams = tasks.map((task) => import_fast_glob2.default.stream(task.patterns, task.options));
  return unionFastGlobStreams(streams, filter);
});
var isDynamicPattern = normalizeArgumentsSync(
  (patterns, options) => patterns.some((pattern) => import_fast_glob2.default.isDynamicPattern(pattern, options))
);
var generateGlobTasks = normalizeArguments(generateTasks);
var generateGlobTasksSync = normalizeArgumentsSync(generateTasksSync);

// node_modules/.pnpm/@nuxt+kit@3.0.0_rollup@3.7.3/node_modules/@nuxt/kit/dist/index.mjs
var import_ignore4 = _chunkI7OK7DX6cjs.__toESM.call(void 0, require_ignore(), 1);

// node_modules/.pnpm/std-env@3.3.1/node_modules/std-env/dist/index.mjs
var providers = [
  ["APPVEYOR"],
  ["AZURE_PIPELINES", "SYSTEM_TEAMFOUNDATIONCOLLECTIONURI"],
  ["AZURE_STATIC", "INPUT_AZURE_STATIC_WEB_APPS_API_TOKEN"],
  ["APPCIRCLE", "AC_APPCIRCLE"],
  ["BAMBOO", "bamboo_planKey"],
  ["BITBUCKET", "BITBUCKET_COMMIT"],
  ["BITRISE", "BITRISE_IO"],
  ["BUDDY", "BUDDY_WORKSPACE_ID"],
  ["BUILDKITE"],
  ["CIRCLE", "CIRCLECI"],
  ["CIRRUS", "CIRRUS_CI"],
  ["CLOUDFLARE_PAGES", "CF_PAGES", { ci: true }],
  ["CODEBUILD", "CODEBUILD_BUILD_ARN"],
  ["CODEFRESH", "CF_BUILD_ID"],
  ["DRONE"],
  ["DRONE", "DRONE_BUILD_EVENT"],
  ["DSARI"],
  ["GITHUB_ACTIONS"],
  ["GITLAB", "GITLAB_CI"],
  ["GITLAB", "CI_MERGE_REQUEST_ID"],
  ["GOCD", "GO_PIPELINE_LABEL"],
  ["LAYERCI"],
  ["HUDSON", "HUDSON_URL"],
  ["JENKINS", "JENKINS_URL"],
  ["MAGNUM"],
  ["NETLIFY"],
  ["NETLIFY", "NETLIFY_LOCAL", { ci: false }],
  ["NEVERCODE"],
  ["RENDER"],
  ["SAIL", "SAILCI"],
  ["SEMAPHORE"],
  ["SCREWDRIVER"],
  ["SHIPPABLE"],
  ["SOLANO", "TDDIUM"],
  ["STRIDER"],
  ["TEAMCITY", "TEAMCITY_VERSION"],
  ["TRAVIS"],
  ["VERCEL", "NOW_BUILDER"],
  ["APPCENTER", "APPCENTER_BUILD_ID"],
  ["CODESANDBOX", "CODESANDBOX_SSE", { ci: false }],
  ["STACKBLITZ"],
  ["STORMKIT"],
  ["CLEAVR"]
];
function detectProvider(env) {
  for (const provider2 of providers) {
    const envName = provider2[1] || provider2[0];
    if (env[envName]) {
      return {
        name: provider2[0].toLowerCase(),
        ...provider2[2]
      };
    }
  }
  if (env.SHELL && env.SHELL === "/bin/jsh") {
    return {
      name: "stackblitz",
      ci: false
    };
  }
  return {
    name: "",
    ci: false
  };
}
var processShim = typeof process !== "undefined" ? process : {};
var envShim = processShim.env || {};
var providerInfo = detectProvider(envShim);
var nodeENV = envShim.NODE_ENV || "";
var platform = processShim.platform;
var provider = providerInfo.name;
var isCI = toBoolean(envShim.CI) || providerInfo.ci !== false;
var hasTTY = toBoolean(processShim.stdout && processShim.stdout.isTTY);
var isDebug = toBoolean(envShim.DEBUG);
var isTest = toBoolean(envShim.TEST);
var isDevelopment = nodeENV === "dev" || nodeENV === "development";
var isMinimal = toBoolean(envShim.MINIMAL) || isCI || isTest || !hasTTY;
var isWindows2 = /^win/i.test(platform);
var isLinux = /^linux/i.test(platform);
var isMacOS = /^darwin/i.test(platform);
function toBoolean(val) {
  return val ? val !== "false" : false;
}

// node_modules/.pnpm/@nuxt+schema@3.0.0_rollup@3.7.3/node_modules/@nuxt/schema/dist/index.mjs
var import_postcss_import_resolver = _chunkI7OK7DX6cjs.__toESM.call(void 0, require_postcss_import_resolver(), 1);
var adhoc = defineUntypedSchema({
  components: {
    $resolve: (val) => {
      if (Array.isArray(val)) {
        return { dirs: val };
      }
      if (val === void 0 || val === true) {
        return { dirs: [{ path: "~/components/global", global: true }, "~/components"] };
      }
      return val;
    }
  },
  imports: {
    global: false,
    dirs: []
  },
  pages: void 0,
  telemetry: void 0
});
var app = defineUntypedSchema({
  vue: {
    compilerOptions: {}
  },
  app: {
    baseURL: {
      $resolve: async (val) => val || process.env.NUXT_APP_BASE_URL || "/"
    },
    buildAssetsDir: {
      $resolve: async (val) => val || process.env.NUXT_APP_BUILD_ASSETS_DIR || "/_nuxt/"
    },
    cdnURL: {
      $resolve: async (val, get) => {
        var _a;
        return await get("dev") ? "" : ((_a = process.env.NUXT_APP_CDN_URL) != null ? _a : val) || "";
      }
    },
    head: {
      $resolve: async (val, get) => {
        var _a, _b;
        const resolved = _chunkKL7XZQQ2cjs.defu.call(void 0, val, await get("meta"), {
          meta: [],
          link: [],
          style: [],
          script: [],
          noscript: []
        });
        if (!((_a = resolved.meta.find((m) => m.charset)) == null ? void 0 : _a.charset)) {
          resolved.meta.unshift({ charset: resolved.charset || "utf-8" });
        }
        if (!((_b = resolved.meta.find((m) => m.name === "viewport")) == null ? void 0 : _b.content)) {
          resolved.meta.unshift({ name: "viewport", content: resolved.viewport || "width=device-width, initial-scale=1" });
        }
        resolved.meta = resolved.meta.filter(Boolean);
        resolved.link = resolved.link.filter(Boolean);
        resolved.style = resolved.style.filter(Boolean);
        resolved.script = resolved.script.filter(Boolean);
        resolved.noscript = resolved.noscript.filter(Boolean);
        return resolved;
      }
    },
    layoutTransition: false,
    pageTransition: false,
    keepalive: false,
    rootId: "__nuxt",
    rootTag: "div"
  },
  plugins: [],
  css: {
    $resolve: (val) => (val != null ? val : []).map((c) => c.src || c)
  }
});
var build = defineUntypedSchema({
  builder: {
    $resolve: async (val, get) => {
      if (typeof val === "object") {
        return val;
      }
      const map = {
        vite: "@nuxt/vite-builder",
        webpack: "@nuxt/webpack-builder"
      };
      return map[val] || val || (await get("vite") === false ? map.webpack : map.vite);
    }
  },
  sourcemap: {
    $resolve: async (val, get) => {
      if (typeof val === "boolean") {
        return { server: val, client: val };
      }
      return _chunkKL7XZQQ2cjs.defu.call(void 0, val, {
        server: true,
        client: await get("dev")
      });
    }
  },
  build: {
    transpile: {
      $resolve: (val) => [].concat(val).filter(Boolean)
    },
    templates: [],
    analyze: {
      $resolve: async (val, get) => {
        if (val !== true) {
          return val != null ? val : false;
        }
        const rootDir = await get("rootDir");
        return {
          template: "treemap",
          projectRoot: rootDir,
          filename: _chunkKL7XZQQ2cjs.join.call(void 0, rootDir, ".nuxt/stats", "{name}.html")
        };
      }
    }
  }
});
var common = defineUntypedSchema({
  extends: null,
  theme: null,
  rootDir: {
    $resolve: (val) => typeof val === "string" ? _chunkKL7XZQQ2cjs.resolve.call(void 0, val) : process.cwd()
  },
  workspaceDir: {
    $resolve: async (val, get) => val ? _chunkKL7XZQQ2cjs.resolve.call(void 0, await get("rootDir"), val) : await findWorkspaceDir(await get("rootDir")).catch(() => get("rootDir"))
  },
  srcDir: {
    $resolve: async (val, get) => _chunkKL7XZQQ2cjs.resolve.call(void 0, await get("rootDir"), val || ".")
  },
  serverDir: {
    $resolve: async (val, get) => _chunkKL7XZQQ2cjs.resolve.call(void 0, await get("rootDir"), val || _chunkKL7XZQQ2cjs.resolve.call(void 0, await get("srcDir"), "server"))
  },
  buildDir: {
    $resolve: async (val, get) => _chunkKL7XZQQ2cjs.resolve.call(void 0, await get("rootDir"), val || ".nuxt")
  },
  modulesDir: {
    $default: ["node_modules"],
    $resolve: async (val, get) => [
      ...await Promise.all(val.map(async (dir) => _chunkKL7XZQQ2cjs.resolve.call(void 0, await get("rootDir"), dir))),
      _chunkKL7XZQQ2cjs.resolve.call(void 0, process.cwd(), "node_modules")
    ]
  },
  dev: Boolean(isDevelopment),
  test: Boolean(isDevelopment),
  debug: {
    $resolve: async (val, get) => val != null ? val : isDebug
  },
  ssr: {
    $resolve: (val) => val != null ? val : true
  },
  modules: [],
  dir: {
    assets: "assets",
    layouts: "layouts",
    middleware: "middleware",
    pages: "pages",
    plugins: "plugins",
    public: {
      $resolve: async (val, get) => val || await get("dir.static") || "public"
    },
    static: {
      $schema: { deprecated: "use `dir.public` option instead" },
      $resolve: async (val, get) => val || await get("dir.public") || "public"
    }
  },
  extensions: {
    $resolve: (val) => [".js", ".jsx", ".mjs", ".ts", ".tsx", ".vue"].concat(val).filter(Boolean)
  },
  alias: {
    $resolve: async (val, get) => ({
      "~~": await get("rootDir"),
      "@@": await get("rootDir"),
      "~": await get("srcDir"),
      "@": await get("srcDir"),
      [await get("dir.assets")]: _chunkKL7XZQQ2cjs.join.call(void 0, await get("srcDir"), await get("dir.assets")),
      [await get("dir.public")]: _chunkKL7XZQQ2cjs.join.call(void 0, await get("srcDir"), await get("dir.public")),
      ...val
    })
  },
  ignoreOptions: void 0,
  ignorePrefix: "-",
  ignore: {
    $resolve: async (val, get) => [
      "**/*.stories.{js,ts,jsx,tsx}",
      "**/*.{spec,test}.{js,ts,jsx,tsx}",
      "**/*.d.ts",
      ".output",
      await get("ignorePrefix") && `**/${await get("ignorePrefix")}*.*`
    ].concat(val).filter(Boolean)
  },
  watchers: {
    rewatchOnRawEvents: void 0,
    webpack: {
      aggregateTimeout: 1e3
    },
    chokidar: {
      ignoreInitial: true
    }
  },
  hooks: null,
  runtimeConfig: {
    $resolve: async (val, get) => _chunkKL7XZQQ2cjs.defu.call(void 0, val, {
      public: {},
      app: {
        baseURL: (await get("app")).baseURL,
        buildAssetsDir: (await get("app")).buildAssetsDir,
        cdnURL: (await get("app")).cdnURL
      }
    })
  },
  appConfig: {}
});
var dev = defineUntypedSchema({
  devServer: {
    https: false,
    port: process.env.NUXT_PORT || process.env.NITRO_PORT || process.env.PORT || 3e3,
    host: process.env.NUXT_HOST || process.env.NITRO_HOST || process.env.HOST || "localhost",
    url: "http://localhost:3000"
  }
});
var experimental = defineUntypedSchema({
  experimental: {
    asyncEntry: {
      $resolve: (val) => val != null ? val : false
    },
    reactivityTransform: false,
    externalVue: true,
    treeshakeClientOnly: true,
    viteNode: {
      $resolve: (val) => {
        val = process.env.EXPERIMENTAL_VITE_NODE ? true : val;
        if (val === true) {
          console.warn("`vite-node` is now enabled by default. You can safely remove `experimental.viteNode` from your config.");
        } else if (val === false) {
          console.warn("`vite-node` is now enabled by default. To disable it, set `vite.devBundler` to `legacy` instead.");
        }
        return val != null ? val : true;
      }
    },
    viteServerDynamicImports: true,
    inlineSSRStyles: {
      async $resolve(val, get) {
        if (val === false || await get("dev") || await get("ssr") === false || await get("builder") === "@nuxt/webpack-builder") {
          return false;
        }
        return val != null ? val : true;
      }
    },
    noScripts: false,
    payloadExtraction: {
      async $resolve(enabled, get) {
        enabled = enabled != null ? enabled : false;
        if (enabled) {
          console.warn("Using experimental payload extraction for full-static output. You can opt-out by setting `experimental.payloadExtraction` to `false`.");
        }
        return enabled;
      }
    },
    crossOriginPrefetch: false,
    writeEarlyHints: false
  }
});
var generate = defineUntypedSchema({
  generate: {
    routes: [],
    exclude: []
  }
});
var internal = defineUntypedSchema({
  _majorVersion: 3,
  _legacyGenerate: false,
  _start: false,
  _build: false,
  _generate: false,
  _prepare: false,
  _cli: false,
  _requiredModules: {},
  _nuxtConfigFile: void 0,
  _nuxtConfigFiles: [],
  appDir: "",
  _installedModules: [],
  _modules: []
});
var nitro = defineUntypedSchema({
  nitro: {
    routeRules: {
      $resolve: async (val, get) => ({
        ...await get("routeRules") || {},
        ...val || {}
      })
    }
  },
  routeRules: {},
  serverHandlers: [],
  devServerHandlers: []
});
var postcss = defineUntypedSchema({
  postcss: {
    config: false,
    plugins: {
      "postcss-import": {
        $resolve: async (val, get) => val !== false ? _chunkKL7XZQQ2cjs.defu.call(void 0, val || {}, {
          resolve: (0, import_postcss_import_resolver.default)({
            alias: { ...await get("alias") },
            modules: [
              await get("srcDir"),
              await get("rootDir"),
              ...await get("modulesDir")
            ]
          })
        }) : val
      },
      "postcss-url": {},
      autoprefixer: {},
      cssnano: {
        $resolve: async (val, get) => val != null ? val : !(await get("dev") && {
          preset: ["default", {
            minifyFontValues: { removeQuotes: false }
          }]
        })
      }
    }
  }
});
var router = defineUntypedSchema({
  router: {
    options: {}
  }
});
var typescript = defineUntypedSchema({
  typescript: {
    strict: true,
    includeWorkspace: false,
    typeCheck: false,
    tsConfig: {},
    shim: true
  }
});
var vite = defineUntypedSchema({
  vite: {
    root: {
      $resolve: async (val, get) => val != null ? val : await get("srcDir")
    },
    mode: {
      $resolve: async (val, get) => val != null ? val : await get("dev") ? "development" : "production"
    },
    logLevel: "warn",
    define: {
      $resolve: async (val, get) => ({
        "process.dev": await get("dev"),
        ...val || {}
      })
    },
    resolve: {
      extensions: [".mjs", ".js", ".ts", ".jsx", ".tsx", ".json", ".vue"]
    },
    publicDir: {
      $resolve: async (val, get) => val != null ? val : _chunkKL7XZQQ2cjs.resolve.call(void 0, await get("srcDir"), (await get("dir")).public)
    },
    vue: {
      isProduction: {
        $resolve: async (val, get) => val != null ? val : !await get("dev")
      },
      template: {
        compilerOptions: {
          $resolve: async (val, get) => val != null ? val : (await get("vue")).compilerOptions
        }
      }
    },
    optimizeDeps: {
      exclude: {
        $resolve: async (val, get) => [
          ...val || [],
          ...(await get("build.transpile")).filter((i) => typeof i === "string"),
          "vue-demi"
        ]
      }
    },
    esbuild: {
      jsxFactory: "h",
      jsxFragment: "Fragment",
      tsconfigRaw: "{}"
    },
    clearScreen: false,
    build: {
      assetsDir: {
        $resolve: async (val, get) => val != null ? val : withoutLeadingSlash((await get("app")).buildAssetsDir)
      },
      emptyOutDir: false
    },
    server: {
      fs: {
        allow: {
          $resolve: async (val, get) => [
            await get("buildDir"),
            await get("srcDir"),
            await get("rootDir"),
            await get("workspaceDir"),
            ...await get("modulesDir"),
            ...val != null ? val : []
          ]
        }
      }
    }
  }
});
var webpack = defineUntypedSchema({
  webpack: {
    analyze: {
      $resolve: async (val, get) => {
        if (val !== true) {
          return val != null ? val : false;
        }
        const rootDir = await get("rootDir");
        return {
          template: "treemap",
          projectRoot: rootDir,
          filename: _chunkKL7XZQQ2cjs.join.call(void 0, rootDir, ".nuxt/stats", "{name}.html")
        };
      }
    },
    profile: process.argv.includes("--profile"),
    extractCSS: true,
    cssSourceMap: {
      $resolve: async (val, get) => val != null ? val : await get("dev")
    },
    serverURLPolyfill: "url",
    filenames: {
      app: ({ isDev }) => isDev ? `[name].js` : `[contenthash:7].js`,
      chunk: ({ isDev }) => isDev ? `[name].js` : `[contenthash:7].js`,
      css: ({ isDev }) => isDev ? "[name].css" : "css/[contenthash:7].css",
      img: ({ isDev }) => isDev ? "[path][name].[ext]" : "img/[name].[contenthash:7].[ext]",
      font: ({ isDev }) => isDev ? "[path][name].[ext]" : "fonts/[name].[contenthash:7].[ext]",
      video: ({ isDev }) => isDev ? "[path][name].[ext]" : "videos/[name].[contenthash:7].[ext]"
    },
    loaders: {
      $resolve: async (val, get) => {
        const styleLoaders = [
          "css",
          "cssModules",
          "less",
          "sass",
          "scss",
          "stylus",
          "vueStyle"
        ];
        for (const name of styleLoaders) {
          const loader = val[name];
          if (loader && loader.sourceMap === void 0) {
            loader.sourceMap = Boolean(await get("build.cssSourceMap"));
          }
        }
        return val;
      },
      file: { esModule: false },
      fontUrl: { esModule: false, limit: 1e3 },
      imgUrl: { esModule: false, limit: 1e3 },
      pugPlain: {},
      vue: {
        productionMode: { $resolve: async (val, get) => val != null ? val : !await get("dev") },
        transformAssetUrls: {
          video: "src",
          source: "src",
          object: "src",
          embed: "src"
        },
        compilerOptions: { $resolve: async (val, get) => val != null ? val : await get("vue.compilerOptions") }
      },
      css: {
        importLoaders: 0,
        url: {
          filter: (url, resourcePath) => !url.startsWith("/")
        },
        esModule: false
      },
      cssModules: {
        importLoaders: 0,
        url: {
          filter: (url, resourcePath) => !url.startsWith("/")
        },
        esModule: false,
        modules: {
          localIdentName: "[local]_[hash:base64:5]"
        }
      },
      less: {},
      sass: {
        sassOptions: {
          indentedSyntax: true
        }
      },
      scss: {},
      stylus: {},
      vueStyle: {}
    },
    plugins: [],
    terser: {},
    aggressiveCodeRemoval: false,
    optimizeCSS: {
      $resolve: async (val, get) => val != null ? val : await get("build.extractCSS") ? {} : false
    },
    optimization: {
      runtimeChunk: "single",
      minimize: { $resolve: async (val, get) => val != null ? val : !await get("dev") },
      minimizer: void 0,
      splitChunks: {
        chunks: "all",
        automaticNameDelimiter: "/",
        cacheGroups: {}
      }
    },
    postcss: {
      execute: void 0,
      postcssOptions: {
        config: {
          $resolve: async (val, get) => val != null ? val : await get("postcss.config")
        },
        plugins: {
          $resolve: async (val, get) => val != null ? val : await get("postcss.plugins")
        }
      },
      sourceMap: void 0,
      implementation: void 0,
      order: ""
    },
    devMiddleware: {
      stats: "none"
    },
    hotMiddleware: {},
    friendlyErrors: true,
    warningIgnoreFilters: []
  }
});
var index = {
  ...adhoc,
  ...app,
  ...build,
  ...common,
  ...dev,
  ...experimental,
  ...generate,
  ...internal,
  ...nitro,
  ...postcss,
  ...router,
  ...typescript,
  ...vite,
  ...webpack
};

// node_modules/.pnpm/@nuxt+kit@3.0.0_rollup@3.7.3/node_modules/@nuxt/kit/dist/index.mjs
var import_hash_sum = _chunkI7OK7DX6cjs.__toESM.call(void 0, require_hash_sum(), 1);
var logger = import_consola.default;
var nuxtCtx = getContext("nuxt");
function useNuxt() {
  const instance = nuxtCtx.tryUse();
  if (!instance) {
    throw new Error("Nuxt instance is unavailable!");
  }
  return instance;
}
function tryUseNuxt() {
  return nuxtCtx.tryUse();
}
async function checkNuxtCompatibility(constraints, nuxt = useNuxt()) {
  const issues = [];
  if (constraints.nuxt) {
    const nuxtVersion = getNuxtVersion(nuxt);
    const nuxtSemanticVersion = nuxtVersion.replace(/-[0-9]+\.[0-9a-f]{7,8}/, "");
    if (!(0, import_satisfies.default)(nuxtSemanticVersion, constraints.nuxt, { includePrerelease: true })) {
      issues.push({
        name: "nuxt",
        message: `Nuxt version \`${constraints.nuxt}\` is required but currently using \`${nuxtVersion}\``
      });
    }
  }
  if (isNuxt2(nuxt)) {
    const bridgeRequirement = constraints.bridge;
    const hasBridge = !!nuxt.options.bridge;
    if (bridgeRequirement === true && !hasBridge) {
      issues.push({
        name: "bridge",
        message: "Nuxt bridge is required"
      });
    } else if (bridgeRequirement === false && hasBridge) {
      issues.push({
        name: "bridge",
        message: "Nuxt bridge is not supported"
      });
    }
  }
  await nuxt.callHook("kit:compatibility", constraints, issues);
  issues.toString = () => issues.map((issue) => ` - [${issue.name}] ${issue.message}`).join("\n");
  return issues;
}
function isNuxt2(nuxt = useNuxt()) {
  return getNuxtVersion(nuxt).startsWith("2.");
}
function getNuxtVersion(nuxt = useNuxt()) {
  var _a;
  const version2 = ((nuxt == null ? void 0 : nuxt._version) || (nuxt == null ? void 0 : nuxt.version) || ((_a = nuxt == null ? void 0 : nuxt.constructor) == null ? void 0 : _a.version) || "").replace(/^v/g, "");
  if (!version2) {
    throw new Error("Cannot determine nuxt version! Is current instance passed?");
  }
  return version2;
}
async function compileTemplate(template, ctx) {
  const data2 = { ...ctx, options: template.options };
  if (template.src) {
    try {
      const srcContents = await _fs3.promises.readFile(template.src, "utf-8");
      return (0, import_lodash.default)(srcContents, {})(data2);
    } catch (err) {
      console.error("Error compiling template: ", template);
      throw err;
    }
  }
  if (template.getContents) {
    return template.getContents(data2);
  }
  throw new Error("Invalid template: " + JSON.stringify(template));
}
var serialize = (data2) => JSON.stringify(data2, null, 2).replace(/"{(.+)}"(?=,?$)/gm, (r2) => JSON.parse(r2).replace(/^{(.*)}$/, "$1"));
var importSources = (sources, { lazy = false } = {}) => {
  if (!Array.isArray(sources)) {
    sources = [sources];
  }
  return sources.map((src) => {
    if (lazy) {
      return `const ${genSafeVariableName(src)} = ${genDynamicImport(src, { comment: `webpackChunkName: ${JSON.stringify(src)}` })}`;
    }
    return genImport(src, genSafeVariableName(src));
  }).join("\n");
};
var importName = genSafeVariableName;
var templateUtils = { serialize, importName, importSources };
function defineNuxtModule(definition) {
  if (!definition.meta) {
    definition.meta = {};
  }
  if (definition.meta.configKey === void 0) {
    definition.meta.configKey = definition.meta.name;
  }
  async function getOptions2(inlineOptions, nuxt = useNuxt()) {
    const configKey = definition.meta.configKey || definition.meta.name;
    const _defaults = definition.defaults instanceof Function ? definition.defaults(nuxt) : definition.defaults;
    let _options = _chunkKL7XZQQ2cjs.defu.call(void 0, inlineOptions, nuxt.options[configKey], _defaults);
    if (definition.schema) {
      _options = await applyDefaults(definition.schema, _options);
    }
    return Promise.resolve(_options);
  }
  async function normalizedModule(inlineOptions, nuxt) {
    var _a;
    if (!nuxt) {
      nuxt = tryUseNuxt() || this.nuxt;
    }
    const uniqueKey = definition.meta.name || definition.meta.configKey;
    if (uniqueKey) {
      nuxt.options._requiredModules = nuxt.options._requiredModules || {};
      if (nuxt.options._requiredModules[uniqueKey]) {
        return;
      }
      nuxt.options._requiredModules[uniqueKey] = true;
    }
    if (definition.meta.compatibility) {
      const issues = await checkNuxtCompatibility(definition.meta.compatibility, nuxt);
      if (issues.length) {
        logger.warn(`Module \`${definition.meta.name}\` is disabled due to incompatibility issues:
${issues.toString()}`);
        return;
      }
    }
    nuxt2Shims(nuxt);
    const _options = await getOptions2(inlineOptions, nuxt);
    if (definition.hooks) {
      nuxt.hooks.addHooks(definition.hooks);
    }
    await ((_a = definition.setup) == null ? void 0 : _a.call(null, _options, nuxt));
  }
  normalizedModule.getMeta = () => Promise.resolve(definition.meta);
  normalizedModule.getOptions = getOptions2;
  return normalizedModule;
}
var NUXT2_SHIMS_KEY = "__nuxt2_shims_key__";
function nuxt2Shims(nuxt) {
  if (!isNuxt2(nuxt) || nuxt[NUXT2_SHIMS_KEY]) {
    return;
  }
  nuxt[NUXT2_SHIMS_KEY] = true;
  nuxt.hooks = nuxt;
  if (!nuxtCtx.tryUse()) {
    nuxtCtx.set(nuxt);
    nuxt.hook("close", () => nuxtCtx.unset());
  }
  let virtualTemplates;
  nuxt.hook("builder:prepared", (_builder, buildOptions) => {
    virtualTemplates = buildOptions.templates.filter((t) => t.getContents);
    for (const template of virtualTemplates) {
      buildOptions.templates.splice(buildOptions.templates.indexOf(template), 1);
    }
  });
  nuxt.hook("build:templates", async (templates) => {
    const context = {
      nuxt,
      utils: templateUtils,
      app: {
        dir: nuxt.options.srcDir,
        extensions: nuxt.options.extensions,
        plugins: nuxt.options.plugins,
        templates: [
          ...templates.templatesFiles,
          ...virtualTemplates
        ],
        templateVars: templates.templateVars
      }
    };
    for await (const template of virtualTemplates) {
      const contents = await compileTemplate({ ...template, src: "" }, context);
      await _fs3.promises.mkdir(_chunkKL7XZQQ2cjs.dirname.call(void 0, template.dst), { recursive: true });
      await _fs3.promises.writeFile(template.dst, contents);
    }
  });
}
var _require = (0, import_jiti.default)(process.cwd(), { interopDefault: true, esmResolve: true });
function extendWebpackConfig(fn, options = {}) {
  const nuxt = useNuxt();
  if (options.dev === false && nuxt.options.dev) {
    return;
  }
  if (options.build === false && nuxt.options.build) {
    return;
  }
  nuxt.hook("webpack:config", (configs) => {
    if (options.server !== false) {
      const config = configs.find((i) => i.name === "server");
      if (config) {
        fn(config);
      }
    }
    if (options.client !== false) {
      const config = configs.find((i) => i.name === "client");
      if (config) {
        fn(config);
      }
    }
  });
}
function extendViteConfig(fn, options = {}) {
  const nuxt = useNuxt();
  if (options.dev === false && nuxt.options.dev) {
    return;
  }
  if (options.build === false && nuxt.options.build) {
    return;
  }
  if (options.server !== false && options.client !== false) {
    return nuxt.hook("vite:extend", ({ config }) => fn(config));
  }
  nuxt.hook("vite:extendConfig", (config, { isClient, isServer }) => {
    if (options.server !== false && isServer) {
      return fn(config);
    }
    if (options.client !== false && isClient) {
      return fn(config);
    }
  });
}
function addWebpackPlugin(plugin, options) {
  extendWebpackConfig((config) => {
    config.plugins = config.plugins || [];
    if (Array.isArray(plugin)) {
      config.plugins.push(...plugin);
    } else {
      config.plugins.push(plugin);
    }
  }, options);
}
function addVitePlugin(plugin, options) {
  extendViteConfig((config) => {
    config.plugins = config.plugins || [];
    if (Array.isArray(plugin)) {
      config.plugins.push(...plugin);
    } else {
      config.plugins.push(plugin);
    }
  }, options);
}

// src/nuxt.ts
var nuxt_default = defineNuxtModule({
  setup(options) {
    options.exclude = options.exclude || [/[\\/]node_modules[\\/]/, /[\\/]\.git[\\/]/, /[\\/]\.nuxt[\\/]/];
    addWebpackPlugin(_chunkVL6W44BBcjs.unplugin_default.webpack(options));
    addVitePlugin(_chunkVL6W44BBcjs.unplugin_default.vite(options));
  }
});


exports.default = nuxt_default;
/*!
 * fill-range <https://github.com/jonschlinkert/fill-range>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-extglob <https://github.com/jonschlinkert/is-extglob>
 *
 * Copyright (c) 2014-2016, Jon Schlinkert.
 * Licensed under the MIT License.
 */
/*!
 * is-glob <https://github.com/jonschlinkert/is-glob>
 *
 * Copyright (c) 2014-2017, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/*!
 * to-regex-range <https://github.com/micromatch/to-regex-range>
 *
 * Copyright (c) 2015-present, Jon Schlinkert.
 * Released under the MIT License.
 */
/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/*! run-parallel. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.default = module.exports;